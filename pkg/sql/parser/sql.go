// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:558
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PGCOPY = lex.PGCOPY
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PGCOPY",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8317

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	428, 57,
	-2, 899,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 734,
	-2, 0,
	-1, 60,
	102, 899,
	174, 899,
	376, 899,
	377, 899,
	-2, 0,
	-1, 74,
	114, 873,
	127, 873,
	182, 873,
	208, 873,
	239, 873,
	247, 873,
	373, 873,
	-2, 862,
	-1, 110,
	198, 551,
	363, 551,
	-2, 0,
	-1, 115,
	4, 901,
	20, 901,
	21, 901,
	22, 901,
	23, 901,
	25, 901,
	30, 901,
	35, 901,
	36, 901,
	37, 901,
	38, 901,
	39, 901,
	40, 901,
	41, 901,
	42, 901,
	43, 901,
	44, 901,
	46, 901,
	47, 901,
	48, 901,
	49, 901,
	50, 901,
	51, 901,
	54, 901,
	55, 901,
	56, 901,
	57, 901,
	59, 901,
	60, 901,
	64, 901,
	65, 901,
	66, 901,
	67, 901,
	68, 901,
	70, 901,
	71, 901,
	72, 901,
	73, 901,
	75, 901,
	77, 901,
	78, 901,
	81, 901,
	82, 901,
	83, 901,
	91, 901,
	92, 901,
	93, 901,
	94, 901,
	95, 901,
	96, 901,
	97, 901,
	98, 901,
	100, 901,
	102, 901,
	104, 901,
	107, 901,
	108, 901,
	110, 901,
	111, 901,
	115, 901,
	116, 901,
	117, 901,
	118, 901,
	119, 901,
	120, 901,
	121, 901,
	122, 901,
	123, 901,
	124, 901,
	132, 901,
	133, 901,
	134, 901,
	135, 901,
	136, 901,
	137, 901,
	139, 901,
	141, 901,
	145, 901,
	147, 901,
	148, 901,
	150, 901,
	152, 901,
	153, 901,
	154, 901,
	155, 901,
	156, 901,
	157, 901,
	158, 901,
	159, 901,
	160, 901,
	163, 901,
	164, 901,
	169, 901,
	170, 901,
	171, 901,
	174, 901,
	175, 901,
	176, 901,
	177, 901,
	178, 901,
	179, 901,
	180, 901,
	181, 901,
	183, 901,
	185, 901,
	188, 901,
	189, 901,
	190, 901,
	192, 901,
	193, 901,
	196, 901,
	197, 901,
	198, 901,
	200, 901,
	201, 901,
	203, 901,
	205, 901,
	206, 901,
	209, 901,
	210, 901,
	213, 901,
	215, 901,
	218, 901,
	219, 901,
	220, 901,
	221, 901,
	222, 901,
	223, 901,
	224, 901,
	226, 901,
	227, 901,
	228, 901,
	229, 901,
	234, 901,
	235, 901,
	236, 901,
	237, 901,
	238, 901,
	240, 901,
	241, 901,
	243, 901,
	244, 901,
	245, 901,
	248, 901,
	249, 901,
	251, 901,
	253, 901,
	254, 901,
	255, 901,
	256, 901,
	257, 901,
	258, 901,
	259, 901,
	260, 901,
	261, 901,
	263, 901,
	264, 901,
	265, 901,
	266, 901,
	267, 901,
	269, 901,
	270, 901,
	271, 901,
	272, 901,
	273, 901,
	274, 901,
	275, 901,
	276, 901,
	277, 901,
	279, 901,
	280, 901,
	281, 901,
	282, 901,
	283, 901,
	285, 901,
	286, 901,
	287, 901,
	288, 901,
	289, 901,
	290, 901,
	291, 901,
	293, 901,
	295, 901,
	296, 901,
	297, 901,
	298, 901,
	299, 901,
	300, 901,
	302, 901,
	303, 901,
	304, 901,
	305, 901,
	306, 901,
	307, 901,
	308, 901,
	310, 901,
	311, 901,
	312, 901,
	313, 901,
	314, 901,
	315, 901,
	316, 901,
	317, 901,
	318, 901,
	320, 901,
	321, 901,
	322, 901,
	323, 901,
	325, 901,
	326, 901,
	327, 901,
	328, 901,
	330, 901,
	331, 901,
	332, 901,
	333, 901,
	334, 901,
	335, 901,
	336, 901,
	337, 901,
	338, 901,
	339, 901,
	340, 901,
	341, 901,
	343, 901,
	344, 901,
	346, 901,
	347, 901,
	348, 901,
	349, 901,
	350, 901,
	351, 901,
	352, 901,
	353, 901,
	354, 901,
	355, 901,
	357, 901,
	358, 901,
	359, 901,
	360, 901,
	363, 901,
	364, 901,
	365, 901,
	366, 901,
	368, 901,
	369, 901,
	371, 901,
	372, 901,
	375, 901,
	376, 901,
	377, 901,
	378, 901,
	380, 901,
	382, 901,
	383, 901,
	384, 901,
	385, 901,
	386, 901,
	387, 901,
	390, 901,
	391, 901,
	396, 901,
	397, 901,
	398, 901,
	399, 901,
	400, 901,
	401, 901,
	-2, 0,
	-1, 136,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	239, 872,
	247, 872,
	373, 872,
	-2, 865,
	-1, 141,
	1, 795,
	188, 795,
	269, 795,
	274, 795,
	427, 795,
	428, 795,
	-2, 0,
	-1, 143,
	1, 795,
	427, 795,
	428, 795,
	-2, 0,
	-1, 144,
	1, 795,
	427, 795,
	428, 795,
	-2, 0,
	-1, 145,
	1, 799,
	427, 799,
	428, 799,
	-2, 0,
	-1, 171,
	4, 908,
	5, 908,
	6, 908,
	7, 908,
	8, 908,
	9, 908,
	20, 908,
	21, 908,
	22, 908,
	23, 908,
	25, 908,
	30, 908,
	31, 908,
	35, 908,
	36, 908,
	37, 908,
	38, 908,
	39, 908,
	40, 908,
	41, 908,
	42, 908,
	43, 908,
	44, 908,
	46, 908,
	47, 908,
	48, 908,
	49, 908,
	50, 908,
	51, 908,
	52, 908,
	53, 908,
	54, 908,
	55, 908,
	56, 908,
	57, 908,
	59, 908,
	60, 908,
	62, 908,
	64, 908,
	65, 908,
	66, 908,
	67, 908,
	68, 908,
	70, 908,
	71, 908,
	72, 908,
	73, 908,
	75, 908,
	77, 908,
	78, 908,
	80, 908,
	81, 908,
	82, 908,
	83, 908,
	84, 908,
	85, 908,
	86, 908,
	87, 908,
	88, 908,
	89, 908,
	90, 908,
	91, 908,
	92, 908,
	93, 908,
	94, 908,
	95, 908,
	96, 908,
	97, 908,
	98, 908,
	99, 908,
	100, 908,
	102, 908,
	104, 908,
	107, 908,
	108, 908,
	110, 908,
	111, 908,
	115, 908,
	116, 908,
	117, 908,
	118, 908,
	119, 908,
	120, 908,
	121, 908,
	122, 908,
	123, 908,
	124, 908,
	125, 908,
	126, 908,
	132, 908,
	133, 908,
	134, 908,
	135, 908,
	136, 908,
	137, 908,
	139, 908,
	141, 908,
	144, 908,
	145, 908,
	147, 908,
	148, 908,
	150, 908,
	152, 908,
	153, 908,
	154, 908,
	155, 908,
	156, 908,
	157, 908,
	158, 908,
	159, 908,
	160, 908,
	161, 908,
	163, 908,
	164, 908,
	169, 908,
	170, 908,
	171, 908,
	173, 908,
	174, 908,
	175, 908,
	176, 908,
	177, 908,
	178, 908,
	179, 908,
	180, 908,
	181, 908,
	183, 908,
	185, 908,
	186, 908,
	187, 908,
	188, 908,
	189, 908,
	190, 908,
	191, 908,
	192, 908,
	193, 908,
	196, 908,
	197, 908,
	198, 908,
	200, 908,
	201, 908,
	203, 908,
	204, 908,
	205, 908,
	206, 908,
	207, 908,
	209, 908,
	210, 908,
	213, 908,
	215, 908,
	216, 908,
	217, 908,
	218, 908,
	219, 908,
	220, 908,
	221, 908,
	222, 908,
	223, 908,
	224, 908,
	225, 908,
	226, 908,
	227, 908,
	228, 908,
	229, 908,
	230, 908,
	232, 908,
	233, 908,
	234, 908,
	235, 908,
	236, 908,
	237, 908,
	238, 908,
	240, 908,
	241, 908,
	244, 908,
	245, 908,
	248, 908,
	249, 908,
	250, 908,
	251, 908,
	252, 908,
	253, 908,
	254, 908,
	255, 908,
	256, 908,
	257, 908,
	258, 908,
	259, 908,
	260, 908,
	261, 908,
	263, 908,
	264, 908,
	265, 908,
	266, 908,
	267, 908,
	269, 908,
	270, 908,
	271, 908,
	272, 908,
	273, 908,
	274, 908,
	275, 908,
	276, 908,
	277, 908,
	279, 908,
	280, 908,
	281, 908,
	282, 908,
	283, 908,
	285, 908,
	286, 908,
	287, 908,
	288, 908,
	289, 908,
	290, 908,
	291, 908,
	293, 908,
	294, 908,
	295, 908,
	296, 908,
	297, 908,
	298, 908,
	299, 908,
	300, 908,
	302, 908,
	303, 908,
	304, 908,
	305, 908,
	306, 908,
	307, 908,
	308, 908,
	310, 908,
	311, 908,
	312, 908,
	313, 908,
	314, 908,
	315, 908,
	316, 908,
	317, 908,
	318, 908,
	319, 908,
	320, 908,
	321, 908,
	322, 908,
	323, 908,
	324, 908,
	325, 908,
	326, 908,
	327, 908,
	328, 908,
	330, 908,
	331, 908,
	332, 908,
	333, 908,
	334, 908,
	335, 908,
	336, 908,
	337, 908,
	338, 908,
	339, 908,
	340, 908,
	341, 908,
	343, 908,
	344, 908,
	346, 908,
	347, 908,
	348, 908,
	349, 908,
	350, 908,
	351, 908,
	352, 908,
	353, 908,
	354, 908,
	355, 908,
	357, 908,
	358, 908,
	359, 908,
	360, 908,
	363, 908,
	364, 908,
	365, 908,
	366, 908,
	367, 908,
	368, 908,
	369, 908,
	371, 908,
	372, 908,
	375, 908,
	376, 908,
	377, 908,
	378, 908,
	379, 908,
	380, 908,
	382, 908,
	383, 908,
	384, 908,
	385, 908,
	386, 908,
	387, 908,
	390, 908,
	391, 908,
	396, 908,
	397, 908,
	398, 908,
	399, 908,
	400, 908,
	401, 908,
	402, 908,
	410, 908,
	415, 908,
	416, 908,
	417, 908,
	424, 908,
	430, 908,
	-2, 0,
	-1, 174,
	1, 57,
	428, 57,
	-2, 899,
	-1, 207,
	426, 1480,
	429, 1480,
	-2, 594,
	-1, 208,
	426, 1482,
	429, 1482,
	-2, 595,
	-1, 209,
	426, 1481,
	429, 1481,
	-2, 596,
	-1, 210,
	429, 1422,
	-2, 597,
	-1, 623,
	143, 1596,
	361, 1596,
	407, 1596,
	426, 1596,
	-2, 0,
	-1, 624,
	143, 1519,
	361, 1519,
	407, 1519,
	426, 1519,
	-2, 0,
	-1, 626,
	143, 1673,
	361, 1673,
	407, 1673,
	426, 1673,
	-2, 0,
	-1, 628,
	143, 1702,
	361, 1702,
	407, 1702,
	426, 1702,
	-2, 0,
	-1, 635,
	143, 1603,
	361, 1603,
	407, 1603,
	426, 1603,
	-2, 423,
	-1, 670,
	1, 523,
	423, 523,
	425, 523,
	427, 523,
	428, 523,
	-2, 0,
	-1, 671,
	1, 593,
	140, 593,
	423, 593,
	425, 593,
	427, 593,
	428, 593,
	-2, 0,
	-1, 677,
	1, 537,
	423, 537,
	425, 537,
	427, 537,
	428, 537,
	-2, 0,
	-1, 679,
	1, 541,
	423, 541,
	425, 541,
	427, 541,
	428, 541,
	-2, 0,
	-1, 682,
	1, 552,
	423, 552,
	425, 552,
	427, 552,
	428, 552,
	-2, 0,
	-1, 683,
	1, 558,
	423, 558,
	425, 558,
	427, 558,
	428, 558,
	-2, 0,
	-1, 684,
	1, 561,
	423, 561,
	425, 561,
	427, 561,
	428, 561,
	-2, 0,
	-1, 688,
	1, 575,
	423, 575,
	425, 575,
	427, 575,
	428, 575,
	-2, 0,
	-1, 689,
	1, 577,
	423, 577,
	425, 577,
	427, 577,
	428, 577,
	-2, 0,
	-1, 717,
	127, 912,
	208, 912,
	239, 912,
	-2, 868,
	-1, 725,
	127, 911,
	208, 911,
	239, 911,
	-2, 866,
	-1, 752,
	424, 1777,
	-2, 1194,
	-1, 753,
	424, 1778,
	-2, 1195,
	-1, 782,
	424, 1474,
	-2, 1465,
	-1, 783,
	5, 1050,
	424, 1489,
	-2, 1480,
	-1, 784,
	424, 1490,
	-2, 1481,
	-1, 791,
	5, 1034,
	-2, 1510,
	-1, 792,
	5, 1035,
	-2, 1514,
	-1, 793,
	5, 1036,
	-2, 1513,
	-1, 794,
	5, 1037,
	-2, 1698,
	-1, 795,
	5, 1038,
	-2, 1605,
	-1, 796,
	5, 1039,
	-2, 1666,
	-1, 797,
	5, 1040,
	-2, 1668,
	-1, 798,
	5, 1041,
	-2, 1669,
	-1, 799,
	5, 1042,
	-2, 1670,
	-1, 800,
	5, 1043,
	-2, 1678,
	-1, 801,
	5, 1044,
	-2, 1710,
	-1, 802,
	5, 1045,
	-2, 1573,
	-1, 803,
	5, 1046,
	-2, 1509,
	-1, 804,
	5, 1047,
	-2, 1613,
	-1, 805,
	5, 1048,
	-2, 1614,
	-1, 806,
	5, 1049,
	-2, 1577,
	-1, 807,
	5, 1098,
	424, 1098,
	-2, 1744,
	-1, 827,
	5, 1071,
	-2, 1511,
	-1, 828,
	5, 1089,
	-2, 1539,
	-1, 830,
	5, 1063,
	-2, 1560,
	-1, 831,
	5, 1064,
	-2, 1561,
	-1, 832,
	5, 1055,
	-2, 1576,
	-1, 833,
	5, 1056,
	-2, 1578,
	-1, 834,
	5, 1057,
	-2, 1579,
	-1, 835,
	5, 1058,
	-2, 1580,
	-1, 836,
	5, 1022,
	-2, 1586,
	-1, 837,
	5, 1023,
	-2, 1587,
	-1, 838,
	5, 1086,
	-2, 1688,
	-1, 839,
	5, 1096,
	-2, 1700,
	-1, 840,
	5, 1061,
	-2, 1724,
	-1, 841,
	5, 1088,
	-2, 1725,
	-1, 842,
	5, 1070,
	-2, 1726,
	-1, 843,
	5, 1088,
	-2, 1727,
	-1, 844,
	5, 1088,
	-2, 1728,
	-1, 845,
	5, 1053,
	-2, 1731,
	-1, 846,
	5, 1053,
	-2, 1732,
	-1, 849,
	5, 1078,
	-2, 1736,
	-1, 851,
	5, 1054,
	-2, 1742,
	-1, 852,
	5, 1059,
	-2, 1743,
	-1, 854,
	5, 1053,
	-2, 1748,
	-1, 857,
	5, 1062,
	-2, 1753,
	-1, 858,
	5, 1060,
	-2, 1755,
	-1, 860,
	5, 1090,
	-2, 1757,
	-1, 861,
	5, 1092,
	-2, 1758,
	-1, 862,
	5, 1094,
	-2, 1759,
	-1, 865,
	5, 1085,
	-2, 1763,
	-1, 935,
	424, 1489,
	-2, 1480,
	-1, 950,
	285, 1462,
	417, 1462,
	-2, 1461,
	-1, 1100,
	258, 897,
	-2, 720,
	-1, 1109,
	242, 1484,
	-2, 0,
	-1, 1152,
	1, 290,
	423, 290,
	425, 290,
	427, 290,
	428, 290,
	-2, 871,
	-1, 1155,
	4, 1762,
	10, 1762,
	11, 1762,
	13, 1762,
	14, 1762,
	15, 1762,
	16, 1762,
	17, 1762,
	18, 1762,
	20, 1762,
	21, 1762,
	22, 1762,
	23, 1762,
	25, 1762,
	28, 1762,
	30, 1762,
	32, 1762,
	35, 1762,
	36, 1762,
	37, 1762,
	38, 1762,
	39, 1762,
	40, 1762,
	41, 1762,
	42, 1762,
	43, 1762,
	44, 1762,
	46, 1762,
	47, 1762,
	48, 1762,
	49, 1762,
	50, 1762,
	51, 1762,
	54, 1762,
	55, 1762,
	56, 1762,
	57, 1762,
	59, 1762,
	60, 1762,
	61, 1762,
	64, 1762,
	65, 1762,
	66, 1762,
	67, 1762,
	68, 1762,
	69, 1762,
	70, 1762,
	71, 1762,
	72, 1762,
	73, 1762,
	75, 1762,
	76, 1762,
	77, 1762,
	78, 1762,
	80, 1762,
	81, 1762,
	82, 1762,
	83, 1762,
	91, 1762,
	92, 1762,
	93, 1762,
	94, 1762,
	95, 1762,
	96, 1762,
	97, 1762,
	98, 1762,
	100, 1762,
	102, 1762,
	104, 1762,
	107, 1762,
	108, 1762,
	110, 1762,
	111, 1762,
	115, 1762,
	116, 1762,
	117, 1762,
	118, 1762,
	119, 1762,
	120, 1762,
	121, 1762,
	122, 1762,
	123, 1762,
	124, 1762,
	128, 1762,
	129, 1762,
	130, 1762,
	131, 1762,
	132, 1762,
	133, 1762,
	134, 1762,
	135, 1762,
	136, 1762,
	137, 1762,
	138, 1762,
	139, 1762,
	141, 1762,
	144, 1762,
	145, 1762,
	147, 1762,
	148, 1762,
	150, 1762,
	152, 1762,
	153, 1762,
	154, 1762,
	155, 1762,
	156, 1762,
	157, 1762,
	158, 1762,
	159, 1762,
	160, 1762,
	161, 1762,
	162, 1762,
	163, 1762,
	164, 1762,
	165, 1762,
	166, 1762,
	167, 1762,
	169, 1762,
	170, 1762,
	171, 1762,
	173, 1762,
	174, 1762,
	175, 1762,
	176, 1762,
	177, 1762,
	178, 1762,
	179, 1762,
	180, 1762,
	181, 1762,
	183, 1762,
	185, 1762,
	186, 1762,
	187, 1762,
	188, 1762,
	189, 1762,
	190, 1762,
	191, 1762,
	192, 1762,
	193, 1762,
	194, 1762,
	195, 1762,
	196, 1762,
	197, 1762,
	198, 1762,
	200, 1762,
	201, 1762,
	203, 1762,
	204, 1762,
	205, 1762,
	206, 1762,
	207, 1762,
	209, 1762,
	210, 1762,
	213, 1762,
	214, 1762,
	215, 1762,
	218, 1762,
	219, 1762,
	220, 1762,
	221, 1762,
	222, 1762,
	223, 1762,
	224, 1762,
	225, 1762,
	226, 1762,
	227, 1762,
	228, 1762,
	229, 1762,
	232, 1762,
	234, 1762,
	235, 1762,
	236, 1762,
	237, 1762,
	238, 1762,
	240, 1762,
	241, 1762,
	244, 1762,
	245, 1762,
	246, 1762,
	248, 1762,
	249, 1762,
	251, 1762,
	253, 1762,
	254, 1762,
	255, 1762,
	256, 1762,
	257, 1762,
	258, 1762,
	259, 1762,
	260, 1762,
	261, 1762,
	263, 1762,
	264, 1762,
	265, 1762,
	266, 1762,
	267, 1762,
	269, 1762,
	270, 1762,
	271, 1762,
	272, 1762,
	273, 1762,
	274, 1762,
	275, 1762,
	276, 1762,
	277, 1762,
	279, 1762,
	280, 1762,
	281, 1762,
	282, 1762,
	283, 1762,
	284, 1762,
	285, 1762,
	286, 1762,
	287, 1762,
	288, 1762,
	289, 1762,
	290, 1762,
	291, 1762,
	293, 1762,
	294, 1762,
	295, 1762,
	296, 1762,
	297, 1762,
	298, 1762,
	299, 1762,
	300, 1762,
	301, 1762,
	302, 1762,
	303, 1762,
	304, 1762,
	305, 1762,
	306, 1762,
	307, 1762,
	308, 1762,
	310, 1762,
	311, 1762,
	312, 1762,
	313, 1762,
	314, 1762,
	315, 1762,
	316, 1762,
	317, 1762,
	318, 1762,
	320, 1762,
	321, 1762,
	322, 1762,
	323, 1762,
	324, 1762,
	325, 1762,
	326, 1762,
	327, 1762,
	328, 1762,
	330, 1762,
	331, 1762,
	332, 1762,
	333, 1762,
	334, 1762,
	335, 1762,
	336, 1762,
	337, 1762,
	338, 1762,
	339, 1762,
	340, 1762,
	341, 1762,
	343, 1762,
	344, 1762,
	346, 1762,
	347, 1762,
	348, 1762,
	349, 1762,
	350, 1762,
	351, 1762,
	352, 1762,
	353, 1762,
	354, 1762,
	355, 1762,
	357, 1762,
	358, 1762,
	359, 1762,
	360, 1762,
	363, 1762,
	364, 1762,
	365, 1762,
	366, 1762,
	368, 1762,
	369, 1762,
	371, 1762,
	372, 1762,
	375, 1762,
	376, 1762,
	377, 1762,
	378, 1762,
	380, 1762,
	382, 1762,
	383, 1762,
	384, 1762,
	385, 1762,
	386, 1762,
	387, 1762,
	390, 1762,
	391, 1762,
	396, 1762,
	397, 1762,
	398, 1762,
	399, 1762,
	400, 1762,
	401, 1762,
	402, 1762,
	403, 1762,
	405, 1762,
	406, 1762,
	407, 1762,
	408, 1762,
	409, 1762,
	410, 1762,
	412, 1762,
	413, 1762,
	414, 1762,
	415, 1762,
	416, 1762,
	417, 1762,
	418, 1762,
	419, 1762,
	420, 1762,
	422, 1762,
	425, 1762,
	426, 1762,
	429, 1762,
	430, 1762,
	-2, 0,
	-1, 1174,
	143, 1673,
	361, 1673,
	407, 1673,
	426, 1673,
	-2, 0,
	-1, 1207,
	143, 1702,
	361, 1702,
	407, 1702,
	426, 1702,
	-2, 0,
	-1, 1208,
	188, 807,
	269, 807,
	274, 807,
	-2, 410,
	-1, 1287,
	127, 911,
	208, 911,
	239, 911,
	-2, 869,
	-1, 1371,
	114, 873,
	127, 873,
	182, 873,
	208, 873,
	239, 873,
	247, 873,
	373, 873,
	-2, 1237,
	-1, 1421,
	425, 1357,
	-2, 0,
	-1, 1429,
	188, 807,
	269, 807,
	274, 807,
	-2, 802,
	-1, 1463,
	114, 873,
	127, 873,
	182, 873,
	208, 873,
	239, 873,
	247, 873,
	373, 873,
	-2, 981,
	-1, 1670,
	188, 807,
	269, 807,
	274, 807,
	-2, 412,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1133,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1134,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1135,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1136,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1137,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1138,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1139,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1140,
	-1, 1799,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1152,
	-1, 1800,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1153,
	-1, 1801,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1154,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1159,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1161,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1165,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1166,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1167,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1168,
	-1, 1896,
	5, 1050,
	143, 1368,
	424, 1489,
	-2, 1480,
	-1, 1897,
	143, 1369,
	-2, 1720,
	-1, 1898,
	143, 1370,
	-2, 1600,
	-1, 1899,
	143, 1371,
	-2, 1540,
	-1, 1900,
	143, 1372,
	-2, 1568,
	-1, 1901,
	143, 1373,
	-2, 1599,
	-1, 1902,
	143, 1374,
	-2, 1665,
	-1, 1976,
	1, 982,
	80, 982,
	114, 982,
	127, 982,
	144, 982,
	149, 982,
	151, 982,
	173, 982,
	182, 982,
	191, 982,
	204, 982,
	208, 982,
	225, 982,
	239, 982,
	242, 982,
	247, 982,
	292, 982,
	294, 982,
	373, 982,
	381, 982,
	393, 982,
	394, 982,
	404, 982,
	423, 982,
	425, 982,
	427, 982,
	428, 982,
	429, 982,
	-2, 981,
	-1, 1981,
	424, 1466,
	-2, 1478,
	-1, 2063,
	425, 1427,
	429, 1427,
	-2, 1454,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1160,
	-1, 2189,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1162,
	-1, 2194,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1163,
	-1, 2424,
	258, 897,
	-2, 720,
	-1, 2491,
	188, 807,
	269, 807,
	274, 807,
	-2, 409,
	-1, 2506,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1164,
	-1, 2511,
	186, 0,
	187, 0,
	232, 0,
	-2, 1182,
	-1, 2572,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1212,
	-1, 2573,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1213,
	-1, 2574,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1214,
	-1, 2578,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1218,
	-1, 2579,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1219,
	-1, 2580,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1220,
	-1, 2622,
	424, 1467,
	-2, 1479,
	-1, 2734,
	186, 0,
	187, 0,
	232, 0,
	-2, 1183,
	-1, 2737,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1186,
	-1, 2738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1188,
	-1, 2882,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1187,
	-1, 2883,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1189,
	-1, 2893,
	186, 0,
	-2, 1221,
	-1, 2981,
	186, 0,
	-2, 1222,
	-1, 3077,
	38, 0,
	161, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1723,
}

const sqlPrivate = 57344

const sqlLast = 59134

var sqlAct = [...]int{

	784, 3076, 1936, 3139, 2835, 3085, 2089, 2668, 2921, 3053,
	3040, 3052, 3055, 3087, 2542, 1084, 3086, 2118, 2985, 2849,
	2910, 1142, 2097, 2873, 3075, 2805, 1767, 760, 2182, 1600,
	2686, 2439, 1968, 1827, 2222, 954, 2790, 2224, 867, 1290,
	1058, 209, 2464, 2681, 2691, 2462, 498, 726, 2431, 2632,
	2897, 776, 2086, 498, 2065, 1601, 1570, 2433, 2444, 2331,
	498, 2349, 1458, 498, 2061, 1376, 498, 209, 2768, 498,
	498, 1106, 493, 1964, 1456, 2342, 498, 2289, 928, 970,
	1175, 2307, 1437, 964, 498, 1138, 2098, 1545, 2064, 1549,
	1548, 1993, 1557, 1495, 2318, 2046, 2595, 2288, 947, 2986,
	1969, 1758, 734, 130, 1466, 1867, 1554, 548, 569, 28,
	1379, 1839, 1753, 1984, 2178, 2443, 544, 1695, 1429, 2407,
	1517, 1849, 1476, 767, 1438, 1474, 1511, 1824, 1971, 73,
	1546, 2836, 920, 2021, 1210, 2047, 1407, 1933, 583, 1861,
	2062, 956, 1153, 1409, 1176, 1125, 1967, 2631, 1135, 2091,
	2020, 210, 2068, 1447, 211, 923, 1366, 1956, 1941, 613,
	1892, 1840, 633, 130, 902, 136, 498, 498, 1289, 1291,
	137, 205, 775, 1694, 586, 725, 1151, 1122, 627, 1564,
	1487, 1062, 925, 1428, 662, 1295, 2209, 2611, 541, 900,
	2612, 3166, 1572, 495, 598, 1950, 2090, 730, 498, 498,
	498, 959, 498, 498, 973, 973, 2119, 606, 591, 1572,
	1572, 1534, 3160, 498, 498, 2048, 1950, 3159, 3136, 3133,
	1083, 1950, 2804, 1526, 3111, 3105, 3104, 1457, 2804, 1950,
	1950, 576, 2450, 494, 478, 3101, 2504, 3098, 600, 3102,
	1584, 3099, 40, 3095, 3073, 3072, 3071, 1526, 1526, 1526,
	1584, 3070, 1520, 3035, 730, 1584, 44, 2131, 740, 3022,
	478, 3015, 3013, 1526, 2481, 2804, 2804, 3011, 731, 2983,
	1950, 2804, 950, 2131, 481, 2966, 2956, 130, 917, 2707,
	2804, 2451, 2951, 28, 2215, 575, 1526, 2949, 967, 2939,
	2216, 2804, 2420, 1526, 903, 903, 718, 3036, 2938, 2931,
	481, 717, 1526, 1526, 2930, 2903, 2884, 2830, 2804, 1526,
	2131, 1950, 2826, 2803, 577, 2736, 1950, 2804, 2048, 2131,
	1181, 2705, 59, 579, 735, 2698, 2121, 60, 2969, 2697,
	940, 944, 949, 2698, 2617, 2607, 2601, 2520, 2618, 2608,
	1950, 1526, 2515, 2598, 1077, 2471, 1950, 1943, 2304, 2412,
	971, 1059, 1950, 2256, 2255, 2249, 904, 1950, 1950, 2250,
	1526, 63, 2248, 1193, 1064, 2149, 1950, 1063, 2130, 1950,
	2117, 2114, 2131, 1584, 1589, 1950, 1082, 1306, 1307, 1950,
	2057, 1949, 1588, 1526, 1526, 1950, 1589, 906, 1182, 907,
	2598, 1942, 1673, 2707, 2036, 1982, 2412, 2181, 2160, 1525,
	1433, 1844, 1309, 1061, 174, 171, 478, 2452, 1173, 1071,
	1172, 733, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164,
	2261, 2262, 1163, 1162, 1161, 1065, 2453, 2783, 1308, 1160,
	1159, 1573, 1864, 2261, 2262, 1158, 2223, 1157, 908, 905,
	724, 173, 723, 722, 721, 782, 481, 720, 1573, 1573,
	716, 715, 781, 171, 714, 1306, 1307, 713, 1339, 1340,
	1341, 1349, 1350, 1351, 1692, 64, 712, 711, 710, 709,
	708, 707, 706, 1342, 702, 701, 700, 2633, 660, 2276,
	1309, 659, 172, 1355, 658, 657, 2261, 2262, 656, 173,
	1865, 165, 2094, 655, 139, 66, 654, 67, 653, 166,
	1076, 652, 651, 650, 649, 1314, 1308, 498, 498, 648,
	498, 959, 959, 498, 1328, 171, 498, 647, 646, 498,
	138, 1325, 645, 2497, 644, 498, 578, 171, 643, 110,
	172, 642, 641, 640, 639, 498, 498, 498, 498, 498,
	959, 959, 638, 637, 1306, 1307, 622, 959, 2267, 621,
	1182, 173, 620, 619, 1866, 1863, 780, 618, 617, 532,
	531, 2267, 1146, 173, 2261, 2262, 504, 2450, 138, 1309,
	1580, 1377, 503, 1331, 1332, 1333, 1334, 502, 1526, 498,
	484, 483, 1099, 1314, 482, 1882, 1975, 1571, 1737, 195,
	194, 193, 172, 498, 192, 1308, 1070, 191, 1075, 1111,
	1081, 165, 190, 1328, 172, 189, 1346, 1356, 1096, 166,
	1336, 1337, 1338, 165, 2267, 188, 498, 187, 186, 934,
	545, 166, 1139, 185, 2277, 184, 931, 498, 183, 182,
	138, 1352, 1353, 1942, 181, 180, 179, 2277, 178, 1323,
	1324, 177, 138, 576, 1868, 547, 176, 1880, 175, 1182,
	2741, 171, 1344, 2699, 40, 2615, 2345, 1124, 2221, 1329,
	2211, 2170, 1331, 1332, 1333, 1334, 2058, 959, 44, 2051,
	1698, 1459, 1314, 1473, 1878, 1876, 731, 1354, 1597, 1874,
	1383, 1129, 1132, 1224, 1086, 2261, 2262, 173, 1154, 1067,
	2277, 1343, 2267, 1302, 3092, 3074, 3057, 575, 2976, 1336,
	1337, 1338, 171, 2972, 498, 1186, 2952, 2970, 2871, 2867,
	2920, 2278, 1191, 2767, 2766, 2760, 171, 2857, 171, 2753,
	2752, 2261, 2262, 2751, 2278, 2747, 577, 2746, 172, 1335,
	930, 2745, 2744, 2719, 59, 579, 1862, 165, 173, 60,
	2717, 2621, 1596, 2592, 2591, 166, 1330, 1208, 1329, 1218,
	2590, 2528, 173, 1222, 173, 1287, 1306, 1307, 2415, 2411,
	2136, 1374, 2340, 2300, 2287, 1288, 138, 1531, 2260, 1347,
	2257, 2254, 2253, 63, 2251, 2229, 2228, 2278, 2210, 172,
	2122, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 165, 1976,
	1302, 1835, 1380, 172, 1369, 172, 166, 916, 1301, 1529,
	3164, 1387, 165, 3147, 165, 1205, 3146, 1308, 1085, 2544,
	166, 3065, 166, 2267, 3060, 3017, 3008, 2093, 1335, 3007,
	3003, 3002, 2272, 2270, 2271, 2263, 2264, 2265, 2266, 2268,
	2269, 138, 2997, 138, 2988, 1330, 1286, 2271, 2263, 2264,
	2265, 2266, 2268, 2269, 2994, 2968, 2967, 1345, 1225, 2267,
	1320, 1321, 1327, 1326, 1322, 1348, 1829, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 2916, 2895, 2844, 2870,
	2756, 2840, 1693, 2022, 2755, 2838, 2825, 64, 1306, 1307,
	2782, 2177, 2765, 2708, 1314, 2684, 2675, 2674, 731, 2270,
	2271, 2263, 2264, 2265, 2266, 2268, 2269, 498, 2672, 2856,
	718, 2649, 498, 1309, 2648, 717, 139, 66, 2638, 67,
	2637, 1336, 1337, 1338, 1298, 1299, 1836, 2603, 1444, 1435,
	2510, 1303, 2477, 2469, 2396, 2277, 2380, 171, 498, 1308,
	2359, 1306, 1307, 2475, 2358, 2303, 2238, 2237, 578, 2234,
	1370, 110, 2203, 1410, 1415, 2138, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 1979, 1309, 1961, 1380, 1948,
	1329, 1872, 1540, 173, 1472, 1436, 1427, 1426, 1421, 2263,
	2264, 2265, 2266, 2268, 2269, 1420, 1419, 1417, 1405, 1416,
	1413, 1408, 1308, 1412, 1403, 1454, 1306, 1307, 1467, 2324,
	1411, 1402, 1401, 1441, 1442, 1400, 1399, 1398, 1418, 1397,
	1396, 1395, 1394, 1393, 172, 1392, 1314, 2739, 1881, 1391,
	1384, 1309, 2278, 165, 2359, 1369, 1204, 1188, 1183, 1156,
	1150, 166, 130, 1598, 2716, 2610, 774, 2606, 2214, 1962,
	903, 2473, 2133, 1336, 1337, 1338, 1455, 1308, 1367, 2261,
	2262, 1468, 546, 1692, 1221, 1692, 2434, 1330, 2862, 2710,
	2709, 2613, 2048, 1459, 731, 2945, 1432, 1424, 2148, 1314,
	1422, 959, 498, 1425, 1692, 1199, 1423, 2400, 973, 2395,
	1879, 1430, 1482, 1679, 1389, 2391, 1398, 2379, 1494, 1488,
	1464, 2295, 1329, 1284, 2024, 2647, 498, 973, 498, 498,
	2294, 1434, 2265, 2266, 2268, 2269, 209, 1877, 1875, 1518,
	2293, 773, 1873, 2973, 2147, 1461, 1541, 2971, 1398, 1864,
	498, 498, 898, 2292, 2187, 1666, 1217, 498, 2119, 498,
	1550, 498, 1553, 2483, 2390, 498, 2263, 2264, 2265, 2266,
	2268, 2269, 2919, 1507, 2898, 2090, 2546, 1850, 3103, 3093,
	1406, 3100, 2219, 1277, 2446, 2627, 899, 3049, 1513, 2682,
	2124, 200, 1229, 1587, 540, 511, 3127, 959, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1865, 3021, 1330,
	3126, 2817, 2150, 1263, 3163, 498, 959, 729, 1275, 1262,
	2493, 209, 498, 498, 959, 2944, 1575, 1995, 894, 1577,
	959, 3094, 1579, 209, 498, 892, 1582, 498, 498, 890,
	2943, 1561, 1722, 498, 888, 885, 2941, 1668, 2940, 2662,
	2657, 1656, 1537, 1064, 1527, 1986, 1063, 1559, 2656, 915,
	1386, 521, 1276, 2624, 2623, 973, 2652, 1625, 2233, 1680,
	2232, 1866, 1863, 1535, 959, 959, 2231, 498, 539, 510,
	1606, 2230, 498, 1524, 2190, 728, 2120, 209, 498, 1124,
	498, 2041, 498, 1568, 498, 478, 498, 2035, 2031, 2012,
	538, 1986, 1219, 1811, 1431, 1489, 498, 1544, 498, 1688,
	1060, 1998, 1985, 2834, 1928, 932, 498, 498, 498, 1927,
	1660, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 478,
	1227, 692, 1486, 522, 1563, 481, 1926, 1925, 1154, 1769,
	1566, 2087, 704, 2975, 1195, 498, 2496, 1088, 1220, 973,
	730, 739, 1734, 3020, 1490, 1491, 2045, 1735, 1700, 2667,
	1826, 1868, 2056, 1826, 2005, 593, 1670, 612, 201, 481,
	611, 1740, 1833, 1590, 3068, 537, 2004, 1831, 1312, 1313,
	1315, 1316, 1736, 1707, 1261, 1625, 1625, 612, 1729, 2474,
	1099, 1691, 1592, 1205, 1567, 1868, 1258, 1594, 1606, 1606,
	1306, 1307, 1759, 1766, 1657, 1667, 2538, 3118, 934, 2441,
	934, 1699, 2923, 1841, 478, 931, 1731, 931, 1374, 1468,
	693, 3032, 2387, 1841, 973, 1309, 478, 1854, 2382, 1305,
	1684, 1203, 3089, 1593, 1696, 1196, 1316, 1997, 2999, 1704,
	750, 2640, 1506, 202, 1259, 1658, 1890, 3149, 1822, 3033,
	533, 1308, 1492, 1862, 481, 1895, 1895, 2494, 1713, 1906,
	1908, 1404, 1913, 2134, 1841, 1850, 481, 2658, 1820, 1509,
	3126, 2028, 498, 2078, 498, 1484, 727, 2179, 2180, 1940,
	478, 2032, 1198, 2442, 1683, 1682, 1484, 1692, 1689, 2269,
	1572, 1693, 2022, 1693, 2022, 1768, 1868, 1738, 973, 498,
	1739, 718, 540, 2399, 718, 718, 1749, 1757, 498, 1750,
	1751, 498, 1693, 2022, 973, 1980, 1891, 535, 498, 930,
	481, 930, 1283, 2261, 2262, 2492, 498, 2879, 1314, 1733,
	2889, 1847, 204, 2441, 498, 524, 523, 2947, 1364, 731,
	1977, 538, 2813, 1996, 3090, 731, 498, 203, 1671, 959,
	1274, 694, 536, 2650, 2236, 1336, 1337, 1338, 2371, 1963,
	498, 973, 1837, 1973, 1974, 1816, 498, 498, 1957, 1843,
	1851, 1228, 1987, 1817, 1539, 1625, 1818, 1209, 196, 1686,
	1823, 498, 1845, 594, 498, 199, 539, 896, 1606, 1237,
	895, 730, 2015, 1953, 2370, 2535, 534, 886, 1972, 1983,
	2721, 886, 903, 1721, 1329, 505, 887, 886, 498, 3117,
	498, 2711, 498, 3091, 1903, 498, 537, 498, 950, 498,
	197, 498, 498, 1924, 498, 959, 959, 959, 2014, 1087,
	959, 1937, 1999, 2001, 2043, 731, 2009, 1510, 1938, 498,
	1946, 1947, 3142, 1954, 2029, 2042, 695, 2112, 2113, 1958,
	1959, 2267, 2200, 2641, 200, 2485, 768, 508, 2007, 2536,
	1981, 1464, 2038, 1626, 198, 1194, 2013, 1808, 2192, 201,
	1990, 1825, 2198, 2811, 2924, 2728, 1245, 1832, 2030, 2053,
	2014, 2055, 508, 2373, 696, 705, 3150, 1197, 3088, 3125,
	1687, 1330, 2023, 2025, 2026, 2027, 515, 479, 3123, 2848,
	498, 2846, 496, 1706, 2084, 2375, 2108, 2110, 592, 517,
	1819, 1177, 2153, 2092, 2139, 2092, 543, 1064, 1821, 587,
	2049, 515, 543, 479, 2155, 587, 609, 2277, 1446, 1573,
	2488, 130, 616, 2082, 1214, 3116, 1271, 1543, 2103, 973,
	636, 498, 130, 540, 202, 2115, 2374, 2126, 1304, 1868,
	1202, 498, 1443, 498, 2156, 1294, 2096, 1192, 535, 478,
	2105, 1180, 2106, 1214, 2107, 501, 2154, 2880, 2404, 2195,
	2109, 1154, 2116, 2875, 498, 498, 498, 1522, 498, 2125,
	2196, 2123, 2812, 2933, 2201, 2408, 2135, 2581, 514, 1364,
	1806, 1809, 1450, 536, 2932, 2075, 2143, 498, 2144, 481,
	2914, 2137, 2991, 2763, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 1214, 3155, 514, 2278, 1215, 2626, 1272, 3140, 2487,
	1216, 1453, 543, 543, 1411, 2355, 1418, 539, 1293, 1408,
	933, 2351, 2140, 204, 2484, 2085, 1805, 534, 2142, 1448,
	2083, 1562, 530, 1678, 1215, 1552, 1450, 2151, 203, 1216,
	594, 1178, 1451, 1745, 496, 496, 496, 1238, 965, 496,
	2172, 1551, 130, 1547, 525, 1542, 130, 2874, 2534, 479,
	1066, 1477, 2206, 1449, 1478, 1453, 2167, 594, 3041, 1374,
	2169, 3141, 1273, 2193, 498, 2161, 199, 2332, 2687, 1293,
	2320, 1179, 1215, 1955, 2816, 1693, 1690, 1216, 511, 2226,
	2227, 2815, 1726, 1674, 1676, 1239, 1451, 2486, 1236, 1292,
	2174, 3143, 2582, 509, 2197, 1226, 1246, 692, 2176, 2583,
	1677, 197, 2199, 511, 2850, 2272, 2270, 2271, 2263, 2264,
	2265, 2266, 2268, 2269, 934, 2764, 507, 739, 509, 2915,
	1294, 931, 1452, 2016, 2361, 1746, 3154, 2360, 506, 2185,
	1701, 934, 2321, 1807, 604, 200, 1952, 1479, 931, 2876,
	485, 507, 2164, 1951, 2165, 198, 728, 2060, 2059, 1481,
	1292, 1121, 2076, 506, 2333, 2669, 2191, 516, 2302, 2413,
	1110, 3, 510, 574, 36, 973, 1109, 3130, 2305, 1119,
	2837, 2314, 512, 2312, 2313, 1991, 1452, 597, 581, 731,
	2403, 498, 516, 2912, 498, 2769, 693, 510, 2596, 1871,
	2218, 498, 2845, 2409, 498, 498, 973, 512, 3132, 1483,
	2291, 573, 35, 2801, 498, 498, 498, 2335, 2894, 2319,
	498, 2762, 2814, 498, 2666, 2913, 2328, 1281, 572, 32,
	498, 498, 498, 498, 498, 930, 2336, 2337, 2290, 2798,
	571, 79, 2509, 498, 2461, 2344, 570, 78, 1991, 2252,
	498, 2202, 930, 2141, 932, 2327, 932, 2326, 2017, 2018,
	1625, 2329, 498, 959, 2040, 2011, 498, 1268, 1533, 2339,
	1471, 1282, 973, 1606, 2352, 2101, 498, 2356, 2309, 1189,
	2799, 2168, 973, 1266, 2357, 2212, 2316, 2317, 2343, 973,
	2322, 2323, 2363, 526, 2367, 2368, 1484, 2306, 2297, 2298,
	2299, 498, 2163, 498, 2145, 498, 1991, 959, 498, 959,
	959, 959, 1723, 498, 2381, 498, 1710, 1870, 1659, 498,
	1256, 2311, 567, 23, 498, 3084, 498, 694, 1254, 2334,
	884, 602, 603, 498, 1099, 2346, 1252, 486, 487, 568,
	24, 527, 1720, 1120, 1482, 2397, 938, 2378, 36, 2392,
	498, 498, 2338, 496, 1094, 959, 496, 2437, 2448, 496,
	2388, 1118, 965, 2376, 1390, 1114, 1250, 2436, 1280, 1482,
	580, 496, 498, 2383, 595, 596, 2394, 528, 1095, 529,
	1099, 496, 496, 496, 496, 965, 35, 2393, 2479, 1373,
	2386, 1248, 2455, 2456, 2457, 2417, 2458, 2459, 1518, 2398,
	1625, 498, 2435, 32, 1518, 2384, 2422, 2414, 1267, 2385,
	2410, 2794, 2418, 1606, 2795, 79, 498, 2472, 489, 488,
	2426, 78, 695, 1480, 1265, 636, 566, 30, 2406, 2664,
	565, 21, 563, 20, 2478, 2406, 564, 19, 1242, 496,
	553, 15, 973, 554, 16, 1603, 562, 57, 2454, 2797,
	130, 3038, 973, 731, 2447, 561, 56, 552, 55, 2800,
	696, 1255, 1200, 2512, 2460, 490, 491, 498, 1117, 1253,
	560, 12, 1625, 636, 889, 891, 1521, 1251, 2787, 2523,
	1719, 2645, 551, 50, 2643, 1606, 2625, 2430, 558, 47,
	2530, 2531, 2532, 2428, 2088, 2489, 2490, 23, 2080, 2491,
	2079, 130, 2077, 737, 2432, 692, 2547, 1249, 2495, 1625,
	1625, 2074, 1586, 1585, 24, 2498, 559, 48, 550, 49,
	2500, 1583, 1606, 1606, 2502, 739, 1759, 2550, 557, 7,
	1625, 1625, 1247, 1581, 2593, 1578, 556, 6, 555, 38,
	1576, 1574, 1532, 1606, 1606, 1530, 2556, 1759, 2561, 1519,
	496, 2516, 1508, 549, 37, 2796, 1505, 2522, 498, 1493,
	738, 1485, 2467, 1603, 1603, 1625, 2543, 2537, 2539, 2540,
	498, 2961, 2549, 912, 3127, 2869, 973, 2183, 1606, 1241,
	2614, 2868, 2589, 2480, 2963, 1296, 2558, 1697, 2519, 1477,
	2609, 1986, 1478, 2560, 693, 913, 2585, 1986, 2526, 2003,
	2696, 30, 2002, 2832, 1514, 21, 2146, 20, 2000, 1116,
	2044, 19, 2039, 2655, 2034, 15, 582, 2586, 16, 934,
	2010, 57, 1664, 1665, 3001, 2806, 931, 934, 934, 2661,
	56, 934, 55, 2597, 931, 931, 130, 2653, 931, 2599,
	2600, 2594, 2602, 498, 498, 12, 498, 2184, 1240, 2659,
	2665, 498, 2644, 2660, 2646, 934, 2605, 50, 2663, 973,
	2978, 973, 931, 47, 959, 2676, 1297, 2770, 2634, 2678,
	2616, 2019, 2006, 1306, 1307, 1479, 914, 1300, 2037, 2629,
	2008, 498, 1306, 1307, 3037, 605, 2700, 1481, 2843, 2620,
	2095, 48, 2348, 49, 2081, 1539, 2073, 1991, 1309, 2689,
	959, 1939, 2693, 7, 2468, 1669, 2692, 2362, 1599, 2365,
	2014, 6, 498, 38, 1446, 973, 498, 498, 973, 498,
	2688, 2651, 2622, 3138, 1308, 694, 1445, 498, 37, 3153,
	930, 2670, 2683, 1308, 2685, 973, 2671, 1483, 930, 930,
	2679, 1231, 930, 616, 1484, 2680, 1230, 1477, 543, 1377,
	1478, 2715, 2673, 1603, 2694, 2690, 2261, 2262, 2725, 1306,
	1307, 2541, 2730, 2702, 2158, 2157, 930, 2701, 2476, 1462,
	2735, 933, 1516, 2718, 496, 498, 2158, 2159, 1450, 1625,
	932, 2713, 2714, 1905, 1860, 1270, 2309, 2742, 1269, 2533,
	1515, 1387, 1606, 1385, 2722, 744, 2906, 932, 2860, 2723,
	2706, 2445, 2704, 1279, 2726, 1278, 1264, 1453, 2731, 1260,
	2445, 1257, 1243, 1201, 1672, 897, 703, 1512, 736, 2922,
	695, 3048, 690, 2369, 1484, 1448, 1709, 1244, 1711, 2325,
	1960, 3031, 2748, 1479, 498, 2235, 2984, 2888, 1451, 1490,
	1491, 1869, 1388, 53, 973, 1481, 973, 1915, 763, 826,
	2788, 2628, 2377, 2067, 498, 498, 498, 2066, 696, 1449,
	976, 971, 1681, 785, 1059, 1894, 2761, 742, 1760, 498,
	787, 1604, 790, 789, 498, 788, 498, 1605, 1414, 498,
	498, 498, 498, 498, 786, 1602, 2099, 498, 498, 959,
	2807, 680, 1685, 973, 1830, 1483, 1848, 959, 2772, 2773,
	2217, 2777, 1381, 755, 2776, 498, 498, 1846, 479, 1187,
	2786, 2775, 754, 2330, 2440, 2619, 2785, 2778, 2833, 959,
	2855, 1744, 2175, 2720, 2781, 1741, 2642, 2343, 1452, 498,
	513, 2258, 1066, 2771, 496, 1538, 1149, 2819, 498, 498,
	959, 959, 479, 1921, 2824, 1914, 2634, 1910, 1285, 1365,
	2100, 1480, 1223, 2854, 2852, 2341, 1558, 1558, 2827, 2449,
	1099, 2132, 1752, 496, 2878, 496, 2831, 496, 2437, 911,
	2842, 543, 973, 2853, 910, 2851, 909, 3054, 2861, 3051,
	2863, 2634, 1484, 2877, 2864, 1675, 2828, 2859, 2152, 1358,
	2881, 759, 2780, 2634, 2310, 1834, 2416, 934, 1092, 3000,
	1357, 893, 2993, 2900, 931, 1213, 1373, 1212, 2887, 1211,
	1475, 2354, 3148, 2639, 973, 2809, 170, 167, 498, 169,
	498, 636, 973, 498, 168, 2896, 2402, 479, 1066, 587,
	82, 498, 34, 33, 1625, 934, 2858, 973, 109, 479,
	1066, 108, 931, 965, 496, 2774, 107, 1606, 2909, 636,
	2839, 1920, 106, 2901, 2902, 934, 105, 104, 2942, 103,
	102, 1145, 2847, 2927, 2926, 101, 2928, 934, 2904, 100,
	99, 934, 2907, 98, 97, 2905, 934, 498, 96, 498,
	2810, 2908, 959, 636, 2925, 95, 1625, 498, 496, 94,
	2820, 2821, 2946, 479, 496, 93, 496, 92, 496, 1606,
	496, 91, 496, 2935, 90, 2936, 2937, 89, 930, 1480,
	973, 88, 1724, 2634, 1725, 87, 2841, 2959, 2885, 86,
	1991, 85, 496, 496, 496, 84, 2965, 934, 632, 498,
	629, 2692, 2960, 81, 931, 498, 2964, 80, 2958, 31,
	26, 113, 114, 498, 25, 77, 930, 2634, 76, 2634,
	2974, 636, 29, 2634, 18, 2982, 2437, 11, 2101, 2996,
	2885, 17, 22, 2990, 1625, 135, 2977, 2987, 1768, 134,
	133, 498, 498, 132, 131, 2989, 14, 1606, 498, 13,
	128, 129, 2953, 1768, 127, 2998, 126, 125, 3012, 959,
	3014, 124, 123, 10, 498, 8, 112, 9, 959, 959,
	2872, 2482, 498, 3009, 498, 70, 498, 3006, 71, 27,
	43, 3034, 42, 1068, 41, 1072, 2948, 1078, 2950, 3025,
	3026, 3019, 2954, 3027, 3018, 498, 3024, 111, 498, 3016,
	498, 3044, 973, 3005, 161, 160, 159, 158, 930, 154,
	3058, 3059, 157, 3056, 155, 156, 153, 122, 1603, 3063,
	3061, 163, 3062, 866, 3064, 3023, 1059, 3046, 3050, 3069,
	162, 151, 952, 148, 150, 152, 149, 498, 147, 3067,
	164, 121, 120, 119, 934, 932, 118, 117, 616, 116,
	543, 931, 3083, 932, 932, 3082, 5, 932, 3081, 2,
	1, 498, 0, 3096, 934, 933, 3107, 0, 2962, 498,
	3108, 931, 3109, 0, 0, 543, 0, 0, 0, 3115,
	0, 932, 933, 934, 543, 498, 0, 496, 3113, 3114,
	931, 3112, 1185, 0, 1994, 0, 2634, 0, 0, 1190,
	3122, 2784, 496, 1991, 3124, 3121, 0, 3128, 0, 0,
	496, 3129, 3056, 3134, 3135, 3131, 0, 0, 934, 3137,
	0, 2818, 496, 0, 0, 931, 0, 0, 742, 2823,
	934, 3144, 742, 0, 3145, 0, 496, 931, 0, 0,
	3152, 0, 479, 2050, 2634, 3151, 0, 0, 1768, 3156,
	3157, 0, 0, 1991, 0, 930, 0, 2063, 1603, 3158,
	1066, 0, 0, 3161, 3162, 3066, 0, 3165, 0, 0,
	0, 3167, 1496, 0, 0, 930, 2445, 0, 0, 0,
	0, 0, 0, 3028, 1994, 3029, 543, 0, 496, 1500,
	0, 496, 0, 496, 930, 496, 0, 496, 496, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 3045,
	0, 0, 0, 3110, 0, 1994, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 1920, 1920, 975, 975, 930,
	1603, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	2801, 930, 1359, 1360, 1361, 1362, 1363, 0, 1306, 1307,
	934, 0, 0, 0, 0, 1372, 0, 931, 0, 0,
	0, 0, 0, 1382, 0, 1991, 2798, 1603, 1603, 2791,
	0, 0, 3106, 1309, 0, 0, 587, 0, 0, 0,
	934, 0, 2789, 0, 934, 0, 934, 2793, 1603, 1603,
	934, 931, 0, 931, 0, 0, 1501, 931, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 2799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 496, 1920, 1920,
	1920, 0, 0, 1603, 0, 0, 0, 1066, 0, 1066,
	0, 0, 0, 0, 2792, 0, 0, 0, 0, 0,
	0, 0, 1100, 1103, 0, 0, 0, 0, 0, 0,
	496, 496, 496, 0, 496, 0, 1502, 1503, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 496, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 1499, 930, 0, 930, 0, 0,
	0, 930, 0, 1336, 1337, 1338, 1439, 1439, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3004, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2794, 0,
	0, 2795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	1066, 932, 0, 934, 0, 0, 0, 0, 0, 0,
	931, 0, 1504, 0, 0, 0, 2797, 0, 0, 0,
	0, 2654, 0, 0, 0, 0, 2800, 0, 0, 0,
	0, 0, 0, 2654, 0, 0, 0, 2654, 1232, 0,
	0, 0, 2654, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 961, 0, 1603, 0, 1330,
	0, 0, 0, 926, 0, 0, 2101, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 961, 961, 0, 0, 0, 933, 933,
	961, 499, 933, 0, 930, 0, 0, 543, 0, 0,
	543, 0, 2796, 0, 0, 0, 0, 543, 0, 492,
	543, 543, 1920, 1920, 0, 0, 1462, 0, 0, 0,
	496, 1994, 2350, 0, 0, 0, 1994, 0, 0, 2350,
	0, 0, 208, 0, 0, 0, 1994, 2350, 1994, 2350,
	2350, 0, 930, 0, 0, 0, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 1538, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 496, 0,
	0, 0, 965, 1310, 1311, 1312, 1313, 1315, 1316, 0,
	0, 0, 496, 0, 1920, 1920, 1920, 1920, 1920, 1920,
	1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
	1920, 1920, 1920, 0, 1920, 0, 0, 1558, 0, 1558,
	961, 496, 0, 0, 496, 0, 0, 0, 0, 496,
	932, 496, 0, 0, 0, 965, 0, 0, 0, 0,
	1994, 0, 543, 0, 0, 0, 742, 742, 0, 1994,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2465, 1066, 0, 932,
	0, 942, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 932, 974, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 2499, 0, 1742,
	0, 1747, 1603, 0, 0, 0, 0, 1754, 0, 0,
	0, 0, 496, 0, 0, 0, 0, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 0, 1810, 1603, 1812, 1813, 1814, 1815, 0,
	0, 2127, 0, 2545, 0, 0, 0, 0, 0, 0,
	1748, 0, 40, 0, 1838, 0, 0, 0, 0, 0,
	0, 0, 1372, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	0, 0, 0, 0, 0, 2128, 932, 0, 0, 0,
	576, 0, 0, 0, 0, 0, 1912, 0, 1923, 0,
	0, 40, 1603, 1929, 1934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2129, 44, 2654, 0, 933, 0,
	932, 0, 932, 579, 543, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2636, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 1916, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 1462, 0, 0, 0,
	0, 59, 579, 0, 0, 0, 60, 1591, 1462, 0,
	0, 0, 1462, 0, 0, 1595, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 2052, 0, 2054, 1994,
	1558, 0, 1558, 0, 0, 0, 0, 496, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 2654, 0, 0,
	1090, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 1702, 1703, 1994, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1128, 1128,
	1128, 969, 960, 960, 961, 64, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 965, 496, 0, 496, 0, 0, 0, 0,
	975, 960, 960, 496, 139, 66, 0, 67, 960, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 1184, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 578, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2749, 0, 1920, 0, 0, 0, 932, 0, 0,
	0, 173, 0, 139, 66, 0, 67, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 0, 961,
	1920, 0, 2166, 0, 0, 578, 0, 961, 110, 0,
	0, 0, 172, 961, 0, 933, 0, 0, 0, 0,
	1066, 165, 0, 0, 0, 0, 0, 0, 0, 166,
	173, 0, 0, 0, 0, 1462, 0, 0, 960, 0,
	1994, 2350, 1994, 0, 0, 0, 0, 0, 975, 0,
	138, 0, 0, 0, 2636, 1066, 0, 961, 961, 0,
	1994, 0, 2350, 0, 0, 1066, 1066, 496, 1994, 2350,
	0, 172, 0, 496, 496, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 1377, 166, 2636,
	0, 1066, 2063, 0, 0, 1920, 0, 0, 0, 0,
	0, 2636, 2188, 2189, 0, 576, 0, 0, 2194, 138,
	0, 0, 0, 0, 0, 1994, 40, 0, 0, 0,
	0, 0, 0, 0, 2465, 2465, 0, 2207, 0, 0,
	44, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	2033, 2213, 0, 0, 0, 0, 0, 2220, 0, 0,
	0, 0, 2225, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2239,
	0, 0, 2261, 2262, 0, 2279, 2280, 2281, 0, 764,
	74, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	1916, 1916, 0, 0, 0, 0, 59, 579, 0, 0,
	0, 60, 0, 0, 1994, 0, 2350, 975, 0, 2911,
	0, 0, 0, 0, 0, 0, 2111, 496, 0, 0,
	0, 2636, 0, 0, 0, 0, 0, 1934, 1934, 1934,
	0, 2276, 0, 0, 0, 63, 0, 0, 0, 1439,
	74, 0, 2204, 2205, 0, 0, 0, 2315, 0, 0,
	0, 1462, 0, 0, 0, 2636, 0, 2636, 0, 0,
	0, 2636, 0, 496, 0, 496, 0, 0, 0, 0,
	0, 1469, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 1916, 1916, 1916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	2267, 0, 2372, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 2545, 0, 0, 732, 0,
	0, 543, 0, 0, 2283, 0, 0, 0, 0, 2911,
	0, 0, 961, 0, 0, 2284, 2285, 2286, 0, 64,
	0, 0, 0, 0, 975, 0, 0, 0, 2282, 0,
	0, 0, 0, 921, 74, 0, 0, 1994, 2350, 0,
	0, 0, 1462, 0, 496, 0, 0, 0, 139, 66,
	0, 67, 0, 0, 0, 0, 2277, 0, 0, 0,
	2350, 0, 0, 0, 0, 0, 0, 2438, 1066, 171,
	1066, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 110, 0, 0, 0, 0, 961, 961,
	961, 3042, 0, 961, 1066, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 1536, 960, 0, 2636, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 742, 742, 0, 0, 0, 0,
	0, 0, 0, 2545, 0, 0, 0, 742, 974, 0,
	0, 0, 1565, 2278, 1565, 0, 172, 208, 0, 0,
	0, 0, 0, 0, 2501, 165, 0, 1066, 1754, 0,
	0, 0, 2636, 166, 2505, 1994, 0, 2506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2511,
	0, 2911, 0, 0, 138, 0, 2517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2524, 0, 0, 0,
	2315, 0, 975, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2551,
	2552, 1662, 2553, 2554, 2555, 0, 0, 960, 0, 2557,
	0, 0, 208, 0, 0, 960, 2559, 1916, 1916, 0,
	0, 960, 0, 0, 208, 0, 0, 2273, 2274, 2275,
	0, 0, 0, 0, 2272, 2270, 2271, 2263, 2264, 2265,
	2266, 2268, 2269, 0, 0, 1708, 0, 2587, 2588, 0,
	0, 1714, 0, 1715, 0, 1716, 974, 1717, 0, 1718,
	0, 0, 0, 0, 0, 960, 960, 0, 0, 2507,
	2508, 0, 0, 0, 0, 0, 0, 2604, 208, 1727,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 1916,
	1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916,
	1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 0, 1916,
	0, 0, 0, 0, 0, 2630, 0, 0, 0, 0,
	0, 0, 0, 0, 2389, 0, 0, 74, 0, 74,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
	2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
	0, 2584, 0, 0, 0, 0, 0, 0, 2421, 0,
	2423, 2424, 2425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2703,
	0, 0, 0, 0, 0, 974, 2470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 2734, 0, 0, 0,
	2737, 2738, 0, 0, 1978, 0, 0, 0, 0, 0,
	0, 0, 2740, 0, 0, 576, 2743, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 2750, 0, 974, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 969, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 575,
	960, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 961, 961, 961, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 719, 2104, 59, 579, 1128, 0,
	1128, 60, 1128, 0, 969, 969, 0, 0, 0, 0,
	0, 0, 2808, 0, 0, 0, 1368, 0, 1371, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 63, 960, 960, 960, 0,
	0, 960, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1309, 2261, 2262,
	1355, 2279, 2280, 2281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2733, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1325, 2882,
	2883, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 2162, 975, 0, 2276, 0, 0,
	0, 2891, 2892, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 2899, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 2171, 969, 2173,
	1331, 1332, 1333, 1334, 0, 0, 0, 0, 139, 66,
	1314, 67, 0, 0, 0, 0, 0, 0, 0, 74,
	2186, 2712, 1460, 0, 1463, 0, 0, 0, 0, 171,
	0, 0, 2934, 1346, 1356, 0, 2267, 1336, 1337, 1338,
	578, 0, 0, 110, 0, 0, 0, 0, 1916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 173, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 2282, 1916, 1329, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2893, 0, 0, 0, 1354, 0, 172, 0, 0, 0,
	0, 0, 2277, 0, 0, 165, 0, 0, 1343, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2992, 0, 0, 2995, 2917, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 1330, 975, 0, 0, 961, 0, 0,
	1916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1347, 0, 0, 2278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2829, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 975, 2981, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2347, 975, 3080,
	3080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2865, 2866, 0, 0, 0, 3097, 974, 0, 0,
	0, 0, 0, 0, 1345, 0, 1108, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 0, 3080, 0, 0, 2244, 0, 0,
	0, 2245, 0, 2273, 2274, 2275, 0, 0, 0, 2401,
	2272, 2270, 2271, 2263, 2264, 2265, 2266, 2268, 2269, 0,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 2419, 0,
	0, 0, 0, 974, 0, 0, 2427, 0, 2429, 0,
	974, 0, 0, 0, 0, 3080, 0, 975, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	960, 960, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 719, 719,
	0, 0, 961, 0, 2261, 2262, 975, 2279, 2280, 2281,
	961, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 2732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 2261,
	2262, 0, 2279, 2280, 2281, 0, 0, 0, 0, 2503,
	0, 0, 0, 961, 961, 0, 1828, 2514, 0, 0,
	0, 0, 0, 2276, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 0, 1371, 0, 0, 0, 0,
	0, 0, 0, 1306, 1307, 975, 1339, 1340, 1341, 1349,
	1350, 1351, 0, 0, 0, 0, 0, 0, 2276, 0,
	0, 1342, 0, 974, 0, 0, 0, 0, 1309, 0,
	0, 1355, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 2267, 0, 1308, 975, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 921, 1325,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 2267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2282, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 1331, 1332, 1333, 1334, 0, 0, 0, 2277, 0,
	0, 1314, 0, 74, 0, 2282, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	74, 0, 74, 0, 1346, 1356, 0, 974, 1336, 1337,
	1338, 0, 0, 2277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1353, 0, 0, 0, 74, 0, 74, 1323, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 2677, 0, 0, 1329, 74, 0,
	0, 0, 0, 0, 0, 2278, 0, 0, 0, 74,
	0, 0, 961, 0, 0, 1354, 0, 0, 0, 0,
	0, 961, 961, 0, 0, 0, 0, 0, 0, 1343,
	974, 0, 974, 2261, 2262, 960, 2279, 2280, 2281, 0,
	2278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2513, 0, 2261, 2262, 975, 2279, 2280, 2281, 0,
	2724, 0, 969, 0, 0, 0, 0, 1335, 0, 0,
	2727, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 974, 0, 0, 974,
	0, 0, 2276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 1347, 0, 2273,
	2274, 2275, 2276, 0, 0, 0, 2272, 2270, 2271, 2263,
	2264, 2265, 2266, 2268, 2269, 0, 0, 0, 0, 74,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2273, 2274, 2275, 0, 0, 0,
	0, 2272, 2270, 2271, 2263, 2264, 2265, 2266, 2268, 2269,
	0, 2267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2267, 0, 0, 0, 1345, 0, 0, 1320, 1321,
	1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311,
	1312, 1313, 1315, 1316, 0, 0, 0, 0, 0, 2282,
	0, 0, 2754, 0, 0, 974, 0, 974, 0, 1828,
	0, 0, 2261, 2262, 2822, 2279, 2280, 2281, 0, 146,
	1108, 0, 0, 0, 39, 0, 0, 2277, 0, 1371,
	0, 0, 0, 0, 0, 40, 141, 0, 1306, 1307,
	0, 1339, 1340, 1341, 1349, 1350, 1351, 2277, 0, 44,
	960, 0, 0, 0, 974, 0, 1342, 0, 960, 0,
	0, 0, 0, 1309, 46, 143, 1355, 0, 0, 0,
	0, 2276, 0, 0, 0, 0, 45, 0, 51, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 1328, 0, 52,
	0, 960, 960, 54, 1325, 0, 0, 58, 0, 0,
	0, 144, 0, 0, 2278, 59, 72, 0, 0, 0,
	60, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 2278, 0, 0, 0, 0, 0,
	2267, 0, 0, 921, 0, 62, 0, 0, 0, 0,
	0, 921, 921, 0, 63, 921, 1331, 1332, 1333, 1334,
	0, 0, 0, 0, 2918, 0, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 2282, 1346,
	1356, 0, 0, 1336, 1337, 1338, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	2955, 0, 2957, 0, 1352, 1353, 2277, 0, 2273, 2274,
	2275, 0, 1323, 1324, 0, 2272, 2270, 2271, 2263, 2264,
	2265, 2266, 2268, 2269, 0, 1344, 0, 74, 2273, 2274,
	2275, 0, 1329, 960, 0, 2272, 2270, 2271, 2263, 2264,
	2265, 2266, 2268, 2269, 0, 0, 0, 0, 64, 0,
	1354, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 974, 0, 74, 1343, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 75, 139, 66, 0,
	67, 0, 68, 732, 0, 0, 145, 0, 0, 0,
	0, 69, 0, 2278, 0, 0, 0, 0, 171, 0,
	0, 3010, 1335, 0, 0, 0, 0, 74, 0, 83,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 1330,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 3030,
	0, 0, 0, 0, 173, 0, 0, 0, 0, 0,
	960, 0, 1347, 0, 0, 0, 0, 0, 0, 960,
	960, 0, 0, 3047, 0, 0, 0, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 974, 165, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 2273, 2274, 2275,
	0, 0, 0, 0, 2272, 2270, 2271, 2263, 2264, 2265,
	2266, 2268, 2269, 138, 0, 0, 4, 0, 0, 0,
	1345, 0, 0, 1320, 1321, 1327, 1326, 1322, 1348, 0,
	1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 2247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1859, 0, 783, 771, 772, 769, 770, 762, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 1856, 262, 0, 0, 0, 0, 819,
	765, 921, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 1857, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 921, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 74, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 921, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 1855, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 74, 0, 747,
	0, 0, 0, 0, 745, 746, 1858, 0, 0, 0,
	0, 0, 0, 758, 1853, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1828, 258, 259, 260, 261, 977, 262, 978,
	979, 980, 981, 214, 982, 983, 984, 985, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 986, 269,
	270, 271, 272, 273, 274, 987, 988, 275, 219, 220,
	221, 989, 276, 222, 990, 962, 991, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 992, 286, 0,
	287, 288, 993, 868, 289, 290, 291, 994, 995, 997,
	996, 998, 999, 1000, 292, 293, 500, 294, 295, 296,
	223, 224, 1001, 297, 1002, 298, 1003, 299, 1004, 1005,
	300, 301, 1006, 302, 303, 1007, 0, 1008, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 1009, 869,
	1010, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 1011, 319, 1012, 1013, 870, 320, 1014,
	321, 229, 1015, 230, 1016, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 872, 1017, 237, 329, 0, 0,
	0, 1018, 328, 330, 337, 1019, 871, 331, 234, 333,
	332, 334, 335, 336, 235, 1020, 236, 1021, 338, 873,
	874, 339, 340, 341, 875, 342, 343, 0, 0, 344,
	345, 346, 1022, 348, 347, 1023, 238, 876, 349, 350,
	877, 1024, 351, 352, 1025, 1026, 353, 0, 354, 937,
	936, 355, 356, 357, 358, 360, 361, 359, 878, 362,
	363, 365, 364, 1027, 1028, 879, 1029, 239, 366, 240,
	367, 368, 1030, 369, 370, 1031, 1032, 371, 372, 1033,
	1034, 373, 241, 880, 374, 881, 242, 375, 376, 377,
	378, 379, 380, 381, 382, 1035, 383, 243, 384, 244,
	385, 1036, 386, 387, 388, 389, 390, 391, 245, 392,
	393, 1037, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 1038, 406, 882, 407, 408,
	409, 410, 246, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 1039, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 1040, 431, 412, 413, 432, 883, 433, 247,
	434, 435, 1041, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 248, 1042, 446, 447, 1043, 448,
	449, 450, 451, 452, 308, 453, 309, 454, 455, 1044,
	249, 250, 251, 456, 1045, 1046, 457, 458, 252, 253,
	1047, 459, 460, 0, 461, 462, 1048, 1049, 463, 464,
	465, 467, 1050, 468, 1051, 466, 469, 470, 471, 254,
	255, 1052, 1053, 472, 256, 1054, 1055, 1056, 1057, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 1965, 0, 0, 0, 0,
	0, 0, 0, 0, 1966, 258, 259, 260, 261, 977,
	262, 978, 979, 980, 981, 214, 982, 983, 984, 985,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	986, 269, 270, 271, 272, 273, 274, 987, 988, 275,
	219, 220, 221, 989, 276, 222, 990, 962, 991, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 992,
	286, 0, 287, 288, 993, 868, 289, 290, 291, 994,
	995, 997, 996, 998, 999, 1000, 292, 293, 500, 294,
	295, 296, 223, 224, 1001, 297, 1002, 298, 1003, 299,
	1004, 1005, 300, 301, 1006, 302, 303, 1007, 0, 1008,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1009, 869, 1010, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1011, 319, 1012, 1013, 870,
	320, 1014, 321, 229, 1015, 230, 1016, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 872, 1017, 237, 329,
	0, 0, 0, 1018, 328, 330, 337, 1019, 871, 331,
	234, 333, 332, 334, 335, 336, 235, 1020, 236, 1021,
	338, 873, 874, 339, 340, 341, 875, 342, 343, 0,
	0, 344, 345, 346, 1022, 348, 347, 1023, 238, 876,
	349, 350, 877, 1024, 351, 352, 1025, 1026, 353, 0,
	354, 937, 936, 355, 356, 357, 358, 360, 361, 359,
	878, 362, 363, 365, 364, 1027, 1028, 879, 1029, 239,
	366, 240, 367, 368, 1030, 369, 370, 1031, 1032, 371,
	372, 1033, 1034, 373, 241, 880, 374, 881, 242, 375,
	376, 377, 378, 379, 380, 381, 382, 1035, 383, 243,
	384, 244, 385, 1036, 386, 387, 388, 389, 390, 391,
	245, 392, 393, 1037, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 1038, 406, 882,
	407, 408, 409, 410, 246, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 1039, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 1040, 431, 412, 413, 432, 883,
	433, 247, 434, 435, 1041, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 248, 1042, 446, 447,
	1043, 448, 449, 450, 451, 452, 308, 453, 309, 454,
	455, 1044, 249, 250, 251, 456, 1045, 1046, 457, 458,
	252, 253, 1047, 459, 460, 0, 461, 462, 1048, 1049,
	463, 464, 465, 467, 1050, 468, 1051, 466, 469, 470,
	471, 254, 255, 1052, 1053, 472, 256, 1054, 1055, 1056,
	1057, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2779, 258, 259,
	260, 261, 977, 262, 978, 979, 980, 981, 214, 982,
	983, 984, 985, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 986, 269, 270, 271, 272, 273, 274,
	987, 988, 275, 219, 220, 221, 989, 276, 222, 990,
	962, 991, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 992, 286, 0, 287, 288, 993, 868, 289,
	290, 291, 994, 995, 997, 996, 998, 999, 1000, 292,
	293, 500, 294, 295, 296, 223, 224, 1001, 297, 1002,
	298, 1003, 299, 1004, 1005, 300, 301, 1006, 302, 303,
	1007, 0, 1008, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 1009, 869, 1010, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 1011, 319,
	1012, 1013, 870, 320, 1014, 321, 229, 1015, 230, 1016,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 872,
	1017, 237, 329, 0, 0, 0, 1018, 328, 330, 337,
	1019, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	1020, 236, 1021, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 1022, 348, 347,
	1023, 238, 876, 349, 350, 877, 1024, 351, 352, 1025,
	1026, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 1027, 1028,
	879, 1029, 239, 366, 240, 367, 368, 1030, 369, 370,
	1031, 1032, 371, 372, 1033, 1034, 373, 241, 880, 374,
	881, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	1035, 383, 243, 384, 244, 385, 1036, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 1037, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	1038, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 1039, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 1040, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 1041, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	1042, 446, 447, 1043, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 1044, 249, 250, 251, 456, 1045,
	1046, 457, 458, 252, 253, 1047, 459, 460, 0, 461,
	462, 1048, 1049, 463, 464, 465, 467, 1050, 468, 1051,
	466, 469, 470, 471, 254, 255, 1052, 1053, 472, 256,
	1054, 1055, 1056, 1057, 473, 474, 257, 475, 476, 477,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2886, 258, 259, 260, 261,
	977, 262, 978, 979, 980, 981, 214, 982, 983, 984,
	985, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 986, 269, 270, 271, 272, 273, 274, 987, 988,
	275, 219, 220, 221, 989, 276, 222, 990, 962, 991,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	992, 286, 0, 287, 288, 993, 868, 289, 290, 291,
	994, 995, 997, 996, 998, 999, 1000, 292, 293, 500,
	294, 295, 296, 223, 224, 1001, 297, 1002, 298, 1003,
	299, 1004, 1005, 300, 301, 1006, 302, 303, 1007, 0,
	1008, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 1009, 869, 1010, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 1011, 319, 1012, 1013,
	870, 320, 1014, 321, 229, 1015, 230, 1016, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 872, 1017, 237,
	329, 0, 0, 0, 1018, 328, 330, 337, 1019, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 1020, 236,
	1021, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 1022, 348, 347, 1023, 238,
	876, 349, 350, 877, 1024, 351, 352, 1025, 1026, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 1027, 1028, 879, 1029,
	239, 366, 240, 367, 368, 1030, 369, 370, 1031, 1032,
	371, 372, 1033, 1034, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	243, 384, 244, 385, 1036, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 1044, 249, 250, 251, 456, 1045, 1046, 457,
	458, 252, 253, 1047, 459, 460, 0, 461, 462, 1048,
	1049, 463, 464, 465, 467, 1050, 468, 1051, 466, 469,
	470, 471, 254, 255, 1052, 1053, 472, 256, 1054, 1055,
	1056, 1057, 473, 474, 257, 475, 476, 477, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2527, 258, 259, 260, 261, 977, 262,
	978, 979, 980, 981, 214, 982, 983, 984, 985, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 986,
	269, 270, 271, 272, 273, 274, 987, 988, 275, 219,
	220, 221, 989, 276, 222, 990, 962, 991, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 992, 286,
	0, 287, 288, 993, 868, 289, 290, 291, 994, 995,
	997, 996, 998, 999, 1000, 292, 293, 500, 294, 295,
	296, 223, 224, 1001, 297, 1002, 298, 1003, 299, 1004,
	1005, 300, 301, 1006, 302, 303, 1007, 0, 1008, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 1009,
	869, 1010, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 1011, 319, 1012, 1013, 870, 320,
	1014, 321, 229, 1015, 230, 1016, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 872, 1017, 237, 329, 0,
	0, 0, 1018, 328, 330, 337, 1019, 871, 331, 234,
	333, 332, 334, 335, 336, 235, 1020, 236, 1021, 338,
	873, 874, 339, 340, 341, 875, 342, 343, 0, 0,
	344, 345, 346, 1022, 348, 347, 1023, 238, 876, 349,
	350, 877, 1024, 351, 352, 1025, 1026, 353, 0, 354,
	937, 936, 355, 356, 357, 358, 360, 361, 359, 878,
	362, 363, 365, 364, 1027, 1028, 879, 1029, 239, 366,
	240, 367, 368, 1030, 369, 370, 1031, 1032, 371, 372,
	1033, 1034, 373, 241, 880, 374, 881, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 1035, 383, 243, 384,
	244, 385, 1036, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 1037, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 1038, 406, 882, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 1039, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 1040, 431, 412, 413, 432, 883, 433,
	247, 434, 435, 1041, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 1042, 446, 447, 1043,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	1044, 249, 250, 251, 456, 1045, 1046, 457, 458, 252,
	253, 1047, 459, 460, 0, 461, 462, 1048, 1049, 463,
	464, 465, 467, 1050, 468, 1051, 466, 469, 470, 471,
	254, 255, 1052, 1053, 472, 256, 1054, 1055, 1056, 1057,
	473, 474, 257, 475, 476, 477, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2518, 258, 259, 260, 261, 977, 262, 978, 979,
	980, 981, 214, 982, 983, 984, 985, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 986, 269, 270,
	271, 272, 273, 274, 987, 988, 275, 219, 220, 221,
	989, 276, 222, 990, 962, 991, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 992, 286, 0, 287,
	288, 993, 868, 289, 290, 291, 994, 995, 997, 996,
	998, 999, 1000, 292, 293, 500, 294, 295, 296, 223,
	224, 1001, 297, 1002, 298, 1003, 299, 1004, 1005, 300,
	301, 1006, 302, 303, 1007, 0, 1008, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 1009, 869, 1010,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 1011, 319, 1012, 1013, 870, 320, 1014, 321,
	229, 1015, 230, 1016, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 872, 1017, 237, 329, 0, 0, 0,
	1018, 328, 330, 337, 1019, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 1020, 236, 1021, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 1022, 348, 347, 1023, 238, 876, 349, 350, 877,
	1024, 351, 352, 1025, 1026, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 1027, 1028, 879, 1029, 239, 366, 240, 367,
	368, 1030, 369, 370, 1031, 1032, 371, 372, 1033, 1034,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 1035, 383, 243, 384, 244, 385,
	1036, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	1037, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 1038, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 1039, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 1040, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 1041, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 1042, 446, 447, 1043, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 1044, 249,
	250, 251, 456, 1045, 1046, 457, 458, 252, 253, 1047,
	459, 460, 0, 461, 462, 1048, 1049, 463, 464, 465,
	467, 1050, 468, 1051, 466, 469, 470, 471, 254, 255,
	1052, 1053, 472, 256, 1054, 1055, 1056, 1057, 473, 474,
	257, 475, 476, 477, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2405,
	258, 259, 260, 261, 977, 262, 978, 979, 980, 981,
	214, 982, 983, 984, 985, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 986, 269, 270, 271, 272,
	273, 274, 987, 988, 275, 219, 220, 221, 989, 276,
	222, 990, 962, 991, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 992, 286, 0, 287, 288, 993,
	868, 289, 290, 291, 994, 995, 997, 996, 998, 999,
	1000, 292, 293, 500, 294, 295, 296, 223, 224, 1001,
	297, 1002, 298, 1003, 299, 1004, 1005, 300, 301, 1006,
	302, 303, 1007, 0, 1008, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 1009, 869, 1010, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	1011, 319, 1012, 1013, 870, 320, 1014, 321, 229, 1015,
	230, 1016, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 872, 1017, 237, 329, 0, 0, 0, 1018, 328,
	330, 337, 1019, 871, 331, 234, 333, 332, 334, 335,
	336, 235, 1020, 236, 1021, 338, 873, 874, 339, 340,
	341, 875, 342, 343, 0, 0, 344, 345, 346, 1022,
	348, 347, 1023, 238, 876, 349, 350, 877, 1024, 351,
	352, 1025, 1026, 353, 0, 354, 937, 936, 355, 356,
	357, 358, 360, 361, 359, 878, 362, 363, 365, 364,
	1027, 1028, 879, 1029, 239, 366, 240, 367, 368, 1030,
	369, 370, 1031, 1032, 371, 372, 1033, 1034, 373, 241,
	880, 374, 881, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 1035, 383, 243, 384, 244, 385, 1036, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 1037, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 1038, 406, 882, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 1039,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 1040,
	431, 412, 413, 432, 883, 433, 247, 434, 435, 1041,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 1042, 446, 447, 1043, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 1044, 249, 250, 251,
	456, 1045, 1046, 457, 458, 252, 253, 1047, 459, 460,
	0, 461, 462, 1048, 1049, 463, 464, 465, 467, 1050,
	468, 1051, 466, 469, 470, 471, 254, 255, 1052, 1053,
	472, 256, 1054, 1055, 1056, 1057, 473, 474, 257, 475,
	476, 477, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1852, 258, 259,
	260, 261, 977, 262, 978, 979, 980, 981, 214, 982,
	983, 984, 985, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 986, 269, 270, 271, 272, 273, 274,
	987, 988, 275, 219, 220, 221, 989, 276, 222, 990,
	962, 991, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 992, 286, 0, 287, 288, 993, 868, 289,
	290, 291, 994, 995, 997, 996, 998, 999, 1000, 292,
	293, 500, 294, 295, 296, 223, 224, 1001, 297, 1002,
	298, 1003, 299, 1004, 1005, 300, 301, 1006, 302, 303,
	1007, 0, 1008, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 1009, 869, 1010, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 1011, 319,
	1012, 1013, 870, 320, 1014, 321, 229, 1015, 230, 1016,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 872,
	1017, 237, 329, 0, 0, 0, 1018, 328, 330, 337,
	1019, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	1020, 236, 1021, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 1022, 348, 347,
	1023, 238, 876, 349, 350, 877, 1024, 351, 352, 1025,
	1026, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 1027, 1028,
	879, 1029, 239, 366, 240, 367, 368, 1030, 369, 370,
	1031, 1032, 371, 372, 1033, 1034, 373, 241, 880, 374,
	881, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	1035, 383, 243, 384, 244, 385, 1036, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 1037, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	1038, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 1039, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 1040, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 1041, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	1042, 446, 447, 1043, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 1044, 249, 250, 251, 456, 1045,
	1046, 457, 458, 252, 253, 1047, 459, 460, 0, 461,
	462, 1048, 1049, 463, 464, 465, 467, 1050, 468, 1051,
	466, 469, 470, 471, 254, 255, 1052, 1053, 472, 256,
	1054, 1055, 1056, 1057, 473, 474, 257, 475, 476, 477,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 258, 259, 260, 261,
	977, 262, 978, 979, 980, 981, 214, 982, 983, 984,
	985, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 986, 269, 270, 271, 272, 273, 274, 987, 988,
	275, 219, 220, 221, 989, 276, 222, 990, 962, 991,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	992, 286, 0, 287, 288, 993, 868, 289, 290, 291,
	994, 995, 997, 996, 998, 999, 1000, 292, 293, 500,
	294, 295, 296, 223, 224, 1001, 297, 1002, 298, 1003,
	299, 1004, 1005, 300, 301, 1006, 302, 303, 1007, 0,
	1008, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 1009, 869, 1010, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 1011, 319, 1012, 1013,
	870, 320, 1014, 321, 229, 1015, 230, 1016, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 872, 1017, 237,
	329, 0, 0, 0, 1018, 328, 330, 337, 1019, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 1020, 236,
	1021, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 1022, 348, 347, 1023, 238,
	876, 349, 350, 877, 1024, 351, 352, 1025, 1026, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 1027, 1028, 879, 1029,
	239, 366, 240, 367, 368, 1030, 369, 370, 1031, 1032,
	371, 372, 1033, 1034, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	243, 384, 244, 385, 1036, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 1044, 249, 250, 251, 456, 1045, 1046, 457,
	458, 252, 253, 1047, 459, 460, 0, 461, 462, 1048,
	1049, 463, 464, 465, 467, 1050, 468, 1051, 466, 469,
	470, 471, 254, 255, 1052, 1053, 472, 256, 1054, 1055,
	1056, 1057, 473, 474, 257, 475, 476, 477, 733, 0,
	783, 771, 772, 769, 770, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 819, 765, 0, 0,
	0, 263, 264, 265, 215, 840, 803, 841, 791, 827,
	842, 0, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 872, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 873, 874, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 853,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 879, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 171, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	883, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 173, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 0, 457,
	458, 863, 864, 777, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 1155, 865, 0, 0, 472, 256, 0, 0,
	0, 165, 473, 474, 257, 475, 476, 477, 749, 166,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 783, 771, 772, 769, 770, 762, 0,
	1375, 0, 0, 0, 0, 0, 761, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 171, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 173, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 1155, 865, 0, 0, 472,
	256, 0, 0, 0, 165, 473, 474, 257, 475, 476,
	477, 749, 166, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 783, 771, 772, 769,
	770, 762, 0, 1375, 0, 0, 0, 0, 0, 761,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 765, 0, 0, 0, 263, 264, 265,
	215, 840, 803, 841, 791, 827, 842, 1930, 269, 793,
	792, 272, 273, 274, 766, 818, 275, 843, 844, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 828, 296, 845,
	846, 751, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 756, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 1935, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 873, 874,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 1931, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 753, 752,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 748, 0, 879, 779, 823, 366, 854, 367,
	368, 0, 804, 805, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 757, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 1932, 457, 458, 863, 864, 777,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 801, 469, 470, 471, 254, 865,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 783,
	771, 772, 769, 770, 762, 0, 758, 0, 0, 0,
	0, 0, 761, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 215, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 291, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 296, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 820, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 355, 356, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 2695, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 1440, 783, 771, 772, 769, 770, 762, 758,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 1756, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 1755, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 741, 761,
	783, 771, 772, 769, 770, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 819, 765, 0, 0,
	0, 263, 264, 265, 215, 840, 803, 841, 791, 827,
	842, 0, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 872, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 873, 874, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 853,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 879, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 743, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	883, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 0, 457,
	458, 863, 864, 777, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 254, 865, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 783, 771, 772, 769, 770, 762, 0,
	758, 0, 0, 0, 0, 0, 761, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 2529, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 783, 771, 772, 769,
	770, 762, 0, 758, 0, 0, 0, 0, 0, 761,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 765, 0, 0, 0, 263, 264, 265,
	215, 840, 803, 841, 791, 827, 842, 0, 269, 793,
	792, 272, 273, 274, 766, 818, 275, 843, 844, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 828, 296, 845,
	846, 751, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 756, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 873, 874,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 753, 752,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 748, 0, 879, 779, 823, 366, 854, 367,
	368, 0, 804, 805, 743, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 757, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 0, 457, 458, 863, 864, 777,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 801, 469, 470, 471, 254, 865,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 783,
	771, 772, 769, 770, 762, 0, 758, 0, 0, 0,
	0, 0, 761, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 215, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 291, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 296, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 820, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 355, 356, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 0, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 1440, 783, 771, 772, 769, 770, 762, 758,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 1935, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 1922, 761,
	783, 771, 772, 769, 770, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 819, 765, 0, 0,
	0, 263, 264, 265, 215, 840, 803, 841, 791, 827,
	842, 0, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 872, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 873, 874, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 853,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 879, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	883, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 0, 457,
	458, 863, 864, 777, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 254, 865, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 1911, 761, 783, 771, 772,
	769, 770, 762, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 819, 765, 0, 0, 0, 263, 264,
	265, 215, 840, 803, 841, 791, 827, 842, 0, 269,
	793, 792, 272, 273, 274, 766, 818, 275, 843, 844,
	221, 0, 276, 825, 0, 808, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 0, 286, 0,
	287, 288, 0, 868, 289, 290, 291, 811, 809, 810,
	815, 813, 812, 814, 292, 293, 500, 294, 828, 296,
	845, 846, 751, 297, 0, 298, 0, 299, 0, 0,
	829, 301, 0, 302, 303, 0, 0, 0, 756, 304,
	305, 307, 310, 306, 311, 312, 847, 848, 778, 869,
	0, 0, 0, 0, 0, 313, 314, 315, 849, 830,
	831, 0, 318, 0, 319, 0, 0, 870, 320, 0,
	321, 850, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 820, 821, 824, 872, 0, 822, 802, 0, 0,
	0, 0, 328, 330, 337, 0, 871, 331, 851, 806,
	832, 833, 834, 835, 852, 0, 807, 0, 338, 873,
	874, 339, 340, 341, 875, 836, 837, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 853, 876, 349, 350,
	877, 0, 351, 352, 0, 0, 353, 0, 354, 753,
	752, 355, 356, 357, 358, 360, 795, 359, 878, 362,
	363, 365, 364, 748, 0, 879, 779, 823, 366, 854,
	367, 368, 0, 804, 805, 0, 0, 371, 372, 0,
	0, 373, 241, 880, 374, 881, 855, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 856, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 857, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 882, 407, 408,
	409, 410, 757, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 796, 797, 798, 799, 423,
	429, 430, 816, 431, 412, 413, 432, 883, 433, 858,
	800, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	838, 440, 441, 442, 859, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 794, 455, 0,
	860, 861, 862, 839, 0, 0, 457, 458, 863, 864,
	777, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 817, 468, 0, 801, 469, 470, 471, 254,
	865, 0, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 1909, 761, 783, 771, 772, 769, 770, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	819, 765, 0, 0, 0, 263, 264, 265, 215, 840,
	803, 841, 791, 827, 842, 0, 269, 793, 792, 272,
	273, 274, 766, 818, 275, 843, 844, 221, 0, 276,
	825, 0, 808, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	868, 289, 290, 291, 811, 809, 810, 815, 813, 812,
	814, 292, 293, 500, 294, 828, 296, 845, 846, 751,
	297, 0, 298, 0, 299, 0, 0, 829, 301, 0,
	302, 303, 0, 0, 0, 756, 304, 305, 307, 310,
	306, 311, 312, 847, 848, 778, 869, 0, 0, 0,
	0, 0, 313, 314, 315, 849, 830, 831, 0, 318,
	0, 319, 0, 0, 870, 320, 0, 321, 850, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 820, 821,
	824, 872, 0, 822, 802, 0, 0, 0, 0, 328,
	330, 337, 0, 871, 331, 851, 806, 832, 833, 834,
	835, 852, 0, 807, 0, 338, 873, 874, 339, 340,
	341, 875, 836, 837, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 853, 876, 349, 350, 877, 0, 351,
	352, 0, 0, 353, 0, 354, 753, 752, 355, 356,
	357, 358, 360, 795, 359, 878, 362, 363, 365, 364,
	748, 0, 879, 779, 823, 366, 854, 367, 368, 0,
	804, 805, 0, 0, 371, 372, 0, 0, 373, 241,
	880, 374, 881, 855, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 856, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 857, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 882, 407, 408, 409, 410, 757,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 796, 797, 798, 799, 423, 429, 430, 816,
	431, 412, 413, 432, 883, 433, 858, 800, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 838, 440, 441,
	442, 859, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 794, 455, 0, 860, 861, 862,
	839, 0, 0, 457, 458, 863, 864, 777, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 817,
	468, 0, 801, 469, 470, 471, 254, 865, 0, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 1907,
	761, 783, 771, 772, 769, 770, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 819, 765, 0,
	0, 0, 263, 264, 265, 215, 840, 803, 841, 791,
	827, 842, 0, 269, 793, 792, 272, 273, 274, 766,
	818, 275, 843, 844, 221, 0, 276, 825, 0, 808,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 285,
	282, 0, 286, 0, 287, 288, 0, 868, 289, 290,
	291, 811, 809, 810, 815, 813, 812, 814, 292, 293,
	500, 294, 828, 296, 845, 846, 751, 297, 0, 298,
	0, 299, 0, 0, 829, 301, 0, 302, 303, 0,
	0, 0, 756, 304, 305, 307, 310, 306, 311, 312,
	847, 848, 778, 869, 0, 0, 0, 0, 0, 313,
	314, 315, 849, 830, 831, 0, 318, 0, 319, 0,
	0, 870, 320, 0, 321, 850, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 820, 821, 824, 872, 0,
	822, 802, 0, 0, 0, 0, 328, 330, 337, 0,
	871, 331, 851, 806, 832, 833, 834, 835, 852, 0,
	807, 0, 338, 873, 874, 339, 340, 341, 875, 836,
	837, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	853, 876, 349, 350, 877, 0, 351, 352, 0, 0,
	353, 0, 354, 753, 752, 355, 356, 357, 358, 360,
	795, 359, 878, 362, 363, 365, 364, 748, 0, 879,
	779, 823, 366, 854, 367, 368, 0, 804, 805, 0,
	0, 371, 372, 0, 0, 373, 241, 880, 374, 881,
	855, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 856, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 857, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 882, 407, 408, 409, 410, 757, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 796,
	797, 798, 799, 423, 429, 430, 816, 431, 412, 413,
	432, 883, 433, 858, 800, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 838, 440, 441, 442, 859, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 794, 455, 0, 860, 861, 862, 839, 0, 0,
	457, 458, 863, 864, 777, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 817, 468, 0, 801,
	469, 470, 471, 254, 865, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 1904, 761, 1896, 771,
	772, 769, 770, 762, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 819, 765, 0, 0, 0, 263,
	264, 265, 215, 840, 803, 841, 791, 827, 842, 0,
	269, 793, 792, 272, 273, 274, 766, 818, 275, 843,
	844, 221, 0, 276, 825, 0, 808, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 868, 289, 290, 291, 811, 809,
	810, 815, 813, 812, 814, 292, 293, 500, 294, 828,
	1899, 845, 846, 751, 297, 0, 298, 0, 299, 0,
	0, 829, 301, 0, 302, 303, 0, 0, 0, 756,
	304, 305, 307, 310, 306, 311, 312, 847, 848, 778,
	869, 0, 0, 0, 0, 0, 313, 314, 315, 849,
	830, 831, 0, 318, 0, 319, 0, 0, 870, 320,
	0, 321, 850, 0, 230, 0, 322, 323, 1900, 325,
	326, 327, 820, 821, 824, 872, 0, 822, 802, 0,
	0, 0, 0, 328, 330, 337, 0, 871, 331, 851,
	806, 832, 833, 834, 835, 852, 0, 807, 0, 338,
	873, 874, 339, 340, 341, 875, 836, 837, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 853, 876, 349,
	350, 877, 0, 351, 352, 0, 0, 353, 0, 354,
	753, 752, 1901, 1898, 357, 358, 360, 795, 359, 878,
	362, 363, 365, 364, 748, 0, 879, 779, 823, 366,
	854, 367, 368, 0, 804, 805, 0, 0, 371, 372,
	0, 0, 373, 241, 880, 374, 881, 855, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 856, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 857,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 882, 407,
	408, 409, 410, 757, 411, 0, 415, 416, 417, 418,
	419, 420, 1902, 0, 427, 428, 796, 797, 798, 799,
	423, 429, 430, 816, 431, 412, 413, 432, 883, 433,
	858, 800, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 838, 440, 441, 442, 859, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 794, 455,
	0, 860, 861, 862, 839, 0, 0, 457, 458, 863,
	864, 777, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 817, 468, 0, 801, 469, 470, 471,
	254, 865, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 1897, 477, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 1893, 761, 1896, 771, 772, 769, 770,
	762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 819, 765, 0, 0, 0, 263, 264, 265, 215,
	840, 803, 841, 791, 827, 842, 0, 269, 793, 792,
	272, 273, 274, 766, 818, 275, 843, 844, 221, 0,
	276, 825, 0, 808, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 285, 282, 0, 286, 0, 287, 288,
	0, 868, 289, 290, 291, 811, 809, 810, 815, 813,
	812, 814, 292, 293, 500, 294, 828, 1899, 845, 846,
	751, 297, 0, 298, 0, 299, 0, 0, 829, 301,
	0, 302, 303, 0, 0, 0, 756, 304, 305, 307,
	310, 306, 311, 312, 847, 848, 778, 869, 0, 0,
	0, 0, 0, 313, 314, 315, 849, 830, 831, 0,
	318, 0, 319, 0, 0, 870, 320, 0, 321, 850,
	0, 230, 0, 322, 323, 1900, 325, 326, 327, 820,
	821, 824, 872, 0, 822, 802, 0, 0, 0, 0,
	328, 330, 337, 0, 871, 331, 851, 806, 832, 833,
	834, 835, 852, 0, 807, 0, 338, 873, 874, 339,
	340, 341, 875, 836, 837, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 853, 876, 349, 350, 877, 0,
	351, 352, 0, 0, 353, 0, 354, 753, 752, 1901,
	1898, 357, 358, 360, 795, 359, 878, 362, 363, 365,
	364, 748, 0, 879, 779, 823, 366, 854, 367, 368,
	0, 804, 805, 0, 0, 371, 372, 0, 0, 373,
	241, 880, 374, 881, 855, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 856, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 857, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 882, 407, 408, 409, 410,
	757, 411, 0, 415, 416, 417, 418, 419, 420, 1902,
	0, 427, 428, 796, 797, 798, 799, 423, 429, 430,
	816, 431, 412, 413, 432, 883, 433, 858, 800, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 838, 440,
	441, 442, 859, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 794, 455, 0, 860, 861,
	862, 839, 0, 0, 457, 458, 863, 864, 777, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	817, 468, 0, 801, 469, 470, 471, 254, 865, 0,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 1897, 477, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 783, 771,
	772, 769, 770, 762, 0, 758, 0, 0, 0, 0,
	0, 761, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 819, 765, 0, 0, 0, 263,
	264, 265, 215, 840, 803, 841, 791, 827, 842, 0,
	269, 793, 792, 272, 273, 274, 766, 818, 275, 843,
	844, 221, 0, 276, 825, 0, 808, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 868, 289, 290, 291, 811, 809,
	810, 815, 813, 812, 814, 292, 293, 500, 294, 828,
	296, 845, 846, 751, 297, 0, 298, 0, 299, 0,
	0, 829, 301, 0, 302, 303, 0, 0, 0, 756,
	304, 305, 307, 310, 306, 311, 312, 847, 848, 778,
	869, 0, 0, 0, 0, 0, 313, 314, 315, 849,
	830, 831, 0, 318, 0, 319, 0, 0, 870, 320,
	0, 321, 850, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 820, 821, 824, 872, 0, 822, 802, 0,
	0, 0, 0, 328, 330, 337, 0, 871, 331, 851,
	806, 832, 833, 834, 835, 852, 0, 807, 0, 338,
	873, 874, 339, 340, 341, 875, 836, 837, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 853, 876, 349,
	350, 877, 0, 351, 352, 0, 0, 353, 0, 354,
	753, 752, 355, 356, 357, 358, 360, 795, 359, 878,
	362, 363, 365, 364, 748, 0, 879, 779, 823, 366,
	854, 367, 368, 0, 804, 805, 0, 0, 371, 372,
	0, 0, 373, 241, 880, 374, 881, 855, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 856, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 857,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 882, 407,
	408, 409, 410, 757, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 796, 797, 798, 799,
	423, 429, 430, 816, 431, 412, 413, 432, 883, 433,
	858, 800, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 838, 440, 441, 442, 859, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 794, 455,
	0, 860, 861, 862, 839, 0, 0, 457, 458, 863,
	864, 777, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 817, 468, 0, 801, 469, 470, 471,
	254, 865, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 1380, 0, 758, 0,
	0, 0, 0, 0, 761, 783, 771, 772, 769, 770,
	762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 1743, 262, 0, 0, 0,
	0, 819, 765, 0, 0, 0, 263, 264, 265, 215,
	840, 803, 841, 791, 827, 842, 0, 269, 793, 792,
	272, 273, 274, 766, 818, 275, 843, 844, 221, 0,
	276, 825, 0, 808, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 285, 282, 0, 286, 0, 287, 288,
	0, 868, 289, 290, 291, 811, 809, 810, 815, 813,
	812, 814, 292, 293, 500, 294, 828, 296, 845, 846,
	751, 297, 0, 298, 0, 299, 0, 0, 829, 301,
	0, 302, 303, 0, 0, 0, 756, 304, 305, 307,
	310, 306, 311, 312, 847, 848, 778, 869, 0, 0,
	0, 0, 0, 313, 314, 315, 849, 830, 831, 0,
	318, 0, 319, 0, 0, 870, 320, 0, 321, 850,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 820,
	821, 824, 872, 0, 822, 802, 0, 0, 0, 0,
	328, 330, 337, 0, 871, 331, 851, 806, 832, 833,
	834, 835, 852, 0, 807, 0, 338, 873, 874, 339,
	340, 341, 875, 836, 837, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 853, 876, 349, 350, 877, 0,
	351, 352, 0, 0, 353, 0, 354, 753, 752, 355,
	356, 357, 358, 360, 795, 359, 878, 362, 363, 365,
	364, 748, 0, 879, 779, 823, 366, 854, 367, 368,
	0, 804, 805, 0, 0, 371, 372, 0, 0, 373,
	241, 880, 374, 881, 855, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 856, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 857, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 882, 407, 408, 409, 410,
	757, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 796, 797, 798, 799, 423, 429, 430,
	816, 431, 412, 413, 432, 883, 433, 858, 800, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 838, 440,
	441, 442, 859, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 794, 455, 0, 860, 861,
	862, 839, 0, 0, 457, 458, 863, 864, 777, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	817, 468, 0, 801, 469, 470, 471, 254, 865, 0,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 0, 0,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	1080, 761, 783, 771, 772, 769, 770, 762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 765,
	0, 0, 0, 263, 264, 265, 215, 840, 803, 841,
	791, 827, 842, 0, 269, 793, 792, 272, 273, 274,
	766, 818, 275, 843, 844, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 828, 296, 845, 846, 751, 297, 0,
	298, 0, 299, 0, 0, 829, 301, 0, 302, 303,
	0, 0, 0, 756, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 778, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 849, 830, 831, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1079, 821, 824, 872,
	0, 822, 802, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 851, 806, 832, 833, 834, 835, 852,
	0, 807, 0, 338, 873, 874, 339, 340, 341, 875,
	836, 837, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 753, 752, 355, 356, 357, 358,
	360, 795, 359, 878, 362, 363, 365, 364, 748, 0,
	879, 779, 823, 366, 854, 367, 368, 0, 804, 805,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 857, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 757, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	796, 797, 798, 799, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 858, 800, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 838, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 794, 455, 0, 860, 861, 862, 839, 0,
	0, 457, 458, 863, 864, 777, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	801, 469, 470, 471, 254, 865, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 1074, 761, 783,
	771, 772, 769, 770, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 215, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 291, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 296, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 1073, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 355, 356, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 0, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 0, 1069, 761, 783, 771, 772, 769,
	770, 762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 765, 0, 0, 0, 263, 264, 265,
	215, 840, 803, 841, 791, 827, 842, 0, 269, 793,
	792, 272, 273, 274, 766, 818, 275, 843, 844, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 828, 296, 845,
	846, 751, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 756, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 873, 874,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 753, 752,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 748, 0, 879, 779, 823, 366, 854, 367,
	368, 0, 804, 805, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 757, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 0, 457, 458, 863, 864, 777,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 801, 469, 470, 471, 254, 865,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 783,
	771, 772, 769, 770, 762, 0, 758, 0, 0, 0,
	0, 0, 761, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 215, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 291, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 296, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 820, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 355, 356, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 0, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 783, 771, 772, 769, 770, 762, 0, 758,
	0, 0, 0, 0, 0, 761, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 765,
	0, 0, 0, 263, 264, 265, 215, 840, 803, 841,
	791, 827, 842, 0, 269, 793, 792, 272, 273, 274,
	766, 818, 275, 843, 844, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 3079, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 828, 296, 845, 846, 751, 297, 0,
	298, 0, 299, 0, 0, 829, 301, 0, 302, 303,
	0, 0, 0, 756, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 778, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 849, 830, 831, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 802, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 851, 806, 832, 833, 834, 835, 852,
	0, 807, 0, 338, 873, 874, 339, 340, 341, 875,
	836, 837, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 753, 752, 355, 356, 357, 358,
	360, 795, 359, 878, 362, 363, 365, 364, 748, 0,
	879, 779, 823, 366, 854, 367, 368, 0, 804, 805,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 857, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 757, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	796, 797, 798, 799, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 858, 800, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 838, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 794, 455, 0, 860, 861, 862, 839, 0,
	0, 457, 458, 863, 864, 777, 459, 460, 0, 3078,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	801, 469, 470, 471, 254, 865, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 783, 771, 772, 769, 770,
	762, 0, 758, 0, 0, 0, 0, 0, 761, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 819, 765, 0, 0, 0, 263, 264, 265, 3077,
	840, 803, 841, 791, 827, 842, 0, 269, 793, 792,
	272, 273, 274, 766, 818, 275, 843, 844, 221, 0,
	276, 825, 0, 808, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 285, 282, 0, 286, 0, 287, 288,
	0, 868, 289, 290, 3079, 811, 809, 810, 815, 813,
	812, 814, 292, 293, 500, 294, 828, 296, 845, 846,
	751, 297, 0, 298, 0, 299, 0, 0, 829, 301,
	0, 302, 303, 0, 0, 0, 756, 304, 305, 307,
	310, 306, 311, 312, 847, 848, 778, 869, 0, 0,
	0, 0, 0, 313, 314, 315, 849, 830, 831, 0,
	318, 0, 319, 0, 0, 870, 320, 0, 321, 850,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 820,
	821, 824, 872, 0, 822, 802, 0, 0, 0, 0,
	328, 330, 337, 0, 871, 331, 851, 806, 832, 833,
	834, 835, 852, 0, 807, 0, 338, 873, 874, 339,
	340, 341, 875, 836, 837, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 853, 876, 349, 350, 877, 0,
	351, 352, 0, 0, 353, 0, 354, 753, 752, 355,
	356, 357, 358, 360, 795, 359, 878, 362, 363, 365,
	364, 748, 0, 879, 779, 823, 366, 854, 367, 368,
	0, 804, 805, 0, 0, 371, 372, 0, 0, 373,
	241, 880, 374, 881, 855, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 856, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 857, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 882, 407, 408, 409, 410,
	757, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 796, 797, 798, 799, 423, 429, 430,
	816, 431, 412, 413, 432, 883, 433, 858, 800, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 838, 440,
	441, 442, 859, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 794, 455, 0, 860, 861,
	862, 839, 0, 0, 457, 458, 863, 864, 777, 459,
	460, 0, 3078, 462, 0, 0, 463, 464, 465, 467,
	817, 468, 0, 801, 469, 470, 471, 254, 865, 0,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 783, 771,
	772, 769, 770, 762, 0, 758, 0, 0, 0, 0,
	0, 761, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 819, 765, 0, 0, 0, 263,
	264, 265, 215, 840, 803, 841, 791, 827, 842, 0,
	269, 793, 792, 272, 273, 274, 766, 818, 275, 843,
	844, 221, 0, 276, 825, 0, 808, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 868, 289, 290, 291, 811, 809,
	810, 815, 813, 812, 814, 292, 293, 500, 294, 828,
	296, 845, 846, 0, 297, 0, 298, 0, 299, 0,
	0, 829, 301, 0, 302, 303, 0, 0, 0, 756,
	304, 305, 307, 310, 306, 311, 312, 847, 848, 778,
	869, 0, 0, 0, 0, 0, 313, 314, 315, 849,
	830, 831, 0, 318, 0, 319, 0, 0, 870, 320,
	0, 321, 850, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 820, 821, 824, 872, 0, 822, 802, 0,
	0, 0, 0, 328, 330, 337, 0, 871, 331, 851,
	806, 832, 833, 834, 835, 852, 0, 807, 0, 338,
	873, 874, 339, 340, 341, 875, 836, 837, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 853, 876, 349,
	350, 877, 0, 351, 352, 0, 0, 353, 0, 354,
	937, 936, 355, 356, 357, 358, 360, 795, 359, 878,
	362, 363, 365, 364, 0, 0, 879, 779, 823, 366,
	854, 367, 368, 0, 804, 805, 0, 0, 371, 372,
	0, 0, 373, 241, 880, 374, 881, 855, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 856, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 857,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 882, 407,
	408, 409, 410, 757, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 796, 797, 798, 799,
	423, 429, 430, 816, 431, 412, 413, 432, 883, 433,
	858, 800, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 838, 440, 441, 442, 859, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 794, 455,
	0, 860, 861, 862, 839, 0, 0, 457, 458, 863,
	864, 777, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 817, 468, 0, 801, 469, 470, 471,
	254, 865, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 783, 771, 772, 769,
	770, 762, 0, 0, 1919, 0, 0, 0, 0, 1917,
	1918, 0, 258, 259, 260, 261, 0, 262, 758, 0,
	0, 0, 819, 765, 761, 0, 0, 263, 264, 265,
	0, 840, 803, 841, 791, 827, 842, 0, 269, 793,
	792, 272, 273, 274, 766, 818, 275, 843, 844, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 3079, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 828, 296, 845,
	846, 751, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 756, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 0, 0, 822, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 0, 0,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 753, 752,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 748, 0, 0, 779, 823, 366, 854, 367,
	368, 0, 804, 805, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 757, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 816, 431, 412, 413, 432, 0, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 0, 457, 458, 863, 864, 777,
	459, 460, 0, 3078, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 801, 469, 470, 471, 254, 865,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	733, 0, 935, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 258, 259,
	260, 261, 761, 262, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 922, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 171, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 173, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 1155, 255, 0, 0, 472, 256,
	0, 0, 935, 165, 473, 474, 257, 475, 476, 477,
	0, 166, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	919, 0, 1465, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 922, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 171, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 173, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 1155, 255, 0, 0, 472, 256,
	2308, 0, 935, 165, 473, 474, 257, 475, 476, 477,
	0, 166, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	919, 0, 1465, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 922, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	918, 0, 935, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	919, 0, 924, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 922, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	0, 0, 935, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	919, 0, 924, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 922, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	0, 0, 935, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	919, 0, 924, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	0, 0, 935, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	0, 0, 2635, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1152, 0, 958, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 1369, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	962, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 872,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 171, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 173, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 1155, 255, 0, 0, 472, 256,
	0, 0, 935, 165, 473, 474, 257, 475, 476, 477,
	0, 166, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 0,
	0, 0, 138, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 818, 275, 219, 220, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 823, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 863, 864, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	733, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 171, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 173, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 1155, 255, 0, 0, 472, 256,
	0, 0, 0, 165, 473, 474, 257, 475, 476, 477,
	0, 166, 783, 771, 772, 769, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 138, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 840, 803, 841,
	791, 827, 842, 0, 269, 793, 792, 272, 273, 274,
	0, 0, 275, 843, 844, 221, 0, 276, 222, 0,
	962, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 828, 296, 845, 846, 0, 297, 0,
	298, 0, 299, 0, 0, 829, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 778, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 849, 830, 831, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 872,
	0, 237, 802, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 851, 806, 832, 833, 834, 835, 852,
	0, 807, 0, 338, 873, 874, 339, 340, 341, 875,
	836, 837, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 795, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 779, 239, 366, 854, 367, 368, 0, 804, 805,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 857, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	796, 797, 798, 799, 423, 429, 430, 0, 431, 412,
	413, 432, 883, 433, 858, 800, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 838, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 794, 455, 0, 860, 861, 862, 839, 0,
	0, 457, 458, 252, 253, 777, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	801, 469, 470, 471, 254, 865, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 2102, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 2544, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 1235, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 1470, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 1234, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 1233, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 1148, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1147, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 1144, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1143, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 1105, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1104, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 1102, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1101, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 951, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	953, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	958, 957, 472, 256, 0, 955, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 958, 957, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 962, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	868, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 869, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 870, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 872, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 871, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 873, 874, 339, 340,
	341, 875, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 876, 349, 350, 877, 0, 351,
	352, 0, 0, 353, 0, 354, 937, 936, 355, 356,
	357, 358, 360, 361, 359, 878, 362, 363, 365, 364,
	0, 0, 879, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	880, 374, 881, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 882, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 883, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 958, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 962, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 868, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	869, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 870, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 872, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 871, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	873, 874, 339, 340, 341, 875, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 876, 349,
	350, 877, 0, 351, 352, 0, 0, 353, 0, 354,
	937, 936, 355, 356, 357, 358, 360, 361, 359, 878,
	362, 363, 365, 364, 0, 0, 879, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 880, 374, 881, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 882, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 883, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 601, 0, 207, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 213, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 212,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 206, 0, 207, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 480, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 213, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 212,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 207, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 480, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 213, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 1712, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 212, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 207, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 480, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 213, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 212, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 480,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 480, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 1995, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 1992, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 2072, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 1998, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 2070, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 2069, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 1997, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 2071, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 1995, 276, 222, 0, 0, 1989, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 1992, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 1998, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1988, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 1997, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 1996, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 608, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 607, 585, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 588, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	589, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 590, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 584, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 585, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 588, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	589, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 590, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 588, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 589, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 590, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1123, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	946, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 948, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	943, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 945, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	939, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 941, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	520, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 519, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 518, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 1970, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 2466, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 2466, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 2463, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 927, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1732, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1730, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1728, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 1705, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1663, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1661, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	634, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 1206, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 635, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 631, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 630, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1556, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1555, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	634, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 1206, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 635, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 631, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 630, 250, 251, 456, 0,
	0, 457, 1207, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	634, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 624, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 635, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 631, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 1174, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 630, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1141, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1140, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1137, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1136, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1134, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1133, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1131, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1130, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1127, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1126, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 1115, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1113, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1112, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1107, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1098, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1097, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1093, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1089, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1091, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 966, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	968, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 963, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 634, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 624, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 623, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 635, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 625, 411, 0, 415, 416, 631, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 626,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 630,
	250, 251, 456, 0, 0, 457, 628, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 614, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 615, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 610, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 599, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 542, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 2366, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 2364, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 2353, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 615, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1569, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 0, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1560, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	901, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 0, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	0, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 0, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 1355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1309, 0, 0,
	1355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 1332,
	1333, 1334, 0, 1308, 0, 0, 0, 0, 1314, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1347, 0, 0, 0,
	1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 0, 1308, 0, 0, 2246,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 1306, 1307, 0,
	1339, 1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 1331, 1332, 1333, 1334, 0, 1308, 0,
	0, 2243, 0, 1314, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 1331, 1332, 1333, 1334, 0,
	0, 0, 1344, 0, 0, 1314, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1346, 1356,
	0, 0, 1336, 1337, 1338, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 1335,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1347, 0, 0, 0, 1309, 0, 1345, 1355, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	0, 1308, 0, 0, 2242, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1309, 0, 1345,
	1355, 0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332,
	1333, 1334, 0, 1308, 0, 0, 2241, 0, 1314, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1347, 0, 0, 0,
	1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 3043, 1308, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 1306, 1307, 0,
	1339, 1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 1331, 1332, 1333, 1334, 3039, 1308, 0,
	0, 0, 0, 1314, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 1331, 1332, 1333, 1334, 0,
	0, 0, 1344, 0, 0, 1314, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1346, 1356,
	0, 0, 1336, 1337, 1338, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 1335,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1347, 0, 0, 0, 1309, 0, 1345, 1355, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	2980, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1309, 0, 1345,
	1355, 0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332,
	1333, 1334, 2979, 1308, 0, 0, 0, 0, 1314, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1347, 0, 0, 0,
	1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 2929, 1308, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 1306, 1307, 0,
	1339, 1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 1331, 1332, 1333, 1334, 2890, 1308, 0,
	0, 0, 0, 1314, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 1331, 1332, 1333, 1334, 0,
	0, 0, 1344, 0, 0, 1314, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1346, 1356,
	0, 0, 1336, 1337, 1338, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 1335,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1347, 0, 0, 0, 1309, 0, 1345, 1355, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	2802, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1309, 0, 1345,
	1355, 0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332,
	1333, 1334, 2759, 1308, 0, 0, 0, 0, 1314, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1347, 0, 0, 0,
	1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 2758, 1308, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 1306, 1307, 0,
	1339, 1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 1331, 1332, 1333, 1334, 2757, 1308, 0,
	0, 0, 0, 1314, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 1331, 1332, 1333, 1334, 0,
	0, 0, 1344, 0, 0, 1314, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1346, 1356,
	0, 0, 1336, 1337, 1338, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 1335,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1347, 0, 0, 0, 1309, 0, 1345, 1355, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	2729, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1309, 0, 1345,
	1355, 0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332,
	1333, 1334, 2548, 1308, 0, 0, 0, 0, 1314, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1347, 0, 0, 0,
	1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 2521, 1308, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 1306, 1307, 0,
	1339, 1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 1331, 1332, 1333, 1334, 1842, 1308, 0,
	0, 0, 0, 1314, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 1331, 1332, 1333, 1334, 0,
	0, 0, 1344, 0, 0, 1314, 3120, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1346, 1356,
	0, 0, 1336, 1337, 1338, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 1335,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1347, 0, 0, 0, 1309, 0, 1345, 1355, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 2208, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 2183, 0, 1309, 0, 1345,
	1355, 0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332,
	1333, 1334, 0, 1308, 0, 0, 0, 0, 1314, 0,
	2291, 1328, 0, 2290, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 2184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	0, 0, 0, 0, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1945,
	0, 0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1347, 1944, 0, 0,
	1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 1306, 1307, 0,
	1339, 1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327,
	1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 1331, 1332, 1333, 1334, 0, 1308, 0,
	0, 0, 0, 1314, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 1331, 1332, 1333, 1334, 0,
	0, 0, 1344, 0, 0, 1314, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1346, 1356,
	0, 0, 1336, 1337, 1338, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 1335,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 730, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1347, 0, 0, 0, 1309, 0, 1345, 1355, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349,
	1350, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 1309, 1345,
	0, 1355, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332,
	1333, 1334, 0, 0, 1308, 0, 0, 0, 1314, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	0, 1331, 1332, 1333, 1334, 0, 0, 1344, 0, 0,
	0, 1314, 0, 0, 1329, 0, 2301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 0, 1346, 1356, 0, 0, 1336, 1337,
	1338, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1353, 0, 0, 0, 0, 0, 0, 1323, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 1335, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 1354, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 2525, 1335, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 2296, 0, 0,
	1309, 0, 0, 1355, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1347, 0, 0,
	0, 0, 1345, 0, 1328, 1320, 1321, 1327, 1326, 1322,
	1348, 1325, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1306, 1307, 0, 1339, 1340, 1341,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 1331, 1332, 1333, 1334, 0, 0, 1309,
	0, 0, 1355, 1314, 0, 1345, 0, 0, 1320, 1321,
	1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311,
	1312, 1313, 1315, 1316, 0, 1308, 1346, 1356, 0, 0,
	1336, 1337, 1338, 1328, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 1332, 1333, 1334, 0, 1354, 0, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1356, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	1352, 1353, 0, 0, 0, 0, 0, 0, 1323, 1324,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2259, 0, 0, 0,
	0, 0, 0, 0, 0, 1306, 1307, 0, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 1342, 0, 0, 0, 2240, 0, 0,
	1309, 0, 0, 1355, 0, 1330, 0, 1345, 0, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 1308, 0, 1347, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 1355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 1332, 1333, 1334, 0, 0, 0,
	1308, 0, 0, 1314, 0, 0, 1345, 0, 1328, 1320,
	1321, 1327, 1326, 1322, 1348, 1325, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 0, 1346, 1356, 0, 0,
	1336, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 1323,
	1324, 0, 0, 0, 0, 0, 0, 1331, 1332, 1333,
	1334, 0, 1344, 0, 0, 0, 0, 1314, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 1335,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 1355, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 0, 1347, 0, 0, 0, 1345, 0, 1328,
	1320, 1321, 1327, 1326, 1322, 1348, 1325, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 1332,
	1333, 1334, 0, 0, 1309, 0, 0, 1355, 1314, 0,
	0, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	1308, 1346, 1356, 0, 0, 1336, 1337, 1338, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 1332, 1333,
	1334, 0, 1354, 0, 0, 0, 0, 1314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 1335, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 1309, 0, 0, 1355, 0,
	0, 1330, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 1308, 0, 0, 1347, 0, 0, 0, 0, 1328,
	0, 1354, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1306, 1307, 0, 0, 0, 0, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 0, 0,
	1355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 1331, 1332,
	1333, 1334, 0, 1308, 0, 0, 0, 0, 1314, 0,
	1330, 1328, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 1346, 1356, 1347, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0, 0,
	1314, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1356, 0, 0, 1336, 1337, 1338,
	0, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1335, 0, 1329, 0, 0, 0,
	1623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1634, 1619, 1624, 1607, 1644,
	1643, 0, 0, 1609, 1608, 0, 0, 0, 0, 0,
	0, 1653, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 1645, 0, 1641, 1640, 0, 0, 0, 0, 0,
	0, 0, 0, 1639, 0, 0, 1347, 0, 0, 0,
	0, 0, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 1638, 1636, 1637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1618, 0, 0, 0, 0, 0, 0, 0, 0, 1623,
	0, 1627, 1622, 1628, 1629, 1630, 1631, 1632, 0, 1626,
	0, 0, 0, 0, 1345, 0, 0, 0, 1650, 1651,
	0, 0, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312,
	1313, 1315, 1316, 0, 1634, 1619, 1624, 1607, 1644, 1643,
	0, 0, 1609, 1608, 0, 0, 0, 0, 0, 1611,
	1653, 1652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1642, 0, 0, 0, 1620, 1621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1645, 0, 1641, 1640, 0, 0, 0, 0, 0, 0,
	0, 1635, 1639, 0, 0, 1763, 1761, 1762, 1765, 1764,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1638, 1636, 1637, 0, 0, 0, 0, 0, 1612, 1613,
	1614, 1615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1633, 1616, 0, 0, 0, 0, 0, 1618,
	0, 0, 0, 1655, 0, 0, 0, 0, 0, 0,
	1627, 1622, 1628, 1629, 1630, 1631, 1632, 0, 1626, 0,
	1610, 0, 0, 1646, 1647, 1648, 1649, 1650, 1651, 0,
	0, 0, 0, 0, 0, 661, 0, 692, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1617, 0,
	0, 0, 0, 1654, 0, 0, 0, 668, 1611, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
	0, 1642, 0, 0, 0, 1620, 1621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 667, 0, 0, 0, 0, 669, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 675, 676, 0,
	1635, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1612, 1613, 1614,
	1615, 691, 681, 0, 0, 0, 0, 0, 0, 0,
	0, 1633, 1616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1655, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 665, 0, 0, 1610,
	0, 0, 1646, 1647, 1648, 1649, 0, 0, 0, 0,
	0, 672, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1617, 0, 0,
	0, 0, 1654, 679, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 682, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 683,
	0, 0, 0, 698, 699, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 688,
}
var sqlPact = [...]int{

	6179, -1000, -24, -1000, -1000, -1000, 221, -1000, -1000, -1000,
	-1000, 219, 214, 211, -1000, 209, 208, 207, 202, 201,
	198, 196, 191, 190, 188, 178, 175, -1000, -1000, 170,
	-1000, -1000, -1000, -1000, 167, 164, 163, -1000, 162, 1536,
	31104, 157, 154, 153, 1918, 48966, 1483, 150, 145, -1000,
	139, 1563, 36138, 1119, 1800, -1000, 133, 132, 1408, 48582,
	618, 1956, 33804, 1323, 1955, 48192, 30714, 1912, 33414, 47802,
	-1000, -1000, 1024, -1000, -1000, 47412, 131, 130, 126, 125,
	122, -1000, 119, 47022, 116, 115, 107, 106, 105, 104,
	101, 97, -1000, 95, 91, 90, 82, 77, 76, 75,
	74, 71, 69, 66, 61, 58, 57, 54, 51, -1000,
	58753, 49, 48, 47, -1000, 1300, 45, 44, 43, 42,
	41, -1000, -1000, 40, 39, 30, 27, 24, 23, -1000,
	144, 20, 17, 16, 15, 13, -1000, 1063, 409, 2271,
	12906, 1203, 1202, 1197, 1193, 1186, 748, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51654, 48966, 12, -40, 11,
	-1000, 2341, 795, 22868, 6179, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35748, 35358, 34968,
	29172, 46632, 46242, 10426, 10426, 909, -1000, -1000, -1000, -1000,
	-1000, -26, 32256, 48966, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 263,
	-1000, -1000, -1000, -1000, -1000, -1000, 19242, 407, 18815, 342,
	18388, 218, 384, -1000, -1000, -1000, 258, -1000, -1000, -1000,
	-1000, 1244, -1000, -1000, -1000, -1000, 45852, 45462, 2008, 45072,
	28772, 28372, 44682, 1778, 1772, 44292, -1000, -1000, 43902, -1000,
	-1000, 2236, 1947, 1929, 34578, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43518, 43128, 42738, 42348, 41958, 27972,
	27572, 596, -1000, -1000, -1000, -1000, 24428, 595, -1000, -1000,
	-1000, -1000, -1000, 10, -1000, 8, 3, -1000, 2, -3,
	-4, -5, -8, -9, -10, -11, -1000, -12, -13, -1000,
	-14, -15, -1000, -17, -19, 1588, 1235, 1167, 41568, 1004,
	1590, -1000, 1479, -41, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 594, 48966, -1000, -1000, 19655, 96, -1000, 593, -1000,
	1906, -1000, 19655, 96, -1000, 1475, 220, 1381, -1000, -1000,
	-1000, 1302, 1041, -1000, -1000, 48966, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2581, 1389, 592, 41178, -1000, 1535, -1000,
	715, 13732, -1000, 901, -1000, 13732, 257, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1873, 1150, 2509, 27172, 1547, 2359, 2206,
	2580, 1634, 2159, 2134, 2104, 2096, 2088, 2579, 1086, 2577,
	981, 810, 2574, 2051, 2035, 2553, 1508, 833, 2573, 2571,
	1995, 1898, -1000, -1000, -1000, -1000, 1081, -1000, -1000, -1000,
	-1000, -1000, -1000, 37674, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1063, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1661, 2331, 2331, 2331,
	2401, 373, 365, -1000, 144, -1000, 1287, -1000, 1387, -1000,
	-1000, -1000, 57579, -1000, -1000, 19655, 19655, 19655, 19655, 19655,
	1246, -1000, -1000, -1000, 616, -1000, 591, 516, 11239, -1000,
	-1000, 2512, -1000, -1000, -1000, 370, 19655, -1000, 254, -1000,
	-1000, -1000, -1000, 586, 2558, -1000, 796, -1000, -1000, -1000,
	678, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1994, 585,
	581, -1000, 579, 578, 577, -1000, -1000, -1000, 576, 575,
	573, 572, 571, 568, 567, 560, -1000, -1000, -1000, 1155,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 750, -1000, 750, 750, 519, 519, 559, 556, 520,
	555, -1000, -1000, 553, 519, 552, 551, -1000, -1000, 544,
	663, -1000, 660, 543, 542, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1583, -1000, -1000, 1583, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 903, 50502, -1000, -1000, -1000,
	-29, 48966, -1000, 384, -29, -1000, -1000, 541, -1000, 14145,
	14145, 14145, -1000, -1000, 1470, 19655, -1000, 2404, -1000, 4280,
	-203, 650, 24038, -1000, 22088, 650, 624, 26772, -1000, 1897,
	-1000, -1000, 540, 247, -1000, -1000, -1000, -1000, -1000, -1000,
	2495, 2216, 962, -1000, 1127, 2214, -1000, 3140, 2211, 1117,
	-1000, -1000, 738, 2207, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1312, -1000, -1000, 2257, 2204, -178,
	2129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1500, -1000,
	29556, 32256, -30, -1000, -1000, -46, -1000, 10028, 57579, -1000,
	-1000, -1000, 57579, 684, -1000, -1000, 2200, -1000, 57579, 652,
	-1000, -1000, 2197, -1000, 1895, 48966, 10426, 48966, 48966, -1000,
	538, 1595, 1455, -1000, -1000, 31872, 3140, 1593, -1000, -1000,
	725, 1591, -1000, -1000, 1575, -1000, 384, -1000, -1000, 40788,
	51270, 725, 1571, -1000, -1000, -1000, 37674, -1000, 48966, -1000,
	48966, -1000, 1034, -1000, 50886, 158, 2196, -1000, -1000, 158,
	2195, -1000, 158, 2190, -1000, 141, 2188, -1000, -1000, 1399,
	2176, -1000, -56, 2168, -1000, -1000, -56, 2167, -1000, -1000,
	19655, -43, -1000, -1000, -1000, 795, 30324, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40398, 29556, -1000, -1000, -1000, -1000,
	31872, 48966, 34188, 29556, 599, 57579, -1000, 2446, 58555, 29556,
	57579, -1000, 31872, 48966, 1948, -1000, 40008, 39618, 2322, 714,
	-1000, -1000, 48966, -1000, 19655, -1000, 2443, 1506, -37, -1000,
	-1000, -1000, -1000, -1000, 1657, 1651, 830, 1440, -1000, 13732,
	13732, 2274, -1000, 244, 10426, -1000, -1000, 973, 1718, -1000,
	-1000, -1000, -1000, 29556, 29556, -1000, 39228, -1000, -1000, -1000,
	1341, 48966, -1000, -1000, 1946, -1000, 31488, 48966, -1000, 48966,
	-1000, 48966, -1000, 48966, -1000, 48966, -1000, -1000, -1000, -1000,
	-1000, 2110, 1200, 1942, -1000, 48966, -1000, 48966, -1000, -1000,
	-1000, 1656, -1000, -1000, -1000, 38844, 38454, 38064, -1000, -1000,
	1144, -1000, 972, -1000, -1000, 159, -1000, -1000, 1661, -1000,
	1476, 1722, 17961, 1679, 19655, 144, -1000, -1000, 144, 144,
	12479, -1000, -1000, -1000, 48966, -1000, 58386, 58555, 10426, 942,
	19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655,
	19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655,
	19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655, 19655,
	19655, 19655, 19655, 19655, 19655, 1589, 19655, 902, 19655, 19655,
	19655, 19655, 1303, -1000, -1000, 1289, 432, 1308, -1000, 2519,
	2519, 2519, 57939, 57939, 492, 616, -1000, 19655, -1000, 96,
	19655, 365, 55422, 1497, -28, 10826, -1000, -1000, -1000, -1000,
	17534, 745, 57579, 9630, 6669, -1000, 2547, 1013, 1954, 1820,
	537, 677, 673, 672, 645, 583, 19655, 19655, 19655, 19655,
	19655, 19655, 19655, 19655, -1000, -1000, -1000, -1000, -1000, -1000,
	2512, -1000, 17121, 16694, -1000, 2546, 16267, 15840, -1000, 15413,
	20894, 14986, 940, 939, 922, 917, 19655, 11652, -1000, -37,
	-1000, 50502, -1000, 48966, -29, 2439, 19655, 204, -1000, 56445,
	-1000, 204, 204, 535, -44, 57579, 1732, 1725, 23258, 1662,
	1278, 1278, 1278, -1000, 533, 606, 650, 7223, 36522, 1310,
	650, 650, 160, 268, 364, 21698, 2404, 36522, -1000, -1000,
	48966, 531, 6669, 10426, -34, 1198, -1000, 33024, 2304, 2298,
	2295, 1016, -1000, 991, 2396, 37674, 2415, 96, 2318, 1892,
	-1000, -1000, 898, 37674, 3140, -1000, 58555, -1000, 1812, 2395,
	1057, 1038, 1057, 1057, 1036, 37674, 897, 1183, 29556, 2312,
	896, -35, 2413, 96, 2310, 1891, 890, -1000, -1000, 48966,
	10426, 2308, 971, 648, -30, 32256, 48966, 243, -1000, 19655,
	96, 19655, 96, 987, -45, 240, 1742, 1741, 160, -1000,
	32640, 2434, 2166, 48966, 1748, -1000, 3140, 2157, -1000, 1175,
	-1000, 2155, 2153, 2432, 1451, 1570, -1000, -1000, -1000, 1422,
	1565, 953, 2149, 742, 393, 2428, 393, 25992, -1000, 48966,
	-1000, 48966, -1000, -1000, 48966, -1000, 48966, -1000, 48966, -1000,
	48966, 48966, -1000, 48966, 29556, 29556, 29556, -54, 5000, 30324,
	-55, 723, 885, -69, -1000, 355, 1617, 769, 32640, 3826,
	-57, -1000, 1001, -1000, -1000, -1000, 336, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 750, 521, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 520, 1155,
	519, 519, 519, -1000, -1000, -1000, 663, -1000, 660, -1000,
	-1000, -1000, 750, 750, -1000, -1000, -189, 1880, -46, 34188,
	648, -1000, 648, -1000, 1934, -1000, 2305, 697, -60, 808,
	-37, -1000, 1583, -1000, 1398, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2556, -1000,
	2527, -1000, -1000, 2540, -31, -1000, -31, -1000, 10426, -1000,
	48966, 1932, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48966, -1000, 48966, -1000, -1000, -1000, -1000, -1000, -1000, 3885,
	-1000, 1911, -1000, 5000, 235, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 48966, 48966, 48966, -1000, 37674, -1000, -1000,
	-1000, -1000, 57579, -1000, 457, -1000, -1000, 57579, 1138, 1744,
	-1000, 1744, -32, -1000, 56152, 1713, 48966, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 713,
	921, 921, 976, 976, 976, 976, 2433, 1350, 3238, 868,
	58172, 58172, 58172, 58172, 58172, 58172, 58172, 58172, 746, 367,
	367, 746, 746, 746, 746, 746, 367, 367, 367, 58172,
	58172, 58172, 57939, 57840, 534, 19655, 19655, 883, 1286, 432,
	534, 19655, 534, 534, 534, 534, -1000, 1507, -1000, -1000,
	-1000, -1000, 1878, 518, 20894, 20894, -1000, -1000, -1000, 11239,
	19655, -1000, -1000, -1000, -1000, 516, 19655, -1000, 55715, -247,
	353, -159, 234, 48966, 19655, 605, -139, -1000, 1033, -1000,
	19655, 232, -1000, -1000, 7, 19655, 19655, 19655, 351, -1000,
	350, -1000, 880, -1000, 875, 869, 867, -1000, 515, 1263,
	513, 512, 19655, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57505, 52867, 52795, 52502, 5152, 52430, 6208,
	-63, -70, 349, -1000, 1876, -159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 347, -1000, 346, -71, -1000, -72, -1000,
	345, -1000, 57244, -159, 343, 4362, -1000, 20894, 20894, 20894,
	-1000, 339, -1000, 56080, -1000, 712, 699, 689, 680, 57145,
	14559, 14559, 14559, 338, 56883, 19655, -159, -1000, -1000, 511,
	-77, 742, 14145, 22478, 10426, -1000, 742, 742, 19655, -1000,
	19655, 23258, 23258, 1608, 1721, 23258, -1000, -1000, -1000, -1000,
	36522, 564, 650, 36522, -1000, 2512, 1706, -1000, -1000, -1000,
	48966, 384, -1000, 36522, 36522, 10426, 650, -1000, 337, 24818,
	7, 230, 1809, 48966, 48966, 48966, -1000, -1000, 1561, 50118,
	1555, 58555, 48966, -1000, -1000, 510, 506, 1711, 1708, 48966,
	48966, 49734, 49350, 48966, 1280, 19655, 1434, 2337, 96, -1000,
	676, 502, 48966, 1103, -1000, -1000, -1000, -1000, -1000, 48966,
	-1000, -1000, 2539, -1000, 1057, -1000, -1000, -1000, 1057, 3140,
	1097, 48966, 29556, 729, 674, 48966, 1189, 96, -1000, 668,
	500, 10426, 1178, -1000, 666, 48966, 1803, -1000, 1491, -1000,
	-1000, 9232, 57579, -1000, 57579, -1000, -1000, -1000, 10426, 1740,
	1740, 334, -33, -1000, -1000, -1000, -1000, -1000, -1000, 1771,
	48966, 590, 48966, 96, 48966, 149, 29556, 48966, 29556, 29556,
	29556, 96, 48966, 2148, 48966, 2142, 2163, 639, 48966, 1304,
	19655, 1201, -1000, 25208, 758, 48966, 1077, 138, -1000, -1000,
	-1000, 0, 48966, -1000, -1000, 158, 158, 158, -1000, 141,
	1399, -1000, -56, -56, -1000, -1000, -1000, 5000, 1871, 37290,
	48966, 2451, -1000, 499, 29556, -80, -1000, 772, 860, 859,
	-1000, 58555, -1000, 609, 926, -1000, 2531, 498, 2512, -1000,
	723, 48966, 121, -1000, 728, 1522, -1000, 13732, 13732, -1000,
	1583, -1000, -1000, 1113, -1000, 1143, -1000, -1000, -1000, -1000,
	13732, -1000, -1000, 961, -46, -46, -1000, -1000, 206, -1000,
	48966, -1000, -1000, -1000, -1000, 1138, -1000, 19655, -1000, -1000,
	-1000, 12479, -1000, -1000, -1000, 48966, -194, 19655, 534, 534,
	19655, 20894, 20894, -1000, 534, -1000, -1000, -1000, -1000, -1000,
	1869, 496, 19655, 58555, 5993, 5709, -83, 746, -1000, 19655,
	-1000, 8834, -88, 55350, -1000, -1000, 536, 2137, -1000, 19655,
	56810, 8436, 326, 13319, -1000, 56517, -50, -50, -1000, 2554,
	1609, 1401, 1148, 1047, 2524, -1000, 26382, 743, 1304, 55057,
	58386, 58555, 19655, 19655, -1000, 19655, 19655, 19655, -1000, -1000,
	2512, -1000, 19655, -1000, -1000, -1000, -1000, -1000, 1865, 19655,
	-1000, 58386, 58555, 20894, 20894, 20894, 20894, 20894, 20894, 20894,
	20894, 20894, 20894, 20894, 20894, 20894, 20894, 20894, 20894, 20894,
	20894, 20894, 1642, 20894, 2516, 2516, 2516, -1000, 1840, 1865,
	19655, 19655, -1000, -1000, -1000, -1000, 58555, 325, 319, 318,
	-1000, 19655, -159, 3826, -1000, 1819, -1000, -86, -1000, 2404,
	-1000, -1000, 1819, 1819, -89, 57579, -1000, 1608, -1000, 493,
	19655, 23258, -1000, 604, -1000, -90, -1000, 36522, -1000, 602,
	-242, -1000, 644, -1000, 384, -1000, -1000, -1000, 229, 36522,
	-1000, -91, -1000, 2427, 316, 10426, -1000, -1000, 863, 862,
	-1000, 2141, -1000, 1546, -1000, 762, -1000, 1129, 19655, 23648,
	486, 484, 1293, -1000, 2139, 1399, 2136, 1399, -1000, -1000,
	686, -1000, 57579, 480, 477, -1000, -34, 1152, -1000, 25608,
	19655, -1000, 857, -1000, -1000, -1000, 3140, 849, -1000, -1000,
	1169, 25608, -1000, -1000, -1000, 25608, 19655, -1000, -35, 848,
	25608, 2082, 723, 1851, 975, -1000, -1000, -1000, -1000, -1000,
	-1000, 1764, 32640, 48966, 474, 48966, 463, -1000, -1000, 462,
	48966, 723, 3140, -1000, 725, -1000, -1000, 768, 10426, 461,
	10426, 1647, 639, 29940, -1000, 725, 1722, -1000, 57579, -1000,
	1077, 12065, 2297, -96, -1000, 227, -1000, -1000, -1000, 742,
	25992, 23258, 19655, 2570, -104, -1000, -1000, -1000, -1000, -1000,
	-1000, 96, -36, 459, -1000, 643, 642, -46, 1327, 29556,
	1590, 1590, -1000, 2514, -1000, 601, 315, 2512, 308, -1000,
	-46, 48966, -1000, 1315, 10426, 48966, 48966, 10426, 48966, -1000,
	-1000, -37, -1000, -1000, -1000, -1000, 48966, -1000, -1000, -1000,
	1392, 54985, -1000, 2314, 10426, 2442, 534, 5674, 5178, 19655,
	58555, 58100, -110, 19655, 19655, -1000, 584, 57579, -1000, -1000,
	-1000, -1000, -1000, -1000, 57579, 19655, 224, -1000, 2552, 19655,
	307, 306, 302, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 300, -1000, -1000, 52038, -1000, 19655, 298, -1000, 295,
	294, 5753, 445, 54692, 54620, 54327, 290, 57579, 1840, 57579,
	-1000, -1000, 675, 675, 1029, 1029, 1029, 1029, 2516, 423,
	711, 476, 410, 410, 410, 1473, 554, 554, 410, 410,
	410, 1848, 1658, 458, 6182, -1000, -1000, 57579, 57579, 289,
	-1000, -1000, -1000, -159, 288, 1814, 2391, -1000, 23258, 1814,
	1814, -1000, -1000, 48966, 57579, -1000, -203, -1000, 2512, -1000,
	-1000, 1706, -1000, 7635, -1000, 10426, -1000, -1000, 24818, -1000,
	456, -1000, 1, 48966, 48966, 48966, 2133, -1000, 3208, -1000,
	54255, -112, -1000, 2334, 2334, 19655, 160, 23648, 48966, -1000,
	1403, 1762, 802, 48966, -1000, 48966, -1000, -1000, 48966, 48966,
	48966, 48966, 48966, -1000, 452, -113, 48966, 48966, 29556, -1000,
	-1000, -118, 10426, -1000, 2301, -1000, 29556, 916, 1189, 1788,
	-1000, 451, 23648, 447, 48966, 32640, 2426, -1000, -1000, -1000,
	-1000, 444, 1827, 1419, 23648, 1417, 1684, 639, 29940, -1000,
	953, 1077, -1000, -1000, -38, -1000, 475, 96, 48966, 2566,
	1304, -1000, -39, 57579, -1000, 641, -1000, 36906, 36906, 29556,
	29556, -1000, 284, 2259, 2253, 446, -1000, -1000, 283, -1000,
	-46, 1659, -1000, -1000, 1230, 1490, -1000, -1000, -1000, -1000,
	-1000, 2314, 19655, 19655, 58100, -119, -1000, 534, 534, -1000,
	57579, 8038, -1000, 56517, -1000, -1000, -1000, -1000, 1233, -1000,
	53962, -1000, -1000, -1000, 19655, 19655, -1000, -1000, -1000, -1000,
	-1000, -1000, 20894, 1845, 443, 58555, -1000, -1000, 740, 19655,
	19655, 2404, 740, 740, -120, 650, -1000, -1000, -1000, 2512,
	1, -1000, 2564, 10426, -1000, -1000, -1000, 48966, -1000, 48966,
	-1000, 10426, 48966, 1837, 1527, -1000, -1000, 1703, 442, 20894,
	48966, 708, -1000, 1294, 23648, 2314, 10426, 2314, 53890, -121,
	-126, 1521, -1000, -1000, 1510, 19655, -1000, 58555, 1399, 1399,
	-127, -136, -1000, 847, 845, 19655, 839, -1000, -1000, -1000,
	824, -1000, 654, -56, 25608, -1000, -1000, 1242, 23648, -138,
	23648, -143, 281, 96, 23648, -1000, 48966, -149, 48966, -1000,
	639, 29940, -1000, 2163, -1000, 2235, 48966, 2280, -1000, -1000,
	-1000, 1722, 432, -1000, -150, -1000, -1000, -1000, 422, 421,
	-1000, -1000, -101, -1000, 683, 679, -1000, -1000, -1000, 10426,
	958, -1000, 534, 534, -1000, -1000, -1000, 273, 1304, 2384,
	-1000, 53597, 53525, 6013, 20894, 58555, -156, -1000, 48966, 57579,
	-159, -1000, -1000, -1000, 36522, 411, -1000, -1000, 1951, -1000,
	-1000, -1000, 48966, 1532, -1000, -1000, 19655, 6182, 420, 19655,
	-1000, 1764, 408, -1000, -1000, -1000, -1000, -1000, -1000, 2334,
	-1000, 1120, -1000, -1000, 57579, 2333, -1000, -1000, 397, 396,
	48966, 48966, -50, 395, 392, 25608, -1000, 48966, -158, 1294,
	-163, -1000, 1764, -1000, -164, 768, -1000, 391, 29940, -1000,
	1647, 937, -166, 48966, 1077, -1000, -1000, 29556, 29556, 1659,
	-1000, 48966, -1000, 48966, -1000, 48966, -1000, 1109, 19655, -1000,
	-1000, 6013, -172, -1000, -132, -1000, 2422, -1000, -1000, -1000,
	-1000, 2106, 53232, 1623, 48966, 53160, 1189, 48966, 2314, 48966,
	766, 10426, 1230, 1230, -1000, -1000, 271, 19655, 19655, -1000,
	390, -1000, 1764, 1294, 1189, 1294, 387, 23648, -1000, 1684,
	1014, -1000, 742, -1000, -1000, -174, -179, -1000, -180, -181,
	-1000, 270, 20481, 20481, -159, -1000, 48966, 385, 1969, -1000,
	1406, 1248, 269, 800, -1000, -182, -1000, 384, -1000, 19655,
	-1000, -188, -1000, 755, -190, -1000, 752, 2552, -199, -200,
	48966, 1189, 1764, -1000, 1764, 23648, -201, -1000, 25992, -1000,
	723, 723, -1000, -1000, -1000, -1000, -1000, 21292, 1430, 1068,
	55787, -1000, -1000, -1000, 48966, -1000, 1416, 1407, 1054, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1623, 57579, -1000, 1230,
	1785, -1000, 1230, 1835, -1000, -1000, -206, -1000, 1189, 1189,
	-207, -1000, -197, -1000, -1000, 2465, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2242, -1000, 794, 1551, 1551, 1406, -1000,
	382, -1000, 379, 1356, -1000, -1000, 1294, -1000, 20068, -1000,
	2478, -1000, -1000, 1673, -1000, -1000, 19655, 19655, -1000, -1000,
	-1000, 1764, -1000, -1000, -1000, -1000, -208, -213, 1189, 1189,
	813, -1000, -1000, 376, 19655, -234, 1189, -1000,
}
var sqlPgo = [...]int{

	0, 3060, 3059, 1941, 3056, 2323, 3049, 3047, 3046, 3043,
	3042, 2308, 3041, 3040, 3038, 3036, 3035, 3034, 3033, 3031,
	3030, 3021, 3017, 3016, 3015, 3014, 3012, 3009, 3007, 3006,
	3005, 3004, 2306, 2997, 2298, 2984, 2982, 2980, 2979, 2978,
	2975, 2971, 2970, 23, 2967, 2966, 2965, 2963, 2288, 2962,
	2961, 2286, 2957, 2956, 2258, 2954, 2951, 2950, 2252, 2240,
	2949, 2946, 2227, 2944, 2943, 2225, 2940, 2216, 2939, 2935,
	2213, 2932, 107, 116, 2931, 2210, 2927, 2924, 2206, 2202,
	2200, 2922, 2196, 2918, 2915, 2109, 2092, 2914, 108, 2912,
	2911, 2910, 2909, 2016, 2010, 2907, 2903, 2900, 178, 2898,
	1998, 2895, 2891, 2889, 2885, 2881, 2877, 2874, 2871, 2867,
	2865, 2859, 2855, 2848, 2844, 2843, 2840, 2839, 2835, 2830,
	2829, 2827, 2826, 2822, 2816, 2811, 2808, 184, 119, 2803,
	2802, 1981, 1943, 2800, 2796, 42, 45, 17, 80, 144,
	129, 170, 4379, 165, 2794, 2789, 2787, 2786, 2783, 28,
	122, 125, 120, 126, 56, 2782, 2781, 52, 48, 30,
	19, 90, 2779, 2777, 2775, 1616, 92, 2772, 2771, 174,
	159, 2770, 1101, 2769, 25, 83, 73, 106, 477, 58,
	2768, 99, 20, 2766, 128, 61, 2764, 79, 40, 26,
	3543, 98, 71, 72, 233, 193, 154, 151, 123, 445,
	2761, 179, 85, 148, 2759, 2758, 2755, 64, 140, 7,
	4, 131, 9, 2753, 11, 2749, 12, 2747, 2746, 2744,
	2739, 15, 115, 37, 47, 2732, 147, 211, 138, 2731,
	158, 2729, 81, 2725, 181, 145, 2, 161, 2722, 82,
	22, 86, 2720, 2719, 96, 168, 2718, 31, 130, 87,
	93, 185, 157, 94, 153, 160, 2717, 2715, 2713, 137,
	2706, 139, 105, 2701, 2700, 113, 43, 2696, 39, 169,
	44, 2695, 2692, 114, 2691, 149, 2690, 2685, 2684, 183,
	118, 134, 8, 54, 88, 6, 156, 111, 74, 59,
	2683, 2496, 2617, 2565, 27, 2682, 97, 77, 33, 68,
	110, 172, 29, 2679, 2677, 1400, 2673, 2672, 2670, 121,
	2666, 2664, 2662, 100, 32, 62, 2661, 112, 49, 104,
	182, 75, 155, 132, 177, 124, 2656, 135, 95, 142,
	176, 55, 2655, 1026, 2654, 143, 2648, 2647, 2645, 2643,
	51, 2642, 2641, 2640, 38, 2638, 101, 2635, 136, 133,
	150, 65, 117, 173, 162, 146, 2633, 141, 35, 2632,
	2831, 21, 0, 3023, 3571, 2630, 152, 91, 2627, 2623,
	2621, 2620, 36, 10, 5, 3, 13, 16, 556, 452,
	2619, 2618, 78, 89, 102, 2613, 189, 164, 2612, 2611,
	2607, 50, 2606, 18, 2605, 14, 2602, 2601, 24, 1,
	2600, 2599, 171, 2598, 2597, 2596, 2386, 2593, 180, 2592,
	2591, 2589, 2586, 2100, 2585, 2584, 57, 34, 127,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 408, 408, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	407, 407, 153, 153, 152, 148, 148, 410, 410, 154,
	154, 154, 156, 156, 32, 32, 86, 86, 86, 139,
	138, 138, 138, 138, 79, 79, 79, 79, 79, 74,
	74, 360, 360, 361, 361, 134, 134, 135, 135, 135,
	135, 136, 136, 137, 137, 137, 46, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	44, 44, 128, 128, 47, 47, 47, 47, 47, 47,
	47, 47, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 58, 58, 56, 59,
	59, 60, 60, 60, 60, 60, 60, 61, 61, 61,
	61, 61, 61, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 68, 68, 68, 69, 69, 69, 66,
	66, 66, 64, 64, 64, 63, 63, 63, 67, 67,
	67, 65, 65, 65, 235, 235, 70, 70, 70, 70,
	70, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 73, 73, 73,
	73, 73, 73, 73, 73, 330, 330, 71, 71, 303,
	303, 75, 75, 260, 260, 76, 76, 76, 76, 76,
	77, 77, 77, 77, 87, 87, 87, 87, 406, 406,
	228, 228, 169, 169, 169, 169, 82, 82, 82, 82,
	83, 83, 83, 84, 84, 133, 133, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 38, 38, 38,
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 43, 94, 94, 94, 96, 93, 93, 93,
	95, 95, 95, 95, 97, 97, 98, 98, 98, 98,
	98, 98, 99, 99, 354, 354, 238, 238, 352, 352,
	353, 353, 205, 205, 205, 205, 205, 206, 206, 206,
	359, 359, 359, 359, 359, 359, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 118, 118, 118,
	127, 127, 127, 127, 127, 127, 127, 120, 120, 120,
	111, 111, 101, 101, 101, 101, 107, 107, 107, 107,
	107, 102, 102, 108, 108, 110, 110, 112, 112, 112,
	112, 112, 112, 103, 103, 103, 103, 114, 114, 114,
	114, 113, 113, 123, 123, 123, 123, 123, 123, 123,
	316, 316, 119, 119, 119, 119, 122, 122, 122, 122,
	117, 117, 117, 121, 121, 124, 124, 124, 124, 104,
	104, 105, 105, 106, 106, 125, 125, 116, 116, 126,
	126, 126, 126, 126, 126, 126, 115, 115, 115, 409,
	409, 109, 404, 404, 402, 402, 402, 402, 402, 402,
	402, 403, 403, 405, 405, 80, 80, 80, 52, 52,
	53, 53, 207, 207, 208, 208, 284, 284, 284, 284,
	209, 209, 155, 155, 155, 212, 213, 213, 210, 210,
	211, 211, 211, 215, 215, 214, 217, 217, 216, 283,
	370, 370, 371, 371, 371, 371, 371, 371, 371, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 368,
	368, 368, 369, 366, 366, 367, 367, 367, 367, 411,
	411, 282, 282, 221, 221, 373, 373, 373, 373, 374,
	374, 374, 374, 374, 377, 376, 375, 375, 375, 375,
	375, 312, 312, 312, 57, 57, 57, 249, 249, 248,
	248, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 130, 130, 54, 54, 54, 161,
	161, 51, 51, 51, 55, 55, 50, 50, 50, 50,
	50, 266, 266, 264, 264, 226, 226, 318, 318, 318,
	173, 173, 174, 174, 149, 149, 149, 20, 22, 22,
	16, 16, 16, 16, 16, 16, 29, 29, 30, 30,
	26, 26, 265, 265, 267, 267, 81, 81, 85, 85,
	85, 91, 91, 129, 129, 129, 129, 129, 129, 129,
	33, 33, 33, 33, 45, 45, 45, 45, 89, 414,
	414, 414, 90, 90, 413, 413, 168, 168, 168, 168,
	170, 170, 279, 279, 280, 280, 415, 415, 281, 281,
	281, 163, 162, 164, 164, 49, 49, 49, 157, 157,
	158, 158, 159, 159, 160, 160, 416, 416, 78, 78,
	78, 132, 132, 201, 201, 275, 275, 275, 222, 222,
	179, 179, 278, 278, 276, 276, 276, 247, 247, 247,
	131, 131, 231, 231, 240, 240, 241, 241, 326, 326,
	242, 88, 88, 142, 142, 140, 140, 140, 140, 140,
	140, 141, 141, 141, 143, 143, 143, 143, 143, 143,
	143, 146, 146, 146, 146, 147, 147, 147, 145, 145,
	384, 384, 384, 386, 386, 387, 383, 383, 385, 385,
	412, 412, 251, 251, 251, 219, 220, 218, 218, 417,
	417, 224, 224, 223, 225, 225, 317, 317, 317, 245,
	245, 245, 245, 270, 270, 268, 268, 269, 269, 271,
	271, 272, 272, 272, 273, 273, 274, 274, 244, 244,
	299, 299, 144, 144, 144, 230, 230, 230, 232, 232,
	289, 289, 289, 290, 290, 288, 288, 288, 288, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 320, 320,
	233, 233, 321, 277, 277, 400, 400, 400, 401, 401,
	315, 315, 322, 322, 322, 322, 322, 322, 313, 313,
	314, 314, 327, 328, 328, 254, 254, 254, 254, 252,
	252, 253, 253, 323, 323, 323, 323, 246, 246, 324,
	324, 324, 285, 285, 331, 331, 331, 346, 346, 229,
	229, 229, 341, 341, 332, 332, 332, 332, 332, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 335, 335, 335, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 345, 345, 345, 345, 345, 336, 336, 342,
	343, 337, 338, 344, 344, 344, 344, 348, 348, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 340, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 262, 262, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 293, 293, 293, 293, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 378, 378, 378, 378, 378, 378, 378, 378,
	381, 381, 382, 382, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 388, 388, 389, 389, 391, 391, 392,
	392, 393, 394, 394, 394, 395, 396, 396, 390, 390,
	397, 397, 397, 398, 398, 399, 399, 399, 399, 399,
	305, 305, 311, 311, 311, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 171, 171, 171, 171, 171, 237, 237, 236, 236,
	302, 302, 300, 300, 304, 304, 255, 255, 347, 347,
	347, 347, 347, 347, 347, 256, 256, 256, 263, 257,
	257, 258, 258, 258, 258, 258, 296, 297, 259, 259,
	259, 298, 298, 306, 310, 310, 309, 308, 308, 307,
	307, 286, 286, 287, 287, 243, 243, 418, 418, 239,
	239, 325, 325, 325, 325, 203, 203, 234, 234, 202,
	202, 196, 196, 197, 197, 197, 197, 227, 227, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	349, 349, 349, 350, 351, 301, 189, 188, 176, 177,
	187, 186, 185, 175, 178, 182, 183, 184, 180, 181,
	192, 191, 190, 329, 198, 198, 199, 199, 199, 200,
	200, 200, 200, 172, 172, 193, 193, 194, 195, 195,
	165, 165, 165, 166, 166, 167, 167, 358, 358, 356,
	356, 356, 357, 357, 357, 357, 355, 355, 355, 355,
	355, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	1, 1, 1, 1, 5, 8, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 7, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 2, 2, 5, 6,
	3, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 5, 2, 3,
	0, 3, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 3, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 2, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 8, 11,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 4, 7, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 7, 3, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 4, 2, 4, 7, 3, 3,
	0, 3, 6, 3, 6, 3, 13, 16, 9, 12,
	4, 2, 0, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 3, 4, 1, 5, 3, 4, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	2, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 2, 2,
	1, 5, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 77, 65, -54, -51, -48,
	-58, 79, 100, -385, 104, -62, -65, -67, 108, 116,
	121, 122, 146, 155, 259, 267, 289, 291, 293, 302,
	-40, -39, 117, -140, -142, 287, -83, -84, -93, -94,
	-95, -96, -133, 320, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	323, -33, -45, -90, -89, 368, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-384, -63, -64, -66, -68, -69, -143, -141, 424, 288,
	378, 37, 332, 66, 112, 297, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 395, 403, -146, -144, -145,
	-147, 309, 386, 345, 428, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 2, 345, 389, 310,
	379, 93, 168, 272, 257, -402, 2, 4, -364, -362,
	-197, -196, 345, 93, 30, 38, 39, 41, 44, 55,
	56, 57, 60, 97, 98, 115, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 203, 234,
	236, 249, 253, 264, 266, 275, 299, 326, 341, 357,
	358, 359, 365, 366, 386, 387, 391, 398, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 54, 59, 64, 65, 66,
	67, 68, 73, 70, 71, 72, 75, 77, 78, 81,
	82, 83, 91, 92, 94, 95, 96, 100, 102, 104,
	107, 108, 110, 111, 116, 117, 120, 118, 351, 353,
	119, 121, 122, 132, 133, 134, 136, 137, 139, 141,
	145, 147, 152, 153, 154, 155, 156, 157, 169, 164,
	170, 174, 177, 176, 178, 179, 180, 171, 185, 188,
	189, 190, 192, 193, 196, 197, 198, 201, 200, 205,
	206, 209, 210, 213, 215, 218, 219, 220, 221, 224,
	222, 223, 226, 227, 229, 228, 235, 237, 238, 240,
	241, 244, 245, 248, 251, 254, 255, 256, 257, 258,
	259, 260, 261, 263, 265, 267, 269, 270, 271, 272,
	273, 274, 276, 277, 279, 280, 281, 282, 283, 287,
	285, 286, 288, 289, 290, 291, 293, 295, 296, 297,
	298, 300, 321, 322, 334, 302, 303, 304, 305, 306,
	307, 308, 312, 316, 313, 314, 315, 310, 311, 317,
	318, 320, 323, 325, 327, 328, 331, 332, 333, 335,
	338, 339, 340, 336, 337, 330, 343, 344, 346, 347,
	348, 349, 350, 352, 354, 355, 360, 363, 364, 368,
	369, 371, 372, 375, 376, 377, 382, 378, 380, 383,
	384, 385, 390, 396, 397, 399, 400, 401, -195, -165,
	417, -194, 427, 427, 427, 2, 189, 190, 271, 270,
	317, 318, -190, -193, -194, -195, -165, 4, -362, -364,
	93, 242, 427, 427, 427, 2, 345, 333, 54, 310,
	379, 295, 389, -264, 185, 93, 374, -165, 267, 24,
	2, 102, 174, 377, 376, 24, 263, 311, 347, 349,
	2, 427, 427, 2, 389, 310, 345, 168, 93, 379,
	295, -184, 2, -165, -73, 2, 424, 27, -72, -5,
	-48, -58, -62, -75, -70, -11, -32, -34, -54, -51,
	-59, -65, -67, -79, -78, -80, -82, -86, -85, -88,
	-93, -94, -100, -131, -132, 79, 25, 108, 320, 117,
	184, 2, -406, -228, 2, 24, -169, -165, 79, 146,
	309, -139, 345, 2, 220, 189, 190, 2, -184, 2,
	-402, 2, 189, 190, 2, -406, -228, 23, 2, -165,
	2, 306, 323, -170, 2, 302, -165, 427, 427, 427,
	427, 427, 427, 210, 59, 299, 317, -98, 364, -97,
	357, 304, -99, -354, 2, 224, -165, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 2, -127, 317, 333, 153, 36, 59, 24, 64,
	94, 147, 168, 169, 197, 74, 75, 270, 210, 190,
	-316, 119, 318, 346, 305, 343, 364, 79, 380, 296,
	-409, 118, 4, 93, 224, 319, 357, 68, 350, 351,
	427, 427, 427, -412, 2, 345, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, -141, -143, -142,
	427, 427, 427, 427, 427, -223, -224, 373, 182, 114,
	247, -140, -142, 2, -384, -127, 317, 2, 59, 24,
	-352, 2, -291, 242, -293, 415, 416, 410, 230, 402,
	-305, 99, 217, 216, -295, -306, 115, 299, 424, -200,
	-294, 430, 9, -381, -142, 31, 52, -198, -165, 7,
	8, 5, 6, -172, -333, -301, -340, 367, 125, 233,
	-378, -379, -199, 4, -362, -356, -334, -343, -338, -339,
	-341, 42, 48, 47, 354, 223, 312, 313, 314, 315,
	327, 382, 164, 40, 240, 241, 176, 183, 62, 85,
	86, 84, 89, 88, 90, 87, 319, 379, 53, 30,
	158, 159, 163, 234, 160, 60, -380, 43, 95, 107,
	136, 137, 177, 178, 179, 180, 192, 193, 337, 360,
	39, 41, 44, 55, 56, 97, 98, 123, 124, 135,
	148, 175, 181, 203, 236, 253, 264, 275, 326, 341,
	357, 358, 359, 365, 366, 387, -363, -344, 80, 126,
	144, 173, 161, 186, 187, 191, 204, 207, 225, 232,
	250, 252, 294, 324, -413, 2, 364, 364, 2, -413,
	2, -413, 2, -168, 2, 364, 361, -414, 364, 398,
	-386, 276, -387, -184, -386, 427, 427, 429, 427, -218,
	-219, -220, 2, 24, 105, 424, 2, -319, 2, 422,
	-323, -142, 199, -322, 424, -320, -190, 243, -382, 300,
	-378, -379, -172, -165, -199, 4, 217, 216, -3, 2,
	-323, 158, -190, 2, -323, 158, 2, -191, 158, -323,
	-193, 2, -360, 158, -358, 9, -357, 5, 4, -362,
	-364, -363, 62, 2, -175, -165, 2, -202, 158, -190,
	-187, -355, 4, -362, -364, -363, -365, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 52, 53, 58,
	61, 63, 74, 79, 84, 85, 87, 86, 88, 89,
	90, 99, 101, 103, 105, 106, 109, 112, 114, 125,
	127, 140, 142, 143, 146, 149, 151, 162, 168, 172,
	182, 184, 199, 202, 208, 211, 212, 230, 231, 233,
	239, 242, 243, 246, 247, 262, 268, 278, 292, 309,
	319, 329, 342, 345, 356, 361, 362, 367, 373, 374,
	379, 381, 388, 389, 392, 393, 394, 395, -188, -355,
	361, 429, -234, -196, -197, -227, -165, 426, -291, 2,
	-88, 2, -291, 158, 2, -88, 158, 2, -291, 158,
	2, -88, 158, 2, -221, 424, 426, 345, 63, 2,
	-190, 158, -180, 2, -165, 140, -191, 158, 2, -193,
	-360, 158, 2, -360, 158, 2, -192, 2, -190, 168,
	168, -175, 158, 2, -165, 24, 143, 2, 184, 2,
	184, 2, -324, 2, -323, -235, 158, 2, -190, -235,
	158, 2, -235, 158, 2, -203, 158, 2, -202, -175,
	158, 2, -361, 158, 2, -360, -361, 158, 2, -260,
	424, -330, 2, -329, -357, 386, 424, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 317, -138, -139, 81, 221, 261,
	242, 361, 429, 424, -190, -291, -88, -303, 424, 143,
	-291, -88, 242, 143, 244, 2, 93, 345, 401, 24,
	-165, 2, 321, 2, 424, -98, 57, 364, -280, 2,
	-281, -162, -163, -164, 188, 269, 274, 401, -352, 361,
	407, 143, -352, -238, 426, -127, 2, 140, 381, 2,
	7, 2, -360, 273, 132, 2, 321, 2, 270, 318,
	59, 143, 2, 2, -404, 2, 242, 143, 2, 143,
	2, 143, 2, 143, 2, 143, 2, 2, 270, 318,
	2, 363, 198, 363, 2, 143, 2, 143, 2, 5,
	2, 188, 269, 334, 2, 345, 389, 310, 2, 2,
	143, 2, 143, 401, 2, -246, -323, -223, -224, -245,
	-268, -269, 208, 127, 239, -251, 24, 105, -251, -251,
	46, 425, 425, -127, 321, 2, 10, 11, 61, 35,
	415, 416, 417, 418, 138, 419, 420, 413, 414, 412,
	405, 406, 409, 194, 195, 76, 408, 407, 69, 214,
	301, 128, 129, 130, 131, 284, 165, 166, 167, 13,
	14, 15, 28, 246, 207, 402, 161, 324, 410, 16,
	17, 18, 186, 187, 232, 38, 162, -171, -204, -291,
	-291, -291, -291, -291, 252, -243, -286, 422, -142, 424,
	424, -142, -291, -305, -236, 424, -351, 7, -142, -300,
	422, -307, -291, 426, 424, 5, 424, 5, -388, 396,
	140, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 266, -348, 390, -348, -348, -335,
	424, -335, 424, 424, -336, 424, 424, 424, -335, 424,
	424, 424, 397, 403, 397, 403, 424, 424, -279, -280,
	-279, 361, -170, 429, -386, -221, 424, -239, -325, -291,
	417, -239, -239, 242, -236, -291, 80, -254, 191, 225,
	144, 204, 294, 173, -351, -73, -288, 430, -315, 403,
	-142, -320, -165, -142, -322, 424, -319, -315, 417, -190,
	424, 143, 424, 426, -151, 285, -150, 22, 25, 108,
	384, 120, -211, 170, 257, 115, 330, -408, 117, 303,
	352, 353, 285, 115, -248, -250, 32, 91, 227, 254,
	49, 156, 216, 217, 332, 115, 285, 395, 115, 117,
	285, -153, 330, -408, 117, 303, 285, -152, -211, 115,
	430, 117, 237, -360, -234, 429, 429, -355, 417, 115,
	115, 115, 115, 143, -227, -355, -190, -198, -165, -199,
	424, -221, 230, 242, -402, -249, -248, 230, -161, -383,
	395, 230, 230, -221, -177, 158, 2, -166, -165, -177,
	158, -383, 230, -324, -201, -190, -201, 320, -184, 32,
	-154, 429, 51, 290, 115, -154, 115, -154, 115, -154,
	429, 115, -154, 115, 429, 115, 115, -236, 425, 429,
	-330, -360, -402, -227, -169, -360, 143, 79, 424, 32,
	-302, -331, -332, -333, -342, -337, -340, 42, 48, 47,
	354, 223, 312, 313, 314, 315, 327, 382, 164, 40,
	240, 241, 176, 4, 41, -344, 183, 175, 177, 178,
	179, 180, 181, 326, 39, 275, 136, 137, 135, 107,
	98, 97, 236, 44, 43, 95, 357, 358, 359, 360,
	192, 193, 56, 55, 387, 337, -361, -402, -227, 140,
	-175, 2, -190, 2, 70, 71, 401, -354, -236, 32,
	-280, 2, -415, 429, 206, -206, 213, 229, 152, 243,
	399, -359, 5, 4, -301, -312, 99, 210, -340, 8,
	416, -349, 7, 415, -353, -352, -353, 83, 426, -355,
	345, 192, -360, -360, -354, 24, 322, 2, -190, -405,
	140, -403, 295, -402, -190, -190, -190, -190, -190, 140,
	2, 363, 2, 140, -165, -165, 206, -190, 2, -192,
	2, -191, 2, 345, 168, 345, -154, 429, -245, -269,
	-268, -271, -291, 24, -274, 134, 226, -291, -293, -141,
	-141, -141, -225, -317, -291, 268, 168, -354, -346, -331,
	-345, 280, 281, 279, 283, 282, -331, -189, -355, 357,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, 207, 161, 324, 38, 162,
	-291, 361, -291, -291, -291, -291, 222, 230, 233, 367,
	125, 375, 105, 237, -418, 342, 34, -298, -142, 424,
	-311, 29, 329, 24, -305, 299, 424, -286, -291, -287,
	-237, -236, 425, 32, 429, -237, -304, -300, -310, -309,
	392, -355, 417, 425, -236, 388, 24, 105, 417, 2,
	7, -261, 400, 219, 96, 154, 218, -262, 308, -389,
	133, 149, 424, 425, 2, 425, 2, 425, 2, 425,
	2, 425, 2, -291, -291, -291, -291, -291, -291, -291,
	-236, -351, -255, 2, -347, -236, 4, 400, 219, 96,
	154, 218, 308, -255, 2, 7, -236, 2, -236, 2,
	-256, 2, -291, -236, -257, -292, -293, 415, 416, 410,
	-305, -258, 2, -291, -237, 357, 357, 357, 357, -291,
	45, 202, 362, -259, -291, 143, -236, -170, -387, 32,
	-236, -230, 429, 143, 32, 4, -230, -230, 424, 425,
	429, 191, 191, -319, -254, 191, -252, 250, -252, -252,
	-400, 424, 423, -315, -176, 422, 431, -355, -314, -313,
	32, -184, 248, -315, -315, 426, 425, -314, -190, 424,
	-236, -355, 429, 361, -265, 74, 63, -283, 158, 63,
	-366, -178, 74, -367, -165, 58, 374, 268, 142, -265,
	74, -265, 74, 74, 320, 333, 46, -323, 35, -88,
	72, 143, 361, -323, -250, -331, 91, 216, 217, 46,
	-350, -349, 416, -350, 46, -350, -350, -350, 395, -191,
	-323, 361, 258, -360, 72, 361, 429, 35, -88, 72,
	143, 361, -202, -176, 72, 345, -328, -327, 404, -196,
	-165, 426, -291, -88, -291, -88, 335, 425, 426, 186,
	186, -207, -208, -165, -284, -283, -368, -369, -366, 185,
	168, 374, 126, 32, 115, -227, 184, 115, 258, 115,
	115, 32, 242, 230, 242, 230, -157, 348, 115, -285,
	393, -275, -88, 424, 99, 32, -275, -240, -241, -326,
	-242, -178, 424, -184, -190, -235, -235, -235, -202, -203,
	-175, -360, -361, -361, 425, -73, -329, 425, -137, 395,
	361, 395, 425, -139, 381, -208, -72, 25, 79, 108,
	425, 429, -229, 31, 422, -261, 424, -348, 424, -137,
	-327, 143, -228, -328, -328, 140, 71, 407, 361, 425,
	364, -281, -205, 274, 328, 286, 316, 8, 7, 7,
	429, -355, -190, 140, -227, -227, 317, -73, 140, -73,
	426, -190, -202, -190, -323, -272, -349, 424, -273, 299,
	300, 429, -149, 33, 103, 196, -190, 401, -291, -291,
	361, -418, 342, -298, -291, 222, 233, 367, 125, 375,
	105, 237, 143, 424, -292, -292, -236, -291, 423, 433,
	425, 426, -227, -291, 423, 423, 429, -308, -309, 109,
	-291, 426, -417, 429, -223, -291, -236, -236, 425, 425,
	361, 361, 361, 361, 424, -394, 251, 424, 424, -291,
	32, 429, 429, 429, 425, 429, 429, 429, 425, 425,
	429, 425, 143, 425, 425, 425, 425, 425, -263, 262,
	425, 10, 11, 415, 416, 417, 418, 138, 419, 420,
	413, 414, 412, 405, 406, 407, 69, 214, 301, 13,
	14, 15, 186, 162, -292, -292, -292, 425, -296, -297,
	143, 140, 401, 401, 401, 401, 32, -259, -259, -259,
	425, 143, -236, 424, 425, -285, -325, -232, 2, -319,
	-186, -355, -285, -285, -236, -291, -319, -319, -253, 381,
	242, 191, -319, -313, 425, -401, -351, -315, -314, -351,
	-290, -289, 141, 228, -184, -221, -314, -314, -355, -315,
	425, -233, -321, -382, -417, 426, -150, -190, -178, -185,
	-165, 230, -283, 158, -156, 230, -331, -185, 424, 424,
	196, 196, -178, -185, 158, -178, 158, -185, -185, -407,
	274, 238, -291, 209, 272, 231, -151, 285, -88, 401,
	424, -192, 285, -198, -350, -350, -248, 285, -191, -360,
	395, 401, -175, -152, -88, 401, 424, -176, -153, 285,
	401, -190, -134, 157, 237, 417, -355, -128, 5, 233,
	-128, 425, 429, 168, -177, 168, -183, -166, -88, -190,
	143, -360, -191, -360, -360, -360, -88, -190, 115, -190,
	115, -158, 111, -416, 407, -175, -224, -223, -291, -247,
	-278, 292, 242, -222, -179, -178, 386, -184, -247, -231,
	429, 143, 407, 426, -222, -154, -154, -154, -154, -154,
	-73, 143, -136, 245, -135, -165, 5, -227, 23, 424,
	-360, 425, -331, 422, 423, 7, 7, 424, -351, -137,
	-227, 143, -41, 395, 272, 93, 345, 257, 168, -352,
	-352, -280, 372, 67, 274, -352, 345, 317, -73, -165,
	-273, -291, -317, -190, 430, -291, -291, -292, -292, 143,
	424, -291, -302, 28, 28, 425, -287, -291, 417, -355,
	425, 425, -300, 112, -291, 356, -355, 417, 425, 388,
	-417, -417, -417, 5, 219, 154, 218, -262, 218, -262,
	-262, 7, -395, -181, 424, -165, 393, -223, 425, -346,
	-331, -291, -291, -291, -291, -291, -351, -291, -296, -291,
	-346, -331, -292, -292, -292, -292, -292, -292, -292, -292,
	-292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
	-292, 105, 230, 237, -292, -297, -296, -291, -291, -331,
	425, 425, 425, -236, -72, -244, 149, -328, 429, -244,
	-244, 425, -253, 424, -291, -319, 423, 425, 429, -314,
	423, 429, 432, 407, -221, 426, -313, 425, 429, -277,
	32, 425, -355, 361, 361, 115, 230, 383, -370, -367,
	-291, -226, -318, -178, -382, 424, -165, 424, 424, -148,
	108, 320, -267, 115, -154, 115, -154, 399, 424, 424,
	361, -265, 74, -294, -172, -236, 361, 361, 258, -294,
	-294, -236, 361, -294, 117, -137, 143, 344, -209, 171,
	-284, -166, 424, -177, 424, 424, -221, -190, -137, -249,
	-161, -266, 381, -176, 424, -176, -159, 201, -416, -358,
	-383, -270, -268, -247, -239, 231, 73, 425, 429, 426,
	-285, -241, -232, -291, 2, 425, -88, 429, 424, 407,
	407, 244, -360, -138, -138, 7, 423, 425, -351, 425,
	-227, 245, -187, -175, -190, -188, -202, -190, 243, 425,
	-149, -176, 28, 28, -291, -302, 425, -291, -291, 423,
	-291, 426, 5, -291, 425, 425, 425, 425, -396, -165,
	-291, 425, 425, 425, 429, 429, 425, 425, 425, 425,
	425, -297, 143, 105, 237, 424, 425, 425, -299, 151,
	46, -319, -299, -299, -227, -288, -351, -289, -176, 422,
	-355, -321, 424, 426, -178, -185, -283, 115, -371, 74,
	-372, 61, 126, 79, 230, 233, 374, 268, 58, 99,
	278, 32, 425, 425, 429, -174, 61, -174, -291, -226,
	-227, 230, 339, 99, 230, 99, 92, 369, -178, -185,
	-227, -227, -190, -178, -185, 424, 425, -192, -191, -360,
	425, -176, 72, -361, 357, -210, -211, 162, 424, -226,
	424, -227, -207, 32, 424, 145, 242, -226, 242, -160,
	200, -416, -358, -157, -247, -276, 424, 242, -88, -179,
	2, -224, 407, -135, -136, -360, -360, 425, 92, 92,
	423, 425, -42, -43, 168, 74, 260, -213, -212, 257,
	237, -149, -291, -291, 425, -355, 417, -417, -390, 257,
	425, -291, -291, -292, 143, 424, -302, -391, 394, -291,
	-236, -391, -391, 425, -315, -351, 2, -283, -185, -189,
	-182, -165, 126, 158, 233, 196, 424, -292, -190, 424,
	2, -282, -411, 78, 340, -318, -149, -189, -149, 425,
	425, 425, 233, 233, -291, -331, -154, -154, 425, 425,
	361, 361, -236, 361, 361, 401, -294, 255, -226, 425,
	-226, 425, 425, -88, -226, -190, 425, -190, -416, -358,
	-158, 106, -227, 74, -270, -298, 425, 424, 424, 429,
	24, 424, 24, 424, -188, 345, 425, -224, 46, 425,
	425, -292, -302, 425, -392, -393, -181, -314, 423, -372,
	-182, 230, -291, -167, 424, -291, -209, 424, -174, 278,
	-173, 61, 424, 424, -178, -185, -417, 424, 424, -294,
	-190, 425, -282, 425, -209, 425, -266, 424, -358, -159,
	376, 231, 425, -185, -247, -361, -361, -43, -227, -227,
	-190, -397, 272, 300, -236, 425, 429, 32, 115, 425,
	-373, 215, -165, 425, -210, -227, -149, -190, -410, 381,
	-189, -215, -214, -212, -217, -216, -212, 425, -236, -236,
	424, -209, -282, -210, -282, 424, -226, -160, 320, -285,
	425, 425, 425, 425, 425, -398, -399, 38, 371, 83,
	-291, -398, -393, -395, 126, -374, -377, -376, 242, 144,
	256, 325, 425, 339, 391, 425, -221, -291, 425, 429,
	386, 425, 429, 386, 425, 425, -227, -210, -209, -209,
	-226, 425, -240, -137, -137, -399, 265, 139, 299, 265,
	139, -182, -376, 242, -377, 242, 376, 102, -373, -214,
	162, -216, 143, 425, -210, -210, 425, -285, 28, -375,
	227, 290, 51, 320, -375, -374, 424, 424, -155, 51,
	290, -282, -399, 21, 233, 99, -236, -236, -209, 425,
	425, -210, -210, 361, 424, -236, 425, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 247, 248, 250, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 0, 861, -2, 0, 366, 368, 377, 379,
	381, 383, 384, 0, 446, 448, 450, 452, 454, 456,
	458, 460, 462, 463, 465, 467, 469, 471, 473, 475,
	477, 479, 481, 483, 485, 487, 489, 491, 493, 495,
	-2, 773, 775, 777, 779, -2, 62, 64, 66, 68,
	70, 72, 87, 222, 224, 226, 228, 231, 233, 235,
	898, 253, 255, 257, 259, 261, -2, 912, 0, 0,
	0, -2, 0, -2, -2, -2, 791, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 874, 876, 878,
	880, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1537, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1423, 1477,
	1426, 1421, 188, 190, 192, 193, 0, 0, 0, 0,
	0, 0, 674, 1462, 1475, 1476, 1477, 1480, 1481, 1482,
	1537, 0, 215, 217, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 345, 1629, 347,
	349, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 249, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 344, 342, 1457, 286, 287, 0, 0, 327, 328,
	329, 330, 331, 332, 334, 291, 293, 295, 296, 298,
	300, 302, 304, 306, 308, 310, 312, 313, 315, 317,
	318, 320, 322, 323, 325, 734, 0, 0, 0, 0,
	0, 170, 0, 359, 353, 358, 360, 362, 363, 364,
	365, 0, 0, 168, 159, 0, 0, 607, 340, 338,
	0, 158, 0, 0, 770, 0, 359, 1504, 357, 771,
	772, 0, 0, 766, 767, 1659, 801, 367, 369, 378,
	380, 382, 385, -2, -2, 1754, -2, 408, -2, 416,
	1757, 1661, 419, 0, 421, -2, 424, 447, 449, 451,
	453, 455, 457, 459, 461, 464, 466, 468, 470, 472,
	474, 476, 478, 480, 482, 484, 486, 488, 490, 492,
	494, 496, 497, 0, 0, 0, 0, 0, 501, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 500, 502, 503, 504, 0, 550, 589, 590,
	774, 776, 778, 0, 715, 900, 63, 65, 67, 69,
	71, 223, 225, 227, 229, 232, 234, -2, 872, 873,
	254, 256, 258, 260, 262, -2, 0, 904, 904, 904,
	0, 0, 873, 871, 0, 370, 0, 372, 0, 501,
	375, 376, 428, 429, 1115, 0, 0, 0, 0, 0,
	1240, 1193, -2, -2, 1225, 1227, 1733, 1754, 0, 1229,
	1230, 0, 1232, 1236, 1237, 0, 1400, 1469, 1464, 1429,
	1430, 1431, 1432, 0, 0, 1435, 0, 1437, 1438, 1439,
	1304, 1251, -2, -2, -2, 1473, 1029, 1030, 1031, 1032,
	1033, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1766, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 0, 1722,
	1739, 1740, 1745, 1747, 1741, 1730, 1274, -2, -2, 1544,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1734, 1735, -2,
	1737, -2, -2, 1746, -2, 1750, 1751, -2, -2, 1756,
	-2, -2, -2, 1760, 1761, -2, 1491, 1082, 1767, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1779, 1780,
	1781, 1782, 1783, 1784, 803, 781, 794, 803, 783, 784,
	785, 786, 787, 792, 793, 796, 0, 788, 789, 790,
	890, 1636, 893, 674, 891, 875, 877, 0, 879, 0,
	0, 0, 884, 907, 905, 0, 943, 888, 889, 899,
	958, 981, 0, 963, 0, 981, 1003, 0, 968, 1655,
	1252, 1253, 0, 1477, 1474, -2, 1777, 1778, 2, 79,
	0, 1739, 1003, 81, 0, 1739, 84, 0, 1739, 0,
	-2, 88, 0, 1739, 171, 172, 1487, 1488, 1492, 1493,
	1494, 1495, 1766, 91, 0, 1453, 99, 0, 1739, 1420,
	0, 1450, 1496, 1497, 1498, 1499, 1500, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 0, 1447,
	0, 0, 599, 1417, 1422, 600, 1427, 0, 194, 195,
	196, 197, 198, 1739, 200, 201, 0, 203, 204, 1739,
	206, 207, 0, 209, 0, 0, 0, 0, 0, 230,
	674, 1739, 0, 237, 1458, 0, 698, 1739, 696, 1461,
	-2, 1739, 718, 721, 1739, 723, 674, 725, 1460, -2,
	1484, 897, 1739, 817, 346, 348, 0, 240, 0, 830,
	0, 832, 0, 851, 1009, 151, 1739, 265, 284, 151,
	1739, 268, 151, 1739, 271, 151, 1739, 274, 1415, 151,
	1739, 277, 278, 1739, 280, 173, 281, 1739, 283, 341,
	0, 0, -2, 335, 1463, -2, 0, 333, 292, 294,
	297, 299, 301, 303, 305, 307, 309, 311, 314, 316,
	319, 321, 324, 326, -2, 0, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 605, 606, 0, 0, 0,
	768, 769, 0, 0, 0, 389, 0, 0, 0, 0,
	800, 386, 0, 405, 0, 407, 1729, -2, -2, 411,
	804, 808, 809, 810, 0, 0, 0, 0, 418, 0,
	0, 0, 422, 425, 0, 498, 499, 0, 0, 509,
	510, 511, 512, 1634, 1557, 515, 0, 518, 539, 554,
	0, 0, 522, 524, 604, 526, 0, 0, 528, 0,
	530, 0, 532, 0, 534, 0, 536, 538, 540, 555,
	542, 0, 0, 0, 553, 0, 559, 0, 562, 563,
	564, 0, 566, 567, 568, 0, 0, 0, 576, 578,
	0, 588, 0, 505, 506, 151, 1007, -2, 0, 867,
	921, 922, 0, 0, 0, 0, 902, 903, 0, 0,
	0, 863, 864, 371, 0, 374, 0, 0, 0, 0,
	1335, 1336, 1337, 1338, 1339, 1340, 1343, 1344, 1341, 1342,
	1345, 1346, 0, 0, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1349, 1350, 0, 0, 1352, 0, 1354, 0, 0, 0,
	0, 0, 0, 1172, 1174, 1408, 0, 0, 1351, 1120,
	1121, 1122, 1157, 1158, 0, 1226, 1405, 1404, 1228, 0,
	1357, -2, 1358, 1240, 0, 0, 1231, 1444, 1238, 1239,
	1357, 0, 1399, 0, 0, 1434, 0, 1112, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 1080, 1087, 1084, 1083, 1068,
	0, 1067, 0, 0, 1065, 0, 0, 0, 1069, 0,
	1380, -2, 0, 0, 0, 0, 0, 0, 780, -2,
	782, 0, 798, 0, 892, 0, 0, 947, 1409, 1413,
	1414, 947, 947, 0, 0, 1358, 0, 0, 0, 0,
	1000, 1000, 1000, 998, 975, 0, 981, 0, 991, 0,
	981, 981, 0, -2, 963, 0, 0, 991, 1004, 1005,
	0, 0, 0, 0, 100, 763, 119, 0, 763, 763,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 115,
	107, 108, 0, 0, 85, 699, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 117, 0, 142, 144, 0,
	0, 0, 0, 994, 598, 0, 0, 1478, 1425, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 1464, 1465,
	613, 0, 0, 0, 0, 694, 697, 0, 716, 0,
	896, 0, 0, 0, 0, 1739, 730, 1449, 1483, 0,
	1739, 819, 0, 1013, 0, 833, 0, 0, 1010, 0,
	263, 0, 149, 150, 0, 266, 0, 269, 0, 272,
	0, 0, 275, 0, 0, 0, 0, 0, 899, 0,
	0, 185, 0, 351, 361, 0, 0, 0, 0, 899,
	0, 1360, 1021, 1024, 1025, 1026, 1112, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1088, 1082, 1098, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1078, 0,
	1053, 1053, 1053, 1070, 1071, 1089, 1090, 1092, 1094, 1096,
	1022, 1023, 1088, 1088, 1085, 1086, 185, 0, 355, 0,
	994, 391, 994, 393, 0, 584, 0, 0, 0, 0,
	-2, 413, 0, 806, 0, 811, 437, 438, 439, 813,
	814, 417, 440, 441, 442, 443, 444, 445, 0, 691,
	0, 693, 1440, 0, 414, 430, 415, 420, 0, 426,
	0, 0, 513, 514, 516, 517, 519, 520, 521, 525,
	0, 592, 1651, 602, 527, 529, 531, 533, 535, 899,
	544, 0, 546, 899, 557, 560, 565, 569, 570, 571,
	572, 573, 574, 0, 0, 0, 714, 0, 870, 919,
	920, 925, 929, 930, 933, 936, 937, 927, 1115, 885,
	886, 887, 913, 914, 746, 0, 0, 373, 1116, 1017,
	1018, 1072, 1073, 1074, 1075, 1076, 1117, 1118, 1446, 0,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	-2, -2, -2, -2, -2, -2, -2, -2, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, -2,
	-2, -2, 1155, 1156, -2, 1353, 1355, 0, 1408, 0,
	-2, 0, -2, -2, -2, -2, 1169, 0, 1171, 1176,
	1178, 1180, 0, 0, 0, 0, 1407, 1190, 1391, 0,
	0, 1332, 1333, 1334, 1175, 0, 0, 1406, 1403, 0,
	0, 1356, 1235, 0, 0, 0, 0, 1364, 1398, 1394,
	0, 1466, 1472, 1242, 910, 0, 0, 0, 0, 1249,
	0, 1445, 1099, 1100, 1101, 1102, 1103, 1104, 1113, 1314,
	0, 0, 0, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 0, 1367, -2, -2, -2, -2,
	-2, -2, -2, 0, 1288, 0, 0, 1300, 0, 1302,
	0, 1290, 1358, 1377, 0, 0, 1196, 0, 0, 0,
	1240, 0, 1293, 1358, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 0, 1390, 797, 894, 0,
	0, 1013, 0, 0, 0, 1412, 1013, 1013, 0, 942,
	0, 0, 0, 0, 0, 0, 995, 999, 996, 997,
	0, 0, 981, 991, 955, 0, 0, 1448, 961, 990,
	0, 674, 980, 991, 991, 0, -2, 965, 0, 0,
	910, -2, 0, 0, 0, 0, 762, 121, 1739, 0,
	153, 0, 0, 664, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 700, 701, 703, 709, 711, 0,
	705, 1443, 0, 706, 0, 708, 710, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 1419, 0, 0, 176, 993, 0, 1418,
	1428, 0, 199, 202, 205, 208, 186, 673, 0, 0,
	0, 0, 612, -2, 614, 616, 617, 618, 619, 1582,
	1484, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 827, 0, 912,
	0, 849, 835, 0, 0, 0, 849, 853, 854, 856,
	857, 0, 0, 1011, 285, 151, 151, 151, 1416, 151,
	151, 174, 279, 282, 343, 288, 336, 899, 0, 0,
	0, 0, 164, 0, 0, 0, 337, 0, 0, 0,
	339, 0, 1014, 1016, 0, 1027, 0, 1080, 0, 156,
	185, 0, 0, 390, 395, 0, 585, 0, 0, 406,
	0, 805, 812, 0, 434, 0, 436, 692, 1442, 1441,
	0, 427, 507, 0, 603, 601, 543, 547, 899, 549,
	0, 586, 587, 591, 1008, 0, 931, 0, 928, 934,
	935, 0, 916, 744, 745, 0, 0, 0, -2, -2,
	0, 0, 0, 1191, -2, 1170, 1173, 1177, 1179, 1181,
	0, 0, 0, 0, 0, 0, 0, 1192, 1401, 1404,
	1330, 0, 0, 1359, 1362, 1363, 0, 0, 1395, 0,
	0, 0, 0, 0, 909, 910, 910, 910, 1248, 0,
	0, 0, 0, 0, 0, 1250, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 0, 0, 1273, 1051,
	0, 1285, 0, 1287, 1077, 1299, 1301, 1289, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1199, 1200, 1201, 1292, 1383, 1384,
	0, 0, 1091, 1093, 1095, 1097, 0, 0, 0, 0,
	1298, 0, 1389, 899, 944, 939, 1410, 994, 946, 948,
	1411, 1451, 939, 939, 0, 1359, 983, 0, 985, 0,
	0, 0, 987, 0, 976, 0, 978, 991, 960, 0,
	0, 953, 0, 952, 674, 989, 962, 966, 1466, 0,
	1006, 0, 970, 973, 0, 0, 120, 750, 0, 0,
	1452, 0, 123, 1739, 132, 0, 641, 0, 0, 0,
	0, 0, 765, 133, 1739, 151, 1739, 151, 134, 137,
	0, 141, 139, 0, 0, 632, 101, 763, 104, 0,
	0, 756, 0, 704, 707, 713, 86, 0, 758, 748,
	0, 0, 747, 143, 105, 0, 0, 760, 103, 0,
	0, 0, 185, 0, 0, 1424, 1479, 210, 212, 213,
	211, 621, 0, 1484, 0, 1484, 0, 1456, 610, 674,
	0, 185, 698, 719, -2, 722, 724, 732, 0, 0,
	0, 823, 827, 0, 826, 897, 924, 911, 1012, 828,
	849, 0, 0, 0, 838, 840, 837, 834, 831, 1013,
	0, 0, 0, 0, 0, 264, 267, 270, 273, 276,
	289, 0, 183, 1616, 181, 178, 180, 350, 0, 0,
	0, 0, 1361, 0, 1019, 0, 0, 0, 0, 157,
	354, 0, 392, 0, 0, 0, 0, 0, 0, 403,
	404, -2, 432, 433, 435, 431, 0, 545, 548, 556,
	0, 0, 915, 746, 0, 1119, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1392, 0, 1403, 1233, 1234,
	1241, 1331, 1365, 1393, 1397, 0, 1467, 1471, 1243, 0,
	0, 0, 0, 1436, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 0, 1312, 1313, 1317, 1459, 0, 0, 1254, 0,
	0, 0, 0, 0, 0, 0, 0, 1366, 1376, 1378,
	1197, 1198, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, -2, -2, -2, 1215, 1216, 1217, -2, -2,
	-2, 0, 0, 0, 1379, 1381, 1382, 1386, 1387, 0,
	1295, 1296, 1297, 1388, 0, 941, 0, 945, 0, 941,
	941, 906, 984, 0, 1002, 986, 958, 977, 0, 967,
	956, 0, 957, 0, 988, 0, 964, 969, 0, 972,
	0, 1243, -2, 0, 0, 0, 0, 152, 639, 663,
	0, 0, 735, 743, 743, 0, 1454, 0, 0, 125,
	0, 0, 0, 0, 130, 0, 136, 140, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 111,
	114, 0, 0, 110, 0, 154, 0, 0, 629, 0,
	615, 0, 0, 0, 0, 613, 0, 236, 238, 695,
	717, 0, 0, 0, 0, 0, 825, 827, 0, 818,
	819, 849, 923, 829, 847, 848, 846, 0, 0, 0,
	912, 855, 852, 858, 859, 0, 169, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 1020, 1028, 0, 1081,
	356, 0, 579, 580, 627, 0, 583, 508, 926, 932,
	917, 746, 0, 0, -2, 0, 1184, -2, -2, 1402,
	1396, 0, 1433, 910, 1244, 1246, 1247, 1114, 1319, 1316,
	0, 1303, 1264, 1265, 0, 0, 1268, 1270, 1271, 1272,
	1052, 1375, 0, 0, 0, 0, 1294, 895, 1308, 0,
	0, 949, 1308, 1308, 0, 981, 979, 954, 950, 0,
	1467, 971, 0, 0, 752, 754, 122, 0, 640, 0,
	643, 0, 0, 0, 0, 650, 651, 0, 0, 0,
	0, 0, 665, 672, 0, 746, 0, 746, 0, 0,
	0, 0, 127, 146, 0, 0, 764, 0, 151, 151,
	0, 0, 751, 0, 0, 0, 0, 757, 759, 749,
	0, 761, 0, 175, 0, 608, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 815,
	827, 0, 820, 821, 239, 0, 0, 0, 836, 839,
	841, 924, 0, 182, 0, 177, 179, 165, 0, 0,
	1015, 1079, 394, 396, 0, 0, 402, 581, 626, 0,
	0, 918, -2, -2, 1185, 1468, 1470, 0, 912, 0,
	1305, 0, 0, -2, 0, 0, 0, 881, 0, 940,
	938, 882, 883, 1001, 991, 0, 974, 124, 0, 644,
	645, 1455, 647, 0, 649, 652, 0, 654, 1486, 0,
	658, 621, 0, 669, 670, 736, 737, 742, 738, 743,
	667, 0, 126, 128, 145, 741, 129, 135, 0, 0,
	0, 0, 910, 0, 0, 0, 992, 0, 0, 672,
	0, 662, 621, 611, 0, 732, 728, 0, 0, 822,
	823, 0, 0, 0, 849, 860, 184, 0, 0, 0,
	398, 0, 400, 0, 625, 0, 1245, 1322, 0, 1266,
	1267, -2, 0, 1223, 1307, 1309, 0, 959, 951, 642,
	646, 0, 0, 678, 0, 0, 629, 0, 746, 0,
	148, 0, 0, 0, 753, 755, 0, 0, 0, 113,
	0, 661, 621, 672, 629, 672, 0, 0, 824, 825,
	0, 843, 1013, 845, 850, 0, 0, 397, 0, 0,
	582, 0, 0, 0, 1318, 1224, 0, 0, 0, 653,
	683, 0, 0, 0, 666, 0, 739, 674, 131, 0,
	740, 0, 633, 0, 0, 636, 0, 0, 0, 0,
	0, 629, 621, 609, 621, 0, 0, 816, 0, 844,
	185, 185, 399, 401, 1315, 1320, 1323, -2, 1705, 1534,
	0, 1321, 1310, 1311, 0, 655, 679, 680, 0, 675,
	676, 677, 1485, 656, 657, 671, 678, 147, 630, 0,
	0, 631, 0, 0, 116, 118, 0, 659, 629, 629,
	0, 729, 1013, 166, 167, 0, 1325, 1326, 1327, 1328,
	1329, 648, 681, 0, 682, 0, 0, 0, 683, 634,
	0, 637, 0, 624, 660, 726, 672, 842, 0, 684,
	0, 687, 688, 0, 685, 668, 0, 0, 620, 622,
	623, 621, 1324, 686, 689, 690, 0, 0, 629, 629,
	0, 727, 635, 0, 0, 0, 629, 638,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1016
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1022
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1028
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1037
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1039
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1062
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1156
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1160
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1164
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1175
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1220
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1226
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1236
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1242
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1248
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1259
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1276
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1286
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1296
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1309
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1335
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1341
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1372
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1377
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1386
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1399
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1431
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1441
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1471
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1478
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1505
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1510
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1511
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1516
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1520
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1524
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1563
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1604
		{
			sqlVAL.str = "CSV"
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1608
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1612
		{
			sqlVAL.str = "PGCOPY"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1650
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1654
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1657
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1674
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1677
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1681
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1685
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1705
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1711
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1715
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1743
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1746
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1750
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1762
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1763
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1764
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1765
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1775
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1783
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1785
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1788
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1798
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1807
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1815
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1817
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1821
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1824
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1834
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1843
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1853
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1857
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1860
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1864
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1869
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1875
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1876
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1892
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1897
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1898
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1910
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1921
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				Options: sqlDollar[7].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1948
		{
			return helpWith(sqllex, "DELETE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DROP")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1980
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1992
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1995
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2007
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2022
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2025
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2033
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2041
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2048
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2056
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2064
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2071
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2079
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2098
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2101
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2109
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2133
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2135
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2139
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2149
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2152
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "DELETE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2155
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			return helpWith(sqllex, "INSERT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2164
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2170
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2171
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2179
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2180
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2209
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2213
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2223
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2229
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2235
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2239
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2253
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2261
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2264
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2292
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2295
		{
			return helpWith(sqllex, "GRANT")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2319
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2323
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2326
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2331
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2335
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2346
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2364
		{
			return helpWith(sqllex, "RESET")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2365
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2373
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2377
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2380
		{
			return helpWith(sqllex, "RESET")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2388
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "USE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2409
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2411
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2412
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			return helpWith(sqllex, "USE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2414
		{
			return unimplemented(sqllex, "set local")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2430
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2448
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2466
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2474
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2478
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2482
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2514
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2529
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2532
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2554
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2558
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2583
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2585
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2588
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2592
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2602
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2618
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2625
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2631
		{
			return unimplemented(sqllex, "set from current")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2632
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2640
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2645
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2652
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2656
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2662
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2673
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2679
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2689
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2693
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2697
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2701
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2705
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2711
		{
			sqlVAL.union.val = tree.Low
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2715
		{
			sqlVAL.union.val = tree.Normal
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = tree.High
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2734
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2738
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2747
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SHOW")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2805
		{
			sqlVAL.str = "client_encoding"
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			sqlVAL.str = "timezone"
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2830
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2841
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2849
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2857
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2864
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2871
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2877
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2894
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2899
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2963
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2979
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2996
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3006
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3029
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3033
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3037
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3043
		{
			sqlVAL.union.val = true
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3044
		{
			sqlVAL.union.val = false
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3061
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3080
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3089
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3092
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3099
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3103
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3113
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3125
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3130
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3147
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3168
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3171
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3179
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3190
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3197
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3202
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3207
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3214
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3222
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3229
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3234
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3246
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3250
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3253
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3261
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3268
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3273
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3393
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3397
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3401
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3440
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3444
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3449
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3453
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3469
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3473
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3494
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3497
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3584
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3590
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3600
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3606
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3612
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3620
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3627
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3632
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3637
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3643
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.str = ""
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3657
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3663
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3677
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3683
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3693
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 638:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3713
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3724
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3739
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3745
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3791
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3795
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3803
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3811
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3823
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3827
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3834
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3844
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3856
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3883
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3906
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3916
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3940
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3944
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3950
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3959
		{
			return unimplemented(sqllex, "match full")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3960
		{
			return unimplemented(sqllex, "match partial")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3961
		{
			return unimplemented(sqllex, "match simple")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3962
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3969
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3973
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3977
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3981
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3985
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3991
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3997
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4005
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4009
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4031
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4053
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4061
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4069
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4073
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4076
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4080
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4084
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4085
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4088
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4090
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4094
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4095
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4097
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4098
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4100
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4109
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4112
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4127
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4135
		{
			sqlVAL.union.val = nil
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4145
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4149
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4152
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4160
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4167
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4185
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4198
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4212
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4221
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4230
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4235
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4239
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4245
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4255
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4271
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4272
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4275
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4276
		{
			sqlVAL.str = ""
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4279
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4280
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = tree.Descending
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4292
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4309
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4315
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4319
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4323
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4327
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4331
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4333
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4337
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4351
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4367
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4371
		{
			sqlVAL.union.val = false
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4376
		{
			sqlVAL.union.val = true
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = false
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4388
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4398
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4410
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4421
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4425
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4426
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4427
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4443
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4448
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4451
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4461
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4464
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4473
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4478
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4479
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4480
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4488
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4498
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4499
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4503
		{
			sqlVAL.str = ""
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4507
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4511
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4515
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4521
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4525
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4541
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4545
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4558
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4560
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4564
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4568
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4572
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4578
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4590
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4594
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4604
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4614
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4624
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4628
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.str = ""
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4638
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4642
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4662
		{
			sqlVAL.str = ""
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4667
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4668
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4680
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4687
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4694
		{
			return helpWith(sqllex, "INSERT")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4712
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4716
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4730
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4734
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4738
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4768
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4772
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4776
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4782
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4786
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4788
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4794
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4803
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 850:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4820
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4831
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4835
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4836
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4840
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4857
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4860
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4907
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4913
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4917
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4936
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4940
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4944
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4948
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4952
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4959
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4994
		{
			return helpWith(sqllex, "SELECT")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4995
		{
			return helpWith(sqllex, "VALUES")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4996
		{
			return helpWith(sqllex, "TABLE")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5018
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5031
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5045
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5057
		{
			return helpWith(sqllex, "SELECT")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5061
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5070
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5094
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5101
		{
			return helpWith(sqllex, "TABLE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5113
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5116
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5117
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5121
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5125
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5131
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5139
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5140
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5144
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5147
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5150
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5151
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5155
		{
			sqlVAL.union.val = true
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
			sqlVAL.union.val = false
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5163
		{
			sqlVAL.union.val = false
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5169
		{
			sqlVAL.union.val = true
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5175
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5180
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5181
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5184
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5185
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5189
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5199
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5205
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5215
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5223
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5232
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5241
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5252
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5256
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5265
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5271
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5278
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5285
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5302
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5308
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5309
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5312
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5313
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5330
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5340
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5344
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5363
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5366
		{
			return helpWith(sqllex, "VALUES")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5368
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5380
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5383
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5385
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5391
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5401
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5405
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5411
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5417
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5422
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5445
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5449
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5453
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5457
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5484
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5498
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5505
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5507
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5511
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5515
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5520
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5536
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5552
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5558
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5564
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5566
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.union.val = nil
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5570
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5571
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = true
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = false
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5609
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5613
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5617
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5635
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5646
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5652
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5659
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5673
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5677
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5683
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5684
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5704
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5705
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5706
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5707
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5711
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5728
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5732
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5736
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5742
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5746
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5758
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5772
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5781
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5792
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5796
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5805
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5818
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5822
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5831
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5849
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5853
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5857
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5861
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5865
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5873
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5933
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5937
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5941
		{
			sqlVAL.union.val = nil
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5952
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5960
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5964
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5968
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5972
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5976
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5980
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5984
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5992
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6002
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6006
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6015
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6024
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6033
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6048
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6052
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6056
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6060
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6066
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6076
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6087
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6093
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6105
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6111
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6128
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6129
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6142
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6150
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6171
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = tree.Year
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = tree.Month
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6185
		{
			sqlVAL.union.val = tree.Day
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6189
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6193
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6203
		{
			sqlVAL.union.val = tree.Month
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6207
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6211
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6215
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6219
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = nil
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.Second
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6240
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6275
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6296
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6300
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6503
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6517
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6521
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6541
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6569
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6617
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6641
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6645
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6649
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6653
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6717
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6775
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6780
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6802
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6815
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6819
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6824
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6839
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6843
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6846
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6847
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6849
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6853
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6857
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6860
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6871
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6878
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6887
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6892
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6908
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6980
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6985
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6990
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6995
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7000
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7010
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7015
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7024
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7025
		{
			return unimplemented(sqllex, "treat")
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7046
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7051
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7056
		{
			return unimplemented(sqllex, "within group")
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7057
		{
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7072
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7082
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7092
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7100
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7134
		{
			sqlVAL.str = ""
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7140
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7154
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7155
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7156
		{
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7160
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7166
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7167
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7168
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7169
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7170
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7185
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7191
		{
			sqlVAL.union.val = tree.Any
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7195
		{
			sqlVAL.union.val = tree.Some
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = tree.All
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = tree.Div
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = tree.LT
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.GT
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7216
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = tree.LE
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = tree.GE
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = tree.NE
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = tree.Like
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7238
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7244
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7254
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7274
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7284
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7288
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7318
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7331
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7352
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7356
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7422
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7449
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7472
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7476
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7481
		{
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7482
		{
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7509
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7513
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7521
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7541
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7548
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7590
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7605
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7609
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7613
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7616
		{
			return unimplemented(sqllex, "func const")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7625
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7635
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7642
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7655
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7666
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7676
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7779
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7787
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7805
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7868
		{
			sqlVAL.str = ""
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7874
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7878
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
