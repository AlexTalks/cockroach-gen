// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9442

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1026,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	179, 865,
	196, 865,
	211, 241,
	287, 241,
	295, 705,
	322, 241,
	331, 705,
	368, 705,
	393, 241,
	417, 705,
	-2, 0,
	-1, 75,
	211, 245,
	-2, 0,
	-1, 76,
	106, 1026,
	185, 1026,
	403, 1026,
	404, 1026,
	-2, 0,
	-1, 87,
	119, 1000,
	134, 1000,
	193, 1000,
	222, 1000,
	253, 1000,
	263, 1000,
	398, 1000,
	-2, 987,
	-1, 116,
	124, 625,
	202, 617,
	210, 625,
	289, 611,
	340, 611,
	386, 625,
	-2, 0,
	-1, 117,
	4, 1028,
	21, 1028,
	22, 1028,
	23, 1028,
	24, 1028,
	25, 1028,
	27, 1028,
	32, 1028,
	37, 1028,
	38, 1028,
	39, 1028,
	40, 1028,
	41, 1028,
	42, 1028,
	43, 1028,
	44, 1028,
	45, 1028,
	46, 1028,
	47, 1028,
	49, 1028,
	50, 1028,
	51, 1028,
	52, 1028,
	53, 1028,
	54, 1028,
	57, 1028,
	58, 1028,
	59, 1028,
	60, 1028,
	62, 1028,
	63, 1028,
	67, 1028,
	68, 1028,
	69, 1028,
	70, 1028,
	71, 1028,
	73, 1028,
	74, 1028,
	75, 1028,
	76, 1028,
	78, 1028,
	80, 1028,
	81, 1028,
	82, 1028,
	85, 1028,
	86, 1028,
	94, 1028,
	95, 1028,
	96, 1028,
	97, 1028,
	98, 1028,
	99, 1028,
	100, 1028,
	101, 1028,
	103, 1028,
	105, 1028,
	106, 1028,
	108, 1028,
	111, 1028,
	112, 1028,
	113, 1028,
	115, 1028,
	117, 1028,
	118, 1028,
	120, 1028,
	121, 1028,
	122, 1028,
	123, 1028,
	124, 1028,
	125, 1028,
	126, 1028,
	127, 1028,
	128, 1028,
	129, 1028,
	130, 1028,
	131, 1028,
	133, 1028,
	139, 1028,
	140, 1028,
	141, 1028,
	142, 1028,
	143, 1028,
	144, 1028,
	146, 1028,
	148, 1028,
	152, 1028,
	153, 1028,
	155, 1028,
	156, 1028,
	158, 1028,
	159, 1028,
	161, 1028,
	162, 1028,
	163, 1028,
	164, 1028,
	165, 1028,
	166, 1028,
	167, 1028,
	168, 1028,
	170, 1028,
	171, 1028,
	173, 1028,
	174, 1028,
	175, 1028,
	179, 1028,
	180, 1028,
	181, 1028,
	182, 1028,
	185, 1028,
	186, 1028,
	187, 1028,
	188, 1028,
	189, 1028,
	190, 1028,
	191, 1028,
	192, 1028,
	194, 1028,
	196, 1028,
	198, 1028,
	200, 1028,
	201, 1028,
	202, 1028,
	204, 1028,
	205, 1028,
	208, 1028,
	209, 1028,
	210, 1028,
	211, 1028,
	213, 1028,
	214, 1028,
	216, 1028,
	217, 1028,
	219, 1028,
	220, 1028,
	223, 1028,
	224, 1028,
	227, 1028,
	228, 1028,
	230, 1028,
	231, 1028,
	232, 1028,
	233, 1028,
	234, 1028,
	235, 1028,
	236, 1028,
	237, 1028,
	238, 1028,
	239, 1028,
	241, 1028,
	242, 1028,
	243, 1028,
	244, 1028,
	246, 1028,
	249, 1028,
	250, 1028,
	251, 1028,
	252, 1028,
	254, 1028,
	255, 1028,
	256, 1028,
	258, 1028,
	259, 1028,
	260, 1028,
	261, 1028,
	264, 1028,
	265, 1028,
	267, 1028,
	269, 1028,
	270, 1028,
	271, 1028,
	272, 1028,
	273, 1028,
	274, 1028,
	275, 1028,
	276, 1028,
	277, 1028,
	279, 1028,
	280, 1028,
	281, 1028,
	282, 1028,
	283, 1028,
	284, 1028,
	286, 1028,
	288, 1028,
	289, 1028,
	290, 1028,
	291, 1028,
	292, 1028,
	293, 1028,
	294, 1028,
	295, 1028,
	296, 1028,
	298, 1028,
	299, 1028,
	300, 1028,
	301, 1028,
	302, 1028,
	304, 1028,
	305, 1028,
	306, 1028,
	307, 1028,
	308, 1028,
	309, 1028,
	310, 1028,
	311, 1028,
	313, 1028,
	315, 1028,
	316, 1028,
	317, 1028,
	318, 1028,
	319, 1028,
	320, 1028,
	322, 1028,
	323, 1028,
	324, 1028,
	325, 1028,
	326, 1028,
	327, 1028,
	328, 1028,
	329, 1028,
	331, 1028,
	332, 1028,
	333, 1028,
	334, 1028,
	335, 1028,
	336, 1028,
	337, 1028,
	338, 1028,
	339, 1028,
	340, 1028,
	342, 1028,
	343, 1028,
	344, 1028,
	345, 1028,
	347, 1028,
	348, 1028,
	349, 1028,
	350, 1028,
	352, 1028,
	353, 1028,
	354, 1028,
	355, 1028,
	356, 1028,
	357, 1028,
	358, 1028,
	359, 1028,
	360, 1028,
	361, 1028,
	362, 1028,
	363, 1028,
	365, 1028,
	366, 1028,
	367, 1028,
	369, 1028,
	370, 1028,
	371, 1028,
	372, 1028,
	373, 1028,
	374, 1028,
	375, 1028,
	376, 1028,
	377, 1028,
	379, 1028,
	380, 1028,
	381, 1028,
	382, 1028,
	384, 1028,
	386, 1028,
	387, 1028,
	388, 1028,
	389, 1028,
	390, 1028,
	392, 1028,
	393, 1028,
	394, 1028,
	396, 1028,
	397, 1028,
	400, 1028,
	401, 1028,
	402, 1028,
	403, 1028,
	404, 1028,
	405, 1028,
	407, 1028,
	409, 1028,
	410, 1028,
	411, 1028,
	412, 1028,
	413, 1028,
	414, 1028,
	415, 1028,
	417, 1028,
	418, 1028,
	419, 1028,
	424, 1028,
	425, 1028,
	426, 1028,
	427, 1028,
	428, 1028,
	429, 1028,
	-2, 0,
	-1, 118,
	1, 918,
	200, 918,
	286, 918,
	293, 918,
	432, 918,
	455, 918,
	-2, 0,
	-1, 120,
	1, 918,
	455, 918,
	-2, 0,
	-1, 121,
	1, 918,
	455, 918,
	-2, 0,
	-1, 122,
	1, 922,
	455, 922,
	-2, 0,
	-1, 146,
	119, 999,
	134, 999,
	193, 999,
	222, 999,
	253, 999,
	263, 999,
	398, 999,
	-2, 996,
	-1, 178,
	4, 1035,
	5, 1035,
	6, 1035,
	7, 1035,
	8, 1035,
	9, 1035,
	10, 1035,
	21, 1035,
	22, 1035,
	23, 1035,
	24, 1035,
	25, 1035,
	27, 1035,
	32, 1035,
	33, 1035,
	37, 1035,
	38, 1035,
	39, 1035,
	40, 1035,
	41, 1035,
	42, 1035,
	43, 1035,
	44, 1035,
	45, 1035,
	46, 1035,
	47, 1035,
	49, 1035,
	50, 1035,
	51, 1035,
	52, 1035,
	53, 1035,
	54, 1035,
	55, 1035,
	56, 1035,
	57, 1035,
	58, 1035,
	59, 1035,
	60, 1035,
	62, 1035,
	63, 1035,
	65, 1035,
	67, 1035,
	68, 1035,
	69, 1035,
	70, 1035,
	71, 1035,
	73, 1035,
	74, 1035,
	75, 1035,
	76, 1035,
	78, 1035,
	80, 1035,
	81, 1035,
	82, 1035,
	84, 1035,
	85, 1035,
	86, 1035,
	87, 1035,
	88, 1035,
	89, 1035,
	90, 1035,
	91, 1035,
	92, 1035,
	93, 1035,
	94, 1035,
	95, 1035,
	96, 1035,
	97, 1035,
	98, 1035,
	99, 1035,
	100, 1035,
	101, 1035,
	102, 1035,
	103, 1035,
	105, 1035,
	106, 1035,
	108, 1035,
	111, 1035,
	112, 1035,
	113, 1035,
	115, 1035,
	117, 1035,
	118, 1035,
	120, 1035,
	121, 1035,
	122, 1035,
	123, 1035,
	124, 1035,
	125, 1035,
	126, 1035,
	127, 1035,
	128, 1035,
	129, 1035,
	130, 1035,
	131, 1035,
	132, 1035,
	133, 1035,
	139, 1035,
	140, 1035,
	141, 1035,
	142, 1035,
	143, 1035,
	144, 1035,
	146, 1035,
	148, 1035,
	151, 1035,
	152, 1035,
	153, 1035,
	155, 1035,
	156, 1035,
	158, 1035,
	159, 1035,
	161, 1035,
	162, 1035,
	163, 1035,
	164, 1035,
	165, 1035,
	166, 1035,
	167, 1035,
	168, 1035,
	169, 1035,
	170, 1035,
	171, 1035,
	173, 1035,
	174, 1035,
	175, 1035,
	179, 1035,
	180, 1035,
	181, 1035,
	182, 1035,
	184, 1035,
	185, 1035,
	186, 1035,
	187, 1035,
	188, 1035,
	189, 1035,
	190, 1035,
	191, 1035,
	192, 1035,
	194, 1035,
	196, 1035,
	197, 1035,
	198, 1035,
	199, 1035,
	200, 1035,
	201, 1035,
	202, 1035,
	203, 1035,
	204, 1035,
	205, 1035,
	208, 1035,
	209, 1035,
	210, 1035,
	211, 1035,
	213, 1035,
	214, 1035,
	216, 1035,
	217, 1035,
	218, 1035,
	219, 1035,
	220, 1035,
	221, 1035,
	223, 1035,
	224, 1035,
	227, 1035,
	228, 1035,
	230, 1035,
	231, 1035,
	232, 1035,
	233, 1035,
	234, 1035,
	235, 1035,
	236, 1035,
	237, 1035,
	238, 1035,
	239, 1035,
	240, 1035,
	241, 1035,
	242, 1035,
	243, 1035,
	244, 1035,
	245, 1035,
	246, 1035,
	247, 1035,
	248, 1035,
	249, 1035,
	250, 1035,
	251, 1035,
	252, 1035,
	254, 1035,
	255, 1035,
	256, 1035,
	259, 1035,
	260, 1035,
	261, 1035,
	264, 1035,
	265, 1035,
	266, 1035,
	267, 1035,
	268, 1035,
	269, 1035,
	270, 1035,
	271, 1035,
	272, 1035,
	273, 1035,
	274, 1035,
	275, 1035,
	276, 1035,
	277, 1035,
	279, 1035,
	280, 1035,
	281, 1035,
	282, 1035,
	283, 1035,
	284, 1035,
	286, 1035,
	288, 1035,
	289, 1035,
	290, 1035,
	291, 1035,
	292, 1035,
	293, 1035,
	294, 1035,
	295, 1035,
	296, 1035,
	298, 1035,
	299, 1035,
	300, 1035,
	301, 1035,
	302, 1035,
	304, 1035,
	305, 1035,
	306, 1035,
	307, 1035,
	308, 1035,
	309, 1035,
	310, 1035,
	311, 1035,
	313, 1035,
	314, 1035,
	315, 1035,
	316, 1035,
	317, 1035,
	318, 1035,
	319, 1035,
	320, 1035,
	322, 1035,
	323, 1035,
	324, 1035,
	325, 1035,
	326, 1035,
	327, 1035,
	328, 1035,
	329, 1035,
	331, 1035,
	332, 1035,
	333, 1035,
	334, 1035,
	335, 1035,
	336, 1035,
	337, 1035,
	338, 1035,
	339, 1035,
	340, 1035,
	341, 1035,
	342, 1035,
	343, 1035,
	344, 1035,
	345, 1035,
	346, 1035,
	347, 1035,
	348, 1035,
	349, 1035,
	350, 1035,
	352, 1035,
	353, 1035,
	354, 1035,
	355, 1035,
	356, 1035,
	357, 1035,
	358, 1035,
	359, 1035,
	360, 1035,
	361, 1035,
	362, 1035,
	363, 1035,
	365, 1035,
	366, 1035,
	367, 1035,
	369, 1035,
	370, 1035,
	371, 1035,
	372, 1035,
	373, 1035,
	374, 1035,
	375, 1035,
	376, 1035,
	377, 1035,
	379, 1035,
	380, 1035,
	381, 1035,
	382, 1035,
	384, 1035,
	386, 1035,
	387, 1035,
	388, 1035,
	389, 1035,
	390, 1035,
	391, 1035,
	392, 1035,
	393, 1035,
	394, 1035,
	396, 1035,
	397, 1035,
	399, 1035,
	400, 1035,
	401, 1035,
	402, 1035,
	403, 1035,
	404, 1035,
	405, 1035,
	406, 1035,
	407, 1035,
	409, 1035,
	410, 1035,
	411, 1035,
	412, 1035,
	413, 1035,
	414, 1035,
	415, 1035,
	417, 1035,
	418, 1035,
	419, 1035,
	424, 1035,
	425, 1035,
	426, 1035,
	427, 1035,
	428, 1035,
	429, 1035,
	430, 1035,
	438, 1035,
	443, 1035,
	444, 1035,
	445, 1035,
	452, 1035,
	457, 1035,
	-2, 0,
	-1, 548,
	150, 1702,
	383, 1702,
	435, 1702,
	454, 1702,
	-2, 0,
	-1, 549,
	150, 1780,
	383, 1780,
	435, 1780,
	454, 1780,
	-2, 0,
	-1, 550,
	150, 1692,
	383, 1692,
	435, 1692,
	454, 1692,
	-2, 0,
	-1, 552,
	150, 1867,
	383, 1867,
	435, 1867,
	454, 1867,
	-2, 0,
	-1, 554,
	150, 1895,
	383, 1895,
	435, 1895,
	454, 1895,
	-2, 0,
	-1, 561,
	150, 1790,
	383, 1790,
	435, 1790,
	454, 1790,
	-2, 490,
	-1, 578,
	454, 1651,
	456, 1651,
	-2, 674,
	-1, 579,
	454, 1653,
	456, 1653,
	-2, 675,
	-1, 580,
	454, 1652,
	456, 1652,
	-2, 676,
	-1, 581,
	456, 1598,
	-2, 677,
	-1, 725,
	289, 612,
	340, 612,
	-2, 0,
	-1, 726,
	289, 611,
	340, 611,
	-2, 568,
	-1, 728,
	1, 635,
	451, 635,
	453, 635,
	455, 635,
	-2, 0,
	-1, 729,
	1, 673,
	147, 673,
	451, 673,
	453, 673,
	455, 673,
	-2, 0,
	-1, 738,
	1, 635,
	451, 635,
	453, 635,
	455, 635,
	-2, 0,
	-1, 739,
	1, 637,
	451, 637,
	453, 637,
	455, 637,
	-2, 0,
	-1, 740,
	1, 640,
	451, 640,
	453, 640,
	455, 640,
	-2, 0,
	-1, 744,
	1, 654,
	451, 654,
	453, 654,
	455, 654,
	-2, 0,
	-1, 745,
	1, 656,
	451, 656,
	453, 656,
	455, 656,
	-2, 0,
	-1, 790,
	134, 1037,
	222, 1037,
	253, 1037,
	-2, 996,
	-1, 805,
	134, 1036,
	222, 1036,
	253, 1036,
	-2, 996,
	-1, 829,
	454, 1650,
	-2, 498,
	-1, 858,
	452, 1642,
	-2, 1633,
	-1, 864,
	5, 1172,
	-2, 1683,
	-1, 865,
	5, 1173,
	-2, 1687,
	-1, 866,
	5, 1174,
	-2, 1686,
	-1, 867,
	5, 1175,
	-2, 1893,
	-1, 868,
	5, 1176,
	-2, 1792,
	-1, 869,
	5, 1177,
	-2, 1859,
	-1, 870,
	5, 1178,
	-2, 1861,
	-1, 871,
	5, 1179,
	-2, 1872,
	-1, 872,
	5, 1180,
	-2, 1862,
	-1, 873,
	5, 1181,
	-2, 1863,
	-1, 874,
	5, 1182,
	-2, 1682,
	-1, 875,
	5, 1183,
	-2, 1908,
	-1, 876,
	5, 1184,
	-2, 1755,
	-1, 877,
	5, 1185,
	-2, 1800,
	-1, 878,
	5, 1186,
	-2, 1802,
	-1, 879,
	5, 1187,
	-2, 1759,
	-1, 880,
	5, 1188,
	452, 1660,
	-2, 1651,
	-1, 881,
	5, 1244,
	452, 1244,
	-2, 1943,
	-1, 886,
	452, 1661,
	-2, 1652,
	-1, 888,
	5, 1192,
	-2, 1941,
	-1, 889,
	5, 1193,
	-2, 1942,
	-1, 890,
	5, 1194,
	-2, 1758,
	-1, 891,
	5, 1195,
	-2, 1954,
	-1, 892,
	5, 1196,
	-2, 1760,
	-1, 893,
	5, 1197,
	-2, 1761,
	-1, 894,
	5, 1198,
	-2, 1762,
	-1, 895,
	5, 1199,
	-2, 1923,
	-1, 896,
	5, 1200,
	-2, 1952,
	-1, 897,
	5, 1201,
	-2, 1738,
	-1, 898,
	5, 1202,
	-2, 1739,
	-1, 899,
	5, 1216,
	-2, 1935,
	-1, 901,
	5, 1191,
	-2, 1931,
	-1, 902,
	5, 1191,
	-2, 1930,
	-1, 903,
	5, 1191,
	-2, 1947,
	-1, 904,
	5, 1208,
	-2, 1925,
	-1, 905,
	5, 1209,
	-2, 1684,
	-1, 906,
	5, 1219,
	-2, 1924,
	-1, 907,
	5, 1221,
	-2, 1963,
	-1, 909,
	5, 1232,
	-2, 1712,
	-1, 910,
	5, 1243,
	-2, 1956,
	-1, 911,
	5, 1235,
	-2, 1957,
	-1, 912,
	5, 1243,
	-2, 1958,
	-1, 913,
	5, 1239,
	-2, 1959,
	-1, 914,
	5, 1159,
	-2, 1768,
	-1, 915,
	5, 1160,
	-2, 1769,
	-1, 916,
	454, 1648,
	-2, 1632,
	-1, 917,
	452, 1983,
	-2, 1649,
	-1, 937,
	5, 1227,
	-2, 1882,
	-1, 954,
	5, 1226,
	-2, 1964,
	-1, 964,
	5, 1228,
	418, 1228,
	-2, 1926,
	-1, 965,
	5, 1229,
	418, 1229,
	-2, 1927,
	-1, 1001,
	452, 1660,
	-2, 1651,
	-1, 1030,
	150, 1895,
	383, 1895,
	435, 1895,
	454, 1895,
	-2, 0,
	-1, 1031,
	1, 478,
	455, 478,
	-2, 930,
	-1, 1151,
	304, 1629,
	445, 1629,
	-2, 1628,
	-1, 1174,
	457, 1629,
	-2, 1630,
	-1, 1209,
	295, 705,
	417, 705,
	-2, 240,
	-1, 1229,
	275, 1024,
	-2, 838,
	-1, 1238,
	257, 1655,
	-2, 0,
	-1, 1302,
	1, 355,
	451, 355,
	453, 355,
	455, 355,
	-2, 998,
	-1, 1305,
	4, 1962,
	11, 1962,
	12, 1962,
	14, 1962,
	15, 1962,
	16, 1962,
	17, 1962,
	18, 1962,
	19, 1962,
	21, 1962,
	22, 1962,
	23, 1962,
	24, 1962,
	25, 1962,
	27, 1962,
	30, 1962,
	32, 1962,
	34, 1962,
	37, 1962,
	38, 1962,
	39, 1962,
	40, 1962,
	41, 1962,
	42, 1962,
	43, 1962,
	44, 1962,
	45, 1962,
	46, 1962,
	47, 1962,
	49, 1962,
	50, 1962,
	51, 1962,
	52, 1962,
	53, 1962,
	54, 1962,
	57, 1962,
	58, 1962,
	59, 1962,
	60, 1962,
	62, 1962,
	63, 1962,
	64, 1962,
	67, 1962,
	68, 1962,
	69, 1962,
	70, 1962,
	71, 1962,
	72, 1962,
	73, 1962,
	74, 1962,
	75, 1962,
	76, 1962,
	78, 1962,
	79, 1962,
	80, 1962,
	81, 1962,
	82, 1962,
	84, 1962,
	85, 1962,
	86, 1962,
	94, 1962,
	95, 1962,
	96, 1962,
	97, 1962,
	98, 1962,
	99, 1962,
	100, 1962,
	101, 1962,
	103, 1962,
	105, 1962,
	106, 1962,
	108, 1962,
	111, 1962,
	112, 1962,
	113, 1962,
	115, 1962,
	117, 1962,
	118, 1962,
	120, 1962,
	121, 1962,
	122, 1962,
	123, 1962,
	124, 1962,
	125, 1962,
	126, 1962,
	127, 1962,
	128, 1962,
	129, 1962,
	130, 1962,
	131, 1962,
	135, 1962,
	136, 1962,
	137, 1962,
	138, 1962,
	139, 1962,
	140, 1962,
	141, 1962,
	142, 1962,
	143, 1962,
	144, 1962,
	145, 1962,
	146, 1962,
	148, 1962,
	151, 1962,
	152, 1962,
	153, 1962,
	155, 1962,
	156, 1962,
	158, 1962,
	159, 1962,
	161, 1962,
	162, 1962,
	163, 1962,
	164, 1962,
	165, 1962,
	166, 1962,
	167, 1962,
	168, 1962,
	169, 1962,
	170, 1962,
	171, 1962,
	172, 1962,
	173, 1962,
	174, 1962,
	175, 1962,
	176, 1962,
	177, 1962,
	178, 1962,
	180, 1962,
	181, 1962,
	182, 1962,
	184, 1962,
	185, 1962,
	186, 1962,
	187, 1962,
	188, 1962,
	189, 1962,
	190, 1962,
	191, 1962,
	192, 1962,
	194, 1962,
	196, 1962,
	197, 1962,
	198, 1962,
	199, 1962,
	200, 1962,
	201, 1962,
	202, 1962,
	203, 1962,
	204, 1962,
	205, 1962,
	206, 1962,
	207, 1962,
	208, 1962,
	209, 1962,
	210, 1962,
	211, 1962,
	213, 1962,
	214, 1962,
	216, 1962,
	217, 1962,
	218, 1962,
	219, 1962,
	220, 1962,
	221, 1962,
	223, 1962,
	224, 1962,
	227, 1962,
	228, 1962,
	229, 1962,
	230, 1962,
	231, 1962,
	232, 1962,
	233, 1962,
	234, 1962,
	235, 1962,
	236, 1962,
	237, 1962,
	238, 1962,
	239, 1962,
	240, 1962,
	241, 1962,
	242, 1962,
	243, 1962,
	244, 1962,
	247, 1962,
	249, 1962,
	250, 1962,
	251, 1962,
	252, 1962,
	254, 1962,
	255, 1962,
	256, 1962,
	259, 1962,
	260, 1962,
	261, 1962,
	262, 1962,
	264, 1962,
	265, 1962,
	267, 1962,
	269, 1962,
	270, 1962,
	271, 1962,
	272, 1962,
	273, 1962,
	274, 1962,
	275, 1962,
	276, 1962,
	277, 1962,
	279, 1962,
	280, 1962,
	281, 1962,
	282, 1962,
	283, 1962,
	284, 1962,
	286, 1962,
	288, 1962,
	289, 1962,
	290, 1962,
	291, 1962,
	292, 1962,
	293, 1962,
	294, 1962,
	295, 1962,
	296, 1962,
	298, 1962,
	299, 1962,
	300, 1962,
	301, 1962,
	302, 1962,
	303, 1962,
	304, 1962,
	305, 1962,
	306, 1962,
	307, 1962,
	308, 1962,
	309, 1962,
	310, 1962,
	311, 1962,
	313, 1962,
	314, 1962,
	315, 1962,
	316, 1962,
	317, 1962,
	318, 1962,
	319, 1962,
	320, 1962,
	321, 1962,
	322, 1962,
	323, 1962,
	324, 1962,
	325, 1962,
	326, 1962,
	327, 1962,
	328, 1962,
	329, 1962,
	331, 1962,
	332, 1962,
	333, 1962,
	334, 1962,
	335, 1962,
	336, 1962,
	337, 1962,
	338, 1962,
	339, 1962,
	340, 1962,
	342, 1962,
	343, 1962,
	344, 1962,
	345, 1962,
	346, 1962,
	347, 1962,
	348, 1962,
	349, 1962,
	350, 1962,
	352, 1962,
	353, 1962,
	354, 1962,
	355, 1962,
	356, 1962,
	357, 1962,
	358, 1962,
	359, 1962,
	360, 1962,
	361, 1962,
	362, 1962,
	363, 1962,
	365, 1962,
	366, 1962,
	367, 1962,
	369, 1962,
	370, 1962,
	371, 1962,
	372, 1962,
	373, 1962,
	374, 1962,
	375, 1962,
	376, 1962,
	377, 1962,
	379, 1962,
	380, 1962,
	381, 1962,
	382, 1962,
	384, 1962,
	386, 1962,
	387, 1962,
	388, 1962,
	389, 1962,
	390, 1962,
	392, 1962,
	393, 1962,
	394, 1962,
	396, 1962,
	397, 1962,
	400, 1962,
	401, 1962,
	402, 1962,
	403, 1962,
	404, 1962,
	405, 1962,
	407, 1962,
	409, 1962,
	410, 1962,
	411, 1962,
	412, 1962,
	413, 1962,
	414, 1962,
	415, 1962,
	417, 1962,
	418, 1962,
	419, 1962,
	424, 1962,
	425, 1962,
	426, 1962,
	427, 1962,
	428, 1962,
	429, 1962,
	430, 1962,
	431, 1962,
	433, 1962,
	434, 1962,
	435, 1962,
	436, 1962,
	437, 1962,
	438, 1962,
	440, 1962,
	441, 1962,
	442, 1962,
	443, 1962,
	444, 1962,
	445, 1962,
	446, 1962,
	447, 1962,
	448, 1962,
	450, 1962,
	453, 1962,
	454, 1962,
	456, 1962,
	457, 1962,
	-2, 0,
	-1, 1308,
	150, 1867,
	383, 1867,
	435, 1867,
	454, 1867,
	-2, 0,
	-1, 1335,
	289, 612,
	340, 612,
	-2, 0,
	-1, 1356,
	1, 607,
	451, 607,
	453, 607,
	455, 607,
	-2, 0,
	-1, 1357,
	1, 626,
	451, 626,
	453, 626,
	455, 626,
	-2, 0,
	-1, 1358,
	1, 614,
	451, 614,
	453, 614,
	455, 614,
	-2, 0,
	-1, 1379,
	1, 1915,
	451, 1915,
	453, 1915,
	454, 1915,
	455, 1915,
	-2, 652,
	-1, 1380,
	1, 1865,
	451, 1865,
	453, 1865,
	454, 1865,
	455, 1865,
	-2, 653,
	-1, 1393,
	1, 925,
	455, 925,
	-2, 930,
	-1, 1398,
	134, 1036,
	222, 1036,
	253, 1036,
	-2, 996,
	-1, 1491,
	119, 1000,
	134, 1000,
	193, 1000,
	222, 1000,
	253, 1000,
	263, 1000,
	398, 1000,
	-2, 1400,
	-1, 1544,
	453, 1533,
	-2, 0,
	-1, 1586,
	119, 1000,
	134, 1000,
	193, 1000,
	222, 1000,
	253, 1000,
	263, 1000,
	398, 1000,
	-2, 1109,
	-1, 1641,
	452, 1231,
	-2, 1219,
	-1, 1680,
	1, 480,
	455, 480,
	-2, 930,
	-1, 1868,
	1, 609,
	451, 609,
	453, 609,
	455, 609,
	-2, 0,
	-1, 1869,
	1, 628,
	451, 628,
	453, 628,
	455, 628,
	-2, 0,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1280,
	-1, 1946,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1281,
	-1, 1947,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1282,
	-1, 1948,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1283,
	-1, 1949,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1284,
	-1, 1950,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1285,
	-1, 1951,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1286,
	-1, 1952,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1287,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1299,
	-1, 1965,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1300,
	-1, 1966,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1301,
	-1, 1969,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1306,
	-1, 1975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1310,
	-1, 1977,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1318,
	-1, 1978,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1319,
	-1, 1979,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1320,
	-1, 1980,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1321,
	-1, 2074,
	5, 1188,
	150, 1544,
	452, 1660,
	-2, 1651,
	-1, 2075,
	150, 1545,
	-2, 1919,
	-1, 2076,
	150, 1546,
	-2, 1789,
	-1, 2077,
	150, 1547,
	-2, 1713,
	-1, 2078,
	150, 1548,
	-2, 1749,
	-1, 2079,
	150, 1549,
	-2, 1787,
	-1, 2080,
	150, 1550,
	-2, 1858,
	-1, 2156,
	1, 1110,
	84, 1110,
	119, 1110,
	134, 1110,
	147, 1110,
	151, 1110,
	157, 1110,
	160, 1110,
	184, 1110,
	193, 1110,
	203, 1110,
	218, 1110,
	222, 1110,
	240, 1110,
	253, 1110,
	257, 1110,
	263, 1110,
	312, 1110,
	314, 1110,
	398, 1110,
	408, 1110,
	421, 1110,
	422, 1110,
	423, 1110,
	432, 1110,
	451, 1110,
	453, 1110,
	455, 1110,
	456, 1110,
	-2, 1109,
	-1, 2161,
	452, 1634,
	-2, 1646,
	-1, 2183,
	452, 1230,
	-2, 1220,
	-1, 2410,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1308,
	-1, 2411,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1312,
	-1, 2417,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1314,
	-1, 2598,
	200, 930,
	286, 930,
	293, 930,
	432, 930,
	-2, 477,
	-1, 2688,
	275, 1024,
	-2, 838,
	-1, 2765,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1316,
	-1, 2772,
	197, 0,
	199, 0,
	247, 0,
	-2, 1335,
	-1, 2835,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1364,
	-1, 2836,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1365,
	-1, 2837,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1366,
	-1, 2841,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1370,
	-1, 2842,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1371,
	-1, 2843,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1372,
	-1, 2886,
	452, 1635,
	-2, 1647,
	-1, 2974,
	454, 2065,
	-2, 973,
	-1, 3018,
	197, 0,
	199, 0,
	247, 0,
	-2, 1336,
	-1, 3021,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1339,
	-1, 3022,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1341,
	-1, 3176,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1340,
	-1, 3177,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1342,
	-1, 3187,
	197, 0,
	-2, 1373,
	-1, 3289,
	197, 0,
	-2, 1374,
	-1, 3405,
	41, 0,
	169, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1922,
}

const sqlPrivate = 57344

const sqlLast = 71599

var sqlAct = [...]int{

	886, 3217, 3491, 3242, 3404, 3414, 3121, 3481, 3220, 2313,
	2675, 3374, 3383, 3371, 2105, 3358, 3415, 2322, 3416, 3249,
	3004, 1002, 2803, 3206, 3293, 3403, 2907, 2314, 815, 3145,
	208, 3167, 2965, 2960, 2704, 3254, 1932, 1037, 3080, 210,
	1992, 210, 210, 2671, 1155, 210, 210, 210, 210, 210,
	2615, 2970, 210, 2697, 1611, 2148, 1406, 2947, 2699, 559,
	580, 2908, 2354, 1581, 3191, 806, 1848, 2403, 1056, 2310,
	1612, 2356, 1148, 2287, 994, 2290, 2546, 2285, 210, 2147,
	2573, 1489, 580, 2519, 3003, 2559, 1290, 676, 1827, 2353,
	2364, 2345, 1180, 1806, 2535, 1579, 1809, 2323, 2347, 2212,
	1553, 1799, 2438, 1734, 1798, 2214, 2144, 4, 3052, 2858,
	1499, 2518, 3294, 1340, 1929, 2005, 2149, 1589, 2271, 1925,
	2399, 814, 139, 1167, 1752, 2288, 1725, 1294, 882, 2363,
	1044, 2043, 1517, 1759, 1712, 2151, 1710, 2123, 2023, 32,
	1393, 86, 3243, 2578, 2035, 1554, 2246, 1989, 2247, 1164,
	1303, 2673, 803, 2102, 2316, 1287, 1223, 1795, 2204, 1157,
	2017, 1277, 2357, 527, 1033, 1512, 989, 2131, 581, 2113,
	968, 2006, 885, 210, 210, 1563, 511, 2070, 1480, 204,
	829, 535, 203, 582, 671, 1407, 986, 146, 1405, 543,
	576, 1794, 1815, 553, 1253, 1301, 652, 202, 139, 621,
	1724, 1177, 842, 147, 530, 966, 1392, 991, 735, 720,
	538, 1235, 37, 1411, 36, 34, 2875, 26, 24, 2876,
	22, 2434, 1829, 1849, 2491, 2492, 3519, 2020, 2319, 2122,
	1829, 1829, 1041, 2266, 3510, 3509, 2315, 2122, 2122, 585,
	3490, 3477, 588, 1766, 3094, 1041, 3475, 1580, 2233, 3094,
	805, 3438, 3436, 2760, 3439, 2122, 1841, 3434, 178, 3431,
	2122, 585, 3432, 3428, 588, 810, 3429, 1419, 1420, 2861,
	2122, 2713, 686, 1462, 1463, 1464, 3425, 843, 3401, 1766,
	3400, 1766, 3399, 1766, 2172, 1841, 3396, 1419, 1420, 1841,
	811, 3395, 2021, 1422, 1841, 2714, 180, 1468, 983, 3353,
	3343, 3342, 2176, 3094, 3094, 2596, 810, 3336, 969, 969,
	1766, 3330, 3328, 1422, 3094, 3094, 3291, 1766, 3275, 2176,
	1421, 1766, 3272, 3234, 1762, 3094, 1766, 791, 1441, 3233,
	3226, 3225, 1766, 1766, 3094, 3197, 858, 2115, 1766, 3178,
	1421, 179, 2176, 790, 3354, 2453, 1020, 178, 1441, 819,
	2454, 172, 884, 997, 3157, 798, 1015, 2726, 2497, 173,
	972, 973, 178, 2022, 2019, 3118, 3111, 3093, 2122, 2122,
	3094, 3020, 2982, 2976, 2176, 2742, 2742, 3277, 2945, 970,
	148, 2946, 1841, 2881, 1198, 180, 2882, 2871, 2861, 2114,
	2872, 1444, 1445, 1446, 1447, 2864, 3112, 1766, 2122, 672,
	180, 1427, 2796, 2784, 2741, 1766, 2122, 2742, 2734, 2261,
	2203, 1444, 1445, 1446, 1447, 2733, 2532, 2530, 2734, 2122,
	2122, 1427, 1683, 2726, 58, 1459, 674, 2297, 1469, 1016,
	179, 2402, 1449, 1450, 1451, 840, 59, 1765, 2529, 2201,
	172, 2122, 2507, 1549, 2483, 179, 1186, 2122, 173, 1176,
	63, 2142, 1449, 1450, 1451, 172, 178, 2024, 2122, 2466,
	2141, 2455, 2467, 173, 2122, 2343, 1192, 2189, 1845, 148,
	2122, 2140, 3069, 2175, 1419, 1420, 2176, 1457, 1830, 2169,
	69, 1342, 2122, 2139, 148, 1442, 1830, 1830, 2163, 2121,
	1844, 1766, 2122, 1845, 180, 2715, 58, 2138, 3031, 2437,
	1422, 974, 1419, 1420, 971, 1442, 797, 796, 59, 1703,
	75, 795, 2384, 813, 2716, 2879, 210, 1000, 1490, 85,
	794, 793, 63, 178, 76, 210, 789, 1421, 1422, 788,
	787, 786, 785, 996, 2508, 784, 783, 782, 781, 179,
	780, 2491, 2492, 779, 778, 718, 210, 1197, 717, 172,
	2491, 2492, 69, 210, 716, 1421, 2018, 173, 715, 1448,
	714, 180, 713, 712, 711, 710, 709, 708, 77, 210,
	1059, 210, 210, 1160, 210, 1059, 210, 1443, 2318, 1448,
	2181, 2743, 75, 2576, 210, 210, 1043, 707, 829, 706,
	1048, 85, 829, 705, 704, 703, 76, 1443, 702, 701,
	1143, 2713, 1460, 700, 699, 1143, 179, 698, 1427, 210,
	2460, 1016, 1013, 697, 696, 695, 998, 694, 693, 685,
	684, 643, 642, 210, 1837, 1160, 1160, 210, 210, 1191,
	210, 1490, 1828, 1905, 601, 600, 1427, 76, 599, 591,
	77, 590, 210, 2114, 589, 148, 566, 565, 2449, 1057,
	210, 2275, 1016, 564, 1168, 2501, 2493, 2494, 2495, 2496,
	2498, 2499, 1170, 563, 210, 210, 210, 210, 210, 1160,
	1160, 547, 200, 78, 1160, 2497, 210, 1160, 210, 210,
	199, 198, 197, 196, 2497, 195, 1458, 2491, 2492, 194,
	2509, 2510, 2511, 193, 1461, 1031, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 145, 81, 192, 82, 2491,
	2492, 2303, 178, 191, 190, 189, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 1160, 188, 178, 2174, 187,
	186, 1582, 185, 184, 1185, 183, 1190, 182, 1196, 675,
	181, 1520, 116, 2164, 210, 78, 1028, 1519, 2506, 2155,
	180, 1708, 1179, 1418, 3421, 1052, 2061, 1145, 1150, 2507,
	210, 2059, 1596, 585, 1851, 180, 588, 1178, 1523, 1151,
	2506, 1506, 1182, 1174, 178, 210, 1050, 145, 81, 1240,
	82, 1520, 1306, 1419, 1420, 2057, 2055, 1519, 1004, 117,
	2053, 2491, 2492, 3402, 178, 179, 139, 1298, 3324, 178,
	3284, 3216, 149, 3158, 3280, 172, 3073, 3051, 1518, 1422,
	179, 675, 180, 173, 116, 811, 3278, 1291, 3050, 3038,
	172, 2497, 1314, 1501, 1236, 1236, 1281, 1284, 173, 1317,
	3037, 1850, 180, 1304, 148, 3153, 1421, 180, 3036, 1237,
	178, 178, 3035, 2497, 3029, 3028, 1419, 1420, 2513, 673,
	1771, 2508, 1363, 3027, 2944, 116, 1399, 179, 2896, 2895,
	2893, 117, 2885, 2855, 1174, 2854, 2853, 172, 2780, 2491,
	2492, 2776, 1422, 2512, 149, 173, 2737, 179, 180, 180,
	2571, 2526, 179, 2517, 2490, 2304, 2487, 172, 2486, 2484,
	2473, 2472, 172, 1398, 2471, 173, 148, 1803, 2468, 1421,
	173, 2465, 2443, 2442, 2435, 2507, 1423, 1424, 1425, 1426,
	1428, 1429, 2344, 2156, 2028, 1418, 148, 1427, 1488, 982,
	1417, 148, 1769, 179, 179, 2497, 1501, 2507, 3517, 3489,
	3488, 1322, 3437, 172, 172, 1336, 1425, 1426, 1428, 1429,
	1003, 173, 173, 1397, 1704, 2248, 1391, 2805, 1449, 1450,
	1451, 3391, 3389, 2398, 1502, 3321, 1500, 3318, 1404, 3315,
	3314, 3313, 148, 148, 1396, 3309, 3303, 3276, 210, 3271,
	3270, 1995, 1394, 2493, 2494, 2495, 2496, 2498, 2499, 3212,
	1427, 3189, 2493, 2494, 2495, 2496, 2498, 2499, 3163, 3162,
	3143, 1551, 811, 3140, 210, 3134, 1560, 2508, 3068, 3049,
	2996, 1442, 791, 2497, 210, 1059, 210, 210, 210, 1400,
	2993, 1449, 1450, 1451, 1160, 580, 210, 210, 790, 2508,
	580, 210, 1414, 1415, 2923, 1605, 210, 2922, 2911, 2910,
	3152, 2867, 2771, 2727, 2691, 1143, 2661, 2640, 2618, 2617,
	2592, 2531, 1678, 2464, 2463, 1522, 2302, 2448, 2426, 2284,
	2590, 1059, 2491, 2492, 1524, 1590, 1521, 1513, 1510, 2001,
	2185, 2184, 2159, 2136, 1442, 2120, 2051, 1570, 1514, 1515,
	1484, 1853, 1595, 1706, 1552, 829, 2552, 1557, 1558, 1548,
	1547, 1143, 1546, 1545, 1599, 1677, 1544, 2507, 1543, 1542,
	1541, 1540, 1538, 1443, 1537, 1536, 1598, 1535, 1534, 1533,
	1532, 1419, 1420, 969, 1531, 1530, 1529, 139, 1608, 2503,
	2504, 2505, 1528, 1675, 1527, 1526, 2502, 2500, 2501, 2493,
	2494, 2495, 2496, 2498, 2499, 1575, 1503, 1422, 2178, 1485,
	1709, 1483, 811, 1852, 1478, 1027, 1602, 1018, 2502, 2500,
	2501, 2493, 2494, 2495, 2496, 2498, 2499, 1010, 825, 2618,
	3296, 3139, 3070, 3024, 1421, 1600, 1443, 1587, 2892, 2874,
	2870, 997, 2452, 997, 2137, 3201, 3072, 2491, 2492, 2891,
	1502, 1680, 2588, 1550, 1481, 1045, 1160, 210, 1591, 2508,
	1047, 2643, 1533, 1059, 3316, 1703, 2497, 1703, 2700, 1041,
	3156, 1702, 2088, 3113, 585, 1718, 1584, 588, 1578, 585,
	1577, 1576, 588, 1574, 1573, 1607, 1572, 2060, 2877, 2729,
	1674, 2728, 2058, 1143, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 1609, 210, 210, 1703, 2495, 2496, 2498, 2499, 210,
	3281, 1681, 1046, 1419, 1420, 1582, 2056, 2054, 2955, 210,
	1038, 2052, 3279, 2470, 3255, 1695, 1729, 1041, 210, 1032,
	210, 3215, 210, 1389, 1533, 1520, 210, 1335, 2469, 1422,
	2408, 1519, 1767, 2235, 1689, 2250, 1042, 2921, 210, 2677,
	2507, 2676, 776, 1364, 1733, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 1694, 1693, 1421, 1341, 1703, 1700,
	1508, 1749, 1041, 1849, 1751, 1787, 1618, 1756, 2502, 2500,
	2501, 2493, 2494, 2495, 2496, 2498, 2499, 3250, 1160, 210,
	1160, 777, 1342, 1760, 1800, 1804, 1160, 2936, 2925, 210,
	1699, 210, 210, 2746, 2655, 1000, 1039, 1000, 1747, 3192,
	3492, 1160, 1160, 1040, 210, 2315, 2807, 3422, 2036, 210,
	2183, 996, 1812, 996, 1603, 1179, 580, 210, 2458, 210,
	1539, 210, 1821, 210, 1516, 210, 585, 2669, 908, 588,
	1178, 1791, 2508, 210, 1213, 1487, 210, 1427, 210, 981,
	1832, 1755, 3433, 1834, 3430, 2020, 1836, 210, 1764, 2709,
	1839, 2903, 1697, 3368, 1326, 2961, 2351, 3464, 3463, 638,
	1713, 1819, 3335, 1864, 1714, 3423, 210, 3104, 1449, 1450,
	1451, 1201, 210, 2190, 2600, 1211, 2216, 1781, 1047, 1780,
	772, 770, 3514, 3241, 3236, 768, 2938, 766, 763, 754,
	1790, 1362, 1059, 1894, 998, 1892, 998, 1361, 2207, 1038,
	2207, 2934, 809, 1690, 2933, 2900, 2899, 2447, 2446, 2205,
	2021, 2205, 1814, 1854, 1817, 1735, 2445, 1038, 2444, 811,
	2412, 1442, 1143, 2268, 2260, 2257, 1047, 2238, 2171, 1976,
	1046, 1909, 1395, 1739, 1912, 1175, 2602, 1304, 639, 2311,
	1856, 2047, 1041, 2046, 1644, 1934, 1212, 2747, 1265, 1904,
	1715, 2642, 2500, 2501, 2493, 2494, 2495, 2496, 2498, 2499,
	1930, 1931, 1717, 2589, 2219, 1726, 1008, 2387, 1987, 2007,
	2008, 1933, 1028, 1846, 1698, 1736, 808, 1059, 1046, 1903,
	1855, 2022, 2019, 1360, 1246, 1039, 1245, 2007, 2033, 760,
	1860, 1985, 1040, 1722, 1244, 585, 1243, 2197, 588, 1324,
	841, 1207, 3173, 1039, 1319, 1224, 1877, 1143, 1429, 1991,
	1040, 2162, 1991, 1443, 3222, 2179, 1727, 1728, 1719, 3334,
	210, 1907, 3100, 2069, 2237, 2073, 2073, 2086, 1910, 2007,
	1007, 1374, 2106, 2108, 1779, 633, 2226, 2112, 3419, 1902,
	3393, 1222, 1999, 1723, 1973, 1402, 810, 1997, 2225, 1818,
	2390, 1059, 210, 2749, 1740, 1906, 2037, 2913, 1908, 1867,
	1005, 210, 1911, 3484, 210, 2748, 2381, 1059, 1334, 791,
	2254, 2024, 791, 791, 2499, 2024, 1026, 2787, 1221, 2790,
	2160, 1143, 2168, 2032, 3455, 1921, 1591, 2706, 1922, 1923,
	1704, 2248, 1704, 2248, 1337, 811, 1981, 1143, 1320, 2423,
	2218, 1209, 1868, 2707, 1982, 2652, 632, 1983, 811, 691,
	1988, 1720, 811, 2143, 1741, 1742, 2157, 2153, 2154, 1356,
	2045, 2647, 2421, 1737, 2036, 2049, 2050, 670, 2003, 1704,
	2248, 1041, 1746, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 2636, 523, 2170, 2030, 2389, 2161, 210, 2788, 1041,
	1388, 1738, 2128, 1869, 3463, 969, 641, 640, 2706, 1359,
	3420, 567, 2386, 3310, 1342, 3098, 518, 1618, 1618, 1731,
	1357, 2127, 1971, 2024, 2018, 1974, 2400, 2401, 1342, 1059,
	1511, 807, 809, 1224, 210, 1729, 2097, 3504, 2173, 2081,
	2110, 3172, 210, 1704, 1701, 1713, 1720, 2118, 2119, 1714,
	811, 2599, 139, 210, 2601, 2133, 2134, 997, 2586, 1143,
	804, 2129, 2935, 2236, 2217, 2924, 210, 2206, 2299, 1160,
	2258, 1264, 1829, 1720, 1970, 1587, 2664, 2418, 1901, 1371,
	1920, 997, 210, 1059, 3418, 1743, 210, 210, 2419, 2388,
	1713, 2424, 2024, 3005, 1714, 3351, 2208, 3470, 1716, 2180,
	1984, 3482, 631, 1729, 630, 573, 808, 3091, 2202, 1986,
	1325, 774, 210, 1143, 210, 773, 764, 210, 3183, 1522,
	764, 2272, 765, 764, 1206, 2027, 2241, 1893, 2188, 1891,
	3130, 3099, 210, 634, 3088, 1715, 2914, 2630, 2255, 210,
	3379, 210, 3454, 210, 3223, 1514, 1515, 1717, 3320, 210,
	1744, 1477, 210, 2462, 210, 2132, 210, 2240, 210, 210,
	2187, 210, 1160, 1160, 1160, 1372, 1160, 2191, 2269, 3483,
	210, 210, 2152, 210, 210, 3089, 810, 810, 2629, 3138,
	1715, 210, 1006, 3169, 2232, 3008, 3000, 2414, 575, 2270,
	1990, 2888, 1717, 2220, 2222, 210, 2211, 210, 1021, 1972,
	210, 3485, 210, 1719, 210, 761, 2294, 2249, 2251, 2252,
	2253, 749, 2367, 2089, 2272, 2265, 2272, 1998, 1344, 3417,
	1321, 1000, 210, 210, 210, 2308, 210, 3349, 2228, 692,
	2277, 2420, 2279, 802, 3462, 1373, 1401, 996, 2326, 2239,
	2422, 2366, 2368, 3460, 2335, 1000, 3260, 2949, 1719, 210,
	2193, 1866, 2256, 2844, 1179, 3142, 3350, 2282, 2350, 1333,
	2695, 996, 2195, 1151, 1750, 585, 1410, 1025, 588, 2273,
	519, 2306, 2341, 2365, 2298, 2317, 2328, 2317, 3453, 1174,
	1793, 1559, 3131, 569, 1019, 3168, 139, 2376, 1014, 2377,
	2339, 2340, 2321, 3505, 2196, 2369, 1720, 2370, 510, 3006,
	574, 1730, 1720, 750, 1409, 2375, 1691, 2194, 3228, 2392,
	2337, 807, 3047, 2332, 2336, 2333, 2342, 2334, 3084, 1493,
	998, 3085, 520, 1498, 2352, 1304, 2605, 916, 1830, 2385,
	3227, 1562, 1758, 1618, 1566, 2415, 3499, 3210, 3300, 2902,
	571, 1720, 2632, 2696, 998, 2579, 2440, 2441, 210, 2378,
	1688, 2379, 1757, 2380, 2613, 1174, 1174, 2609, 3087, 1477,
	521, 2450, 522, 2307, 3322, 2634, 206, 1569, 513, 514,
	3090, 1711, 531, 513, 531, 541, 546, 568, 2289, 562,
	1753, 2395, 2286, 3170, 1813, 2397, 2130, 206, 1802, 2845,
	2561, 1801, 1408, 1775, 2436, 2846, 1917, 2786, 1566, 3103,
	1898, 1567, 3359, 1727, 1728, 680, 3102, 1409, 2966, 206,
	2633, 1684, 2394, 2124, 3146, 572, 1686, 2283, 3248, 1267,
	1174, 3246, 3211, 1410, 2869, 2620, 570, 2619, 2406, 1861,
	1754, 1569, 1687, 1716, 2545, 2544, 2167, 1059, 1358, 2528,
	2451, 2413, 2166, 2533, 1238, 2165, 751, 690, 2540, 2541,
	1564, 1562, 1252, 2296, 3048, 2542, 210, 811, 3305, 808,
	1250, 1239, 2562, 683, 210, 1567, 3122, 1143, 525, 592,
	2242, 210, 3086, 1345, 210, 210, 1059, 3218, 1716, 2126,
	2738, 1811, 3498, 2666, 2125, 1059, 3467, 1565, 1323, 3244,
	749, 3053, 210, 2566, 2859, 1408, 1918, 1568, 3362, 2457,
	513, 513, 2041, 2560, 2548, 2521, 1143, 210, 206, 1386,
	3469, 3323, 802, 3435, 3317, 1143, 2539, 1368, 1566, 2556,
	3188, 2555, 1366, 2564, 3046, 210, 210, 210, 3208, 2567,
	2568, 210, 3306, 2940, 210, 2520, 1355, 2597, 2554, 829,
	2570, 210, 210, 210, 210, 210, 2575, 2557, 752, 3101,
	2603, 1569, 829, 2537, 2574, 2569, 3219, 210, 210, 210,
	3209, 1568, 2770, 3363, 2577, 1353, 210, 2587, 2550, 2583,
	1564, 1351, 2551, 2523, 2524, 2525, 2485, 804, 210, 1160,
	2534, 210, 750, 2425, 2584, 1567, 753, 2549, 2580, 1059,
	2293, 1349, 2622, 2610, 2626, 2627, 1059, 3307, 2563, 2595,
	1347, 210, 1339, 2614, 210, 210, 2565, 1565, 997, 2243,
	2244, 1248, 2267, 2234, 210, 2186, 2383, 1160, 210, 1143,
	1160, 1160, 1160, 997, 2606, 2607, 1143, 210, 1597, 1594,
	2581, 2582, 2680, 210, 2646, 1387, 2593, 2594, 1315, 210,
	2621, 210, 2624, 2382, 2645, 1251, 688, 689, 210, 1890,
	2653, 2598, 997, 1249, 2040, 2547, 2372, 1385, 2604, 2089,
	2089, 524, 681, 682, 1900, 1367, 1718, 3117, 593, 594,
	1365, 1160, 1160, 1874, 1676, 2577, 2711, 1525, 1318, 210,
	210, 1568, 2684, 210, 1354, 2635, 2641, 1228, 3413, 2637,
	2638, 1718, 3110, 2639, 2648, 2662, 762, 1643, 3356, 2702,
	3077, 2651, 2964, 2919, 2674, 210, 2917, 1059, 210, 210,
	1059, 210, 2240, 1352, 2663, 2657, 2901, 2649, 2798, 1350,
	2698, 2650, 2658, 2659, 1760, 751, 2660, 210, 2694, 3264,
	2656, 2725, 1760, 2679, 2678, 2312, 2301, 1143, 2365, 1348,
	1143, 2719, 2720, 2721, 2300, 2722, 2723, 2365, 1346, 2280,
	1338, 1843, 1842, 1840, 2744, 1174, 596, 595, 1838, 1247,
	2089, 2089, 2089, 1835, 1833, 1831, 1822, 1412, 2708, 1772,
	1059, 2724, 1000, 2736, 1618, 1790, 2710, 2717, 2754, 2740,
	811, 1059, 2701, 210, 1770, 139, 1168, 1000, 996, 1057,
	1761, 1748, 1745, 1732, 1889, 1721, 2404, 2755, 1604, 3464,
	1143, 2773, 3385, 996, 3165, 3160, 597, 598, 3159, 978,
	1618, 1143, 1707, 1203, 3266, 2224, 1000, 767, 769, 2975,
	2207, 1729, 1870, 2207, 2207, 2782, 2783, 752, 1383, 1384,
	2751, 2205, 996, 979, 2223, 2221, 1872, 2756, 3312, 1419,
	1420, 3286, 2758, 1011, 3054, 2245, 2227, 1416, 2264, 2795,
	1413, 2262, 680, 526, 2229, 3355, 3480, 2752, 3325, 2263,
	2801, 2231, 2856, 2953, 2948, 753, 1930, 2814, 2405, 1615,
	2778, 998, 2230, 1022, 2884, 2320, 210, 2111, 1679, 1610,
	562, 1297, 1930, 2824, 2585, 2797, 998, 2808, 1419, 1420,
	3497, 210, 1421, 2272, 3327, 2804, 206, 1059, 206, 206,
	537, 1165, 1603, 206, 2789, 2791, 2792, 2878, 1174, 1490,
	2813, 206, 1181, 2852, 1422, 998, 980, 210, 2044, 2809,
	2821, 2810, 2848, 2491, 2492, 2811, 2823, 1143, 1419, 1420,
	2890, 2873, 2199, 2198, 1328, 2793, 1205, 2199, 2591, 2200,
	1327, 1421, 2048, 2042, 2015, 1370, 2000, 3025, 1369, 2889,
	1227, 2849, 2785, 1488, 206, 206, 1486, 1165, 3506, 2857,
	3297, 3202, 3200, 210, 3133, 1493, 3071, 2999, 2992, 206,
	2862, 2863, 2981, 139, 2860, 2926, 2886, 1263, 2959, 2943,
	2942, 2941, 2865, 2866, 2916, 2718, 2692, 2690, 2374, 2373,
	2330, 206, 206, 206, 206, 1165, 2937, 2305, 210, 210,
	210, 2281, 2002, 562, 1888, 206, 206, 2880, 1887, 2897,
	1886, 1825, 2093, 1824, 1823, 1059, 210, 1805, 1783, 1782,
	1160, 1778, 2930, 1777, 1618, 1776, 1774, 1773, 1403, 1382,
	1381, 1276, 1275, 2918, 210, 2920, 1274, 997, 997, 2956,
	1273, 2905, 2977, 2887, 2894, 1143, 1272, 210, 210, 1160,
	1160, 1160, 2939, 210, 210, 210, 1271, 1270, 210, 210,
	2972, 1269, 210, 210, 2968, 2614, 1268, 1266, 210, 1261,
	1260, 206, 2952, 1618, 1618, 2240, 1259, 2967, 1258, 2971,
	1257, 1059, 1220, 2089, 2089, 2957, 1219, 206, 1218, 1618,
	1618, 2931, 2932, 1217, 1216, 1215, 1214, 1208, 1643, 1643,
	1202, 1200, 546, 1199, 1024, 1023, 953, 863, 1682, 775,
	625, 1143, 3023, 2958, 759, 3221, 1376, 74, 2988, 1210,
	1618, 2962, 612, 2969, 68, 2915, 210, 2973, 3367, 2979,
	747, 2978, 2628, 2326, 1873, 1343, 1875, 2553, 2135, 2984,
	2989, 2990, 3348, 3032, 2991, 2983, 3019, 3010, 2461, 2997,
	3292, 2994, 2537, 2998, 3182, 2995, 2039, 1507, 70, 851,
	3007, 936, 2365, 2089, 2089, 2089, 2089, 2089, 2089, 2089,
	2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089,
	2089, 2089, 3129, 2089, 3002, 3128, 3078, 3011, 210, 2904,
	2355, 3126, 3125, 818, 1062, 1692, 857, 1790, 1059, 1705,
	1059, 1000, 1000, 2182, 2072, 1614, 860, 997, 1616, 862,
	861, 1617, 1509, 859, 1613, 2295, 2324, 996, 996, 1255,
	210, 210, 210, 736, 737, 3045, 1696, 1996, 1143, 2034,
	1143, 2456, 210, 1504, 831, 853, 2031, 1017, 210, 830,
	210, 2558, 2705, 210, 210, 210, 2883, 3151, 1916, 2396,
	1913, 628, 2488, 2016, 210, 210, 1160, 3096, 1009, 1059,
	2094, 1160, 2087, 3058, 2083, 1390, 1479, 210, 2325, 1049,
	1615, 1615, 1618, 834, 3062, 1994, 1495, 2574, 2430, 3066,
	3059, 3063, 210, 3067, 3076, 1059, 3061, 2572, 1160, 1143,
	3106, 3056, 3057, 2712, 2177, 513, 3382, 3095, 1924, 3055,
	998, 998, 1792, 977, 3064, 976, 975, 3060, 3373, 3370,
	2672, 1685, 2192, 1471, 2681, 1143, 206, 210, 206, 3074,
	3075, 206, 847, 1173, 3097, 3150, 1059, 3115, 2538, 3114,
	2739, 1181, 3148, 1165, 206, 3107, 3108, 3105, 3124, 1225,
	3161, 3311, 206, 1181, 531, 3147, 3136, 206, 1181, 3135,
	1470, 771, 1059, 562, 997, 3302, 1143, 1036, 1035, 3149,
	1034, 2612, 997, 3155, 3503, 3119, 3123, 2912, 177, 1618,
	174, 1000, 176, 175, 2928, 997, 2665, 90, 35, 17,
	115, 114, 1143, 113, 112, 111, 110, 996, 3120, 3194,
	1059, 3144, 109, 1561, 3171, 108, 107, 106, 210, 3174,
	210, 105, 1059, 210, 104, 1057, 103, 102, 3132, 3164,
	101, 210, 3179, 3137, 1643, 100, 99, 98, 97, 96,
	1143, 95, 94, 93, 3190, 92, 91, 558, 555, 50,
	49, 3180, 1143, 210, 89, 88, 3154, 16, 3205, 33,
	14, 3195, 3196, 54, 55, 3198, 13, 29, 30, 80,
	3204, 210, 1790, 79, 1153, 210, 28, 15, 2093, 2093,
	3203, 27, 3239, 210, 829, 25, 3252, 3199, 1160, 3180,
	998, 11, 8, 210, 3247, 7, 3224, 10, 1571, 12,
	144, 1933, 143, 73, 142, 72, 141, 3257, 140, 71,
	3259, 23, 3237, 210, 210, 3230, 3256, 9, 3251, 136,
	3253, 3245, 2427, 2428, 206, 2954, 1229, 1232, 67, 3273,
	3274, 138, 3262, 210, 3231, 3232, 137, 3268, 1000, 210,
	64, 135, 134, 3263, 65, 3261, 1000, 3267, 133, 210,
	132, 66, 2971, 131, 996, 21, 5, 53, 6, 1000,
	3166, 2745, 996, 817, 83, 3269, 84, 3308, 31, 206,
	206, 62, 3299, 61, 2674, 996, 206, 60, 1310, 2093,
	2093, 2093, 20, 3298, 3290, 3265, 1810, 52, 3285, 19,
	168, 167, 166, 3319, 3295, 206, 165, 206, 160, 206,
	3283, 210, 1160, 513, 159, 164, 1615, 210, 162, 161,
	163, 1160, 1160, 158, 130, 1826, 170, 1160, 169, 156,
	210, 3341, 210, 2514, 2515, 2516, 1329, 152, 151, 3326,
	155, 3256, 3329, 157, 154, 153, 3333, 998, 150, 171,
	129, 3352, 3338, 57, 210, 998, 3332, 128, 127, 3345,
	210, 210, 3364, 1059, 126, 125, 562, 3337, 998, 124,
	56, 210, 210, 18, 2, 1, 206, 1618, 1165, 206,
	3376, 3386, 0, 3380, 3372, 3375, 0, 3388, 0, 3390,
	0, 562, 0, 1143, 0, 3377, 206, 829, 3397, 3369,
	0, 3398, 0, 206, 206, 210, 206, 0, 206, 0,
	206, 0, 206, 3392, 3394, 0, 3424, 0, 0, 0,
	1895, 1174, 3346, 1896, 3347, 1897, 3409, 3410, 3412, 3411,
	0, 0, 1618, 0, 206, 0, 0, 0, 3426, 800,
	3440, 749, 1933, 0, 210, 3442, 2089, 3444, 3339, 3340,
	0, 3449, 3365, 546, 3344, 3450, 0, 3441, 0, 562,
	3452, 3446, 0, 802, 210, 0, 3443, 0, 3445, 0,
	0, 3384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3461, 3459, 0, 0, 3458, 210, 2089,
	210, 0, 3465, 3466, 3468, 0, 3474, 0, 3476, 801,
	3372, 3473, 3472, 3375, 3479, 0, 3478, 0, 0, 0,
	0, 0, 3447, 3448, 0, 3387, 3451, 1618, 0, 0,
	0, 3487, 3486, 0, 0, 0, 0, 0, 0, 3494,
	0, 0, 0, 750, 3493, 3496, 3495, 0, 0, 3500,
	0, 0, 0, 2326, 0, 0, 0, 0, 3091, 0,
	3507, 0, 3508, 3501, 3502, 0, 0, 0, 0, 0,
	0, 3511, 3512, 3513, 3515, 3516, 0, 0, 0, 0,
	0, 0, 0, 3520, 0, 3088, 0, 0, 3081, 0,
	3471, 0, 3518, 0, 0, 1643, 0, 0, 2089, 3384,
	0, 3079, 0, 0, 0, 0, 0, 3083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 0, 0,
	0, 0, 2093, 2093, 0, 0, 3089, 0, 0, 0,
	0, 1643, 206, 0, 0, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	0, 0, 0, 0, 0, 0, 206, 3082, 513, 0,
	0, 206, 0, 0, 0, 0, 2766, 2767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 817, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
	2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
	2093, 0, 2093, 0, 0, 0, 0, 1183, 0, 1187,
	0, 1193, 2491, 2492, 0, 2509, 2510, 2511, 0, 0,
	0, 0, 0, 0, 531, 0, 2825, 2826, 2827, 2828,
	2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838,
	2839, 2840, 2841, 2842, 2843, 0, 2847, 1615, 0, 3084,
	0, 0, 3085, 0, 0, 0, 0, 0, 0, 0,
	0, 2215, 0, 0, 0, 0, 799, 0, 752, 206,
	0, 0, 0, 2506, 0, 0, 0, 1763, 0, 0,
	206, 0, 0, 1615, 0, 0, 0, 0, 0, 3087,
	0, 0, 0, 206, 0, 1313, 0, 0, 0, 0,
	0, 3090, 1316, 0, 0, 0, 753, 0, 0, 206,
	0, 0, 0, 206, 2274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 1181, 0, 0, 206, 0, 2497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1810,
	0, 0, 0, 0, 0, 0, 2215, 0, 513, 0,
	2329, 0, 0, 0, 1643, 1643, 206, 0, 0, 206,
	0, 206, 0, 206, 0, 206, 206, 0, 1165, 0,
	1643, 1643, 0, 0, 0, 0, 0, 2348, 680, 0,
	2215, 2215, 0, 3086, 0, 0, 0, 0, 206, 0,
	0, 1847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1643, 1181, 0, 1181, 0, 0, 1165, 0, 1165,
	2507, 1165, 1862, 1863, 1472, 1473, 1474, 1475, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 206,
	206, 206, 0, 206, 1419, 1420, 0, 0, 0, 211,
	59, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 63, 0, 206, 0, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1615, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 579,
	0, 0, 2508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 579, 0, 85, 0, 0, 1615, 1615, 76, 0,
	0, 0, 0, 0, 0, 2491, 2492, 0, 2509, 2510,
	2511, 3014, 1615, 1615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1643, 3016, 1181, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 1427, 1555,
	1555, 1555, 77, 1615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2506, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2503, 2504, 2505, 0, 0, 0,
	0, 2502, 2500, 2501, 2493, 2494, 2495, 2496, 2498, 2499,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	1643, 0, 1442, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 513, 0, 0, 0, 0, 0, 2497,
	0, 513, 0, 0, 0, 0, 0, 78, 513, 0,
	0, 513, 513, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	81, 0, 82, 0, 1181, 2093, 0, 0, 0, 0,
	0, 2512, 0, 0, 0, 1615, 1448, 0, 0, 0,
	0, 178, 2215, 2215, 206, 0, 0, 0, 2215, 0,
	0, 2616, 0, 675, 1443, 0, 116, 0, 2215, 2616,
	2215, 2616, 2616, 2507, 0, 0, 0, 0, 2093, 3187,
	1419, 1420, 0, 0, 206, 206, 206, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 1422, 0, 1165, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 3213, 0, 0, 0, 149, 0, 2668, 0,
	0, 2670, 2215, 1421, 179, 0, 0, 0, 0, 0,
	0, 206, 1615, 0, 172, 206, 0, 0, 0, 0,
	2259, 0, 173, 0, 206, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 2508, 2215, 0, 513, 0,
	0, 0, 0, 148, 0, 2215, 0, 2093, 0, 0,
	0, 0, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 0, 0, 2491, 2492, 0,
	2509, 2510, 2511, 0, 0, 0, 206, 1810, 0, 0,
	1810, 0, 0, 0, 1427, 0, 3015, 0, 0, 0,
	0, 3289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2750, 0, 0, 1165, 206, 0, 206, 0,
	0, 0, 0, 2338, 0, 1449, 1450, 1451, 1643, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 2506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2503, 2504, 2505,
	0, 0, 0, 0, 2502, 2500, 2501, 2493, 2494, 2495,
	2496, 2498, 2499, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 1643, 0, 0, 0, 0, 0, 0,
	2806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1914, 0, 1919, 0, 0, 0, 0, 1060,
	1926, 2497, 1161, 0, 1060, 0, 0, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 0, 1975, 0, 1977, 1978, 1979, 1980, 0,
	0, 0, 0, 2512, 1161, 1161, 0, 0, 1643, 0,
	1443, 0, 206, 206, 0, 2004, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 2029, 2507, 0, 0, 513, 0,
	1615, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 1161, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 1181, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 0, 0, 0, 0, 2085, 0, 2096, 2098,
	2103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 1615, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 59, 0, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 2508, 0, 0,
	917, 0, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 2950, 206, 206, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 206, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	1615, 2215, 206, 0, 0, 0, 1422, 0, 85, 0,
	207, 0, 0, 76, 2348, 2348, 0, 0, 0, 0,
	680, 680, 2215, 0, 0, 1810, 1810, 0, 0, 680,
	2215, 0, 207, 1421, 0, 206, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 2503,
	2504, 2505, 0, 0, 0, 0, 2502, 2500, 2501, 2493,
	2494, 2495, 2496, 2498, 2499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2769, 0, 0,
	0, 0, 0, 3033, 0, 0, 0, 0, 0, 0,
	2654, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 2276, 0, 2278, 0, 0, 0, 2491,
	2492, 0, 2509, 2510, 2511, 0, 0, 0, 2685, 0,
	0, 2687, 2688, 2689, 0, 1449, 1450, 1451, 2775, 206,
	0, 0, 0, 0, 0, 1181, 0, 206, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2215, 2215, 2215,
	2506, 0, 2731, 2732, 145, 81, 0, 82, 1442, 1181,
	0, 0, 0, 0, 1060, 2215, 0, 2616, 0, 0,
	1181, 1181, 206, 1161, 579, 0, 178, 0, 0, 579,
	0, 206, 206, 0, 0, 0, 0, 0, 675, 0,
	0, 116, 0, 0, 2215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3141,
	1060, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 2497, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 1181, 0, 0, 0, 0, 0,
	1443, 149, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 2512, 0, 173, 0, 0,
	0, 0, 0, 0, 2410, 2411, 0, 0, 0, 0,
	2417, 0, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 2507, 0, 2431,
	2432, 0, 0, 0, 0, 2029, 0, 0, 0, 0,
	0, 0, 0, 0, 2439, 2215, 0, 2616, 0, 0,
	3207, 0, 0, 0, 0, 1161, 0, 0, 206, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	2459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 0, 0, 0, 0, 2474, 0, 0, 0, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 3207, 0,
	0, 0, 2215, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 2508,
	1181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2103, 2103, 2103, 0, 0, 0, 0,
	206, 206, 0, 0, 0, 0, 0, 0, 1555, 0,
	0, 0, 0, 0, 0, 0, 2543, 0, 0, 0,
	2806, 0, 0, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 0, 1161,
	0, 0, 0, 0, 0, 1161, 0, 0, 0, 207,
	1064, 207, 207, 1064, 0, 1064, 207, 0, 0, 0,
	1161, 1161, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 579, 0, 0, 206, 0,
	0, 2503, 2504, 2505, 2616, 817, 0, 0, 2502, 2500,
	2501, 2493, 2494, 2495, 2496, 2498, 2499, 1181, 0, 1181,
	2985, 2986, 2987, 0, 0, 1064, 1064, 207, 207, 0,
	2631, 0, 2491, 2492, 0, 2509, 2510, 2511, 852, 87,
	0, 3360, 207, 0, 0, 0, 0, 1181, 206, 0,
	0, 2774, 0, 0, 0, 0, 0, 0, 206, 2215,
	0, 0, 0, 0, 207, 207, 207, 207, 0, 1064,
	1064, 1060, 0, 0, 1064, 0, 0, 1064, 207, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2806, 2506, 2491, 2492, 0, 2509, 2510, 2511,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 2703,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 2215, 0, 0, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 3207, 0, 0, 0, 2506, 1060, 0, 0, 0,
	207, 1421, 0, 0, 0, 0, 2497, 0, 0, 1441,
	0, 0, 0, 0, 0, 1181, 0, 2215, 792, 0,
	0, 0, 0, 0, 1419, 1420, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2757, 0, 0, 0, 1926, 0, 0, 0,
	1422, 0, 2761, 2762, 0, 2764, 2765, 0, 2512, 987,
	2768, 0, 0, 0, 0, 0, 0, 3116, 2497, 2772,
	1060, 0, 1444, 1445, 1446, 1447, 0, 1421, 2779, 0,
	0, 2543, 1427, 0, 0, 1441, 1060, 0, 0, 0,
	2507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2799, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	2512, 2815, 2816, 0, 2817, 2818, 2819, 0, 0, 2820,
	0, 2763, 0, 2822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 2507, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 2850, 2851, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2508, 0, 0, 0, 0, 0, 0, 1449,
	1450, 1451, 2868, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 992, 207, 0, 0, 0, 1161, 0,
	1448, 0, 1442, 0, 2508, 1064, 2898, 207, 207, 0,
	0, 0, 1060, 0, 1064, 207, 0, 0, 1443, 0,
	207, 2906, 2909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2927, 0, 0, 0, 0,
	0, 1064, 0, 0, 2503, 2504, 2505, 0, 0, 0,
	0, 2502, 2500, 2501, 2493, 2494, 2495, 2496, 2498, 2499,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 1161, 1161, 1443, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1555, 0, 0, 0, 0, 0, 2503, 2504, 2505, 2980,
	0, 0, 0, 2502, 2500, 2501, 2493, 2494, 2495, 2496,
	2498, 2499, 0, 0, 0, 0, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3012, 3013, 0,
	0, 0, 0, 3017, 3018, 0, 1064, 207, 3021, 3022,
	0, 0, 0, 1064, 0, 3026, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3030, 0, 0, 0, 0, 0,
	0, 3034, 586, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 207, 207, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 87, 586, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 207, 0,
	207, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 1064, 0,
	1064, 0, 812, 87, 2909, 0, 1064, 0, 0, 207,
	0, 87, 207, 0, 0, 0, 0, 0, 87, 0,
	0, 1064, 1064, 999, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 207, 207, 0, 207,
	0, 207, 2416, 207, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 207, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2909, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	1449, 1450, 1451, 0, 1060, 0, 0, 0, 3175, 3176,
	3177, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3185, 3186, 0, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 3193, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	0, 0, 0, 1497, 0, 0, 0, 0, 2909, 0,
	0, 0, 0, 0, 0, 0, 3229, 1064, 1161, 0,
	0, 0, 0, 0, 3235, 0, 0, 817, 1060, 0,
	0, 3240, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 2909, 0, 1161, 2909, 0, 1161,
	1161, 1161, 0, 0, 0, 1443, 0, 0, 0, 0,
	1419, 1420, 1054, 0, 0, 0, 2909, 2909, 0, 1172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 1422, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 1064, 0, 0,
	1161, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 3301, 0, 0, 3304,
	0, 1441, 887, 0, 87, 0, 0, 1583, 0, 1586,
	0, 0, 0, 0, 0, 1256, 1060, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1280, 1280,
	1172, 0, 0, 0, 0, 0, 0, 2409, 0, 0,
	0, 1311, 1312, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 205, 207, 205, 205, 1449, 1450, 1451, 205, 0,
	0, 0, 0, 207, 0, 0, 586, 1375, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 1064,
	0, 0, 0, 3408, 3408, 3408, 0, 0, 0, 0,
	0, 0, 207, 1064, 0, 0, 207, 0, 0, 0,
	0, 0, 3427, 0, 0, 0, 0, 0, 1442, 205,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 2909, 205, 2909, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3408,
	0, 0, 0, 0, 0, 0, 205, 205, 205, 205,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 207,
	205, 205, 207, 0, 207, 0, 207, 0, 207, 207,
	0, 0, 1064, 1064, 1064, 0, 1064, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 207, 207, 207, 0, 207, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 812, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	1161, 0, 0, 0, 0, 0, 0, 1592, 0, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	1601, 662, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 792, 792, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1993, 0,
	648, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 812, 0, 0, 0, 0, 1060, 649, 1060,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 1491,
	0, 1585, 0, 999, 0, 0, 205, 0, 650, 0,
	0, 651, 0, 0, 0, 0, 1064, 0, 0, 205,
	1585, 0, 0, 0, 0, 1064, 0, 586, 0, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 666, 0,
	0, 0, 0, 0, 0, 1161, 0, 0, 1060, 0,
	1161, 0, 1061, 0, 0, 1162, 0, 1061, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 1060, 1785, 0, 1161, 0, 0,
	0, 0, 1797, 0, 0, 0, 0, 1586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 207, 207,
	0, 1256, 0, 1816, 0, 1816, 207, 1162, 1162, 87,
	0, 0, 0, 0, 0, 1060, 0, 0, 207, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	653, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 670, 654, 0, 0,
	0, 1162, 1162, 0, 207, 0, 1162, 1064, 207, 1162,
	1064, 1064, 1064, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 1797, 0, 669, 1858, 0, 0, 0, 1060,
	0, 655, 0, 0, 656, 0, 0, 0, 0, 586,
	664, 1060, 1871, 0, 0, 0, 0, 657, 0, 0,
	1878, 0, 1880, 0, 1882, 0, 1884, 1162, 1885, 0,
	0, 1064, 1064, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 87, 0, 0, 658, 665, 0, 0,
	1899, 0, 0, 0, 205, 205, 659, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 1064, 661, 207,
	1064, 207, 0, 660, 87, 0, 0, 1161, 0, 0,
	205, 0, 205, 0, 205, 668, 0, 207, 0, 87,
	0, 87, 0, 0, 1419, 1420, 663, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 87, 0, 87, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 205, 0, 0, 205, 1441, 0, 0, 0, 0,
	0, 0, 1438, 87, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 586, 205,
	0, 205, 0, 205, 0, 205, 0, 205, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	1161, 1161, 0, 0, 0, 0, 1161, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1469, 0, 1064, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 2158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 1993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1061, 0, 0,
	0, 0, 1442, 0, 1491, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 207,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 207, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 0, 1064,
	1064, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 0, 0, 205, 0, 207, 1460,
	0, 0, 0, 0, 987, 1172, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2292, 0, 0, 0, 0,
	1797, 0, 0, 0, 0, 0, 0, 0, 1162, 0,
	0, 0, 0, 0, 0, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2331, 0, 0, 1280, 0, 1280, 0, 1280,
	0, 1172, 1172, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 2371, 0, 3041, 0, 0, 3040,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 87,
	0, 0, 87, 0, 205, 0, 0, 0, 1064, 0,
	1064, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2391, 1172, 2393, 205, 0,
	0, 87, 87, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 586, 0,
	0, 0, 2407, 0, 0, 207, 0, 0, 0, 0,
	1162, 0, 1162, 0, 207, 207, 1064, 0, 1162, 1064,
	0, 1064, 0, 0, 205, 0, 0, 0, 0, 205,
	0, 0, 0, 1162, 1162, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 87, 0, 205, 0, 205, 0, 205, 0,
	205, 205, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 1455, 0, 205, 0, 0, 0, 0, 1422, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 1421, 0, 0, 0, 0,
	0, 0, 0, 1441, 205, 205, 205, 0, 205, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 1064, 0,
	1459, 0, 0, 1469, 0, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 207, 207, 0, 0, 0, 1465, 0,
	1466, 0, 0, 987, 987, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2608, 0, 1457, 1061, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 87, 0, 0, 0, 0, 0, 1467, 0,
	2644, 1172, 2292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 1064, 0, 0, 0, 0, 0, 999, 0,
	0, 1064, 1064, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 999, 1448, 0, 0, 2682, 0, 0,
	0, 2686, 0, 0, 0, 0, 0, 0, 0, 0,
	2693, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 1585, 1064, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2735, 987, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1162, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 0, 2753, 0, 1172, 1061, 0, 0, 0, 205,
	205, 205, 0, 0, 0, 0, 0, 0, 1585, 0,
	2759, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 604, 623, 2479, 0, 0, 2480, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	205, 0, 0, 605, 0, 0, 606, 0, 0, 205,
	0, 0, 0, 0, 1162, 1162, 1162, 0, 1162, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 608, 0, 0, 987, 0,
	0, 205, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 609, 0, 0, 610, 633,
	0, 0, 0, 636, 0, 1455, 0, 0, 0, 0,
	0, 205, 1422, 205, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 87, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 0, 0, 613, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 614, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 0,
	0, 0, 2951, 0, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 2963,
	0, 635, 0, 0, 0, 0, 0, 999, 999, 0,
	0, 616, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 622, 0, 0, 1442, 0, 0, 0, 0, 1061,
	0, 3001, 0, 618, 0, 0, 631, 0, 630, 0,
	0, 0, 1467, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 1456, 0, 0,
	626, 0, 0, 0, 0, 637, 0, 634, 1061, 0,
	0, 0, 624, 0, 0, 0, 0, 1061, 0, 0,
	0, 0, 0, 0, 0, 1993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 1460, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 0, 0, 0, 0, 0, 0, 999, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 1162, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 1061, 0,
	205, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 3109, 1162,
	1438, 0, 1162, 1162, 1162, 0, 0, 2292, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 0, 2025, 0,
	0, 2026, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 1162, 0, 1444, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	1459, 0, 1061, 1469, 999, 0, 0, 1449, 1450, 1451,
	0, 0, 999, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1585, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 1061, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 1061, 3214, 0, 205, 205, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3258, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 3282, 1172, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 1061,
	1422, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 1438, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 0, 0, 0, 205, 0, 3039, 1444, 1445,
	1446, 1447, 0, 0, 3366, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 3381, 0, 0, 1061, 0, 0,
	0, 0, 1162, 0, 0, 205, 205, 0, 0, 0,
	0, 0, 1459, 0, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1162, 1162, 1162, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 1061, 1457, 0, 0, 0, 58, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	59, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 205, 63, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 39,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 41, 0, 1448, 0, 0, 42,
	0, 0, 0, 205, 75, 0, 0, 121, 0, 0,
	0, 0, 40, 85, 1443, 0, 0, 0, 76, 43,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	1061, 0, 1061, 0, 0, 0, 0, 0, 0, 1460,
	1455, 0, 0, 0, 0, 44, 0, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 1162, 1438,
	0, 1061, 0, 1162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 0,
	1162, 0, 0, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 1444, 1445, 1446, 1447, 2777,
	0, 0, 0, 0, 0, 1427, 0, 0, 1061, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 1459,
	0, 0, 1469, 0, 1061, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 145,
	81, 0, 82, 0, 46, 0, 0, 1465, 122, 1466,
	0, 0, 0, 0, 47, 0, 1436, 1437, 0, 0,
	0, 178, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 51, 1061, 0, 116, 0, 0, 1442,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	1162, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 172, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 1162, 0, 0, 0, 0, 1162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 1058,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 0, 0, 3361, 0, 1061, 215, 216, 217, 218,
	219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 1074, 228, 229, 230, 231, 232, 233,
	1075, 1076, 234, 469, 470, 471, 1077, 235, 472, 1078,
	1063, 1079, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1080, 245, 0, 246, 247, 248, 1081, 938,
	249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251,
	252, 253, 254, 255, 256, 473, 474, 1089, 257, 1090,
	259, 258, 1091, 260, 1092, 1093, 261, 262, 263, 1094,
	264, 1095, 265, 266, 1096, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 1097, 212, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 214, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 1121, 359, 360, 493, 361, 494, 362,
	1122, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 1123, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1124, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1125, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1126, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 1127, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 1128,
	428, 429, 427, 1129, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1130, 499, 500, 501, 502, 1131, 443,
	1132, 437, 438, 503, 439, 504, 1133, 440, 441, 442,
	0, 444, 445, 1134, 1135, 446, 447, 448, 449, 450,
	452, 1136, 453, 1137, 451, 454, 455, 456, 505, 506,
	507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 2145, 0, 0, 0, 0,
	0, 0, 0, 2146, 215, 216, 217, 218, 219, 1065,
	220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 1074, 228, 229, 230, 231, 232, 233, 1075, 1076,
	234, 469, 470, 471, 1077, 235, 472, 1078, 1063, 1079,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	1080, 245, 0, 246, 247, 248, 1081, 938, 249, 250,
	1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252, 253,
	254, 255, 256, 473, 474, 1089, 257, 1090, 259, 258,
	1091, 260, 1092, 1093, 261, 262, 263, 1094, 264, 1095,
	265, 266, 1096, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 1097, 212, 1098, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1099, 284, 1100, 1101, 939, 285, 286, 1102, 287, 479,
	1103, 480, 288, 1104, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1105, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 1106, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1107, 486, 1108, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1109, 318, 317, 1110, 319,
	488, 945, 320, 321, 946, 1111, 322, 323, 1112, 1113,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1114, 214,
	948, 1115, 489, 490, 341, 342, 1116, 343, 344, 345,
	1117, 1118, 347, 348, 349, 1119, 1120, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 1121, 359, 360, 493, 361, 494, 362, 1122, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	1123, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 1124, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 1125, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 1126, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 1127, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 1128, 428, 429,
	427, 1129, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3065, 215, 216, 217, 218, 219, 1065,
	220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 1074, 228, 229, 230, 231, 232, 233, 1075, 1076,
	234, 469, 470, 471, 1077, 235, 472, 1078, 1063, 1079,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	1080, 245, 0, 246, 247, 248, 1081, 938, 249, 250,
	1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252, 253,
	254, 255, 256, 473, 474, 1089, 257, 1090, 259, 258,
	1091, 260, 1092, 1093, 261, 262, 263, 1094, 264, 1095,
	265, 266, 1096, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 1097, 212, 1098, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1099, 284, 1100, 1101, 939, 285, 286, 1102, 287, 479,
	1103, 480, 288, 1104, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1105, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 1106, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1107, 486, 1108, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1109, 318, 317, 1110, 319,
	488, 945, 320, 321, 946, 1111, 322, 323, 1112, 1113,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1114, 214,
	948, 1115, 489, 490, 341, 342, 1116, 343, 344, 345,
	1117, 1118, 347, 348, 349, 1119, 1120, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 1121, 359, 360, 493, 361, 494, 362, 1122, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	1123, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 1124, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 1125, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 1126, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 1127, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 1128, 428, 429,
	427, 1129, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3181, 0,
	215, 216, 217, 218, 219, 1065, 220, 1066, 1067, 1068,
	1069, 464, 1070, 1071, 1072, 1073, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 1074, 228, 229,
	230, 231, 232, 233, 1075, 1076, 234, 469, 470, 471,
	1077, 235, 472, 1078, 1063, 1079, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 1080, 245, 0, 246,
	247, 248, 1081, 938, 249, 250, 1082, 1083, 1085, 1084,
	1086, 1087, 1088, 251, 252, 253, 254, 255, 256, 473,
	474, 1089, 257, 1090, 259, 258, 1091, 260, 1092, 1093,
	261, 262, 263, 1094, 264, 1095, 265, 266, 1096, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 1097, 212, 1098, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1099, 284, 1100, 1101,
	939, 285, 286, 1102, 287, 479, 1103, 480, 288, 1104,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1105, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 1106, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1107, 486, 1108, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1109, 318, 317, 1110, 319, 488, 945, 320, 321,
	946, 1111, 322, 323, 1112, 1113, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1114, 214, 948, 1115, 489, 490,
	341, 342, 1116, 343, 344, 345, 1117, 1118, 347, 348,
	349, 1119, 1120, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 1121, 359, 360,
	493, 361, 494, 362, 1122, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 1123, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 1124, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 1125,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	1126, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	1127, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 1128, 428, 429, 427, 1129, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2802, 0, 215, 216, 217, 218,
	219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 1074, 228, 229, 230, 231, 232, 233,
	1075, 1076, 234, 469, 470, 471, 1077, 235, 472, 1078,
	1063, 1079, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1080, 245, 0, 246, 247, 248, 1081, 938,
	249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251,
	252, 253, 254, 255, 256, 473, 474, 1089, 257, 1090,
	259, 258, 1091, 260, 1092, 1093, 261, 262, 263, 1094,
	264, 1095, 265, 266, 1096, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 1097, 212, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 214, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 1121, 359, 360, 493, 361, 494, 362,
	1122, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 1123, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1124, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1125, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1126, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 1127, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 1128,
	428, 429, 427, 1129, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1130, 499, 500, 501, 502, 1131, 443,
	1132, 437, 438, 503, 439, 504, 1133, 440, 441, 442,
	0, 444, 445, 1134, 1135, 446, 447, 448, 449, 450,
	452, 1136, 453, 1137, 451, 454, 455, 456, 505, 506,
	507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459,
	460, 509, 461, 462, 463, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2794, 0, 215, 216, 217, 218, 219, 1065, 220, 1066,
	1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 1074,
	228, 229, 230, 231, 232, 233, 1075, 1076, 234, 469,
	470, 471, 1077, 235, 472, 1078, 1063, 1079, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1080, 245,
	0, 246, 247, 248, 1081, 938, 249, 250, 1082, 1083,
	1085, 1084, 1086, 1087, 1088, 251, 252, 253, 254, 255,
	256, 473, 474, 1089, 257, 1090, 259, 258, 1091, 260,
	1092, 1093, 261, 262, 263, 1094, 264, 1095, 265, 266,
	1096, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 1097, 212, 1098, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1099, 284,
	1100, 1101, 939, 285, 286, 1102, 287, 479, 1103, 480,
	288, 1104, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1105, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 1106, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1107, 486, 1108, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1109, 318, 317, 1110, 319, 488, 945,
	320, 321, 946, 1111, 322, 323, 1112, 1113, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1114, 214, 948, 1115,
	489, 490, 341, 342, 1116, 343, 344, 345, 1117, 1118,
	347, 348, 349, 1119, 1120, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 1121,
	359, 360, 493, 361, 494, 362, 1122, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 1123, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 1124, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 1125, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 1126, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 1127, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 1128, 428, 429, 427, 1129,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 1130,
	499, 500, 501, 502, 1131, 443, 1132, 437, 438, 503,
	439, 504, 1133, 440, 441, 442, 0, 444, 445, 1134,
	1135, 446, 447, 448, 449, 450, 452, 1136, 453, 1137,
	451, 454, 455, 456, 505, 506, 507, 1138, 458, 457,
	508, 1139, 1140, 1141, 1142, 459, 460, 509, 461, 462,
	463, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2667, 0, 215, 216,
	217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069, 464,
	1070, 1071, 1072, 1073, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 1074, 228, 229, 230, 231,
	232, 233, 1075, 1076, 234, 469, 470, 471, 1077, 235,
	472, 1078, 1063, 1079, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 1080, 245, 0, 246, 247, 248,
	1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086, 1087,
	1088, 251, 252, 253, 254, 255, 256, 473, 474, 1089,
	257, 1090, 259, 258, 1091, 260, 1092, 1093, 261, 262,
	263, 1094, 264, 1095, 265, 266, 1096, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 1097,
	212, 1098, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1099, 284, 1100, 1101, 939, 285,
	286, 1102, 287, 479, 1103, 480, 288, 1104, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1105,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	1106, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1107, 486, 1108, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1109,
	318, 317, 1110, 319, 488, 945, 320, 321, 946, 1111,
	322, 323, 1112, 1113, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1114, 214, 948, 1115, 489, 490, 341, 342,
	1116, 343, 344, 345, 1117, 1118, 347, 348, 349, 1119,
	1120, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 1121, 359, 360, 493, 361,
	494, 362, 1122, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 1123, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 1124,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 1125, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 1126, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 1127, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 1128, 428, 429, 427, 1129, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 1130, 499, 500, 501, 502,
	1131, 443, 1132, 437, 438, 503, 439, 504, 1133, 440,
	441, 442, 0, 444, 445, 1134, 1135, 446, 447, 448,
	449, 450, 452, 1136, 453, 1137, 451, 454, 455, 456,
	505, 506, 507, 1138, 458, 457, 508, 1139, 1140, 1141,
	1142, 459, 460, 509, 461, 462, 463, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2038, 0, 215, 216, 217, 218, 219, 1065,
	220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 1074, 228, 229, 230, 231, 232, 233, 1075, 1076,
	234, 469, 470, 471, 1077, 235, 472, 1078, 1063, 1079,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	1080, 245, 0, 246, 247, 248, 1081, 938, 249, 250,
	1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252, 253,
	254, 255, 256, 473, 474, 1089, 257, 1090, 259, 258,
	1091, 260, 1092, 1093, 261, 262, 263, 1094, 264, 1095,
	265, 266, 1096, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 1097, 212, 1098, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1099, 284, 1100, 1101, 939, 285, 286, 1102, 287, 479,
	1103, 480, 288, 1104, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1105, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 1106, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1107, 486, 1108, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1109, 318, 317, 1110, 319,
	488, 945, 320, 321, 946, 1111, 322, 323, 1112, 1113,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1114, 214,
	948, 1115, 489, 490, 341, 342, 1116, 343, 344, 345,
	1117, 1118, 347, 348, 349, 1119, 1120, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 1121, 359, 360, 493, 361, 494, 362, 1122, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	1123, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 1124, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 1125, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 1126, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 1127, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 1128, 428, 429,
	427, 1129, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 1166, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1768, 0,
	0, 0, 215, 216, 217, 218, 219, 1065, 220, 1066,
	1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 1074,
	228, 229, 230, 231, 232, 233, 1075, 1076, 234, 469,
	470, 471, 1077, 235, 472, 1078, 1063, 1079, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1080, 245,
	0, 246, 247, 248, 1081, 938, 249, 250, 1082, 1083,
	1085, 1084, 1086, 1087, 1088, 251, 252, 253, 254, 255,
	256, 473, 474, 1089, 257, 1090, 259, 258, 1091, 260,
	1092, 1093, 261, 262, 263, 1094, 264, 1095, 265, 266,
	1096, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 1097, 212, 1098, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1099, 284,
	1100, 1101, 939, 285, 286, 1102, 287, 479, 1103, 480,
	288, 1104, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1105, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 1106, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1107, 486, 1108, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1109, 318, 317, 1110, 319, 488, 945,
	320, 321, 946, 1111, 322, 323, 1112, 1113, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1114, 214, 948, 1115,
	489, 490, 341, 342, 1116, 343, 344, 345, 1117, 1118,
	347, 348, 349, 1119, 1120, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 1121,
	359, 360, 493, 361, 494, 362, 1122, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 1123, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 1124, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 1125, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 1126, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 1127, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 1128, 428, 429, 427, 1129,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 1130,
	499, 500, 501, 502, 1131, 443, 1132, 437, 438, 503,
	439, 504, 1133, 440, 441, 442, 0, 444, 445, 1134,
	1135, 446, 447, 448, 449, 450, 452, 1136, 453, 1137,
	451, 454, 455, 456, 505, 506, 507, 1138, 458, 457,
	508, 1139, 1140, 1141, 1142, 459, 460, 509, 461, 462,
	463, 1055, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 1065, 220, 1066, 1067, 1068,
	1069, 464, 1070, 1071, 1072, 1073, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 1074, 228, 229,
	230, 231, 232, 233, 1075, 1076, 234, 469, 470, 471,
	1077, 235, 472, 1078, 1063, 1079, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 1080, 245, 0, 246,
	247, 248, 1081, 938, 249, 250, 1082, 1083, 1085, 1084,
	1086, 1087, 1088, 251, 252, 253, 254, 255, 256, 473,
	474, 1089, 257, 1090, 259, 258, 1091, 260, 1092, 1093,
	261, 262, 263, 1094, 264, 1095, 265, 266, 1096, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 1097, 212, 1098, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1099, 284, 1100, 1101,
	939, 285, 286, 1102, 287, 479, 1103, 480, 288, 1104,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1105, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 1106, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1107, 486, 1108, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1109, 318, 317, 1110, 319, 488, 945, 320, 321,
	946, 1111, 322, 323, 1112, 1113, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1114, 214, 948, 1115, 489, 490,
	341, 342, 1116, 343, 344, 345, 1117, 1118, 347, 348,
	349, 1119, 1120, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 1121, 359, 360,
	493, 361, 494, 362, 1122, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 1123, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 1124, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 1125,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	1126, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	1127, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 1128, 428, 429, 427, 1129, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 1074, 228, 229, 230, 231, 232, 233,
	1075, 1076, 234, 469, 470, 471, 1077, 235, 472, 1078,
	1063, 1079, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1080, 245, 0, 246, 247, 248, 1081, 938,
	249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251,
	252, 253, 254, 255, 256, 473, 474, 1089, 257, 1090,
	259, 258, 1091, 260, 1092, 1093, 261, 262, 263, 1094,
	264, 1095, 265, 266, 1096, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 1097, 212, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 214, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 1121, 359, 360, 493, 361, 494, 362,
	1122, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 1123, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1124, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1125, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1126, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 1127, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 1128,
	428, 429, 427, 1129, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1130, 499, 500, 501, 502, 1131, 443,
	1132, 437, 438, 503, 439, 504, 1133, 440, 441, 442,
	0, 444, 445, 1134, 1135, 446, 447, 448, 449, 450,
	452, 1136, 453, 1137, 451, 454, 455, 456, 505, 506,
	507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459,
	460, 509, 461, 462, 463, 2014, 0, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 2011,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 2012, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 2010,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 2013, 0,
	0, 0, 0, 0, 0, 850, 2009, 0, 0, 813,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 178, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 180, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	1305, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	172, 459, 460, 509, 461, 462, 463, 824, 173, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 880, 837, 838, 839, 835, 836, 849, 1496,
	1494, 0, 0, 0, 848, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 178, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 180, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 1305, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 172, 459, 460, 509, 461, 462, 463, 824, 173,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	1496, 2429, 0, 0, 0, 848, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 1305, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 172, 459, 460, 509, 461, 462, 463, 824,
	173, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 1496, 1494, 0, 0, 0, 848, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 2099, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	2104, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 2100, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 2101, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 816, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 828, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 3378, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 828, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 3238, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 828, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 2974, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 1556, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 848, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 2781, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 1928, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 1927, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	828, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 850, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 1556,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	0, 848, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 2104, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 1494, 0, 0, 2109, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 2107,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 2095, 848, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 2084, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 2082, 848, 2074, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 2077, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 2078, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 2079, 2076, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 2080, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 2075, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 2071, 848, 2074, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 2077, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 2078, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 2079, 2076,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 2080, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 2075, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 850, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 1502, 0, 850, 0, 0, 0,
	0, 848, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 1915, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 1195, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 1194, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 1189, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 1188, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 1184, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 880, 837, 838, 839, 835,
	836, 849, 850, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 3407, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 3406, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 3405, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 3407,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 3406,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 850, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 0,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 880, 837, 838, 839, 835, 836,
	849, 0, 2092, 0, 0, 0, 0, 2090, 2091, 0,
	0, 215, 216, 217, 218, 219, 850, 220, 0, 0,
	0, 848, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 0, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 3407, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 0,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 0, 932, 0,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 0, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 0, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 3406, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 1001, 0, 820, 821, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 848, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 928, 234, 469, 470, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 480, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 988,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 214, 948, 0, 933, 490, 341, 342,
	0, 343, 344, 345, 0, 993, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 496, 995, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 178, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	959, 0, 428, 429, 427, 180, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	1305, 506, 507, 0, 458, 457, 508, 1001, 0, 0,
	172, 459, 460, 509, 461, 462, 463, 0, 173, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 0, 985, 0, 1588,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 928,
	234, 469, 470, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 480, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 988, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 214,
	948, 0, 933, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 496, 995, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 178, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 959, 0, 428, 429,
	427, 180, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 960, 439, 961, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 451, 454, 455, 456, 1305, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 172, 459, 460, 509,
	461, 462, 463, 0, 173, 0, 0, 2536, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 1588, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 928, 234, 469, 470, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 480, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 988, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 214, 948, 0, 933, 490, 341, 342, 0, 343,
	344, 345, 0, 993, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 995, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 960, 439, 961, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 0, 984, 0, 1001, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 985, 929, 990, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	928, 234, 469, 470, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 480, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 988, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	214, 948, 0, 933, 490, 341, 342, 0, 343, 344,
	345, 0, 993, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 496, 995, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 960, 439, 961, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1001, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 0, 985, 0, 990, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 928, 234, 469, 470,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 988, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 214, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 993, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 496,
	995, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 960, 439,
	961, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1001, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 0,
	985, 0, 990, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 928, 234, 469, 470, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 480, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 214, 948, 0, 933, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 995, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 960, 439, 961, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 813, 0, 1159, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 1483, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 1063,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 178, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 180, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 1305, 506, 507,
	0, 458, 457, 508, 1302, 0, 1159, 172, 459, 460,
	509, 461, 462, 463, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 148, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 1063, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 178, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 952, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	180, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 1305, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 172, 459, 460, 509, 461,
	462, 463, 0, 173, 0, 0, 0, 0, 1159, 1158,
	0, 0, 0, 0, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 1063,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1159, 1158, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 2730, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 1063, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1001, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 0,
	0, 0, 1309, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 928, 234, 469, 470, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 480, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 214, 948, 0, 933, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 960, 439, 961, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 813, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 178, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 180, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 1305, 506, 507,
	0, 458, 457, 508, 209, 0, 0, 172, 459, 460,
	509, 461, 462, 463, 0, 173, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 148, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	209, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 1593, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 209, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 2683, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 209, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 2327, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 687, 0,
	578, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	2805, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 584, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 583, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 577, 0, 578,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 587, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 584, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 583, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 578, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	587, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 584, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 1876, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 583, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 578, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 587, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 584, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 583, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 587, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1332, 0, 1159, 1158, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 1063, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 1331, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 1330, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1300,
	0, 1159, 1158, 0, 0, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 1063, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1299, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1296, 0, 1159,
	1158, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	1063, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1295, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 1234, 0, 1159, 1158, 0,
	0, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 1063, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1233, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1231, 0, 1159, 1158, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 1063, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1230, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1152, 0, 1159, 1158, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 1063, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1154, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1159,
	1158, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	1063, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1159, 1158, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 1063, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 1159, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 1063, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 2216, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 2213, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 2362, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 2219, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 2359, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 2361, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 2358, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	2218, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 2360, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 2216, 235,
	472, 0, 0, 2210, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 2213, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 2219, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 2209, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 2218, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 2217, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1377, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 1380, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 1378, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 1379, 457, 508, 1147, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1149, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1144, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1146, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 993,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1051, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1053, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 540,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 539, 219, 529, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	532, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 533, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 534, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 528, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 529, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 532, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 533,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 534, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 993, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 2291, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1859, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 1796, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1789, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1788, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1784, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1786, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1289, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1288, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1286,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1285, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1283, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1282, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1279, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1278, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1254, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1169, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1171, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 532, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 533, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 534, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 1883, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 1881, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 1879, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 679,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 678, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 677, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 2362, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 3127, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 517,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 516, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 515, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 2150, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 209,
	2349, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 2929,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 209, 2349, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 2346, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 1865, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1857, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 560, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 1029, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	561, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 557, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	556, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1808, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1807, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 560,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 550,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 561, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 557, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 1308, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1293, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1292, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1242, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1241, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1226, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1163, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 560,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 1029, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 561, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 557, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 1030, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 1012, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 560,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 550,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 548, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 549, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 561, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 551, 390, 0, 391,
	395, 396, 557, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 552, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 554, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 544, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 545, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 542, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 536, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 512, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 2625, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	2623, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 2611, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 2309, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 545, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 1820, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 0, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1262, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1204, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 967, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	0, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 0, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 0, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 0, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 1421, 0, 0, 0, 1427, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 1457, 1427, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 1467, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 1448, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1422, 1443, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1421, 0, 0, 0, 0, 0,
	1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 2482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1444, 1445, 1446, 1447, 0,
	1422, 0, 0, 0, 1468, 1427, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 1421, 0, 1459,
	0, 0, 1469, 2481, 0, 1441, 1449, 1450, 1451, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1467, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 1448, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 1443, 0, 0, 1468, 0, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 1460,
	1421, 0, 0, 0, 0, 0, 2478, 0, 1441, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 1421, 0, 0,
	0, 1427, 0, 1458, 0, 1441, 1433, 1434, 1440, 1439,
	1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 1459, 0, 0, 1469, 2477,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1457, 1427, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 1467, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 1448,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 1443, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1421, 0, 0, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 2476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 1444, 1445, 1446, 1447, 0, 1422, 0, 0, 0,
	1468, 1427, 0, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 1421, 0, 1459, 0, 0, 1469, 2026,
	0, 1441, 1449, 1450, 1451, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1467, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 1448,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1422,
	1443, 0, 0, 1468, 0, 0, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 1460, 1421, 0, 0, 3357,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 1421, 0, 0, 0, 1427, 0, 1458,
	0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 1459, 3288, 0, 1469, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1457, 1427, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1467,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 1448, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1422,
	1443, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 1421, 0, 0, 0,
	0, 0, 1458, 0, 1441, 1433, 1434, 1440, 1439, 1435,
	1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 0, 0, 0, 3287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 1444, 1445, 1446,
	1447, 0, 1422, 0, 0, 0, 1468, 1427, 0, 1458,
	0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 1421,
	0, 1459, 3184, 0, 1469, 0, 0, 1441, 1449, 1450,
	1451, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 0, 0, 1467,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 1448, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1422, 1443, 0, 0, 1468,
	0, 0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435,
	1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 1460, 1421, 0, 0, 3092, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 1421,
	0, 0, 0, 1427, 0, 1458, 0, 1441, 1433, 1434,
	1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 1459, 3044, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 0, 0, 1457,
	1427, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 1467, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 1448, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1422, 1443, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 1421, 0, 0, 0, 0, 0, 1458, 0,
	1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0,
	0, 3043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 1444, 1445, 1446, 1447, 0, 1422, 0,
	0, 0, 1468, 1427, 0, 1458, 0, 0, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 1421, 0, 1459, 3042, 0,
	1469, 0, 0, 1441, 1449, 1450, 1451, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 1467, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 1469, 0, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 1448, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1422, 1443, 0, 0, 1468, 0, 0, 1458, 0,
	0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 1460, 1421, 0,
	0, 3009, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 1421, 0, 0, 0, 1427,
	0, 1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461,
	1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 0, 1459, 2812, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 1457, 1427, 3457, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 1467, 0, 1469, 0, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 1448, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 2404,
	0, 1422, 1443, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1421, 0,
	0, 0, 0, 0, 1458, 0, 1441, 1433, 1434, 1440,
	1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 2433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2405, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 1444,
	1445, 1446, 1447, 0, 1422, 0, 0, 0, 1468, 1427,
	0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 1421, 0, 1459, 0, 0, 1469, 0, 0, 1441,
	1449, 1450, 1451, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 1467, 1427, 0, 2521, 0, 0, 2520, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 1448, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2117, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 2116, 0, 0, 1422, 1443, 0,
	0, 1468, 0, 0, 1458, 0, 0, 1433, 1434, 1440,
	1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 1460, 1421, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 1421, 0, 0, 0, 1427, 0, 1458, 0, 1441,
	1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 1459,
	0, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 1457, 1427, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 1467, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 1448, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	810, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1422, 1443, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1421, 0, 0, 0, 0, 0,
	1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1444, 1445, 1446, 1447, 0,
	1422, 0, 0, 0, 1468, 1427, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 1421, 0, 1459,
	0, 0, 1469, 0, 0, 1441, 1449, 1450, 1451, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1467, 1427, 0,
	0, 0, 0, 2527, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 1448, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	2522, 0, 0, 1422, 1443, 0, 0, 1468, 0, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 1460,
	1421, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 1421, 0, 0,
	0, 1427, 0, 1458, 0, 1441, 1433, 1434, 1440, 1439,
	1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1457, 1427, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 1467, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 1448,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 2489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	2475, 0, 0, 1422, 1443, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1421, 0, 0, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 1444, 1445, 1446, 1447, 0, 1422, 0, 0, 0,
	1468, 1427, 0, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 1421, 0, 1459, 0, 0, 1469, 0,
	0, 1441, 1449, 1450, 1451, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1467, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 1448,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1422,
	1443, 0, 0, 1468, 0, 0, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 1460, 1421, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 1421, 0, 0, 0, 1427, 0, 1458,
	0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 1459, 0, 0, 1469, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1457, 1427, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1467,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 0,
	0, 0, 0, 0, 0, 1436, 1437, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 1448, 0, 0, 1442, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 1441, 1443, 0, 0, 1467, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1469, 0, 0, 1460, 1449, 1450, 1451, 0,
	0, 0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435,
	1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 1640, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 1652, 1634, 1641, 1624,
	1662, 1661, 0, 0, 1626, 1625, 0, 0, 0, 0,
	0, 1443, 1672, 1673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 0, 1659, 1658, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1656, 1654, 1655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 1636,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	1645, 1639, 1647, 1649, 1650, 1651, 1646, 0, 1644, 0,
	0, 719, 0, 749, 0, 0, 0, 0, 1668, 1669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 755, 724, 0,
	0, 0, 1628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1660, 0, 0, 0, 1637, 0,
	1638, 725, 0, 0, 0, 0, 727, 0, 0, 0,
	756, 0, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 728, 0, 1653, 0,
	0, 0, 1621, 1619, 1620, 1623, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 1630, 1632,
	1633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1648, 1631, 729, 0, 0, 0, 0, 0,
	0, 0, 723, 1671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 730, 731,
	0, 1627, 0, 1664, 1665, 1666, 1667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 1635, 0, 0, 0, 0, 1642, 1670,
	0, 0, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 721, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 738, 0,
	0, 0, 757, 758, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746,
}
var sqlPact = [...]int{

	9031, -1000, -1000, -1000, -1000, -1000, -1000, 285, 282, 280,
	278, 277, 275, 274, 271, 260, -1000, -1000, -1000, 259,
	-1000, -1000, 258, -1000, 252, 238, 234, 230, -1000, 228,
	227, -1000, -1000, -1000, -1000, 226, 225, 217, 49061, 1721,
	60289, 51957, 1670, 2146, 43645, 59871, 43227, 59453, 59035, 216,
	-1000, 58617, 208, 198, 192, -1000, -1000, 191, 1689, 35255,
	189, 186, 184, 2147, 183, 180, -1000, 179, -1000, 8046,
	1283, -1000, 167, 166, -1000, 6669, 397, 51127, 2141, 165,
	164, 34836, 2125, -1000, -1000, 1582, -1000, -1000, 163, 162,
	160, 159, 158, 152, 149, 148, 144, -1000, 143, 140,
	139, 138, 134, 132, 112, 111, 110, 109, 108, 107,
	105, 103, 99, 93, 90, -1000, 71169, 1517, 1416, 1415,
	1413, 1409, 1408, 885, 89, 88, 85, 83, 82, 81,
	-1000, -1000, 80, 77, 76, 75, -1000, 74, 71, 193,
	66, 65, 56, 52, 51, 3387, 2110, 1313, 511, 16524,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 64409, 60701, 49, -95, 46, -1000, 2487, 917,
	29394, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 488, -1000, -1000, -1000, 334, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1494, 695, -1000, -1000, -1000, 58199, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 60701, -1000, 1711, -27, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 685, -1000, 1707, 196, 1618,
	-1000, -1000, -1000, -1000, -1000, 60701, -1000, -1000, 2783, 2782,
	1604, 683, 57787, -1000, 1247, -1000, 837, 19183, -1000, 1025,
	-1000, 19183, 322, -1000, -1000, -1000, -1000, -1000, 42809, 13439,
	42391, 41973, 39059, 57369, 13011, 48649, 1082, -1000, -1000, -1000,
	-1000, -1000, -7, 36491, 60701, -1000, 318, -1000, -1000, -1000,
	-1000, -1000, -1000, 25500, 444, 25046, 464, 24592, 382, -1000,
	-1000, -1000, -1000, 2781, 2779, 1012, 2778, 2413, 63997, 1436,
	2775, 1325, 1083, 947, 2774, 2773, 2772, 2771, 2766, 2764,
	2760, 1240, 56951, 2220, 38631, 38203, 49061, 49061, 1945, 56533,
	-1000, -1000, 1154, 1144, -1000, -1000, -1000, -1000, 2289, 2138,
	2130, 48231, -1000, -1000, 2758, 2756, 2754, 2748, 2747, 63585,
	1383, 2745, 1888, 2744, 2739, 2735, 2734, 2724, 2718, 2714,
	2710, 2709, -1000, 47813, 47395, 46977, 46559, 56115, 37775, 37347,
	-1000, -1000, -1000, 31062, 4606, 55697, 31920, 49061, 49061, -1000,
	-1000, 25941, -72, -1000, -1000, -1000, 2168, -1000, 25941, -72,
	-1000, 2211, 1532, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2166, 1382, 2612, 36919, 1596, 1195, 2280, 1285, 1896,
	2278, 2269, 2249, 2243, 2214, 1360, 1916, 1303, 1271, 2200,
	2195, 2623, 1559, 41555, 2708, 2707, 2435, 2187, 2165, -1000,
	-1000, -1000, -1000, 1251, -1000, -1000, -1000, -1000, -1000, 44057,
	-1000, -1000, 1040, -1000, -1000, 1040, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1079, 62761, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1593, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1887,
	-1000, 1573, -1000, -1000, 2706, 2110, 1850, 2421, 2421, 2421,
	2478, 467, 462, -1000, 193, -1000, -1000, 70179, -1000, -1000,
	25941, 25941, 25941, 25941, 25941, 1563, -1000, 682, -1000, -1000,
	724, -1000, 679, 618, -1000, -1000, -1000, -1000, -1000, -1000,
	677, 2631, -1000, 913, -1000, -1000, -1000, -1000, 2581, -1000,
	15629, -1000, -1000, -1000, 504, 674, 25941, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 317, 866, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 606,
	1427, 605, 605, 605, -1000, -1000, 936, -1000, -1000, -1000,
	356, 604, 316, 602, -1000, -1000, -1000, -1000, 2210, 663,
	662, -1000, 660, 654, 653, -1000, -1000, -1000, 652, 648,
	647, 646, 645, 643, 642, 640, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 932, -1000, 639, 638, 637, 636, 634,
	631, 630, 628, 627, -1000, -1000, -13, 60701, -1000, 488,
	-13, -1000, -1000, 622, -1000, 19624, 19624, 19624, -1000, -1000,
	1704, 25941, -1000, 2047, -1000, 510, -210, 804, 30226, -1000,
	28543, 804, 733, 33170, -1000, 2159, -1000, -1000, 620, 308,
	-1000, -1000, 2158, 60701, 13865, 60701, 49061, 49061, -1000, 2370,
	25941, -1000, -1000, 39485, 36079, 60701, 49473, 2525, 70974, 36079,
	60701, 2207, -1000, -1000, -1000, 60701, -1000, 25941, -1000, 2524,
	1229, -34, -1000, -1000, -1000, -1000, -1000, -1000, 1871, 1868,
	1006, 1735, 1280, -1000, 19183, 2406, -1000, -1000, -1000, 297,
	13865, -1000, 1747, 2355, 1171, -1000, 1730, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1395, 2353, -1000, 1411, 2352,
	1358, -1000, -1000, 905, 2351, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1640, -1000, -1000, 2426, -1000, -1000,
	1708, 2350, -133, -1000, -1000, 39485, 36491, -19, -1000, -1000,
	-59, -1000, 12583, 70179, -1000, -1000, -1000, 70179, 802, -1000,
	-1000, 2344, -1000, 70179, 730, -1000, -1000, 2329, -1000, -1000,
	-1000, 2705, -1000, 2704, 1828, 2703, 2701, 2699, -1000, 1412,
	1370, 2697, -1000, 2696, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46141, 45723, 944, -1000, 1703, -1000, -1000, 45305, 891,
	1826, -1000, -1000, 1823, -1000, 863, -1000, 2695, 55279, 1982,
	891, 1819, -1000, -1000, -1000, -1000, -1000, 49061, -1000, 49061,
	-1000, 49061, -1000, 1237, -1000, 63173, -210, -1000, -1000, -1000,
	-1000, -1000, 2326, 2692, 2691, 2689, -1000, 60701, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 176, 2325, -1000,
	-1000, 176, 2324, -1000, 176, 2323, -1000, 168, 2318, -1000,
	-1000, 1698, 2313, -1000, -74, 2312, -1000, -1000, -74, 2311,
	-1000, 37, -1000, -1000, -1000, 917, -1000, 30644, 54861, 39485,
	870, 681, 619, 70179, -1000, 39485, 70179, -1000, 45305, -1000,
	54443, 44893, -1000, -1000, 1152, 1905, -1000, -1000, -1000, -1000,
	39485, 39485, -1000, 54025, -1000, 1587, 1343, 2428, 49061, -1000,
	-1000, -1000, 2448, 2206, -1000, 35667, 50709, -1000, 50297, -1000,
	49885, -1000, 49061, -1000, 49061, -1000, 2688, 2686, 2682, 2327,
	1423, 1421, 60701, -1000, -1000, 60701, -1000, 60701, -1000, -1000,
	-1000, 1860, -1000, -1000, -1000, -1000, 49061, -1000, -1000, -1000,
	-1000, -1000, -1000, 2197, -1000, 1390, -1000, 1141, -1000, -1000,
	177, -1000, -1000, -34, -1000, 62761, -1000, -1000, 2110, 1850,
	-1000, 60701, -1000, -1000, -1000, 2110, 1693, 1953, 24138, 1935,
	25941, 193, -1000, -1000, 193, 193, 18742, -1000, -1000, 70974,
	70974, 13865, 1096, 25941, 25941, 25941, 25941, 25941, 25941, 25941,
	25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941,
	25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941,
	25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941, 1533, 25941,
	1076, 25941, 25941, 25941, 25941, 1389, -1000, -1000, 1506, 519,
	1546, -1000, 2597, 2597, 2597, 70539, 70539, 607, 2680, 724,
	-1000, 25941, -1000, -72, 25941, 14293, -1000, 2616, 1276, -1000,
	-1000, 462, 8175, 1771, -1000, 461, 14747, -1000, -1000, -1000,
	15629, 618, 23684, 25941, 918, 70179, 12157, 2194, 2025, -1000,
	2615, -1000, -1000, 2590, -1000, -1000, -1000, -1000, 2590, 1094,
	1092, 2614, -1000, 2590, 2590, 614, 788, 784, 783, 759,
	754, 25941, 25941, 25941, 25941, 25941, 25941, 25941, 25941, -1000,
	23243, 22789, 22335, 27264, 21881, 25941, 16070, 21427, 20973, 60701,
	-13, 2523, 25941, 187, -1000, 68970, -1000, 187, 187, 613,
	36, 70179, 1932, 1932, 29810, 1863, 1569, 1569, 1569, -1000,
	611, 713, 42, 28, 16, -1000, -1000, 5, -4, 804,
	9585, 52369, 1588, 804, 804, 295, 300, 460, 28127, 2047,
	52369, -1000, -1000, 49061, 610, 14293, 13865, 1184, 35, 289,
	1928, 1925, 1919, -1000, 1292, 26, 870, 1075, -139, -1000,
	469, 20, -1000, 1095, -1000, -1000, -1000, -1000, 128, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 922, 609, 608, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 606, 1427, 605, 605,
	605, -1000, -1000, -1000, 356, 604, 316, 602, -1000, -1000,
	-1000, -1000, -1000, -1000, 2145, -59, 49473, 797, 14, 1016,
	-34, -1000, 1040, -1000, 1637, -1000, -1000, -1000, -1000, -1000,
	-1000, 1161, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2628,
	-1000, 2604, -1000, -1000, 2611, -17, -1000, -1000, 13865, -1000,
	-46, 1364, -1000, 41137, 2438, 2437, 2418, 1236, -1000, 1211,
	2477, 44057, 2497, 2515, 32, -1000, 2143, -1000, -1000, 834,
	1375, 1074, 44057, 1411, -1000, 70974, -1000, 2056, 2476, 1179,
	1216, 1179, 1179, 1177, -1000, 44057, 1072, 1475, 39485, -1000,
	1071, -1000, -47, 2494, 2502, 17, -1000, 2142, 1070, -1000,
	-1000, 49061, 13865, 757, -19, 36491, 60701, 197, -1000, 25941,
	-72, 25941, -72, -1000, -1000, 2309, -1000, -1000, -1000, 2679,
	1418, 1886, -1000, -1000, -1000, 597, 1817, 1411, 1813, -1000,
	-1000, 44475, 2120, 60701, 1938, -29, 49061, -1000, -1000, 1473,
	-1000, 2304, 2296, 594, 2675, -1000, 1694, 1798, -1000, -1000,
	-1000, 62349, 1098, 2295, 914, 126, 2521, 126, 34002, -1000,
	60701, -1000, 60701, -1000, -1000, -1000, 2668, -1000, 49061, -1000,
	-1000, 49061, -1000, 49061, -1000, 49061, -1000, 49061, 49061, -1000,
	60701, 39485, 39485, 39485, 3881, 40313, 12, 459, -1000, 53613,
	60701, 978, 40725, 60701, -200, 870, 757, -1000, 757, -1000,
	49061, 2189, -1000, -1000, -1000, -1000, -1000, -1000, 2667, 2666,
	-1000, 889, -1000, -1000, 60701, -1000, 60701, -1000, -1000, 60701,
	-1000, 60701, -1000, 60701, -1000, -1000, -1000, -1000, -1000, 1257,
	-1000, 2176, -1000, 2149, -1000, 58, -1000, -1000, -1000, -1000,
	1401, 49061, 49061, 49061, -1000, 44057, -1000, -1000, 2110, -1000,
	-1000, -1000, -1000, -1000, 70179, -1000, 501, -1000, -1000, 70179,
	1387, 1946, -1000, 1946, -25, -1000, 68584, 1900, 49061, -1000,
	-1000, -1000, -1000, -1000, 831, 491, 491, 1090, 1090, 1090,
	1090, 2557, 772, 4229, 1222, 256, 256, 256, 256, 256,
	256, 256, 256, 835, 463, 463, 835, 835, 835, 835,
	835, 463, 463, 463, 256, 256, 256, 70539, 70462, 6219,
	25941, 25941, 1067, 1503, 519, 5904, 25941, 276, 276, 276,
	276, -1000, 1520, -1000, -1000, -1000, -1000, 2113, 596, 27264,
	27264, -1000, -1000, -1000, -1000, 15188, 25941, -1000, -1000, -1000,
	-1000, 20519, -1000, -1000, 68224, -239, 451, -186, 43, -1000,
	25941, 25941, 25941, 450, -1000, 449, -1000, -1000, 1065, -1000,
	1063, 1055, 1054, -1000, 595, 194, 25941, 60701, -1000, 66063,
	711, -106, -1000, 8, 1234, -1000, 25941, 156, -1000, 1566,
	592, 591, 448, 6, -1000, 445, 829, 814, 441, 438,
	437, 25941, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 70076, 65986, 65703, 65600, 7651, 65317, 65240, -9,
	436, -1000, 2106, -186, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 435, -1000, 433, -1000, 69793, -186, 431, 676, -1000,
	27264, 27264, 27264, -1000, 430, -1000, 68687, -1000, 69716, 20078,
	20078, 20078, 428, 69433, 25941, -186, -15, -1000, -36, -1000,
	-1000, 589, -37, 914, 19624, 28975, 13865, -1000, 914, 914,
	25941, -1000, 25941, 1912, -1000, -1000, -1000, 1911, 1927, 1932,
	29810, -1000, -1000, -1000, -1000, 52369, 623, 804, -1000, -1000,
	-1000, -1000, -1000, 52369, -1000, 2581, 2035, -1000, -1000, -1000,
	60701, 488, -1000, 52369, 52369, 13865, 804, -1000, 427, 32336,
	43, 129, -1000, -1000, 13865, 2020, 2020, 2020, -1000, -1000,
	2099, 60701, 2540, -1000, 1459, -1000, 70974, -1000, 722, 1042,
	-1000, 2610, 588, -1000, 2590, 2590, 60701, 155, 19183, -1000,
	1040, -1000, -1000, 1334, -1000, 1441, -1000, 1087, -1000, -1000,
	-1000, 19183, -1000, 1702, 60701, 60701, 49061, -1000, -1000, 1792,
	61937, 1789, 70974, 60701, -1000, -1000, 587, 586, 1899, 1897,
	60701, 60701, 61525, 61113, 60701, 1565, 25941, 1799, 1367, -72,
	-72, -1000, -1000, -72, 585, 1073, 49061, 49061, 49061, 1347,
	-1000, -1000, -1000, -1000, -1000, 49061, -1000, -1000, 2609, -1000,
	1179, -1000, -1000, -1000, 1179, 1411, 1331, 49061, 39485, 901,
	60701, 1479, -72, -72, -1000, -1000, -72, 584, 13865, 1452,
	-1000, 1989, -1000, -1000, -1000, 11731, 70179, -1000, 70179, -1000,
	60701, -1000, 940, 60701, 40725, 846, 2294, -1000, 1411, 2293,
	488, -1000, -1000, 33586, -59, 870, 39485, 49061, -29, 39485,
	39485, 39485, 2665, 582, 2664, -1000, 49061, 2288, 1683, 1778,
	2285, 753, 60701, 1594, -1000, 25941, 1376, -1000, 32754, 966,
	60701, 1305, 145, -1000, -1000, -1000, 60, 60701, -1000, 2663,
	-1000, -1000, 176, 176, 176, -1000, 168, 1698, -1000, -74,
	-74, -1000, -1000, 3881, 870, -33, 581, -1000, 776, 774,
	31494, 39485, -38, -1000, -1000, -1000, -1000, -1000, 49061, 60701,
	697, 1981, 60701, -49, -1000, 127, -1000, 870, -1000, -1000,
	900, -1000, 1109, -1000, -1000, -1000, -59, -59, -1000, -1000,
	-1000, -1000, 1256, 1244, 60701, -1000, 13865, 60701, 49061, 13865,
	49061, -1000, -1000, -1000, -1000, -1000, 1387, -1000, 25941, -1000,
	-1000, -1000, 18742, -1000, -1000, -1000, 49061, -204, 25941, 25941,
	5443, 5367, 25941, 27264, 27264, -1000, 25941, 4689, -1000, -1000,
	-1000, -1000, -1000, 2092, 580, 25941, 70974, 5291, 4838, -1000,
	418, 8833, 835, -1000, 25941, -1000, 415, 18301, -1000, 69047,
	2, -50, -1000, 2627, 1841, 1443, 1374, 1272, 2607, 11305,
	-186, -51, -1000, -1000, 720, -1000, 2282, -1000, 25941, 69330,
	10879, -1000, 34418, 915, 1594, -1000, -1000, 2590, 830, -1000,
	-1000, -1000, 830, -1000, 67941, 70974, 70974, 25941, 25941, -1000,
	25941, 25941, 25941, -1000, -1000, 25941, -1000, -1000, 2065, 25941,
	-1000, 70974, 70974, 27264, 27264, 27264, 27264, 27264, 27264, 27264,
	27264, 27264, 27264, 27264, 27264, 27264, 27264, 27264, 27264, 27264,
	27264, 27264, 1824, 27264, 2592, 2592, 2592, -1000, 2038, 2065,
	25941, 25941, 70974, 413, 412, 410, -1000, 25941, -186, -1000,
	-1000, 3881, -1000, 2017, -1000, -187, -1000, 2047, -1000, -1000,
	2017, 2017, -58, 70179, 29810, 29810, -1000, 579, 25941, 1901,
	-1000, 709, -1000, -66, -1000, 52369, -1000, 708, -240, -1000,
	773, -1000, -1000, -1000, -1000, 488, -1000, -1000, -1000, 61,
	52369, -1000, -70, -1000, 2520, 409, 13865, -1000, -1000, -1000,
	-1000, -1000, -1000, -72, -59, 1611, 2624, -1000, 2602, 719,
	707, 407, 2590, 406, 405, -59, 60701, -1000, -34, -1000,
	-1000, -1000, 25941, -1000, -1000, 2434, 1053, 1052, -1000, 2276,
	-1000, 1774, -1000, 971, -1000, 1345, -1000, 25941, 25941, 577,
	576, 1474, 2662, 2266, 1698, 2263, 1698, -1000, -1000, 840,
	-1000, 70179, 575, 572, -1000, -46, 1362, 895, -1000, -1000,
	25941, 25941, 53197, -1000, 2426, 2426, -1000, 1051, -1000, -1000,
	-1000, 1411, 1048, -1000, -1000, 1467, -1000, -1000, 894, -1000,
	-1000, 25941, -1000, -47, 1033, 870, 2063, -1000, 2659, 2658,
	2657, 401, -75, -48, 70974, 2510, 1672, 60701, 49061, 49061,
	2509, 815, -1000, 2581, -1000, -1000, -1000, -1000, 891, -1000,
	-1000, 2656, -1000, 977, 13865, 49061, 2262, 1874, 753, 39901,
	-1000, 891, 1953, 70179, -1000, 1305, 17847, 2423, -80, -1000,
	-1000, -1000, 914, 34002, 29810, 25941, 2650, -81, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52785, 52785, 39485, 39485,
	39485, 870, 60701, 60701, 40725, 2646, 558, 60701, 60701, 548,
	-1000, 60701, 60701, 2645, -1000, -1000, 1605, 49061, -1000, -1000,
	889, -1000, -1000, 1499, 1728, 1499, 1607, 67838, -1000, 2441,
	13865, 2508, 276, 25941, 25941, 3903, 4346, 4004, 276, 25941,
	25941, 70974, 70710, -82, 25941, 25941, -1000, 25941, 702, 70179,
	2622, 25941, 400, 392, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 391, -1000, -1000, -1000, -1000, -1000, 70179,
	25941, 44, -1000, -1000, -1000, 64821, -1000, 25941, 389, 385,
	-1000, -1000, -1000, 377, 366, 8511, 7073, 67555, 67478, 67195,
	70179, 2038, 70179, -1000, -1000, 780, 780, 1156, 1156, 1156,
	1156, 2592, 213, 530, 1041, 698, 698, 698, 858, 539,
	539, 698, 698, 698, 2054, 1883, 547, 5353, -1000, -1000,
	70179, 70179, 365, -1000, -1000, -1000, -186, 354, 2011, 2475,
	-1000, 29810, 2011, 2011, -1000, -1000, 1927, 60701, 70179, 29810,
	-210, -1000, 2581, -1000, -1000, 2035, -1000, 10023, -1000, 13865,
	-1000, -1000, 32336, -1000, 546, -1000, 18, -1000, -1000, -1000,
	701, 2644, 716, -1000, 353, -1000, -1000, -59, 70179, 60701,
	60701, 60701, 2260, -1000, 3464, -1000, 67092, -86, -1000, 68584,
	25941, 60701, -1000, 1450, 1984, 1003, -1000, 60701, -1000, 60701,
	-1000, -1000, 60701, 60701, 49061, 2246, -87, 70179, -60, -1000,
	758, -1000, -1000, 49061, 49061, 39485, 2221, -88, 13865, -1000,
	39485, -1000, -1000, -1000, 1964, -1000, 51539, 1677, -72, -1000,
	2642, 543, 1411, -72, -1000, 1598, -1000, 700, -1000, -1000,
	541, 60701, 1678, 538, 13865, 1881, 753, 39901, -1000, 1098,
	1305, -1000, -1000, -67, -1000, 578, -72, 1594, -1000, -68,
	70179, -1000, 755, -1000, -99, -1000, -1000, 350, -1000, 2393,
	2390, -1000, -1000, 25941, 537, 536, 60701, 2389, -1000, -1000,
	1786, -1000, -1000, -1000, -1000, 13865, 1353, -1000, -1000, -1000,
	-1000, 2441, 276, 276, 25941, 25941, 25941, 276, 70710, -114,
	-1000, 276, 276, -186, -1000, -1000, 69047, -1000, -1000, -1000,
	70179, 10453, 1524, -1000, 66809, -1000, -1000, -1000, -1000, 25941,
	25941, -1000, -1000, -1000, -1000, -1000, 27264, 2050, 529, 70974,
	-1000, -1000, 907, 25941, 25941, 2047, 907, 907, -1000, -118,
	-1000, 804, -1000, -1000, -1000, 2581, 18, -1000, 2640, 13865,
	715, -1000, 2639, -1000, -1000, -1000, -1000, 60701, -1000, 60701,
	-1000, 13865, 60701, 2075, 1769, -1000, -1000, 1894, 527, 27264,
	49061, 799, 2053, 1462, 25941, -1000, -122, -123, 1762, -1000,
	-1000, 1740, 25941, -1000, 70974, 1698, 1698, -124, -130, -1000,
	25941, 1031, 60701, 17406, -1000, -1000, -1000, 25941, 1030, -1000,
	-74, 1479, 1997, -1000, -1000, -1000, -1000, 1893, -1000, -1000,
	60701, 1890, 884, -1000, 40725, 846, -1000, -1000, 860, -1000,
	25941, -1000, 49061, 25941, 1669, -1000, 753, 39901, -1000, 2285,
	-1000, 2299, 60701, 2417, -1000, 1953, 519, -1000, 870, 518,
	517, -131, 25941, 25941, -135, 515, -79, -1000, 790, 778,
	-1000, -1000, 49061, 49061, -1000, 276, 276, 276, -1000, 347,
	-1000, -1000, 1594, 2472, -1000, 66732, 66449, 3661, 27264, 70974,
	-137, -1000, 60701, 70179, -186, -1000, -1000, -1000, 52369, 699,
	-1000, 2638, -1000, -1000, 1753, -1000, -1000, -1000, 60701, 1773,
	-1000, -1000, 25941, 5353, 514, 25941, -1000, -1000, 1955, 2107,
	1964, 513, -1000, -1000, -1000, -1000, 1396, -1000, -1000, 70179,
	2454, -1000, -1000, 509, 508, 70179, 507, 749, 2044, -1000,
	70179, 505, 846, -1000, 1556, 1677, 503, -1000, -1000, -1000,
	1949, 345, 2504, 860, -1000, 2565, -1000, -141, 977, -142,
	49061, 39901, -1000, 1874, 1146, -146, 60701, 1305, -1000, -1000,
	39485, 39485, 1462, -152, -153, -1000, 39485, 1786, -1000, 60701,
	-1000, 60701, -1000, -1000, -1000, 1616, 25941, -1000, -1000, 3661,
	-154, -1000, -112, -1000, 2501, -1000, -1000, -1000, -1000, -1000,
	2258, 66346, 1852, 60701, 9150, 2073, -1000, -1000, 1479, 60701,
	49061, 975, 13865, 1499, 1499, 25941, 16965, 1548, 25941, -1000,
	49061, 60701, -1000, 2387, 1964, -72, -1000, -1000, 1462, 500,
	1462, 499, -1000, 1881, 1228, -1000, 914, -1000, -1000, -162,
	-167, 1964, 1462, -1000, -171, -1000, -173, -175, 340, 26823,
	26823, 26823, -186, -1000, 60701, 495, 2235, -1000, 1642, 1417,
	301, 976, -1000, -1000, 2053, -177, 488, -1000, 25941, -1000,
	-190, -1000, 961, -194, -1000, 959, -196, -1000, 2043, -1000,
	-201, 480, -202, -1000, -1000, -1000, 1479, 884, 1964, 25941,
	1964, 25941, -1000, 34002, -1000, 870, 870, 1479, 1964, 870,
	-1000, -1000, -1000, -1000, -1000, 27690, 1676, 1295, 68301, -1000,
	-1000, -1000, -1000, 60701, -1000, 1666, 1657, 1281, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1852, 70179, -1000, 1499,
	1994, -1000, 1499, 2040, -1000, 1505, -1000, 60701, -1000, 60701,
	846, -1000, 1479, -207, 1479, -212, -185, -1000, -1000, -1000,
	1479, -1000, 2506, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2373, -1000, 985, 1539, 1539, 1642, -1000, 478, -1000, 477,
	-1000, -213, -1000, -1000, 909, 1462, 909, 1462, -1000, -1000,
	26382, -1000, 2548, -1000, -1000, 1914, -1000, 2053, 25941, 25941,
	1663, -1000, 2636, 1964, -1000, 1964, -1000, -1000, -1000, -1000,
	-1000, -218, -219, -1000, -1000, -1000, -1000, 1479, 1479, 1479,
	1029, 909, 909, -1000, 476, -1000, -1000, 25941, -227, 1479,
	-1000,
}
var sqlPgo = [...]int{

	0, 3325, 3324, 3323, 3320, 3319, 3315, 3314, 3308, 3307,
	3303, 3300, 3299, 3298, 3295, 3294, 3293, 3290, 3288, 3287,
	3279, 3278, 3276, 3274, 3273, 3270, 3269, 3268, 3265, 3264,
	3258, 3256, 3252, 3251, 3250, 3249, 3247, 3242, 3237, 3233,
	3231, 3228, 3226, 3224, 3221, 3220, 31, 3218, 3217, 3216,
	3215, 3213, 3211, 3210, 3208, 3204, 3202, 3201, 3200, 3196,
	3191, 3188, 3185, 3180, 35, 3179, 220, 3177, 3171, 3169,
	3168, 3166, 3165, 3164, 3163, 3162, 3160, 218, 3159, 107,
	3158, 3157, 3155, 3152, 3151, 217, 3145, 3141, 3137, 3136,
	3133, 3129, 3128, 3127, 3126, 139, 3124, 3123, 3120, 3119,
	3117, 3115, 3114, 3110, 3109, 3108, 193, 3107, 215, 3106,
	3105, 3103, 3102, 3101, 3099, 3098, 3097, 3096, 3095, 3090,
	3087, 3086, 3084, 3081, 3077, 3076, 3075, 3072, 3066, 3065,
	3064, 3063, 3061, 3060, 209, 143, 3059, 3058, 214, 212,
	3057, 3056, 98, 91, 66, 3054, 87, 141, 203, 5308,
	187, 3053, 3052, 3050, 3048, 3047, 67, 134, 136, 133,
	124, 88, 3044, 3041, 69, 53, 32, 29, 104, 3040,
	3038, 3037, 2007, 96, 3035, 3031, 204, 189, 3030, 435,
	3021, 149, 106, 93, 99, 90, 3019, 112, 23, 3010,
	135, 50, 3008, 123, 68, 36, 5822, 5663, 3003, 72,
	211, 75, 197, 182, 179, 183, 168, 128, 336, 3002,
	192, 2994, 86, 155, 2993, 2992, 2991, 43, 151, 77,
	2990, 6, 3, 142, 20, 84, 13, 2989, 11, 2988,
	2986, 2985, 2983, 21, 129, 2982, 102, 65, 2978, 26,
	2976, 92, 163, 2974, 169, 2973, 94, 2967, 201, 157,
	161, 14, 171, 2958, 2956, 2955, 2953, 2949, 100, 17,
	97, 2948, 2946, 109, 188, 2945, 34, 125, 73, 103,
	213, 113, 167, 76, 175, 137, 177, 2944, 2942, 2940,
	153, 2938, 2933, 138, 160, 2932, 2931, 208, 33, 56,
	185, 51, 2930, 2929, 120, 2928, 154, 2927, 2926, 2922,
	206, 140, 164, 8, 62, 89, 27, 9, 178, 115,
	95, 85, 2921, 3073, 1192, 349, 2919, 111, 83, 40,
	108, 110, 202, 54, 2917, 2916, 1148, 2915, 2914, 2913,
	2911, 144, 2909, 2907, 2906, 116, 55, 63, 2904, 2903,
	119, 61, 12, 117, 207, 80, 166, 186, 194, 2899,
	145, 2896, 37, 118, 2895, 150, 195, 70, 2894, 1530,
	132, 2893, 165, 2892, 2891, 2890, 2889, 277, 2888, 2886,
	1358, 2885, 114, 2884, 2883, 148, 131, 146, 81, 28,
	2879, 59, 79, 2876, 159, 44, 2875, 2561, 127, 0,
	6292, 4670, 3919, 2874, 30, 2873, 162, 105, 2872, 2871,
	2870, 71, 2869, 57, 2866, 2865, 38, 2862, 15, 5,
	7, 18, 16, 352, 172, 2841, 2839, 74, 101, 121,
	2838, 205, 170, 2837, 2836, 2834, 64, 2830, 24, 2828,
	22, 2823, 2822, 25, 4, 2818, 2817, 190, 2816, 191,
	2815, 2814, 2533, 2812, 200, 2810, 126, 2808, 130, 158,
	2805, 2804, 2802, 2799, 196, 2797, 199, 2796, 10, 19,
	1, 2795, 2794, 2790, 156, 2, 2376, 2789, 2788, 58,
	152, 2787, 2786, 147,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 14, 26, 26, 15, 15, 27, 27, 444, 444,
	18, 29, 19, 30, 12, 446, 446, 446, 446, 22,
	20, 20, 31, 31, 145, 145, 145, 145, 17, 17,
	25, 25, 158, 158, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 443, 443, 160, 160, 159,
	155, 155, 447, 447, 161, 161, 161, 163, 163, 35,
	35, 93, 93, 93, 146, 86, 86, 86, 86, 86,
	86, 86, 86, 81, 81, 387, 387, 388, 388, 141,
	141, 142, 142, 142, 142, 143, 143, 144, 144, 144,
	49, 37, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 40, 40, 47, 47, 47, 47, 135, 135,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	452, 452, 453, 453, 454, 454, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 61, 61, 235, 235, 211, 211, 62, 62, 62,
	63, 63, 64, 64, 51, 51, 439, 439, 249, 249,
	354, 354, 66, 66, 67, 67, 67, 67, 67, 67,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 75, 75, 75,
	76, 76, 76, 73, 73, 73, 71, 71, 71, 70,
	70, 70, 74, 74, 74, 72, 72, 72, 250, 250,
	77, 77, 77, 77, 77, 77, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 356,
	356, 78, 78, 78, 324, 324, 82, 82, 82, 281,
	281, 83, 83, 83, 83, 83, 84, 84, 84, 84,
	94, 94, 94, 94, 442, 442, 242, 242, 176, 176,
	176, 176, 89, 89, 89, 89, 90, 90, 90, 91,
	91, 140, 140, 100, 100, 100, 100, 100, 99, 99,
	99, 99, 99, 99, 41, 41, 41, 42, 42, 43,
	43, 44, 44, 45, 45, 46, 46, 46, 46, 46,
	102, 102, 448, 448, 104, 101, 101, 101, 103, 103,
	103, 103, 105, 106, 106, 106, 106, 106, 106, 107,
	107, 381, 381, 257, 257, 379, 379, 395, 395, 380,
	380, 215, 215, 215, 215, 215, 216, 216, 216, 386,
	386, 386, 386, 386, 386, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 125, 125, 125, 134, 134, 134,
	134, 134, 134, 134, 127, 127, 127, 117, 117, 109,
	109, 109, 109, 113, 113, 113, 113, 113, 110, 110,
	114, 114, 116, 116, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 111, 111, 111, 111, 120, 120, 120,
	120, 287, 287, 287, 119, 119, 339, 339, 130, 130,
	130, 130, 130, 130, 338, 338, 126, 126, 126, 126,
	129, 129, 129, 129, 271, 271, 123, 123, 123, 124,
	124, 124, 128, 128, 131, 131, 131, 131, 112, 112,
	112, 457, 457, 457, 132, 132, 122, 122, 133, 133,
	133, 133, 133, 133, 133, 133, 121, 121, 121, 445,
	445, 115, 440, 440, 437, 437, 437, 437, 437, 437,
	437, 438, 438, 441, 441, 87, 87, 87, 56, 56,
	458, 458, 458, 57, 57, 459, 459, 459, 456, 456,
	456, 456, 456, 456, 456, 456, 217, 217, 218, 218,
	305, 305, 305, 305, 305, 221, 221, 162, 162, 162,
	224, 225, 225, 222, 222, 223, 223, 223, 227, 227,
	226, 229, 229, 228, 304, 402, 402, 404, 404, 404,
	404, 404, 404, 404, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 400, 400, 400, 401, 396, 396,
	397, 397, 397, 397, 219, 219, 220, 220, 220, 220,
	398, 399, 240, 240, 342, 403, 403, 405, 405, 407,
	460, 460, 460, 460, 460, 460, 461, 461, 303, 303,
	233, 233, 408, 408, 408, 408, 409, 409, 409, 409,
	409, 412, 411, 410, 410, 410, 410, 410, 334, 334,
	334, 60, 60, 60, 268, 268, 267, 267, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 137, 137, 58, 58, 58, 168, 168, 55,
	55, 55, 463, 463, 59, 59, 59, 464, 464, 65,
	65, 65, 65, 65, 65, 54, 54, 54, 54, 54,
	465, 465, 288, 288, 286, 286, 239, 239, 341, 180,
	180, 156, 156, 156, 21, 23, 23, 16, 16, 32,
	32, 33, 33, 28, 28, 449, 449, 450, 450, 88,
	88, 92, 92, 92, 98, 98, 136, 136, 136, 136,
	136, 136, 136, 36, 36, 36, 36, 48, 48, 48,
	48, 96, 467, 467, 467, 97, 97, 466, 466, 175,
	175, 175, 175, 177, 177, 300, 300, 301, 301, 468,
	468, 302, 302, 302, 302, 170, 169, 171, 171, 53,
	53, 53, 164, 164, 165, 165, 166, 166, 167, 167,
	469, 469, 85, 85, 85, 139, 139, 210, 210, 296,
	296, 296, 234, 234, 185, 185, 299, 299, 297, 297,
	297, 297, 266, 266, 266, 138, 138, 245, 245, 259,
	259, 260, 260, 351, 351, 261, 95, 95, 149, 149,
	147, 147, 147, 147, 147, 147, 470, 470, 148, 148,
	148, 150, 150, 150, 150, 150, 150, 150, 153, 153,
	153, 153, 154, 154, 154, 152, 152, 419, 419, 419,
	421, 421, 422, 418, 418, 420, 420, 462, 462, 270,
	270, 270, 231, 232, 230, 230, 237, 237, 236, 238,
	238, 340, 340, 340, 264, 264, 264, 264, 291, 291,
	289, 289, 290, 290, 292, 292, 293, 293, 293, 294,
	294, 295, 295, 263, 263, 320, 320, 151, 151, 151,
	244, 244, 244, 246, 246, 311, 311, 311, 311, 311,
	311, 312, 312, 310, 310, 310, 310, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 344, 344, 247, 247,
	345, 298, 298, 435, 435, 435, 436, 436, 337, 337,
	346, 346, 346, 346, 346, 346, 335, 335, 336, 336,
	352, 353, 353, 274, 274, 274, 274, 272, 272, 275,
	275, 275, 275, 273, 273, 347, 347, 347, 347, 265,
	265, 348, 348, 348, 349, 306, 307, 307, 357, 357,
	357, 357, 357, 372, 243, 243, 243, 243, 243, 471,
	471, 358, 358, 358, 358, 358, 358, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 362,
	362, 362, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	371, 371, 371, 371, 371, 363, 363, 368, 368, 369,
	369, 369, 364, 365, 370, 370, 370, 370, 472, 472,
	374, 374, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 360, 360, 360, 367, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 282, 282,
	283, 283, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 315, 315, 315,
	315, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 413, 413, 413, 413,
	413, 413, 413, 413, 416, 416, 417, 417, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 423, 423, 424,
	424, 426, 426, 427, 427, 428, 429, 429, 429, 430,
	431, 431, 425, 425, 432, 432, 432, 432, 433, 433,
	434, 434, 434, 434, 434, 326, 326, 327, 327, 333,
	333, 333, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 178, 178,
	178, 178, 178, 255, 255, 253, 253, 253, 256, 256,
	254, 254, 252, 252, 251, 251, 323, 323, 321, 321,
	325, 325, 276, 276, 373, 373, 373, 373, 373, 373,
	373, 277, 277, 277, 285, 278, 278, 279, 279, 279,
	279, 279, 317, 318, 280, 280, 280, 319, 319, 328,
	332, 332, 331, 330, 330, 329, 329, 308, 308, 309,
	309, 262, 262, 473, 473, 258, 258, 350, 350, 350,
	350, 213, 213, 248, 248, 212, 212, 205, 205, 206,
	206, 206, 206, 241, 241, 375, 375, 375, 376, 377,
	378, 322, 195, 194, 182, 183, 193, 192, 191, 181,
	184, 188, 189, 190, 186, 187, 201, 200, 199, 197,
	198, 355, 207, 207, 208, 208, 208, 209, 209, 209,
	209, 179, 179, 202, 202, 203, 204, 204, 196, 196,
	196, 172, 172, 172, 173, 173, 174, 174, 385, 385,
	383, 383, 383, 384, 384, 384, 384, 382, 382, 382,
	382, 382, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 391, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 394, 394,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 9, 6, 9, 6, 5, 6, 5, 1, 1,
	5, 5, 6, 6, 4, 4, 4, 4, 3, 4,
	4, 7, 4, 7, 5, 3, 5, 7, 4, 12,
	4, 12, 1, 3, 5, 5, 2, 5, 3, 6,
	4, 6, 5, 6, 6, 4, 8, 3, 4, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 0, 7,
	2, 5, 6, 2, 1, 6, 4, 9, 7, 12,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	3, 5, 7, 2, 3, 0, 3, 5, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 5, 7, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	3, 3, 4, 3, 4, 3, 5, 4, 5, 3,
	4, 5, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 4, 1, 0, 5, 4,
	6, 4, 6, 4, 1, 0, 3, 4, 4, 5,
	7, 5, 3, 3, 2, 0, 4, 2, 3, 4,
	2, 3, 3, 3, 4, 3, 3, 3, 3, 4,
	3, 1, 1, 1, 2, 3, 2, 3, 6, 6,
	7, 9, 7, 9, 3, 4, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 10, 13,
	0, 2, 3, 9, 12, 0, 2, 3, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 1, 3, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 4, 2,
	5, 5, 5, 2, 8, 9, 6, 5, 3, 1,
	5, 8, 5, 11, 3, 0, 2, 4, 3, 3,
	1, 5, 1, 3, 1, 2, 0, 1, 2, 2,
	0, 1, 3, 3, 2, 2, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 2, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 1,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 1, 0, 2, 5,
	7, 2, 1, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 2, 5, 1, 4, 2, 5, 1,
	4, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 5, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 455, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -136, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -137, -138, -139, 81, 68,
	121, 103, 108, 128, 154, 284, 313, 323, 307, -103,
	-104, 342, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -451, 83,
	-420, -69, -72, -74, -455, 113, 127, 171, 276, -90,
	-91, 309, 311, -43, -42, 122, -147, -149, -101, -102,
	-140, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, 345, 392, 40, 354,
	69, 116, 317, 21, -5, -6, -7, -8, -9, -11,
	-23, -51, -53, -54, -56, -57, -65, -59, -60, -419,
	-70, -71, -73, -75, -76, 308, -150, -148, 452, 405,
	-13, -18, -19, -14, -15, -17, -20, -16, -24, -29,
	-30, -26, -27, -25, -28, -31, -32, -33, -34, -21,
	-22, -12, 423, 431, -153, -151, -152, -154, 330, 413,
	368, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, -197, -202, -203, -204, -196, -172, -391, -394, 4,
	-389, -392, 133, 179, 246, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 76, 73, 74, 75, 78, 80, 81, 82, 85,
	86, 94, 95, 96, 97, 98, 99, 103, 106, 105,
	108, 111, 112, 113, 115, 117, 118, 121, 122, 125,
	123, 374, 376, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 279,
	280, 282, 284, 286, 288, 289, 290, 291, 292, 293,
	295, 296, 298, 299, 300, 301, 302, 307, 304, 305,
	306, 308, 309, 310, 311, 313, 315, 316, 317, 318,
	320, 322, 343, 344, 356, 323, 324, 325, 326, 327,
	328, 329, 333, 337, 334, 335, 336, 338, 331, 332,
	339, 340, 342, 345, 347, 349, 350, 353, 354, 355,
	357, 360, 361, 362, 358, 359, 352, 367, 365, 366,
	369, 370, 371, 372, 373, 375, 377, 386, 387, 389,
	392, 393, 394, 384, 396, 397, 400, 401, 402, 403,
	404, 409, 405, 407, 410, 411, 412, 418, 417, 424,
	425, 427, 428, 429, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 281, 283, 294, 319, 348, 363, 379,
	380, 381, 382, 388, 390, 413, 414, 415, 419, 426,
	257, -190, 2, -172, -172, 284, 26, 2, 26, 280,
	332, 370, 372, 2, 195, 2, -442, -242, 2, 26,
	-176, -172, 83, 154, 330, -190, 2, -442, -242, 24,
	2, -172, 2, -177, 2, 323, -172, 455, 78, 224,
	62, 319, 339, -106, 387, -105, 379, 325, -107, -381,
	2, 239, -172, 455, 455, 455, 455, 2, 368, 274,
	417, 331, 406, 96, 291, 179, -437, 2, 4, -392,
	-389, -206, -205, 368, 96, -204, -196, 445, -203, 455,
	455, 455, 2, 201, 202, 290, 289, 339, 340, 455,
	455, 455, 2, 25, 56, 77, 80, 102, 129, 149,
	152, 262, -452, 231, 271, 288, 325, 338, 367, 377,
	389, -456, 355, 57, 406, -463, 394, 111, -286, 96,
	372, 370, 224, 153, 401, 315, 157, 399, 106, 185,
	404, 403, 455, 455, 25, 56, 65, 80, 111, 129,
	149, 152, -454, 271, 288, 322, 325, 338, 367, 377,
	394, 389, 2, 417, 331, 368, 179, 96, 406, 315,
	287, -79, 2, 452, 29, 342, -146, 368, 195, 2,
	-172, 201, 202, 2, 455, 455, -437, 2, 201, 202,
	2, 57, 327, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 2,
	-134, 339, 355, 163, 39, 62, 26, 67, 97, 155,
	179, 180, 209, 77, 78, -287, -339, -338, 369, 326,
	332, 365, 387, 83, 407, 316, 429, -445, 123, 4,
	96, 239, 341, 379, 224, 38, 71, 373, 374, -462,
	2, 368, -466, 2, 387, 387, 2, -466, 2, -466,
	2, -175, 2, 387, 383, -467, 387, 426, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	-148, -150, -149, 455, 455, 455, 455, 455, -134, 339,
	2, 62, 26, -470, 147, -236, -237, 398, 193, 119,
	263, -147, -149, 2, -419, -379, 2, -313, -395, -315,
	443, 444, 438, 245, 430, -326, 102, 399, 257, -394,
	-316, -328, 120, 319, -256, 8, 9, 5, 6, 7,
	-179, -359, -322, -367, 391, 132, 248, -209, 457, 10,
	452, -416, -149, -327, 33, 158, 55, -383, -208, -361,
	-369, -365, -366, -471, 45, 51, 50, 377, 238, 333,
	334, 349, 335, 336, 43, 409, 175, 254, 256, 187,
	4, 194, -207, -196, -413, -414, -389, -390, 186, 192,
	188, 348, 189, 190, 191, 42, 294, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 414, -370, 98,
	379, 380, 381, 382, 204, 205, -172, -391, 65, 88,
	89, 87, 92, 91, 93, 90, 341, 406, 56, 32,
	165, 166, 198, 249, 167, 63, -415, 359, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 314, 346, -472, 415, 130, 131, 269, 281, 363,
	388, 390, 156, 217, 58, 59, -421, 295, -422, -190,
	-421, 455, 455, 456, 455, -230, -231, -232, 2, 26,
	109, 452, 2, -343, 2, 450, -347, -149, 212, -346,
	452, -344, -197, 258, -417, 320, -413, -414, -179, -196,
	-208, 4, -233, 452, 454, 96, 368, 66, 2, -281,
	452, -172, 26, -146, 257, 383, 456, -324, 452, 257,
	150, 260, -172, 2, 2, 343, 2, 452, -106, 60,
	387, -301, 2, -302, -169, -170, -171, -352, 200, 286,
	293, 432, 429, -379, -448, 150, 435, 383, -379, -257,
	454, 2, -347, 165, -197, 2, -194, -382, 4, -389,
	-392, -390, -393, 65, -391, 26, 28, 29, 30, 31,
	33, 34, 35, 36, 48, 55, 56, 61, 64, 66,
	77, 83, 87, 88, 90, 89, 91, 92, 93, 102,
	104, 107, 109, 110, 114, 116, 119, 132, 134, 147,
	149, 150, 154, 157, 160, 172, 183, 193, 195, 212,
	215, 222, 225, 226, 245, 248, 253, 257, 258, 262,
	263, 278, 285, 297, 312, 330, 341, 351, 364, 368,
	378, 383, 385, 391, 398, 399, 406, 408, 416, 420,
	421, 422, 423, -394, 2, -347, 165, 2, -199, 165,
	-347, -202, 2, -387, 165, -385, 10, -384, 5, 4,
	-389, -392, -390, 2, -181, -172, 2, -193, -382, 2,
	-212, 165, -197, -198, -202, 383, 456, -248, -205, -206,
	-241, -172, 454, -313, 2, -95, 2, -313, 165, 2,
	-95, 165, 2, -313, 165, 2, -95, 165, 2, 2,
	2, 389, 2, 80, 165, -172, 368, 95, 2, 306,
	-453, 322, 393, 417, 2, 2, 2, 2, 2, 2,
	2, 368, 331, -464, 295, -186, 2, -172, 147, -387,
	165, 2, -387, 165, 2, -200, -202, -200, 179, 196,
	-181, 165, 2, 372, 370, 372, 370, 150, 2, 195,
	2, 195, 2, -348, 2, -349, -197, 2, 2, 2,
	2, 2, 165, -172, 368, 95, 2, 211, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -250, 165, 2,
	-197, -250, 165, 2, -250, 165, 2, -213, 165, 2,
	-212, -181, 165, 2, -388, 165, 2, -387, -388, 165,
	2, -356, 2, -355, -384, 413, -79, 452, 339, 452,
	-387, -197, -197, -313, -95, 150, -313, -95, 147, 2,
	96, 368, -134, 2, 147, 408, 2, 8, 2, -387,
	292, 139, 2, 343, 2, 62, -287, 429, 150, 2,
	-271, 2, 423, -440, 2, 257, 150, 2, 150, 2,
	150, 2, 150, 2, 150, 2, 289, 340, 202, 386,
	210, 124, 150, -271, 2, 150, 2, 150, 2, 5,
	2, 200, 286, 356, 2, -197, -457, 2, 368, 417,
	331, 2, 2, 73, 74, 150, 2, 150, 429, 2,
	-265, -347, -300, -301, -300, 383, -177, -470, -236, -237,
	-134, 343, 2, 2, -470, -264, -289, -290, 222, 134,
	253, -270, 26, 109, -270, -270, 49, 453, 453, 11,
	12, 64, 37, 443, 444, 445, 446, 145, 447, 448,
	441, 442, 440, 433, 434, 437, 206, 207, 79, 436,
	435, 72, 229, 321, 135, 136, 137, 138, 303, 176,
	177, 178, 14, 15, 16, 30, 262, 221, 430, 169,
	346, 438, 17, 18, 19, 197, 199, 247, 41, 172,
	-178, -214, -313, -313, -313, -313, -313, 268, 452, -262,
	-308, 450, -149, 452, 452, 452, 5, 452, 5, -378,
	8, -149, -313, -326, 453, -254, 452, -149, -326, -321,
	452, 319, 450, 452, -329, -313, 454, -423, 424, -363,
	452, 283, -362, 452, -362, -362, 418, -360, 452, 431,
	425, 452, -360, 452, 452, 147, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 418,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 456,
	-421, -233, 452, -258, -350, -313, 445, -258, -258, 257,
	-251, -313, 84, -274, 203, 240, 151, 218, 314, 184,
	-378, -80, -66, -77, -85, -95, -108, -138, -139, -310,
	457, -337, 431, -149, -344, -196, -149, -346, 452, -343,
	-337, 445, -197, 452, 150, 452, 454, 150, -241, -382,
	-181, -197, -207, -208, 108, -251, -387, -437, -241, -176,
	34, -323, -357, -358, -371, -359, -368, -364, -367, 299,
	300, 298, 302, 301, 45, 51, 50, 377, 238, 333,
	334, 349, 335, 336, 43, 409, 175, 254, 256, 187,
	4, 44, 414, -370, 194, 186, 192, 188, 348, 189,
	190, 191, 42, 294, 143, 144, 142, 112, 101, 100,
	250, 47, 46, 98, 379, 380, 381, 382, 204, 205,
	415, 359, 58, 59, -437, -241, 147, -381, -251, 34,
	-301, 2, -468, 456, 220, -216, 228, 244, 162, 258,
	427, 251, -386, 5, 4, -322, -334, 102, 224, -367,
	9, 444, -375, 8, 443, -380, -379, 86, 454, -382,
	-158, 304, -157, 23, 27, 113, 411, 125, -223, 181,
	274, 120, 352, 402, -444, -446, 324, 375, 376, 75,
	251, 304, 120, -267, -269, 34, 94, 242, 270, 52,
	173, 233, 234, 354, 419, 120, 304, 423, 120, -446,
	304, -446, -160, 352, 402, -444, -446, 324, 304, -159,
	-223, 120, 457, -387, -248, 456, 456, -382, 445, 120,
	120, 120, 120, 2, 2, 245, 2, 2, 2, 152,
	-456, -454, 2, 2, 2, -197, 165, -199, 165, 2,
	-202, 417, -235, 257, -439, -249, 368, -197, -168, -418,
	423, 245, 245, 34, 452, 2, -183, 165, 2, -173,
	-172, 179, -418, 245, -348, -210, -197, -210, 342, -190,
	34, -310, 120, 2, 2, 2, -172, -161, 456, 54,
	310, 120, -161, 120, -161, 120, -161, 456, 120, -161,
	120, 456, 120, 120, 453, 456, -356, -387, -144, 423,
	150, 83, 452, 452, -388, -439, -181, 2, -197, 2,
	368, 204, -387, -387, -381, 26, 344, 2, 289, 340,
	74, -197, 68, -441, 147, -438, 315, -437, -197, 96,
	-197, 96, -197, 96, -197, -197, 2, 2, 2, 147,
	2, 386, 2, 386, 2, -172, -172, -172, 220, -197,
	147, 368, 179, 368, -161, 456, -177, -470, -264, -381,
	-470, -290, -289, -292, -313, 26, -295, 141, 241, -313,
	-315, -148, -148, -148, -238, -340, -313, 285, 179, -372,
	-357, -357, -195, -382, 379, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	221, 169, 346, 41, 172, -313, 383, -313, -313, -313,
	-313, 237, 245, 248, 391, 132, 400, 109, 251, -473,
	364, 36, -319, -149, -255, 452, -333, 31, 351, 26,
	-326, 452, 2, -308, -313, -309, -252, -251, -251, 453,
	416, 26, 109, 445, 2, 8, -282, -284, 428, 236,
	99, 164, 235, -283, 329, 453, 456, 34, 453, -313,
	-252, -325, -321, -251, -332, -331, 420, -382, 445, -424,
	140, 157, 8, -376, 8, -376, 379, 379, 8, -376,
	-376, 452, 453, 2, 453, 2, 453, 2, 453, 2,
	453, 2, -313, -313, -313, -313, -313, -313, -313, -251,
	-276, 2, -373, -251, 4, 428, 236, 99, 164, 235,
	329, -276, 2, -277, 2, -313, -251, -278, -314, -315,
	443, 444, 438, -326, -279, 2, -313, -252, -313, 48,
	215, 385, -280, -313, 150, -251, -251, 2, -251, 2,
	-422, 34, -251, -244, 456, 150, 34, 4, -244, -244,
	452, 453, 456, -275, 161, 232, 227, -275, -343, -274,
	203, -272, 266, -272, -272, -435, 452, 451, 455, 455,
	455, 455, 455, -337, -182, 450, 458, -382, -336, -335,
	34, -190, 264, -337, -337, 454, 453, -336, -197, 452,
	-251, -382, 357, 453, 454, 197, 197, 197, 320, 453,
	-144, 383, 423, -79, 259, 453, 456, -243, 33, 450,
	-284, 452, -374, 418, 452, 452, 150, -242, -448, 453,
	387, -302, -215, 293, 350, 305, 337, 366, 9, 8,
	8, 456, -382, 456, -449, 77, 383, 66, -304, 165,
	66, -396, -184, 77, -397, -172, 61, 399, 285, 149,
	-449, 77, -449, 77, 77, 342, 355, 49, -347, 37,
	37, 26, -95, 216, 150, 429, 368, 179, 383, -347,
	-269, -357, 94, 233, 234, 49, -377, -375, 444, -377,
	49, -377, -377, -377, 423, -199, -347, 383, 275, -387,
	383, 456, 37, 37, 26, -95, 216, 150, 383, -212,
	-182, -353, -352, -205, -172, 454, -313, -95, -313, -95,
	120, 2, -464, 211, 452, -219, 245, -268, -267, 245,
	-201, 2, -197, 150, -241, -354, 195, 456, -249, 275,
	120, 120, 452, 117, 291, 2, 257, 245, -183, 165,
	-164, 371, 120, -307, -306, 421, -296, -95, 452, 102,
	34, -296, -259, -260, -351, -261, -184, 452, -190, -172,
	2, -197, -250, -250, -250, -212, -213, -181, -387, -388,
	-388, -79, -355, 453, 453, -143, 261, -142, -172, 5,
	-146, 408, -218, -305, -304, -400, -401, -396, 221, 179,
	399, 196, 133, -234, -185, -184, -144, -352, -144, -353,
	-353, -197, 147, 2, 2, -271, -241, -241, -181, -181,
	-181, 339, 147, 147, 454, -271, 291, 96, 368, 274,
	179, -197, -212, -197, -347, -470, -293, -375, 452, -294,
	319, 320, 456, -156, 35, 107, 208, -197, 429, 118,
	-313, -313, 383, -473, 364, -319, 118, -313, 237, 248,
	391, 132, 400, 109, 251, 150, 452, -314, -314, 453,
	-253, -313, -313, 451, 460, 453, -237, 456, -236, -313,
	-251, -251, 453, 453, 383, 383, 383, 383, 452, 454,
	-251, -241, 451, 451, 456, 453, -330, -331, 114, -313,
	454, -429, 267, 452, 452, 453, 453, 456, 453, 429,
	429, 453, 453, 453, -313, 34, 456, 456, 456, 453,
	456, 456, 456, 453, 453, 150, 453, 453, -285, 278,
	453, 11, 12, 443, 444, 445, 446, 145, 447, 448,
	441, 442, 440, 433, 434, 435, 72, 229, 321, 14,
	15, 16, 197, 172, -314, -314, -314, 453, -317, -318,
	150, 147, 34, -280, -280, -280, 453, 150, -251, 453,
	453, 452, 453, -307, -350, -246, 2, -343, -192, -382,
	-307, -307, -251, -313, 203, 203, -273, 408, 257, -275,
	-343, -335, 453, -436, -378, -337, -336, -378, -312, -311,
	148, 35, 107, 243, 168, -190, -233, -336, -336, -382,
	-337, 453, -247, -345, -417, -237, 454, -382, -135, 5,
	248, -135, -135, 150, -241, 24, 279, -357, 450, 451,
	8, 8, 452, -376, -376, -241, 150, -379, -301, 397,
	70, 293, 379, -379, -157, 304, -184, -184, -197, 245,
	-304, 165, -163, 245, -357, -191, -172, 452, 452, 208,
	208, -184, -191, 165, -184, 165, -191, -191, -443, 293,
	252, -313, 223, 291, 246, -158, 304, -95, -95, -95,
	452, -448, 408, 108, -197, -212, -201, 304, -207, -377,
	-377, -267, 304, -199, -387, 423, -181, -159, -95, -95,
	-95, 452, -182, -160, 304, -141, 174, 445, -172, 417,
	-172, -217, -220, -218, -184, -458, 425, 423, 120, 120,
	-233, -211, -197, 450, -144, -387, -197, -387, -387, -387,
	2, 452, 2, -197, 120, 257, 245, -165, 115, -469,
	435, -181, -237, -313, -266, -299, 312, 257, -234, 413,
	-190, -266, -245, 456, 150, 435, 454, -234, 2, -161,
	-161, -161, -161, -161, -79, -144, 456, 452, 435, 435,
	452, -387, -387, 453, 456, -197, -183, 179, 179, -189,
	-173, 453, 456, 454, -144, -44, 423, 368, 339, 339,
	-172, -193, -181, -197, -194, -212, -294, -313, -340, -197,
	457, -313, -313, 118, 118, -313, -314, -314, -313, 118,
	150, 452, -313, -323, 30, 30, 453, 456, -309, -313,
	453, 416, -237, -237, 453, 5, 236, 164, 235, -283,
	235, -283, -283, 8, 445, -382, 453, -321, 116, -313,
	378, -382, 445, -430, -187, 452, -172, 421, -236, -376,
	-360, -360, 453, -372, -357, -313, -313, -313, -313, -313,
	-313, -317, -313, -372, -357, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, 109, 245, 251, -314, -318, -317,
	-313, -313, -357, 453, 453, 453, -251, -79, -263, 157,
	-353, 456, -263, -263, 453, -343, -343, 452, -313, 203,
	451, 453, 456, -336, 451, 456, 459, 435, -233, 454,
	-335, 453, 456, -298, 34, 453, -382, -95, 260, 5,
	8, 450, 451, 453, -376, 453, 453, -241, -313, 383,
	383, 120, 245, 410, -402, -397, -313, -239, -341, -313,
	452, 452, -155, 113, 342, -450, 2, 120, -161, 120,
	-161, 427, 452, 452, 383, 423, -251, -313, -145, 102,
	-381, -446, -446, 383, 383, 275, 423, -251, 383, -144,
	150, 2, 2, 2, 453, 453, 456, -403, 34, 255,
	-172, -197, -199, 34, -62, 423, -352, -378, -168, 2,
	-288, 408, -182, -197, 120, -166, 214, -469, -385, -418,
	-291, -289, -266, -258, 246, 76, 453, -307, -260, -246,
	-313, 2, 453, -142, -143, -387, -387, -387, -144, -146,
	-146, -305, 2, 452, -183, -173, 452, -146, -185, 2,
	261, -197, -271, -225, -224, 274, 251, -225, 258, 453,
	-156, -182, -313, -313, 118, 30, 30, -313, -313, -323,
	453, -313, -313, -251, 451, 5, -313, 453, 453, 453,
	-313, 454, -431, -172, -313, 453, 453, 453, 453, 456,
	456, 453, 453, 453, 453, -318, 150, 109, 251, 452,
	453, 453, -320, 160, 49, -343, -320, -320, -273, -241,
	-343, -310, -378, -311, -182, 450, -382, -345, 452, 454,
	451, 2, 450, 453, -184, -184, -304, 120, -404, 77,
	-406, 64, 133, 83, 245, 248, 399, 285, 61, 102,
	297, 34, 453, 453, 456, -156, -239, -241, 245, 361,
	102, 245, 102, 95, 394, -184, -191, -241, -241, -197,
	126, 453, 456, 435, -201, -199, -387, 126, 453, -182,
	-388, -221, 182, -184, -401, -398, -399, 285, -405, -407,
	133, 285, -95, 2, 452, -219, -268, -95, 261, 451,
	452, -172, 257, 452, -182, -167, 213, -469, -385, -164,
	-266, -297, 452, 257, -95, -237, 435, 453, 453, 95,
	95, -239, 452, 452, -241, 95, -45, -46, 179, 77,
	277, -194, 368, 179, -156, -313, -313, -313, 453, -237,
	-382, 445, -425, 274, 453, -313, -313, -314, 150, 452,
	-323, -426, 422, -313, -251, -426, -426, 453, -337, -378,
	2, 450, 2, -304, -191, -195, -188, -172, 133, 165,
	248, 208, 452, -314, -197, 452, 2, -460, 104, 183,
	-303, -461, 82, 362, -341, 453, 453, 248, 248, -313,
	-357, -161, -161, 453, 453, -313, 383, -381, 81, -379,
	-313, 383, -222, -223, 172, -403, 208, -188, 208, -459,
	423, -217, -458, -63, -64, 384, -352, -239, -197, -239,
	257, -469, -385, -165, 110, -241, 77, -291, -319, -144,
	452, 452, 453, -239, -239, 453, 452, 456, 26, 452,
	26, 452, -197, -212, 453, -237, 49, 453, 453, -314,
	-323, 453, -427, -428, -187, -336, 451, 2, -406, -188,
	245, -313, -174, 452, -313, 183, 105, 170, -221, 452,
	297, -180, 64, 452, 452, 452, 435, 150, 452, -458,
	272, 452, 95, 242, 453, 34, -64, 9, 453, -288,
	453, -197, -385, -166, 403, 246, 453, -191, -266, -388,
	-388, -303, 453, 453, -388, -46, -241, -241, -432, 291,
	320, 159, -251, 453, 456, 34, 120, 453, -408, 230,
	-172, 453, 105, 170, -222, -241, -197, -447, 408, -195,
	-227, -226, -224, -229, -228, -224, -251, -379, 81, 272,
	-251, -197, -240, -342, -184, 95, -221, -95, -303, 452,
	-303, 452, -167, 342, -306, 453, 453, -221, -303, 453,
	453, 453, 453, -433, -434, 41, 396, 86, -313, -433,
	-433, -428, -430, 133, -409, -412, -411, 257, 347, 151,
	273, 453, 361, 419, -460, 453, -233, -313, 453, 456,
	413, 453, 456, 413, 453, 150, 453, 452, 453, 456,
	-222, -459, -221, -239, -221, -239, -259, -144, -144, -222,
	-221, -144, -434, 282, 146, 319, 282, 146, -188, -411,
	257, -412, 257, 403, 106, -408, -226, 172, -228, 150,
	272, -241, -342, -458, -222, 453, -222, 453, -307, -222,
	30, -410, 242, 310, 54, 342, -410, -409, 452, 452,
	453, -465, 421, -303, -465, -303, -434, 22, 248, 102,
	-460, -251, -251, -162, 54, 310, 2, -221, -221, 453,
	453, -222, -222, -222, 383, -465, -465, 452, -251, 453,
	-222,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 356, 357,
	359, 360, 361, 363, 364, 366, 368, 370, 372, 373,
	375, 377, 378, 379, 380, 381, 383, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	445, 0, 896, 898, 900, 902, 27, 28, 0, 0,
	181, 183, 185, 0, 210, 212, 214, 215, 217, -2,
	0, 310, 311, 313, 315, -2, -2, 0, 0, 432,
	434, 0, 0, 454, 455, 0, 986, -2, 448, 450,
	452, 515, 517, 519, 521, 523, 525, 527, 528, 530,
	532, 534, 536, 538, 540, 542, 544, 546, 548, 550,
	552, 554, 556, 558, 560, 562, -2, -2, -2, 0,
	-2, -2, -2, 914, 31, 33, 35, 37, 39, 41,
	60, 266, 267, 269, 271, 273, 276, 277, 279, 1025,
	317, 319, 321, 323, 325, 0, -2, 1037, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 50, 67, 68,
	69, 70, 71, 72, 73, 74, 53, 55, 56, 62,
	63, 65, 0, 0, 1001, 1003, 1005, 1007, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	358, 362, 365, 367, 369, 371, 374, 376, 382, 384,
	386, 791, 1629, 1643, 1644, 1645, 1648, 1649, 1650, 1651,
	1652, 1653, 1984, 2064, 2065, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	0, 410, 408, 1623, 411, 1819, 413, 415, 304, 305,
	306, 307, 308, 309, 0, 164, 0, 425, 419, 424,
	426, 428, 429, 430, 431, 405, 403, 0, 425, 1675,
	423, 894, 895, 889, 890, 1852, 924, 444, -2, -2,
	-2, 1953, -2, 476, -2, 483, 1956, 1854, 486, 0,
	488, -2, 491, 897, 899, 901, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, -2, -2,
	-2, -2, 0, 0, 1710, 1599, 1645, 1602, 1597, 182,
	184, 186, 187, 0, 0, 0, 0, 0, 0, 211,
	213, 216, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 699, 0, 0, 704, 842, 843, 864, 0, 0,
	0, 0, 312, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	244, 350, 351, 0, 1026, 0, 0, 0, 0, 162,
	154, 0, 0, 687, 433, 435, 0, 153, 0, 0,
	893, 0, 0, 449, 451, 453, 516, 518, 520, 522,
	524, 526, 529, 531, 533, 535, 537, 539, 541, 543,
	545, 547, 549, 551, 553, 555, 557, 559, 561, 563,
	564, 0, 0, 0, 0, -2, -2, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 567,
	569, 570, 571, 0, 613, 616, 624, 669, 670, 0,
	833, 1027, 926, 904, 917, 926, 906, 907, 908, 909,
	910, 915, 916, 919, 0, 911, 912, 913, 32, 34,
	36, 38, 40, 42, 268, 270, 272, 274, 278, 280,
	-2, 999, 1000, 318, 320, 322, 324, 326, 436, 0,
	438, 0, 568, 990, 0, -2, 0, 1031, 1031, 1031,
	0, 0, 1000, 998, 0, 441, 442, 495, 496, 1262,
	0, 0, 0, 0, 0, 1497, 1346, 0, 497, -2,
	1377, 1379, 1932, 1953, 1496, 1381, 1382, 1383, 1384, 1385,
	0, 0, 1388, 0, 1390, 1391, 1392, 1393, 0, 1395,
	0, 1399, 1400, 1401, 0, 1937, 1576, 1641, -2, 1167,
	1168, 1169, 1170, 1171, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1637, 0, 1468, 1415, -2, 1662, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1719, -2, -2, -2, -2, -2, -2, -2, 1223, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1967, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 0, 1921,
	1938, 1939, 1944, 1946, 1940, 1929, 1438, -2, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1224, -2, 1933, 1934, 1949, 1950, 1955,
	1960, 1961, 1936, 1945, -2, -2, 1017, 1827, 1020, 791,
	1018, 1002, 1004, 0, 1006, 0, 0, 0, 1011, 1034,
	1032, 0, 1068, 1015, 1016, 1026, 1086, 1109, 0, 1091,
	0, 1109, 1135, 0, 1096, 1847, 1416, 1417, 0, 1645,
	1642, -2, 0, 0, 0, 0, 0, 0, 207, 406,
	0, 412, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 446, 447, 0, 471, 0, 475, 1928,
	-2, -2, 479, 927, 931, 932, 933, 934, 0, 0,
	0, 0, 0, 485, 0, 0, 472, 473, 489, 492,
	0, 51, 0, 1938, 1135, 52, 0, 1613, 1667, 1668,
	1669, 1670, 1671, 1967, 1983, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 54, 0, 1938, 57, 0, 1938,
	0, -2, 61, 0, 1938, 165, 166, 1658, 1659, 1663,
	1664, 1665, 1666, 64, 0, 1619, 66, 0, 1616, 75,
	0, 1938, 0, 1596, -2, 0, 0, 679, 1593, 1598,
	680, 1603, 0, 188, 189, 190, 191, 192, 1938, 194,
	195, 0, 197, 198, 1938, 200, 201, 0, 203, 219,
	220, 0, 222, 0, 1938, 0, 0, 0, 228, -2,
	245, 0, 242, 0, 232, 233, 235, 236, 237, 238,
	239, 0, 0, 0, 848, 284, 282, 1624, 0, -2,
	1938, 836, 839, 1938, 841, 853, 1627, 0, -2, 0,
	1024, 1938, 941, 700, 701, 702, 703, 0, 303, 0,
	954, 0, 956, 0, 976, 1141, 1086, 246, 247, 248,
	249, 250, 1938, 0, 0, 0, 255, 0, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 146, 1938, 329,
	348, 146, 1938, 332, 146, 1938, 335, 146, 1938, 338,
	1591, 146, 1938, 341, 342, 1938, 344, 167, 345, 1938,
	347, 0, -2, 399, 1631, -2, 353, 0, -2, 0,
	179, 0, 0, 685, 686, 0, 891, 892, 0, 456,
	0, 0, 565, 566, 0, 0, 576, 577, 578, 579,
	1825, 1735, 582, 0, 585, -2, 0, 0, 0, 589,
	590, 591, 0, 684, 593, 0, 0, 595, 0, 599,
	0, 602, 0, 604, 0, 606, -2, -2, -2, 0,
	0, 0, 0, 632, 633, 0, 638, 0, 641, 642,
	643, 0, 645, 646, 647, 648, 0, 650, 651, -2,
	-2, 655, 657, 0, 664, 0, 668, 0, 572, 573,
	146, 1139, 903, -2, 905, 0, 921, 993, -2, 0,
	437, 0, 440, 997, 991, 996, 1046, 1047, 0, 0,
	0, 0, 1029, 1030, 0, 0, 0, 988, 989, 0,
	0, 0, 0, 1502, 1503, 1504, 1505, 1506, 1507, 1510,
	1511, 1508, 1509, 1512, 1513, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 1516, 1517, 0, 0, 1519, 0, 1521,
	0, 0, 0, 0, 0, 0, 1325, 1327, 1584, 0,
	0, 1518, 1267, 1268, 1269, 1304, 1305, 0, 0, 1378,
	1581, 1580, 1380, 0, 1533, 0, 1387, 0, 1259, 1394,
	1610, -2, 0, 1497, 1528, 0, 0, 1402, 1403, 1404,
	0, 0, 1533, 0, 0, 1575, 0, 1470, 0, 1203,
	0, 1204, 1205, 0, 1206, 1207, 1220, 1233, 0, 0,
	0, 0, 1237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1225,
	0, 0, 0, 1556, -2, 0, 0, 0, 0, 0,
	1019, 0, 0, 1072, 1585, 1589, 1590, 1072, 1072, 0,
	0, 1534, 1132, 1132, 0, 0, 1128, 1128, 1128, 1126,
	1103, 0, 387, 389, 391, 393, 394, 395, 397, 1109,
	0, 1119, 0, 1109, 1109, 0, -2, 1091, 0, 0,
	1119, 1136, 1137, 0, 0, 0, 0, 0, 0, 1646,
	0, 0, 0, 1633, 0, 0, 179, 0, 417, 427,
	1026, 0, 1536, 1158, 1152, 1161, 1162, 1163, 1164, 1210,
	1211, 1212, 1213, 1214, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, -2, 1221, 1223, 1244, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1216, 0, 1191, 1191,
	1191, 1208, 1209, 1232, 1243, 1235, 1243, 1239, 1159, 1160,
	1226, 1227, 1228, 1229, 0, 421, 0, 0, 0, 0,
	-2, 481, 0, 929, 0, 935, 506, 507, 508, 937,
	938, 0, 484, 509, 510, 511, 512, 513, 514, 0,
	808, 0, 810, 1605, 0, 482, 499, 487, 0, 493,
	76, 886, 112, 0, 886, 886, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 100, 108, 88, 89, 0,
	0, 0, 0, 58, 816, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 99,
	0, 94, 78, 0, 0, 0, 102, 110, 0, 137,
	139, 0, 0, 1122, 678, 0, 0, 1646, 1601, 0,
	0, 0, 0, 221, 223, 0, 225, 226, 227, 0,
	847, 0, 234, 231, 275, 765, 1938, 815, 1938, 813,
	1628, 0, 0, 0, 301, 296, 0, 298, 834, 0,
	1023, 0, 0, 0, 0, 854, 0, 1938, 859, 1615,
	1654, 1655, 943, 0, 1147, 0, 957, 0, 0, 1142,
	0, 1144, 0, 252, 253, 254, 0, 327, 0, 144,
	145, 0, 330, 0, 333, 0, 336, 0, 0, 339,
	0, 0, 0, 0, 1026, 0, 0, 0, 156, 0,
	0, 0, 0, 0, 179, 179, 1122, 458, 1122, 460,
	0, 0, 580, 581, 583, 584, 586, 587, -2, -2,
	665, 635, 634, 592, 0, 672, 1843, 682, 594, 1710,
	597, 1710, 600, 1710, 603, 605, 608, 627, 615, 0,
	619, 0, 621, 0, 623, 635, 636, 639, 644, 649,
	0, 0, 0, 0, 832, 0, 920, 994, 996, 439,
	992, 1044, 1045, 1050, 1054, 1055, 1058, 1061, 1062, 1052,
	1262, 1012, 1013, 1014, 1038, 1039, 873, 0, 2064, 1263,
	1153, 1264, 1265, 1612, 0, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, -2, -2, -2, -2, -2,
	-2, -2, -2, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, -2, -2, -2, 1302, 1303, -2,
	1520, 1522, 0, 1584, 0, -2, 0, -2, -2, -2,
	-2, 1322, 0, 1324, 1329, 1331, 1333, 0, 0, 0,
	0, 1583, 1343, 1567, 1568, 0, 0, 1499, 1500, 1501,
	1328, 0, 1347, 1582, 1579, 0, 0, 1532, 1037, 1406,
	0, 0, 0, 0, 1413, 0, 1611, 1258, 1245, 1246,
	1247, 1248, 1249, 1250, 1260, 1398, 1530, 0, 1529, 0,
	0, 0, 1540, 0, 1574, 1570, 0, 1634, 1640, 1478,
	0, 0, 0, 0, 1608, 0, 0, 0, 0, 0,
	0, 0, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 1543, -2, -2, -2, -2, -2, -2,
	-2, 0, 1452, 0, 1454, 1534, 1553, 0, 0, 1348,
	0, 0, 0, 1497, 0, 1457, 1534, 1561, 0, 0,
	0, 0, 0, 1534, 0, 1566, 0, 1464, 0, 1466,
	1021, 0, 0, 1147, 0, 0, 0, 1588, 1147, 1147,
	0, 1067, 0, 0, 1129, 1130, 1131, 0, 0, 1132,
	0, 1123, 1127, 1124, 1125, 0, 0, 1109, 388, 390,
	392, 396, 398, 1119, 1083, 0, 0, 1614, 1089, 1118,
	0, 791, 1108, 1119, 1119, 0, -2, 1093, 0, 0,
	1037, -2, 180, 790, 0, 0, 0, 0, 407, 409,
	0, 0, 0, 401, 0, 404, 0, 1148, 1151, 0,
	1165, 0, 0, -2, 0, 0, 0, 0, 0, 474,
	0, 928, 936, 0, 503, 0, 505, 0, 809, 1607,
	1606, 0, 494, 0, 0, 0, 0, 885, 116, 1938,
	0, 148, 0, 0, 759, 1620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 90, 0, 0, 0, 0, 0, 0, 0,
	817, 818, 820, 826, 828, 0, 822, 1609, 0, 823,
	0, 825, 827, 829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 91, 0, 0, 0, 0,
	1595, 170, 1121, 1594, 1604, 0, 193, 196, 199, 202,
	0, 229, 0, 0, 707, 690, 0, 811, 814, 0,
	791, 846, 1626, 0, 283, 179, 0, 0, 297, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 1938,
	945, 951, 0, 1037, 1146, 0, 974, 959, 0, 0,
	0, 974, 978, 979, 981, 982, 0, 0, 1143, 0,
	256, 349, 146, 146, 146, 1592, 146, 146, 168, 343,
	346, 352, 400, 1026, 179, 177, 1806, 175, 172, 174,
	0, 0, 0, 708, 710, 711, 712, 713, 0, 1655,
	0, 1764, 1655, 0, 962, 964, 151, 179, 295, 457,
	462, 574, 0, 610, 629, 588, 683, 681, 596, 598,
	601, 618, 0, 0, 0, 631, 0, 0, 0, 0,
	0, 666, 667, 671, 1140, 995, 0, 1056, 0, 1053,
	1059, 1060, 0, 1041, 871, 872, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1344, 0, -2, 1323, 1326,
	1330, 1332, 1334, 0, 0, 0, 0, 0, 0, 1523,
	0, 1525, 1345, 1577, 1580, 1495, 0, 0, 1036, 1037,
	1037, 0, 1412, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 1538, 1539, 0, 1405, 0, 1571, 0, 0,
	0, 1414, 0, 0, 0, 1215, 1189, 0, 1243, 1241,
	1242, 1236, 1243, 1240, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 1437, 1449, 0, 1451, 1453, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1352, 1353, 1456, 1559, 1560,
	0, 0, 0, 0, 0, 0, 1462, 0, 1565, 1463,
	1465, 1026, 1069, 1064, 1586, 1122, 1071, 1073, 1587, 1617,
	1064, 1064, 0, 1535, 0, 0, 1113, 0, 0, 0,
	1115, 0, 1104, 0, 1106, 1119, 1088, 0, 0, 1081,
	0, 1077, 1078, 1079, 1080, 791, 1117, 1090, 1094, 1634,
	0, 1138, 0, 1098, 1101, 0, 0, 1647, 204, 208,
	209, 205, 206, 0, 416, 0, 0, 1537, 0, 1154,
	0, 0, 0, 0, 0, 420, 0, 470, -2, 501,
	502, 504, 0, 500, 113, 886, 0, 0, 877, 0,
	118, 1938, 127, 0, 736, 0, 1618, 0, 0, 0,
	0, 888, 0, 1938, 146, 1938, 146, 129, 132, 0,
	136, 134, 0, 0, 727, 77, 886, 80, 84, 92,
	0, 0, 0, 98, 0, 0, 879, 0, 821, 824,
	830, 59, 0, 881, 875, 0, 874, 138, 82, 86,
	93, 0, 883, 79, 0, 179, 0, 1600, 0, 0,
	0, 0, 0, 706, 776, 0, 0, 0, 0, 0,
	0, 289, 285, 0, 294, 300, 299, 837, -2, 840,
	849, 0, 851, 863, 0, 0, 0, 947, 951, 0,
	950, 1024, 1049, 1145, 952, 974, 0, 0, 0, 961,
	958, 955, 1147, 0, 0, 0, 0, 0, 251, 328,
	331, 334, 337, 340, 354, 155, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 1655, 1655, 0,
	1622, 0, 0, 0, 152, 459, 0, 0, 620, 622,
	635, 658, 659, 722, 0, 722, 0, 0, 1040, 873,
	0, 1266, 1307, 0, 0, -2, 0, 0, 1311, 0,
	0, 0, -2, 0, 0, 0, 1524, 1526, 0, 1579,
	1407, 0, 0, 0, 1411, 1389, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 0, 1396, 1397, 1498, 1541, 1569, 1573,
	0, 1635, 1639, 1476, 1477, 1481, 1625, 0, 0, 0,
	1234, 1238, 1418, 0, 0, 0, 0, 0, 0, 0,
	1542, 1552, 1554, 1349, 1350, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, -2, -2, -2, 1367, 1368,
	1369, -2, -2, -2, 0, 0, 0, 1555, 1557, 1558,
	1562, 1563, 0, 1459, 1460, 1461, 1564, 0, 1066, 0,
	1070, 0, 1066, 1066, 1033, 1111, 0, 0, 1134, 0,
	1086, 1105, 0, 1095, 1084, 0, 1085, 0, 1116, 0,
	1092, 1097, 0, 1100, 0, 1407, -2, 163, 418, 402,
	0, 0, 1156, 1166, 0, 1218, 1222, 422, 1120, 0,
	0, 0, 0, 147, 734, 758, 0, 0, 866, 873,
	0, 0, 120, 0, 0, 0, 128, 0, 125, 0,
	131, 135, 0, 0, 0, 0, 0, 95, 96, 97,
	0, 101, 103, 0, 0, 0, 0, 0, 0, 149,
	0, 224, 845, 230, 716, 764, 0, 766, 0, 691,
	0, 765, 815, 0, 281, 0, 288, 0, 835, 850,
	0, 0, 0, 0, 0, 949, 951, 0, 942, 943,
	974, 1048, 953, 972, -2, 971, 0, 1037, 980, 977,
	983, 984, 0, 176, 0, 171, 173, 0, 158, 0,
	0, 709, 714, 0, 0, 0, 0, 0, 963, 965,
	0, 575, 630, 660, 721, 0, 0, 662, 1051, 1057,
	1042, 873, 1309, 1313, 0, 0, 0, 1315, -2, 0,
	1337, -2, -2, 1527, 1578, 1386, 1037, 1408, 1410, 1261,
	1572, 0, 1483, 1480, 0, 1467, 1190, 1428, 1429, 0,
	0, 1432, 1434, 1435, 1436, 1551, 0, 0, 0, 0,
	1458, 1022, 1472, 0, 0, 1074, 1472, 1472, 1112, 0,
	1114, 1109, 1107, 1082, 1075, 0, 1635, 1099, 0, 0,
	1149, 1155, 0, 1217, 114, 115, 117, 0, 735, 0,
	738, 0, 0, 0, 0, 745, 746, 0, 0, 0,
	0, 0, 780, 789, 0, 868, 0, 0, 0, 122,
	141, 0, 0, 887, 0, 146, 146, 0, 0, 878,
	0, 0, 0, 0, 880, 882, 876, 0, 0, 884,
	169, 724, 0, 776, 768, 769, 770, 0, 775, 777,
	0, 0, 695, 692, 707, 690, 812, 844, 0, 286,
	0, 862, 0, 0, 0, 939, 951, 0, 944, 945,
	302, 0, 0, 0, 960, 1049, 0, 178, 179, 0,
	0, 0, 0, 0, 0, 0, 461, 463, 0, 0,
	469, 720, 0, 0, 1043, 1317, -2, -2, 1338, 0,
	1636, 1638, 1037, 0, 1469, 0, 0, -2, 0, 0,
	0, 1008, 0, 1065, 1063, 1009, 1010, 1133, 1119, 0,
	1102, 0, 1157, 119, 0, 739, 740, 1621, 742, 0,
	744, 747, 0, 749, 1657, 0, 753, 760, 781, 0,
	716, 0, 786, 787, 867, 762, 0, 121, 123, 140,
	870, 124, 130, 0, 0, 81, 0, 0, 1704, 105,
	83, 0, 690, 723, 0, 767, 0, 778, 779, 693,
	0, 0, 0, 287, 290, 0, 293, 0, 863, 0,
	0, 0, 946, 947, 0, 0, 0, 974, 985, 157,
	0, 0, 789, 0, 0, 757, 0, 0, 465, 0,
	467, 0, 661, 663, 1409, 1487, 0, 1430, 1431, -2,
	0, 1375, 1471, 1473, 0, 1087, 1076, 1150, 737, 741,
	0, 0, 795, 0, 0, 0, 784, 785, 724, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 696, 0, 716, 0, 291, 292, 789, 0,
	789, 0, 948, 949, 0, 967, 968, 970, 975, 0,
	0, 716, 789, 756, 0, 464, 0, 0, 0, 0,
	0, 0, 1482, 1376, 0, 0, 0, 748, 800, 0,
	0, 0, 782, 783, 780, 0, 791, 126, 0, 869,
	0, 728, 0, 0, 731, 0, 0, 106, 1704, 104,
	0, 0, 0, 772, 774, 697, 724, 695, 716, 0,
	716, 0, 940, 0, 969, 179, 179, 724, 716, 179,
	466, 468, 1479, 1484, 1488, -2, 1901, 1707, 0, 1485,
	1486, 1474, 1475, 0, 750, 796, 797, 0, 792, 793,
	794, 1656, 751, 752, 761, 788, 795, 142, 725, 0,
	0, 726, 0, 0, 109, 0, 111, 0, 771, 0,
	690, 694, 724, 0, 724, 0, 1147, 159, 160, 754,
	724, 161, 0, 1490, 1491, 1492, 1493, 1494, 743, 798,
	0, 799, 0, 0, 0, 800, 729, 0, 732, 0,
	107, 0, 773, 689, 860, 789, 860, 789, 966, 755,
	0, 801, 0, 804, 805, 0, 802, 780, 0, 0,
	719, 855, 0, 716, 857, 716, 1489, 803, 806, 807,
	763, 0, 0, 715, 717, 718, 861, 724, 724, 724,
	0, 860, 860, 730, 0, 856, 858, 0, 0, 724,
	733,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 441, 3, 447, 442, 3,
	452, 453, 445, 443, 456, 444, 454, 446, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 460, 3,
	433, 435, 434, 437, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 450, 3, 451, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 458, 440, 459, 438,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 436, 57776, 439, 57777, 449, 57778, 455, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1053
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1181
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1264
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1280
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1289
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1300
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1310
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1328
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1342
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1353
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1372
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1396
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1407
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1424
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1459
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1499
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1515
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1520
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1598
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1737
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1767
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1808
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1817
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1823
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1828
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1833
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1838
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1842
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1861
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1865
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1869
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1877
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1887
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1901
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1905
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1933
		{
			sqlVAL.union.val = nil
		}
	case 180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1939
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1952
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1953
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1954
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1955
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1965
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1973
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1975
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1978
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2005
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2033
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2043
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2047
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2054
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2062
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2083
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2104
		{
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			return unimplemented(sqllex, "create cast")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2111
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2112
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplemented(sqllex, "create operator")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplemented(sqllex, "create publication")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplemented(sqllex, "create rule")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplemented(sqllex, "create server")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2131
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2132
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2135
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2136
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2139
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2140
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "drop server")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2166
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2167
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2168
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2169
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2171
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2173
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2196
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2206
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2281
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2291
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2295
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2312
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2316
		{

			sqlVAL.union.val = nil
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "DELETE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2350
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2351
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2352
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2353
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2354
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2363
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2365
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2366
		{
			return helpWith(sqllex, "DROP")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2369
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2370
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2372
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2381
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2388
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2400
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2411
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2418
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2498
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2503
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2550
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "DELETE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2556
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2557
		{
			return helpWith(sqllex, "INSERT")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2569
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2571
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2576
		{
			return helpWith(sqllex, "DELETE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2577
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2578
		{
			return helpWith(sqllex, "INSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2585
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2603
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2611
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2644
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2656
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2660
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2709
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "GRANT")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2740
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2744
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2747
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2752
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2756
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2784
		{
			return helpWith(sqllex, "RESET")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2800
		{
			return helpWith(sqllex, "RESET")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2811
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2825
		{
			return helpWith(sqllex, "USE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2830
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2832
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2836
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2838
		{
			return helpWith(sqllex, "USE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2854
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2890
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2898
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2906
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2926
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2930
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2962
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3016
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3035
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3048
		{
			return unimplemented(sqllex, "set from current")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3062
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3069
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3111
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3125
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3129
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3133
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3137
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3143
		{
			sqlVAL.union.val = tree.Low
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3147
		{
			sqlVAL.union.val = tree.Normal
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3151
		{
			sqlVAL.union.val = tree.High
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3162
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3166
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3179
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3197
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3217
		{
			return helpWith(sqllex, "SHOW")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3225
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3237
		{
			sqlVAL.str = "client_encoding"
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.str = "timezone"
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3255
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3259
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3263
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3274
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3282
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3297
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3305
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3394
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3410
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3426
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3437
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = true
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = false
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = true
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = false
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3477
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3484
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = true
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3492
		{
			sqlVAL.union.val = false
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3503
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = true
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = false
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3557
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3564
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3578
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3600
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3612
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3616
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3633
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3647
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3659
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3667
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3675
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3682
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3689
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3693
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3704
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3712
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3720
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3727
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3732
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3852
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3860
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3899
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3903
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3908
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3928
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3932
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3944
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3953
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3956
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3992
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4004
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4017
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4018
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4019
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4023
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4034
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4046
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4047
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4048
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4062
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4063
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4064
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4065
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4066
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4067
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4068
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4069
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4074
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4080
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4090
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4099
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4103
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4119
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4124
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.str = ""
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4155
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4162
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4185
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4195
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4219
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4234
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4240
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4244
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4248
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4252
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4256
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4306
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4320
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4324
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4331
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4353
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4392
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4413
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4427
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4447
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4462
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4469
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4516
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4527
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4528
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4529
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4530
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4531
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4587
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4591
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4620
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4644
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4666
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4691
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4696
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4700
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4711
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4715
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4716
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4719
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4721
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4723
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4725
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4726
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4729
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4731
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4744
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4759
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = nil
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4784
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4789
		{
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4790
		{
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4798
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4806
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4807
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4810
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4811
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4817
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4819
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4821
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4823
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4825
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4827
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4843
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4857
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4872
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4886
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4900
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4903
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4904
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4908
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4923
		{
			sqlVAL.union.val = false
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = true
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = false
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4939
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4952
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4963
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4964
		{
			sqlVAL.str = ""
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4972
		{
			sqlVAL.union.val = tree.Descending
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4976
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4989
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4999
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5005
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5013
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5019
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5027
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5033
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5045
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5050
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5051
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5054
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5055
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5063
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5076
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5088
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5096
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5099
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5103
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5104
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5105
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5121
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5124
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5126
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5129
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5144
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5147
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5156
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5157
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5158
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5166
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5173
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5176
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5177
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.str = ""
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.str = ""
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5209
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5223
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5236
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5238
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5242
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5267
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5277
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5307
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5311
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.str = ""
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.str = ""
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5331
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.str = ""
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5345
		{
			sqlVAL.str = ""
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5350
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5351
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5370
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5377
		{
			return helpWith(sqllex, "INSERT")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5388
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5395
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5399
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5408
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5429
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5453
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5461
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5470
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5471
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5479
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 975:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5505
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5516
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5520
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5521
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5525
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5545
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5617
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5637
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5642
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5643
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5648
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5683
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5684
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5685
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5720
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5746
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5759
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5768
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5790
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5806
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5810
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5824
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5832
		{
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5833
		{
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5837
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = nil
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5846
		{
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5847
		{
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = true
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5855
		{
			sqlVAL.union.val = false
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5859
		{
			sqlVAL.union.val = false
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5865
		{
			sqlVAL.union.val = true
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5876
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5877
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5881
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5897
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5911
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5916
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5931
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5955
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5977
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6007
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6008
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6011
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6012
		{
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6033
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6062
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6065
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6067
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6079
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6082
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6104
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6109
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6114
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6125
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6137
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6156
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6195
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6209
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6219
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6236
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6240
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6244
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6255
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6307
		{
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6309
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6312
		{
			sqlVAL.union.val = nil
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6328
		{
			sqlVAL.union.val = true
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = false
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6382
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6389
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6402
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.str = tree.AstFull
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6412
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6416
		{
			sqlVAL.str = tree.AstRight
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6420
		{
			sqlVAL.str = tree.AstInner
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6426
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6427
		{
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.str = tree.AstHash
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.str = ""
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6489
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6494
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6512
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6518
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6526
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6555
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6568
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6576
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6577
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6599
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6601
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6609
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6621
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6622
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = types.String
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6659
		{
			sqlVAL.union.val = types.Name
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6663
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6672
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6680
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = types.INet
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6700
		{
			sqlVAL.union.val = types.Oid
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6704
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6712
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6743
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6751
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = nil
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = types.Int2
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = types.Int2
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = types.Int4
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = types.Int
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = types.Int
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = types.Int
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = types.Float4
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6802
		{
			sqlVAL.union.val = types.Float4
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6806
		{
			sqlVAL.union.val = types.Float
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6810
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = types.Float
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6818
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6826
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6834
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = types.Bool
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = types.Bool
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = types.RegType
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6875
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.union.val = types.Float
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6894
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6900
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6922
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = types.String
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = true
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = false
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6967
		{
			sqlVAL.union.val = types.Date
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6971
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6976
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6983
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6984
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6986
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6994
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7010
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = true
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = false
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = false
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = types.Interval
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = tree.Year
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = tree.Month
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = tree.Day
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = tree.Month
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = nil
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = tree.Second
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7097
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7132
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7141
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7385
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7451
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7473
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7667
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7672
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7681
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7699
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7708
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7736
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7747
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7758
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7759
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7774
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7785
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7806
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7826
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7894
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7899
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7904
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7906
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7909
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7914
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7919
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7924
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7929
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7938
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7939
		{
			return unimplemented(sqllex, "treat")
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7960
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7965
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7970
		{
			return unimplemented(sqllex, "within group")
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7971
		{
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.str = ""
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8097
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8110
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8184
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = tree.Any
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = tree.Some
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = tree.All
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = tree.Div
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.LT
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = tree.GT
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = tree.LE
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = tree.GE
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = tree.NE
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = tree.Like
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8334
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8460
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8544
		{
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8545
		{
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8617
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8625
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8669
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8691
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8700
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8711
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8720
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8728
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8832
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8840
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8858
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8875
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8906
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8913
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8938
		{
			sqlVAL.str = ""
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8944
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8948
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
