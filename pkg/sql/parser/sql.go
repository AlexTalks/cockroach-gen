// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:616
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10072

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1091,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 913,
	199, 913,
	214, 252,
	297, 252,
	306, 744,
	333, 252,
	342, 744,
	381, 744,
	405, 252,
	429, 744,
	-2, 0,
	-1, 74,
	214, 256,
	-2, 0,
	-1, 75,
	109, 1091,
	188, 1091,
	415, 1091,
	416, 1091,
	-2, 0,
	-1, 87,
	122, 1065,
	138, 1065,
	151, 1065,
	196, 1065,
	226, 1065,
	261, 1065,
	271, 1065,
	410, 1065,
	-2, 1036,
	-1, 118,
	128, 662,
	213, 662,
	300, 642,
	351, 642,
	398, 662,
	-2, 0,
	-1, 119,
	4, 1093,
	21, 1093,
	22, 1093,
	23, 1093,
	24, 1093,
	25, 1093,
	27, 1093,
	33, 1093,
	38, 1093,
	39, 1093,
	40, 1093,
	41, 1093,
	42, 1093,
	43, 1093,
	44, 1093,
	45, 1093,
	46, 1093,
	47, 1093,
	48, 1093,
	49, 1093,
	51, 1093,
	52, 1093,
	53, 1093,
	54, 1093,
	55, 1093,
	56, 1093,
	59, 1093,
	60, 1093,
	61, 1093,
	62, 1093,
	64, 1093,
	65, 1093,
	69, 1093,
	70, 1093,
	71, 1093,
	72, 1093,
	73, 1093,
	74, 1093,
	76, 1093,
	77, 1093,
	78, 1093,
	79, 1093,
	81, 1093,
	83, 1093,
	84, 1093,
	85, 1093,
	88, 1093,
	89, 1093,
	97, 1093,
	98, 1093,
	99, 1093,
	100, 1093,
	101, 1093,
	102, 1093,
	103, 1093,
	104, 1093,
	106, 1093,
	108, 1093,
	109, 1093,
	111, 1093,
	114, 1093,
	115, 1093,
	116, 1093,
	118, 1093,
	120, 1093,
	121, 1093,
	123, 1093,
	124, 1093,
	125, 1093,
	126, 1093,
	127, 1093,
	128, 1093,
	129, 1093,
	130, 1093,
	131, 1093,
	132, 1093,
	133, 1093,
	134, 1093,
	135, 1093,
	137, 1093,
	143, 1093,
	144, 1093,
	145, 1093,
	146, 1093,
	147, 1093,
	148, 1093,
	150, 1093,
	152, 1093,
	156, 1093,
	157, 1093,
	159, 1093,
	160, 1093,
	162, 1093,
	163, 1093,
	165, 1093,
	166, 1093,
	167, 1093,
	168, 1093,
	169, 1093,
	170, 1093,
	171, 1093,
	172, 1093,
	174, 1093,
	175, 1093,
	177, 1093,
	178, 1093,
	179, 1093,
	182, 1093,
	183, 1093,
	184, 1093,
	185, 1093,
	188, 1093,
	189, 1093,
	190, 1093,
	191, 1093,
	192, 1093,
	193, 1093,
	194, 1093,
	195, 1093,
	197, 1093,
	199, 1093,
	201, 1093,
	203, 1093,
	204, 1093,
	205, 1093,
	207, 1093,
	208, 1093,
	211, 1093,
	212, 1093,
	213, 1093,
	214, 1093,
	215, 1093,
	217, 1093,
	218, 1093,
	220, 1093,
	221, 1093,
	223, 1093,
	224, 1093,
	227, 1093,
	228, 1093,
	231, 1093,
	232, 1093,
	233, 1093,
	235, 1093,
	236, 1093,
	237, 1093,
	238, 1093,
	239, 1093,
	240, 1093,
	241, 1093,
	242, 1093,
	243, 1093,
	244, 1093,
	246, 1093,
	247, 1093,
	248, 1093,
	250, 1093,
	252, 1093,
	254, 1093,
	256, 1093,
	257, 1093,
	258, 1093,
	259, 1093,
	260, 1093,
	262, 1093,
	263, 1093,
	264, 1093,
	266, 1093,
	267, 1093,
	268, 1093,
	269, 1093,
	272, 1093,
	273, 1093,
	274, 1093,
	276, 1093,
	278, 1093,
	279, 1093,
	280, 1093,
	281, 1093,
	282, 1093,
	283, 1093,
	284, 1093,
	285, 1093,
	286, 1093,
	287, 1093,
	289, 1093,
	290, 1093,
	291, 1093,
	292, 1093,
	293, 1093,
	294, 1093,
	296, 1093,
	298, 1093,
	299, 1093,
	300, 1093,
	301, 1093,
	302, 1093,
	303, 1093,
	304, 1093,
	305, 1093,
	306, 1093,
	307, 1093,
	309, 1093,
	310, 1093,
	311, 1093,
	312, 1093,
	313, 1093,
	315, 1093,
	316, 1093,
	317, 1093,
	318, 1093,
	319, 1093,
	320, 1093,
	321, 1093,
	322, 1093,
	324, 1093,
	326, 1093,
	327, 1093,
	328, 1093,
	329, 1093,
	330, 1093,
	331, 1093,
	333, 1093,
	334, 1093,
	335, 1093,
	336, 1093,
	337, 1093,
	338, 1093,
	339, 1093,
	340, 1093,
	342, 1093,
	343, 1093,
	344, 1093,
	345, 1093,
	346, 1093,
	347, 1093,
	348, 1093,
	349, 1093,
	350, 1093,
	351, 1093,
	353, 1093,
	354, 1093,
	355, 1093,
	356, 1093,
	357, 1093,
	359, 1093,
	360, 1093,
	361, 1093,
	362, 1093,
	363, 1093,
	365, 1093,
	366, 1093,
	367, 1093,
	368, 1093,
	369, 1093,
	370, 1093,
	371, 1093,
	372, 1093,
	373, 1093,
	374, 1093,
	375, 1093,
	376, 1093,
	378, 1093,
	379, 1093,
	380, 1093,
	382, 1093,
	383, 1093,
	384, 1093,
	385, 1093,
	386, 1093,
	387, 1093,
	388, 1093,
	390, 1093,
	391, 1093,
	392, 1093,
	393, 1093,
	394, 1093,
	396, 1093,
	398, 1093,
	399, 1093,
	400, 1093,
	401, 1093,
	402, 1093,
	404, 1093,
	405, 1093,
	406, 1093,
	408, 1093,
	409, 1093,
	412, 1093,
	413, 1093,
	414, 1093,
	415, 1093,
	416, 1093,
	417, 1093,
	419, 1093,
	421, 1093,
	422, 1093,
	423, 1093,
	424, 1093,
	425, 1093,
	426, 1093,
	427, 1093,
	429, 1093,
	430, 1093,
	431, 1093,
	436, 1093,
	437, 1093,
	438, 1093,
	439, 1093,
	440, 1093,
	441, 1093,
	-2, 0,
	-1, 120,
	1, 966,
	203, 966,
	296, 966,
	304, 966,
	444, 966,
	467, 966,
	-2, 0,
	-1, 122,
	1, 966,
	467, 966,
	-2, 0,
	-1, 123,
	1, 966,
	467, 966,
	-2, 0,
	-1, 124,
	1, 970,
	467, 970,
	-2, 0,
	-1, 149,
	122, 1064,
	138, 1064,
	151, 1064,
	196, 1064,
	226, 1064,
	261, 1064,
	271, 1064,
	410, 1064,
	-2, 1039,
	-1, 182,
	4, 1100,
	5, 1100,
	6, 1100,
	7, 1100,
	8, 1100,
	9, 1100,
	10, 1100,
	21, 1100,
	22, 1100,
	23, 1100,
	24, 1100,
	25, 1100,
	27, 1100,
	33, 1100,
	34, 1100,
	38, 1100,
	39, 1100,
	40, 1100,
	41, 1100,
	42, 1100,
	43, 1100,
	44, 1100,
	45, 1100,
	46, 1100,
	47, 1100,
	48, 1100,
	49, 1100,
	51, 1100,
	52, 1100,
	53, 1100,
	54, 1100,
	55, 1100,
	56, 1100,
	57, 1100,
	58, 1100,
	59, 1100,
	60, 1100,
	61, 1100,
	62, 1100,
	64, 1100,
	65, 1100,
	67, 1100,
	69, 1100,
	70, 1100,
	71, 1100,
	72, 1100,
	73, 1100,
	74, 1100,
	76, 1100,
	77, 1100,
	78, 1100,
	79, 1100,
	81, 1100,
	83, 1100,
	84, 1100,
	85, 1100,
	87, 1100,
	88, 1100,
	89, 1100,
	90, 1100,
	91, 1100,
	92, 1100,
	93, 1100,
	94, 1100,
	95, 1100,
	96, 1100,
	97, 1100,
	98, 1100,
	99, 1100,
	100, 1100,
	101, 1100,
	102, 1100,
	103, 1100,
	104, 1100,
	105, 1100,
	106, 1100,
	108, 1100,
	109, 1100,
	111, 1100,
	114, 1100,
	115, 1100,
	116, 1100,
	118, 1100,
	120, 1100,
	121, 1100,
	123, 1100,
	124, 1100,
	125, 1100,
	126, 1100,
	127, 1100,
	128, 1100,
	129, 1100,
	130, 1100,
	131, 1100,
	132, 1100,
	133, 1100,
	134, 1100,
	135, 1100,
	136, 1100,
	137, 1100,
	143, 1100,
	144, 1100,
	145, 1100,
	146, 1100,
	147, 1100,
	148, 1100,
	150, 1100,
	152, 1100,
	155, 1100,
	156, 1100,
	157, 1100,
	159, 1100,
	160, 1100,
	162, 1100,
	163, 1100,
	165, 1100,
	166, 1100,
	167, 1100,
	168, 1100,
	169, 1100,
	170, 1100,
	171, 1100,
	172, 1100,
	173, 1100,
	174, 1100,
	175, 1100,
	177, 1100,
	178, 1100,
	179, 1100,
	182, 1100,
	183, 1100,
	184, 1100,
	185, 1100,
	187, 1100,
	188, 1100,
	189, 1100,
	190, 1100,
	191, 1100,
	192, 1100,
	193, 1100,
	194, 1100,
	195, 1100,
	197, 1100,
	199, 1100,
	200, 1100,
	201, 1100,
	202, 1100,
	203, 1100,
	204, 1100,
	205, 1100,
	206, 1100,
	207, 1100,
	208, 1100,
	211, 1100,
	212, 1100,
	213, 1100,
	214, 1100,
	215, 1100,
	217, 1100,
	218, 1100,
	220, 1100,
	221, 1100,
	222, 1100,
	223, 1100,
	224, 1100,
	225, 1100,
	227, 1100,
	228, 1100,
	229, 1100,
	230, 1100,
	231, 1100,
	232, 1100,
	233, 1100,
	235, 1100,
	236, 1100,
	237, 1100,
	238, 1100,
	239, 1100,
	240, 1100,
	241, 1100,
	242, 1100,
	243, 1100,
	244, 1100,
	245, 1100,
	246, 1100,
	247, 1100,
	248, 1100,
	249, 1100,
	250, 1100,
	251, 1100,
	252, 1100,
	253, 1100,
	254, 1100,
	255, 1100,
	256, 1100,
	257, 1100,
	258, 1100,
	259, 1100,
	260, 1100,
	262, 1100,
	263, 1100,
	264, 1100,
	267, 1100,
	268, 1100,
	269, 1100,
	272, 1100,
	273, 1100,
	274, 1100,
	275, 1100,
	276, 1100,
	277, 1100,
	278, 1100,
	279, 1100,
	280, 1100,
	281, 1100,
	282, 1100,
	283, 1100,
	284, 1100,
	285, 1100,
	286, 1100,
	287, 1100,
	289, 1100,
	290, 1100,
	291, 1100,
	292, 1100,
	293, 1100,
	294, 1100,
	296, 1100,
	298, 1100,
	299, 1100,
	300, 1100,
	301, 1100,
	302, 1100,
	303, 1100,
	304, 1100,
	305, 1100,
	306, 1100,
	307, 1100,
	309, 1100,
	310, 1100,
	311, 1100,
	312, 1100,
	313, 1100,
	315, 1100,
	316, 1100,
	317, 1100,
	318, 1100,
	319, 1100,
	320, 1100,
	321, 1100,
	322, 1100,
	324, 1100,
	325, 1100,
	326, 1100,
	327, 1100,
	328, 1100,
	329, 1100,
	330, 1100,
	331, 1100,
	333, 1100,
	334, 1100,
	335, 1100,
	336, 1100,
	337, 1100,
	338, 1100,
	339, 1100,
	340, 1100,
	342, 1100,
	343, 1100,
	344, 1100,
	345, 1100,
	346, 1100,
	347, 1100,
	348, 1100,
	349, 1100,
	350, 1100,
	351, 1100,
	352, 1100,
	353, 1100,
	354, 1100,
	355, 1100,
	356, 1100,
	357, 1100,
	358, 1100,
	359, 1100,
	360, 1100,
	361, 1100,
	362, 1100,
	363, 1100,
	365, 1100,
	366, 1100,
	367, 1100,
	368, 1100,
	369, 1100,
	370, 1100,
	371, 1100,
	372, 1100,
	373, 1100,
	374, 1100,
	375, 1100,
	376, 1100,
	378, 1100,
	379, 1100,
	380, 1100,
	382, 1100,
	383, 1100,
	384, 1100,
	385, 1100,
	386, 1100,
	387, 1100,
	388, 1100,
	390, 1100,
	391, 1100,
	392, 1100,
	393, 1100,
	394, 1100,
	396, 1100,
	398, 1100,
	399, 1100,
	400, 1100,
	401, 1100,
	402, 1100,
	403, 1100,
	404, 1100,
	405, 1100,
	406, 1100,
	408, 1100,
	409, 1100,
	411, 1100,
	412, 1100,
	413, 1100,
	414, 1100,
	415, 1100,
	416, 1100,
	417, 1100,
	418, 1100,
	419, 1100,
	421, 1100,
	422, 1100,
	423, 1100,
	424, 1100,
	425, 1100,
	426, 1100,
	427, 1100,
	429, 1100,
	430, 1100,
	431, 1100,
	436, 1100,
	437, 1100,
	438, 1100,
	439, 1100,
	440, 1100,
	441, 1100,
	442, 1100,
	448, 1100,
	455, 1100,
	456, 1100,
	457, 1100,
	464, 1100,
	468, 1100,
	-2, 0,
	-1, 561,
	154, 1791,
	395, 1791,
	447, 1791,
	466, 1791,
	-2, 0,
	-1, 562,
	154, 1870,
	395, 1870,
	447, 1870,
	466, 1870,
	-2, 0,
	-1, 563,
	154, 1780,
	395, 1780,
	447, 1780,
	466, 1780,
	-2, 0,
	-1, 565,
	154, 1963,
	395, 1963,
	447, 1963,
	466, 1963,
	-2, 0,
	-1, 567,
	154, 1993,
	395, 1993,
	447, 1993,
	466, 1993,
	-2, 0,
	-1, 574,
	154, 1881,
	395, 1881,
	447, 1881,
	466, 1881,
	-2, 509,
	-1, 592,
	466, 1738,
	469, 1738,
	-2, 713,
	-1, 593,
	466, 1740,
	469, 1740,
	-2, 714,
	-1, 594,
	466, 1739,
	469, 1739,
	-2, 715,
	-1, 595,
	469, 1684,
	-2, 716,
	-1, 638,
	429, 895,
	-2, 745,
	-1, 745,
	300, 643,
	351, 643,
	-2, 0,
	-1, 746,
	300, 642,
	351, 642,
	-2, 590,
	-1, 750,
	1, 672,
	463, 672,
	465, 672,
	467, 672,
	-2, 0,
	-1, 751,
	1, 712,
	151, 712,
	463, 712,
	465, 712,
	467, 712,
	-2, 0,
	-1, 759,
	1, 646,
	463, 646,
	465, 646,
	467, 646,
	-2, 0,
	-1, 762,
	1, 672,
	463, 672,
	465, 672,
	467, 672,
	-2, 0,
	-1, 763,
	1, 674,
	463, 674,
	465, 674,
	467, 674,
	-2, 0,
	-1, 764,
	1, 677,
	463, 677,
	465, 677,
	467, 677,
	-2, 0,
	-1, 768,
	1, 691,
	463, 691,
	465, 691,
	467, 691,
	-2, 0,
	-1, 769,
	1, 693,
	463, 693,
	465, 693,
	467, 693,
	-2, 0,
	-1, 813,
	138, 1102,
	151, 1102,
	226, 1102,
	261, 1102,
	-2, 1043,
	-1, 826,
	138, 1101,
	151, 1101,
	226, 1101,
	261, 1101,
	-2, 1040,
	-1, 850,
	466, 1737,
	-2, 517,
	-1, 878,
	464, 1729,
	-2, 1720,
	-1, 884,
	5, 1241,
	-2, 1771,
	-1, 885,
	5, 1242,
	-2, 1775,
	-1, 886,
	5, 1243,
	-2, 1774,
	-1, 887,
	5, 1244,
	-2, 1990,
	-1, 888,
	5, 1245,
	-2, 1883,
	-1, 889,
	5, 1246,
	-2, 1955,
	-1, 890,
	5, 1247,
	-2, 1957,
	-1, 891,
	5, 1248,
	-2, 1970,
	-1, 892,
	5, 1249,
	-2, 1958,
	-1, 893,
	5, 1250,
	-2, 1959,
	-1, 894,
	5, 1251,
	-2, 1770,
	-1, 895,
	5, 1252,
	-2, 2006,
	-1, 896,
	5, 1253,
	-2, 1844,
	-1, 897,
	5, 1254,
	-2, 1893,
	-1, 898,
	5, 1255,
	-2, 1895,
	-1, 899,
	5, 1256,
	-2, 1848,
	-1, 900,
	5, 1257,
	464, 1747,
	-2, 1738,
	-1, 906,
	464, 1748,
	-2, 1739,
	-1, 908,
	5, 1261,
	-2, 2039,
	-1, 909,
	5, 1262,
	-2, 2040,
	-1, 910,
	5, 1263,
	-2, 1847,
	-1, 911,
	5, 1264,
	-2, 2052,
	-1, 912,
	5, 1265,
	-2, 1849,
	-1, 913,
	5, 1266,
	-2, 1850,
	-1, 914,
	5, 1267,
	-2, 1851,
	-1, 915,
	5, 1268,
	-2, 2021,
	-1, 916,
	5, 1269,
	-2, 2050,
	-1, 917,
	5, 1270,
	-2, 1827,
	-1, 918,
	5, 1271,
	-2, 1828,
	-1, 919,
	5, 1285,
	-2, 2033,
	-1, 921,
	5, 1260,
	-2, 2029,
	-1, 922,
	5, 1260,
	-2, 2028,
	-1, 923,
	5, 1260,
	-2, 2045,
	-1, 924,
	5, 1277,
	-2, 2023,
	-1, 925,
	5, 1278,
	-2, 1772,
	-1, 926,
	5, 1288,
	-2, 2022,
	-1, 927,
	5, 1290,
	-2, 2061,
	-1, 929,
	5, 1301,
	-2, 1801,
	-1, 930,
	5, 1312,
	-2, 2054,
	-1, 931,
	5, 1304,
	-2, 2055,
	-1, 932,
	5, 1312,
	-2, 2056,
	-1, 933,
	5, 1308,
	-2, 2057,
	-1, 934,
	5, 1229,
	-2, 1857,
	-1, 935,
	5, 1230,
	-2, 1858,
	-1, 936,
	466, 1735,
	-2, 1719,
	-1, 937,
	464, 2082,
	-2, 1736,
	-1, 959,
	5, 1296,
	-2, 1981,
	-1, 977,
	5, 1295,
	-2, 2062,
	-1, 987,
	5, 1297,
	430, 1297,
	-2, 2024,
	-1, 988,
	5, 1298,
	430, 1298,
	-2, 2025,
	-1, 1025,
	464, 1747,
	-2, 1738,
	-1, 1053,
	154, 1993,
	395, 1993,
	447, 1993,
	466, 1993,
	-2, 0,
	-1, 1056,
	1, 495,
	467, 495,
	-2, 978,
	-1, 1176,
	315, 1716,
	457, 1716,
	-2, 1715,
	-1, 1199,
	468, 1716,
	-2, 1717,
	-1, 1237,
	306, 744,
	429, 744,
	-2, 251,
	-1, 1257,
	285, 1089,
	-2, 884,
	-1, 1266,
	265, 1742,
	-2, 0,
	-1, 1332,
	1, 370,
	463, 370,
	465, 370,
	467, 370,
	-2, 1063,
	-1, 1335,
	4, 2060,
	11, 2060,
	12, 2060,
	14, 2060,
	15, 2060,
	16, 2060,
	17, 2060,
	18, 2060,
	19, 2060,
	21, 2060,
	22, 2060,
	23, 2060,
	24, 2060,
	25, 2060,
	27, 2060,
	30, 2060,
	31, 2060,
	33, 2060,
	35, 2060,
	38, 2060,
	39, 2060,
	40, 2060,
	41, 2060,
	42, 2060,
	43, 2060,
	44, 2060,
	45, 2060,
	46, 2060,
	47, 2060,
	48, 2060,
	49, 2060,
	51, 2060,
	52, 2060,
	53, 2060,
	54, 2060,
	55, 2060,
	56, 2060,
	59, 2060,
	60, 2060,
	61, 2060,
	62, 2060,
	64, 2060,
	65, 2060,
	66, 2060,
	69, 2060,
	70, 2060,
	71, 2060,
	72, 2060,
	73, 2060,
	74, 2060,
	75, 2060,
	76, 2060,
	77, 2060,
	78, 2060,
	79, 2060,
	81, 2060,
	82, 2060,
	83, 2060,
	84, 2060,
	85, 2060,
	87, 2060,
	88, 2060,
	89, 2060,
	97, 2060,
	98, 2060,
	99, 2060,
	100, 2060,
	101, 2060,
	102, 2060,
	103, 2060,
	104, 2060,
	106, 2060,
	108, 2060,
	109, 2060,
	111, 2060,
	114, 2060,
	115, 2060,
	116, 2060,
	118, 2060,
	120, 2060,
	121, 2060,
	123, 2060,
	124, 2060,
	125, 2060,
	126, 2060,
	127, 2060,
	128, 2060,
	129, 2060,
	130, 2060,
	131, 2060,
	132, 2060,
	133, 2060,
	134, 2060,
	135, 2060,
	139, 2060,
	140, 2060,
	141, 2060,
	142, 2060,
	143, 2060,
	144, 2060,
	145, 2060,
	146, 2060,
	147, 2060,
	148, 2060,
	149, 2060,
	150, 2060,
	152, 2060,
	155, 2060,
	156, 2060,
	157, 2060,
	159, 2060,
	160, 2060,
	162, 2060,
	163, 2060,
	165, 2060,
	166, 2060,
	167, 2060,
	168, 2060,
	169, 2060,
	170, 2060,
	171, 2060,
	172, 2060,
	173, 2060,
	174, 2060,
	175, 2060,
	176, 2060,
	177, 2060,
	178, 2060,
	179, 2060,
	180, 2060,
	181, 2060,
	183, 2060,
	184, 2060,
	185, 2060,
	187, 2060,
	188, 2060,
	189, 2060,
	190, 2060,
	191, 2060,
	192, 2060,
	193, 2060,
	194, 2060,
	195, 2060,
	197, 2060,
	199, 2060,
	200, 2060,
	201, 2060,
	202, 2060,
	203, 2060,
	204, 2060,
	205, 2060,
	206, 2060,
	207, 2060,
	208, 2060,
	209, 2060,
	210, 2060,
	211, 2060,
	212, 2060,
	213, 2060,
	214, 2060,
	215, 2060,
	217, 2060,
	218, 2060,
	220, 2060,
	221, 2060,
	222, 2060,
	223, 2060,
	224, 2060,
	225, 2060,
	227, 2060,
	228, 2060,
	231, 2060,
	232, 2060,
	233, 2060,
	234, 2060,
	235, 2060,
	236, 2060,
	237, 2060,
	238, 2060,
	239, 2060,
	240, 2060,
	241, 2060,
	242, 2060,
	243, 2060,
	244, 2060,
	245, 2060,
	246, 2060,
	247, 2060,
	248, 2060,
	250, 2060,
	253, 2060,
	254, 2060,
	256, 2060,
	257, 2060,
	258, 2060,
	259, 2060,
	260, 2060,
	262, 2060,
	263, 2060,
	264, 2060,
	267, 2060,
	268, 2060,
	269, 2060,
	270, 2060,
	272, 2060,
	273, 2060,
	274, 2060,
	276, 2060,
	278, 2060,
	279, 2060,
	280, 2060,
	281, 2060,
	282, 2060,
	283, 2060,
	284, 2060,
	285, 2060,
	286, 2060,
	287, 2060,
	289, 2060,
	290, 2060,
	291, 2060,
	292, 2060,
	293, 2060,
	294, 2060,
	296, 2060,
	298, 2060,
	299, 2060,
	300, 2060,
	301, 2060,
	302, 2060,
	303, 2060,
	304, 2060,
	305, 2060,
	306, 2060,
	307, 2060,
	309, 2060,
	310, 2060,
	311, 2060,
	312, 2060,
	313, 2060,
	314, 2060,
	315, 2060,
	316, 2060,
	317, 2060,
	318, 2060,
	319, 2060,
	320, 2060,
	321, 2060,
	322, 2060,
	324, 2060,
	325, 2060,
	326, 2060,
	327, 2060,
	328, 2060,
	329, 2060,
	330, 2060,
	331, 2060,
	332, 2060,
	333, 2060,
	334, 2060,
	335, 2060,
	336, 2060,
	337, 2060,
	338, 2060,
	339, 2060,
	340, 2060,
	342, 2060,
	343, 2060,
	344, 2060,
	345, 2060,
	346, 2060,
	347, 2060,
	348, 2060,
	349, 2060,
	350, 2060,
	351, 2060,
	353, 2060,
	354, 2060,
	355, 2060,
	356, 2060,
	357, 2060,
	358, 2060,
	359, 2060,
	360, 2060,
	361, 2060,
	362, 2060,
	363, 2060,
	365, 2060,
	366, 2060,
	367, 2060,
	368, 2060,
	369, 2060,
	370, 2060,
	371, 2060,
	372, 2060,
	373, 2060,
	374, 2060,
	375, 2060,
	376, 2060,
	378, 2060,
	379, 2060,
	380, 2060,
	382, 2060,
	383, 2060,
	384, 2060,
	385, 2060,
	386, 2060,
	387, 2060,
	388, 2060,
	390, 2060,
	391, 2060,
	392, 2060,
	393, 2060,
	394, 2060,
	396, 2060,
	398, 2060,
	399, 2060,
	400, 2060,
	401, 2060,
	402, 2060,
	404, 2060,
	405, 2060,
	406, 2060,
	408, 2060,
	409, 2060,
	412, 2060,
	413, 2060,
	414, 2060,
	415, 2060,
	416, 2060,
	417, 2060,
	419, 2060,
	421, 2060,
	422, 2060,
	423, 2060,
	424, 2060,
	425, 2060,
	426, 2060,
	427, 2060,
	429, 2060,
	430, 2060,
	431, 2060,
	436, 2060,
	437, 2060,
	438, 2060,
	439, 2060,
	440, 2060,
	441, 2060,
	442, 2060,
	443, 2060,
	445, 2060,
	446, 2060,
	447, 2060,
	448, 2060,
	449, 2060,
	450, 2060,
	452, 2060,
	453, 2060,
	454, 2060,
	455, 2060,
	456, 2060,
	457, 2060,
	458, 2060,
	459, 2060,
	460, 2060,
	462, 2060,
	465, 2060,
	466, 2060,
	468, 2060,
	469, 2060,
	-2, 0,
	-1, 1340,
	154, 1963,
	395, 1963,
	447, 1963,
	466, 1963,
	-2, 0,
	-1, 1372,
	300, 643,
	351, 643,
	-2, 0,
	-1, 1396,
	1, 638,
	463, 638,
	465, 638,
	467, 638,
	-2, 0,
	-1, 1397,
	1, 663,
	463, 663,
	465, 663,
	467, 663,
	-2, 0,
	-1, 1398,
	1, 645,
	463, 645,
	465, 645,
	467, 645,
	-2, 0,
	-1, 1400,
	1, 649,
	463, 649,
	465, 649,
	467, 649,
	-2, 0,
	-1, 1425,
	1, 2013,
	463, 2013,
	465, 2013,
	466, 2013,
	467, 2013,
	-2, 689,
	-1, 1426,
	1, 1960,
	463, 1960,
	465, 1960,
	466, 1960,
	467, 1960,
	-2, 690,
	-1, 1441,
	1, 973,
	467, 973,
	-2, 978,
	-1, 1445,
	138, 1101,
	151, 1101,
	226, 1101,
	261, 1101,
	-2, 1044,
	-1, 1539,
	122, 1065,
	138, 1065,
	151, 1065,
	196, 1065,
	226, 1065,
	261, 1065,
	271, 1065,
	410, 1065,
	-2, 1470,
	-1, 1596,
	465, 1618,
	-2, 0,
	-1, 1630,
	122, 1065,
	138, 1065,
	151, 1065,
	196, 1065,
	226, 1065,
	261, 1065,
	271, 1065,
	410, 1065,
	-2, 1179,
	-1, 1689,
	464, 1300,
	-2, 1288,
	-1, 1733,
	1, 497,
	467, 497,
	-2, 978,
	-1, 1936,
	1, 640,
	463, 640,
	465, 640,
	467, 640,
	-2, 0,
	-1, 1937,
	1, 665,
	463, 665,
	465, 665,
	467, 665,
	-2, 0,
	-1, 2035,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1351,
	-1, 2036,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1352,
	-1, 2037,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1353,
	-1, 2038,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1354,
	-1, 2039,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1355,
	-1, 2040,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1356,
	-1, 2041,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1357,
	-1, 2042,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1358,
	-1, 2054,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1370,
	-1, 2055,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1371,
	-1, 2056,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1372,
	-1, 2059,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1377,
	-1, 2065,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1381,
	-1, 2067,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1389,
	-1, 2068,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1390,
	-1, 2069,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1391,
	-1, 2070,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1392,
	-1, 2172,
	5, 1257,
	154, 1629,
	464, 1747,
	-2, 1738,
	-1, 2173,
	154, 1630,
	-2, 2017,
	-1, 2174,
	154, 1631,
	-2, 1880,
	-1, 2175,
	154, 1632,
	-2, 1802,
	-1, 2176,
	154, 1633,
	-2, 1838,
	-1, 2177,
	154, 1634,
	-2, 1878,
	-1, 2178,
	154, 1635,
	-2, 1954,
	-1, 2179,
	154, 1636,
	-2, 1454,
	-1, 2248,
	1, 1180,
	2, 1180,
	87, 1180,
	122, 1180,
	138, 1180,
	151, 1180,
	155, 1180,
	161, 1180,
	164, 1180,
	187, 1180,
	196, 1180,
	206, 1180,
	222, 1180,
	226, 1180,
	245, 1180,
	261, 1180,
	265, 1180,
	271, 1180,
	323, 1180,
	325, 1180,
	410, 1180,
	420, 1180,
	433, 1180,
	434, 1180,
	435, 1180,
	444, 1180,
	463, 1180,
	465, 1180,
	467, 1180,
	469, 1180,
	-2, 1179,
	-1, 2261,
	464, 1721,
	-2, 1733,
	-1, 2281,
	464, 1299,
	-2, 1289,
	-1, 2535,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1379,
	-1, 2536,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1383,
	-1, 2542,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1385,
	-1, 2731,
	203, 978,
	296, 978,
	304, 978,
	444, 978,
	-2, 494,
	-1, 2825,
	285, 1089,
	-2, 884,
	-1, 2915,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1387,
	-1, 2922,
	200, 0,
	202, 0,
	253, 0,
	-2, 1406,
	-1, 2985,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1435,
	-1, 2986,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1436,
	-1, 2987,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1437,
	-1, 2991,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1441,
	-1, 2992,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1442,
	-1, 2993,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1443,
	-1, 3037,
	464, 1722,
	-2, 1734,
	-1, 3126,
	466, 2164,
	-2, 1022,
	-1, 3177,
	200, 0,
	202, 0,
	253, 0,
	-2, 1407,
	-1, 3180,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1410,
	-1, 3181,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1412,
	-1, 3344,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1411,
	-1, 3345,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1413,
	-1, 3355,
	200, 0,
	-2, 1444,
	-1, 3468,
	200, 0,
	-2, 1445,
	-1, 3590,
	43, 0,
	173, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 2020,
}

const sqlPrivate = 57344

const sqlLast = 81955

var sqlAct = [...]int{

	906, 3384, 3685, 3413, 3281, 3589, 3387, 3599, 2662, 3675,
	3568, 2813, 3159, 3556, 3559, 3542, 3600, 2204, 3601, 3638,
	3420, 2423, 2953, 3373, 3472, 2663, 1026, 3309, 3118, 3588,
	836, 2022, 1324, 3429, 3113, 851, 1822, 3333, 3238, 214,
	3294, 214, 214, 928, 214, 214, 214, 214, 214, 2841,
	1180, 214, 2748, 1664, 1454, 2834, 827, 2082, 2809, 594,
	3314, 2836, 572, 3099, 3058, 2907, 1781, 3359, 1081, 3057,
	1911, 2371, 2412, 2528, 2456, 1636, 2458, 214, 2396, 2399,
	2677, 594, 2388, 1018, 2648, 2705, 2466, 2685, 2668, 2455,
	3211, 2666, 1866, 3158, 2447, 1869, 1380, 2424, 692, 2449,
	1804, 1859, 1790, 1605, 2314, 1173, 2240, 2312, 3008, 1320,
	1208, 2241, 1567, 2647, 2563, 3473, 2019, 1547, 835, 142,
	2095, 1821, 2015, 862, 1192, 2520, 1810, 2465, 1817, 2397,
	2124, 2372, 1860, 1665, 902, 1768, 2347, 1069, 1766, 1441,
	1606, 2115, 2222, 3414, 2079, 1307, 4, 2348, 1989, 2711,
	1991, 1348, 2417, 2811, 1333, 1317, 2459, 1182, 1058, 208,
	2304, 1189, 2243, 1851, 2118, 2201, 1255, 595, 596, 207,
	1562, 1012, 1625, 2126, 1889, 1615, 2212, 214, 214, 540,
	86, 991, 2096, 2168, 1455, 2230, 1530, 149, 1009, 1456,
	556, 590, 1850, 1990, 142, 566, 1992, 1347, 150, 1331,
	206, 1008, 1875, 526, 1281, 863, 667, 548, 1622, 638,
	1205, 1780, 543, 1014, 37, 36, 34, 989, 599, 740,
	25, 23, 686, 21, 1440, 551, 1461, 757, 602, 1263,
	3022, 2559, 3023, 1891, 1891, 1891, 1066, 3715, 3706, 2664,
	599, 2221, 2221, 1538, 3705, 3684, 2851, 3667, 2221, 1827,
	602, 3252, 3665, 3624, 3622, 3620, 3252, 3625, 2221, 2221,
	3617, 3012, 3614, 3610, 3618, 826, 3615, 1827, 831, 831,
	3586, 2221, 703, 1006, 1827, 2850, 3585, 3584, 3581, 3580,
	1827, 1903, 1903, 1903, 3538, 3454, 3554, 2729, 1469, 1470,
	3252, 1502, 1503, 1504, 1512, 1513, 1514, 3537, 3531, 3530,
	3525, 2276, 2221, 2221, 3252, 3524, 3518, 1505, 1500, 3252,
	1827, 1066, 3512, 2121, 3510, 1472, 3252, 1399, 3252, 3470,
	1518, 3451, 3448, 2276, 3422, 1827, 3252, 3403, 3423, 3402,
	814, 1827, 832, 1827, 3394, 2214, 1919, 1043, 1827, 992,
	992, 813, 3393, 1471, 3012, 3365, 3252, 1469, 1470, 1827,
	3346, 3331, 1491, 2213, 2276, 1903, 1469, 1470, 3322, 1488,
	3279, 3270, 2864, 1903, 2221, 2221, 75, 1500, 821, 3251,
	3271, 3179, 1038, 3252, 1472, 2276, 1500, 3134, 3128, 2122,
	3097, 2880, 2880, 1472, 3098, 32, 3032, 3030, 3015, 2937,
	3033, 3031, 2221, 1827, 2934, 993, 878, 2879, 2221, 2871,
	2661, 2880, 1471, 2872, 2221, 2659, 2658, 2572, 2612, 2221,
	2221, 1471, 2221, 2573, 1827, 2272, 1494, 1495, 1496, 1497,
	2591, 2574, 2872, 2445, 2592, 2221, 1477, 1907, 2444, 2374,
	2289, 2275, 1907, 1903, 2221, 2276, 2270, 2263, 2220, 1906,
	2221, 1827, 2221, 1907, 1226, 995, 1039, 996, 1220, 1827,
	1509, 2123, 2120, 1519, 2362, 1469, 1470, 1499, 1501, 2303,
	1785, 1739, 1890, 2864, 2394, 2527, 2221, 2562, 1826, 2301,
	1601, 1204, 3085, 182, 2910, 2888, 1623, 1515, 1820, 1516,
	2257, 1382, 1472, 2256, 2852, 1477, 1486, 1487, 2255, 1214,
	2254, 2253, 1759, 997, 1477, 994, 687, 820, 1892, 1892,
	1892, 819, 1507, 2853, 2159, 818, 817, 816, 812, 811,
	1471, 1492, 2498, 184, 810, 809, 1499, 1501, 808, 807,
	806, 57, 690, 689, 805, 1499, 1501, 804, 803, 802,
	1517, 214, 801, 800, 738, 58, 2620, 2621, 182, 737,
	736, 735, 734, 733, 732, 2238, 731, 1506, 730, 62,
	729, 2125, 728, 727, 726, 725, 724, 183, 723, 214,
	722, 2850, 2620, 2621, 721, 720, 214, 176, 719, 905,
	1492, 718, 717, 716, 715, 177, 182, 714, 184, 1492,
	68, 1024, 214, 1084, 214, 214, 1185, 214, 1084, 214,
	1185, 1498, 118, 1477, 713, 712, 151, 2420, 214, 214,
	2635, 1068, 1039, 701, 1062, 1073, 700, 658, 657, 1493,
	74, 1225, 615, 614, 613, 1219, 184, 2620, 2621, 605,
	85, 604, 183, 214, 603, 75, 82, 579, 578, 577,
	576, 560, 204, 2620, 2621, 1510, 203, 214, 202, 201,
	1185, 1185, 214, 214, 1538, 214, 1899, 1890, 1984, 200,
	2213, 2119, 1039, 199, 198, 197, 182, 214, 196, 195,
	183, 151, 194, 193, 3227, 214, 192, 191, 1493, 76,
	176, 190, 2620, 2621, 2626, 2285, 189, 1493, 177, 214,
	214, 214, 214, 214, 1185, 1185, 188, 187, 186, 1185,
	185, 3190, 214, 1185, 214, 214, 184, 3026, 1195, 151,
	2626, 2145, 2881, 1185, 2708, 2585, 2568, 1056, 2378, 214,
	2264, 2247, 2143, 1914, 2620, 2621, 1626, 1328, 2367, 1508,
	1764, 1649, 1483, 1484, 1490, 1511, 1489, 1485, 1556, 1482,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1468, 2405,
	183, 1200, 3200, 3606, 1549, 1185, 3199, 1401, 834, 1210,
	176, 1075, 1028, 3587, 1021, 2626, 3506, 599, 177, 2636,
	3463, 1051, 3457, 3455, 3383, 1207, 1206, 602, 214, 3323,
	1077, 2626, 1170, 1175, 3318, 3231, 3210, 3209, 3197, 151,
	77, 1913, 214, 182, 3196, 1176, 3195, 182, 3194, 1199,
	1481, 1473, 1474, 1475, 1476, 1478, 1479, 214, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 1479, 1268, 1352, 142, 142,
	2626, 1570, 3189, 148, 80, 3187, 81, 1569, 3186, 3103,
	3096, 1062, 3046, 184, 1062, 1311, 1314, 184, 182, 3045,
	3044, 2334, 3036, 182, 3005, 182, 1336, 1338, 1573, 182,
	2636, 3004, 1264, 1264, 1321, 3003, 1334, 691, 2620, 2621,
	3083, 118, 2626, 2930, 2926, 2875, 2636, 2637, 1284, 1409,
	1570, 1469, 1470, 2703, 2655, 904, 1569, 183, 184, 832,
	1446, 183, 1265, 184, 2646, 184, 1550, 176, 1548, 184,
	2619, 176, 1199, 2616, 2615, 177, 2613, 1568, 1472, 177,
	2598, 2597, 2596, 2593, 2590, 2636, 2584, 2567, 119, 1473,
	1474, 1475, 1476, 1478, 1479, 2560, 151, 1549, 2446, 1005,
	151, 152, 183, 2248, 2108, 1468, 1471, 183, 1863, 183,
	1467, 2406, 176, 183, 1554, 1832, 1830, 176, 1445, 176,
	177, 3713, 3683, 176, 3682, 177, 3623, 177, 2637, 1760,
	2349, 177, 1027, 2955, 1537, 3576, 3574, 3500, 2519, 3497,
	3494, 151, 182, 3493, 2637, 3492, 2419, 3487, 688, 3481,
	3452, 1357, 151, 3447, 3446, 2085, 2723, 2158, 3399, 3379,
	1439, 3357, 3341, 3317, 1373, 3340, 3328, 2631, 2629, 2630,
	2622, 2623, 2624, 2625, 2627, 2628, 2626, 1444, 3327, 3368,
	3307, 214, 184, 2637, 1213, 3304, 1218, 3298, 1224, 1477,
	3226, 3208, 3148, 3145, 3074, 3073, 2622, 2623, 2624, 2625,
	2627, 2628, 1442, 3061, 3060, 1785, 3018, 2921, 214, 1603,
	3102, 1451, 1612, 814, 1450, 2882, 2865, 2828, 214, 1084,
	214, 214, 214, 214, 813, 2798, 183, 2774, 594, 214,
	214, 2091, 1447, 594, 214, 1572, 176, 2751, 2750, 214,
	1020, 832, 1659, 2724, 177, 1185, 1464, 1465, 2631, 2629,
	2630, 2622, 2623, 2624, 2625, 2627, 2628, 2660, 1731, 2589,
	3474, 2636, 2588, 2583, 2551, 151, 1084, 2622, 2623, 2624,
	2625, 2627, 2628, 2404, 1346, 1691, 3301, 182, 2387, 1574,
	1062, 1915, 1351, 1564, 1565, 1469, 1470, 1571, 1563, 1560,
	1762, 2700, 1633, 1609, 1610, 1736, 2283, 2282, 2259, 2252,
	2219, 1730, 2141, 1534, 2629, 2630, 2622, 2623, 2624, 2625,
	2627, 2628, 1472, 1648, 1604, 3230, 1600, 184, 1082, 1599,
	1598, 1597, 1596, 1193, 142, 1595, 1594, 2751, 1651, 1593,
	1592, 1590, 1657, 1589, 1588, 1400, 1587, 1586, 1585, 1661,
	1471, 1584, 1583, 992, 1728, 1582, 1581, 1580, 1579, 1578,
	2624, 2625, 2627, 2628, 2144, 1667, 1655, 2278, 1577, 2637,
	1576, 183, 1551, 1535, 3228, 2142, 1533, 1528, 1050, 1041,
	1034, 176, 3183, 3042, 3029, 1631, 3021, 1634, 2571, 177,
	2250, 1653, 3041, 1733, 832, 2620, 2621, 599, 1759, 3273,
	3458, 3456, 599, 1185, 1185, 214, 1550, 602, 1602, 2721,
	151, 1084, 602, 1531, 1759, 1758, 1644, 1072, 1624, 1070,
	3495, 1774, 1759, 2837, 2777, 1628, 3382, 3425, 3424, 1660,
	1643, 1642, 1641, 1199, 1727, 1823, 1639, 1638, 3321, 1637,
	3272, 2620, 2621, 3024, 2638, 2639, 2640, 2867, 1626, 1734,
	214, 2866, 1662, 3430, 214, 214, 1807, 2351, 1066, 1809,
	3175, 3106, 1814, 1745, 1057, 1585, 1585, 214, 1570, 1071,
	1066, 1372, 1782, 1751, 1569, 2595, 214, 2594, 214, 1437,
	214, 2533, 2336, 1063, 214, 1067, 3072, 798, 861, 1410,
	1558, 2630, 2622, 2623, 2624, 2625, 2627, 2628, 214, 1912,
	3421, 1066, 1778, 1789, 2815, 2635, 2814, 1475, 1476, 1478,
	1479, 1803, 1382, 1381, 1805, 3088, 1750, 1749, 3686, 3076,
	1759, 1756, 2886, 1783, 1784, 3360, 799, 2664, 2957, 2116,
	2281, 3607, 1591, 1566, 2807, 1858, 2577, 1241, 1185, 1818,
	1185, 214, 1185, 3619, 3053, 214, 3616, 1864, 2846, 3552,
	1185, 1779, 3114, 1185, 214, 1824, 214, 214, 1361, 3067,
	1854, 840, 2453, 2121, 599, 2416, 1185, 1185, 1185, 1872,
	214, 1004, 1207, 1206, 602, 3517, 1064, 214, 3653, 2626,
	1999, 1769, 2902, 1555, 1065, 1770, 594, 214, 3608, 214,
	2733, 214, 653, 214, 1644, 214, 3262, 1229, 3654, 794,
	2290, 1640, 792, 1239, 3710, 3412, 790, 1813, 1024, 214,
	1024, 788, 214, 1970, 214, 1825, 1997, 1753, 785, 3405,
	1968, 2722, 2307, 214, 3090, 2307, 1999, 3087, 1656, 2122,
	2641, 830, 1932, 3086, 2305, 779, 1746, 2305, 3050, 3049,
	2582, 1408, 2581, 1917, 214, 1842, 1880, 1841, 2580, 214,
	1063, 580, 2579, 2537, 2369, 1857, 1407, 2361, 2358, 2339,
	1072, 2271, 1997, 2066, 2636, 1063, 1443, 1203, 2735, 1918,
	2137, 654, 1084, 1022, 1771, 1240, 2187, 1284, 2136, 1877,
	1874, 1877, 1878, 2024, 2413, 2316, 1894, 1773, 1274, 1896,
	1273, 1295, 1898, 1882, 1883, 1334, 1901, 1334, 1272, 2887,
	1271, 2123, 2120, 1785, 212, 829, 1982, 1359, 1072, 1755,
	2001, 1988, 1071, 1691, 1691, 1927, 782, 1923, 832, 1995,
	832, 3339, 1249, 1354, 1066, 1998, 1840, 2620, 2621, 2338,
	2638, 2639, 2640, 2776, 1235, 3670, 1051, 1908, 3516, 1909,
	1754, 1406, 1775, 1064, 1479, 599, 1922, 1920, 586, 2548,
	2297, 1065, 2097, 2098, 2327, 602, 3389, 1084, 1064, 2262,
	1071, 2516, 2637, 1978, 2077, 3578, 1065, 2893, 2097, 2113,
	2081, 1998, 1981, 2546, 1652, 2319, 1943, 1950, 3678, 2081,
	831, 1021, 3063, 1021, 1996, 2326, 2089, 1879, 2075, 1370,
	2892, 2635, 2087, 1667, 1667, 2279, 2525, 3258, 1031, 1940,
	2495, 2125, 214, 2020, 2021, 1935, 2125, 3671, 2167, 2946,
	2171, 2171, 2185, 1983, 2097, 1449, 2269, 2205, 2207, 1791,
	1355, 1765, 2211, 3690, 1084, 2355, 214, 1936, 3643, 1029,
	1996, 588, 3164, 710, 1985, 214, 774, 3163, 1795, 2000,
	1987, 1776, 1993, 1986, 2628, 1760, 2349, 214, 1374, 814,
	1084, 2116, 814, 814, 3274, 1980, 2843, 850, 825, 1944,
	2011, 1760, 2349, 2012, 2013, 2626, 2260, 3604, 2112, 1760,
	2349, 1256, 1396, 2770, 1049, 2632, 2633, 2634, 1937, 2543,
	1237, 1792, 2631, 2629, 2630, 2622, 2623, 2624, 2625, 2627,
	2628, 1066, 2544, 3673, 2071, 2235, 2549, 2788, 656, 655,
	1256, 2119, 2524, 2072, 3653, 2227, 1066, 2073, 1776, 2125,
	2782, 2078, 1032, 3535, 832, 2501, 2093, 2318, 1436, 828,
	3338, 1633, 1382, 1397, 685, 832, 1405, 2732, 2337, 832,
	214, 775, 582, 2110, 1802, 1787, 1254, 2134, 1185, 1420,
	1816, 2249, 2135, 3256, 2734, 2138, 1382, 2139, 2140, 3075,
	2636, 587, 2306, 649, 1561, 648, 1828, 2063, 2226, 3488,
	1815, 1796, 1977, 3700, 992, 1084, 2844, 1760, 1757, 3676,
	214, 2521, 2522, 2719, 1294, 1062, 1360, 2180, 214, 2196,
	3642, 1772, 142, 2209, 1785, 2359, 2217, 2218, 1736, 214,
	1811, 584, 796, 2228, 3605, 2234, 795, 2239, 2504, 786,
	2245, 2246, 214, 786, 1631, 2232, 2233, 1185, 787, 1969,
	2273, 1783, 1784, 832, 1776, 786, 1967, 1234, 1891, 3064,
	214, 1084, 1797, 1798, 2843, 2764, 3160, 214, 214, 1776,
	581, 1793, 1572, 2317, 3351, 1691, 3672, 3660, 3564, 1812,
	2545, 538, 3499, 3677, 2308, 1527, 3390, 2587, 2637, 2547,
	214, 2231, 3533, 214, 1979, 2074, 3290, 2284, 1942, 214,
	2244, 2801, 2307, 1794, 2076, 533, 3257, 585, 2288, 2763,
	831, 3603, 214, 2107, 2321, 3679, 776, 1020, 583, 1020,
	214, 3534, 214, 1564, 1565, 214, 3300, 2061, 3691, 3154,
	2064, 214, 2341, 606, 214, 783, 214, 2291, 214, 2503,
	214, 214, 1356, 214, 1185, 1185, 1185, 2356, 1185, 2287,
	2539, 1030, 711, 214, 214, 1667, 214, 214, 2500, 2080,
	1185, 3038, 3641, 1044, 2088, 2342, 2311, 2943, 214, 2370,
	3165, 2320, 2323, 2350, 2352, 2353, 2354, 2440, 2441, 2060,
	1417, 1369, 1371, 214, 214, 214, 2375, 2514, 214, 1384,
	214, 1799, 1939, 214, 3602, 214, 3652, 214, 1934, 936,
	2391, 2632, 2633, 2634, 2410, 3650, 2329, 1448, 2631, 2629,
	2630, 2622, 2623, 2624, 2625, 2627, 2628, 2340, 214, 214,
	214, 214, 214, 214, 777, 214, 599, 2427, 3435, 2469,
	2357, 1614, 2472, 2473, 1207, 2376, 602, 2502, 210, 2944,
	528, 529, 1176, 544, 528, 544, 554, 559, 2385, 2436,
	575, 214, 2452, 1024, 3291, 1800, 2395, 2023, 210, 214,
	1199, 1808, 3306, 778, 2467, 142, 1048, 3101, 3701, 1024,
	2832, 2422, 2766, 1418, 2293, 2408, 696, 1849, 2480, 2433,
	210, 2434, 2471, 2435, 2429, 2474, 2295, 2475, 2487, 1358,
	2489, 774, 2491, 2442, 2483, 1611, 2437, 2768, 2485, 1618,
	2486, 1042, 2443, 1037, 2438, 1334, 3335, 525, 2499, 2454,
	1458, 2470, 2062, 825, 1459, 850, 3161, 1769, 2296, 850,
	1618, 1770, 2010, 1892, 3206, 1786, 2994, 1168, 2506, 2322,
	2508, 1621, 1168, 2294, 1747, 607, 608, 2908, 2712, 2125,
	1199, 1199, 2128, 3695, 1614, 2482, 1419, 2767, 214, 3396,
	1616, 3395, 1621, 3377, 2488, 1527, 2490, 3478, 2492, 2565,
	2566, 1458, 2540, 3261, 2569, 3052, 1619, 1744, 2833, 534,
	3260, 2229, 2746, 2742, 1453, 2512, 528, 528, 2513, 823,
	2409, 774, 2942, 2509, 210, 1199, 775, 1619, 2398, 1617,
	2389, 1873, 2518, 1862, 1861, 2561, 2526, 1836, 1457, 3501,
	2905, 3543, 2343, 825, 1974, 1740, 2333, 2005, 3334, 1458,
	1771, 3119, 1618, 2511, 3310, 3167, 2386, 2687, 1297, 1199,
	3419, 1199, 535, 1773, 3417, 1398, 1021, 3378, 2223, 2756,
	2753, 610, 609, 1459, 1742, 2261, 2752, 1928, 2531, 2366,
	2515, 824, 1021, 3020, 1621, 707, 2676, 2675, 2538, 1457,
	2268, 1743, 1385, 2267, 2266, 2265, 1084, 2380, 2570, 2382,
	829, 2657, 536, 1616, 537, 2995, 2671, 2672, 3483, 1620,
	699, 3207, 2393, 2996, 3282, 214, 775, 2673, 1775, 1619,
	214, 611, 612, 214, 1459, 3168, 214, 214, 1084, 846,
	1620, 2688, 214, 3694, 1266, 2225, 2576, 1457, 2876, 1280,
	2224, 2418, 1617, 1871, 2418, 1084, 832, 2373, 2006, 3546,
	2693, 1267, 214, 3336, 1278, 709, 3259, 3657, 3385, 3415,
	3212, 3009, 2679, 3375, 3484, 2132, 3659, 214, 1434, 3621,
	1432, 776, 1414, 2686, 3496, 2650, 3356, 3205, 1412, 1395,
	1022, 2649, 1022, 2344, 2345, 214, 214, 214, 3502, 2920,
	2302, 214, 2683, 2690, 214, 3376, 2884, 2707, 2681, 2730,
	1691, 214, 214, 1393, 214, 214, 214, 1062, 2702, 2803,
	1966, 1391, 2736, 2709, 2614, 3547, 2550, 1776, 214, 214,
	214, 2682, 1620, 2706, 1389, 2390, 2691, 214, 2713, 2493,
	3485, 2368, 2694, 2695, 2665, 2335, 1691, 3386, 1387, 214,
	1185, 1379, 214, 2699, 2652, 2653, 2654, 1377, 1276, 2738,
	1084, 2680, 2286, 1650, 2755, 1647, 1435, 2760, 2761, 1084,
	1349, 776, 2717, 2901, 214, 2743, 2900, 214, 214, 2689,
	1453, 214, 2497, 2496, 1185, 214, 2477, 2728, 1994, 777,
	1667, 1976, 1947, 1185, 1185, 2692, 1729, 705, 706, 214,
	2720, 1575, 2739, 2740, 1353, 214, 2714, 2715, 2716, 2781,
	214, 2697, 214, 2698, 2839, 1253, 2824, 2131, 2754, 214,
	2731, 2758, 697, 698, 3278, 3598, 1667, 2678, 778, 2737,
	1433, 2799, 1431, 2802, 1413, 3269, 2747, 1774, 2779, 1327,
	1411, 1394, 2939, 1185, 1185, 1279, 2725, 2726, 3540, 2727,
	3235, 214, 214, 2820, 2789, 214, 2835, 3117, 2769, 3070,
	1277, 708, 2848, 1774, 2775, 1392, 3068, 1772, 3051, 1965,
	3639, 2784, 1020, 1390, 2831, 2823, 2787, 822, 2785, 777,
	1035, 2794, 2786, 2792, 784, 2812, 1388, 2800, 1020, 214,
	2341, 1084, 214, 214, 1084, 214, 1818, 2804, 2840, 2816,
	1386, 2414, 2403, 1378, 1818, 2402, 2383, 2863, 1045, 1376,
	1275, 1905, 1769, 2793, 1904, 575, 1770, 2467, 778, 1902,
	1900, 1897, 214, 1168, 1895, 1893, 2467, 1884, 1833, 1199,
	1831, 210, 2883, 210, 210, 1819, 1190, 2845, 210, 1806,
	1801, 1788, 1777, 3440, 2874, 2529, 2854, 210, 1209, 1857,
	2878, 1462, 1658, 142, 142, 3654, 1001, 3570, 3330, 1084,
	3325, 3324, 2898, 2468, 850, 3249, 2838, 1763, 1231, 3127,
	1168, 2307, 1233, 3442, 2847, 2889, 1084, 2890, 214, 2891,
	1002, 2861, 2862, 2305, 2307, 1691, 1252, 2325, 1785, 1938,
	832, 210, 210, 3246, 1190, 2923, 2324, 1964, 2856, 2857,
	2858, 1024, 2859, 2860, 2899, 1771, 210, 789, 791, 1429,
	1430, 2932, 2933, 1963, 1293, 2895, 1024, 1945, 1773, 2530,
	3263, 1469, 1470, 1469, 1470, 3490, 1375, 3465, 210, 210,
	210, 210, 1190, 2903, 3213, 3247, 2346, 1463, 1691, 1691,
	2906, 575, 2328, 210, 210, 1466, 1024, 2365, 1472, 2332,
	1737, 539, 2363, 2896, 1691, 1691, 2330, 3539, 696, 2364,
	3507, 2331, 3110, 3100, 3006, 1667, 1003, 3035, 2421, 2210,
	2928, 1732, 1663, 1775, 3674, 2718, 1471, 3693, 1471, 2620,
	2621, 2938, 1469, 1470, 3509, 1691, 2299, 2298, 214, 214,
	1538, 2127, 1363, 2954, 2958, 1199, 2960, 550, 1362, 1084,
	2961, 2945, 2947, 2948, 3040, 1168, 2771, 2772, 2299, 3025,
	2773, 2963, 2300, 2133, 3184, 3039, 2950, 210, 1667, 1667,
	214, 2971, 2998, 1416, 1536, 3702, 1415, 2973, 2020, 2964,
	3475, 210, 3409, 1656, 1667, 1667, 3369, 3367, 3297, 2795,
	2796, 3229, 3151, 2797, 2020, 2974, 559, 2949, 3144, 3133,
	3112, 2670, 2999, 3095, 3016, 3017, 2959, 3094, 3093, 3066,
	2855, 2829, 2827, 2479, 2478, 1667, 2431, 214, 2407, 142,
	3013, 3014, 1776, 2384, 1021, 3002, 2092, 1962, 3011, 1961,
	1960, 3242, 3077, 2696, 1959, 3243, 1887, 1886, 1885, 1021,
	1865, 1844, 1843, 1839, 1185, 3028, 1838, 3007, 1837, 3027,
	2710, 1835, 1834, 1024, 1767, 1428, 3089, 214, 1427, 1306,
	1305, 2008, 1304, 1303, 214, 1302, 1301, 1300, 1299, 1021,
	1298, 1296, 1084, 214, 1291, 3245, 3091, 1185, 1290, 3081,
	3047, 1289, 1288, 1287, 1248, 3082, 3084, 1247, 3248, 1246,
	1245, 214, 1244, 3055, 3107, 1243, 1691, 1242, 3129, 1236,
	1230, 1228, 1227, 1047, 1046, 214, 214, 1185, 1185, 1185,
	976, 214, 214, 214, 883, 3092, 214, 214, 1738, 797,
	214, 214, 640, 1185, 781, 3388, 1422, 3121, 214, 1084,
	2341, 73, 3124, 1238, 626, 3108, 3123, 3120, 3043, 67,
	3065, 635, 3551, 3115, 2762, 1022, 1946, 1383, 1948, 2701,
	2251, 1084, 3532, 3191, 2586, 3152, 3471, 3350, 2130, 1557,
	69, 1022, 1772, 871, 2710, 958, 3289, 3111, 3288, 3109,
	3236, 3054, 2457, 3069, 3286, 3071, 1667, 3285, 839, 3122,
	3140, 1087, 1748, 3131, 877, 3182, 2747, 3125, 3130, 1761,
	528, 3244, 2280, 2170, 1671, 880, 214, 2188, 2427, 1668,
	3136, 1670, 3143, 882, 3135, 1691, 881, 3150, 3146, 3141,
	3142, 210, 3147, 210, 1669, 3178, 1168, 210, 3149, 1559,
	879, 1666, 3170, 3169, 2392, 2425, 1021, 1209, 2467, 1190,
	210, 3157, 210, 3162, 1283, 761, 1752, 210, 1209, 544,
	2086, 2114, 210, 1209, 2575, 1552, 852, 873, 575, 2111,
	1040, 2684, 2842, 3034, 3316, 2004, 2517, 643, 2617, 214,
	2117, 1033, 2193, 2186, 1857, 1084, 2182, 1084, 2415, 1438,
	1529, 2426, 1074, 855, 2084, 1178, 1543, 2555, 2009, 1201,
	2849, 2704, 2277, 3567, 2014, 1667, 1193, 1848, 1000, 1082,
	214, 214, 214, 999, 998, 3558, 3204, 3555, 2810, 1741,
	2292, 1168, 214, 1521, 2817, 867, 1198, 2669, 2877, 214,
	1250, 214, 1024, 1024, 214, 214, 214, 3489, 1520, 793,
	1020, 3480, 1061, 1060, 1059, 2745, 1084, 214, 214, 1257,
	1260, 1084, 3699, 3062, 181, 1020, 3221, 2523, 3217, 214,
	1460, 3214, 1452, 214, 3215, 3216, 178, 3224, 180, 3219,
	3220, 179, 3293, 3079, 2936, 214, 90, 2706, 1084, 3225,
	1541, 1185, 35, 3265, 1546, 1020, 3234, 16, 1168, 3218,
	3254, 2951, 117, 3253, 116, 115, 114, 113, 112, 111,
	110, 109, 1342, 108, 107, 106, 105, 104, 103, 214,
	102, 101, 1201, 100, 1168, 99, 98, 3232, 3233, 97,
	96, 1084, 3280, 95, 210, 94, 3276, 93, 92, 91,
	571, 3312, 3255, 568, 49, 3284, 3264, 48, 3315, 89,
	88, 3311, 15, 33, 3266, 3267, 3320, 3299, 3302, 3308,
	13, 1084, 53, 3277, 1364, 3313, 54, 12, 28, 29,
	79, 78, 27, 14, 26, 24, 3283, 10, 8, 210,
	7, 30, 1635, 210, 210, 3326, 11, 147, 146, 72,
	145, 71, 144, 143, 70, 22, 1870, 9, 1084, 3337,
	139, 3362, 3428, 3105, 66, 210, 214, 210, 214, 210,
	1084, 214, 3347, 528, 3342, 1021, 1021, 141, 1024, 214,
	140, 63, 1691, 138, 3037, 137, 64, 1888, 136, 3329,
	135, 65, 3358, 134, 20, 5, 52, 6, 3332, 1168,
	3153, 3372, 214, 2885, 83, 84, 31, 61, 60, 59,
	19, 51, 1020, 3363, 3364, 18, 171, 170, 1857, 169,
	3371, 214, 168, 163, 162, 167, 165, 164, 3366, 214,
	575, 166, 161, 3408, 696, 133, 1691, 214, 173, 172,
	3370, 3427, 1185, 210, 3418, 1190, 210, 3391, 214, 3392,
	175, 159, 155, 154, 158, 1168, 160, 157, 156, 575,
	153, 174, 1667, 132, 3406, 131, 210, 3431, 56, 214,
	214, 130, 3410, 129, 128, 210, 210, 3416, 210, 127,
	210, 126, 210, 55, 210, 17, 2, 3426, 3461, 3462,
	1, 214, 3437, 0, 3439, 0, 0, 0, 1971, 3438,
	0, 1972, 3436, 1973, 3432, 3315, 214, 3434, 0, 3444,
	0, 3443, 210, 0, 0, 0, 1667, 0, 0, 0,
	0, 0, 3486, 0, 3445, 0, 3398, 3449, 3450, 3477,
	0, 1691, 3453, 559, 0, 0, 2812, 3464, 575, 1024,
	3476, 3469, 0, 0, 0, 0, 0, 1024, 0, 0,
	0, 1021, 0, 0, 214, 3498, 0, 0, 3441, 0,
	1024, 0, 0, 0, 0, 0, 214, 1185, 0, 3400,
	3401, 2188, 2188, 214, 0, 0, 0, 1185, 1185, 3460,
	0, 0, 0, 1185, 0, 3523, 0, 214, 0, 214,
	3504, 3505, 3508, 0, 3503, 3431, 0, 3515, 3511, 3491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3521,
	3522, 1667, 214, 3536, 0, 3526, 3292, 3514, 214, 214,
	3548, 1084, 3527, 3520, 0, 3519, 3303, 0, 0, 0,
	214, 214, 0, 1022, 0, 3557, 3560, 0, 0, 0,
	0, 3571, 3561, 0, 3319, 3565, 0, 3573, 1022, 3575,
	0, 0, 3553, 0, 0, 0, 3562, 0, 3582, 0,
	0, 3583, 0, 0, 0, 0, 0, 0, 0, 214,
	1199, 1020, 1020, 3577, 3579, 0, 0, 0, 1022, 0,
	3609, 2188, 2188, 2188, 0, 0, 2552, 2553, 0, 3613,
	0, 528, 3597, 3596, 3594, 3595, 0, 3528, 0, 3529,
	0, 0, 3223, 0, 0, 3626, 210, 3611, 3628, 214,
	3630, 0, 1021, 0, 0, 528, 3635, 0, 3636, 0,
	1021, 0, 210, 3627, 528, 0, 3640, 0, 3549, 214,
	3632, 0, 0, 1021, 0, 0, 210, 0, 3569, 0,
	0, 0, 0, 0, 3646, 3647, 0, 0, 3651, 3649,
	0, 0, 3648, 0, 214, 0, 214, 3655, 3557, 3656,
	0, 3560, 3664, 3658, 3666, 0, 3662, 0, 3663, 1613,
	3669, 3668, 0, 0, 3629, 3249, 3631, 0, 0, 0,
	0, 3633, 3634, 1201, 0, 3637, 0, 0, 0, 0,
	0, 0, 0, 3681, 3680, 0, 2643, 2644, 2645, 3688,
	0, 0, 3687, 3246, 3689, 0, 3239, 0, 0, 0,
	3692, 0, 0, 3696, 0, 0, 2427, 0, 0, 544,
	3237, 0, 3703, 0, 3704, 0, 3241, 0, 0, 0,
	3697, 3698, 0, 0, 0, 1022, 1082, 3707, 3708, 3709,
	3711, 3712, 0, 0, 0, 3247, 0, 1020, 0, 3716,
	1168, 0, 0, 0, 0, 0, 0, 0, 0, 2315,
	0, 3714, 0, 3569, 3661, 0, 3348, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3240, 210, 0,
	0, 0, 1168, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 1168,
	0, 0, 0, 3348, 0, 0, 0, 2090, 0, 210,
	0, 0, 0, 0, 0, 2023, 210, 2377, 0, 0,
	0, 1910, 838, 850, 1541, 0, 0, 0, 0, 1201,
	0, 0, 1921, 0, 0, 0, 850, 0, 0, 1209,
	0, 0, 210, 0, 0, 1929, 1930, 1931, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1870, 0, 0, 0, 0, 0, 0, 0, 2315,
	0, 528, 0, 0, 2430, 2192, 0, 0, 0, 0,
	210, 0, 0, 210, 0, 210, 0, 210, 0, 210,
	210, 3242, 1190, 0, 0, 3243, 0, 0, 0, 0,
	0, 0, 2450, 696, 1168, 2315, 2315, 0, 1020, 0,
	0, 0, 0, 1168, 0, 0, 1020, 210, 0, 0,
	0, 0, 0, 3572, 0, 0, 0, 0, 0, 1020,
	2188, 2188, 210, 1190, 210, 3245, 0, 1209, 0, 1209,
	0, 0, 1190, 0, 1190, 0, 1190, 0, 3248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 210, 210,
	210, 1190, 210, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1022, 1022, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 2188, 2188, 2188, 2188, 2188, 2188,
	2188, 2188, 2188, 2188, 2188, 2188, 2188, 2188, 2188, 2188,
	2188, 2188, 2188, 0, 2188, 1168, 1469, 1470, 1168, 0,
	0, 0, 0, 0, 0, 2916, 2917, 0, 0, 0,
	0, 3244, 0, 0, 0, 0, 1500, 1469, 1470, 0,
	0, 0, 0, 1472, 0, 0, 2023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 1209, 0, 0,
	0, 0, 0, 1168, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 0,
	1168, 0, 0, 0, 0, 0, 0, 0, 0, 2975,
	2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985,
	2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 0, 2997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 1499, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 528, 0, 1499, 1501, 0, 528,
	0, 0, 528, 1469, 1470, 528, 528, 0, 0, 0,
	838, 528, 0, 1168, 838, 0, 0, 0, 0, 210,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 1492,
	1472, 1209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1209, 1211, 0, 1215,
	1492, 1221, 0, 0, 0, 0, 2360, 0, 1471, 0,
	0, 0, 0, 0, 2315, 2315, 210, 1491, 0, 0,
	2315, 0, 0, 2749, 1488, 0, 0, 0, 0, 0,
	2315, 2749, 0, 2315, 2749, 2749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 210, 210,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 3173, 0, 0, 0, 0, 210, 0,
	0, 1190, 1022, 0, 0, 0, 0, 1493, 0, 2192,
	2192, 1494, 1495, 1496, 1497, 0, 1168, 1345, 0, 0,
	0, 1477, 0, 2806, 0, 1350, 2808, 2315, 1493, 0,
	210, 0, 0, 2439, 210, 0, 0, 0, 1469, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 1201,
	0, 0, 1499, 1501, 1190, 0, 210, 0, 1500, 2315,
	0, 528, 0, 0, 0, 1472, 0, 0, 2315, 0,
	0, 0, 0, 1168, 0, 0, 0, 0, 0, 0,
	1402, 1486, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 1168, 0, 0, 0, 0,
	210, 1870, 1491, 0, 1870, 0, 1492, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2192,
	2192, 2192, 0, 0, 0, 0, 0, 1482, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 1479, 0, 0, 2894, 0,
	0, 1190, 210, 0, 210, 0, 0, 0, 2919, 0,
	0, 1473, 1474, 1475, 1476, 1478, 1479, 0, 0, 0,
	0, 1522, 1523, 1524, 1525, 1526, 1494, 1495, 1496, 1497,
	0, 210, 0, 0, 2620, 2621, 1477, 2638, 2639, 2640,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	1540, 0, 0, 3174, 0, 0, 1553, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 1499, 1501, 1168,
	0, 1168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 1470, 0, 0, 2956, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 1487, 2635, 0,
	0, 0, 0, 1500, 0, 0, 0, 2188, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	1168, 0, 0, 0, 0, 1168, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 2188,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 1168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2626, 0, 0, 210, 210, 0, 1607, 1607,
	1607, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 1479, 2914, 0, 0, 0, 528, 528, 0,
	0, 1498, 0, 0, 0, 1168, 0, 0, 0, 0,
	0, 1494, 1495, 1496, 1497, 0, 0, 0, 0, 1493,
	0, 1477, 3355, 2641, 0, 0, 0, 0, 0, 1209,
	0, 0, 0, 0, 0, 1168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 1499, 1501, 0, 0, 0, 2636, 2188, 0,
	0, 0, 0, 0, 3380, 0, 0, 0, 0, 0,
	0, 0, 1168, 0, 0, 0, 575, 0, 0, 0,
	0, 1486, 1487, 0, 1168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 850, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 2192, 2192,
	0, 0, 210, 0, 0, 0, 1489, 1485, 0, 1482,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0, 2790,
	2315, 210, 0, 0, 0, 2637, 0, 0, 0, 0,
	0, 0, 0, 0, 2450, 2450, 0, 0, 0, 0,
	696, 696, 2315, 3468, 0, 1870, 1870, 0, 0, 696,
	2315, 0, 0, 2821, 0, 0, 1498, 210, 0, 0,
	0, 0, 2825, 2826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 2192, 2192, 2192, 2192, 2192, 2192, 2192, 2192,
	2192, 2192, 2192, 2192, 2192, 2192, 2192, 2192, 2192, 2192,
	2192, 0, 2192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2869, 2870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2632, 2633,
	2634, 0, 0, 0, 0, 2631, 2629, 2630, 2622, 2623,
	2624, 2625, 2627, 2628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 1209, 0,
	210, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 1479, 210, 0, 1168, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 2315,
	2315, 2315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1209, 0, 0, 0, 0, 0, 0, 2315, 0,
	2749, 0, 0, 1209, 1209, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2315, 0,
	0, 0, 3295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2003, 0, 2007,
	0, 0, 0, 0, 0, 0, 2016, 0, 1209, 0,
	0, 0, 0, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 0, 2065,
	0, 2067, 2068, 2069, 2070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 2109, 0,
	0, 0, 0, 0, 0, 2315, 0, 2749, 0, 0,
	3374, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 2147, 2150,
	2153, 2156, 0, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
	0, 575, 0, 0, 2184, 0, 2195, 2197, 2202, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3374, 0, 0, 0, 0, 0, 0, 0, 2315, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 1469,
	1470, 0, 660, 0, 0, 0, 0, 1209, 0, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 1472, 662, 210, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 682, 0, 0, 3137, 3138, 3139, 0,
	2956, 0, 0, 0, 1471, 0, 2620, 2621, 663, 2638,
	2639, 2640, 0, 1491, 0, 3374, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 2925, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 0, 1502, 1503,
	1504, 1512, 1513, 1514, 937, 0, 0, 665, 0, 0,
	666, 0, 0, 0, 1505, 1500, 0, 0, 0, 2913,
	0, 0, 1472, 3295, 0, 0, 0, 1518, 0, 0,
	2635, 0, 0, 0, 0, 210, 681, 1494, 1495, 1496,
	1497, 0, 2749, 211, 0, 0, 0, 1477, 0, 0,
	1471, 0, 0, 0, 0, 0, 1209, 0, 1209, 1491,
	0, 0, 0, 211, 0, 0, 1488, 0, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 1501,
	0, 3544, 0, 58, 0, 211, 0, 1209, 210, 0,
	0, 0, 0, 0, 0, 2192, 0, 62, 0, 210,
	2315, 0, 0, 0, 2626, 0, 0, 1486, 1487, 0,
	2379, 0, 2381, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1495, 1496, 1497, 0, 68, 0,
	0, 0, 1492, 1477, 668, 0, 0, 2192, 2956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 685, 0, 669, 0, 2641, 0, 1509, 74, 0,
	1519, 0, 0, 0, 1499, 1501, 0, 0, 85, 0,
	0, 0, 0, 75, 82, 0, 0, 0, 2315, 0,
	684, 0, 0, 0, 1515, 0, 1516, 670, 0, 2636,
	671, 0, 0, 1486, 1487, 0, 679, 0, 3374, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 1507,
	0, 0, 1498, 0, 0, 0, 0, 76, 1492, 0,
	0, 0, 0, 1209, 0, 2315, 0, 0, 0, 0,
	1493, 0, 0, 0, 673, 680, 0, 1517, 0, 0,
	0, 0, 674, 0, 2494, 0, 2192, 0, 0, 0,
	0, 0, 0, 0, 1506, 676, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 2637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2274,
	0, 0, 0, 0, 2192, 2192, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2535, 2536, 1510, 0, 0, 0, 2542, 1489, 1485, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0,
	0, 148, 80, 0, 81, 2556, 2557, 0, 0, 0,
	0, 2109, 0, 0, 0, 0, 0, 0, 0, 0,
	2564, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 2578, 0, 0, 118,
	2632, 2633, 2634, 0, 0, 0, 0, 2631, 2629, 2630,
	2622, 2623, 2624, 2625, 2627, 2628, 0, 0, 0, 0,
	0, 2599, 0, 184, 0, 0, 1508, 0, 0, 1483,
	1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 1479, 0, 119, 0, 0, 2608,
	0, 0, 0, 2609, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 183, 1469, 1470,
	0, 0, 0, 0, 1512, 1513, 1514, 176, 2202, 2202,
	2202, 0, 0, 0, 0, 177, 0, 0, 1500, 0,
	0, 0, 0, 1607, 0, 1472, 0, 0, 0, 0,
	1518, 2674, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 1488,
	1469, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 1472, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 903, 0, 211, 1089, 211, 211,
	1089, 0, 1089, 211, 1089, 1471, 1494, 1495, 1496, 1497,
	0, 0, 211, 0, 1491, 0, 1477, 2765, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	1509, 0, 0, 1519, 0, 0, 0, 1499, 1501, 0,
	0, 0, 0, 600, 1089, 1089, 211, 211, 0, 0,
	2541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 600, 1486, 1487, 1494, 1495,
	1496, 1497, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 1507, 211, 211, 211, 211, 0, 1089, 1089,
	0, 1492, 0, 1089, 0, 0, 0, 1089, 211, 211,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 1499,
	1501, 0, 0, 0, 0, 0, 0, 872, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 1023,
	0, 1498, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 1493,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 2904,
	0, 0, 0, 0, 1469, 1470, 0, 2016, 0, 0,
	0, 0, 0, 2911, 2912, 1510, 0, 2915, 0, 0,
	0, 2918, 0, 0, 1500, 0, 0, 0, 0, 0,
	2922, 1472, 0, 0, 0, 0, 0, 0, 0, 2929,
	0, 0, 2674, 1498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2940, 0, 1471,
	815, 1493, 0, 0, 0, 0, 0, 0, 1491, 833,
	0, 0, 0, 0, 0, 1488, 1469, 1470, 0, 1502,
	1503, 1504, 1512, 1513, 1514, 0, 2965, 2966, 0, 2967,
	2968, 2969, 0, 0, 2970, 1505, 1500, 0, 2972, 1508,
	0, 0, 1010, 1472, 0, 1511, 1489, 1485, 1518, 1482,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3000,
	3001, 1471, 1494, 1495, 1496, 1497, 0, 0, 0, 0,
	1491, 0, 1477, 0, 3010, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 1501, 0, 0, 0, 1489, 1485,
	0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 1487, 1494, 1495, 1496, 1497, 0, 0,
	0, 0, 0, 0, 1477, 3048, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 1492, 0, 0,
	3056, 3059, 0, 1089, 0, 211, 211, 211, 1509, 0,
	0, 1519, 211, 0, 0, 1499, 1501, 211, 0, 0,
	0, 0, 0, 0, 0, 3078, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 1515, 125, 1516, 0, 0,
	0, 0, 57, 0, 1486, 1487, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 58, 120, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	62, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 39, 122, 0, 1517, 0,
	0, 0, 0, 1607, 0, 1493, 0, 0, 0, 38,
	0, 68, 3132, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 42, 0, 0, 0,
	0, 74, 0, 0, 123, 0, 209, 0, 209, 209,
	40, 85, 0, 209, 0, 0, 75, 82, 0, 1498,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3171, 3172, 0, 0, 1493, 0, 3176,
	3177, 0, 0, 43, 3180, 3181, 0, 1089, 1089, 211,
	0, 3185, 0, 0, 0, 1089, 0, 0, 0, 0,
	76, 3188, 0, 1510, 0, 0, 209, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3193, 0, 0,
	0, 209, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474,
	1475, 1476, 1478, 1479, 211, 0, 0, 0, 211, 211,
	0, 0, 0, 209, 209, 209, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 209,
	211, 0, 211, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	1483, 1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 1479, 87, 0, 87, 0,
	87, 77, 0, 0, 3198, 0, 0, 0, 0, 44,
	3059, 0, 1089, 0, 1089, 0, 1089, 0, 0, 0,
	0, 0, 209, 0, 1089, 0, 0, 1089, 211, 0,
	0, 211, 0, 47, 148, 80, 209, 81, 0, 45,
	1089, 1089, 1089, 124, 0, 0, 215, 0, 0, 46,
	0, 211, 0, 0, 0, 0, 182, 0, 0, 0,
	211, 211, 0, 211, 0, 211, 0, 211, 50, 211,
	0, 0, 118, 0, 0, 0, 833, 87, 87, 0,
	0, 0, 121, 0, 57, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 87, 3059, 184, 211, 58, 0,
	0, 0, 0, 0, 0, 593, 0, 0, 0, 0,
	0, 0, 62, 0, 1469, 1470, 0, 0, 0, 119,
	0, 0, 0, 3343, 3344, 3345, 0, 593, 0, 0,
	0, 0, 152, 0, 1500, 0, 0, 0, 0, 0,
	183, 1472, 0, 68, 0, 0, 1089, 87, 3353, 3354,
	176, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 3361, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 74, 0, 0, 0, 0, 1491, 151,
	0, 0, 3, 85, 0, 1488, 0, 0, 75, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3059, 0, 0, 0, 0, 0, 0, 0,
	3397, 0, 0, 0, 0, 0, 0, 0, 0, 3404,
	0, 0, 838, 815, 2534, 0, 0, 0, 3411, 0,
	0, 1089, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 1494, 1495, 1496, 1497, 0, 0, 0, 0,
	0, 0, 1477, 0, 3059, 0, 0, 3059, 1539, 0,
	0, 0, 1545, 0, 0, 0, 1629, 0, 1023, 0,
	0, 0, 209, 0, 0, 0, 0, 3059, 3059, 0,
	0, 0, 0, 1499, 1501, 209, 1629, 209, 0, 0,
	0, 0, 600, 0, 0, 0, 0, 600, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 1487, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 1089, 0, 0, 0, 0, 3479,
	0, 0, 3482, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 3059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 148, 80, 0, 81,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 182, 1627,
	0, 1630, 0, 87, 0, 0, 0, 0, 0, 0,
	691, 0, 1089, 0, 118, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 184, 1089,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 74, 0, 600,
	0, 119, 0, 211, 0, 0, 0, 85, 0, 0,
	0, 0, 75, 82, 152, 0, 211, 0, 0, 0,
	0, 1089, 183, 3593, 3593, 3593, 0, 0, 0, 0,
	0, 0, 176, 0, 211, 1089, 0, 0, 0, 0,
	177, 211, 3612, 0, 209, 0, 0, 0, 209, 209,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 151, 0, 0, 3059, 0, 3059, 211, 0, 0,
	209, 0, 209, 211, 209, 0, 0, 0, 0, 0,
	3593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474,
	1475, 1476, 1478, 1479, 0, 211, 0, 0, 211, 57,
	211, 0, 211, 0, 211, 211, 0, 0, 1089, 1089,
	1089, 0, 1089, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 62, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 209, 0,
	0, 209, 0, 0, 0, 0, 0, 211, 0, 211,
	0, 0, 0, 0, 3593, 0, 0, 77, 68, 1085,
	0, 209, 1186, 0, 1085, 0, 1186, 907, 0, 0,
	600, 209, 0, 209, 0, 209, 0, 209, 0, 209,
	0, 0, 211, 211, 211, 211, 0, 211, 74, 211,
	148, 80, 0, 81, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 75, 82, 0, 0, 209, 0, 0,
	0, 0, 182, 0, 0, 211, 1186, 1186, 0, 0,
	0, 0, 0, 211, 691, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 184, 0, 0, 833, 0, 833, 0, 0,
	1186, 1186, 0, 0, 0, 1186, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 1016, 0, 177, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2620, 2621, 0, 2638, 2639, 2640, 0, 0, 0, 815,
	0, 0, 815, 815, 0, 0, 0, 0, 0, 2924,
	0, 148, 80, 0, 81, 0, 0, 0, 0, 1469,
	1470, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 1023, 0, 1500,
	1089, 0, 0, 0, 0, 691, 1472, 0, 0, 118,
	0, 209, 0, 0, 2635, 0, 0, 2083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 1089, 184, 1471, 0, 0, 0, 0, 0,
	0, 0, 1539, 1491, 0, 0, 1539, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 2626, 0,
	0, 211, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 1010, 0, 1337, 1477, 0, 0,
	0, 0, 211, 211, 211, 0, 0, 0, 0, 0,
	1630, 211, 0, 0, 0, 0, 0, 0, 0, 2641,
	0, 0, 209, 211, 1089, 0, 0, 0, 1499, 1501,
	0, 0, 0, 209, 1089, 0, 0, 0, 0, 0,
	0, 87, 0, 1089, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 2636, 0, 211, 0, 0, 1089, 211,
	0, 0, 0, 0, 209, 1085, 0, 1089, 1089, 0,
	0, 600, 0, 211, 593, 0, 0, 0, 0, 593,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1089, 1089, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 209, 0,
	209, 0, 209, 0, 209, 209, 0, 0, 0, 0,
	0, 2637, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 1498, 0, 0, 1089, 0, 211, 1089, 211,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 209, 0, 209,
	0, 87, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	1086, 87, 0, 1187, 0, 1086, 0, 1187, 0, 0,
	0, 0, 209, 209, 209, 209, 0, 209, 0, 209,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 1186,
	1186, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1089, 0, 0, 87, 0, 209, 87, 0, 0, 0,
	0, 0, 0, 209, 2632, 2633, 2634, 1187, 1187, 0,
	0, 2631, 2629, 2630, 2622, 2623, 2624, 2625, 2627, 2628,
	0, 0, 0, 0, 87, 0, 0, 2620, 2621, 0,
	2638, 2639, 2640, 0, 0, 0, 0, 0, 0, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0,
	0, 1187, 1187, 0, 0, 0, 1187, 0, 0, 0,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2635, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1187, 1089, 1186, 0, 1186, 0, 1186, 0,
	0, 0, 0, 0, 0, 0, 1186, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1186, 1186, 1186, 2620, 2621, 0, 2638, 2639,
	2640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 0, 2626, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2083, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 1310, 1310, 1197, 0, 0, 0, 0, 1023,
	0, 0, 0, 1539, 0, 0, 1343, 1344, 1089, 2635,
	0, 0, 0, 0, 1023, 0, 2641, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 1089, 211, 0, 0,
	0, 1089, 0, 0, 1629, 0, 0, 0, 1085, 0,
	2636, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1089, 1089, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 2626, 0, 0, 0, 1089, 0, 0,
	0, 209, 211, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2642, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 209, 209, 209, 0, 0, 0, 0, 0,
	0, 1629, 1010, 1085, 2641, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 1010, 2637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2636, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 1086, 0, 0, 0,
	1085, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1187, 0, 0, 0, 1085, 0, 0, 1089,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 209, 0, 0, 87, 87,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 2632, 2633, 2634, 0, 0, 2637, 0, 2631, 2629,
	2630, 2622, 2623, 2624, 2625, 2627, 2628, 0, 0, 0,
	211, 87, 87, 0, 0, 87, 0, 209, 0, 209,
	1089, 211, 211, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1186, 0, 209, 0, 0, 0,
	0, 0, 1089, 0, 0, 1089, 0, 0, 0, 0,
	1645, 0, 0, 0, 1010, 0, 0, 833, 0, 0,
	0, 1085, 0, 1654, 0, 1197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 87, 0, 1089, 0, 0, 0, 0,
	1187, 1187, 0, 0, 0, 0, 0, 0, 1086, 2632,
	2633, 2634, 0, 1186, 0, 0, 2631, 2629, 2630, 2622,
	2623, 2624, 2625, 2627, 2628, 1089, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1186, 1186, 1186, 0, 1186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1186, 0, 0, 0,
	0, 0, 0, 0, 0, 1187, 0, 1187, 0, 1187,
	0, 211, 0, 0, 0, 0, 1089, 1187, 0, 0,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1187, 1187, 1187, 0, 0, 0, 0,
	0, 0, 0, 211, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1846, 0, 0, 0, 1853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	1876, 0, 1876, 1010, 1010, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 1086,
	211, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1089, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 1853, 0, 0, 1925,
	1469, 1470, 209, 1502, 1503, 1504, 1512, 1513, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1941,
	1500, 0, 0, 211, 0, 1089, 0, 1472, 0, 1951,
	0, 1953, 1518, 1955, 211, 1957, 0, 1958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 1975, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1085, 0, 0, 0, 0, 1023, 1494, 1495,
	1496, 1497, 87, 0, 0, 1023, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 1629, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 1519, 0, 0, 0, 1499,
	1501, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	209, 1516, 0, 0, 0, 0, 0, 0, 1486, 1487,
	0, 209, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1187, 0, 0, 0, 0,
	0, 0, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 1086, 0, 0, 0, 1186, 0, 1010, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 2258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1186, 0, 0, 1498, 1187, 0, 0, 0, 0, 1186,
	1186, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 1186,
	1186, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 1187, 1187, 0, 1187, 0, 1085, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 1187, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 1483, 1484, 1490, 1511, 1489, 1485,
	0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479,
	0, 0, 0, 209, 209, 0, 0, 0, 0, 0,
	0, 0, 1197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0,
	0, 0, 1085, 0, 0, 1853, 0, 0, 0, 1505,
	1500, 2401, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2432, 0, 1471, 1310, 0, 1310, 0,
	1310, 0, 1197, 1197, 1491, 0, 0, 0, 0, 0,
	209, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2083,
	2476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2481, 0, 2484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 1494, 1495,
	1496, 1497, 0, 0, 209, 1085, 0, 0, 1477, 0,
	2505, 1197, 2507, 1197, 0, 2510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 1519, 0, 0, 0, 1499,
	1501, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 2532, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 1516, 0, 0, 0, 0, 0, 0, 1486, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	1186, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 1506,
	0, 0, 0, 1186, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1186, 1186, 1186, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	1187, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 1483, 1484, 1490, 1511, 1489, 1485,
	0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479,
	0, 1085, 0, 1085, 2105, 0, 0, 0, 2106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2741,
	1187, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2778, 2780, 2401, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1085, 1086, 1469,
	1470, 1086, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 1500,
	0, 0, 0, 0, 1085, 0, 1472, 1186, 0, 0,
	0, 1518, 0, 2818, 0, 0, 0, 2822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2830, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 1491, 0, 0, 1086, 1085, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 2873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 1085, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 2897, 1085, 1197, 0, 0,
	0, 0, 0, 616, 0, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 1519, 0, 0, 0, 1499, 1501,
	0, 0, 0, 0, 2909, 0, 617, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 0, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 618,
	637, 0, 0, 1507, 0, 0, 0, 0, 1186, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 619, 0, 0, 620, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	644, 0, 0, 0, 0, 0, 621, 0, 1506, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 1498, 0, 623, 0, 0, 624, 646, 0,
	0, 0, 651, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 1186, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 1186, 1186, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 1187, 1187, 1187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	1187, 0, 0, 0, 0, 0, 1086, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 628, 0, 1483, 1484, 1490, 1511, 1489, 1485, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0,
	629, 0, 0, 0, 0, 0, 0, 2927, 0, 3104,
	0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514,
	0, 0, 0, 0, 0, 3116, 0, 650, 0, 0,
	1505, 1500, 0, 0, 0, 0, 0, 630, 1472, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	631, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 636,
	0, 0, 1086, 0, 1086, 1491, 0, 0, 0, 0,
	3155, 632, 1488, 0, 649, 0, 648, 0, 0, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 641, 0, 0,
	0, 0, 652, 0, 647, 0, 0, 0, 0, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 1086, 1494,
	1495, 1496, 1497, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 1187, 0,
	0, 0, 0, 1509, 0, 0, 1519, 0, 0, 0,
	1499, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 1516, 0, 0, 0, 0, 0, 1086, 1486,
	1487, 0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513,
	1514, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 1500, 0, 1492, 0, 0, 0, 1086, 1472,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 3268, 0,
	1506, 0, 0, 0, 0, 1086, 1491, 0, 0, 2401,
	0, 0, 0, 1488, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	1494, 1495, 1496, 1497, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 1510, 1187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1509, 0, 0, 1519, 0, 0,
	0, 1499, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 3381, 1508, 0, 0, 1483, 1484, 1490, 1511, 1489,
	1485, 0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 2611,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1187, 1187, 0, 0, 0, 3433,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3459, 1197, 1493, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 1483, 1484, 1490, 1511,
	1489, 1485, 0, 1482, 1480, 1481, 1473, 1474, 1475, 1476,
	1478, 1479, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3550, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 3566, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 2236, 0, 0, 0, 0, 0, 0,
	0, 2237, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3222, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3349, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3275, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3156, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2952, 0, 219, 220, 221, 222,
	223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095,
	1096, 1097, 1098, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1099, 233, 234, 235, 236,
	237, 238, 1100, 1101, 239, 484, 485, 486, 1102, 240,
	487, 1103, 1088, 1104, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1105, 251, 0, 252, 253,
	254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 257, 258, 259, 260, 261, 262, 488, 489,
	1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118, 267,
	268, 269, 1119, 270, 1120, 271, 272, 1121, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1122, 216, 1123, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1124, 290, 1125, 1126,
	961, 291, 292, 1127, 293, 494, 1128, 495, 294, 1129,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 1130, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1131, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 1132, 501, 1133, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1134, 325, 324, 1135, 326, 503, 967, 327, 328,
	968, 1136, 329, 330, 1137, 1138, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 1139, 218, 971, 348,
	1140, 504, 349, 505, 351, 352, 1141, 353, 354, 355,
	1142, 1143, 357, 358, 359, 1144, 1145, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1146, 371, 372, 508, 373, 509, 374,
	1147, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1148, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1149, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1150, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1151, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 1152,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1153, 443, 444, 442, 1154, 445, 446, 447,
	448, 449, 278, 450, 1155, 451, 514, 515, 516, 517,
	1156, 458, 1157, 452, 453, 518, 454, 519, 1158, 455,
	456, 457, 0, 459, 460, 1159, 1160, 461, 462, 463,
	464, 465, 467, 1161, 468, 1162, 466, 469, 470, 471,
	520, 521, 522, 1163, 473, 472, 523, 1164, 1165, 1166,
	1167, 474, 475, 524, 476, 477, 478, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2935, 0, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2805, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2129, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1191, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1829, 0, 0, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1080, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 2104,
	0, 900, 858, 859, 860, 856, 857, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 2101, 224, 0, 0, 0, 0, 0,
	951, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 941, 939, 940,
	947, 943, 942, 946, 257, 258, 259, 260, 929, 262,
	922, 921, 847, 263, 0, 265, 264, 0, 266, 2102,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 853, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 875,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 945, 944, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 969, 344, 345, 347, 970, 346, 844, 218,
	971, 348, 866, 955, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 916, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 854, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 889, 890, 892, 893, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 911, 891,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 887, 0, 451, 930, 931,
	932, 933, 0, 458, 0, 452, 453, 983, 454, 984,
	864, 455, 456, 457, 0, 459, 460, 0, 848, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 895, 469,
	470, 471, 520, 927, 977, 2100, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 845,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 841, 842, 2103, 0, 0, 0, 0, 0,
	0, 870, 2099, 0, 834, 868, 900, 858, 859, 860,
	856, 857, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 941, 939, 940, 947, 943, 942, 946, 257,
	258, 259, 260, 929, 262, 922, 921, 847, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 853, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 875, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 945, 944, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 969, 344, 345,
	347, 970, 346, 844, 218, 971, 348, 866, 955, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 916, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 854, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 889, 890, 892, 893,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 911, 891, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	887, 0, 451, 930, 931, 932, 933, 0, 458, 0,
	452, 453, 983, 454, 984, 864, 455, 456, 457, 0,
	459, 460, 0, 848, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 895, 469, 470, 471, 1335, 927, 977,
	0, 473, 472, 523, 0, 0, 0, 176, 474, 475,
	524, 476, 477, 478, 845, 177, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 841, 842, 900,
	858, 859, 860, 856, 857, 869, 1544, 1542, 0, 0,
	868, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 941, 939, 940, 947, 943,
	942, 946, 257, 258, 259, 260, 929, 262, 922, 921,
	847, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 853,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 875, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 945, 944, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	969, 344, 345, 347, 970, 346, 844, 218, 971, 348,
	866, 955, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	916, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 854, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 889,
	890, 892, 893, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 911, 891, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 887, 0, 451, 930, 931, 932, 933,
	0, 458, 0, 452, 453, 983, 454, 984, 864, 455,
	456, 457, 0, 459, 460, 0, 848, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 895, 469, 470, 471,
	1335, 927, 977, 0, 473, 472, 523, 0, 0, 0,
	176, 474, 475, 524, 476, 477, 478, 845, 177, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	841, 842, 900, 858, 859, 860, 856, 857, 869, 1544,
	2554, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 941, 939,
	940, 947, 943, 942, 946, 257, 258, 259, 260, 929,
	262, 922, 921, 847, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 853, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	875, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 945, 944, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 969, 344, 345, 347, 970, 346, 844,
	218, 971, 348, 866, 955, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 916, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 854, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 182,
	420, 421, 889, 890, 892, 893, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 911,
	891, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 184,
	445, 446, 447, 448, 449, 278, 887, 0, 451, 930,
	931, 932, 933, 0, 458, 0, 452, 453, 983, 454,
	984, 864, 455, 456, 457, 0, 459, 460, 0, 848,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 895,
	469, 470, 471, 1335, 927, 977, 0, 473, 472, 523,
	0, 0, 0, 176, 474, 475, 524, 476, 477, 478,
	845, 177, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 841, 842, 900, 858, 859, 860, 856,
	857, 869, 1544, 1542, 0, 0, 868, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 915, 894, 926, 884, 925,
	924, 2198, 233, 886, 885, 236, 237, 238, 876, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 941, 939, 940, 947, 943, 942, 946, 257, 258,
	259, 260, 929, 262, 922, 921, 847, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 853, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 2203, 961, 291, 292, 0,
	293, 985, 0, 875, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	2199, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	945, 944, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 969, 344, 345, 347,
	970, 346, 844, 218, 971, 348, 866, 955, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 916, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 854, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 889, 890, 892, 893, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 911, 891, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 887,
	0, 451, 930, 931, 932, 933, 0, 458, 2200, 452,
	453, 983, 454, 984, 864, 455, 456, 457, 0, 459,
	460, 0, 848, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 895, 469, 470, 471, 520, 927, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 845, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 841, 842, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 2157, 868,
	900, 858, 859, 860, 856, 857, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 941, 939, 940, 947,
	943, 942, 946, 257, 258, 259, 260, 929, 262, 922,
	921, 847, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	853, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 875, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 945, 944, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 969, 344, 345, 347, 970, 346, 844, 218, 971,
	348, 866, 955, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 916, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 854, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	889, 890, 892, 893, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 911, 891, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 887, 0, 451, 930, 931, 932,
	933, 0, 458, 0, 452, 453, 983, 454, 984, 864,
	455, 456, 457, 0, 459, 460, 0, 848, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 895, 469, 470,
	471, 520, 927, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 845, 0,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 0,
	0, 841, 842, 0, 0, 0, 0, 0, 0, 0,
	870, 2155, 0, 2154, 868, 900, 858, 859, 860, 856,
	857, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 941, 939, 940, 947, 943, 942, 946, 257, 258,
	259, 260, 929, 262, 922, 921, 847, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 853, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 875, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	945, 944, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 969, 344, 345, 347,
	970, 346, 844, 218, 971, 348, 866, 955, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 916, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 854, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 889, 890, 892, 893, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 911, 891, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 887,
	0, 451, 930, 931, 932, 933, 0, 458, 0, 452,
	453, 983, 454, 984, 864, 455, 456, 457, 0, 459,
	460, 0, 848, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 895, 469, 470, 471, 520, 927, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 845, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 841, 842, 0, 0,
	0, 0, 0, 0, 0, 870, 2152, 0, 2151, 868,
	900, 858, 859, 860, 856, 857, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 941, 939, 940, 947,
	943, 942, 946, 257, 258, 259, 260, 929, 262, 922,
	921, 847, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	853, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 875, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 945, 944, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 969, 344, 345, 347, 970, 346, 844, 218, 971,
	348, 866, 955, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 916, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 854, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	889, 890, 892, 893, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 911, 891, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 887, 0, 451, 930, 931, 932,
	933, 0, 458, 0, 452, 453, 983, 454, 984, 864,
	455, 456, 457, 0, 459, 460, 0, 848, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 895, 469, 470,
	471, 520, 927, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 845, 0,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 0,
	0, 841, 842, 0, 0, 0, 0, 0, 0, 0,
	870, 2149, 0, 2148, 868, 900, 858, 859, 860, 856,
	857, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 941, 939, 940, 947, 943, 942, 946, 257, 258,
	259, 260, 929, 262, 922, 921, 847, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 853, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 875, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	945, 944, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 969, 344, 345, 347,
	970, 346, 844, 218, 971, 348, 866, 955, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 916, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 854, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 889, 890, 892, 893, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 911, 891, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 887,
	0, 451, 930, 931, 932, 933, 0, 458, 0, 452,
	453, 983, 454, 984, 864, 455, 456, 457, 0, 459,
	460, 0, 848, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 895, 469, 470, 471, 520, 927, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 845, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 841, 842, 0, 0,
	0, 0, 0, 0, 0, 870, 2146, 0, 1404, 868,
	900, 858, 859, 860, 856, 857, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 941, 939, 940, 947,
	943, 942, 946, 257, 258, 259, 260, 929, 262, 922,
	921, 847, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	853, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 875, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 945, 944, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 969, 344, 345, 347, 970, 346, 844, 218, 971,
	348, 866, 955, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 916, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 854, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	889, 890, 892, 893, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 911, 891, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 887, 0, 451, 930, 931, 932,
	933, 0, 458, 0, 452, 453, 983, 454, 984, 864,
	455, 456, 457, 0, 459, 460, 0, 848, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 895, 469, 470,
	471, 520, 927, 977, 0, 473, 472, 523, 1403, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 845, 0,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 0,
	0, 841, 842, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 837, 868, 900, 858, 859, 860, 856,
	857, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 941, 939, 940, 947, 943, 942, 946, 257, 258,
	259, 260, 929, 262, 922, 921, 847, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 853, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 875, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	945, 944, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 969, 344, 345, 347,
	970, 346, 844, 218, 971, 348, 866, 955, 349, 923,
	351, 352, 0, 897, 354, 898, 849, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 916, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 854, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 889, 890, 892, 893, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 911, 891, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 887,
	0, 451, 930, 931, 932, 933, 0, 458, 0, 452,
	453, 983, 454, 984, 864, 455, 456, 457, 0, 459,
	460, 0, 848, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 895, 469, 470, 471, 520, 927, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 845, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 841, 842, 900, 858,
	859, 860, 856, 857, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 3563, 254,
	0, 960, 255, 256, 941, 939, 940, 947, 943, 942,
	946, 257, 258, 259, 260, 929, 262, 922, 921, 847,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 853, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 875, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 945, 944, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 969,
	344, 345, 347, 970, 346, 844, 218, 971, 348, 866,
	955, 349, 923, 351, 352, 0, 897, 354, 898, 849,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 916,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 854, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 889, 890,
	892, 893, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 911, 891, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 887, 0, 451, 930, 931, 932, 933, 0,
	458, 0, 452, 453, 983, 454, 984, 864, 455, 456,
	457, 0, 459, 460, 0, 848, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 895, 469, 470, 471, 520,
	927, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 845, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 841,
	842, 900, 858, 859, 860, 856, 857, 869, 870, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 3407, 254, 0, 960, 255, 256, 941, 939, 940,
	947, 943, 942, 946, 257, 258, 259, 260, 929, 262,
	922, 921, 847, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 853, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 875,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 945, 944, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 969, 344, 345, 347, 970, 346, 844, 218,
	971, 348, 866, 955, 349, 923, 351, 352, 0, 897,
	354, 898, 849, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 916, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 854, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 889, 890, 892, 893, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 911, 891,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 887, 0, 451, 930, 931,
	932, 933, 0, 458, 0, 452, 453, 983, 454, 984,
	864, 455, 456, 457, 0, 459, 460, 0, 848, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 895, 469,
	470, 471, 520, 927, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 845,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 841, 842, 900, 858, 859, 860, 856, 857,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	941, 939, 940, 947, 943, 942, 946, 257, 258, 259,
	260, 929, 262, 922, 921, 847, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 853, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 875, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 945,
	944, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 969, 344, 345, 347, 970,
	346, 844, 3126, 971, 348, 866, 955, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 916, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	854, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 889, 890, 892, 893, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 911, 891, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 887, 0,
	451, 930, 931, 932, 933, 0, 458, 0, 452, 453,
	983, 454, 984, 864, 455, 456, 457, 0, 459, 460,
	0, 848, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 895, 469, 470, 471, 520, 927, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 845, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 0, 841, 842, 1608, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 0, 868, 900,
	858, 859, 860, 856, 857, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 941, 939, 940, 947, 943,
	942, 946, 257, 258, 259, 260, 929, 262, 922, 921,
	847, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 853,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 875, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 945, 944, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	969, 344, 345, 347, 970, 346, 844, 218, 971, 348,
	866, 955, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	916, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 854, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 889,
	890, 892, 893, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 911, 891, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 887, 0, 451, 930, 931, 932, 933,
	0, 458, 0, 452, 453, 983, 454, 984, 864, 455,
	456, 457, 0, 459, 460, 0, 848, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 895, 469, 470, 471,
	520, 927, 977, 2931, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 845, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	841, 842, 900, 858, 859, 860, 856, 857, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 941, 939,
	940, 947, 943, 942, 946, 257, 258, 259, 260, 929,
	262, 922, 921, 847, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 853, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	875, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 896, 0, 0,
	2018, 303, 305, 312, 0, 962, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 945, 944, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 969, 344, 345, 347, 970, 346, 844,
	218, 971, 348, 866, 955, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 2017, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 916, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 854, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 889, 890, 892, 893, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 911,
	891, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 887, 0, 451, 930,
	931, 932, 933, 0, 458, 0, 452, 453, 983, 454,
	984, 864, 455, 456, 457, 0, 459, 460, 0, 848,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 895,
	469, 470, 471, 520, 927, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	845, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 841, 842, 900, 858, 859, 860, 856,
	857, 869, 870, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 941, 939, 940, 947, 943, 942, 946, 257, 258,
	259, 260, 929, 262, 922, 921, 847, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 853, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 875, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	945, 944, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 969, 344, 345, 347,
	970, 346, 844, 218, 971, 348, 866, 955, 349, 923,
	351, 352, 0, 897, 354, 898, 849, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 916, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 854, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 889, 890, 892, 893, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 911, 891, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 887,
	0, 451, 930, 931, 932, 933, 0, 458, 0, 452,
	453, 983, 454, 984, 864, 455, 456, 457, 0, 459,
	460, 0, 848, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 895, 469, 470, 471, 520, 927, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 845, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 841, 842, 900, 858,
	859, 860, 856, 857, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 941, 939, 940, 947, 943, 942,
	946, 257, 258, 259, 260, 929, 262, 922, 921, 847,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 853, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 875, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 945, 944, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 969,
	344, 345, 347, 970, 346, 844, 218, 971, 348, 866,
	955, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 916,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 854, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 889, 890,
	892, 893, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 911, 891, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 887, 0, 451, 930, 931, 932, 933, 0,
	458, 0, 452, 453, 983, 454, 984, 864, 455, 456,
	457, 0, 459, 460, 0, 848, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 895, 469, 470, 471, 520,
	927, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 845, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 841,
	842, 1608, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 868, 900, 858, 859, 860, 856, 857, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 941,
	939, 940, 947, 943, 942, 946, 257, 258, 259, 260,
	929, 262, 922, 921, 847, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 853, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 2203, 961, 291, 292, 0, 293, 985,
	0, 875, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 945, 944,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 969, 344, 345, 347, 970, 346,
	844, 218, 971, 348, 866, 955, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 916, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 854,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 889, 890, 892, 893, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	911, 891, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 887, 0, 451,
	930, 931, 932, 933, 0, 458, 0, 452, 453, 983,
	454, 984, 864, 455, 456, 457, 0, 459, 460, 0,
	848, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	895, 469, 470, 471, 520, 927, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 845, 0, 0, 0, 0, 0, 843, 0, 0,
	0, 0, 0, 0, 841, 842, 900, 858, 859, 860,
	856, 857, 869, 870, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 941, 939, 940, 947, 943, 942, 946, 257,
	258, 259, 260, 929, 262, 922, 921, 847, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 853, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 875, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 945, 944, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 969, 344, 345,
	347, 970, 346, 844, 218, 971, 348, 866, 955, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 916, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 854, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 889, 890, 892, 893,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 911, 891, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	887, 0, 451, 930, 931, 932, 933, 0, 458, 0,
	452, 453, 983, 454, 984, 864, 455, 456, 457, 0,
	459, 460, 0, 848, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 895, 469, 470, 471, 520, 927, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 845, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 841, 842, 0,
	0, 0, 0, 0, 0, 0, 870, 1542, 0, 2208,
	868, 900, 858, 859, 860, 856, 857, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 941, 939, 940,
	947, 943, 942, 946, 257, 258, 259, 260, 929, 262,
	922, 921, 847, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 853, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 875,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 945, 944, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 969, 344, 345, 347, 970, 346, 844, 218,
	971, 348, 866, 955, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 916, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 854, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 889, 890, 892, 893, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 911, 891,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 887, 0, 451, 930, 931,
	932, 933, 0, 458, 0, 452, 453, 983, 454, 984,
	864, 455, 456, 457, 0, 459, 460, 0, 848, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 895, 469,
	470, 471, 520, 927, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 845,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 2206, 868, 900, 858, 859, 860,
	856, 857, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 941, 939, 940, 947, 943, 942, 946, 257,
	258, 259, 260, 929, 262, 922, 921, 847, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 853, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 875, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 945, 944, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 969, 344, 345,
	347, 970, 346, 844, 218, 971, 348, 866, 955, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 916, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 854, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 889, 890, 892, 893,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 911, 891, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	887, 0, 451, 930, 931, 932, 933, 0, 458, 0,
	452, 453, 983, 454, 984, 864, 455, 456, 457, 0,
	459, 460, 0, 848, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 895, 469, 470, 471, 520, 927, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 845, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 841, 842, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 2194,
	868, 900, 858, 859, 860, 856, 857, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 941, 939, 940,
	947, 943, 942, 946, 257, 258, 259, 260, 929, 262,
	922, 921, 847, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 853, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 875,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 945, 944, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 969, 344, 345, 347, 970, 346, 844, 218,
	971, 348, 866, 955, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 916, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 854, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 889, 890, 892, 893, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 911, 891,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 887, 0, 451, 930, 931,
	932, 933, 0, 458, 0, 452, 453, 983, 454, 984,
	864, 455, 456, 457, 0, 459, 460, 0, 848, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 895, 469,
	470, 471, 520, 927, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 845,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 2183, 868, 900, 858, 859, 860,
	856, 857, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 941, 939, 940, 947, 943, 942, 946, 257,
	258, 259, 260, 929, 262, 922, 921, 847, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 853, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 875, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 945, 944, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 969, 344, 345,
	347, 970, 346, 844, 218, 971, 348, 866, 955, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 916, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 854, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 889, 890, 892, 893,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 911, 891, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	887, 0, 451, 930, 931, 932, 933, 0, 458, 0,
	452, 453, 983, 454, 984, 864, 455, 456, 457, 0,
	459, 460, 0, 848, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 895, 469, 470, 471, 520, 927, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 845, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 841, 842, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 2181,
	868, 2172, 2179, 859, 860, 856, 857, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 941, 939, 940,
	947, 943, 942, 946, 257, 258, 259, 260, 929, 2175,
	922, 921, 847, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 853, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 875,
	294, 0, 295, 296, 297, 2176, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 945, 944, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 2177, 2174, 342,
	888, 341, 969, 344, 345, 347, 970, 346, 844, 218,
	971, 348, 866, 955, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 916, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 854, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 2178, 0, 420,
	421, 889, 890, 892, 893, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 911, 891,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 887, 0, 451, 930, 931,
	932, 933, 0, 458, 0, 452, 453, 983, 454, 984,
	864, 455, 456, 457, 0, 459, 460, 0, 848, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 895, 469,
	470, 471, 520, 927, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 2173, 478, 845,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 2169, 868, 2172, 2179, 859, 860,
	856, 857, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 941, 939, 940, 947, 943, 942, 946, 257,
	258, 259, 260, 929, 2175, 922, 921, 847, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 853, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 875, 294, 0, 295, 296, 297,
	2176, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 945, 944, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 2177, 2174, 342, 888, 341, 969, 344, 345,
	347, 970, 346, 844, 218, 971, 348, 866, 955, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 916, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 854, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 2178, 0, 420, 421, 889, 890, 892, 893,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 911, 891, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	887, 0, 451, 930, 931, 932, 933, 0, 458, 0,
	452, 453, 983, 454, 984, 864, 455, 456, 457, 0,
	459, 460, 0, 848, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 895, 469, 470, 471, 520, 927, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 2173, 478, 845, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 841, 842, 900,
	858, 859, 860, 856, 857, 869, 870, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 941, 939, 940, 947, 943,
	942, 946, 257, 258, 259, 260, 929, 262, 922, 921,
	847, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 853,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 875, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 945, 944, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	969, 344, 345, 347, 970, 346, 844, 218, 971, 348,
	866, 955, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	916, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 854, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 889,
	890, 892, 893, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 911, 891, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 887, 0, 451, 930, 931, 932, 933,
	0, 458, 0, 452, 453, 983, 454, 984, 864, 455,
	456, 457, 0, 459, 460, 0, 848, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 895, 469, 470, 471,
	520, 927, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 845, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	841, 842, 0, 0, 0, 0, 0, 1550, 0, 870,
	0, 0, 0, 868, 900, 858, 859, 860, 856, 857,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 2002, 224, 0, 0,
	0, 0, 0, 951, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	941, 939, 940, 947, 943, 942, 946, 257, 258, 259,
	260, 929, 262, 922, 921, 847, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 853, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 875, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 945,
	944, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 969, 344, 345, 347, 970,
	346, 844, 218, 971, 348, 866, 955, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 916, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	854, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 889, 890, 892, 893, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 911, 891, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 887, 0,
	451, 930, 931, 932, 933, 0, 458, 0, 452, 453,
	983, 454, 984, 864, 455, 456, 457, 0, 459, 460,
	0, 848, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 895, 469, 470, 471, 520, 927, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 845, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 0, 841, 842, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 1223, 868, 900,
	858, 859, 860, 856, 857, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 941, 939, 940, 947, 943,
	942, 946, 257, 258, 259, 260, 929, 262, 922, 921,
	847, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 853,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 875, 294, 0,
	295, 296, 297, 298, 1222, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 945, 944, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	969, 344, 345, 347, 970, 346, 844, 218, 971, 348,
	866, 955, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	916, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 854, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 889,
	890, 892, 893, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 911, 891, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 887, 0, 451, 930, 931, 932, 933,
	0, 458, 0, 452, 453, 983, 454, 984, 864, 455,
	456, 457, 0, 459, 460, 0, 848, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 895, 469, 470, 471,
	520, 927, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 845, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	841, 842, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 1217, 868, 900, 858, 859, 860, 856, 857,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	941, 939, 940, 947, 943, 942, 946, 257, 258, 259,
	260, 929, 262, 922, 921, 847, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 853, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 875, 294, 0, 295, 296, 297, 298, 1216,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 945,
	944, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 969, 344, 345, 347, 970,
	346, 844, 218, 971, 348, 866, 955, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 916, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	854, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 889, 890, 892, 893, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 911, 891, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 887, 0,
	451, 930, 931, 932, 933, 0, 458, 0, 452, 453,
	983, 454, 984, 864, 455, 456, 457, 0, 459, 460,
	0, 848, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 895, 469, 470, 471, 520, 927, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 845, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 0, 841, 842, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 1212, 868, 900,
	858, 859, 860, 856, 857, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 941, 939, 940, 947, 943,
	942, 946, 257, 258, 259, 260, 929, 262, 922, 921,
	847, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 853,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 875, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 945, 944, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	969, 344, 345, 347, 970, 346, 844, 218, 971, 348,
	866, 955, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	916, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 854, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 889,
	890, 892, 893, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 911, 891, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 887, 0, 451, 930, 931, 932, 933,
	0, 458, 0, 452, 453, 983, 454, 984, 864, 455,
	456, 457, 0, 459, 460, 0, 848, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 895, 469, 470, 471,
	520, 927, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 845, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	841, 842, 900, 858, 859, 860, 856, 857, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 941, 939,
	940, 947, 943, 942, 946, 257, 258, 259, 260, 929,
	262, 922, 921, 847, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 853, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	875, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 945, 944, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 969, 344, 345, 347, 970, 346, 844,
	218, 971, 348, 866, 955, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 916, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 854, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 889, 890, 892, 893, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 911,
	891, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 887, 0, 451, 930,
	931, 932, 933, 0, 458, 0, 452, 453, 983, 454,
	984, 864, 455, 456, 457, 0, 459, 460, 0, 848,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 895,
	469, 470, 471, 520, 927, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	845, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 841, 842, 900, 858, 859, 860, 856,
	857, 869, 870, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	3592, 941, 939, 940, 947, 943, 942, 946, 257, 258,
	259, 260, 929, 262, 922, 921, 847, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 853, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 875, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	945, 944, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 969, 344, 345, 347,
	970, 346, 844, 218, 971, 348, 866, 955, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 916, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 854, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 889, 890, 892, 893, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 911, 891, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 887,
	0, 451, 930, 931, 932, 933, 0, 458, 0, 452,
	453, 983, 454, 984, 864, 455, 456, 457, 0, 3591,
	460, 0, 848, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 895, 469, 470, 471, 520, 927, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 845, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 841, 842, 900, 858,
	859, 860, 856, 857, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 3590, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 3592, 941, 939, 940, 947, 943, 942,
	946, 257, 258, 259, 260, 929, 262, 922, 921, 847,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 853, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 875, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 945, 944, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 969,
	344, 345, 347, 970, 346, 844, 218, 971, 348, 866,
	955, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 916,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 854, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 889, 890,
	892, 893, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 911, 891, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 887, 0, 451, 930, 931, 932, 933, 0,
	458, 0, 452, 453, 983, 454, 984, 864, 455, 456,
	457, 0, 3591, 460, 0, 848, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 895, 469, 470, 471, 520,
	927, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 845, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 841,
	842, 900, 858, 859, 860, 856, 857, 869, 870, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 941, 939, 940,
	947, 943, 942, 946, 257, 258, 259, 260, 929, 262,
	922, 921, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 853, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 875,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 945, 944, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 969, 344, 345, 347, 970, 346, 0, 218,
	971, 348, 866, 955, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 916, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 854, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 889, 890, 892, 893, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 911, 891,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 887, 0, 451, 930, 931,
	932, 933, 0, 458, 0, 452, 453, 983, 454, 984,
	864, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 895, 469,
	470, 471, 520, 927, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 2191, 0, 0, 0, 0,
	0, 0, 2189, 2190, 900, 858, 859, 860, 856, 857,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 0, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	941, 939, 940, 947, 943, 942, 946, 257, 258, 259,
	260, 929, 262, 922, 921, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 875, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 945,
	944, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 969, 344, 345, 347, 970,
	346, 0, 218, 971, 348, 866, 955, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 916, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	854, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 889, 890, 892, 893, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 911, 891, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 887, 0,
	451, 930, 931, 932, 933, 0, 458, 0, 452, 453,
	983, 454, 984, 864, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 895, 469, 470, 471, 520, 927, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 900, 858, 859, 860, 856, 857, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 870, 224, 0, 0, 868, 0,
	0, 951, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 0, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 3592, 941, 939,
	940, 947, 943, 942, 946, 257, 258, 259, 260, 929,
	262, 922, 921, 847, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 853, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	875, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 0, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 0, 954,
	0, 314, 315, 316, 966, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 0, 0, 329, 330, 945, 944, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 969, 344, 345, 347, 970, 346, 844,
	218, 0, 348, 866, 955, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 916, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 854, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 889, 890, 892, 893, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 0, 428, 429, 911,
	891, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 887, 0, 451, 930,
	931, 932, 933, 0, 458, 0, 452, 453, 983, 454,
	984, 864, 455, 456, 457, 0, 3591, 460, 0, 848,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 895,
	469, 470, 471, 520, 927, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	1025, 0, 0, 841, 842, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 868, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 950, 239, 484, 485, 486, 0,
	240, 957, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 941, 939, 940, 947,
	943, 942, 946, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 495, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1011, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 945, 944, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 218, 971,
	348, 0, 955, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 1017, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 1019, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 182, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 982, 0, 443, 444, 442, 184, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 983, 454, 984, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 466, 469, 470,
	471, 1335, 521, 522, 0, 473, 472, 523, 1025, 0,
	0, 176, 474, 475, 524, 476, 477, 478, 0, 177,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 1015, 0,
	1632, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 950, 239, 484, 485, 486, 0, 240, 957,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 941, 939, 940, 947, 943, 942,
	946, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 495, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1011, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 945, 944, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 218, 971, 348, 0,
	955, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	1017, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 1019, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 182, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	982, 0, 443, 444, 442, 184, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 983, 454, 984, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 466, 469, 470, 471, 1335,
	521, 522, 0, 473, 472, 523, 2667, 0, 1025, 176,
	474, 475, 524, 476, 477, 478, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 1015, 951, 1632, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 950, 239, 484, 485, 486, 0, 240, 957,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 941, 939, 940, 947, 943, 942,
	946, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 495, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1011, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 945, 944, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 218, 971, 348, 0,
	955, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	1017, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 1019, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 983, 454, 984, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1007, 0, 1025, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 1015, 951, 1013, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 950, 239, 484, 485, 486, 0, 240, 957,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 941, 939, 940, 947, 943, 942,
	946, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 495, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1011, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 945, 944, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 218, 971, 348, 0,
	955, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	1017, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 1019, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 983, 454, 984, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1025, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 1015, 0, 1013, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	950, 239, 484, 485, 486, 0, 240, 957, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 941, 939, 940, 947, 943, 942, 946, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 495, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1011, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 945, 944, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 218, 971, 348, 0, 955, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1017, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 1019, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 983, 454, 984, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1025, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 1015, 0, 1013, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 950, 239,
	484, 485, 486, 0, 240, 957, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	941, 939, 940, 947, 943, 942, 946, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 495, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 945,
	944, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 218, 971, 348, 0, 955, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 1019, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	983, 454, 984, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 834, 0, 1184, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 1533, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1088, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 182, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 184, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 1335, 521, 522, 0, 473,
	472, 523, 1332, 0, 1184, 176, 474, 475, 524, 476,
	477, 478, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 151, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1088, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 182, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 184, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 1335, 521, 522, 0, 473,
	472, 523, 0, 0, 0, 176, 474, 475, 524, 476,
	477, 478, 0, 177, 0, 0, 0, 0, 1184, 1183,
	0, 0, 0, 0, 1181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1088, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 502, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 0, 971, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 2868, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1184, 1183, 0, 0, 0, 0,
	1181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 1202, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1088, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1025, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 0, 0, 1341, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 950, 239, 484, 485,
	486, 0, 240, 957, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 941, 939,
	940, 947, 943, 942, 946, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	495, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 945, 944, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	218, 971, 348, 0, 955, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 983, 454,
	984, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	834, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 182,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 184,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 1335, 521, 522, 0, 473, 472, 523,
	213, 0, 0, 176, 474, 475, 524, 476, 477, 478,
	0, 177, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 151, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1282, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	1646, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 213, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 1286, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 213, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 2819, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 213, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 1286, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 213, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 2428, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	213, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 2955, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 704, 0,
	592, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	1916, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 598, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	702, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 597, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 0, 591,
	0, 592, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 601, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 598, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 597, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 589, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1184,
	1183, 0, 0, 0, 0, 1181, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 1088, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 0, 971, 348,
	2791, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 592, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 598, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 1949, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	597, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 592, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 601, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 598, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 597, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1368,
	0, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 601, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	1367, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	1366, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 1365, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1330,
	0, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1329, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1326,
	0, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1325, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1262,
	0, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1261, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1259,
	0, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1258, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1177,
	0, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1179, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1184,
	1183, 0, 0, 0, 0, 1181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 1088, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 0, 971, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1184, 1183, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 601, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 1735, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1184,
	1183, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 1088, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 0, 971, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 1184, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 2316, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 2313, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	2464, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 2319, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 2461, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 2463, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 2460, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 2318, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 2462, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	2316, 240, 487, 0, 0, 2310, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 2313, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	2319, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 2309, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 2318, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 2317, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1423,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 1426,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 1424, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 1425, 472, 523, 1172,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1174, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 1017, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1169,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1171, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 1017, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1076,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1078, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 1017, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 553,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 552, 223, 542, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 545, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 546, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 547, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 541,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 542, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 545, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 546, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 547, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	2783, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 1017, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 2400, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 1926, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	1852, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1856, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1855, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1845, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1847, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1319, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1318, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1316, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1315, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1313, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1312, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1309, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1308, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1194, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1196, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 545, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 546, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 547, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	1956, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 1954, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 1952, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 695, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 694, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	693, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	2464, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 3287, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 532, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 531,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 530, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 213, 3296, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 213, 2451, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 3080, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 2242, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 213,
	2451, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 2448, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 1933, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1924, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 573, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 1054, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 1052, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 574, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 570, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 1055,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	569, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1868, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1867, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 573, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 563, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 574, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 570, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 1340,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	569, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1323, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1322, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1270, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1269, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1251, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1188, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 573, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 1054, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 1052, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 574, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 570, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 1055,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	569, 515, 516, 517, 0, 458, 0, 452, 1053, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 1036,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 573, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 563, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 561, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 562, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 574, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 564, 403, 0, 404, 408, 409, 570,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 565, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 569, 515, 516, 517, 0, 458,
	0, 452, 567, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 557, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 558, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 555, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 549, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 527, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	2759, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 2757, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 2744, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 2411, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 558, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 1881, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 0, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 1292, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1232, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 990,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	0, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	0, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 0,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 0, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1469,
	1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 1500,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 0, 1502, 1503,
	1504, 1512, 1513, 1514, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 1491, 1505, 1500, 0, 0, 0, 0,
	1488, 0, 1472, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 1519, 0, 0, 0, 1499, 1501,
	0, 0, 0, 1494, 1495, 1496, 1497, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 0, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 0,
	1519, 0, 0, 1507, 1499, 1501, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 1516, 0, 0, 0,
	0, 1517, 0, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 0, 1502, 1503,
	1504, 1512, 1513, 1514, 0, 0, 1510, 0, 1498, 0,
	0, 0, 0, 0, 1505, 1500, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 1493, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 1510, 0, 0, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 1483, 1484, 1490, 1511, 1489, 1485, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 2610, 0, 0,
	0, 0, 0, 1494, 1495, 1496, 1497, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 1508, 0, 0, 1483,
	1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 1479, 0, 0, 1509, 0, 0,
	1519, 0, 0, 2607, 1499, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 1516, 0, 0, 0,
	0, 0, 0, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 1469, 1470,
	0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 1500, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 1493, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 1470, 1510, 1502, 1503, 1504, 1512, 1513, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	1500, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1495, 1496, 1497,
	0, 0, 0, 0, 0, 1471, 1477, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 0, 0, 1519, 0, 0, 1508, 1499, 1501, 1483,
	1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 1479, 0, 0, 1515, 0, 1516,
	0, 0, 0, 2606, 0, 0, 1486, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 1495,
	1496, 1497, 1507, 0, 0, 0, 0, 0, 1477, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 0, 1509, 0, 0, 1519, 0, 0, 0, 1499,
	1501, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 1516, 0, 0, 0, 0, 0, 0, 1486, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 1498, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 1469, 1470, 1510, 1502, 1503, 1504, 1512,
	1513, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 1500, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 1493, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1508,
	0, 0, 1483, 1484, 1490, 1511, 1489, 1485, 0, 1482,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 2605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 1495, 1496, 1497, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 0, 1519, 0,
	0, 1508, 1499, 1501, 1483, 1484, 1490, 1511, 1489, 1485,
	0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479,
	0, 0, 1515, 0, 1516, 0, 0, 0, 2106, 0,
	0, 1486, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	1505, 1500, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1518, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 1470, 0,
	1502, 1503, 1504, 1512, 1513, 1514, 1471, 0, 0, 0,
	1510, 0, 0, 0, 0, 1491, 1505, 1500, 0, 0,
	0, 0, 1488, 0, 1472, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1495, 1496, 1497, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 1508, 0, 0, 1483, 1484, 1490,
	1511, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 1479, 1509, 0, 0, 1519, 3545, 0, 0,
	1499, 1501, 0, 0, 0, 1494, 1495, 1496, 1497, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	1515, 0, 1516, 0, 0, 0, 0, 0, 0, 1486,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	0, 0, 1519, 0, 0, 1507, 1499, 1501, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 1516, 0,
	0, 0, 0, 1517, 0, 1486, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 0, 1502, 1503,
	1504, 1512, 1513, 1514, 0, 0, 0, 0, 1510, 0,
	1498, 0, 0, 0, 1505, 1500, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 1518, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 1510, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 1483, 1484, 1490, 1511, 1489,
	1485, 0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	1479, 0, 0, 0, 0, 3541, 0, 0, 0, 0,
	0, 0, 0, 1494, 1495, 1496, 1497, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 1508, 0,
	0, 1483, 1484, 1490, 1511, 1489, 1485, 0, 1482, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 1479, 1509, 0, 0,
	1519, 3467, 0, 0, 1499, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 1516, 0, 0, 0,
	0, 0, 0, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 1470, 0, 1502, 1503, 1504, 1512,
	1513, 1514, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 1505, 1500, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1518, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 1471, 0,
	0, 0, 1510, 0, 0, 0, 0, 1491, 1505, 1500,
	0, 0, 0, 0, 1488, 0, 1472, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 1495, 1496, 1497, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 1508, 0, 0, 1483,
	1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 1479, 1509, 0, 0, 1519, 3466,
	0, 0, 1499, 1501, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 1515, 0, 1516, 0, 0, 0, 0, 0,
	0, 1486, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 1519, 0, 0, 1507, 1499, 1501,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 1517, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 1470, 0,
	1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0, 0,
	1510, 0, 1498, 0, 0, 0, 1505, 1500, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1518,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 1510, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 1483, 1484, 1490,
	1511, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 1479, 0, 0, 0, 0, 3352, 0, 0,
	0, 0, 0, 0, 0, 1494, 1495, 1496, 1497, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	1508, 0, 0, 1483, 1484, 1490, 1511, 1489, 1485, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1509,
	0, 0, 1519, 3250, 0, 0, 1499, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 1516, 0,
	0, 0, 0, 0, 0, 1486, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 0, 1502, 1503,
	1504, 1512, 1513, 1514, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 1505, 1500, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 1518, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514,
	1471, 0, 0, 0, 1510, 0, 0, 0, 0, 1491,
	1505, 1500, 0, 0, 0, 0, 1488, 0, 1472, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1495, 1496, 1497, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 1508, 0,
	0, 1483, 1484, 1490, 1511, 1489, 1485, 0, 1482, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 1479, 1509, 0, 0,
	1519, 3203, 0, 0, 1499, 1501, 0, 0, 0, 1494,
	1495, 1496, 1497, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 1515, 0, 1516, 0, 0, 0,
	0, 0, 0, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 0, 1519, 0, 0, 1507,
	1499, 1501, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 1516, 0, 0, 0, 0, 1517, 0, 1486,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0,
	0, 0, 1510, 0, 1498, 0, 0, 0, 1505, 1500,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1518, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 1510, 0,
	0, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 1483,
	1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 1479, 0, 0, 0, 0, 3202,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 1508, 0, 0, 1483, 1484, 1490, 1511, 1489,
	1485, 0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	1479, 1509, 0, 0, 1519, 3201, 0, 0, 1499, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 0, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 1470, 0,
	1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 1505, 1500, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1518,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 1470, 0, 1502, 1503, 1504, 1512,
	1513, 1514, 1471, 0, 0, 0, 1510, 0, 0, 0,
	0, 1491, 1505, 1500, 0, 0, 0, 0, 1488, 0,
	1472, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 1495, 1496, 1497, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	1508, 0, 0, 1483, 1484, 1490, 1511, 1489, 1485, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1509,
	0, 0, 1519, 3166, 0, 0, 1499, 1501, 0, 0,
	0, 1494, 1495, 1496, 1497, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 1515, 0, 1516, 0,
	0, 0, 0, 0, 0, 1486, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 0, 1519, 0,
	0, 1507, 1499, 1501, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 1516, 0, 0, 0, 0, 1517,
	0, 1486, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514,
	0, 0, 0, 0, 1510, 0, 1498, 0, 0, 0,
	1505, 1500, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1518, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	1510, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 1483, 1484, 1490, 1511, 1489, 1485, 0, 1482, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 1479, 0, 0, 0,
	0, 2962, 0, 0, 0, 0, 0, 0, 0, 1494,
	1495, 1496, 1497, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 1508, 0, 0, 1483, 1484, 1490,
	1511, 1489, 1485, 0, 1482, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 1479, 1509, 0, 0, 1519, 2603, 0, 0,
	1499, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 1516, 0, 0, 0, 0, 0, 0, 1486,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 1505, 1500,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1518, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 0, 1502, 1503,
	1504, 1512, 1513, 1514, 1471, 0, 0, 0, 1510, 0,
	0, 0, 0, 1491, 1505, 1500, 0, 0, 0, 0,
	1488, 0, 1472, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 1508, 0, 0, 1483, 1484, 1490, 1511, 1489,
	1485, 0, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	1479, 1509, 0, 0, 1519, 2602, 0, 0, 1499, 1501,
	0, 0, 0, 1494, 1495, 1496, 1497, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 0, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 0,
	1519, 0, 0, 1507, 1499, 1501, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 1516, 0, 0, 0,
	0, 1517, 0, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 1470, 0, 1502, 1503, 1504, 1512,
	1513, 1514, 0, 0, 0, 0, 1510, 0, 1498, 0,
	0, 0, 1505, 1500, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1518, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 0, 1510, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 1483, 1484, 1490, 1511, 1489, 1485, 0,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 0,
	0, 0, 0, 2601, 0, 0, 0, 0, 0, 0,
	0, 1494, 1495, 1496, 1497, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 1508, 0, 0, 1483,
	1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 1479, 1509, 0, 0, 1519, 2600,
	0, 0, 1499, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 1516, 0, 0, 0, 0, 0,
	0, 1486, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	1505, 1500, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1518, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	1510, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 1500, 0, 0, 0, 0, 2529, 0, 1472,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1495, 1496, 1497, 0, 0, 0, 0, 1471, 0, 1477,
	3645, 0, 0, 0, 1508, 0, 1491, 1483, 1484, 1490,
	1511, 1489, 1485, 1488, 1482, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 1479, 1509, 0, 2558, 1519, 0, 0, 0,
	1499, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2530, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 1516, 0, 0, 0, 0, 0, 0, 1486,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1495, 1496, 1497, 0, 1507, 0, 0, 0, 0,
	1477, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 1509, 0, 0, 1519, 0, 0,
	0, 1499, 1501, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 1516, 0, 0, 0, 0, 0, 0,
	1486, 1487, 3644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 1498, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 1517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2216, 0, 0, 0, 0, 0, 0,
	1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 0, 1505,
	1500, 0, 0, 0, 2215, 0, 0, 1472, 0, 0,
	0, 0, 1518, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 1510,
	0, 0, 1508, 0, 1491, 1483, 1484, 1490, 1511, 1489,
	1485, 1488, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	1479, 1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1500, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 1495,
	1496, 1497, 0, 0, 0, 0, 1471, 0, 1477, 0,
	0, 0, 0, 1508, 0, 1491, 1483, 1484, 1490, 1511,
	1489, 1485, 1488, 1482, 1480, 1481, 1473, 1474, 1475, 1476,
	1478, 1479, 1509, 0, 0, 1519, 0, 0, 0, 1499,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 1516, 0, 0, 0, 0, 0, 0, 1486, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1495, 1496, 1497, 0, 1507, 0, 0, 0, 0, 1477,
	0, 2650, 0, 1492, 2649, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 1509, 0, 0, 1519, 0, 0, 0,
	1499, 1501, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 1516, 0, 0, 0, 0, 0, 0, 1486,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 1498, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 1505, 1500,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1518, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 1510, 0,
	0, 1508, 0, 1491, 1483, 1484, 1490, 1511, 1489, 1485,
	1488, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479,
	1469, 1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	1500, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 0, 0, 0, 1471, 0, 1477, 0, 0,
	0, 0, 1508, 0, 1491, 1483, 1484, 1490, 1511, 1489,
	1485, 1488, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	1479, 1509, 0, 0, 1519, 0, 0, 0, 1499, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 0, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 1495,
	1496, 1497, 0, 1507, 0, 0, 0, 0, 1477, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 1509, 0, 0, 1519, 0, 0, 0, 1499,
	1501, 0, 0, 0, 0, 0, 0, 0, 1506, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 1516, 0, 0, 0, 0, 0, 0, 1486, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 1498, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 1470,
	0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0,
	0, 0, 0, 1498, 0, 0, 0, 1505, 1500, 0,
	0, 0, 2651, 0, 0, 1472, 0, 0, 0, 0,
	1518, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 1510, 0, 0,
	1508, 0, 1491, 1483, 1484, 1490, 1511, 1489, 1485, 1488,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1469,
	1470, 0, 1502, 1503, 1504, 1512, 1513, 1514, 2941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 1500,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1495, 1496, 1497,
	0, 0, 0, 0, 1471, 0, 1477, 0, 0, 0,
	0, 1508, 0, 1491, 1483, 1484, 1490, 1511, 1489, 1485,
	1488, 1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479,
	1509, 0, 0, 1519, 0, 0, 0, 1499, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 1516,
	0, 0, 0, 0, 0, 0, 1486, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	1497, 0, 1507, 0, 0, 0, 0, 1477, 0, 0,
	0, 1492, 2656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 1509, 0, 0, 1519, 0, 0, 0, 1499, 1501,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	1516, 0, 0, 0, 0, 0, 0, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 1498, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 1470, 0,
	1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 1505, 1500, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1518,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 1510, 0, 0, 1508,
	0, 1491, 1483, 1484, 1490, 1511, 1489, 1485, 1488, 1482,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1469, 1470,
	0, 1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 1500, 0,
	0, 0, 2604, 0, 0, 1472, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 1495, 1496, 1497, 0,
	0, 0, 0, 1471, 0, 1477, 0, 0, 0, 0,
	1508, 0, 1491, 1483, 1484, 1490, 1511, 1489, 1485, 1488,
	1482, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1509,
	0, 0, 1519, 0, 0, 0, 1499, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 1516, 0,
	0, 0, 0, 0, 0, 1486, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1495, 1496, 1497,
	0, 1507, 0, 0, 0, 0, 1477, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	1509, 0, 0, 1519, 0, 0, 0, 1499, 1501, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 1516,
	0, 0, 0, 0, 2618, 0, 1486, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	1498, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	1517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 1470, 0, 1502,
	1503, 1504, 1512, 1513, 1514, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 0, 1505, 1500, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 1518, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 1510, 0, 0, 1508, 0,
	1491, 1483, 1484, 1490, 1511, 1489, 1485, 1488, 1482, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 1479, 1469, 1470, 0,
	1502, 1503, 1504, 1512, 1513, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 1500, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 1495, 1496, 1497, 0, 0,
	0, 0, 1471, 0, 1477, 0, 0, 0, 0, 1508,
	0, 1491, 1483, 1484, 1490, 1511, 1489, 1485, 1488, 1482,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 1479, 1509, 0,
	0, 1519, 0, 0, 0, 1499, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 1516, 0, 0,
	0, 0, 0, 0, 1486, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 1495, 1496, 1497, 0,
	1507, 0, 0, 0, 0, 1477, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1517, 1509,
	0, 0, 1519, 0, 0, 0, 1499, 1501, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 1516, 0,
	0, 0, 0, 0, 0, 1486, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 1498,
	1492, 0, 0, 0, 0, 0, 1688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 1517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1705, 1682, 1689, 1672,
	1715, 1714, 0, 0, 1674, 1673, 0, 0, 0, 0,
	0, 0, 1725, 1726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 1716, 0, 1712, 1711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1710, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1508, 0, 0,
	1483, 1484, 1490, 1511, 1489, 1485, 0, 1482, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 1479, 0, 0, 1709, 1707,
	1708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1684, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1698, 1687, 1700, 1702, 1703, 1704, 1699, 0, 1692,
	0, 0, 0, 0, 0, 739, 0, 774, 1508, 1721,
	1722, 1483, 1484, 1490, 1511, 1489, 1485, 0, 1482, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 1479, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 758, 744, 1676, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1713, 0, 0, 0, 1685, 0, 1686, 745, 0, 0,
	0, 0, 748, 0, 0, 0, 780, 0, 0, 0,
	0, 0, 0, 755, 756, 0, 0, 0, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 775, 750, 0, 0, 0, 1706, 0, 0,
	0, 1695, 1693, 1694, 1697, 1696, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1677, 1678, 1680, 1681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 1701, 1679, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 1724, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 753, 0, 0, 0,
	1675, 0, 0, 1717, 1718, 1719, 1720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 759, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 0, 0,
	0, 0, 0, 1683, 0, 0, 0, 0, 1690, 1723,
	0, 779, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 771, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	0, 0, 0, 741, 0, 777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 0, 0, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 770,
}
var sqlPact = [...]int{

	6405, -1000, -1000, -1000, -1000, -1000, -1000, 223, 221, 220,
	219, 209, 204, 200, 199, -1000, -1000, -1000, 196, -1000,
	-1000, 195, -1000, 192, 191, 188, 187, -1000, 186, 182,
	172, -1000, -1000, -1000, -1000, 171, 169, 165, 57733, 1802,
	69713, 60713, 1839, 52167, 69283, 51737, 68853, 68423, 164, -1000,
	67993, 163, 162, 161, -1000, -1000, 160, 1449, 42667, 157,
	154, 152, 1891, 147, 146, -1000, 145, -1000, 9981, 1283,
	-1000, 141, 140, -1000, 5214, 494, 59859, 2228, 139, 136,
	42236, 2203, 2273, -1000, -1000, 1574, -1000, -1000, 128, 127,
	110, 107, 106, 105, 104, 101, 98, -1000, 97, 93,
	91, 89, 88, 87, 86, -1000, 85, 83, 81, 79,
	77, 76, 75, 74, 73, 72, 67, -1000, 81513, 1514,
	1416, 1409, 1404, 1400, 1397, 888, 66, 65, 62, 61,
	60, 57, 53, -1000, -1000, 52, 51, 48, 47, -1000,
	42, 41, 197, 40, 39, 38, 34, 30, 2137, -1000,
	1309, 746, 21271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 73953, 70137, 28, -22,
	26, -1000, 2564, 907, 34914, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 478, -1000, -1000, -1000, 286,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1530, 716, -1000, -1000, -1000,
	67563, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1798,
	-23, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 715, -1000,
	1796, 183, 1655, -1000, -1000, -1000, -1000, -1000, 70137, -1000,
	-1000, 2862, 2861, 1672, 714, 67139, -1000, 1262, -1000, 844,
	24001, -1000, 1065, -1000, 24001, 285, -1000, -1000, -1000, -1000,
	-1000, 51307, 15779, 50877, 50447, 46597, 66709, 15339, 57309, 37512,
	1072, -1000, -1000, -1000, -1000, -1000, 2, 47459, 70137, -1000,
	283, -1000, -1000, -1000, -1000, -1000, -1000, 30475, 487, 30010,
	446, 29545, 442, -1000, -1000, -1000, -1000, 2860, 2859, 996,
	2858, 2495, 73529, 1436, 2857, 1363, 1070, 908, 2855, 2853,
	2850, 2848, 2847, 2845, 2842, 1141, 66279, 2274, 1394, 46157,
	45717, 57733, 57733, 2072, 65849, 1115, 1105, -1000, -1000, -1000,
	-1000, -1000, -1000, 2366, 2272, 2257, 39666, -1000, -1000, 2841,
	2840, 2839, 2836, 2832, 73105, 1393, 2829, 1964, 2828, 2826,
	2825, 2824, 2823, 2821, 2820, 2818, 2817, -1000, 56879, 56449,
	56019, 55589, 65419, 45277, 44837, -1000, -1000, -1000, 36630, 7232,
	7031, 64989, 37950, 57733, 57733, -1000, -1000, 30928, 132, -1000,
	-1000, -1000, 37512, 2226, -1000, 30928, 132, -1000, 70137, -1000,
	2263, 1521, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2047, 1356, 2700, 44397, 1587, 1207, 2572, 2365, 2359,
	1311, 1947, 2356, 2342, 2329, 2321, 2297, 1372, 1980, 315,
	20806, 1328, 1287, 2296, 2290, 2731, 1737, 50017, 2816, 2813,
	2543, 2288, 2286, 2222, -1000, -1000, -1000, -1000, 1277, -1000,
	-1000, 53015, -1000, -1000, 1080, -1000, -1000, 1080, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1071, 72257, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1309, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1632, -1000, 1613, -1000, -1000, 1983, 2535, 2535,
	2535, 2604, 455, 450, -1000, 197, -1000, -1000, 80995, -1000,
	-1000, 30928, 30928, 30928, 30928, 30928, 1568, -1000, 713, -1000,
	-1000, 751, -1000, 712, 649, -1000, -1000, -1000, -1000, -1000,
	-1000, 709, 2729, -1000, -1000, -1000, -1000, -1000, 2692, -1000,
	18028, -1000, -1000, -1000, 414, 708, 30928, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 919, -1000, 262, 854, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 635,
	1461, 634, 634, 634, -1000, -1000, 903, -1000, -1000, -1000,
	423, 633, 374, 625, -1000, -1000, -1000, -1000, 2260, 706,
	704, -1000, 695, 694, 693, 692, 691, -1000, -1000, -1000,
	688, 687, 684, 683, 682, 680, 679, 677, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 902, -1000, 676, 675,
	672, 671, 668, 667, 666, 665, 662, -1000, -1000, 1,
	70137, -1000, 478, 1, -1000, -1000, 660, -1000, 24454, 24454,
	24454, -1000, -1000, 1790, 30928, -1000, 1904, -1000, 8, 8,
	805, 35770, -1000, 34054, 805, 235, 759, 39236, -1000, 2221,
	-1000, -1000, 659, 255, -1000, -1000, 2219, 70137, 16217, 70137,
	57733, 57733, 57733, 2451, 30928, -1000, -1000, 43957, 70137, 58157,
	2647, 81312, 43957, 70137, 2255, -1000, -1000, -1000, 70137, -1000,
	30928, -1000, 2646, 1247, 47887, 2621, -8, -1000, -1000, -1000,
	-1000, -1000, -1000, 1941, 1961, 997, 1835, 1312, -1000, 24001,
	2488, -1000, -1000, -1000, 254, 16217, -1000, 2499, 2428, 937,
	-1000, 1826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1420, 2427, -1000, 1584, 2426, 1419, -1000, -1000, 879, 2425,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1706,
	-1000, -1000, 2520, -1000, -1000, 1425, 2421, 10, -1000, -1000,
	814, -1000, 47035, 37512, 47459, -1, -1000, -1000, -55, -1000,
	14899, 80995, -1000, -1000, -1000, 80995, 802, -1000, -1000, 2416,
	-1000, 80995, 801, -1000, -1000, 2414, -1000, -1000, -1000, 2810,
	-1000, 2809, 1906, 2806, 2804, 2801, -1000, 1370, 1427, 2800,
	-1000, 2799, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 55159,
	1772, -1000, -1000, 54299, 54729, 906, -1000, 879, 1903, -1000,
	-1000, 1902, -1000, 883, -1000, 2798, 64559, 2081, 879, 1900,
	-1000, -1000, -1000, -1000, -1000, 40522, -1000, 40522, -1000, 40522,
	-1000, 1234, -1000, 72681, 8, 8, 2692, -1000, -1000, -1000,
	-1000, -1000, 2413, 2796, 2795, 2794, -1000, 70137, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 178, 2411, -1000,
	-1000, 178, 2410, -1000, 178, 2407, -1000, 177, 2406, -1000,
	-1000, 1762, 2405, -1000, -106, 2400, -1000, -1000, -106, 2397,
	-1000, -26, -1000, -1000, -1000, 907, -1000, 36200, -1000, 36200,
	64129, 47035, 864, 627, 41806, 80995, -1000, -133, -1000, 37512,
	80995, -1000, 47035, 54299, -1000, 63699, 53875, -1000, -1000, 1134,
	1990, -1000, -1000, -1000, -1000, 47035, 47035, 47035, -1000, 63269,
	-1000, -1000, 1603, 1327, 2522, 1597, 57733, -1000, 1477, -1000,
	-1000, -1000, 2557, 2251, -1000, 43529, 59429, -1000, 59005, -1000,
	58581, -1000, 57733, -1000, 57733, -1000, 2792, 2788, 2787, -1000,
	2785, 2549, 80995, 2533, -1000, 2328, 1418, 1411, 70137, -1000,
	-1000, 70137, -1000, 70137, -1000, -1000, -1000, 1940, -1000, -1000,
	-1000, -1000, 57733, -1000, -1000, -1000, -1000, -1000, -1000, 2250,
	-1000, 1381, -1000, 1473, -1000, 1125, -1000, -1000, 179, -1000,
	-1000, -8, -1000, 72257, -1000, -1000, 1983, -1000, 70137, -1000,
	1932, 2239, 2247, 1215, 1813, 2031, -1000, 29080, 2022, 30928,
	1823, 197, -1000, -1000, 197, 197, 23548, -1000, -1000, 81312,
	81312, 16217, 1092, 30928, 30928, 30928, 30928, 30928, 30928, 30928,
	30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928,
	30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928,
	30928, 30928, 30928, 30928, 30928, 30928, 30928, 30928, 1714, 30928,
	1068, 30928, 30928, 30928, 30928, 1452, -1000, -1000, 1542, 501,
	1560, -1000, 2681, 2681, 2681, 8819, 8819, 577, 2784, 751,
	-1000, 30928, -1000, 132, 30928, 16657, -1000, -1000, -1000, 450,
	9299, 1838, -1000, 449, 17122, -1000, -1000, -1000, 18028, 649,
	28615, 30928, 897, 80995, 1261, 2693, 14461, 2283, 2124, -1000,
	2715, -1000, -1000, 2693, -1000, -1000, -1000, -1000, 2693, 1087,
	1079, 2693, -1000, 2693, 2693, 648, 710, 699, 20341, 19876,
	19411, 18946, 502, 30928, 30928, 30928, 30928, 30928, 30928, 30928,
	30928, -1000, 28162, 27697, 27232, 32287, 26767, 30928, 18481, 26302,
	25837, 70137, 1, 2644, 30928, 181, -1000, 79519, -1000, 181,
	181, 646, -27, 80995, 2023, 2023, 35342, 1925, 1576, 1576,
	1576, -1000, 805, 10941, 805, 62417, 1588, 805, 805, 245,
	273, 448, 33626, 1904, 62417, 727, 645, 24, 23, 21,
	-1000, -1000, 16, 13, -1000, -1000, 57733, 644, 16657, 16217,
	1189, -28, 244, 2015, 2014, 2013, -1000, 2010, 1285, -29,
	1066, -20, -1000, 5402, -34, -1000, 1133, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 900,
	643, 642, 211, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 635,
	1461, 634, 634, 634, -1000, -1000, -1000, 423, 633, 374,
	625, -1000, -1000, -1000, -1000, -1000, -1000, 2218, -55, 58157,
	822, -35, 1001, -8, -1000, -1000, -1000, 47887, 1080, -1000,
	1730, -1000, -1000, -1000, -1000, -1000, -1000, 1171, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 919, -1000, 2688, -1000, -1000,
	2714, 0, -1000, -1000, 16217, -1000, -10, 1357, -1000, 49587,
	1794, 2526, 2517, 1232, -1000, 1186, 2601, 53015, 2628, 2633,
	611, -1000, 2201, -1000, -1000, 841, 1347, 1064, 53015, 1584,
	-1000, 81312, -1000, 2065, 2595, 1214, 1206, 1214, 1214, 1190,
	-1000, 53015, 1063, -1000, 1500, -1000, 47035, -1000, 1062, -1000,
	-15, 2624, 2631, 498, -1000, 2197, 1059, -1000, -1000, 57733,
	16217, 2089, -1000, -36, 814, -1, 47459, 70137, 242, -1000,
	30928, 132, 30928, 132, -1000, -1000, 2392, -1000, -1000, -1000,
	2781, 1365, 1962, -1000, -1000, -1000, 624, 1899, 2191, 70137,
	2034, -5, 57733, -1000, 1584, 1897, -1000, -1000, 53445, -1000,
	-1000, 2391, 2388, 619, 2776, -1000, 1770, 1889, -1000, -1000,
	-1000, 71833, 1100, 2387, 945, 492, 2643, -1000, 492, 40950,
	-1000, 70137, -1000, -1000, 70137, -1000, -1000, -1000, 2774, -1000,
	57733, -1000, -1000, 57733, -1000, 57733, -1000, 57733, -1000, 57733,
	57733, -1000, 70137, 47035, 47035, 47035, 6747, 48739, -37, -42,
	443, -1000, 62845, 70137, 942, 49163, 70137, 2475, 864, 37512,
	-133, 864, 864, 814, -1000, 814, -1000, 57733, 2245, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2772, 2771, -1000, -1000,
	-1000, 877, 57733, 70137, 57733, -1000, -1000, 70137, -1000, 70137,
	-1000, 877, 70137, 877, 70137, 877, 70137, -1000, -1000, -1000,
	-1000, -1000, -1000, 132, 30928, 1250, -1000, 2242, -1000, 2241,
	-1000, 46, -1000, -1000, -1000, -1000, 1616, 57733, 57733, 57733,
	57733, 70137, 57733, -1000, 53015, -1000, 1932, 2239, -1000, -1000,
	-1000, -1000, -1000, -1000, 1169, 1681, -1000, 1989, -1000, 1205,
	-1000, -1000, -1000, 80995, 484, -1000, -1000, 80995, 1441, 1342,
	57733, 2024, -1000, 2024, -4, -1000, 79231, 1987, 57733, -1000,
	-1000, -1000, -1000, -1000, 840, 850, 850, 1084, 1084, 1084,
	1084, 2620, 336, 4016, 345, 5817, 5817, 7548, 7548, 7548,
	7548, 7548, 5817, 3995, 444, 444, 3995, 3995, 3995, 3995,
	3995, 444, 444, 444, 5817, 5817, 5817, 8819, 81076, 6793,
	30928, 30928, 1058, 1533, 501, 5889, 30928, 6153, 6153, 6153,
	6153, -1000, 1437, -1000, -1000, -1000, -1000, 2182, 610, 32287,
	32287, -1000, -1000, -1000, -1000, 17575, 30928, -1000, -1000, -1000,
	-1000, 25372, -1000, -1000, 78862, -241, 440, -198, -2, -1000,
	30928, 30928, 30928, 432, -1000, 240, 30928, 70137, -1000, 75489,
	725, -56, -1000, -44, 1219, -1000, 30928, -1000, -1000, 1057,
	-1000, 1053, 1047, 1045, -1000, 609, 431, -1000, 239, -1000,
	1571, 608, 605, 429, -45, 428, 836, 834, 427, 426,
	425, 30928, -1000, -1000, -1000, -1000, -1000, 78574, -1000, -1000,
	78528, -1000, -1000, 78240, -1000, -1000, 77952, -1000, -1000, -1000,
	80707, 75407, 75144, 74854, 5344, 74808, 10280, -57, 421, -1000,
	2180, -198, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	419, -1000, 418, -1000, 80626, -198, 415, 8094, -1000, 32287,
	32287, 32287, -1000, 409, -1000, 79600, -1000, 80257, 24919, 24919,
	24919, 399, 80338, 30928, -198, -59, -1000, -60, -1000, -1000,
	603, -65, 894, 24454, 34484, 16217, -1000, 894, 894, 30928,
	-1000, 30928, 2001, -1000, -1000, -1000, 2000, 2017, 2023, 35342,
	-1000, -1000, -1000, -1000, 62417, -1000, 2692, 2141, -1000, 62417,
	-1000, -1000, 70137, 478, -1000, 62417, 62417, 16217, 805, -1000,
	805, 62417, 636, -1000, -1000, -1000, -1000, -1000, 398, 38378,
	-2, 238, 864, -1000, 16217, 2093, 2093, 2093, 2093, -1000,
	-1000, 70137, 2661, -1000, 1484, -1000, 81312, -1000, 747, 958,
	589, -1000, 2693, 2693, -1000, 2693, 70137, 133, 24001, -1000,
	1080, -1000, -1000, 1318, -1000, 1440, -1000, 1077, -1000, -1000,
	-1000, 24001, -1000, 2054, 70137, 70137, 57733, -1000, -1000, 1882,
	71409, 1881, 81312, 70137, -1000, -1000, 584, 583, 1985, 1979,
	70137, 70137, 1978, 70985, 70561, 70137, 1565, 30928, 1805, 1358,
	132, 132, -1000, -1000, 132, 573, 1113, 57733, 57733, 57733,
	1395, -1000, -1000, -1000, -1000, -1000, 52591, -1000, -1000, 2710,
	-1000, 1214, -1000, -1000, -1000, 1214, 1584, 1382, 57733, 43105,
	879, 70137, 1531, 132, 132, -1000, -1000, 132, 571, 16217,
	1546, -1000, 864, 2175, -1000, 2089, -1000, -1000, 14023, 80995,
	-1000, 80995, -1000, 70137, -1000, 905, 70137, 49163, 869, 2385,
	40094, -55, 864, 47035, 57733, -5, -1000, 1584, 2361, 478,
	-1000, -1000, 47035, 47035, 2770, 563, 2769, -1000, 57733, 2360,
	1765, 1877, 2348, 776, 70137, 894, 35342, 1501, -1000, 38808,
	923, 70137, 1333, 92, -1000, -1000, -1000, 37, 70137, -1000,
	2768, -1000, -1000, 178, 178, 178, -1000, 177, 1762, -1000,
	-106, -106, -1000, -1000, 6747, 6747, 864, -6, 562, -1000,
	804, 800, 37074, 47035, -66, -1000, -1000, -1000, -1000, -1000,
	57733, 70137, 673, 2076, 70137, -68, -1000, 236, 561, -1000,
	-1000, 864, 2162, -1000, -1000, 887, -1000, 1118, -1000, -1000,
	-1000, -1000, -1000, -1000, 7, -55, -55, -1000, 877, -1000,
	877, -1000, 877, -1000, 80995, -1000, 1240, 1217, 70137, -1000,
	16217, 70137, 57733, 16217, 57733, 2235, 2232, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 967, -1000, 1441, -1000, 30928,
	-1000, -1000, -1000, -1000, 1929, -1000, -7, 23548, 1840, -1000,
	-1000, 57733, 6, 30928, 30928, 5258, 4532, 30928, 32287, 32287,
	-1000, 30928, 4347, -1000, -1000, -1000, -1000, -1000, 2155, 553,
	30928, 81312, 7519, 5315, -1000, 389, 9818, 3995, -1000, 30928,
	-1000, 388, 23095, -1000, 79888, -3, -71, -1000, 13585, -198,
	-76, -1000, -1000, 744, -1000, 2333, -1000, 30928, 79969, 1901,
	1759, 1369, 1266, 2693, 2721, 13147, -1000, 41378, 895, 1599,
	-1000, -1000, 2693, 831, -1000, -1000, -1000, 831, -1000, 77906,
	-1000, -1000, -1000, -1000, 81312, 81312, 30928, 30928, -1000, 30928,
	30928, 30928, -1000, -1000, 30928, -1000, -1000, 2147, 30928, -1000,
	81312, 81312, 32287, 32287, 32287, 32287, 32287, 32287, 32287, 32287,
	32287, 32287, 32287, 32287, 32287, 32287, 32287, 32287, 32287, 32287,
	32287, 1974, 32287, 2678, 2678, 2678, -1000, 2144, 2147, 30928,
	30928, 81312, 380, 376, 369, -1000, 30928, -198, -1000, -1000,
	6747, -1000, 2120, -1000, 30928, -1000, -208, -1000, 1904, -1000,
	-1000, 2120, 2120, -77, 80995, 35342, 35342, -1000, 552, 30928,
	1997, -1000, -1000, 723, -239, -1000, 796, -1000, -1000, -1000,
	-1000, -1000, 478, -1000, -1000, -1000, 231, 62417, 62417, 721,
	-1000, -78, -1000, -1000, -79, -1000, 2642, 367, 16217, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -55, 1653, 2720,
	-1000, 2706, 730, 720, 2693, 365, 364, 357, -55, 70137,
	-1000, -8, -1000, -1000, -1000, 30928, -1000, -1000, 2513, 1044,
	1043, -1000, 2354, -1000, 1874, -1000, 922, -1000, 1422, -1000,
	30928, 30928, 550, 549, 1466, 2767, 939, 2352, 1762, 2345,
	1762, -1000, -1000, 847, -1000, 80995, 541, 540, -1000, -10,
	1354, 884, -1000, -1000, 30928, 30928, 61993, -1000, 382, 2520,
	4, -1000, 1038, -1000, -1000, -1000, -1000, 1584, 1032, -1000,
	-1000, -1000, -1000, -1000, -1000, 880, -1000, -1000, 30928, -1000,
	-15, 1029, -1000, 47035, 864, -1000, 2766, 2765, 2761, 355,
	-85, -47, 81312, 2638, 1764, 556, 57733, 826, -1000, 2692,
	-1000, -1000, -1000, 57733, 2637, 879, -1000, -1000, 2758, -1000,
	932, 16217, 57733, 2343, 1953, 776, 48315, -1000, 879, 1599,
	-125, -1000, 1333, 22630, 2500, -87, -1000, -1000, -1000, 894,
	40950, 35342, 30928, 2757, -88, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 61569, 61569, 47035, 47035, 47035, 864,
	70137, 70137, 49163, 2756, 539, 70137, 70137, 538, -1000, 70137,
	70137, 2750, 47035, -1000, 132, -1000, 1620, 57733, 12709, -1000,
	-1000, -1000, -1000, -1000, 877, -1000, -1000, 1543, 1817, 1543,
	1307, 1302, -1000, 1664, 77618, -1000, -1000, -1000, 2030, 2519,
	16217, 2622, 6153, 30928, 30928, 4192, 4483, 1230, 6153, 30928,
	30928, 81312, 10481, -94, 30928, 30928, -1000, 30928, 719, 80995,
	2719, 30928, 353, 350, -1000, -1000, -1000, -1000, -1000, -1000,
	80995, 30928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 347,
	-1000, 225, -1000, -1000, -1000, 74377, -1000, 30928, 323, 321,
	-1000, -1000, -1000, 319, 313, 6225, 277, 77330, 77284, 76996,
	80995, 2144, 80995, -1000, -1000, 703, 703, 1184, 1184, 1184,
	1184, 2678, 837, 622, 661, 525, 525, 525, 606, 551,
	551, 525, 525, 525, 2143, 1972, 537, 7976, -1000, -1000,
	80995, 80995, 312, -1000, -1000, -1000, -198, 311, 2116, 2593,
	80995, -1000, 35342, 2116, 2116, -1000, -1000, 2017, 70137, 80995,
	35342, -1000, 2141, -1000, 11391, -1000, 16217, -1000, -1000, -1000,
	-1000, 2692, -1000, 38378, -1000, 536, -1000, 198, -1000, -1000,
	711, 2749, 663, 310, -1000, -1000, -1000, -55, 80995, 70137,
	70137, 70137, 2336, -1000, 3610, -1000, 76708, -96, -1000, 79231,
	30928, 70137, -1000, 1492, 2025, 990, -1000, 2561, 70137, -1000,
	70137, -1000, -1000, 70137, 70137, 57733, 2315, -104, 80995, -99,
	-1000, 793, -1000, 1197, -1000, 12271, 57733, 57733, 2304, -105,
	16217, -106, -1000, -1000, -1000, -1000, 2049, -1000, 60283, 1719,
	132, -1000, 61141, 2746, 533, -1000, 1617, -1000, 623, 1584,
	132, -1000, -1000, 531, 70137, 1757, 526, 16217, 1957, 776,
	48315, -1000, 1100, 2031, -1000, -116, -1000, 509, 132, 1599,
	-1000, -125, 80995, -1000, 791, -1000, -107, -1000, -1000, 304,
	-1000, 2473, 2472, -1000, -1000, 30928, 524, 512, 70137, 2470,
	-1000, -1000, -114, -1000, 1986, -1000, -1000, -1000, -1000, -1000,
	16217, 1339, -1000, 511, 508, -1000, -1000, -1000, -1000, -1000,
	2519, 6153, 6153, 30928, 30928, 30928, 6153, 10481, -115, -1000,
	6153, 6153, -198, -1000, -1000, 79888, -1000, -1000, 80995, -1000,
	11833, 1551, -1000, 76662, -1000, -1000, -1000, -1000, 30928, 30928,
	-1000, -1000, -1000, -1000, -1000, 32287, 2142, 507, 81312, -1000,
	-1000, 891, 30928, 30928, 1904, 891, 891, -1000, -120, -1000,
	-1000, -1000, 2692, 198, -1000, -1000, 2745, 16217, 527, -1000,
	2744, -1000, -1000, -1000, -1000, 70137, -1000, 70137, -1000, 16217,
	70137, 2146, 1858, -1000, -1000, 1976, 505, 32287, 57733, 762,
	2171, 1471, 30928, 1840, -123, -131, 1856, -1000, -1000, 1854,
	30928, -1000, 81312, 504, 1762, 1762, -136, -138, -1000, 30928,
	1024, 70137, 22177, -1000, 2740, 2520, -1000, -1000, 30928, 1010,
	-1000, 1531, 2103, -1000, -1000, -1000, -1000, 1973, -1000, -1000,
	70137, 1969, 865, -141, -1000, 781, 780, -1000, 49163, 869,
	857, -1000, -1000, -1000, 30928, -1000, 57733, 30928, 1723, -1000,
	776, 48315, -1000, 2348, 1333, -1000, 2440, 70137, 2503, -1000,
	2031, 501, -1000, 864, 500, 499, -143, 30928, 30928, -144,
	496, 864, -184, -1000, 737, 736, -1000, -1000, 57733, 57733,
	30928, 30928, -1000, 6153, 6153, 6153, -1000, 295, -1000, -1000,
	1599, 2586, -1000, 76374, 76086, 1516, 32287, 81312, -146, -1000,
	70137, 80995, -198, -1000, -1000, -1000, 607, -1000, 2738, -1000,
	-1000, 2540, -1000, -1000, -1000, 70137, 1866, -1000, -1000, 30928,
	7976, 495, 30928, -1000, -1000, 2042, 2176, 2049, 493, -1000,
	-1000, -1000, -1000, -1000, 1451, -1000, -1000, 80995, 2569, 30928,
	-1000, -1000, 491, 489, 80995, 486, 773, 2140, -1000, -1000,
	-1000, 80995, 485, 869, -1000, 1561, 1719, 483, -1000, -1000,
	-1000, 2061, -1000, 61141, 32740, 32740, 291, 2635, 857, -1000,
	2685, -1000, -151, 932, -153, 57733, 48315, -1000, 1953, -1000,
	1123, -159, 70137, 1333, -1000, -1000, 47035, 47035, 1471, -160,
	-165, -1000, 47035, -1000, 1986, -1000, 70137, -1000, 70137, -1000,
	-1000, -166, -167, -1000, 1550, 30928, -1000, -1000, 1516, -168,
	-1000, -185, -1000, 2632, -1000, -1000, -1000, -1000, 2334, 76040,
	1926, 70137, 75752, 2161, -1000, -1000, 1531, 70137, 57733, 929,
	16217, -179, 1543, 1543, 30928, 21724, 1557, 30928, -1000, 57733,
	70137, -1000, 2469, -1000, -1000, -1000, 2049, 132, -1000, -1000,
	1471, 482, 1471, 481, -1000, 1957, 1212, -1000, 894, -1000,
	-1000, -186, -187, 2049, 1471, -1000, -188, -1000, -189, -195,
	-1000, -1000, 288, 31834, 31834, 31834, -198, -1000, 70137, 479,
	2298, -1000, 1689, 1512, 278, 957, -1000, -1000, 2171, -202,
	478, -1000, 30928, -1000, 2049, -203, -1000, 921, -205, -1000,
	918, -210, -1000, 2135, -1000, -211, 472, -212, -1000, -1000,
	-1000, 1531, 865, 2049, 30928, 2049, 30928, -1000, 40950, -1000,
	864, 864, 1531, 2049, 864, -1000, -1000, -1000, 2357, -1000,
	33178, 1630, 1298, 79150, 2357, 2357, -1000, -1000, 70137, -1000,
	1700, 1691, 1289, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1926, 80995, -1000, -1000, 1543, 2101, -1000, 1543, 2132,
	-1000, 1556, -1000, 70137, -1000, 70137, 869, -1000, 1531, -213,
	1531, -218, -194, -1000, -1000, -1000, 1531, -1000, -1000, 1446,
	2654, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2456, -1000, 963, 1522, 1522, 1689, -1000, 470, -1000, 468,
	-1000, -220, -1000, -1000, 885, 1471, 885, 1471, -1000, -1000,
	1293, -1000, -1000, 1615, 31381, -1000, 2665, -1000, -1000, 1998,
	-1000, 2171, 30928, 30928, 1707, -1000, 2733, 2049, -1000, 2049,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -221, -227, -1000,
	-1000, -1000, -1000, 1531, 1531, 1531, 1009, 885, 885, -1000,
	467, -1000, -1000, 30928, -228, 1531, -1000,
}
var sqlPgo = [...]int{

	0, 3360, 3356, 3355, 3353, 3351, 3349, 3344, 3343, 3341,
	3338, 3335, 3333, 3331, 3330, 3328, 3327, 3326, 3324, 3323,
	3322, 3321, 3320, 3309, 3308, 3305, 3302, 3301, 3297, 3296,
	3295, 3294, 3293, 3292, 3289, 3287, 3286, 3285, 3281, 3280,
	3279, 3278, 3277, 3276, 3275, 3274, 3273, 3268, 37, 3267,
	3266, 3265, 3264, 3263, 3261, 3260, 3258, 3256, 3255, 3253,
	3251, 3250, 3247, 3234, 3233, 3232, 33, 3230, 223, 3227,
	3225, 3224, 3223, 3222, 3221, 3220, 3219, 3218, 3217, 221,
	3216, 146, 3212, 3211, 3210, 3208, 3207, 220, 3205, 3204,
	3203, 3202, 3201, 3200, 3199, 3198, 151, 197, 3197, 385,
	3196, 3192, 3190, 3183, 3182, 3180, 3179, 3177, 3174, 3173,
	195, 3170, 216, 3169, 3168, 3167, 3165, 3163, 3160, 3159,
	3156, 3155, 3153, 3151, 3150, 3148, 3147, 3146, 3145, 3144,
	3143, 3141, 3140, 3139, 3138, 3137, 3136, 3135, 3134, 3132,
	219, 149, 3127, 3122, 215, 214, 3116, 131, 99, 94,
	70, 3113, 98, 40, 3112, 11, 180, 198, 6077, 187,
	3111, 3108, 3106, 196, 150, 3102, 189, 3100, 3097, 3094,
	3093, 73, 65, 135, 138, 128, 126, 174, 3092, 3085,
	72, 55, 28, 27, 101, 132, 3084, 3083, 3082, 1959,
	95, 3081, 3079, 212, 190, 3078, 1288, 3077, 161, 71,
	92, 107, 86, 3070, 115, 23, 3068, 162, 52, 3067,
	124, 68, 31, 5944, 7472, 3066, 105, 229, 79, 200,
	169, 159, 168, 167, 134, 396, 3065, 202, 3064, 109,
	155, 3063, 3060, 3059, 58, 153, 82, 3058, 4, 3,
	143, 12, 93, 13, 3057, 14, 3055, 3054, 3053, 3048,
	26, 127, 3047, 114, 56, 3044, 69, 3043, 110, 179,
	3042, 176, 91, 3041, 3040, 210, 163, 145, 3038, 17,
	182, 3037, 3036, 3034, 3033, 3032, 103, 21, 97, 3031,
	3030, 108, 193, 148, 3029, 49, 3028, 129, 78, 102,
	226, 96, 185, 80, 175, 142, 183, 3026, 3023, 3022,
	165, 3021, 3020, 164, 130, 3018, 3017, 227, 34, 54,
	184, 60, 3016, 125, 3015, 152, 3014, 3013, 3012, 224,
	139, 158, 6, 74, 89, 25, 8, 186, 120, 208,
	87, 3011, 3639, 1476, 1361, 35, 113, 84, 57, 90,
	117, 205, 53, 3010, 3009, 2249, 3007, 3006, 3005, 3004,
	141, 3001, 3000, 2996, 111, 106, 172, 2995, 122, 64,
	10, 88, 201, 213, 85, 171, 188, 204, 2994, 140,
	2985, 36, 121, 2984, 154, 199, 133, 2981, 123, 112,
	2980, 170, 2979, 2974, 2966, 2963, 2961, 2959, 2955, 43,
	2954, 116, 2953, 2952, 147, 173, 136, 75, 30, 2949,
	62, 545, 2944, 157, 50, 2942, 2449, 32, 0, 7327,
	5364, 6736, 2941, 1504, 2938, 156, 104, 2937, 2934, 2932,
	76, 2931, 63, 2930, 2928, 38, 2926, 15, 7, 9,
	18, 16, 865, 569, 2925, 2923, 83, 100, 118, 2920,
	217, 181, 2919, 2918, 2917, 67, 2916, 24, 2914, 22,
	2913, 2912, 29, 5, 19, 2910, 2909, 191, 2908, 192,
	2907, 2906, 2661, 2904, 211, 66, 2902, 209, 2901, 137,
	160, 2900, 2899, 2894, 2893, 206, 2891, 2886, 20, 1,
	2885, 2884, 2882, 166, 2, 2494, 2879, 2878, 61, 2874,
	2870, 144,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 464,
	464, 19, 31, 20, 32, 13, 465, 465, 465, 465,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 174, 174, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	463, 463, 176, 176, 175, 170, 170, 466, 466, 177,
	177, 177, 179, 179, 37, 37, 37, 95, 95, 95,
	96, 96, 97, 97, 152, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 83, 83, 406, 406, 407, 407,
	147, 147, 148, 148, 148, 148, 149, 149, 150, 150,
	150, 51, 39, 39, 39, 39, 39, 39, 39, 40,
	40, 40, 40, 41, 41, 41, 41, 41, 41, 42,
	42, 42, 42, 42, 42, 49, 49, 49, 49, 141,
	141, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 473, 473, 474, 474, 475, 475, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 63, 63, 252, 252, 228, 228, 64, 64,
	64, 65, 65, 66, 66, 53, 53, 459, 459, 266,
	266, 373, 373, 68, 68, 286, 286, 69, 69, 69,
	69, 69, 69, 70, 70, 70, 70, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	77, 77, 77, 78, 78, 78, 75, 75, 75, 73,
	73, 73, 72, 72, 72, 76, 76, 76, 74, 74,
	74, 267, 267, 79, 79, 79, 79, 79, 79, 79,
	79, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 375, 375, 80, 80,
	80, 343, 343, 84, 84, 84, 301, 301, 85, 85,
	85, 85, 85, 86, 86, 86, 86, 98, 98, 98,
	98, 462, 462, 259, 259, 193, 193, 193, 193, 91,
	91, 91, 91, 92, 92, 92, 93, 93, 146, 146,
	104, 104, 104, 104, 104, 103, 103, 103, 103, 103,
	103, 43, 43, 43, 44, 44, 45, 45, 46, 46,
	47, 47, 48, 48, 48, 48, 48, 106, 106, 469,
	469, 108, 105, 105, 105, 107, 107, 107, 107, 109,
	110, 110, 110, 110, 110, 110, 110, 110, 111, 111,
	400, 400, 275, 275, 398, 398, 414, 414, 399, 399,
	232, 232, 232, 232, 232, 233, 233, 233, 405, 405,
	405, 405, 405, 405, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 131, 131, 131, 140,
	140, 140, 140, 140, 140, 140, 133, 133, 133, 121,
	121, 113, 113, 113, 113, 113, 117, 117, 117, 117,
	117, 117, 117, 117, 114, 114, 123, 123, 123, 123,
	123, 118, 118, 120, 120, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 115, 115, 115, 115, 125, 125,
	125, 125, 307, 307, 307, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 136, 136, 136, 136, 136,
	136, 357, 357, 132, 132, 132, 132, 135, 135, 135,
	135, 291, 291, 129, 129, 129, 130, 130, 130, 134,
	134, 137, 137, 137, 137, 116, 116, 116, 477, 477,
	477, 138, 138, 128, 128, 139, 139, 139, 139, 139,
	139, 139, 139, 127, 127, 127, 126, 126, 126, 126,
	119, 460, 460, 457, 457, 457, 457, 457, 457, 457,
	458, 458, 461, 461, 89, 89, 89, 58, 58, 155,
	155, 155, 155, 153, 153, 154, 154, 59, 59, 478,
	478, 478, 467, 467, 467, 468, 468, 468, 468, 468,
	468, 234, 234, 235, 235, 324, 324, 324, 324, 324,
	238, 238, 178, 178, 178, 241, 242, 242, 239, 239,
	240, 240, 240, 244, 244, 243, 246, 246, 245, 323,
	421, 421, 423, 423, 423, 423, 423, 423, 423, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 419,
	419, 419, 420, 415, 415, 416, 416, 416, 416, 236,
	236, 237, 237, 237, 237, 417, 418, 257, 257, 360,
	422, 422, 424, 424, 426, 479, 479, 479, 479, 479,
	479, 480, 480, 322, 322, 250, 250, 427, 427, 427,
	427, 428, 428, 428, 428, 428, 431, 430, 429, 429,
	429, 429, 429, 353, 353, 353, 62, 62, 62, 288,
	288, 287, 287, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 143, 143,
	60, 60, 60, 184, 184, 185, 185, 57, 57, 57,
	482, 482, 61, 61, 61, 483, 483, 67, 67, 67,
	67, 67, 67, 56, 56, 56, 56, 56, 484, 484,
	308, 308, 306, 306, 256, 256, 359, 197, 197, 171,
	171, 171, 23, 25, 25, 17, 17, 34, 34, 35,
	35, 30, 30, 470, 470, 471, 471, 90, 90, 94,
	94, 94, 102, 102, 142, 142, 142, 142, 142, 142,
	142, 38, 38, 38, 38, 50, 50, 50, 50, 100,
	486, 486, 486, 101, 101, 485, 485, 192, 192, 192,
	192, 194, 194, 319, 319, 320, 320, 487, 487, 321,
	321, 321, 321, 187, 186, 188, 188, 55, 55, 55,
	180, 180, 181, 181, 182, 182, 183, 183, 488, 488,
	87, 87, 87, 145, 145, 227, 227, 227, 315, 315,
	315, 251, 251, 202, 202, 318, 318, 316, 316, 316,
	316, 285, 285, 285, 144, 144, 264, 264, 277, 277,
	278, 278, 370, 370, 279, 99, 99, 158, 158, 156,
	156, 156, 156, 156, 156, 156, 156, 163, 163, 164,
	164, 165, 165, 166, 167, 167, 167, 167, 268, 268,
	168, 168, 168, 157, 157, 157, 159, 159, 159, 159,
	159, 159, 159, 162, 162, 162, 162, 169, 169, 169,
	161, 161, 438, 438, 438, 440, 440, 441, 437, 437,
	439, 439, 481, 481, 290, 290, 290, 248, 249, 247,
	247, 254, 254, 253, 255, 255, 358, 358, 358, 172,
	172, 172, 282, 282, 282, 282, 283, 283, 311, 311,
	309, 309, 309, 310, 310, 312, 312, 312, 313, 313,
	314, 314, 281, 281, 339, 339, 160, 160, 160, 261,
	261, 261, 262, 262, 330, 330, 330, 330, 330, 330,
	331, 331, 329, 329, 329, 329, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 362, 363, 363, 263, 263,
	364, 317, 317, 455, 455, 455, 456, 456, 356, 356,
	365, 365, 365, 365, 365, 365, 354, 354, 355, 355,
	371, 372, 372, 294, 294, 294, 294, 292, 292, 295,
	295, 295, 295, 293, 293, 366, 366, 366, 366, 284,
	284, 367, 367, 367, 367, 368, 325, 326, 326, 376,
	376, 376, 376, 391, 260, 260, 260, 260, 260, 489,
	489, 377, 377, 377, 377, 377, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 381, 381,
	381, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 390,
	390, 390, 390, 390, 382, 382, 387, 387, 388, 388,
	388, 383, 384, 389, 389, 389, 389, 490, 490, 393,
	393, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	379, 379, 379, 386, 386, 386, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 302,
	302, 304, 304, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 334, 334,
	334, 334, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 432, 432, 432, 432,
	432, 432, 432, 432, 435, 435, 436, 436, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 442, 442, 443,
	443, 445, 445, 446, 446, 447, 448, 448, 448, 449,
	450, 450, 444, 444, 451, 451, 451, 451, 452, 452,
	453, 453, 453, 453, 453, 454, 454, 454, 454, 454,
	345, 345, 346, 346, 352, 352, 352, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 195, 195, 195, 195, 195, 273, 273,
	271, 271, 271, 274, 274, 272, 272, 270, 270, 269,
	269, 342, 342, 340, 340, 344, 344, 296, 296, 392,
	392, 392, 392, 392, 392, 392, 392, 297, 297, 297,
	305, 298, 298, 299, 299, 299, 299, 299, 336, 337,
	300, 300, 300, 338, 338, 347, 351, 351, 350, 349,
	349, 348, 348, 327, 327, 328, 328, 280, 280, 491,
	491, 276, 276, 369, 369, 369, 369, 230, 230, 265,
	265, 229, 229, 222, 222, 223, 223, 223, 223, 258,
	258, 394, 394, 394, 395, 396, 397, 341, 341, 212,
	211, 199, 200, 210, 209, 208, 198, 201, 205, 206,
	207, 203, 204, 218, 217, 216, 214, 215, 374, 224,
	224, 225, 225, 225, 226, 226, 226, 226, 196, 196,
	219, 219, 220, 221, 221, 213, 213, 213, 189, 189,
	189, 190, 190, 191, 191, 404, 404, 402, 402, 402,
	403, 403, 403, 403, 401, 401, 401, 401, 401, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 410, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 413, 413,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 9, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 6, 7, 2, 5, 6, 2,
	1, 3, 1, 3, 1, 6, 4, 9, 7, 12,
	12, 12, 9, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 6, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	3, 3, 4, 3, 4, 7, 4, 4, 4, 3,
	5, 7, 4, 3, 3, 4, 3, 3, 3, 3,
	3, 2, 0, 1, 0, 1, 0, 3, 3, 3,
	3, 3, 6, 4, 4, 4, 3, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 3, 6, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 2, 1, 2, 1, 3, 5, 7,
	2, 3, 0, 3, 5, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 3, 3, 1, 2, 1, 2, 1,
	2, 1, 1, 3, 5, 4, 6, 4, 3, 0,
	1, 3, 2, 4, 2, 4, 1, 6, 3, 1,
	1, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	1, 3, 2, 3, 3, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 4, 4, 4, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 5, 3, 5, 5, 5, 7,
	3, 3, 3, 4, 3, 5, 3, 6, 5, 6,
	3, 5, 6, 3, 4, 3, 4, 3, 3, 4,
	4, 5, 0, 1, 1, 3, 2, 4, 3, 3,
	5, 4, 3, 5, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 3, 4, 4, 5, 7, 5, 3,
	3, 2, 0, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 3, 4, 3, 1, 1,
	1, 2, 3, 2, 3, 6, 6, 7, 9, 7,
	9, 3, 4, 10, 10, 3, 5, 5, 5, 3,
	5, 2, 0, 1, 1, 1, 1, 3, 2, 2,
	2, 1, 2, 0, 3, 3, 2, 10, 13, 0,
	2, 4, 3, 3, 3, 1, 3, 9, 12, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 3,
	0, 2, 4, 3, 3, 1, 5, 1, 3, 1,
	2, 0, 1, 2, 2, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 1, 0, 3, 3, 3, 6, 3,
	1, 1, 8, 7, 5, 0, 1, 6, 7, 6,
	5, 3, 4, 14, 17, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 3, 2, 0, 1,
	1, 0, 6, 4, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 3, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 1, 3, 1,
	0, 1, 2, 3, 2, 4, 2, 3, 0, 2,
	0, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 3, 1, 3, 3, 4, 5, 2,
	2, 0, 2, 2, 1, 1, 1, 0, 1, 0,
	2, 2, 5, 2, 3, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 4, 4, 3, 4,
	1, 5, 3, 4, 5, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 4, 1, 2,
	1, 4, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 2, 5, 1, 4, 2, 5, 1, 4,
	3, 3, 0, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 5, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 467, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 324, 334, 318, -107, -108,
	353, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -472, 86, -439,
	-71, -74, -76, -476, 116, 131, 175, 286, -92, -93,
	320, 322, 132, -45, -44, 126, -156, -158, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 357, 404,
	42, 367, 71, 119, 328, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -438, -72, -73, -75, -77, -78, 319, -159,
	-157, 464, 417, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 435, 443, -162, -160,
	-161, -169, 341, 425, 381, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, -214, -219, -220, -221, -213,
	-189, -410, -413, 4, -408, -411, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 387, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 304, 306, 307, 309, 310, 311, 312, 313,
	318, 315, 316, 317, 319, 320, 321, 322, 324, 326,
	327, 328, 329, 331, 333, 354, 355, 369, 334, 335,
	336, 337, 338, 339, 340, 344, 348, 345, 346, 347,
	342, 343, 349, 350, 351, 353, 356, 357, 359, 360,
	362, 363, 365, 366, 367, 368, 370, 373, 374, 375,
	371, 372, 380, 378, 379, 382, 383, 384, 385, 386,
	388, 390, 398, 399, 401, 404, 405, 406, 396, 408,
	409, 412, 413, 414, 415, 416, 421, 417, 419, 422,
	423, 424, 430, 429, 436, 437, 439, 440, 441, 33,
	43, 44, 46, 49, 60, 61, 62, 65, 103, 104,
	124, 134, 135, 146, 160, 162, 169, 170, 171, 189,
	195, 197, 201, 221, 256, 258, 274, 278, 291, 293,
	305, 330, 361, 376, 391, 392, 393, 394, 400, 402,
	425, 426, 427, 431, 438, 265, -207, 2, -189, -189,
	294, 26, 2, 26, 290, 343, 383, 385, 2, -462,
	-259, 2, 26, -193, -189, 86, 158, 341, -207, 2,
	-462, -259, 24, 2, -189, 2, -194, 2, 334, -189,
	467, 81, 228, 64, 330, 350, -110, 399, -109, 391,
	336, -111, -400, 2, 244, -189, 467, 467, 467, 467,
	2, 381, 283, 429, 342, 418, 99, 302, 182, 395,
	-457, 2, 4, -411, -408, -223, -222, 381, 99, -221,
	-213, 457, -220, 467, 467, 467, 2, 204, 205, 301,
	300, 350, 351, 467, 467, 467, 2, 25, 58, 80,
	83, 105, 133, 153, 156, 270, -473, 236, 280, 299,
	336, 349, 380, 388, 401, -468, 368, 59, -467, 418,
	-482, 406, 114, -306, 99, 228, 157, 413, 385, 383,
	326, 161, 411, 109, 188, 416, 415, 467, 467, 25,
	58, 67, 83, 114, 133, 153, 156, -475, 280, 299,
	333, 336, 349, 380, 388, 406, 401, 2, 429, 342,
	381, 182, 99, 418, 326, 297, -81, 2, 464, 29,
	28, 353, -152, 381, 198, 2, -189, 204, 205, 2,
	467, 467, 154, -457, 2, 204, 205, 2, 198, 2,
	59, 338, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 2,
	-140, 350, 368, 167, 41, 64, 26, 298, 69, 284,
	100, 159, 182, 183, 212, 80, 81, -307, 40, 205,
	204, -357, 382, 337, 343, 378, 399, 86, 419, 327,
	441, 302, 303, 127, 4, 99, 244, 352, 391, 228,
	73, -481, 2, 381, -485, 2, 399, 399, 2, -485,
	2, -485, 2, -192, 2, 399, 395, -486, 399, 438,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, -157, -159, -158, 467, 467, 467, 467,
	467, -140, 350, 2, 64, 26, -253, -254, 410, 196,
	122, 271, -156, -158, 2, -438, -398, 2, -332, -414,
	-334, 455, 456, 448, 251, 442, -345, 105, 411, 265,
	-413, -335, -347, 124, 330, -274, 8, 9, 5, 6,
	7, -196, -378, -341, 403, 136, 255, -226, 468, 10,
	464, -435, -158, -346, 34, 162, 57, -402, -225, -380,
	-388, -384, -385, -489, 47, 53, 52, 388, 243, 344,
	345, 362, 346, 347, 45, 421, 179, 262, 264, 190,
	4, 197, -224, -213, -432, -433, -408, -409, 189, 195,
	191, 361, 192, 193, 194, 44, 305, 147, 148, 146,
	115, 104, 103, 258, 49, 48, 46, 426, -389, 101,
	391, 392, 393, 394, 207, 208, -189, -410, 67, 91,
	92, 90, 95, 94, 230, 229, 96, 93, 352, 418,
	58, 33, 169, 170, 201, 256, 171, 65, -434, 372,
	87, 155, 187, 173, 200, 202, 206, 222, 225, 245,
	249, 253, 275, 277, 325, 358, -490, 427, 134, 135,
	278, 291, 376, 400, 402, 160, 221, 60, 61, -440,
	306, -441, -207, -440, 467, 467, 469, 467, -247, -248,
	-249, 2, 26, 112, 464, 2, -361, 2, -362, -366,
	-158, 216, -365, 464, -363, 462, -214, 266, -436, 331,
	-432, -433, -196, -213, -225, 4, -250, 464, 466, 99,
	381, 68, 182, -301, 464, -189, 26, 265, 395, 469,
	-343, 464, 265, 154, 268, -189, 2, 2, 354, 2,
	464, -110, 62, 399, 39, 350, -320, 2, -321, -186,
	-187, -188, -371, 203, 296, 304, 444, 441, -398, -469,
	154, 447, 395, -398, -275, 466, 2, -366, 169, -214,
	2, -211, -401, 4, -408, -411, -409, -412, 67, -410,
	26, 28, 29, 30, 32, 34, 35, 36, 37, 50,
	57, 58, 63, 66, 68, 80, 86, 90, 91, 93,
	92, 94, 95, 96, 105, 107, 110, 112, 113, 117,
	119, 122, 136, 138, 151, 153, 154, 158, 161, 164,
	176, 186, 196, 198, 216, 219, 226, 229, 230, 251,
	255, 261, 265, 266, 270, 271, 288, 295, 308, 323,
	341, 352, 364, 377, 381, 389, 395, 397, 403, 410,
	411, 418, 420, 428, 432, 433, 434, 435, -413, 2,
	-366, 169, 2, -216, 169, -366, -219, 2, -406, 169,
	-404, 10, -403, 5, 4, -408, -411, -409, 2, -198,
	-189, 2, -210, -401, 2, -229, 169, -214, -215, -219,
	-96, -406, 464, 395, 469, -265, -222, -223, -258, -189,
	466, -332, 2, -99, 2, -332, 169, 2, -99, 169,
	2, -332, 169, 2, -99, 169, 2, 2, 2, 401,
	2, 83, 169, -189, 381, 98, 2, 317, -474, 333,
	405, 429, 2, 2, 2, 2, 2, 2, 2, 381,
	-203, 2, -189, 151, 342, -483, 306, -406, 169, 2,
	-406, 169, 2, -217, -219, -217, 182, 199, -198, 169,
	2, 385, 383, 385, 383, 154, 2, 198, 2, 198,
	2, -367, 2, -368, -362, -214, 462, 2, 2, 2,
	2, 2, 169, -189, 381, 98, 2, 214, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -267, 169, 2,
	-214, -267, 169, 2, -267, 169, 2, -230, 169, 2,
	-229, -198, 169, 2, -407, 169, 2, -406, -407, 169,
	2, -375, 2, -374, -403, 425, -81, 464, -81, 464,
	350, 464, -406, -214, -214, -332, -99, -97, -96, 154,
	-332, -99, -152, 151, 2, 99, 381, -140, 2, 151,
	420, 2, 8, 2, -406, 337, 303, 143, 2, 354,
	2, 355, 64, -307, 441, 64, 154, 2, 154, 2,
	-291, 2, 435, -460, 2, 265, 154, 2, 154, 2,
	154, 2, 154, 2, 154, 2, 300, 351, 205, 2,
	-99, 432, -332, 432, 2, 398, 213, 128, 154, -291,
	2, 154, 2, 154, 2, 5, 2, 203, 296, 369,
	2, -214, -477, 2, 381, 429, 342, 2, 2, 76,
	77, 154, 2, 154, 2, 154, 441, 2, -284, -366,
	-319, -320, -319, 395, -194, -253, -254, -140, 354, 2,
	-163, -282, -165, 151, -309, -310, -166, 226, 138, 261,
	-167, -290, 26, 112, -290, -290, 51, 465, 465, 11,
	12, 66, 38, 455, 456, 457, 458, 149, 459, 460,
	453, 454, 452, 445, 446, 450, 209, 210, 82, 449,
	447, 75, 234, 332, 139, 140, 141, 142, 314, 180,
	31, 181, 14, 15, 16, 30, 270, 225, 442, 173,
	358, 448, 17, 18, 19, 200, 202, 253, 43, 176,
	-195, -231, -332, -332, -332, -332, -332, 277, 464, -280,
	-327, 462, -158, 464, 464, 464, 5, -397, 8, -158,
	-332, -345, 465, -272, 464, -158, -345, -340, 464, 330,
	462, 464, -348, -332, 5, 464, 466, -442, 436, -382,
	464, 293, -381, 464, -381, -381, 430, -379, 464, 443,
	437, 464, -379, 464, 464, 151, 464, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 430, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 469, -440, -250, 464, -276, -369, -332, 457, -276,
	-276, 265, -269, -332, 87, -294, 206, 245, 155, 222,
	325, 187, -329, 468, -329, -356, 443, -158, -363, -213,
	-158, -365, 464, -361, -356, -82, -397, -68, -79, -87,
	-99, -112, -144, -145, 457, -214, 464, 154, 464, 466,
	154, -258, -401, -198, -214, -224, -225, -229, 111, -269,
	-457, -258, -193, 35, -342, -376, -377, -378, -387, -383,
	-386, -390, 47, 53, 52, 388, 243, 344, 345, 362,
	346, 347, 45, 421, 179, 262, 264, 190, 4, 46,
	426, -389, 197, 310, 311, 309, 313, 312, 189, 195,
	191, 361, 192, 193, 194, 44, 305, 147, 148, 146,
	115, 104, 103, 258, 49, 48, 101, 391, 392, 393,
	394, 207, 208, 427, 372, 60, 61, -457, -258, 151,
	-400, -269, 35, -320, 2, 105, -404, 39, -487, 469,
	224, -233, 233, 250, 166, 266, 439, 259, -405, 5,
	4, -341, -353, 105, 228, 197, 9, 456, -394, 8,
	455, -399, -398, 89, 466, -401, -174, 315, -173, 23,
	27, 116, 423, 129, -240, 184, 283, 124, 365, 414,
	-464, -465, 335, 386, 387, 78, 259, 315, 124, -287,
	-289, 35, 97, 247, 279, 54, 177, 238, 239, 367,
	431, 124, 315, -185, -437, 435, 124, -465, 315, -465,
	-176, 365, 414, -464, -465, 335, 315, -175, -240, 124,
	468, -372, -371, -407, -96, -265, 469, 469, -401, 457,
	124, 124, 124, 124, 2, 2, 251, 2, 2, 2,
	156, -467, -475, 2, 2, 2, -214, 169, -252, 265,
	-459, -266, 381, -214, -216, 169, 2, -219, 429, -184,
	-185, 251, 251, 35, 464, 2, -200, 169, 2, -190,
	-189, 182, -437, 251, -367, -227, -214, -362, -227, 353,
	-207, 35, -329, -329, 124, 2, 2, 2, -189, -177,
	469, 56, 321, 124, -177, 124, -177, 124, -177, 469,
	124, -177, 124, 469, 124, 124, 465, 469, -375, -375,
	-406, -150, 435, 154, 86, 464, 464, -152, -372, 469,
	-97, -406, -459, -198, 2, -214, 2, 381, 207, -406,
	-406, -406, -400, 26, 355, 2, 300, 351, 77, 355,
	2, -214, 381, 99, 182, 70, -461, 151, -458, 326,
	-457, -214, 99, -214, 99, -214, 99, -214, -214, 2,
	2, 2, 2, 74, 74, 151, 2, 398, 2, 398,
	2, -189, -189, -189, 224, -214, 151, 381, 182, 381,
	182, 99, 381, -177, 469, -194, -163, -282, -400, -283,
	-282, -164, -163, -166, 151, 304, 415, 247, 356, 211,
	-310, -309, 26, -332, -314, 145, 246, -332, -334, -268,
	259, -157, -157, -157, -255, -358, -332, 295, 182, -391,
	-376, -376, -212, -401, 391, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	225, 173, 358, 43, 176, -332, 395, -332, -332, -332,
	-332, 242, 251, 255, 403, 136, 412, 112, 259, -491,
	377, 37, -338, -158, -273, 464, -352, 32, 364, 26,
	-345, 464, 2, -327, -332, -328, -270, -269, -269, 465,
	428, 26, 112, 457, 2, 465, 469, 35, 465, -332,
	-270, -344, -340, -269, -351, -350, 432, -302, -303, 440,
	241, 102, 168, 240, -304, 340, -395, 8, -401, 457,
	-443, 144, 161, 8, -395, -395, 391, 391, -395, -395,
	-395, 464, 465, 2, 465, 2, 465, -332, 2, 465,
	-332, 2, 465, -332, 2, 465, -332, 2, 465, 2,
	-332, -332, -332, -332, -332, -332, -332, -269, -296, 2,
	-392, -269, 4, 440, 241, 102, 168, 240, 340, 5,
	-296, 2, -297, 2, -332, -269, -298, -333, -334, 455,
	456, 448, -345, -299, 2, -332, -270, -332, 50, 219,
	397, -300, -332, 154, -269, -269, 2, -269, 2, -441,
	35, -269, -261, 469, 154, 35, 4, -261, -261, 464,
	465, 469, -295, 165, 237, 232, -295, -361, -294, 206,
	-292, 275, -292, -292, -356, -199, 462, 470, -401, -356,
	-355, -354, 35, -207, 272, -356, -356, 466, 465, -355,
	463, -455, 464, 467, 467, 467, 467, 467, -214, 464,
	-269, -401, 370, 465, 466, 200, 200, 200, 200, 331,
	465, 395, 435, -81, 267, 465, 469, -260, 34, 462,
	-393, 430, 464, 464, -303, 464, 154, -259, -469, 465,
	399, -321, -232, 304, 363, 316, 348, 379, 9, 8,
	8, 469, -401, 469, -470, 80, 395, 68, -323, 169,
	68, -415, -201, 80, -416, -189, 63, 411, 295, 153,
	-470, 80, 295, -470, 80, 80, 353, 368, 51, -366,
	38, 38, 26, -99, 220, 154, 441, 381, 182, 395,
	-366, -289, -376, 97, 238, 239, 51, -396, -394, 456,
	-396, 51, -396, -396, -396, 435, -216, -366, 395, 285,
	-406, 395, 469, 38, 38, 26, -99, 220, 154, 395,
	-229, -199, -147, 178, 465, -372, -222, -189, 466, -332,
	-99, -332, -99, 124, 2, -483, 214, 464, -236, 251,
	154, -258, -373, 198, 469, -266, -288, -287, 251, -218,
	2, -214, 124, 124, 464, 120, 302, 2, 265, 251,
	-200, 169, -180, 384, 124, -286, 420, -315, -99, 464,
	105, 35, -315, -277, -278, -370, -279, -201, 464, -207,
	-189, 2, -214, -267, -267, -267, -229, -230, -198, -406,
	-407, -407, -81, -374, 465, 465, 465, -149, 269, -148,
	-189, 5, -152, 420, -235, -324, -323, -419, -420, -415,
	225, 182, 411, 199, 137, -251, -202, -201, 98, -150,
	-96, -372, -150, -150, -372, -372, -214, 151, 2, 2,
	-291, -214, -198, -229, -214, -258, -258, -291, -198, -291,
	-198, -291, -198, -99, -332, 350, 151, 151, 466, -291,
	302, 99, 381, 283, 182, -214, -229, -214, -229, -198,
	-214, -366, -283, -164, 266, 211, 356, -312, -394, 464,
	-313, 330, 331, -168, 360, 254, -267, 469, -171, 36,
	110, 211, -214, 441, 121, -332, -332, 395, -491, 377,
	-338, 121, -332, 242, 255, 403, 136, 412, 112, 259,
	154, 464, -333, -333, 465, -271, -332, -332, 463, 472,
	465, -254, 469, -253, -332, -269, -269, 465, 466, -269,
	-258, 463, 463, 469, 465, -349, -350, 117, -332, 395,
	395, 395, 395, 464, 465, 466, -448, 276, 464, 464,
	465, 465, 469, 465, 441, 441, 465, 465, 465, -332,
	465, 465, 465, 465, 35, 469, 469, 469, 465, 469,
	469, 469, 465, 465, 154, 465, 465, -305, 288, 465,
	11, 12, 455, 456, 457, 458, 149, 459, 460, 453,
	454, 452, 445, 446, 447, 75, 234, 332, 14, 15,
	16, 200, 176, -333, -333, -333, 465, -336, -337, 154,
	151, 35, -300, -300, -300, 465, 154, -269, 465, 465,
	464, 465, -326, -325, 433, -369, -262, 2, -361, -209,
	-401, -326, -326, -269, -332, 206, 206, -293, 420, 265,
	-295, -361, -355, -397, -331, -330, 152, 36, 110, 248,
	172, -355, -207, -250, -355, -355, -401, -356, -356, -354,
	465, -456, -397, 465, -263, -364, -436, -254, 466, -150,
	-401, -141, 5, 255, -141, -141, -141, -258, 24, 289,
	-376, 462, 463, 8, 464, -395, -395, -395, -258, 154,
	-398, -320, 409, 72, 304, 391, -398, -173, 315, -201,
	-201, -214, 251, -323, 169, -179, 251, -376, -208, -189,
	464, 464, 211, 211, -201, -208, 211, 169, -201, 169,
	-208, -208, -463, 304, 260, -332, 227, 302, 252, -174,
	315, -99, -99, -99, 464, -469, 420, 111, -214, -229,
	-214, -218, 315, 249, -224, -396, -396, -287, 315, -216,
	-406, 255, -185, -198, -175, -99, -99, -99, 464, -199,
	-176, 315, -150, 154, -147, 457, -189, 429, -189, -234,
	-237, -235, -201, -155, 437, 435, 124, -228, -214, 462,
	-150, -406, -214, 124, -250, -406, -406, 2, 464, 2,
	-214, 124, 265, 251, -181, 118, -488, 447, -198, -326,
	-262, -285, -318, 323, 265, -251, 425, -207, -285, -264,
	469, 154, 447, 466, -251, 2, -177, -177, -177, -177,
	-177, -81, -81, -150, 469, 464, 447, 447, 464, -406,
	-406, 465, 469, -214, -200, 182, 182, -206, -190, 465,
	469, 466, 464, -150, 154, -46, 435, 381, 468, -291,
	-291, -291, 350, 350, -189, -210, -198, -214, -211, -229,
	151, 151, 415, -313, -332, 231, -358, -172, 257, -214,
	468, -332, -332, 121, 121, -332, -333, -333, -332, 121,
	154, 464, -332, -342, 30, 30, 465, 469, -328, -332,
	465, 428, -254, -254, 465, 457, -401, 465, -340, 119,
	-332, 389, 241, 168, 240, -304, 240, -304, -304, -395,
	5, -401, 457, -449, -204, 464, -189, 433, -253, -395,
	-379, -379, 465, -391, -376, -332, -332, -332, -332, -332,
	-332, -336, -332, -391, -376, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, 112, 251, 259, -333, -337, -336,
	-332, -332, -376, 465, 465, 465, -269, -81, -281, 161,
	-332, -372, 469, -281, -281, 465, -361, -361, 464, -332,
	206, 463, 469, 471, 447, -250, 466, -354, -355, 463,
	465, 469, 465, 469, -317, 35, 465, -401, 268, 5,
	8, 462, 463, -395, 465, 465, 465, -258, -332, 395,
	395, 124, 251, 422, -421, -416, -332, -256, -359, -332,
	464, 464, -170, 116, 353, -471, 2, 420, 124, -177,
	124, -177, 439, 464, 464, 395, 435, -269, -332, -151,
	105, -400, -465, 468, -465, 468, 395, 395, 435, -269,
	395, -407, -150, 2, 2, 2, 465, 465, 469, -422,
	35, 263, 464, 263, -214, -64, 435, -371, -397, -216,
	35, -184, 2, -308, 420, -199, -214, 124, -182, 218,
	-488, -404, -437, -254, -285, -276, 252, 79, 465, -326,
	-278, -262, -332, 2, 465, -148, -149, -406, -406, -406,
	-150, -152, -152, -324, 2, 464, -200, -190, 464, -152,
	-202, 2, -407, -99, 269, -214, 457, -291, -242, -241,
	283, 259, -242, 330, 330, 266, 465, 145, 215, -171,
	-199, -332, -332, 121, 30, 30, -332, -332, -342, 465,
	-332, -332, -269, 463, 5, -332, 465, 465, -332, 465,
	466, -450, -189, -332, 465, 465, 465, 465, 469, 469,
	465, 465, 465, 465, -337, 154, 112, 259, 464, 465,
	465, -339, 164, 51, -361, -339, -339, -293, -258, -361,
	-330, -199, 462, -401, -397, -364, 464, 466, 463, 2,
	462, 465, -201, -201, -323, 124, -423, 80, -425, 66,
	137, 86, 251, 255, 411, 295, 63, 105, 308, 35,
	465, 465, 469, -171, -256, -258, 251, 374, 105, 251,
	105, 98, 406, 69, -201, -208, -258, -258, -214, 130,
	465, 469, 447, 2, 457, 457, -218, -216, 130, 465,
	-199, -238, 185, -201, -420, -417, -418, 295, -424, -426,
	137, 295, -99, -154, -153, -189, 5, 2, 464, -236,
	269, 463, -288, -99, 464, -189, 265, 464, -199, -183,
	217, -488, -404, -180, -311, -309, -316, 464, 265, -99,
	-254, 447, 465, 465, 98, 98, -256, 464, 464, -258,
	98, 465, -47, -48, 182, 80, 287, -211, 381, 182,
	464, 464, -171, -332, -332, -332, 465, -254, -401, 457,
	-444, 283, 465, -332, -332, -333, 154, 464, -342, -445,
	434, -332, -269, -445, -445, 465, -397, 2, 462, 2,
	-323, -208, -212, -205, -189, 137, 169, 255, 211, 464,
	-333, -214, 464, 2, -479, 107, 186, -322, -480, 85,
	375, -359, -172, 465, 465, 255, 255, -332, -376, 464,
	-177, -177, 465, 465, -332, 395, -400, 84, -398, 2,
	-465, -332, 395, -239, -240, 176, -422, 211, -205, 211,
	-478, 435, 465, 469, 447, 447, -234, -155, -65, -66,
	396, -371, -256, -214, -256, 265, -488, -404, -181, -285,
	113, -258, 80, -311, -338, -150, 464, 464, 465, -256,
	-256, 465, 464, -150, 469, 26, 464, 26, 464, -214,
	-229, -269, -269, 465, -254, 51, 465, 465, -333, -342,
	465, -446, -447, -204, 463, 2, -425, -205, 251, -332,
	-191, 464, -332, 186, 108, 174, -238, 464, 308, -197,
	66, -256, 464, 464, 464, 447, 154, 464, -155, 281,
	464, 98, 247, -153, -335, -335, 465, 35, -66, 9,
	465, -308, 465, -214, -404, -182, 415, 252, 465, -208,
	-285, -407, -407, -322, 465, 465, -407, -48, -258, -258,
	465, 465, -451, 302, 331, 163, -269, 465, 469, 35,
	124, 465, -427, 235, -189, 465, 108, 174, -239, -258,
	-214, -466, 420, -212, 465, -244, -243, -241, -246, -245,
	-241, -269, -398, 84, 281, -269, -214, -257, -360, -201,
	98, -238, -99, -322, 464, -322, 464, -183, 353, -325,
	465, 465, -238, -322, 465, 465, 465, 465, -452, -453,
	43, 408, 89, -332, -452, -452, -447, -449, 137, -428,
	-431, -430, 265, 359, 155, 282, 465, 374, 431, -479,
	465, -250, -332, -238, 465, 469, 425, 465, 469, 425,
	465, 154, 465, 464, 465, 469, -239, -478, -238, -256,
	-238, -256, -277, -150, -150, -239, -238, -150, -454, 123,
	-453, 292, 150, 330, 292, 150, -454, -454, -205, -430,
	265, -431, 265, 415, 109, -427, -243, 176, -245, 154,
	281, -258, -360, -155, -239, 465, -239, 465, -326, -239,
	89, 161, 390, 247, 30, -429, 247, 321, 56, 353,
	-429, -428, 464, 464, 465, -484, 433, -322, -484, -322,
	330, 273, -453, 22, 255, 105, -479, -269, -269, -178,
	56, 321, 2, -238, -238, 465, 465, -239, -239, -239,
	395, -484, -484, 464, -269, 465, -239,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 371, 372, 374,
	375, 376, 378, 379, 381, 383, 385, 387, 388, 390,
	392, 394, 395, 396, 397, 398, 400, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 460, 462,
	0, 944, 946, 948, 950, 25, 26, 0, 0, 192,
	194, 196, 0, 221, 223, 225, 226, 228, -2, 0,
	323, 324, 326, 328, -2, -2, 0, 0, 449, 451,
	0, 0, 0, 471, 472, 0, 1035, -2, 465, 467,
	469, 534, 536, 538, 540, 542, 544, 546, 547, 549,
	551, 553, 555, 557, 559, 561, 562, 564, 566, 568,
	570, 572, 574, 576, 578, 580, 582, 584, -2, -2,
	-2, 0, -2, -2, -2, 962, 29, 31, 33, 35,
	37, 39, 41, 61, 277, 278, 280, 282, 284, 287,
	288, 290, 1090, 330, 332, 334, 336, 338, 0, -2,
	1102, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1066, 1068,
	1070, 1072, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 373, 377, 380, 382, 384, 386, 389,
	391, 393, 399, 401, 403, 836, 1716, 1730, 1731, 1732,
	1735, 1736, 1737, 1738, 1739, 1740, 2083, 2163, 2164, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 0, 427, 425, 1710, 428,
	1914, 430, 432, 317, 318, 319, 320, 321, 322, 0,
	442, 436, 441, 443, 445, 446, 447, 448, 422, 420,
	0, 442, 1762, 440, 942, 943, 937, 938, 1948, 972,
	461, -2, -2, -2, 2051, -2, 493, -2, 500, 2054,
	1950, 505, 0, 507, -2, 510, 945, 947, 949, 27,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, -2, -2, -2, -2, 0, 0, 1799, 1685,
	1732, 1688, 1683, 193, 195, 197, 198, 0, 0, 0,
	0, 0, 0, 222, 224, 227, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 742, 743,
	890, 891, 912, 0, 0, 0, 0, 325, 327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 0, 255, 363, 364, 0, 1091,
	1091, 0, 0, 0, 0, 173, 164, 0, 0, 726,
	450, 452, 0, 0, 159, 0, 0, 941, 0, 175,
	0, 0, 466, 468, 470, 535, 537, 539, 541, 543,
	545, 548, 550, 552, 554, 556, 558, 560, 563, 565,
	567, 569, 571, 573, 575, 577, 579, 581, 583, 585,
	586, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 0, 589, 591, 592, 593, 0, 644,
	661, 0, 879, 1092, 974, 952, 965, 974, 954, 955,
	956, 957, 958, 963, 964, 967, 0, 959, 960, 961,
	30, 32, 34, 36, 38, 40, 42, 279, 281, 283,
	285, 289, 291, -2, 1064, 1065, 331, 333, 335, 337,
	339, 453, 0, 455, 0, 590, -2, 0, 1096, 1096,
	1096, 0, 0, 1065, 1063, 0, 458, 459, 514, 515,
	1333, 0, 0, 0, 0, 0, 1582, 1417, 0, 516,
	-2, 1448, 1450, 2030, 2051, 1581, 1452, 1453, 1454, 1455,
	1456, 0, 0, 1459, 1460, 1461, 1462, 1463, 0, 1465,
	0, 1469, 1470, 1471, 0, 2035, 1662, 1728, -2, 1236,
	1237, 1238, 1239, 1240, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 2041, 1724, 0, 1548, 1485, -2, 1749, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1808, -2, -2, -2, -2, -2, -2, -2, 1292, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2065, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	0, 2019, 2036, 2037, 2042, 2044, 2038, 2027, 1510, -2,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 1293, -2, 2031, 2032,
	2047, 2048, 2053, 2058, 2059, 2034, 2043, -2, -2, 1082,
	1923, 1085, 836, 1083, 1067, 1069, 0, 1071, 0, 0,
	0, 1076, 1099, 1097, 0, 1137, 1080, 1081, 1155, 1155,
	1179, 0, 1160, 0, 1179, 1091, 1205, 0, 1166, 1943,
	1486, 1487, 0, 1732, 1729, -2, 0, 0, 0, 0,
	0, 0, 0, 423, 0, 429, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 463, 464, 0, 488,
	0, 492, 2026, -2, 1767, 1963, -2, 496, 975, 979,
	980, 981, 982, 0, 0, 0, 0, 0, 502, 0,
	0, 489, 490, 508, 511, 0, 51, 0, 2036, 1205,
	53, 0, 1700, 1754, 1755, 1756, 1757, 1758, 2065, 2082,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
	2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
	2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 55,
	0, 2036, 58, 0, 2036, 0, -2, 62, 1089, 2036,
	176, 177, 1745, 1746, 1750, 1751, 1752, 1753, 65, 0,
	1706, 67, 0, 1703, 76, 0, 2036, 0, 1682, -2,
	1192, 160, 0, 0, 0, 718, 1679, 1684, 719, 1689,
	0, 199, 200, 201, 202, 203, 2036, 205, 206, 0,
	208, 209, 2036, 211, 212, 0, 214, 230, 231, 0,
	233, 0, 2036, 0, 0, 0, 239, -2, 256, 0,
	253, 0, 243, 244, 246, 247, 248, 249, 250, 0,
	295, 293, 1711, 0, 0, 0, 896, -2, 2036, 882,
	887, 2036, 889, 901, 1714, 0, -2, 0, 1089, 2036,
	989, 746, 747, 748, 749, 0, 314, 0, 1002, 0,
	1004, 0, 1025, 1211, 1155, 1155, 0, 257, 258, 259,
	260, 261, 2036, 0, 0, 0, 266, 0, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 151, 2036, 342,
	361, 151, 2036, 345, 151, 2036, 348, 151, 2036, 351,
	1677, 151, 2036, 354, 355, 2036, 357, 178, 358, 2036,
	360, 0, -2, 416, 1718, -2, 366, 0, 367, 0,
	-2, 0, 190, 0, 0, 724, 725, 1192, 162, 0,
	939, 940, 0, 0, 473, 0, 0, 587, 588, 0,
	0, 598, 599, 600, 601, 1951, 1921, 1824, 605, 0,
	608, 611, -2, 0, 0, 0, 0, 615, 0, 620,
	621, 622, 0, 723, 624, 0, 0, 626, 0, 630,
	0, 633, 0, 635, 0, 637, -2, -2, -2, 648,
	-2, 0, 652, 0, 654, 0, 0, 0, 0, 669,
	670, 0, 675, 0, 678, 679, 680, 0, 682, 683,
	684, 685, 0, 687, 688, -2, -2, 692, 694, 0,
	701, 0, 705, 0, 709, 0, 594, 595, 151, 1209,
	951, -2, 953, 0, 969, -2, 0, 454, 0, 457,
	1117, 1050, 1047, 0, 1114, 1115, 1051, 0, 0, 0,
	1058, 0, 1094, 1095, 0, 0, 0, 1037, 1038, 0,
	0, 0, 0, 1587, 1588, 1589, 1590, 1591, 1592, 1595,
	1596, 1593, 1594, 1597, 1598, 0, 0, 0, 0, 0,
	1599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1600, 1601, 1602, 0, 0, 1604, 0, 1606,
	0, 0, 0, 0, 0, 0, 1396, 1398, 1670, 0,
	0, 1603, 1338, 1339, 1340, 1375, 1376, 0, 0, 1449,
	1667, 1666, 1451, 0, 1618, 0, 1458, 1464, 1696, -2,
	0, 1582, 1613, 0, 0, 1472, 1473, 1474, 0, 0,
	1618, 0, 0, 1661, 1330, 0, 0, 1550, 0, 1272,
	0, 1273, 1274, 0, 1275, 1276, 1289, 1302, 0, 0,
	0, 0, 1306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 1642, -2, 0, 0, 0,
	0, 0, 1084, 0, 0, 1141, 1671, 1675, 1676, 1141,
	1141, 0, 0, 1619, 1202, 1202, 0, 0, 1198, 1198,
	1198, 1196, 1179, 0, 1179, 1189, 0, 1179, 1179, 0,
	-2, 1160, 0, 0, 1189, 0, 1173, 404, 406, 408,
	410, 411, 412, 414, 1206, 1207, 0, 0, 0, 0,
	0, 0, 1733, 0, 0, 0, 1720, 0, 0, 0,
	0, 434, 444, 1091, 0, 1621, 1228, 1231, 1232, 1233,
	1234, 1235, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, -2,
	1290, 1292, 1313, 1279, 1280, 1281, 1282, 1283, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1285,
	0, 1260, 1260, 1260, 1277, 1278, 1301, 1312, 1304, 1312,
	1308, 1229, 1230, 1295, 1296, 1297, 1298, 0, 438, 0,
	0, 0, 0, -2, 498, 503, 504, 0, 0, 977,
	0, 983, 525, 526, 527, 985, 986, 0, 501, 528,
	529, 530, 531, 532, 533, 0, 853, 0, 855, 1691,
	0, 499, 518, 506, 0, 512, 77, 934, 116, 0,
	934, 934, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 101, 112, 89, 90, 0, 0, 0, 0, 59,
	861, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 923, 0, 1088, 0, 100, 0, 95,
	79, 0, 0, 0, 102, 114, 0, 142, 144, 0,
	0, 181, 1191, 0, 1192, 717, 0, 0, 1733, 1687,
	0, 0, 0, 0, 232, 234, 0, 236, 237, 238,
	0, 895, 0, 245, 242, 286, 810, 2036, 0, 0,
	312, 307, 0, 309, 860, 2036, 858, 1715, 0, 880,
	883, 0, 0, 0, 0, 902, 0, 2036, 907, 1702,
	1741, 1742, 991, 0, 316, 0, 1005, 1007, 0, 0,
	1212, 0, 1214, 1215, 0, 263, 264, 265, 0, 340,
	0, 149, 150, 0, 343, 0, 346, 0, 349, 0,
	0, 352, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 0, 190, 0,
	1192, 190, 190, 1192, 475, 1192, 477, 0, 0, 602,
	603, 604, 606, 607, 609, 610, -2, -2, 702, 612,
	613, 672, 0, 0, 0, 671, 623, 0, 711, 1939,
	721, 672, 1799, 672, 1799, 672, 1799, 634, 636, 639,
	664, 647, 651, 0, 0, 0, 656, 0, 658, 0,
	660, 672, 673, 676, 681, 686, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 968, 1117, 1050, 456, 1041,
	1116, 1042, 1049, 1052, 0, 0, 1054, 0, 1056, 0,
	1112, 1113, 1120, 1121, 1127, 1130, 1131, 1123, 1333, 1060,
	0, 1077, 1078, 1079, 1103, 1104, 921, 0, 2163, 1334,
	1223, 1335, 1336, 1699, 0, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, -2, -2, -2, -2, -2,
	-2, -2, -2, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, -2, -2, -2, 1373, 1374, -2,
	1605, 1607, 0, 1670, 0, -2, 0, -2, -2, -2,
	-2, 1393, 0, 1395, 1400, 1402, 1404, 0, 0, 0,
	0, 1669, 1414, 1653, 1654, 0, 0, 1584, 1585, 1586,
	1399, 0, 1418, 1668, 1665, 0, 0, 1617, 1102, 1476,
	0, 0, 0, 0, 1483, 1468, 1615, 0, 1614, 0,
	0, 0, 1625, 0, 1660, 1656, 0, 1697, 1329, 1316,
	1317, 1318, 1319, 1320, 1321, 1331, 0, 1694, 1721, 1727,
	1558, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 1512, 1513, 1514, 1515, 0, 1517, 1518,
	0, 1520, 1521, 0, 1523, 1524, 0, 1526, 1527, 1528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 1628, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 1532, 0, 1534, 1619, 1639, 0, 0, 1419, 0,
	0, 0, 1582, 0, 1537, 1619, 1647, 0, 0, 0,
	0, 0, 1619, 0, 1652, 0, 1544, 0, 1546, 1086,
	0, 0, 1218, 0, 0, 0, 1674, 1218, 1218, 0,
	1136, 0, 0, 1199, 1200, 1201, 0, 0, 1202, 0,
	1193, 1197, 1194, 1195, 1189, 1152, 0, 0, 1701, 1189,
	1158, 1188, 0, 836, 1178, 1189, 1189, 0, -2, 1162,
	1179, 0, 0, 405, 407, 409, 413, 415, 0, 0,
	1102, -2, 190, 835, 0, 0, 0, 0, 0, 424,
	426, 0, 0, 418, 0, 421, 0, 1219, 1222, 0,
	0, -2, 0, 0, 1314, 0, 0, 0, 0, 491,
	0, 976, 984, 0, 522, 0, 524, 0, 854, 1693,
	1692, 0, 513, 0, 0, 0, 0, 933, 120, 2036,
	0, 153, 0, 0, 804, 1707, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 91, 0, 0, 0, 0, 0, 0,
	0, 862, 863, 865, 872, 874, 0, 868, 1695, 0,
	869, 0, 871, 873, 875, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 88, 92, 0, 0, 0,
	0, 1681, 190, 0, 161, 181, 1680, 1690, 0, 204,
	207, 210, 213, 0, 240, 0, 0, 752, 729, 0,
	0, 294, 190, 0, 0, 308, 856, 859, 0, 836,
	894, 1713, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 2036, 993, 999, 0, 1218, 0, 1023, 1008, 0,
	0, 0, 1023, 1027, 1028, 1030, 1031, 0, 0, 1213,
	0, 267, 362, 151, 151, 151, 1678, 151, 151, 179,
	356, 359, 365, 417, 1091, 1091, 190, 188, 1899, 186,
	183, 185, 0, 0, 0, 753, 755, 756, 757, 758,
	0, 1742, 0, 1853, 1742, 0, 1011, 1013, 0, 157,
	163, 190, 0, 306, 474, 479, 596, 0, 641, 666,
	614, 616, 617, 618, 0, 722, 720, 625, 672, 628,
	672, 631, 672, 650, 653, 655, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 0, 0, 706, 707, 708,
	710, 1210, 1045, 1046, 1048, 0, 1057, 0, 1125, 0,
	1124, 1128, 1129, 1053, 0, 1062, 1059, 0, 1111, 919,
	920, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1415, 0, -2, 1394, 1397, 1401, 1403, 1405, 0, 0,
	0, 0, 0, 0, 1608, 0, 1610, 1416, 1663, 1666,
	1580, 0, 0, 1101, 1102, 1102, 0, 1482, 0, 1616,
	0, 1623, 1624, 0, 1475, 0, 1657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	1284, 1258, 0, 1312, 1310, 1311, 1305, 1312, 1309, 0,
	1516, 1519, 1522, 1525, 0, 0, 0, 0, 1505, 0,
	0, 0, 1509, 1529, 0, 1531, 1533, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 1424, 1536, 1645, 1646, 0,
	0, 0, 0, 0, 0, 1542, 0, 1651, 1543, 1545,
	1091, 1138, 1133, 1217, 0, 1672, 1192, 1140, 1142, 1673,
	1704, 1133, 1133, 0, 1620, 0, 0, 1183, 0, 0,
	0, 1185, 1156, 0, 0, 1150, 0, 1146, 1147, 1148,
	1149, 1157, 836, 1187, 1159, 1163, 1721, 0, 1189, 0,
	1174, 0, 1176, 1208, 0, 1168, 1171, 0, 0, 191,
	1734, 215, 219, 220, 216, 217, 218, 433, 0, 0,
	1622, 0, 1224, 0, 0, 0, 0, 0, 437, 0,
	487, -2, 520, 521, 523, 0, 519, 117, 934, 0,
	0, 925, 0, 122, 2036, 131, 0, 781, 0, 1705,
	0, 0, 0, 0, 936, 0, 0, 2036, 151, 2036,
	151, 134, 137, 0, 141, 139, 0, 0, 772, 78,
	934, 81, 85, 93, 0, 0, 0, 99, 0, 0,
	0, 927, 0, 866, 867, 870, 876, 60, 0, 929,
	885, 886, 924, 922, 143, 83, 87, 94, 0, 931,
	80, 0, 154, 0, 190, 1686, 0, 0, 0, 0,
	0, 751, 821, 0, 0, 0, 0, 300, 296, 0,
	305, 311, 310, 0, 0, -2, 888, 897, 0, 899,
	911, 0, 0, 0, 995, 999, 0, 998, 1089, 1102,
	315, 1000, 1023, 0, 0, 0, 1010, 1006, 1003, 1218,
	0, 0, 0, 0, 0, 262, 341, 344, 347, 350,
	353, 368, 369, 165, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 1742, 1742, 0, 1709, 0,
	0, 0, 0, 158, 0, 476, 0, 0, 0, 627,
	629, 632, 657, 659, 672, 695, 696, 767, 0, 767,
	0, 0, 1055, 0, 0, 1061, 1105, 1106, 0, 921,
	0, 1337, 1378, 0, 0, -2, 0, 0, 1382, 0,
	0, 0, -2, 0, 0, 0, 1609, 1611, 0, 1665,
	1477, 0, 0, 0, 1481, 1466, 1467, 1583, 1626, 1655,
	1659, 0, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 0,
	1698, 1722, 1726, 1556, 1557, 1561, 1712, 0, 0, 0,
	1303, 1307, 1488, 0, 0, 0, 0, 0, 0, 0,
	1627, 1638, 1640, 1420, 1421, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, -2, -2, -2, 1438, 1439,
	1440, -2, -2, -2, 0, 0, 0, 1641, 1643, 1644,
	1648, 1649, 0, 1539, 1540, 1541, 1650, 0, 1135, 0,
	1216, 1139, 0, 1135, 1135, 1098, 1181, 0, 0, 1204,
	0, 1153, 0, 1154, 0, 1186, 0, 1161, 1164, 1165,
	1175, 0, 1167, 0, 1170, 0, 1477, -2, 435, 419,
	0, 0, 1226, 0, 1287, 1291, 1315, 439, 1190, 0,
	0, 0, 0, 152, 779, 803, 0, 0, 914, 921,
	0, 0, 124, 0, 0, 0, 132, 0, 0, 129,
	0, 136, 140, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 103, 0, 104, 0, 0, 0, 0, 0,
	0, 180, 155, 235, 893, 241, 761, 809, 0, 811,
	0, 730, 0, 0, 810, 292, 0, 299, 0, 860,
	0, 881, 898, 0, 0, 0, 0, 0, 997, 999,
	0, 990, 991, 1119, 1001, 1021, -2, 1020, 0, 1102,
	1029, 1026, 1032, 1033, 0, 187, 0, 182, 184, 0,
	168, 0, 0, 754, 759, 0, 0, 0, 0, 0,
	1012, 1014, 0, 174, 0, 597, 619, 667, 697, 766,
	0, 0, 699, 0, 0, 1122, 1126, 1109, 1110, 1107,
	921, 1380, 1384, 0, 0, 0, 1386, -2, 0, 1408,
	-2, -2, 1612, 1664, 1457, 1102, 1478, 1480, 1658, 1332,
	0, 1563, 1560, 0, 1547, 1259, 1500, 1501, 0, 0,
	1504, 1506, 1507, 1508, 1637, 0, 0, 0, 0, 1538,
	1087, 1552, 0, 0, 1143, 1552, 1552, 1182, 0, 1184,
	1151, 1144, 0, 1722, 1177, 1169, 0, 0, 1220, 1225,
	0, 1286, 118, 119, 121, 0, 780, 0, 783, 0,
	0, 0, 0, 790, 791, 0, 0, 0, 0, 0,
	825, 834, 0, 1111, 0, 0, 0, 126, 146, 0,
	0, 935, 0, 0, 151, 151, 0, 0, 926, 0,
	0, 0, 0, 106, 0, 0, 928, 930, 0, 0,
	932, 769, 0, 821, 813, 814, 815, 0, 820, 822,
	0, 0, 739, 0, 735, 0, 0, 732, 752, 729,
	0, 297, 857, 892, 0, 910, 0, 0, 0, 987,
	999, 0, 992, 993, 1023, 1118, 0, 0, 0, 1009,
	1119, 0, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 190, 478, 480, 0, 0, 486, 765, 0, 0,
	0, 0, 1108, 1388, -2, -2, 1409, 0, 1723, 1725,
	1102, 0, 1549, 0, 0, -2, 0, 0, 0, 1073,
	0, 1134, 1132, 1074, 1075, 1203, 0, 1172, 0, 1227,
	123, 0, 784, 785, 1708, 787, 0, 789, 792, 0,
	794, 1744, 0, 798, 805, 826, 0, 761, 0, 831,
	832, 915, 916, 807, 0, 125, 127, 145, 918, 0,
	128, 135, 0, 0, 82, 0, 0, 1793, 109, 107,
	105, 84, 0, 729, 768, 0, 812, 0, 823, 824,
	737, 0, 731, 0, 0, 0, 0, 0, 298, 301,
	0, 304, 0, 911, 0, 0, 0, 994, 995, 313,
	0, 0, 0, 1023, 1034, 167, 0, 0, 834, 0,
	0, 802, 0, 172, 0, 482, 0, 484, 0, 698,
	700, 0, 0, 1479, 1567, 0, 1502, 1503, -2, 0,
	1446, 1551, 1553, 0, 1145, 1221, 782, 786, 0, 0,
	840, 0, 0, 0, 829, 830, 769, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 740, 0, 736, 733, 734, 761, 0, 302, 303,
	834, 0, 834, 0, 996, 997, 0, 1016, 1017, 1019,
	1024, 0, 0, 761, 834, 801, 0, 481, 0, 0,
	703, 704, 0, 0, 0, 0, 1562, 1447, 0, 0,
	0, 793, 845, 0, 0, 0, 827, 828, 825, 0,
	836, 130, 0, 917, 761, 0, 773, 0, 0, 776,
	0, 0, 110, 1793, 108, 0, 0, 0, 817, 819,
	741, 769, 739, 761, 0, 761, 0, 988, 0, 1018,
	190, 190, 769, 761, 190, 483, 485, 1559, 1579, 1568,
	-2, 1999, 1796, 0, 1579, 1579, 1554, 1555, 0, 795,
	841, 842, 0, 837, 838, 839, 1743, 796, 797, 806,
	833, 840, 147, 133, 770, 0, 0, 771, 0, 0,
	113, 0, 115, 0, 816, 0, 729, 738, 769, 0,
	769, 0, 1218, 169, 170, 799, 769, 171, 1564, 0,
	0, 1570, 1571, 1572, 1573, 1574, 1565, 1566, 788, 843,
	0, 844, 0, 0, 0, 845, 774, 0, 777, 0,
	111, 0, 818, 728, 908, 834, 908, 834, 1015, 800,
	0, 1576, 1577, 0, 0, 846, 0, 849, 850, 0,
	847, 825, 0, 0, 764, 903, 0, 761, 905, 761,
	1575, 1578, 1569, 848, 851, 852, 808, 0, 0, 760,
	762, 763, 909, 769, 769, 769, 0, 908, 908, 775,
	0, 904, 906, 0, 0, 769, 778,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 453, 3, 459, 454, 3,
	464, 465, 457, 455, 469, 456, 466, 458, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 472, 3,
	445, 447, 446, 450, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 462, 3, 463, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 470, 452, 471, 448,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 449, 57788, 451, 57789, 461,
	57790, 467, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1110
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1123
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1124
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1130
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1148
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1229
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1240
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1259
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1263
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1274
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1286
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1305
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1337
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1341
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1345
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1361
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1370
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1399
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1434
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1441
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1453
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1460
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1468
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1477
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1488
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1496
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1507
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1517
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1527
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1536
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1547
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1553
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1579
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1584
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1636
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1704
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Interleave: sqlDollar[9].union.interleave(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1745
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1752
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1761
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1775
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1787
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1808
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1852
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1855
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1882
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1885
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1889
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1893
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1899
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1946
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1951
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1955
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1961
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1966
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1971
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1976
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1981
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1985
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2004
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2012
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2034
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2068
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2072
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2082
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2096
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2097
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2122
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2132
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2141
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2177
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2202
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2206
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2219
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2225
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2230
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2245
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2246
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2247
		{
			return helpWith(sqllex, "CREATE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "create cast")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "create operator")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "create publication")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplemented(sqllex, "create rule")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "create server")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2274
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2277
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2278
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2281
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2282
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplemented(sqllex, "drop server")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2308
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2309
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2311
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2313
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2314
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2315
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2334
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2342
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2348
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2352
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2361
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2395
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2407
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2423
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2437
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2447
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2454
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2458
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2482
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2485
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2486
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2497
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2498
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2499
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2500
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2501
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2512
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DROP")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2518
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2520
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2532
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2535
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2550
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2565
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2604
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2626
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2634
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2638
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2641
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2645
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2673
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2686
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2705
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			return helpWith(sqllex, "DELETE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2711
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			return helpWith(sqllex, "INSERT")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2713
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2715
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2720
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2726
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2727
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "DELETE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2733
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2734
		{
			return helpWith(sqllex, "INSERT")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2740
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2767
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2775
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2779
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2783
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2800
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2808
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2812
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2841
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2861
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "GRANT")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2892
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2900
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2903
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2912
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			return helpWith(sqllex, "RESET")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2941
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2953
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "RESET")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2967
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "USE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2986
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2987
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2988
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2992
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2993
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2994
		{
			return helpWith(sqllex, "USE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3010
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3118
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3138
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3143
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3163
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3165
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3168
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3172
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3191
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3208
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3213
		{
			return unimplemented(sqllex, "set from current")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3222
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3227
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3234
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3255
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3280
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3298
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3302
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = tree.Low
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3312
		{
			sqlVAL.union.val = tree.Normal
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.High
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3335
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3340
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3344
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3359
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3362
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3365
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3368
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3379
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3391
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.str = "client_encoding"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.str = "timezone"
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3422
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3426
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3430
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3441
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3449
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3472
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3480
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3497
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3504
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3506
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3509
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3515
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3518
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3552
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3560
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3563
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3576
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3597
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3614
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3633
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3641
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3644
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3646
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3649
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = true
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = false
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3667
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3674
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3675
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3684
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3694
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3702
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3714
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3716
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3719
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3721
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3725
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3728
		{
			sqlVAL.union.val = true
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = false
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3737
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3740
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3742
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3745
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3753
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3763
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3773
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3776
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3779
		{
			sqlVAL.union.val = true
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3780
		{
			sqlVAL.union.val = false
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3794
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3801
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3815
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3819
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3827
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3832
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3837
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3841
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3853
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3857
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3870
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3873
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3884
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3892
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3896
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3904
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3930
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3941
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3949
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3955
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3964
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3973
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3976
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3980
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3987
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3992
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4120
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4181
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4216
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4252
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4266
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = nil
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4286
		{

			sqlVAL.union.val = nil
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4292
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4297
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4323
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4335
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4348
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4349
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4368
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4369
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4370
		{
			sqlVAL.union.val = false
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = true
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = true
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4377
		{
			sqlVAL.union.val = true
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4378
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4408
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4412
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4428
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4433
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.str = ""
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4514
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4528
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4591
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4603
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4607
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4615
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4629
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4633
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 799:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4689
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4695
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4701
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4722
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4746
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4756
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4771
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4778
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4784
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4831
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4836
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4837
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4838
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4839
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4840
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4841
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4900
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4904
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4935
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4941
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4949
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4953
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4957
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5000
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5009
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5017
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5024
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5028
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5032
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5033
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5043
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5046
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5048
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5050
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5053
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5056
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5058
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5071
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5083
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5086
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5091
		{
			sqlVAL.union.val = nil
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5097
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5101
		{
			sqlVAL.union.val = tree.DNull
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5118
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5123
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5124
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5132
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5141
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5142
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5145
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5146
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5152
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5154
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5156
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5158
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5160
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5162
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5178
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5192
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5207
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5221
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5235
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5238
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5243
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.union.val = false
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5264
		{
			sqlVAL.union.val = true
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.union.val = false
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5274
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5287
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5310
		{
			sqlVAL.str = ""
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5314
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5318
		{
			sqlVAL.union.val = tree.Descending
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5322
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 922:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5328
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[6].union.expr(), IfExists: true}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5345
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5351
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5359
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5365
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5373
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5379
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5391
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5396
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5400
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5401
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5412
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5434
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5445
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5449
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5450
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5451
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5470
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5472
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5475
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5488
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5490
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5493
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5502
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5503
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5504
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5512
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5519
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5522
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5523
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.str = ""
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5535
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5539
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5565
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5569
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5582
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5584
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5588
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5593
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5607
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5613
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5623
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 987:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5653
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5657
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5661
		{
			sqlVAL.str = ""
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5667
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5671
		{
			sqlVAL.str = ""
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.str = ""
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.str = ""
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5696
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5697
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5709
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5716
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5723
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5741
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5745
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5754
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5759
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5773
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5779
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5803
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5807
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5820
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5821
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5823
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5829
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5838
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5855
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5867
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5873
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5896
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5899
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5946
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5952
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5956
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5983
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5999
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6032
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6033
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6034
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6038
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6044
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6049
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6084
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6085
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6086
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6147
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6151
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6191
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6207
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6212
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6236
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6237
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = nil
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6250
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6251
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = true
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = false
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = false
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6269
		{
			sqlVAL.union.val = true
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6275
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6280
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6281
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6311
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6332
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6337
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6349
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6366
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6386
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6399
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6444
		{
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6445
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6448
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6449
		{
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6476
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6502
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6504
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6519
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6521
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6541
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6546
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6551
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6562
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6574
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6593
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6601
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6632
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6642
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6677
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6688
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6718
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6751
		{
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6753
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6756
		{
			sqlVAL.union.val = nil
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = true
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = false
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6822
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6833
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.str = tree.AstFull
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.str = tree.AstRight
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.str = tree.AstInner
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6871
		{
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.str = tree.AstHash
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.str = ""
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6933
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6956
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6968
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6978
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7007
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7020
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7028
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7029
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7047
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7057
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = types.String
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7106
		{
			sqlVAL.union.val = types.Name
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7110
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.INet
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = types.Oid
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7159
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7198
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = nil
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = types.Int2
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = types.Int2
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = types.Int4
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = types.Int
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = types.Int
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = types.Int
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = types.Float4
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = types.Float4
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = types.Float
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = types.Float
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7265
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7273
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7281
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = types.Bool
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = types.Bool
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = types.RegType
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7322
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = types.Float
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7341
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7347
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7369
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = types.String
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = true
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = false
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = types.Date
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7418
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7426
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7438
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7440
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7449
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7457
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7474
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = true
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = false
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = false
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = types.Interval
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7498
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7555
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7597
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = nil
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7627
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7676
		{

			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7689
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7798
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7838
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7846
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7878
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7933
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7959
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7991
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7999
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8021
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8199
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8220
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8226
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8255
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8275
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8294
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8305
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8306
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8321
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8332
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8452
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8457
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8466
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8475
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8484
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8493
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8498
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8503
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8508
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8513
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8522
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8523
		{
			return unimplemented(sqllex, "treat")
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8544
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8546
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8549
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8554
		{
			return unimplemented(sqllex, "within group")
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8555
		{
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8590
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8606
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8633
		{
			sqlVAL.str = ""
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8679
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8692
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8760
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8765
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8778
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8789
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = tree.Any
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8805
		{
			sqlVAL.union.val = tree.Some
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8809
		{
			sqlVAL.union.val = tree.All
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8816
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.union.val = tree.Div
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8820
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8821
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8822
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8823
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = tree.LT
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = tree.GT
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8827
		{
			sqlVAL.union.val = tree.LE
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8828
		{
			sqlVAL.union.val = tree.GE
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8829
		{
			sqlVAL.union.val = tree.NE
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8833
		{
			sqlVAL.union.val = tree.Like
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8835
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8859
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8863
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8869
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8873
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8877
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8892
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8902
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8909
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8915
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8935
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8945
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8955
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8959
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8982
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8990
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8996
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9024
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9028
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9032
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9036
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9040
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9052
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9062
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9066
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9072
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9084
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9091
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9101
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9107
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9111
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9118
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9128
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9135
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9150
		{
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9151
		{
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9165
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9178
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9182
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9190
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9200
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9223
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9231
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9254
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9263
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9267
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9271
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9275
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9281
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9285
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9293
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9297
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9306
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9317
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9326
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9334
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9346
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9443
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9450
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9454
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9458
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9472
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9476
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9480
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9493
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9511
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9524
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9531
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9556
		{
			sqlVAL.str = ""
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9562
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9566
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
