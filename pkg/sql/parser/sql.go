// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8253

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	424, 57,
	-2, 893,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 730,
	-2, 0,
	-1, 60,
	101, 893,
	173, 893,
	372, 893,
	373, 893,
	-2, 0,
	-1, 74,
	113, 867,
	127, 867,
	181, 867,
	207, 867,
	237, 867,
	245, 867,
	369, 867,
	-2, 856,
	-1, 110,
	197, 547,
	359, 547,
	-2, 0,
	-1, 115,
	4, 895,
	20, 895,
	21, 895,
	22, 895,
	23, 895,
	25, 895,
	30, 895,
	35, 895,
	36, 895,
	37, 895,
	38, 895,
	39, 895,
	40, 895,
	41, 895,
	42, 895,
	43, 895,
	44, 895,
	46, 895,
	47, 895,
	48, 895,
	49, 895,
	50, 895,
	51, 895,
	54, 895,
	55, 895,
	56, 895,
	58, 895,
	59, 895,
	63, 895,
	64, 895,
	65, 895,
	66, 895,
	67, 895,
	69, 895,
	70, 895,
	71, 895,
	72, 895,
	74, 895,
	76, 895,
	77, 895,
	80, 895,
	81, 895,
	82, 895,
	90, 895,
	91, 895,
	92, 895,
	93, 895,
	94, 895,
	95, 895,
	96, 895,
	97, 895,
	99, 895,
	101, 895,
	103, 895,
	106, 895,
	107, 895,
	109, 895,
	110, 895,
	114, 895,
	115, 895,
	116, 895,
	117, 895,
	118, 895,
	119, 895,
	120, 895,
	121, 895,
	122, 895,
	123, 895,
	124, 895,
	132, 895,
	133, 895,
	134, 895,
	135, 895,
	136, 895,
	138, 895,
	140, 895,
	144, 895,
	146, 895,
	147, 895,
	149, 895,
	151, 895,
	152, 895,
	153, 895,
	154, 895,
	155, 895,
	156, 895,
	157, 895,
	158, 895,
	159, 895,
	162, 895,
	163, 895,
	168, 895,
	169, 895,
	170, 895,
	173, 895,
	174, 895,
	175, 895,
	176, 895,
	177, 895,
	178, 895,
	179, 895,
	180, 895,
	182, 895,
	184, 895,
	187, 895,
	188, 895,
	189, 895,
	191, 895,
	192, 895,
	195, 895,
	196, 895,
	197, 895,
	199, 895,
	200, 895,
	202, 895,
	204, 895,
	205, 895,
	208, 895,
	209, 895,
	212, 895,
	214, 895,
	217, 895,
	218, 895,
	219, 895,
	220, 895,
	221, 895,
	222, 895,
	224, 895,
	225, 895,
	226, 895,
	227, 895,
	232, 895,
	233, 895,
	234, 895,
	235, 895,
	236, 895,
	238, 895,
	239, 895,
	241, 895,
	242, 895,
	243, 895,
	246, 895,
	247, 895,
	249, 895,
	251, 895,
	252, 895,
	253, 895,
	254, 895,
	255, 895,
	256, 895,
	257, 895,
	258, 895,
	260, 895,
	261, 895,
	262, 895,
	263, 895,
	264, 895,
	266, 895,
	267, 895,
	268, 895,
	269, 895,
	270, 895,
	271, 895,
	272, 895,
	273, 895,
	275, 895,
	276, 895,
	277, 895,
	278, 895,
	279, 895,
	281, 895,
	282, 895,
	283, 895,
	284, 895,
	285, 895,
	286, 895,
	287, 895,
	289, 895,
	291, 895,
	292, 895,
	293, 895,
	294, 895,
	295, 895,
	296, 895,
	298, 895,
	299, 895,
	300, 895,
	301, 895,
	302, 895,
	303, 895,
	304, 895,
	306, 895,
	307, 895,
	308, 895,
	309, 895,
	310, 895,
	311, 895,
	312, 895,
	313, 895,
	314, 895,
	316, 895,
	317, 895,
	318, 895,
	319, 895,
	321, 895,
	322, 895,
	323, 895,
	324, 895,
	326, 895,
	327, 895,
	328, 895,
	329, 895,
	330, 895,
	331, 895,
	332, 895,
	333, 895,
	334, 895,
	335, 895,
	336, 895,
	337, 895,
	339, 895,
	340, 895,
	342, 895,
	343, 895,
	344, 895,
	345, 895,
	346, 895,
	347, 895,
	348, 895,
	349, 895,
	350, 895,
	351, 895,
	353, 895,
	354, 895,
	355, 895,
	356, 895,
	359, 895,
	360, 895,
	361, 895,
	362, 895,
	364, 895,
	365, 895,
	367, 895,
	368, 895,
	371, 895,
	372, 895,
	373, 895,
	374, 895,
	376, 895,
	378, 895,
	379, 895,
	380, 895,
	381, 895,
	382, 895,
	383, 895,
	386, 895,
	387, 895,
	392, 895,
	393, 895,
	394, 895,
	395, 895,
	396, 895,
	397, 895,
	-2, 0,
	-1, 136,
	113, 866,
	127, 866,
	181, 866,
	207, 866,
	237, 866,
	245, 866,
	369, 866,
	-2, 859,
	-1, 141,
	1, 789,
	187, 789,
	266, 789,
	270, 789,
	423, 789,
	424, 789,
	-2, 0,
	-1, 143,
	1, 789,
	423, 789,
	424, 789,
	-2, 0,
	-1, 144,
	1, 789,
	423, 789,
	424, 789,
	-2, 0,
	-1, 145,
	1, 793,
	423, 793,
	424, 793,
	-2, 0,
	-1, 171,
	4, 902,
	5, 902,
	6, 902,
	7, 902,
	8, 902,
	9, 902,
	20, 902,
	21, 902,
	22, 902,
	23, 902,
	25, 902,
	30, 902,
	31, 902,
	35, 902,
	36, 902,
	37, 902,
	38, 902,
	39, 902,
	40, 902,
	41, 902,
	42, 902,
	43, 902,
	44, 902,
	46, 902,
	47, 902,
	48, 902,
	49, 902,
	50, 902,
	51, 902,
	52, 902,
	53, 902,
	54, 902,
	55, 902,
	56, 902,
	58, 902,
	59, 902,
	61, 902,
	63, 902,
	64, 902,
	65, 902,
	66, 902,
	67, 902,
	69, 902,
	70, 902,
	71, 902,
	72, 902,
	74, 902,
	76, 902,
	77, 902,
	79, 902,
	80, 902,
	81, 902,
	82, 902,
	83, 902,
	84, 902,
	85, 902,
	86, 902,
	87, 902,
	88, 902,
	89, 902,
	90, 902,
	91, 902,
	92, 902,
	93, 902,
	94, 902,
	95, 902,
	96, 902,
	97, 902,
	98, 902,
	99, 902,
	101, 902,
	103, 902,
	106, 902,
	107, 902,
	109, 902,
	110, 902,
	114, 902,
	115, 902,
	116, 902,
	117, 902,
	118, 902,
	119, 902,
	120, 902,
	121, 902,
	122, 902,
	123, 902,
	124, 902,
	125, 902,
	126, 902,
	132, 902,
	133, 902,
	134, 902,
	135, 902,
	136, 902,
	138, 902,
	140, 902,
	143, 902,
	144, 902,
	146, 902,
	147, 902,
	149, 902,
	151, 902,
	152, 902,
	153, 902,
	154, 902,
	155, 902,
	156, 902,
	157, 902,
	158, 902,
	159, 902,
	160, 902,
	162, 902,
	163, 902,
	168, 902,
	169, 902,
	170, 902,
	172, 902,
	173, 902,
	174, 902,
	175, 902,
	176, 902,
	177, 902,
	178, 902,
	179, 902,
	180, 902,
	182, 902,
	184, 902,
	185, 902,
	186, 902,
	187, 902,
	188, 902,
	189, 902,
	190, 902,
	191, 902,
	192, 902,
	195, 902,
	196, 902,
	197, 902,
	199, 902,
	200, 902,
	202, 902,
	203, 902,
	204, 902,
	205, 902,
	206, 902,
	208, 902,
	209, 902,
	212, 902,
	214, 902,
	215, 902,
	216, 902,
	217, 902,
	218, 902,
	219, 902,
	220, 902,
	221, 902,
	222, 902,
	223, 902,
	224, 902,
	225, 902,
	226, 902,
	227, 902,
	228, 902,
	230, 902,
	231, 902,
	232, 902,
	233, 902,
	234, 902,
	235, 902,
	236, 902,
	238, 902,
	239, 902,
	242, 902,
	243, 902,
	246, 902,
	247, 902,
	248, 902,
	249, 902,
	250, 902,
	251, 902,
	252, 902,
	253, 902,
	254, 902,
	255, 902,
	256, 902,
	257, 902,
	258, 902,
	260, 902,
	261, 902,
	262, 902,
	263, 902,
	264, 902,
	266, 902,
	267, 902,
	268, 902,
	269, 902,
	270, 902,
	271, 902,
	272, 902,
	273, 902,
	275, 902,
	276, 902,
	277, 902,
	278, 902,
	279, 902,
	281, 902,
	282, 902,
	283, 902,
	284, 902,
	285, 902,
	286, 902,
	287, 902,
	289, 902,
	290, 902,
	291, 902,
	292, 902,
	293, 902,
	294, 902,
	295, 902,
	296, 902,
	298, 902,
	299, 902,
	300, 902,
	301, 902,
	302, 902,
	303, 902,
	304, 902,
	306, 902,
	307, 902,
	308, 902,
	309, 902,
	310, 902,
	311, 902,
	312, 902,
	313, 902,
	314, 902,
	315, 902,
	316, 902,
	317, 902,
	318, 902,
	319, 902,
	320, 902,
	321, 902,
	322, 902,
	323, 902,
	324, 902,
	326, 902,
	327, 902,
	328, 902,
	329, 902,
	330, 902,
	331, 902,
	332, 902,
	333, 902,
	334, 902,
	335, 902,
	336, 902,
	337, 902,
	339, 902,
	340, 902,
	342, 902,
	343, 902,
	344, 902,
	345, 902,
	346, 902,
	347, 902,
	348, 902,
	349, 902,
	350, 902,
	351, 902,
	353, 902,
	354, 902,
	355, 902,
	356, 902,
	359, 902,
	360, 902,
	361, 902,
	362, 902,
	363, 902,
	364, 902,
	365, 902,
	367, 902,
	368, 902,
	371, 902,
	372, 902,
	373, 902,
	374, 902,
	375, 902,
	376, 902,
	378, 902,
	379, 902,
	380, 902,
	381, 902,
	382, 902,
	383, 902,
	386, 902,
	387, 902,
	392, 902,
	393, 902,
	394, 902,
	395, 902,
	396, 902,
	397, 902,
	398, 902,
	406, 902,
	411, 902,
	412, 902,
	413, 902,
	420, 902,
	426, 902,
	-2, 0,
	-1, 174,
	1, 57,
	424, 57,
	-2, 893,
	-1, 207,
	422, 1471,
	425, 1471,
	-2, 590,
	-1, 208,
	422, 1473,
	425, 1473,
	-2, 591,
	-1, 209,
	422, 1472,
	425, 1472,
	-2, 592,
	-1, 210,
	425, 1413,
	-2, 593,
	-1, 616,
	142, 1586,
	357, 1586,
	403, 1586,
	422, 1586,
	-2, 0,
	-1, 617,
	142, 1509,
	357, 1509,
	403, 1509,
	422, 1509,
	-2, 0,
	-1, 619,
	142, 1660,
	357, 1660,
	403, 1660,
	422, 1660,
	-2, 0,
	-1, 621,
	142, 1689,
	357, 1689,
	403, 1689,
	422, 1689,
	-2, 0,
	-1, 628,
	142, 1592,
	357, 1592,
	403, 1592,
	422, 1592,
	-2, 421,
	-1, 663,
	1, 519,
	419, 519,
	421, 519,
	423, 519,
	424, 519,
	-2, 0,
	-1, 664,
	1, 589,
	139, 589,
	419, 589,
	421, 589,
	423, 589,
	424, 589,
	-2, 0,
	-1, 670,
	1, 533,
	419, 533,
	421, 533,
	423, 533,
	424, 533,
	-2, 0,
	-1, 672,
	1, 537,
	419, 537,
	421, 537,
	423, 537,
	424, 537,
	-2, 0,
	-1, 675,
	1, 548,
	419, 548,
	421, 548,
	423, 548,
	424, 548,
	-2, 0,
	-1, 676,
	1, 554,
	419, 554,
	421, 554,
	423, 554,
	424, 554,
	-2, 0,
	-1, 677,
	1, 557,
	419, 557,
	421, 557,
	423, 557,
	424, 557,
	-2, 0,
	-1, 681,
	1, 571,
	419, 571,
	421, 571,
	423, 571,
	424, 571,
	-2, 0,
	-1, 682,
	1, 573,
	419, 573,
	421, 573,
	423, 573,
	424, 573,
	-2, 0,
	-1, 710,
	127, 906,
	207, 906,
	237, 906,
	-2, 862,
	-1, 718,
	127, 905,
	207, 905,
	237, 905,
	-2, 860,
	-1, 745,
	420, 1764,
	-2, 1185,
	-1, 746,
	420, 1765,
	-2, 1186,
	-1, 775,
	420, 1465,
	-2, 1456,
	-1, 776,
	5, 1041,
	420, 1480,
	-2, 1471,
	-1, 777,
	420, 1481,
	-2, 1472,
	-1, 784,
	5, 1025,
	-2, 1501,
	-1, 785,
	5, 1026,
	-2, 1505,
	-1, 786,
	5, 1027,
	-2, 1504,
	-1, 787,
	5, 1028,
	-2, 1685,
	-1, 788,
	5, 1029,
	-2, 1594,
	-1, 789,
	5, 1030,
	-2, 1653,
	-1, 790,
	5, 1031,
	-2, 1655,
	-1, 791,
	5, 1032,
	-2, 1656,
	-1, 792,
	5, 1033,
	-2, 1657,
	-1, 793,
	5, 1034,
	-2, 1665,
	-1, 794,
	5, 1035,
	-2, 1697,
	-1, 795,
	5, 1036,
	-2, 1563,
	-1, 796,
	5, 1037,
	-2, 1500,
	-1, 797,
	5, 1038,
	-2, 1602,
	-1, 798,
	5, 1039,
	-2, 1603,
	-1, 799,
	5, 1040,
	-2, 1567,
	-1, 800,
	5, 1089,
	420, 1089,
	-2, 1731,
	-1, 820,
	5, 1062,
	-2, 1502,
	-1, 821,
	5, 1080,
	-2, 1529,
	-1, 823,
	5, 1054,
	-2, 1550,
	-1, 824,
	5, 1055,
	-2, 1551,
	-1, 825,
	5, 1046,
	-2, 1566,
	-1, 826,
	5, 1047,
	-2, 1568,
	-1, 827,
	5, 1048,
	-2, 1569,
	-1, 828,
	5, 1049,
	-2, 1570,
	-1, 829,
	5, 1013,
	-2, 1576,
	-1, 830,
	5, 1014,
	-2, 1577,
	-1, 831,
	5, 1077,
	-2, 1675,
	-1, 832,
	5, 1087,
	-2, 1687,
	-1, 833,
	5, 1052,
	-2, 1711,
	-1, 834,
	5, 1079,
	-2, 1712,
	-1, 835,
	5, 1061,
	-2, 1713,
	-1, 836,
	5, 1079,
	-2, 1714,
	-1, 837,
	5, 1079,
	-2, 1715,
	-1, 838,
	5, 1044,
	-2, 1718,
	-1, 839,
	5, 1044,
	-2, 1719,
	-1, 842,
	5, 1069,
	-2, 1723,
	-1, 844,
	5, 1045,
	-2, 1729,
	-1, 845,
	5, 1050,
	-2, 1730,
	-1, 847,
	5, 1044,
	-2, 1735,
	-1, 850,
	5, 1053,
	-2, 1740,
	-1, 851,
	5, 1051,
	-2, 1742,
	-1, 853,
	5, 1081,
	-2, 1744,
	-1, 854,
	5, 1083,
	-2, 1745,
	-1, 855,
	5, 1085,
	-2, 1746,
	-1, 858,
	5, 1076,
	-2, 1750,
	-1, 928,
	420, 1480,
	-2, 1471,
	-1, 945,
	281, 1453,
	413, 1453,
	-2, 1452,
	-1, 1094,
	256, 891,
	-2, 716,
	-1, 1103,
	240, 1475,
	-2, 0,
	-1, 1146,
	1, 288,
	419, 288,
	421, 288,
	423, 288,
	424, 288,
	-2, 865,
	-1, 1149,
	4, 1749,
	10, 1749,
	11, 1749,
	13, 1749,
	14, 1749,
	15, 1749,
	16, 1749,
	17, 1749,
	18, 1749,
	20, 1749,
	21, 1749,
	22, 1749,
	23, 1749,
	25, 1749,
	28, 1749,
	30, 1749,
	32, 1749,
	35, 1749,
	36, 1749,
	37, 1749,
	38, 1749,
	39, 1749,
	40, 1749,
	41, 1749,
	42, 1749,
	43, 1749,
	44, 1749,
	46, 1749,
	47, 1749,
	48, 1749,
	49, 1749,
	50, 1749,
	51, 1749,
	54, 1749,
	55, 1749,
	56, 1749,
	58, 1749,
	59, 1749,
	60, 1749,
	63, 1749,
	64, 1749,
	65, 1749,
	66, 1749,
	67, 1749,
	68, 1749,
	69, 1749,
	70, 1749,
	71, 1749,
	72, 1749,
	74, 1749,
	75, 1749,
	76, 1749,
	77, 1749,
	79, 1749,
	80, 1749,
	81, 1749,
	82, 1749,
	90, 1749,
	91, 1749,
	92, 1749,
	93, 1749,
	94, 1749,
	95, 1749,
	96, 1749,
	97, 1749,
	99, 1749,
	101, 1749,
	103, 1749,
	106, 1749,
	107, 1749,
	109, 1749,
	110, 1749,
	114, 1749,
	115, 1749,
	116, 1749,
	117, 1749,
	118, 1749,
	119, 1749,
	120, 1749,
	121, 1749,
	122, 1749,
	123, 1749,
	124, 1749,
	128, 1749,
	129, 1749,
	130, 1749,
	131, 1749,
	132, 1749,
	133, 1749,
	134, 1749,
	135, 1749,
	136, 1749,
	137, 1749,
	138, 1749,
	140, 1749,
	143, 1749,
	144, 1749,
	146, 1749,
	147, 1749,
	149, 1749,
	151, 1749,
	152, 1749,
	153, 1749,
	154, 1749,
	155, 1749,
	156, 1749,
	157, 1749,
	158, 1749,
	159, 1749,
	160, 1749,
	161, 1749,
	162, 1749,
	163, 1749,
	164, 1749,
	165, 1749,
	166, 1749,
	168, 1749,
	169, 1749,
	170, 1749,
	172, 1749,
	173, 1749,
	174, 1749,
	175, 1749,
	176, 1749,
	177, 1749,
	178, 1749,
	179, 1749,
	180, 1749,
	182, 1749,
	184, 1749,
	185, 1749,
	186, 1749,
	187, 1749,
	188, 1749,
	189, 1749,
	190, 1749,
	191, 1749,
	192, 1749,
	193, 1749,
	194, 1749,
	195, 1749,
	196, 1749,
	197, 1749,
	199, 1749,
	200, 1749,
	202, 1749,
	203, 1749,
	204, 1749,
	205, 1749,
	206, 1749,
	208, 1749,
	209, 1749,
	212, 1749,
	213, 1749,
	214, 1749,
	217, 1749,
	218, 1749,
	219, 1749,
	220, 1749,
	221, 1749,
	222, 1749,
	223, 1749,
	224, 1749,
	225, 1749,
	226, 1749,
	227, 1749,
	230, 1749,
	232, 1749,
	233, 1749,
	234, 1749,
	235, 1749,
	236, 1749,
	238, 1749,
	239, 1749,
	242, 1749,
	243, 1749,
	244, 1749,
	246, 1749,
	247, 1749,
	249, 1749,
	251, 1749,
	252, 1749,
	253, 1749,
	254, 1749,
	255, 1749,
	256, 1749,
	257, 1749,
	258, 1749,
	260, 1749,
	261, 1749,
	262, 1749,
	263, 1749,
	264, 1749,
	266, 1749,
	267, 1749,
	268, 1749,
	269, 1749,
	270, 1749,
	271, 1749,
	272, 1749,
	273, 1749,
	275, 1749,
	276, 1749,
	277, 1749,
	278, 1749,
	279, 1749,
	280, 1749,
	281, 1749,
	282, 1749,
	283, 1749,
	284, 1749,
	285, 1749,
	286, 1749,
	287, 1749,
	289, 1749,
	290, 1749,
	291, 1749,
	292, 1749,
	293, 1749,
	294, 1749,
	295, 1749,
	296, 1749,
	297, 1749,
	298, 1749,
	299, 1749,
	300, 1749,
	301, 1749,
	302, 1749,
	303, 1749,
	304, 1749,
	306, 1749,
	307, 1749,
	308, 1749,
	309, 1749,
	310, 1749,
	311, 1749,
	312, 1749,
	313, 1749,
	314, 1749,
	316, 1749,
	317, 1749,
	318, 1749,
	319, 1749,
	320, 1749,
	321, 1749,
	322, 1749,
	323, 1749,
	324, 1749,
	326, 1749,
	327, 1749,
	328, 1749,
	329, 1749,
	330, 1749,
	331, 1749,
	332, 1749,
	333, 1749,
	334, 1749,
	335, 1749,
	336, 1749,
	337, 1749,
	339, 1749,
	340, 1749,
	342, 1749,
	343, 1749,
	344, 1749,
	345, 1749,
	346, 1749,
	347, 1749,
	348, 1749,
	349, 1749,
	350, 1749,
	351, 1749,
	353, 1749,
	354, 1749,
	355, 1749,
	356, 1749,
	359, 1749,
	360, 1749,
	361, 1749,
	362, 1749,
	364, 1749,
	365, 1749,
	367, 1749,
	368, 1749,
	371, 1749,
	372, 1749,
	373, 1749,
	374, 1749,
	376, 1749,
	378, 1749,
	379, 1749,
	380, 1749,
	381, 1749,
	382, 1749,
	383, 1749,
	386, 1749,
	387, 1749,
	392, 1749,
	393, 1749,
	394, 1749,
	395, 1749,
	396, 1749,
	397, 1749,
	398, 1749,
	399, 1749,
	401, 1749,
	402, 1749,
	403, 1749,
	404, 1749,
	405, 1749,
	406, 1749,
	408, 1749,
	409, 1749,
	410, 1749,
	411, 1749,
	412, 1749,
	413, 1749,
	414, 1749,
	415, 1749,
	416, 1749,
	418, 1749,
	421, 1749,
	422, 1749,
	425, 1749,
	426, 1749,
	-2, 0,
	-1, 1167,
	142, 1660,
	357, 1660,
	403, 1660,
	422, 1660,
	-2, 0,
	-1, 1197,
	142, 1689,
	357, 1689,
	403, 1689,
	422, 1689,
	-2, 0,
	-1, 1198,
	187, 801,
	266, 801,
	270, 801,
	-2, 408,
	-1, 1275,
	127, 905,
	207, 905,
	237, 905,
	-2, 863,
	-1, 1359,
	113, 867,
	127, 867,
	181, 867,
	207, 867,
	237, 867,
	245, 867,
	369, 867,
	-2, 1228,
	-1, 1409,
	421, 1348,
	-2, 0,
	-1, 1417,
	187, 801,
	266, 801,
	270, 801,
	-2, 796,
	-1, 1446,
	421, 1348,
	-2, 0,
	-1, 1454,
	113, 867,
	127, 867,
	181, 867,
	207, 867,
	237, 867,
	245, 867,
	369, 867,
	-2, 972,
	-1, 1655,
	187, 801,
	266, 801,
	270, 801,
	-2, 410,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1124,
	-1, 1764,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1125,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1126,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1127,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1128,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1129,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1130,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1131,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1143,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1144,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1145,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1150,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1152,
	-1, 1795,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1156,
	-1, 1796,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1157,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1158,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1159,
	-1, 1879,
	5, 1041,
	142, 1359,
	420, 1480,
	-2, 1471,
	-1, 1880,
	142, 1360,
	-2, 1707,
	-1, 1881,
	142, 1361,
	-2, 1590,
	-1, 1882,
	142, 1362,
	-2, 1530,
	-1, 1883,
	142, 1363,
	-2, 1558,
	-1, 1884,
	142, 1364,
	-2, 1589,
	-1, 1885,
	142, 1365,
	-2, 1652,
	-1, 1953,
	421, 1348,
	-2, 0,
	-1, 1963,
	1, 973,
	79, 973,
	113, 973,
	127, 973,
	143, 973,
	148, 973,
	150, 973,
	172, 973,
	181, 973,
	190, 973,
	203, 973,
	207, 973,
	223, 973,
	237, 973,
	240, 973,
	245, 973,
	288, 973,
	290, 973,
	369, 973,
	377, 973,
	389, 973,
	390, 973,
	400, 973,
	419, 973,
	421, 973,
	423, 973,
	424, 973,
	425, 973,
	-2, 972,
	-1, 1965,
	420, 1457,
	-2, 1469,
	-1, 2047,
	421, 1418,
	425, 1418,
	-2, 1445,
	-1, 2169,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1151,
	-1, 2170,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1153,
	-1, 2175,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1154,
	-1, 2404,
	256, 891,
	-2, 716,
	-1, 2469,
	187, 801,
	266, 801,
	270, 801,
	-2, 407,
	-1, 2484,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1155,
	-1, 2489,
	185, 0,
	186, 0,
	230, 0,
	-2, 1173,
	-1, 2550,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1203,
	-1, 2551,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1204,
	-1, 2552,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1205,
	-1, 2556,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1209,
	-1, 2557,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1210,
	-1, 2558,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1211,
	-1, 2597,
	420, 1458,
	-2, 1470,
	-1, 2711,
	185, 0,
	186, 0,
	230, 0,
	-2, 1174,
	-1, 2714,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1177,
	-1, 2715,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1179,
	-1, 2860,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1178,
	-1, 2861,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1180,
	-1, 2871,
	185, 0,
	-2, 1212,
	-1, 2960,
	185, 0,
	-2, 1213,
	-1, 3058,
	38, 0,
	160, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1710,
}

const sqlPrivate = 57344

const sqlLast = 59531

var sqlAct = [...]int{

	777, 1824, 3057, 2813, 3066, 2899, 3120, 2646, 3034, 2073,
	3033, 3036, 3020, 3067, 2081, 3068, 2520, 2101, 2888, 2964,
	2828, 2664, 1750, 3056, 1136, 2659, 2851, 774, 773, 1078,
	1522, 2163, 2419, 1810, 1052, 2767, 2782, 719, 1585, 1278,
	949, 209, 2413, 753, 2669, 2203, 494, 2607, 2205, 2411,
	2606, 2875, 2441, 494, 2049, 2443, 2424, 1586, 1132, 964,
	494, 2045, 2070, 494, 2288, 1444, 494, 209, 2270, 494,
	494, 2312, 769, 1947, 1100, 2082, 494, 1425, 2048, 819,
	1168, 2745, 1536, 2030, 494, 1537, 1533, 1977, 2269, 2299,
	2573, 1741, 1558, 489, 1958, 1542, 1457, 1736, 942, 1545,
	958, 2965, 1483, 1417, 1453, 1822, 2329, 1364, 1850, 2159,
	543, 2423, 1968, 540, 564, 28, 1367, 1680, 2387, 1499,
	1462, 1464, 1505, 1534, 1960, 1426, 760, 1832, 1200, 73,
	1916, 727, 130, 1807, 2005, 913, 2031, 578, 1844, 1395,
	1397, 2814, 951, 2046, 1147, 1129, 1119, 2075, 2052, 210,
	211, 1435, 136, 918, 1939, 895, 2004, 1875, 1354, 1279,
	1277, 1823, 205, 606, 626, 1679, 494, 494, 620, 768,
	1924, 1957, 137, 581, 1552, 1116, 1056, 1475, 491, 893,
	1416, 655, 1283, 2190, 537, 2589, 718, 2102, 2590, 2074,
	591, 723, 130, 1560, 1560, 1560, 2032, 1445, 494, 494,
	494, 954, 494, 494, 967, 967, 599, 3147, 3141, 723,
	2482, 1933, 1933, 494, 494, 2459, 3140, 2431, 490, 474,
	1933, 1572, 571, 3117, 3114, 2430, 3092, 2781, 1514, 593,
	2781, 3086, 3085, 40, 3082, 1933, 1933, 3079, 3083, 3076,
	2608, 3080, 3054, 1514, 1059, 474, 1514, 44, 3053, 1508,
	3052, 3051, 1514, 916, 1572, 1572, 1077, 2032, 733, 477,
	3015, 961, 3002, 2995, 2112, 2993, 1514, 2781, 724, 2781,
	910, 2400, 2991, 2962, 2945, 570, 2781, 2112, 2685, 2078,
	2935, 1926, 2576, 711, 2781, 477, 1294, 1295, 743, 28,
	896, 896, 2930, 945, 2928, 2918, 1514, 2917, 2781, 1514,
	1183, 1514, 1933, 710, 572, 2910, 130, 3016, 2909, 1514,
	2948, 1297, 2781, 59, 574, 2881, 1071, 1172, 60, 1514,
	2862, 728, 1572, 2808, 2112, 2804, 1139, 1933, 2780, 1933,
	1514, 2576, 2781, 935, 939, 944, 1296, 2713, 2683, 2675,
	2585, 2112, 2676, 2676, 2586, 2579, 897, 1925, 2498, 1933,
	2493, 63, 1514, 2449, 1933, 2285, 2237, 2392, 1658, 1933,
	1933, 2236, 1058, 1057, 2230, 1933, 2229, 2196, 2231, 2104,
	1933, 1933, 775, 2197, 1294, 1295, 2685, 1327, 1328, 1329,
	1337, 1338, 1339, 2130, 2111, 1173, 2098, 1933, 2112, 2204,
	1933, 474, 1330, 899, 2041, 900, 1294, 1295, 1514, 1297,
	1932, 1576, 1343, 1514, 1933, 1577, 2020, 1966, 2392, 2162,
	2141, 1076, 1513, 1302, 1421, 2242, 2243, 766, 2260, 2261,
	2262, 1297, 1827, 1055, 1296, 2242, 2243, 174, 1561, 1561,
	1561, 477, 1316, 2710, 2432, 1166, 1165, 1164, 1163, 1313,
	1324, 1325, 1326, 1162, 1161, 1950, 1296, 1160, 2242, 2243,
	1159, 1158, 1157, 2433, 64, 1156, 1155, 1154, 1153, 1152,
	1151, 1150, 1847, 901, 898, 2242, 2243, 717, 716, 715,
	714, 1070, 1677, 2257, 713, 709, 708, 707, 171, 706,
	705, 139, 66, 2257, 67, 704, 171, 703, 702, 1317,
	701, 700, 1319, 1320, 1321, 1322, 2967, 699, 1173, 695,
	2430, 1302, 171, 494, 494, 694, 494, 954, 954, 494,
	2475, 693, 494, 573, 173, 494, 110, 653, 652, 651,
	1848, 494, 173, 1302, 1334, 1344, 650, 947, 1324, 1325,
	1326, 494, 494, 494, 494, 494, 954, 954, 173, 1065,
	649, 648, 2248, 954, 647, 646, 922, 645, 644, 1340,
	1341, 643, 2248, 726, 1514, 172, 642, 1311, 1312, 171,
	641, 1140, 2760, 172, 1925, 1365, 1865, 1568, 1559, 1720,
	1332, 640, 165, 1318, 494, 2248, 639, 1317, 638, 172,
	166, 1863, 637, 1173, 1849, 1846, 636, 494, 165, 635,
	2263, 914, 2248, 138, 1342, 173, 166, 634, 1064, 1093,
	1069, 2077, 1075, 633, 1090, 632, 2242, 2243, 1331, 494,
	631, 630, 1105, 615, 614, 613, 612, 138, 2258, 171,
	494, 171, 611, 610, 528, 527, 500, 571, 2258, 499,
	498, 480, 479, 2242, 2243, 1133, 172, 478, 40, 195,
	194, 193, 192, 191, 1323, 165, 190, 189, 188, 965,
	1053, 2258, 44, 166, 187, 173, 1118, 173, 186, 185,
	954, 1318, 184, 183, 182, 181, 2242, 2243, 2258, 180,
	179, 1851, 724, 178, 138, 177, 176, 1956, 1123, 1126,
	570, 175, 2718, 2677, 1335, 1148, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 2594, 2325, 2202, 172, 494, 172, 2192,
	2151, 2042, 2259, 2035, 1176, 165, 1452, 165, 1683, 572,
	1861, 1181, 2259, 166, 1859, 166, 1857, 1461, 59, 574,
	1371, 1214, 1080, 60, 1061, 1198, 3073, 3055, 1290, 3038,
	3027, 2955, 2931, 2248, 138, 2259, 138, 2898, 2849, 2744,
	2743, 2951, 1208, 2737, 2949, 2836, 1212, 2730, 1276, 2729,
	2728, 2724, 2259, 1362, 2723, 2722, 63, 2242, 2243, 1275,
	2248, 2721, 1333, 1845, 2696, 1308, 1309, 1315, 1314, 1310,
	1336, 2694, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	1304, 2593, 2570, 2569, 2568, 2733, 2506, 2117, 1195, 2732,
	2391, 2324, 2395, 2248, 2315, 2281, 2268, 1298, 1299, 1300,
	1301, 1303, 1304, 2241, 2238, 2235, 2254, 2255, 2256, 2258,
	2234, 2232, 2210, 2253, 2251, 2252, 2244, 2245, 2246, 2247,
	2249, 2250, 2209, 2253, 2251, 2252, 2244, 2245, 2246, 2247,
	2249, 2250, 1274, 1094, 1097, 2191, 2258, 1963, 1215, 1290,
	1818, 909, 171, 1582, 1519, 1517, 2253, 2251, 2252, 2244,
	2245, 2246, 2247, 2249, 2250, 1375, 171, 1289, 146, 64,
	1368, 3145, 1357, 39, 2251, 2252, 2244, 2245, 2246, 2247,
	2249, 2250, 3128, 3127, 40, 141, 1678, 2006, 173, 1079,
	711, 724, 2522, 3046, 2248, 2158, 139, 66, 44, 67,
	494, 3041, 173, 2259, 2997, 494, 2988, 2987, 2983, 2982,
	710, 2976, 46, 143, 1286, 1287, 2973, 171, 2947, 2946,
	1432, 1291, 1812, 2894, 45, 2147, 51, 2873, 573, 172,
	2259, 110, 494, 1294, 1295, 2835, 1423, 2823, 165, 2818,
	2816, 2803, 2786, 172, 2742, 2686, 166, 52, 2662, 2653,
	2652, 54, 165, 173, 2650, 58, 2627, 2626, 1297, 144,
	166, 2616, 2615, 2581, 59, 72, 2488, 138, 2455, 60,
	61, 2453, 2376, 2360, 2339, 1819, 2338, 2284, 2219, 2218,
	2215, 138, 1358, 1296, 1393, 2184, 1398, 1396, 2848, 2305,
	1399, 1429, 1430, 62, 172, 1864, 1222, 1403, 1406, 2119,
	1953, 1944, 63, 165, 1931, 1448, 1855, 1528, 1383, 916,
	1862, 166, 1294, 1295, 1382, 1381, 2252, 2244, 2245, 2246,
	2247, 2249, 2250, 1380, 1379, 1446, 1211, 1424, 1415, 896,
	1442, 1451, 138, 1414, 1409, 1408, 1443, 1297, 1407, 1405,
	1404, 1401, 1400, 1391, 2244, 2245, 2246, 2247, 2249, 2250,
	1361, 1390, 1389, 2716, 130, 2339, 1388, 1387, 1386, 724,
	1302, 1385, 1296, 1420, 1384, 954, 494, 1372, 1357, 1194,
	1178, 1418, 967, 1144, 2693, 2588, 1482, 2244, 2245, 2246,
	2247, 2249, 2250, 1455, 1422, 1476, 2584, 1470, 2195, 1945,
	494, 967, 494, 494, 2114, 2242, 2243, 1368, 2451, 1355,
	209, 1458, 2414, 2841, 1677, 64, 2129, 2688, 2687, 1677,
	2591, 2032, 65, 1506, 494, 494, 1677, 1272, 1452, 1664,
	1189, 494, 1412, 494, 1529, 494, 2625, 1377, 1413, 494,
	1410, 75, 139, 66, 2102, 67, 1411, 68, 2876, 1860,
	1541, 145, 1538, 1858, 2924, 1856, 69, 2952, 2008, 1501,
	2950, 2380, 2128, 171, 891, 2375, 1575, 2371, 2359, 1847,
	1386, 1386, 2276, 2275, 83, 2897, 2274, 110, 2273, 2168,
	2246, 2247, 2249, 2250, 1651, 1207, 142, 2461, 494, 954,
	2370, 1495, 209, 494, 494, 2074, 2524, 1833, 892, 173,
	954, 3074, 1394, 209, 494, 1583, 3084, 494, 494, 2200,
	3081, 1549, 2426, 494, 2602, 3030, 1653, 2660, 2105, 536,
	1547, 507, 115, 1580, 1641, 1058, 1057, 1848, 200, 1525,
	3108, 3001, 140, 3107, 1643, 967, 1563, 2471, 2795, 1565,
	172, 1979, 1567, 722, 2131, 494, 1570, 3144, 1251, 165,
	494, 1209, 1512, 3075, 474, 209, 494, 166, 494, 1705,
	494, 1265, 494, 1556, 494, 1219, 1118, 2923, 1250, 887,
	2922, 1591, 1532, 885, 494, 883, 494, 1477, 138, 908,
	881, 4, 2920, 1665, 494, 494, 494, 2812, 474, 2919,
	1374, 1849, 1846, 2640, 477, 2635, 1263, 1210, 2634, 517,
	1673, 878, 2599, 535, 1474, 506, 1551, 1645, 922, 1554,
	2598, 721, 922, 494, 2214, 2213, 2212, 967, 2211, 2171,
	2103, 1655, 2060, 2025, 2019, 1982, 1478, 1479, 477, 2015,
	1996, 2071, 1794, 1419, 1054, 1911, 1910, 1909, 1908, 1723,
	1264, 1752, 1185, 2645, 1082, 2954, 1300, 1301, 1303, 1304,
	2474, 2029, 697, 1447, 1579, 1970, 1195, 914, 1718, 1712,
	1668, 1667, 1676, 1677, 1674, 1642, 2630, 1581, 587, 1717,
	474, 518, 1742, 1749, 3000, 723, 1685, 1652, 1851, 1093,
	2040, 474, 1809, 2901, 1714, 1362, 1719, 1591, 1591, 1809,
	1989, 1458, 967, 2452, 1837, 1970, 1681, 1669, 1816, 604,
	605, 1511, 1217, 1814, 3049, 1988, 1969, 2791, 1690, 1687,
	477, 3099, 1293, 1873, 1555, 1851, 605, 1696, 2160, 2161,
	1246, 477, 1878, 1878, 3012, 2421, 1889, 1891, 1304, 1896,
	1249, 2367, 1186, 474, 2618, 2362, 2134, 1919, 1193, 2422,
	494, 2181, 494, 1472, 1494, 2463, 1923, 2979, 2136, 1981,
	3130, 3013, 196, 1480, 1671, 2472, 711, 1721, 1722, 711,
	711, 2516, 2179, 1560, 2353, 737, 967, 1247, 1392, 2379,
	1845, 2636, 494, 477, 494, 1527, 1732, 1740, 2137, 1733,
	1734, 494, 967, 511, 1497, 2355, 494, 2421, 2062, 1833,
	2135, 2115, 2016, 1472, 494, 2857, 2867, 1352, 2012, 720,
	3070, 3107, 494, 1188, 2926, 1830, 504, 724, 1294, 1295,
	2217, 2250, 1225, 724, 494, 1578, 1940, 954, 1678, 2006,
	2466, 860, 1271, 1678, 2006, 2354, 1874, 1515, 494, 967,
	1678, 2006, 1820, 1297, 494, 494, 916, 2789, 1611, 2470,
	1971, 1465, 201, 1716, 1466, 1262, 1523, 3123, 1851, 494,
	1828, 1961, 494, 1936, 1980, 723, 916, 2176, 1296, 2778,
	2698, 501, 1999, 2689, 1184, 1672, 896, 2351, 2177, 1946,
	520, 519, 2182, 1954, 1955, 510, 494, 1591, 494, 1886,
	494, 3069, 2059, 494, 2775, 494, 2026, 494, 2705, 494,
	494, 1907, 494, 954, 954, 954, 201, 1921, 954, 1983,
	1985, 2350, 2027, 1920, 494, 1998, 724, 945, 2465, 1937,
	1993, 3071, 2013, 529, 1941, 1942, 1704, 202, 2096, 2097,
	1929, 1930, 2462, 1081, 889, 2776, 1467, 888, 1951, 1991,
	1455, 879, 1898, 879, 1974, 1302, 2022, 1997, 880, 1469,
	1218, 3098, 2902, 2619, 2790, 1962, 1282, 2092, 1498, 2014,
	2628, 511, 1826, 2037, 2513, 2039, 1805, 1998, 1233, 879,
	3106, 1817, 1324, 1325, 1326, 494, 2007, 2009, 2010, 2011,
	1434, 202, 1361, 534, 504, 1656, 2740, 1803, 3072, 2120,
	1684, 1187, 507, 1058, 2033, 3131, 2173, 2076, 1471, 2076,
	1967, 698, 2094, 1808, 2464, 3104, 1791, 505, 1561, 1815,
	2178, 1199, 2087, 534, 967, 204, 494, 586, 2180, 2827,
	2099, 1317, 474, 2825, 494, 2107, 494, 1903, 2514, 203,
	503, 3121, 2080, 2068, 1689, 1204, 1975, 1292, 130, 2089,
	1259, 2090, 502, 2091, 1438, 2093, 130, 494, 494, 494,
	1148, 494, 2100, 510, 2145, 2066, 2146, 2106, 533, 2124,
	2116, 2125, 477, 1192, 1465, 2771, 199, 1466, 2772, 204,
	494, 512, 1751, 1441, 1531, 3097, 506, 1678, 1675, 2118,
	1431, 1182, 1799, 203, 1472, 1171, 508, 1226, 533, 497,
	1800, 1436, 3122, 1801, 2858, 2384, 1399, 1806, 1406, 1975,
	1510, 197, 2774, 2388, 1439, 1318, 2153, 1396, 2121, 2853,
	2357, 2777, 2123, 2970, 1205, 1851, 2132, 2741, 1206, 1260,
	199, 1281, 3124, 2912, 1437, 2911, 2085, 2892, 1789, 1792,
	2601, 2794, 3136, 2335, 1227, 200, 2559, 1224, 2793, 922,
	2331, 2301, 2069, 2067, 2187, 198, 2148, 1834, 1438, 1467,
	2150, 1362, 1663, 2017, 1975, 197, 2174, 494, 2512, 922,
	507, 1550, 1469, 1540, 130, 1539, 1535, 1530, 130, 1169,
	1204, 2207, 2208, 2313, 1788, 505, 2000, 1441, 3021, 1709,
	1352, 1281, 536, 1261, 914, 1659, 2155, 2193, 2665, 200,
	2829, 1440, 2157, 1728, 685, 1938, 1204, 531, 503, 198,
	2044, 1280, 2893, 2852, 914, 2341, 1234, 2773, 1439, 1468,
	502, 1471, 536, 1661, 732, 2340, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 1802, 526, 531, 1662, 2095,
	2166, 1282, 532, 1804, 1216, 1686, 685, 1965, 2302, 512,
	1935, 1934, 2043, 721, 506, 1919, 1919, 1919, 521, 1205,
	2283, 1115, 2647, 1206, 508, 2172, 732, 2393, 967, 2314,
	2560, 1280, 532, 2295, 2286, 3135, 535, 2561, 2792, 2293,
	2294, 1104, 724, 1103, 494, 1205, 530, 494, 2300, 1206,
	1113, 730, 686, 685, 1729, 494, 494, 967, 1790, 2199,
	494, 3111, 597, 2815, 2854, 1440, 535, 1472, 494, 494,
	494, 2001, 2002, 732, 494, 2383, 530, 494, 1170, 2890,
	2746, 2574, 1854, 576, 494, 494, 494, 494, 494, 2824,
	2322, 767, 590, 1463, 686, 1703, 3113, 494, 2872, 2389,
	1465, 569, 36, 1466, 494, 2739, 916, 731, 2644, 2271,
	2891, 2487, 2440, 3, 916, 916, 494, 954, 916, 2233,
	494, 568, 35, 2290, 567, 32, 967, 2183, 2332, 2122,
	494, 2297, 2298, 2336, 1269, 2303, 967, 1256, 2304, 2024,
	1995, 686, 1521, 967, 2278, 2279, 2280, 1270, 1591, 1179,
	2308, 2287, 2307, 566, 79, 494, 2310, 494, 1853, 494,
	1254, 954, 494, 954, 954, 954, 877, 494, 2323, 494,
	2272, 2361, 2149, 494, 1502, 761, 565, 78, 494, 1244,
	494, 1242, 687, 2337, 2321, 1467, 2144, 494, 2326, 1240,
	2126, 2343, 1468, 2347, 2348, 1706, 1903, 1903, 1469, 2377,
	1238, 1693, 1114, 494, 494, 1236, 954, 2358, 1470, 1093,
	1230, 2416, 2356, 2428, 2368, 2316, 475, 3065, 2309, 1644,
	2372, 492, 2417, 494, 687, 1111, 2318, 2319, 513, 2142,
	2363, 1112, 1702, 1470, 2446, 539, 2374, 2366, 582, 2457,
	1378, 539, 475, 2373, 582, 602, 2378, 1471, 595, 596,
	2394, 609, 494, 2458, 522, 1093, 2397, 562, 23, 629,
	2402, 481, 1506, 2390, 575, 2364, 2642, 494, 1506, 2365,
	2450, 687, 2398, 2415, 1268, 688, 36, 1255, 588, 589,
	2406, 1509, 2435, 2436, 2437, 1591, 2438, 2439, 933, 1903,
	1903, 1903, 3018, 967, 563, 24, 35, 2764, 2434, 32,
	1253, 523, 2623, 967, 2427, 561, 30, 724, 2621, 2328,
	882, 884, 1472, 689, 1975, 2600, 2410, 688, 494, 1243,
	2408, 1241, 2412, 2490, 2342, 2072, 2345, 2456, 79, 1239,
	560, 21, 2064, 1472, 2063, 2469, 2061, 524, 1504, 525,
	1237, 539, 539, 2058, 1574, 1235, 2467, 2468, 1573, 929,
	1229, 78, 2508, 2509, 2510, 689, 1503, 1591, 1571, 2473,
	2480, 1569, 729, 2476, 688, 1110, 2478, 1566, 2525, 558,
	20, 559, 19, 492, 492, 492, 1564, 959, 492, 1742,
	2528, 130, 1562, 1500, 2571, 1520, 1518, 1507, 475, 1060,
	1496, 1493, 1481, 1434, 1591, 1591, 2494, 1473, 2501, 922,
	1742, 2539, 689, 548, 15, 1478, 1479, 922, 922, 494,
	1089, 922, 2940, 2527, 2500, 1591, 1591, 3108, 2425, 2521,
	2847, 2515, 2517, 2518, 494, 2846, 967, 2425, 2536, 1682,
	549, 16, 23, 905, 2538, 2567, 2942, 2164, 2563, 2534,
	557, 57, 1987, 2369, 914, 556, 56, 482, 483, 1970,
	1591, 2595, 914, 914, 1284, 906, 914, 1438, 1468, 2564,
	1986, 2674, 2633, 1970, 2810, 2028, 2023, 2613, 2612, 24,
	2018, 1994, 2575, 2292, 1984, 2127, 1527, 2981, 2639, 2783,
	30, 1228, 916, 577, 2577, 2578, 1441, 2401, 2580, 2403,
	2404, 2405, 2957, 494, 494, 2572, 494, 547, 55, 2583,
	2643, 494, 2320, 2631, 1436, 21, 2165, 1649, 1650, 967,
	2747, 967, 2003, 1990, 954, 2637, 130, 1439, 2596, 2638,
	2592, 1288, 555, 12, 2641, 2604, 485, 484, 2021, 2654,
	1992, 494, 2448, 3017, 1285, 907, 2821, 1437, 2622, 2678,
	2624, 546, 50, 2079, 20, 2065, 19, 2057, 553, 47,
	554, 48, 598, 2671, 2667, 2666, 2670, 545, 49, 1922,
	494, 1903, 1903, 967, 494, 494, 967, 494, 1654, 1998,
	2629, 2648, 486, 487, 1584, 494, 552, 7, 15, 3119,
	2587, 2386, 2661, 967, 2663, 2656, 2447, 2658, 2386, 2657,
	2697, 2651, 3134, 2649, 2242, 2243, 2680, 551, 6, 2672,
	2702, 2668, 1294, 1295, 1440, 16, 2679, 550, 38, 1294,
	1295, 916, 1365, 2707, 1221, 57, 2692, 544, 37, 1220,
	56, 2519, 2699, 494, 2454, 2703, 2139, 2712, 2290, 2690,
	2691, 2139, 2138, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
	1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
	1903, 1903, 1296, 1903, 2140, 2684, 2708, 1888, 1843, 1258,
	2719, 1591, 1257, 2695, 2700, 2511, 1375, 1373, 2839, 1294,
	1295, 2682, 55, 1267, 1266, 1252, 1248, 1245, 492, 1088,
	1231, 492, 494, 1191, 492, 1657, 890, 959, 696, 2900,
	1108, 3029, 967, 494, 1297, 967, 492, 12, 2980, 494,
	494, 494, 683, 2349, 1692, 2738, 492, 492, 492, 492,
	959, 1232, 2751, 1694, 2306, 1943, 50, 494, 3011, 1296,
	2725, 2216, 494, 47, 494, 48, 2963, 494, 494, 494,
	494, 494, 49, 1975, 2866, 494, 494, 954, 2497, 1852,
	1376, 967, 53, 2613, 2612, 954, 2784, 2788, 2504, 629,
	2752, 7, 2609, 494, 494, 2763, 916, 2798, 2799, 2749,
	2750, 2754, 492, 756, 2765, 2755, 2787, 954, 2603, 2811,
	2051, 2085, 6, 2748, 2822, 922, 2050, 494, 2613, 2612,
	1610, 970, 38, 2819, 1190, 1666, 494, 494, 954, 954,
	2613, 2612, 37, 778, 2753, 629, 1877, 1743, 2758, 780,
	1589, 2817, 2833, 783, 782, 781, 2762, 2831, 2830, 2805,
	2856, 1590, 922, 2826, 2809, 2820, 2840, 1402, 779, 967,
	914, 1587, 1145, 2083, 673, 1670, 1813, 2417, 1731, 1093,
	2797, 2832, 922, 2838, 2806, 1831, 2198, 2802, 1369, 2843,
	2859, 2842, 748, 1829, 922, 1177, 747, 2311, 922, 2878,
	2420, 2834, 1727, 922, 2156, 1724, 2620, 2614, 509, 494,
	2239, 967, 1143, 1904, 2757, 494, 2865, 494, 1897, 967,
	494, 2597, 492, 1893, 1273, 1353, 2084, 2632, 494, 1213,
	2429, 2874, 2113, 1735, 967, 904, 903, 902, 2908, 2632,
	2837, 2887, 3035, 2632, 3032, 2855, 1610, 1610, 2632, 1660,
	2133, 2879, 2880, 1346, 922, 2921, 2905, 752, 2291, 2613,
	2612, 2396, 1086, 1345, 2904, 1591, 2906, 886, 2972, 2885,
	1203, 1202, 1201, 2334, 3129, 2617, 494, 170, 494, 2903,
	167, 954, 169, 168, 2382, 82, 494, 34, 33, 2761,
	109, 1975, 108, 107, 2613, 2612, 2613, 2612, 106, 914,
	105, 2613, 2612, 2914, 1899, 104, 2925, 2882, 967, 103,
	102, 101, 2796, 100, 2883, 99, 2941, 2927, 1591, 2929,
	2801, 2938, 2937, 2886, 2933, 2944, 98, 494, 97, 96,
	2670, 95, 2939, 494, 94, 2943, 93, 92, 91, 2915,
	2916, 494, 2953, 90, 1975, 89, 88, 87, 86, 85,
	84, 625, 622, 81, 2956, 80, 31, 2975, 965, 2969,
	26, 1053, 2961, 113, 114, 2417, 25, 2425, 77, 76,
	494, 494, 2968, 29, 18, 11, 17, 494, 22, 135,
	2884, 134, 133, 132, 2992, 131, 2932, 14, 954, 2994,
	13, 128, 129, 494, 2977, 127, 1591, 954, 954, 922,
	126, 494, 125, 494, 2978, 494, 124, 123, 10, 3014,
	2996, 2999, 8, 2807, 112, 609, 9, 2986, 2989, 2850,
	539, 3005, 3006, 2460, 494, 3007, 3004, 494, 2998, 3024,
	494, 3008, 967, 3009, 70, 1484, 1610, 71, 922, 3039,
	3040, 1450, 3037, 27, 914, 929, 43, 492, 3044, 3043,
	3042, 3045, 1488, 42, 3031, 1975, 41, 3025, 111, 3026,
	161, 160, 3050, 159, 2844, 2845, 158, 494, 154, 157,
	3048, 155, 156, 922, 153, 2613, 2612, 2985, 1903, 122,
	163, 162, 151, 2614, 3064, 922, 3063, 3062, 148, 150,
	2759, 152, 494, 1485, 149, 147, 3088, 164, 3047, 3003,
	494, 3089, 121, 3090, 2966, 120, 119, 118, 3077, 117,
	116, 3096, 5, 2, 3093, 1903, 494, 1, 2614, 3094,
	3095, 0, 3087, 0, 2613, 2612, 0, 0, 0, 0,
	2614, 0, 3105, 3103, 3102, 0, 0, 0, 0, 0,
	3109, 3110, 3037, 3115, 3116, 3112, 0, 3091, 0, 0,
	0, 2242, 2243, 3118, 2260, 2261, 2262, 0, 1489, 0,
	0, 0, 0, 0, 3126, 3125, 0, 1294, 1295, 2709,
	0, 0, 3133, 3132, 0, 0, 0, 0, 0, 3137,
	3138, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	3139, 0, 1297, 3142, 3143, 0, 0, 3146, 0, 0,
	0, 3148, 0, 0, 922, 1060, 0, 492, 1526, 2257,
	2984, 1903, 0, 0, 2863, 475, 0, 1296, 1490, 1491,
	1588, 0, 1294, 1295, 0, 495, 0, 0, 1486, 1546,
	1546, 0, 0, 0, 0, 922, 492, 0, 492, 922,
	492, 922, 0, 571, 539, 0, 922, 1297, 0, 2614,
	0, 0, 0, 0, 40, 1487, 2863, 0, 0, 0,
	0, 0, 0, 0, 1751, 0, 208, 0, 44, 920,
	0, 0, 1296, 0, 0, 0, 0, 0, 2248, 1751,
	2632, 0, 0, 0, 2614, 0, 2614, 0, 0, 0,
	0, 2614, 208, 629, 1302, 0, 570, 475, 1060, 582,
	0, 0, 0, 1899, 1899, 1433, 0, 0, 475, 1060,
	0, 0, 959, 492, 0, 488, 0, 0, 629, 0,
	0, 1324, 1325, 1326, 0, 572, 2263, 0, 0, 0,
	0, 1492, 0, 0, 59, 574, 1588, 1588, 0, 60,
	2085, 0, 0, 0, 0, 0, 0, 922, 0, 1302,
	629, 0, 0, 1053, 2258, 492, 0, 0, 0, 0,
	475, 492, 0, 492, 0, 492, 0, 492, 0, 492,
	1317, 0, 63, 0, 0, 0, 1324, 1325, 1326, 1707,
	0, 1708, 0, 0, 0, 0, 0, 0, 0, 492,
	492, 492, 2632, 0, 0, 0, 1899, 1899, 1899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	922, 0, 0, 0, 0, 1317, 955, 0, 0, 968,
	968, 0, 0, 0, 0, 0, 0, 0, 2259, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2614, 2778, 937, 0, 922,
	2185, 2186, 963, 0, 0, 64, 0, 1751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2775, 0, 0, 2768, 0, 0, 0, 0, 0,
	0, 0, 139, 66, 0, 67, 0, 2766, 0, 1318,
	0, 0, 2770, 0, 2614, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 1588, 1610, 0, 0,
	0, 0, 2776, 0, 573, 0, 0, 110, 0, 0,
	0, 0, 2254, 2255, 2256, 609, 0, 539, 0, 2253,
	2251, 2252, 2244, 2245, 2246, 2247, 2249, 2250, 0, 173,
	2769, 0, 929, 2265, 2266, 2267, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 0, 0, 0, 539, 0, 539,
	0, 0, 929, 0, 0, 0, 492, 0, 0, 0,
	2108, 1978, 0, 0, 0, 0, 0, 0, 0, 492,
	172, 40, 0, 0, 0, 0, 0, 492, 0, 165,
	0, 0, 0, 0, 0, 44, 0, 166, 0, 492,
	0, 0, 0, 1298, 1299, 1300, 1301, 1303, 1304, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 138, 475,
	2034, 0, 0, 2109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2047, 0, 0, 1060, 0, 0,
	0, 0, 2771, 0, 1610, 2772, 0, 0, 1899, 1899,
	0, 0, 2110, 0, 0, 0, 0, 0, 0, 0,
	0, 1978, 574, 539, 0, 492, 0, 0, 492, 0,
	492, 0, 492, 0, 492, 492, 0, 959, 0, 2774,
	0, 0, 0, 0, 0, 0, 0, 0, 2777, 1978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 955, 0, 0, 1610, 0, 0, 859,
	1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899,
	1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 0,
	1899, 955, 955, 0, 0, 0, 0, 0, 955, 0,
	582, 0, 1084, 1610, 1610, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	1066, 0, 1072, 0, 1610, 1610, 0, 0, 0, 0,
	1122, 1122, 1122, 963, 2773, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 1060, 64, 0, 0, 0, 0, 0, 0, 1610,
	0, 0, 0, 0, 0, 2485, 2486, 0, 0, 0,
	0, 0, 492, 492, 492, 0, 492, 0, 0, 139,
	66, 0, 67, 0, 0, 0, 1174, 0, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 0, 0, 110, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 1175, 0, 0, 0, 0, 0,
	0, 1180, 0, 0, 0, 0, 173, 2540, 2541, 2542,
	2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552,
	2553, 2554, 2555, 2556, 2557, 2558, 0, 2562, 0, 0,
	735, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	956, 0, 0, 969, 969, 0, 0, 172, 0, 0,
	0, 0, 1060, 0, 0, 0, 165, 2242, 2243, 0,
	2260, 2261, 2262, 0, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 1365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 2257, 0, 1588, 0, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	1610, 0, 0, 0, 1347, 1348, 1349, 1350, 1351, 0,
	0, 0, 929, 0, 0, 0, 0, 1360, 0, 0,
	929, 929, 570, 0, 929, 1370, 0, 0, 0, 539,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	539, 539, 0, 0, 2248, 539, 0, 0, 0, 0,
	0, 572, 0, 492, 1978, 2330, 0, 0, 0, 1978,
	59, 574, 2330, 0, 0, 60, 0, 0, 0, 1978,
	2330, 1978, 2330, 2330, 0, 0, 0, 0, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 1526,
	0, 0, 2263, 0, 0, 0, 0, 0, 63, 0,
	0, 492, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 1588, 492, 0, 0, 0, 0,
	2258, 2242, 2243, 0, 2260, 2261, 2262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2491,
	1546, 0, 1546, 0, 492, 0, 0, 492, 0, 0,
	0, 1459, 492, 0, 492, 0, 0, 0, 959, 0,
	0, 0, 0, 1978, 0, 539, 0, 0, 1427, 1427,
	1427, 0, 1978, 0, 0, 0, 0, 0, 0, 2257,
	0, 0, 0, 0, 0, 0, 1588, 0, 2444, 1060,
	0, 0, 0, 0, 0, 1899, 0, 0, 0, 0,
	0, 64, 0, 0, 2259, 0, 956, 956, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1588, 1588, 0, 0, 0, 139, 66,
	0, 67, 1899, 0, 0, 956, 956, 2477, 0, 0,
	955, 0, 956, 0, 1588, 1588, 0, 968, 2248, 171,
	0, 0, 492, 0, 1610, 0, 0, 0, 0, 0,
	573, 0, 0, 110, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 1588,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2263, 0, 0, 0,
	0, 0, 0, 2523, 0, 0, 0, 1610, 2254, 2255,
	2256, 1524, 0, 0, 0, 2253, 2251, 2252, 2244, 2245,
	2246, 2247, 2249, 2250, 2258, 0, 172, 0, 1899, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 0, 1553, 166, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 0, 0, 208, 0, 956,
	0, 0, 2871, 0, 138, 955, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1610, 0, 0, 929, 0,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 2895,
	968, 0, 0, 0, 0, 0, 0, 0, 2259, 539,
	0, 0, 0, 0, 0, 0, 0, 1647, 0, 0,
	208, 0, 0, 0, 0, 2611, 0, 0, 0, 0,
	0, 2242, 2243, 0, 2260, 2261, 2262, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 1691,
	0, 1450, 0, 0, 0, 1697, 1450, 1698, 0, 1699,
	0, 1700, 0, 1701, 0, 735, 735, 0, 1978, 1546,
	0, 1546, 968, 0, 0, 0, 492, 0, 0, 2257,
	1588, 0, 0, 1710, 1102, 2960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2254, 2255, 2256, 0, 1978, 929, 0, 2253,
	2251, 2252, 2244, 2245, 2246, 2247, 2249, 2250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 1725, 0, 1730, 959,
	492, 0, 492, 0, 1737, 0, 0, 968, 2248, 0,
	492, 0, 0, 0, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 0,
	1793, 0, 1795, 1796, 1797, 1798, 2263, 0, 2726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1821, 0, 0, 0, 0, 0, 0, 0, 1360,
	0, 968, 0, 0, 2258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 0, 0, 0,
	0, 0, 929, 0, 757, 74, 0, 1060, 0, 0,
	0, 0, 0, 1895, 0, 1906, 0, 0, 539, 0,
	1912, 1917, 955, 0, 1978, 2330, 1978, 0, 0, 0,
	1964, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 2611, 1060, 0, 0, 0, 0, 1978, 0, 2330,
	0, 0, 1060, 1060, 492, 1978, 2330, 0, 2259, 0,
	492, 492, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2611, 963, 1060, 2047,
	0, 0, 0, 0, 1588, 0, 0, 0, 2611, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 955, 955,
	955, 969, 1978, 955, 0, 0, 0, 0, 0, 0,
	0, 2444, 2444, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 2036, 0, 2038, 0, 0, 0, 2088,
	0, 0, 1122, 0, 1122, 712, 1122, 1588, 963, 963,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2254, 2255, 2256, 0, 0, 0, 0, 2253,
	2251, 2252, 2244, 2245, 2246, 2247, 2249, 2250, 917, 74,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	1978, 0, 2330, 0, 0, 2889, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 2611, 956, 968,
	0, 0, 0, 0, 0, 1588, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 2611, 0, 2611, 0, 0, 0, 0, 2611,
	0, 492, 0, 492, 969, 2143, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 0, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 2152, 963, 2154, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 1343, 0,
	0, 0, 2523, 0, 0, 0, 0, 0, 539, 2167,
	0, 0, 0, 0, 0, 0, 2889, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 1978, 2330, 0, 0, 0,
	1450, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 2330, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 1060, 0,
	492, 0, 0, 0, 0, 0, 0, 571, 1319, 1320,
	1321, 1322, 0, 0, 2169, 2170, 0, 1302, 40, 3022,
	2175, 0, 1060, 0, 0, 492, 0, 0, 0, 0,
	0, 969, 44, 0, 0, 0, 0, 0, 0, 2188,
	1334, 1344, 0, 2611, 1324, 1325, 1326, 0, 0, 0,
	0, 0, 0, 2194, 0, 0, 0, 0, 0, 2201,
	570, 0, 2523, 0, 2206, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 2220, 0, 0, 0, 0, 1332, 1060, 0, 572,
	0, 0, 2611, 1317, 0, 1978, 0, 0, 59, 574,
	0, 0, 968, 60, 0, 969, 0, 0, 74, 0,
	74, 2889, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 1917,
	1917, 1917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 956, 2327, 0, 2296,
	1323, 0, 955, 0, 0, 0, 0, 725, 969, 0,
	0, 968, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 968, 0, 0, 0, 0, 1102, 0, 968, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 955, 0, 955, 955,
	955, 0, 0, 0, 74, 2352, 0, 0, 0, 2381,
	1297, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 956, 956, 0, 0, 956, 0, 64,
	0, 0, 0, 0, 0, 1296, 0, 0, 2399, 0,
	0, 955, 0, 1316, 0, 0, 2407, 0, 2409, 0,
	0, 0, 0, 0, 0, 0, 139, 66, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 1336, 171, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 573, 0,
	2418, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 1320, 1321, 1322, 0, 0, 0,
	0, 0, 1302, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 968, 1324,
	1325, 1326, 712, 0, 735, 735, 2481, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 735, 0, 0,
	0, 0, 0, 165, 1356, 0, 1359, 0, 0, 0,
	0, 166, 0, 1366, 2479, 0, 0, 0, 1737, 0,
	0, 0, 0, 0, 2483, 0, 0, 2484, 1317, 0,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 2489,
	0, 0, 0, 0, 0, 0, 2495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2502, 0, 0, 0,
	2296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2529,
	2530, 0, 2531, 2532, 2533, 0, 0, 0, 0, 2535,
	0, 0, 0, 0, 0, 1323, 2537, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 2565, 2566, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2582, 0, 0,
	0, 0, 0, 0, 0, 1296, 0, 74, 0, 0,
	1449, 0, 0, 1316, 1454, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 968, 0, 968, 0, 0, 955,
	0, 0, 0, 0, 2605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	2655, 0, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 0, 1319, 1320, 1321, 1322, 0, 968, 0,
	0, 968, 1302, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 2242,
	2243, 0, 2260, 2261, 2262, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 2701, 0, 963, 0, 2681, 0,
	1340, 1341, 0, 0, 2704, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 1332, 0, 0, 0, 969, 0, 2257, 1317, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 0, 2711, 0, 0, 0, 2714, 2715, 1331,
	956, 0, 956, 956, 956, 0, 0, 0, 0, 2717,
	0, 0, 0, 2720, 0, 0, 0, 968, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2727, 0, 0, 0, 0, 1323, 2248, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	2264, 0, 955, 0, 0, 0, 968, 0, 0, 0,
	955, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 2263, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 2800, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 2258, 955, 955, 0, 2785, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 968, 0, 2242, 2243, 0, 2260,
	2261, 2262, 0, 1333, 0, 0, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 0, 0, 0, 0, 2225, 0, 0, 0,
	2226, 0, 0, 0, 0, 0, 968, 0, 712, 0,
	0, 712, 712, 0, 968, 0, 2259, 0, 0, 0,
	0, 0, 0, 0, 2257, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 2860, 2861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2869, 2870, 0,
	0, 0, 0, 0, 0, 0, 0, 2896, 0, 1811,
	0, 0, 2877, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 725, 0, 0, 969, 0, 0, 1359, 0,
	0, 0, 0, 2248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2934, 0, 2936, 0, 2913,
	2254, 2255, 2256, 0, 0, 0, 0, 2253, 2251, 2252,
	2244, 2245, 2246, 2247, 2249, 2250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 969, 2258,
	969, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 955, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2990, 0, 0, 0,
	2971, 0, 969, 2974, 0, 969, 74, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 74, 3010, 74, 0, 0, 0, 0,
	0, 0, 0, 2259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3028,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 1330, 0, 0, 0, 74,
	0, 0, 1297, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 3061, 3061,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 969, 1313, 0, 969, 0, 3078, 2254, 2255, 2256,
	0, 0, 0, 0, 2253, 2251, 2252, 2244, 2245, 2246,
	2247, 2249, 2250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	969, 0, 0, 0, 956, 1319, 1320, 1321, 1322, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 74, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 3061, 0, 956, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1811, 0, 0,
	969, 1331, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 1359, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 917,
	917, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 0, 0, 0, 956, 0, 0,
	0, 0, 2731, 0, 0, 0, 956, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 776, 764, 765, 762, 763, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 812,
	758, 0, 0, 0, 263, 264, 265, 215, 833, 796,
	834, 784, 820, 835, 0, 269, 786, 785, 272, 273,
	274, 759, 811, 836, 837, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 74, 286, 287, 0, 861, 288,
	289, 290, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 821, 295, 838, 839, 0, 296, 0,
	297, 0, 298, 0, 0, 822, 300, 0, 301, 302,
	0, 0, 0, 749, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 771, 862, 0, 0, 0, 0,
	0, 313, 314, 842, 823, 824, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 865,
	0, 815, 795, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 844, 799, 825, 826, 827, 828, 845,
	0, 800, 0, 337, 866, 867, 338, 339, 340, 868,
	829, 830, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 74,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	788, 357, 871, 360, 361, 363, 362, 917, 0, 872,
	772, 816, 364, 847, 365, 366, 0, 797, 798, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	850, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 750, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 789, 790, 791,
	792, 419, 425, 426, 809, 427, 408, 409, 428, 876,
	429, 851, 793, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 831, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 787,
	451, 0, 853, 854, 855, 832, 917, 0, 453, 454,
	856, 857, 770, 455, 456, 74, 457, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 794, 465, 466,
	467, 254, 858, 0, 0, 468, 256, 654, 0, 685,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 1902, 0, 0, 0, 661,
	1900, 1901, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 659, 0, 0, 0, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 0, 0, 0, 0, 662, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 668, 669,
	0, 0, 0, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 684, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 687, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 682, 0, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 675,
	688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 678, 0, 0, 676, 0, 0,
	0, 691, 692, 0, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 679, 74, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 1811, 258, 259, 260,
	261, 971, 262, 972, 973, 974, 975, 214, 976, 977,
	978, 979, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 980, 269, 270, 271, 272, 273, 274, 981,
	982, 219, 220, 221, 983, 275, 222, 984, 930, 985,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	986, 285, 0, 286, 287, 987, 861, 288, 289, 290,
	988, 989, 991, 990, 992, 993, 994, 291, 292, 496,
	293, 294, 295, 223, 224, 995, 296, 996, 297, 997,
	298, 998, 999, 299, 300, 1000, 301, 302, 1001, 0,
	1002, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1003, 862, 1004, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1005, 318, 1006, 1007,
	863, 319, 1008, 320, 229, 1009, 230, 1010, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 865, 1011, 237,
	328, 0, 0, 0, 1012, 327, 329, 336, 1013, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 1014, 236,
	1015, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 1016, 347, 346, 1017, 238,
	869, 348, 349, 870, 1018, 350, 351, 1019, 1020, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 1021, 1022, 872, 1023, 239,
	364, 240, 365, 366, 1024, 367, 368, 1025, 1026, 369,
	370, 1027, 1028, 371, 241, 873, 372, 874, 242, 373,
	374, 375, 376, 377, 378, 379, 1029, 380, 243, 381,
	244, 382, 1030, 383, 384, 385, 386, 387, 245, 388,
	389, 1031, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 1032, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 1033, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 1034, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 1035, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 1036, 442, 443, 1037, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 1038,
	249, 250, 251, 452, 1039, 1040, 453, 454, 252, 253,
	1041, 455, 456, 0, 457, 458, 1042, 1043, 459, 460,
	461, 463, 1044, 464, 1045, 462, 465, 466, 467, 254,
	255, 1046, 1047, 468, 256, 1048, 1049, 1050, 1051, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 1948, 0, 0, 0, 0,
	0, 0, 0, 0, 1949, 258, 259, 260, 261, 971,
	262, 972, 973, 974, 975, 214, 976, 977, 978, 979,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	980, 269, 270, 271, 272, 273, 274, 981, 982, 219,
	220, 221, 983, 275, 222, 984, 930, 985, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 986, 285,
	0, 286, 287, 987, 861, 288, 289, 290, 988, 989,
	991, 990, 992, 993, 994, 291, 292, 496, 293, 294,
	295, 223, 224, 995, 296, 996, 297, 997, 298, 998,
	999, 299, 300, 1000, 301, 302, 1001, 0, 1002, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1003, 862, 1004, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1005, 318, 1006, 1007, 863, 319,
	1008, 320, 229, 1009, 230, 1010, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 865, 1011, 237, 328, 0,
	0, 0, 1012, 327, 329, 336, 1013, 864, 330, 234,
	332, 331, 333, 334, 335, 235, 1014, 236, 1015, 337,
	866, 867, 338, 339, 340, 868, 341, 342, 0, 0,
	343, 344, 345, 1016, 347, 346, 1017, 238, 869, 348,
	349, 870, 1018, 350, 351, 1019, 1020, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 359, 357, 871, 360,
	361, 363, 362, 1021, 1022, 872, 1023, 239, 364, 240,
	365, 366, 1024, 367, 368, 1025, 1026, 369, 370, 1027,
	1028, 371, 241, 873, 372, 874, 242, 373, 374, 375,
	376, 377, 378, 379, 1029, 380, 243, 381, 244, 382,
	1030, 383, 384, 385, 386, 387, 245, 388, 389, 1031,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 1032, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	1033, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	1034, 427, 408, 409, 428, 876, 429, 247, 430, 431,
	1035, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 1036, 442, 443, 1037, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 1038, 249, 250,
	251, 452, 1039, 1040, 453, 454, 252, 253, 1041, 455,
	456, 0, 457, 458, 1042, 1043, 459, 460, 461, 463,
	1044, 464, 1045, 462, 465, 466, 467, 254, 255, 1046,
	1047, 468, 256, 1048, 1049, 1050, 1051, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2756, 258, 259, 260, 261, 971, 262,
	972, 973, 974, 975, 214, 976, 977, 978, 979, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 980,
	269, 270, 271, 272, 273, 274, 981, 982, 219, 220,
	221, 983, 275, 222, 984, 930, 985, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 986, 285, 0,
	286, 287, 987, 861, 288, 289, 290, 988, 989, 991,
	990, 992, 993, 994, 291, 292, 496, 293, 294, 295,
	223, 224, 995, 296, 996, 297, 997, 298, 998, 999,
	299, 300, 1000, 301, 302, 1001, 0, 1002, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 1003,
	862, 1004, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 1005, 318, 1006, 1007, 863, 319, 1008,
	320, 229, 1009, 230, 1010, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 865, 1011, 237, 328, 0, 0,
	0, 1012, 327, 329, 336, 1013, 864, 330, 234, 332,
	331, 333, 334, 335, 235, 1014, 236, 1015, 337, 866,
	867, 338, 339, 340, 868, 341, 342, 0, 0, 343,
	344, 345, 1016, 347, 346, 1017, 238, 869, 348, 349,
	870, 1018, 350, 351, 1019, 1020, 352, 0, 353, 932,
	931, 354, 355, 356, 358, 359, 357, 871, 360, 361,
	363, 362, 1021, 1022, 872, 1023, 239, 364, 240, 365,
	366, 1024, 367, 368, 1025, 1026, 369, 370, 1027, 1028,
	371, 241, 873, 372, 874, 242, 373, 374, 375, 376,
	377, 378, 379, 1029, 380, 243, 381, 244, 382, 1030,
	383, 384, 385, 386, 387, 245, 388, 389, 1031, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 1032, 402, 875, 403, 404, 405, 406, 246,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 1033,
	423, 424, 418, 420, 421, 422, 419, 425, 426, 1034,
	427, 408, 409, 428, 876, 429, 247, 430, 431, 1035,
	441, 432, 433, 434, 410, 435, 439, 440, 436, 437,
	438, 248, 1036, 442, 443, 1037, 444, 445, 446, 447,
	448, 308, 449, 309, 450, 451, 1038, 249, 250, 251,
	452, 1039, 1040, 453, 454, 252, 253, 1041, 455, 456,
	0, 457, 458, 1042, 1043, 459, 460, 461, 463, 1044,
	464, 1045, 462, 465, 466, 467, 254, 255, 1046, 1047,
	468, 256, 1048, 1049, 1050, 1051, 469, 470, 257, 471,
	472, 473, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2864, 258, 259,
	260, 261, 971, 262, 972, 973, 974, 975, 214, 976,
	977, 978, 979, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 980, 269, 270, 271, 272, 273, 274,
	981, 982, 219, 220, 221, 983, 275, 222, 984, 930,
	985, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 986, 285, 0, 286, 287, 987, 861, 288, 289,
	290, 988, 989, 991, 990, 992, 993, 994, 291, 292,
	496, 293, 294, 295, 223, 224, 995, 296, 996, 297,
	997, 298, 998, 999, 299, 300, 1000, 301, 302, 1001,
	0, 1002, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 1003, 862, 1004, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 1005, 318, 1006,
	1007, 863, 319, 1008, 320, 229, 1009, 230, 1010, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 865, 1011,
	237, 328, 0, 0, 0, 1012, 327, 329, 336, 1013,
	864, 330, 234, 332, 331, 333, 334, 335, 235, 1014,
	236, 1015, 337, 866, 867, 338, 339, 340, 868, 341,
	342, 0, 0, 343, 344, 345, 1016, 347, 346, 1017,
	238, 869, 348, 349, 870, 1018, 350, 351, 1019, 1020,
	352, 0, 353, 932, 931, 354, 355, 356, 358, 359,
	357, 871, 360, 361, 363, 362, 1021, 1022, 872, 1023,
	239, 364, 240, 365, 366, 1024, 367, 368, 1025, 1026,
	369, 370, 1027, 1028, 371, 241, 873, 372, 874, 242,
	373, 374, 375, 376, 377, 378, 379, 1029, 380, 243,
	381, 244, 382, 1030, 383, 384, 385, 386, 387, 245,
	388, 389, 1031, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 1032, 402, 875, 403,
	404, 405, 406, 246, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 1033, 423, 424, 418, 420, 421, 422,
	419, 425, 426, 1034, 427, 408, 409, 428, 876, 429,
	247, 430, 431, 1035, 441, 432, 433, 434, 410, 435,
	439, 440, 436, 437, 438, 248, 1036, 442, 443, 1037,
	444, 445, 446, 447, 448, 308, 449, 309, 450, 451,
	1038, 249, 250, 251, 452, 1039, 1040, 453, 454, 252,
	253, 1041, 455, 456, 0, 457, 458, 1042, 1043, 459,
	460, 461, 463, 1044, 464, 1045, 462, 465, 466, 467,
	254, 255, 1046, 1047, 468, 256, 1048, 1049, 1050, 1051,
	469, 470, 257, 471, 472, 473, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2505, 258, 259, 260, 261, 971, 262, 972, 973,
	974, 975, 214, 976, 977, 978, 979, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 980, 269, 270,
	271, 272, 273, 274, 981, 982, 219, 220, 221, 983,
	275, 222, 984, 930, 985, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 986, 285, 0, 286, 287,
	987, 861, 288, 289, 290, 988, 989, 991, 990, 992,
	993, 994, 291, 292, 496, 293, 294, 295, 223, 224,
	995, 296, 996, 297, 997, 298, 998, 999, 299, 300,
	1000, 301, 302, 1001, 0, 1002, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 1003, 862, 1004,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 1005, 318, 1006, 1007, 863, 319, 1008, 320, 229,
	1009, 230, 1010, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 865, 1011, 237, 328, 0, 0, 0, 1012,
	327, 329, 336, 1013, 864, 330, 234, 332, 331, 333,
	334, 335, 235, 1014, 236, 1015, 337, 866, 867, 338,
	339, 340, 868, 341, 342, 0, 0, 343, 344, 345,
	1016, 347, 346, 1017, 238, 869, 348, 349, 870, 1018,
	350, 351, 1019, 1020, 352, 0, 353, 932, 931, 354,
	355, 356, 358, 359, 357, 871, 360, 361, 363, 362,
	1021, 1022, 872, 1023, 239, 364, 240, 365, 366, 1024,
	367, 368, 1025, 1026, 369, 370, 1027, 1028, 371, 241,
	873, 372, 874, 242, 373, 374, 375, 376, 377, 378,
	379, 1029, 380, 243, 381, 244, 382, 1030, 383, 384,
	385, 386, 387, 245, 388, 389, 1031, 390, 391, 392,
	393, 394, 0, 396, 397, 395, 398, 399, 400, 401,
	1032, 402, 875, 403, 404, 405, 406, 246, 407, 0,
	411, 412, 413, 414, 415, 416, 417, 1033, 423, 424,
	418, 420, 421, 422, 419, 425, 426, 1034, 427, 408,
	409, 428, 876, 429, 247, 430, 431, 1035, 441, 432,
	433, 434, 410, 435, 439, 440, 436, 437, 438, 248,
	1036, 442, 443, 1037, 444, 445, 446, 447, 448, 308,
	449, 309, 450, 451, 1038, 249, 250, 251, 452, 1039,
	1040, 453, 454, 252, 253, 1041, 455, 456, 0, 457,
	458, 1042, 1043, 459, 460, 461, 463, 1044, 464, 1045,
	462, 465, 466, 467, 254, 255, 1046, 1047, 468, 256,
	1048, 1049, 1050, 1051, 469, 470, 257, 471, 472, 473,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2496, 258, 259, 260, 261,
	971, 262, 972, 973, 974, 975, 214, 976, 977, 978,
	979, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 980, 269, 270, 271, 272, 273, 274, 981, 982,
	219, 220, 221, 983, 275, 222, 984, 930, 985, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 986,
	285, 0, 286, 287, 987, 861, 288, 289, 290, 988,
	989, 991, 990, 992, 993, 994, 291, 292, 496, 293,
	294, 295, 223, 224, 995, 296, 996, 297, 997, 298,
	998, 999, 299, 300, 1000, 301, 302, 1001, 0, 1002,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1003, 862, 1004, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1005, 318, 1006, 1007, 863,
	319, 1008, 320, 229, 1009, 230, 1010, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 865, 1011, 237, 328,
	0, 0, 0, 1012, 327, 329, 336, 1013, 864, 330,
	234, 332, 331, 333, 334, 335, 235, 1014, 236, 1015,
	337, 866, 867, 338, 339, 340, 868, 341, 342, 0,
	0, 343, 344, 345, 1016, 347, 346, 1017, 238, 869,
	348, 349, 870, 1018, 350, 351, 1019, 1020, 352, 0,
	353, 932, 931, 354, 355, 356, 358, 359, 357, 871,
	360, 361, 363, 362, 1021, 1022, 872, 1023, 239, 364,
	240, 365, 366, 1024, 367, 368, 1025, 1026, 369, 370,
	1027, 1028, 371, 241, 873, 372, 874, 242, 373, 374,
	375, 376, 377, 378, 379, 1029, 380, 243, 381, 244,
	382, 1030, 383, 384, 385, 386, 387, 245, 388, 389,
	1031, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 1032, 402, 875, 403, 404, 405,
	406, 246, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 1033, 423, 424, 418, 420, 421, 422, 419, 425,
	426, 1034, 427, 408, 409, 428, 876, 429, 247, 430,
	431, 1035, 441, 432, 433, 434, 410, 435, 439, 440,
	436, 437, 438, 248, 1036, 442, 443, 1037, 444, 445,
	446, 447, 448, 308, 449, 309, 450, 451, 1038, 249,
	250, 251, 452, 1039, 1040, 453, 454, 252, 253, 1041,
	455, 456, 0, 457, 458, 1042, 1043, 459, 460, 461,
	463, 1044, 464, 1045, 462, 465, 466, 467, 254, 255,
	1046, 1047, 468, 256, 1048, 1049, 1050, 1051, 469, 470,
	257, 471, 472, 473, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2385,
	258, 259, 260, 261, 971, 262, 972, 973, 974, 975,
	214, 976, 977, 978, 979, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 980, 269, 270, 271, 272,
	273, 274, 981, 982, 219, 220, 221, 983, 275, 222,
	984, 930, 985, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 986, 285, 0, 286, 287, 987, 861,
	288, 289, 290, 988, 989, 991, 990, 992, 993, 994,
	291, 292, 496, 293, 294, 295, 223, 224, 995, 296,
	996, 297, 997, 298, 998, 999, 299, 300, 1000, 301,
	302, 1001, 0, 1002, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1003, 862, 1004, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1005,
	318, 1006, 1007, 863, 319, 1008, 320, 229, 1009, 230,
	1010, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	865, 1011, 237, 328, 0, 0, 0, 1012, 327, 329,
	336, 1013, 864, 330, 234, 332, 331, 333, 334, 335,
	235, 1014, 236, 1015, 337, 866, 867, 338, 339, 340,
	868, 341, 342, 0, 0, 343, 344, 345, 1016, 347,
	346, 1017, 238, 869, 348, 349, 870, 1018, 350, 351,
	1019, 1020, 352, 0, 353, 932, 931, 354, 355, 356,
	358, 359, 357, 871, 360, 361, 363, 362, 1021, 1022,
	872, 1023, 239, 364, 240, 365, 366, 1024, 367, 368,
	1025, 1026, 369, 370, 1027, 1028, 371, 241, 873, 372,
	874, 242, 373, 374, 375, 376, 377, 378, 379, 1029,
	380, 243, 381, 244, 382, 1030, 383, 384, 385, 386,
	387, 245, 388, 389, 1031, 390, 391, 392, 393, 394,
	0, 396, 397, 395, 398, 399, 400, 401, 1032, 402,
	875, 403, 404, 405, 406, 246, 407, 0, 411, 412,
	413, 414, 415, 416, 417, 1033, 423, 424, 418, 420,
	421, 422, 419, 425, 426, 1034, 427, 408, 409, 428,
	876, 429, 247, 430, 431, 1035, 441, 432, 433, 434,
	410, 435, 439, 440, 436, 437, 438, 248, 1036, 442,
	443, 1037, 444, 445, 446, 447, 448, 308, 449, 309,
	450, 451, 1038, 249, 250, 251, 452, 1039, 1040, 453,
	454, 252, 253, 1041, 455, 456, 0, 457, 458, 1042,
	1043, 459, 460, 461, 463, 1044, 464, 1045, 462, 465,
	466, 467, 254, 255, 1046, 1047, 468, 256, 1048, 1049,
	1050, 1051, 469, 470, 257, 471, 472, 473, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1835, 258, 259, 260, 261, 971, 262,
	972, 973, 974, 975, 214, 976, 977, 978, 979, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 980,
	269, 270, 271, 272, 273, 274, 981, 982, 219, 220,
	221, 983, 275, 222, 984, 930, 985, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 986, 285, 0,
	286, 287, 987, 861, 288, 289, 290, 988, 989, 991,
	990, 992, 993, 994, 291, 292, 496, 293, 294, 295,
	223, 224, 995, 296, 996, 297, 997, 298, 998, 999,
	299, 300, 1000, 301, 302, 1001, 0, 1002, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 1003,
	862, 1004, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 1005, 318, 1006, 1007, 863, 319, 1008,
	320, 229, 1009, 230, 1010, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 865, 1011, 237, 328, 0, 0,
	0, 1012, 327, 329, 336, 1013, 864, 330, 234, 332,
	331, 333, 334, 335, 235, 1014, 236, 1015, 337, 866,
	867, 338, 339, 340, 868, 341, 342, 0, 0, 343,
	344, 345, 1016, 347, 346, 1017, 238, 869, 348, 349,
	870, 1018, 350, 351, 1019, 1020, 352, 0, 353, 932,
	931, 354, 355, 356, 358, 359, 357, 871, 360, 361,
	363, 362, 1021, 1022, 872, 1023, 239, 364, 240, 365,
	366, 1024, 367, 368, 1025, 1026, 369, 370, 1027, 1028,
	371, 241, 873, 372, 874, 242, 373, 374, 375, 376,
	377, 378, 379, 1029, 380, 243, 381, 244, 382, 1030,
	383, 384, 385, 386, 387, 245, 388, 389, 1031, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 1032, 402, 875, 403, 404, 405, 406, 246,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 1033,
	423, 424, 418, 420, 421, 422, 419, 425, 426, 1034,
	427, 408, 409, 428, 876, 429, 247, 430, 431, 1035,
	441, 432, 433, 434, 410, 435, 439, 440, 436, 437,
	438, 248, 1036, 442, 443, 1037, 444, 445, 446, 447,
	448, 308, 449, 309, 450, 451, 1038, 249, 250, 251,
	452, 1039, 1040, 453, 454, 252, 253, 1041, 455, 456,
	0, 457, 458, 1042, 1043, 459, 460, 461, 463, 1044,
	464, 1045, 462, 465, 466, 467, 254, 255, 1046, 1047,
	468, 256, 1048, 1049, 1050, 1051, 469, 470, 257, 471,
	472, 473, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 258, 259,
	260, 261, 971, 262, 972, 973, 974, 975, 214, 976,
	977, 978, 979, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 980, 269, 270, 271, 272, 273, 274,
	981, 982, 219, 220, 221, 983, 275, 222, 984, 930,
	985, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 986, 285, 0, 286, 287, 987, 861, 288, 289,
	290, 988, 989, 991, 990, 992, 993, 994, 291, 292,
	496, 293, 294, 295, 223, 224, 995, 296, 996, 297,
	997, 298, 998, 999, 299, 300, 1000, 301, 302, 1001,
	0, 1002, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 1003, 862, 1004, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 1005, 318, 1006,
	1007, 863, 319, 1008, 320, 229, 1009, 230, 1010, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 865, 1011,
	237, 328, 0, 0, 0, 1012, 327, 329, 336, 1013,
	864, 330, 234, 332, 331, 333, 334, 335, 235, 1014,
	236, 1015, 337, 866, 867, 338, 339, 340, 868, 341,
	342, 0, 0, 343, 344, 345, 1016, 347, 346, 1017,
	238, 869, 348, 349, 870, 1018, 350, 351, 1019, 1020,
	352, 0, 353, 932, 931, 354, 355, 356, 358, 359,
	357, 871, 360, 361, 363, 362, 1021, 1022, 872, 1023,
	239, 364, 240, 365, 366, 1024, 367, 368, 1025, 1026,
	369, 370, 1027, 1028, 371, 241, 873, 372, 874, 242,
	373, 374, 375, 376, 377, 378, 379, 1029, 380, 243,
	381, 244, 382, 1030, 383, 384, 385, 386, 387, 245,
	388, 389, 1031, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 1032, 402, 875, 403,
	404, 405, 406, 246, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 1033, 423, 424, 418, 420, 421, 422,
	419, 425, 426, 1034, 427, 408, 409, 428, 876, 429,
	247, 430, 431, 1035, 441, 432, 433, 434, 410, 435,
	439, 440, 436, 437, 438, 248, 1036, 442, 443, 1037,
	444, 445, 446, 447, 448, 308, 449, 309, 450, 451,
	1038, 249, 250, 251, 452, 1039, 1040, 453, 454, 252,
	253, 1041, 455, 456, 0, 457, 458, 1042, 1043, 459,
	460, 461, 463, 1044, 464, 1045, 462, 465, 466, 467,
	254, 255, 1046, 1047, 468, 256, 1048, 1049, 1050, 1051,
	469, 470, 257, 471, 472, 473, 1842, 0, 776, 764,
	765, 762, 763, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 1839, 262,
	0, 0, 0, 0, 812, 758, 0, 0, 0, 263,
	264, 265, 215, 833, 796, 834, 784, 820, 835, 0,
	269, 786, 785, 272, 273, 274, 759, 811, 836, 837,
	221, 0, 275, 818, 0, 801, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 861, 288, 289, 290, 804, 802, 803,
	808, 806, 805, 807, 291, 292, 496, 293, 821, 295,
	838, 839, 744, 296, 0, 297, 0, 298, 1840, 0,
	822, 300, 0, 301, 302, 0, 0, 0, 749, 306,
	303, 304, 307, 310, 305, 311, 312, 840, 841, 771,
	862, 0, 0, 0, 0, 0, 313, 314, 842, 823,
	824, 0, 317, 0, 318, 0, 0, 863, 319, 0,
	320, 843, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 813, 814, 817, 865, 0, 815, 795, 0, 0,
	0, 0, 327, 329, 336, 0, 864, 330, 844, 799,
	825, 826, 827, 828, 845, 0, 800, 0, 337, 866,
	867, 338, 339, 340, 868, 829, 830, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 846, 869, 348, 349,
	870, 0, 350, 351, 0, 0, 352, 0, 353, 746,
	745, 354, 355, 356, 358, 788, 357, 871, 360, 361,
	363, 362, 741, 0, 872, 772, 816, 364, 847, 365,
	366, 0, 797, 798, 0, 0, 369, 370, 0, 0,
	371, 241, 873, 372, 874, 848, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 849, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 850, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 0, 402, 875, 403, 404, 405, 406, 750,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 0,
	423, 424, 789, 790, 791, 792, 419, 425, 426, 809,
	427, 408, 409, 428, 876, 429, 851, 793, 431, 0,
	441, 432, 433, 434, 410, 435, 439, 831, 436, 437,
	438, 852, 0, 442, 443, 0, 444, 445, 446, 447,
	448, 308, 449, 309, 787, 451, 0, 853, 854, 855,
	832, 0, 0, 453, 454, 856, 857, 770, 455, 456,
	0, 457, 458, 0, 0, 459, 460, 461, 463, 810,
	464, 0, 794, 465, 466, 467, 254, 858, 1838, 0,
	468, 256, 0, 0, 0, 0, 469, 470, 257, 471,
	472, 473, 742, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 738, 739, 1841, 0, 0,
	0, 0, 0, 0, 751, 1836, 0, 0, 0, 726,
	754, 776, 764, 765, 762, 763, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 171, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 173, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 1149,
	858, 0, 0, 468, 256, 0, 0, 0, 165, 469,
	470, 257, 471, 472, 473, 742, 166, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	776, 764, 765, 762, 763, 755, 0, 1363, 0, 0,
	0, 0, 0, 754, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 171, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 173, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 1149, 858,
	0, 0, 468, 256, 0, 0, 0, 165, 469, 470,
	257, 471, 472, 473, 742, 166, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 776,
	764, 765, 762, 763, 755, 0, 1363, 0, 0, 0,
	0, 0, 754, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	1913, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	295, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 1918, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 1914, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 1915, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 742, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 738, 739, 776, 764,
	765, 762, 763, 755, 0, 751, 0, 0, 0, 0,
	0, 754, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 812, 758, 0, 0, 0, 263,
	264, 265, 215, 833, 796, 834, 784, 820, 835, 0,
	269, 786, 785, 272, 273, 274, 759, 811, 836, 837,
	221, 0, 275, 818, 0, 801, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 861, 288, 289, 290, 804, 802, 803,
	808, 806, 805, 807, 291, 292, 496, 293, 821, 295,
	838, 839, 744, 296, 0, 297, 0, 298, 0, 0,
	822, 300, 0, 301, 302, 0, 0, 0, 749, 306,
	303, 304, 307, 310, 305, 311, 312, 840, 841, 771,
	862, 0, 0, 0, 0, 0, 313, 314, 842, 823,
	824, 0, 317, 0, 318, 0, 0, 863, 319, 0,
	320, 843, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 813, 814, 817, 865, 0, 815, 795, 0, 0,
	0, 0, 327, 329, 336, 0, 864, 330, 844, 799,
	825, 826, 827, 828, 845, 0, 800, 0, 337, 866,
	867, 338, 339, 340, 868, 829, 830, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 846, 869, 348, 349,
	870, 0, 350, 351, 0, 0, 352, 0, 353, 746,
	745, 354, 355, 356, 358, 788, 357, 871, 360, 361,
	363, 362, 741, 2673, 872, 772, 816, 364, 847, 365,
	366, 0, 797, 798, 0, 0, 369, 370, 0, 0,
	371, 241, 873, 372, 874, 848, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 849, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 850, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 0, 402, 875, 403, 404, 405, 406, 750,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 0,
	423, 424, 789, 790, 791, 792, 419, 425, 426, 809,
	427, 408, 409, 428, 876, 429, 851, 793, 431, 0,
	441, 432, 433, 434, 410, 435, 439, 831, 436, 437,
	438, 852, 0, 442, 443, 0, 444, 445, 446, 447,
	448, 308, 449, 309, 787, 451, 0, 853, 854, 855,
	832, 0, 0, 453, 454, 856, 857, 770, 455, 456,
	0, 457, 458, 0, 0, 459, 460, 461, 463, 810,
	464, 0, 794, 465, 466, 467, 254, 858, 0, 0,
	468, 256, 0, 0, 0, 0, 469, 470, 257, 471,
	472, 473, 742, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 738, 739, 1428, 776, 764,
	765, 762, 763, 755, 751, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 812, 758, 0, 0, 0, 263,
	264, 265, 215, 833, 796, 834, 784, 820, 835, 0,
	269, 786, 785, 272, 273, 274, 759, 811, 836, 837,
	221, 0, 275, 818, 0, 801, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 861, 288, 289, 290, 804, 802, 803,
	808, 806, 805, 807, 291, 292, 496, 293, 821, 295,
	838, 839, 744, 296, 0, 297, 0, 298, 0, 0,
	822, 300, 0, 301, 302, 0, 0, 0, 749, 306,
	303, 304, 307, 310, 305, 311, 312, 840, 841, 771,
	862, 0, 0, 0, 0, 0, 313, 314, 842, 823,
	824, 0, 317, 0, 318, 0, 0, 863, 319, 0,
	320, 843, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 813, 814, 817, 865, 0, 815, 795, 0, 0,
	0, 1739, 327, 329, 336, 0, 864, 330, 844, 799,
	825, 826, 827, 828, 845, 0, 800, 0, 337, 866,
	867, 338, 339, 340, 868, 829, 830, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 846, 869, 348, 349,
	870, 0, 350, 351, 0, 0, 352, 0, 353, 746,
	745, 354, 355, 356, 358, 788, 357, 871, 360, 361,
	363, 362, 741, 0, 872, 772, 816, 364, 847, 365,
	366, 0, 797, 798, 0, 0, 369, 370, 0, 0,
	371, 241, 873, 372, 874, 848, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 849, 381, 244, 382, 1738,
	383, 384, 385, 386, 387, 850, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 0, 402, 875, 403, 404, 405, 406, 750,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 0,
	423, 424, 789, 790, 791, 792, 419, 425, 426, 809,
	427, 408, 409, 428, 876, 429, 851, 793, 431, 0,
	441, 432, 433, 434, 410, 435, 439, 831, 436, 437,
	438, 852, 0, 442, 443, 0, 444, 445, 446, 447,
	448, 308, 449, 309, 787, 451, 0, 853, 854, 855,
	832, 0, 0, 453, 454, 856, 857, 770, 455, 456,
	0, 457, 458, 0, 0, 459, 460, 461, 463, 810,
	464, 0, 794, 465, 466, 467, 254, 858, 0, 0,
	468, 256, 0, 0, 0, 0, 469, 470, 257, 471,
	472, 473, 742, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 738, 739, 0, 0, 0,
	0, 0, 0, 0, 751, 0, 0, 0, 0, 734,
	754, 776, 764, 765, 762, 763, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 736, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	776, 764, 765, 762, 763, 755, 0, 751, 0, 0,
	0, 0, 0, 754, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	2507, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 776,
	764, 765, 762, 763, 755, 0, 751, 0, 0, 0,
	0, 0, 754, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	295, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 736, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 742, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	2317, 754, 776, 764, 765, 762, 763, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 812, 758,
	0, 0, 0, 263, 264, 265, 215, 833, 796, 834,
	784, 820, 835, 0, 269, 786, 785, 272, 273, 274,
	759, 811, 836, 837, 221, 0, 275, 818, 0, 801,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 861, 288, 289,
	290, 804, 802, 803, 808, 806, 805, 807, 291, 292,
	496, 293, 821, 295, 838, 839, 744, 296, 0, 297,
	0, 298, 0, 0, 822, 300, 0, 301, 302, 0,
	0, 0, 749, 306, 303, 304, 307, 310, 305, 311,
	312, 840, 841, 771, 862, 0, 0, 0, 0, 0,
	313, 314, 842, 823, 824, 0, 317, 0, 318, 0,
	0, 863, 319, 0, 320, 843, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 813, 814, 817, 865, 0,
	815, 795, 0, 0, 0, 0, 327, 329, 336, 0,
	864, 330, 844, 799, 825, 826, 827, 828, 845, 0,
	800, 0, 337, 866, 867, 338, 339, 340, 868, 829,
	830, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	846, 869, 348, 349, 870, 0, 350, 351, 0, 0,
	352, 0, 353, 746, 745, 354, 355, 356, 358, 788,
	357, 871, 360, 361, 363, 362, 741, 0, 872, 772,
	816, 364, 847, 365, 366, 0, 797, 798, 0, 0,
	369, 370, 0, 0, 371, 241, 873, 372, 874, 848,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 849,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 850,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 0, 402, 875, 403,
	404, 405, 406, 750, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 0, 423, 424, 789, 790, 791, 792,
	419, 425, 426, 809, 427, 408, 409, 428, 876, 429,
	851, 793, 431, 0, 441, 432, 433, 434, 410, 435,
	439, 831, 436, 437, 438, 852, 0, 442, 443, 0,
	444, 445, 446, 447, 448, 308, 449, 309, 787, 451,
	0, 853, 854, 855, 832, 0, 0, 453, 454, 856,
	857, 770, 455, 456, 0, 457, 458, 0, 0, 459,
	460, 461, 463, 810, 464, 0, 794, 465, 466, 467,
	254, 858, 0, 0, 468, 256, 0, 0, 0, 0,
	469, 470, 257, 471, 472, 473, 742, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 738,
	739, 776, 764, 765, 762, 763, 755, 0, 751, 0,
	0, 0, 0, 0, 754, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	1428, 776, 764, 765, 762, 763, 755, 751, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 1918,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 1952, 754, 776, 764, 765, 762, 763, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	812, 758, 0, 0, 0, 263, 264, 265, 215, 833,
	796, 834, 784, 820, 835, 0, 269, 786, 785, 272,
	273, 274, 759, 811, 836, 837, 221, 0, 275, 818,
	0, 801, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 861,
	288, 289, 290, 804, 802, 803, 808, 806, 805, 807,
	291, 292, 496, 293, 821, 295, 838, 839, 744, 296,
	0, 297, 0, 298, 0, 0, 822, 300, 0, 301,
	302, 0, 0, 0, 749, 306, 303, 304, 307, 310,
	305, 311, 312, 840, 841, 771, 862, 0, 0, 0,
	0, 0, 313, 314, 842, 823, 824, 0, 317, 0,
	318, 0, 0, 863, 319, 0, 320, 843, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 813, 814, 817,
	865, 0, 815, 795, 0, 0, 0, 0, 327, 329,
	336, 0, 864, 330, 844, 799, 825, 826, 827, 828,
	845, 0, 800, 0, 337, 866, 867, 338, 339, 340,
	868, 829, 830, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 846, 869, 348, 349, 870, 0, 350, 351,
	0, 0, 352, 0, 353, 746, 745, 354, 355, 356,
	358, 788, 357, 871, 360, 361, 363, 362, 741, 0,
	872, 772, 816, 364, 847, 365, 366, 0, 797, 798,
	0, 0, 369, 370, 0, 0, 371, 241, 873, 372,
	874, 848, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 849, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 850, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 395, 398, 399, 400, 401, 0, 402,
	875, 403, 404, 405, 406, 750, 407, 0, 411, 412,
	413, 414, 415, 416, 417, 0, 423, 424, 789, 790,
	791, 792, 419, 425, 426, 809, 427, 408, 409, 428,
	876, 429, 851, 793, 431, 0, 441, 432, 433, 434,
	410, 435, 439, 831, 436, 437, 438, 852, 0, 442,
	443, 0, 444, 445, 446, 447, 448, 308, 449, 309,
	787, 451, 0, 853, 854, 855, 832, 0, 0, 453,
	454, 856, 857, 770, 455, 456, 0, 457, 458, 0,
	0, 459, 460, 461, 463, 810, 464, 0, 794, 465,
	466, 467, 254, 858, 0, 0, 468, 256, 0, 0,
	0, 0, 469, 470, 257, 471, 472, 473, 742, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 738, 739, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 1905, 754, 776, 764, 765,
	762, 763, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 812, 758, 0, 0, 0, 263, 264,
	265, 215, 833, 796, 834, 784, 820, 835, 0, 269,
	786, 785, 272, 273, 274, 759, 811, 836, 837, 221,
	0, 275, 818, 0, 801, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 804, 802, 803, 808,
	806, 805, 807, 291, 292, 496, 293, 821, 295, 838,
	839, 744, 296, 0, 297, 0, 298, 0, 0, 822,
	300, 0, 301, 302, 0, 0, 0, 749, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 771, 862,
	0, 0, 0, 0, 0, 313, 314, 842, 823, 824,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	813, 814, 817, 865, 0, 815, 795, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 844, 799, 825,
	826, 827, 828, 845, 0, 800, 0, 337, 866, 867,
	338, 339, 340, 868, 829, 830, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 746, 745,
	354, 355, 356, 358, 788, 357, 871, 360, 361, 363,
	362, 741, 0, 872, 772, 816, 364, 847, 365, 366,
	0, 797, 798, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 850, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 750, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 789, 790, 791, 792, 419, 425, 426, 809, 427,
	408, 409, 428, 876, 429, 851, 793, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 831, 436, 437, 438,
	852, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 787, 451, 0, 853, 854, 855, 832,
	0, 0, 453, 454, 856, 857, 770, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 810, 464,
	0, 794, 465, 466, 467, 254, 858, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 742, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 738, 739, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 1894, 754,
	776, 764, 765, 762, 763, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	0, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 1892, 754, 776, 764, 765, 762, 763, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 812,
	758, 0, 0, 0, 263, 264, 265, 215, 833, 796,
	834, 784, 820, 835, 0, 269, 786, 785, 272, 273,
	274, 759, 811, 836, 837, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 821, 295, 838, 839, 744, 296, 0,
	297, 0, 298, 0, 0, 822, 300, 0, 301, 302,
	0, 0, 0, 749, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 771, 862, 0, 0, 0, 0,
	0, 313, 314, 842, 823, 824, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 865,
	0, 815, 795, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 844, 799, 825, 826, 827, 828, 845,
	0, 800, 0, 337, 866, 867, 338, 339, 340, 868,
	829, 830, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 746, 745, 354, 355, 356, 358,
	788, 357, 871, 360, 361, 363, 362, 741, 0, 872,
	772, 816, 364, 847, 365, 366, 0, 797, 798, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	850, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 750, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 789, 790, 791,
	792, 419, 425, 426, 809, 427, 408, 409, 428, 876,
	429, 851, 793, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 831, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 787,
	451, 0, 853, 854, 855, 832, 0, 0, 453, 454,
	856, 857, 770, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 794, 465, 466,
	467, 254, 858, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 742, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	738, 739, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 1890, 754, 776, 764, 765, 762,
	763, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 812, 758, 0, 0, 0, 263, 264, 265,
	215, 833, 796, 834, 784, 820, 835, 0, 269, 786,
	785, 272, 273, 274, 759, 811, 836, 837, 221, 0,
	275, 818, 0, 801, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 861, 288, 289, 290, 804, 802, 803, 808, 806,
	805, 807, 291, 292, 496, 293, 821, 295, 838, 839,
	744, 296, 0, 297, 0, 298, 0, 0, 822, 300,
	0, 301, 302, 0, 0, 0, 749, 306, 303, 304,
	307, 310, 305, 311, 312, 840, 841, 771, 862, 0,
	0, 0, 0, 0, 313, 314, 842, 823, 824, 0,
	317, 0, 318, 0, 0, 863, 319, 0, 320, 843,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 813,
	814, 817, 865, 0, 815, 795, 0, 0, 0, 0,
	327, 329, 336, 0, 864, 330, 844, 799, 825, 826,
	827, 828, 845, 0, 800, 0, 337, 866, 867, 338,
	339, 340, 868, 829, 830, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 846, 869, 348, 349, 870, 0,
	350, 351, 0, 0, 352, 0, 353, 746, 745, 354,
	355, 356, 358, 788, 357, 871, 360, 361, 363, 362,
	741, 0, 872, 772, 816, 364, 847, 365, 366, 0,
	797, 798, 0, 0, 369, 370, 0, 0, 371, 241,
	873, 372, 874, 848, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 849, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 850, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 395, 398, 399, 400, 401,
	0, 402, 875, 403, 404, 405, 406, 750, 407, 0,
	411, 412, 413, 414, 415, 416, 417, 0, 423, 424,
	789, 790, 791, 792, 419, 425, 426, 809, 427, 408,
	409, 428, 876, 429, 851, 793, 431, 0, 441, 432,
	433, 434, 410, 435, 439, 831, 436, 437, 438, 852,
	0, 442, 443, 0, 444, 445, 446, 447, 448, 308,
	449, 309, 787, 451, 0, 853, 854, 855, 832, 0,
	0, 453, 454, 856, 857, 770, 455, 456, 0, 457,
	458, 0, 0, 459, 460, 461, 463, 810, 464, 0,
	794, 465, 466, 467, 254, 858, 0, 0, 468, 256,
	0, 0, 0, 0, 469, 470, 257, 471, 472, 473,
	742, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 738, 739, 0, 0, 0, 0, 0,
	0, 0, 751, 0, 0, 0, 0, 1887, 754, 1879,
	764, 765, 762, 763, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	1882, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 1883, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 1884, 1881, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 1885,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 1880, 473, 742, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	1876, 754, 1879, 764, 765, 762, 763, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 812, 758,
	0, 0, 0, 263, 264, 265, 215, 833, 796, 834,
	784, 820, 835, 0, 269, 786, 785, 272, 273, 274,
	759, 811, 836, 837, 221, 0, 275, 818, 0, 801,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 861, 288, 289,
	290, 804, 802, 803, 808, 806, 805, 807, 291, 292,
	496, 293, 821, 1882, 838, 839, 744, 296, 0, 297,
	0, 298, 0, 0, 822, 300, 0, 301, 302, 0,
	0, 0, 749, 306, 303, 304, 307, 310, 305, 311,
	312, 840, 841, 771, 862, 0, 0, 0, 0, 0,
	313, 314, 842, 823, 824, 0, 317, 0, 318, 0,
	0, 863, 319, 0, 320, 843, 0, 230, 0, 321,
	322, 1883, 324, 325, 326, 813, 814, 817, 865, 0,
	815, 795, 0, 0, 0, 0, 327, 329, 336, 0,
	864, 330, 844, 799, 825, 826, 827, 828, 845, 0,
	800, 0, 337, 866, 867, 338, 339, 340, 868, 829,
	830, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	846, 869, 348, 349, 870, 0, 350, 351, 0, 0,
	352, 0, 353, 746, 745, 1884, 1881, 356, 358, 788,
	357, 871, 360, 361, 363, 362, 741, 0, 872, 772,
	816, 364, 847, 365, 366, 0, 797, 798, 0, 0,
	369, 370, 0, 0, 371, 241, 873, 372, 874, 848,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 849,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 850,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 0, 402, 875, 403,
	404, 405, 406, 750, 407, 0, 411, 412, 413, 414,
	415, 416, 1885, 0, 423, 424, 789, 790, 791, 792,
	419, 425, 426, 809, 427, 408, 409, 428, 876, 429,
	851, 793, 431, 0, 441, 432, 433, 434, 410, 435,
	439, 831, 436, 437, 438, 852, 0, 442, 443, 0,
	444, 445, 446, 447, 448, 308, 449, 309, 787, 451,
	0, 853, 854, 855, 832, 0, 0, 453, 454, 856,
	857, 770, 455, 456, 0, 457, 458, 0, 0, 459,
	460, 461, 463, 810, 464, 0, 794, 465, 466, 467,
	254, 858, 0, 0, 468, 256, 0, 0, 0, 0,
	469, 470, 257, 471, 1880, 473, 742, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 738,
	739, 776, 764, 765, 762, 763, 755, 0, 751, 0,
	0, 0, 0, 0, 754, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	0, 0, 0, 0, 0, 1368, 0, 751, 0, 0,
	0, 0, 0, 754, 776, 764, 765, 762, 763, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 1726, 262, 0, 0, 0, 0,
	812, 758, 0, 0, 0, 263, 264, 265, 215, 833,
	796, 834, 784, 820, 835, 0, 269, 786, 785, 272,
	273, 274, 759, 811, 836, 837, 221, 0, 275, 818,
	0, 801, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 861,
	288, 289, 290, 804, 802, 803, 808, 806, 805, 807,
	291, 292, 496, 293, 821, 295, 838, 839, 744, 296,
	0, 297, 0, 298, 0, 0, 822, 300, 0, 301,
	302, 0, 0, 0, 749, 306, 303, 304, 307, 310,
	305, 311, 312, 840, 841, 771, 862, 0, 0, 0,
	0, 0, 313, 314, 842, 823, 824, 0, 317, 0,
	318, 0, 0, 863, 319, 0, 320, 843, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 813, 814, 817,
	865, 0, 815, 795, 0, 0, 0, 0, 327, 329,
	336, 0, 864, 330, 844, 799, 825, 826, 827, 828,
	845, 0, 800, 0, 337, 866, 867, 338, 339, 340,
	868, 829, 830, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 846, 869, 348, 349, 870, 0, 350, 351,
	0, 0, 352, 0, 353, 746, 745, 354, 355, 356,
	358, 788, 357, 871, 360, 361, 363, 362, 741, 0,
	872, 772, 816, 364, 847, 365, 366, 0, 797, 798,
	0, 0, 369, 370, 0, 0, 371, 241, 873, 372,
	874, 848, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 849, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 850, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 395, 398, 399, 400, 401, 0, 402,
	875, 403, 404, 405, 406, 750, 407, 0, 411, 412,
	413, 414, 415, 416, 417, 0, 423, 424, 789, 790,
	791, 792, 419, 425, 426, 809, 427, 408, 409, 428,
	876, 429, 851, 793, 431, 0, 441, 432, 433, 434,
	410, 435, 439, 831, 436, 437, 438, 852, 0, 442,
	443, 0, 444, 445, 446, 447, 448, 308, 449, 309,
	787, 451, 0, 853, 854, 855, 832, 0, 0, 453,
	454, 856, 857, 770, 455, 456, 0, 457, 458, 0,
	0, 459, 460, 461, 463, 810, 464, 0, 794, 465,
	466, 467, 254, 858, 0, 0, 468, 256, 0, 0,
	0, 0, 469, 470, 257, 471, 472, 473, 742, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 738, 739, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 1074, 754, 776, 764, 765,
	762, 763, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 812, 758, 0, 0, 0, 263, 264,
	265, 215, 833, 796, 834, 784, 820, 835, 0, 269,
	786, 785, 272, 273, 274, 759, 811, 836, 837, 221,
	0, 275, 818, 0, 801, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 804, 802, 803, 808,
	806, 805, 807, 291, 292, 496, 293, 821, 295, 838,
	839, 744, 296, 0, 297, 0, 298, 0, 0, 822,
	300, 0, 301, 302, 0, 0, 0, 749, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 771, 862,
	0, 0, 0, 0, 0, 313, 314, 842, 823, 824,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1073, 814, 817, 865, 0, 815, 795, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 844, 799, 825,
	826, 827, 828, 845, 0, 800, 0, 337, 866, 867,
	338, 339, 340, 868, 829, 830, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 746, 745,
	354, 355, 356, 358, 788, 357, 871, 360, 361, 363,
	362, 741, 0, 872, 772, 816, 364, 847, 365, 366,
	0, 797, 798, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 850, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 750, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 789, 790, 791, 792, 419, 425, 426, 809, 427,
	408, 409, 428, 876, 429, 851, 793, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 831, 436, 437, 438,
	852, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 787, 451, 0, 853, 854, 855, 832,
	0, 0, 453, 454, 856, 857, 770, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 810, 464,
	0, 794, 465, 466, 467, 254, 858, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 742, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 738, 739, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 1068, 754,
	776, 764, 765, 762, 763, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1067, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	0, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 1063, 754, 776, 764, 765, 762, 763, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 812,
	758, 0, 0, 0, 263, 264, 265, 215, 833, 796,
	834, 784, 820, 835, 0, 269, 786, 785, 272, 273,
	274, 759, 811, 836, 837, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 821, 295, 838, 839, 744, 296, 0,
	297, 0, 298, 0, 0, 822, 300, 0, 301, 302,
	0, 0, 0, 749, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 771, 862, 0, 0, 0, 0,
	0, 313, 314, 842, 823, 824, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 865,
	0, 815, 795, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 844, 799, 825, 826, 827, 828, 845,
	0, 800, 0, 337, 866, 867, 338, 339, 340, 868,
	829, 830, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 746, 745, 354, 355, 356, 358,
	788, 357, 871, 360, 361, 363, 362, 741, 0, 872,
	772, 816, 364, 847, 365, 366, 0, 797, 798, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	850, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 750, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 789, 790, 791,
	792, 419, 425, 426, 809, 427, 408, 409, 428, 876,
	429, 851, 793, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 831, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 787,
	451, 0, 853, 854, 855, 832, 0, 0, 453, 454,
	856, 857, 770, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 794, 465, 466,
	467, 254, 858, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 742, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	738, 739, 776, 764, 765, 762, 763, 755, 0, 751,
	0, 0, 0, 0, 0, 754, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 812, 758,
	0, 0, 0, 263, 264, 265, 215, 833, 796, 834,
	784, 820, 835, 0, 269, 786, 785, 272, 273, 274,
	759, 811, 836, 837, 221, 0, 275, 818, 0, 801,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 861, 288, 289,
	290, 804, 802, 803, 808, 806, 805, 807, 291, 292,
	496, 293, 821, 295, 838, 839, 744, 296, 0, 297,
	0, 298, 0, 0, 822, 300, 0, 301, 302, 0,
	0, 0, 749, 306, 303, 304, 307, 310, 305, 311,
	312, 840, 841, 771, 862, 0, 0, 0, 0, 0,
	313, 314, 842, 823, 824, 0, 317, 0, 318, 0,
	0, 863, 319, 0, 320, 843, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 813, 814, 817, 865, 0,
	815, 795, 0, 0, 0, 0, 327, 329, 336, 0,
	864, 330, 844, 799, 825, 826, 827, 828, 845, 0,
	800, 0, 337, 866, 867, 338, 339, 340, 868, 829,
	830, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	846, 869, 348, 349, 870, 0, 350, 351, 0, 0,
	352, 0, 353, 746, 745, 354, 355, 356, 358, 788,
	357, 871, 360, 361, 363, 362, 741, 0, 872, 772,
	816, 364, 847, 365, 366, 0, 797, 798, 0, 0,
	369, 370, 0, 0, 371, 241, 873, 372, 874, 848,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 849,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 850,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 0, 402, 875, 403,
	404, 405, 406, 750, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 0, 423, 424, 789, 790, 791, 792,
	419, 425, 426, 809, 427, 408, 409, 428, 876, 429,
	851, 793, 431, 0, 441, 432, 433, 434, 410, 435,
	439, 831, 436, 437, 438, 852, 0, 442, 443, 0,
	444, 445, 446, 447, 448, 308, 449, 309, 787, 451,
	0, 853, 854, 855, 832, 0, 0, 453, 454, 856,
	857, 770, 455, 456, 0, 457, 458, 0, 0, 459,
	460, 461, 463, 810, 464, 0, 794, 465, 466, 467,
	254, 858, 0, 0, 468, 256, 0, 0, 0, 0,
	469, 470, 257, 471, 472, 473, 742, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 738,
	739, 776, 764, 765, 762, 763, 755, 0, 751, 0,
	0, 0, 0, 0, 754, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 3060,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 3059, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	776, 764, 765, 762, 763, 755, 0, 751, 0, 0,
	0, 0, 0, 754, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 3058, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 3060, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 3059, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	0, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 776,
	764, 765, 762, 763, 755, 0, 751, 0, 0, 0,
	0, 0, 754, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 0, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 3060, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	295, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 813, 814, 817, 0, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	0, 0, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 846, 869, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 0, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 0, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 856, 857, 770, 455,
	456, 0, 3059, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 726,
	0, 928, 0, 0, 0, 0, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 258, 259, 260,
	261, 754, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 930, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	0, 923, 924, 0, 926, 925, 927, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 0, 862, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 865, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 915, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 0, 0, 872, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 921, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 171, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 852, 0, 442, 443, 173, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 856, 857,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 1149,
	255, 0, 0, 468, 256, 0, 0, 928, 165, 469,
	470, 257, 471, 472, 473, 0, 166, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 912, 0, 1456, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 923, 924, 0,
	926, 925, 927, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 915, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 921, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 171, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	852, 0, 442, 443, 173, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 856, 857, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 1149, 255, 0, 0, 468,
	256, 0, 0, 928, 165, 469, 470, 257, 471, 472,
	473, 0, 166, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 812,
	0, 912, 0, 1456, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 811, 219, 220, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 865,
	0, 815, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 816, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 809, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	856, 857, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 2289, 0, 928,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 2610,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 930, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 0, 923,
	924, 0, 926, 925, 927, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	0, 862, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 865, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	866, 867, 338, 339, 340, 868, 341, 342, 0, 0,
	343, 344, 345, 915, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 359, 357, 871, 360,
	361, 363, 362, 0, 0, 872, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 921, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 876, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 856, 857, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 911, 0, 928, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 912, 0, 919, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 930, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	861, 288, 289, 290, 0, 923, 924, 0, 926, 925,
	927, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 840, 841, 0, 862, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 863, 319, 0, 320, 843, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 865, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 864, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 866, 867, 338, 339,
	340, 868, 341, 342, 0, 0, 343, 344, 345, 915,
	347, 346, 0, 846, 869, 348, 349, 870, 0, 350,
	351, 0, 0, 352, 0, 353, 932, 931, 354, 355,
	356, 358, 359, 357, 871, 360, 361, 363, 362, 0,
	0, 872, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 921, 369, 370, 0, 0, 371, 241, 873,
	372, 874, 848, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 849, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 875, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 876, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 852, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 856, 857, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 0,
	0, 928, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 912,
	0, 919, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 930, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	0, 923, 924, 0, 926, 925, 927, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 0, 862, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 865, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 915, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 0, 0, 872, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 921, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 856, 857,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 0, 0, 928, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 912, 0, 919, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 923, 924, 0,
	926, 925, 927, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	852, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 856, 857, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1146, 0, 953, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 1357, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 171, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	173, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 1149, 255, 0, 0, 468, 256, 726, 0, 493,
	165, 469, 470, 257, 471, 472, 473, 0, 166, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 138,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	171, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 173, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 1149, 255, 0,
	0, 468, 256, 0, 0, 0, 165, 469, 470, 257,
	471, 472, 473, 0, 166, 776, 764, 765, 762, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 138, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	833, 796, 834, 784, 820, 835, 0, 269, 786, 785,
	272, 273, 274, 0, 0, 836, 837, 221, 0, 275,
	222, 0, 930, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	861, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 821, 295, 838, 839, 0,
	296, 0, 297, 0, 298, 0, 0, 822, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 771, 862, 0, 0,
	0, 0, 0, 313, 314, 842, 823, 824, 0, 317,
	0, 318, 0, 0, 863, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 865, 0, 237, 795, 0, 0, 0, 0, 327,
	329, 336, 0, 864, 330, 844, 799, 825, 826, 827,
	828, 845, 0, 800, 0, 337, 866, 867, 338, 339,
	340, 868, 829, 830, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 869, 348, 349, 870, 0, 350,
	351, 0, 0, 352, 0, 353, 932, 931, 354, 355,
	356, 358, 788, 357, 871, 360, 361, 363, 362, 0,
	0, 872, 772, 239, 364, 847, 365, 366, 0, 797,
	798, 0, 0, 369, 370, 0, 0, 371, 241, 873,
	372, 874, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 850, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 875, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 789,
	790, 791, 792, 419, 425, 426, 0, 427, 408, 409,
	428, 876, 429, 851, 793, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 831, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 787, 451, 0, 853, 854, 855, 832, 0, 0,
	453, 454, 252, 253, 770, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 794,
	465, 466, 467, 254, 858, 493, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 0,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 2086, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 0, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 2522, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 1223, 0, 953, 952, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 1460, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 1142, 0, 953,
	952, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 930, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 862, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1141, 232, 233, 865, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	866, 867, 338, 339, 340, 868, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 359, 357, 871, 360,
	361, 363, 362, 0, 0, 872, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 876, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 1138, 0, 953, 952, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 930, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	861, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 862, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 863, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1137, 232,
	233, 865, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 864, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 866, 867, 338, 339,
	340, 868, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 869, 348, 349, 870, 0, 350,
	351, 0, 0, 352, 0, 353, 932, 931, 354, 355,
	356, 358, 359, 357, 871, 360, 361, 363, 362, 0,
	0, 872, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 873,
	372, 874, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 875, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 876, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 1099,
	0, 953, 952, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 930, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 862, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1098, 232, 233, 865, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 0, 0, 872, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 1096, 0, 953, 952, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1095, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 946, 0, 953, 952, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 948, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 953, 952, 468, 256, 0, 950, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 953, 952, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 953, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 594, 0, 207,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 213, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 212, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 206, 0, 207, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 476, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 213, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 212, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 207, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 476, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 213, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 1695, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 212, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 207, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 476, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 213, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 212, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 493, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 476, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 493, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 476, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 1979, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 1976, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 2056, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 1982, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 2054, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 2053, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 1981, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 2055, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 493, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 1979, 275,
	222, 0, 0, 1973, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 1976, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 1982, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1972, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 1981, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 1980, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 601,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	600, 580, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 583, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 584, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 585, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 579, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 580, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 583, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 584, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 585, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 583, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 584, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 585, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1117, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	921, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 941, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 943, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 921, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 938, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 940, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 921, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 934,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 936, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 921, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 516, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 515, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 514, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 1959, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 2445, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 2445, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 2442, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 921, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1715, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1713, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 1711, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 493, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 1688, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 1648,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1646, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 627, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 1196, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 628, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 624,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 623, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1544, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1543, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 627, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 1196, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 628, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 624, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 623, 250, 251, 452, 0, 0,
	453, 1197, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 627,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 617, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 628,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 624, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	1167, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	623, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1135, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1134, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1131, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1130, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1128, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1127, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 1125, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1124, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 1121,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1120, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 493, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 258, 259, 260,
	261, 1109, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1107, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1106, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1101, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1092, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1091, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 1087, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 1083,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1085, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 960, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	962, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 957, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 627, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 617, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 616, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 628, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	618, 407, 0, 411, 412, 624, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 619, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 623, 250,
	251, 452, 0, 0, 453, 621, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 607, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 608,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 603,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 592, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 538, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 2346, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 2344, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 2333, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 608, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 1557, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 0, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1548, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 894, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 493, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 0, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 0, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 0, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 1330, 1316, 0, 0, 0, 0,
	0, 1297, 1313, 0, 1343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 1320, 1321, 1322, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 1319, 1320, 1321, 1322, 0, 0,
	0, 0, 0, 1302, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 1332, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 0, 0, 0, 0, 1342, 0, 1311,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 1332, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 1330, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 1333, 0, 1316, 1308, 1309,
	1315, 1314, 1310, 1336, 1313, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 0, 0, 0, 0, 0, 0,
	0, 0, 2228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 0, 0, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 0, 0, 0, 0, 1319, 1320, 1321,
	1322, 2227, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 1330, 0, 0, 0,
	0, 0, 0, 1297, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	0, 0, 1311, 1312, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 0, 0, 1332, 1316, 0, 0, 0,
	0, 0, 1317, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1319, 1320, 1321, 1322,
	0, 0, 0, 0, 0, 1302, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 1323, 0,
	0, 0, 0, 0, 2224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1335, 0,
	0, 0, 1297, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1297, 0, 1333, 1343, 0, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322, 1296,
	0, 0, 0, 2223, 1302, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 1319, 1320, 1321,
	1322, 0, 0, 1332, 0, 0, 1302, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	0, 0, 1311, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 1323, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1335,
	0, 0, 0, 1297, 0, 1333, 1343, 0, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 0, 0, 0, 0, 1296, 0,
	0, 0, 2222, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1297, 1333, 0, 1343,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322,
	3023, 1296, 0, 0, 0, 1302, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 1319,
	1320, 1321, 1322, 0, 1332, 0, 0, 0, 1302, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1323, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 1335, 0, 0, 0, 1297, 1333, 0, 1343, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 0, 0, 0, 0, 3019,
	1296, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1297, 1333,
	0, 1343, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320,
	1321, 1322, 2959, 1296, 0, 0, 0, 1302, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	0, 1319, 1320, 1321, 1322, 0, 1332, 0, 0, 0,
	1302, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	1323, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1335, 0, 0, 0, 1297, 1333, 0,
	1343, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0,
	0, 2958, 1296, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1297, 1333, 0, 1343, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	1319, 1320, 1321, 1322, 2907, 1296, 0, 0, 0, 1302,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0,
	0, 0, 0, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 0, 1319, 1320, 1321, 1322, 0, 1332, 0,
	0, 0, 1302, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1323, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 1294, 1295, 0, 1327, 1328, 1329,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 1335, 0, 0, 0, 1297,
	1333, 0, 1343, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0,
	0, 0, 0, 2868, 1296, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1297, 1333, 0, 1343, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 1319, 1320, 1321, 1322, 2779, 1296, 0, 0,
	0, 1302, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 1344, 0, 0, 1324, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1341, 0, 0, 0, 0, 0, 0, 1311, 1312, 0,
	0, 0, 0, 0, 0, 1319, 1320, 1321, 1322, 0,
	1332, 0, 0, 0, 1302, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 1323, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 1335, 0, 0,
	0, 1297, 1333, 0, 1343, 1308, 1309, 1315, 1314, 1310,
	1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	1304, 0, 0, 0, 0, 2736, 1296, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1297, 1333, 0, 1343, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322, 2735, 1296,
	0, 0, 0, 1302, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 0, 0, 0, 0, 0, 0, 1311,
	1312, 0, 0, 0, 0, 0, 0, 1319, 1320, 1321,
	1322, 0, 1332, 0, 0, 0, 1302, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	0, 0, 1311, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 1323, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1335,
	0, 0, 0, 1297, 1333, 0, 1343, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 0, 0, 0, 0, 2734, 1296, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1297, 1333, 0, 1343,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322,
	2706, 1296, 0, 0, 0, 1302, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 1319,
	1320, 1321, 1322, 0, 1332, 0, 0, 0, 1302, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1323, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 1335, 0, 0, 0, 1297, 1333, 0, 1343, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 0, 0, 0, 0, 2526,
	1296, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1297, 1333,
	0, 1343, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320,
	1321, 1322, 2499, 1296, 0, 0, 0, 1302, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	0, 1319, 1320, 1321, 1322, 0, 1332, 0, 0, 0,
	1302, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	1323, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 1333, 0,
	0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0,
	0, 1825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 1343, 0,
	0, 1333, 0, 0, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	1296, 0, 2189, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 1320,
	1321, 1322, 1296, 0, 0, 0, 0, 1302, 3101, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	1319, 1320, 1321, 1322, 0, 0, 1332, 0, 0, 1302,
	0, 2272, 0, 1317, 2271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0,
	0, 0, 3100, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	1323, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 1335, 0, 2164, 0, 1297, 0, 1333, 1343,
	0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 1928, 0, 0,
	0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 2165, 0, 1927, 0, 0, 1297, 0,
	1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319,
	1320, 1321, 1322, 1296, 0, 0, 0, 0, 1302, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	0, 1319, 1320, 1321, 1322, 0, 0, 1332, 0, 0,
	1302, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 1323, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1335, 0, 0, 0, 1297, 0, 1333,
	1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1297,
	0, 1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	1319, 1320, 1321, 1322, 1296, 0, 0, 0, 0, 1302,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0,
	0, 0, 0, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 1319, 1320, 1321, 1322, 0, 0, 1332, 0,
	0, 1302, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 1334, 1344, 0, 0, 1324, 1325,
	1326, 0, 0, 0, 0, 0, 1331, 723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1341, 0, 0, 0, 0, 0, 0, 1311, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 1323, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1335, 0, 0, 0, 1297, 0,
	1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0,
	0, 0, 0, 1296, 0, 0, 2503, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 2277, 0, 0,
	1297, 0, 1333, 1343, 0, 1308, 1309, 1315, 1314, 1310,
	1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	1304, 1319, 1320, 1321, 1322, 1296, 0, 0, 0, 0,
	1302, 0, 0, 1316, 0, 2282, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 1319, 1320, 1321, 1322, 0, 0, 1332,
	0, 0, 1302, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 1323, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 1294, 1295, 0, 1327, 1328, 1329,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 1335, 0, 0, 0, 1297,
	0, 1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	0, 0, 0, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 2221, 0,
	0, 1297, 0, 1333, 1343, 0, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 1319, 1320, 1321, 1322, 1296, 0, 0, 0,
	0, 1302, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 1344, 0, 0, 1324, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1341, 0, 0, 0, 0, 0, 0, 1311, 1312, 0,
	0, 0, 0, 0, 1319, 1320, 1321, 1322, 0, 0,
	1332, 0, 0, 1302, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 2240, 0, 0, 0, 0, 0, 1311,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 1323, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 1335, 0, 0, 0,
	1297, 0, 1333, 1343, 0, 1308, 1309, 1315, 1314, 1310,
	1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	1304, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1297, 0, 1333, 1343, 0, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 1319, 1320, 1321, 1322, 1296, 0, 0,
	0, 0, 1302, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 1319, 1320, 1321, 1322, 0,
	0, 1332, 0, 0, 1302, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 1323, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 1297, 0, 1333, 1343, 0, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1297, 0, 1333, 1343, 0, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322, 1296, 0,
	0, 0, 0, 1302, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 0, 0, 0, 0, 0, 0, 1311,
	1312, 0, 0, 0, 0, 0, 1319, 1320, 1321, 1322,
	0, 0, 1332, 0, 0, 1302, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 1323, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1608, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 1619, 1604, 1609, 1592,
	1629, 1628, 0, 0, 1594, 1593, 0, 0, 0, 0,
	0, 1638, 1637, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 1333, 0, 0, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 1630, 0, 1626, 1625, 0, 0, 0, 0, 0,
	0, 0, 0, 1624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1623, 1621, 1622, 0, 0, 1333, 0, 0, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 0, 0, 0, 0, 0,
	1603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1612, 1607, 1613, 1614, 1615, 1616, 1617, 0, 1611,
	0, 0, 0, 0, 0, 0, 0, 0, 1635, 1636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1608, 0, 0, 0, 0, 0, 0, 1596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1627, 0, 0, 0, 1605, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1619, 1604, 1609, 1592,
	1629, 1628, 0, 0, 1594, 1593, 0, 0, 0, 0,
	0, 1638, 1637, 0, 0, 0, 0, 0, 1620, 0,
	0, 0, 1746, 1744, 1745, 1748, 1747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1630, 0, 1626, 1625, 1597, 1598, 1599, 1600, 0,
	0, 0, 0, 1624, 0, 0, 0, 0, 0, 1618,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1623, 1621, 1622, 0, 0, 0, 1595, 0, 0,
	1631, 1632, 1633, 1634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1603, 0, 0, 0, 0, 1602, 0, 0, 0, 0,
	1639, 1612, 1607, 1613, 1614, 1615, 1616, 1617, 0, 1611,
	0, 0, 0, 0, 0, 0, 0, 0, 1635, 1636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1627, 0, 0, 0, 1605, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1597, 1598, 1599, 1600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1618,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1595, 0, 0,
	1631, 1632, 1633, 1634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1602, 0, 0, 0, 0,
	1639,
}
var sqlPact = [...]int{

	838, -1000, 3, -1000, -1000, -1000, 258, -1000, -1000, -1000,
	-1000, 253, 252, 250, -1000, 247, 246, 242, 241, 240,
	239, 236, 235, 231, 225, 224, 223, -1000, -1000, 220,
	-1000, -1000, -1000, -1000, 219, 218, 217, -1000, 216, 1430,
	31611, 214, 209, 208, 2159, 49289, 1519, 207, 206, -1000,
	203, 1539, 36593, 1178, 1894, -1000, 202, 201, 1591, 48909,
	5012, 1981, 34283, 1346, 1990, 48523, 31225, 1960, 33897, 48137,
	-1000, -1000, 1077, -1000, -1000, 47751, 200, 199, 193, 192,
	191, -1000, 190, 47365, 188, 187, 182, 180, 174, 166,
	163, 159, -1000, 155, 153, 148, 137, 133, 128, 125,
	124, 122, 121, 118, 117, 103, 96, 95, 94, -1000,
	7115, 88, 82, 76, -1000, 1330, 74, 68, 67, 65,
	64, -1000, -1000, 62, 57, 56, 54, 53, 52, -1000,
	173, 51, 47, 46, 45, 44, -1000, 1110, 551, 1949,
	13527, 1279, 1258, 1253, 1251, 1247, 784, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51949, 49289, 41, -30, 40,
	-1000, 2331, 839, 24231, 838, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36207, 35821, 35435,
	29699, 46979, 46593, 10648, 10648, 957, -1000, -1000, -1000, -1000,
	-1000, -2, 32751, 49289, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 302, -1000, -1000, -1000, -1000,
	-1000, -1000, 20649, 537, 20226, 314, 19803, 254, 459, -1000,
	-1000, -1000, 300, -1000, -1000, -1000, -1000, 1262, -1000, -1000,
	-1000, -1000, 46207, 45821, 2201, 45435, 29303, 28907, 45049, 1776,
	1774, 44663, -1000, -1000, 44277, -1000, -1000, 2123, 1948, 1919,
	35049, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43897, 43511, 43125, 42739, 42353, 28511, 28115, 643, -1000, -1000,
	-1000, -1000, 25389, -1000, -1000, -1000, -1000, -1000, 38, -1000,
	37, 36, -1000, 35, 34, 33, 32, 29, 28, 27,
	24, -1000, 21, 20, -1000, 15, 14, -1000, 13, 12,
	1371, 1484, 1561, 41967, 1061, 1759, -1000, 1515, -40, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49289, -1000, 21058, 316,
	-1000, 640, -1000, 1907, -1000, 21058, 316, -1000, 1511, 158,
	1302, -1000, -1000, -1000, 1320, 1086, -1000, -1000, 49289, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2581, 1416, 639, 41581,
	-1000, 1679, -1000, 768, 14345, -1000, 874, -1000, 14345, 299,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1902, 1243, 2512, 27719,
	1490, 2323, 2108, 2578, 1636, 2103, 2098, 2087, 2079, 2077,
	2575, 1133, 2574, 1051, 869, 2573, 2058, 2035, 2557, 1523,
	935, 2572, 2571, 2032, 1905, -1000, -1000, -1000, -1000, 1105,
	-1000, -1000, -1000, -1000, -1000, -1000, 38113, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1664,
	2330, 2330, 2330, 2375, 436, 418, -1000, 173, -1000, 1860,
	-1000, 1390, -1000, -1000, -1000, 58245, -1000, -1000, 21058, 21058,
	21058, 21058, 21058, 1227, -1000, -1000, -1000, 671, -1000, 638,
	552, 11876, -1000, -1000, 2505, -1000, -1000, -1000, 442, 21058,
	-1000, 298, -1000, -1000, -1000, -1000, 637, 2562, -1000, 850,
	-1000, -1000, -1000, 725, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2001, 594, 593, -1000, 585, 584, 578, -1000, -1000,
	-1000, 634, 631, 628, 627, 626, 622, 621, 613, -1000,
	-1000, -1000, 1185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 796, -1000, 796, 796, 556, 556,
	612, 611, 567, 610, -1000, -1000, 609, 556, 608, 605,
	-1000, -1000, 604, 727, -1000, 719, 603, 598, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1518, -1000, -1000,
	1518, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 956, 50809,
	-1000, -1000, -1000, -11, 49289, -1000, 459, -11, -1000, -1000,
	597, -1000, 15177, 15177, 15177, -1000, -1000, 1510, 21058, -1000,
	2214, -1000, 3934, -229, 595, 25003, 709, 709, -1000, 23073,
	678, 27323, -1000, 594, 593, 585, 584, 578, -1000, 295,
	-1000, -1000, -1000, -1000, -1000, 1712, 2183, 958, -1000, 1152,
	2178, -1000, 2953, 2177, 1143, -1000, -1000, 780, 2176, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1347, -1000,
	-1000, 1957, 2173, -177, 2064, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1535, -1000, 30079, 32751, -13, -1000, -1000, -95,
	-1000, 10254, 58245, -1000, -1000, -1000, 58245, 731, -1000, -1000,
	2172, -1000, 58245, 730, -1000, -1000, 2171, -1000, 1900, 49289,
	10648, 49289, 49289, -1000, 577, 1609, 1504, -1000, -1000, 32371,
	2953, 1608, -1000, -1000, 741, 1607, -1000, -1000, 1605, -1000,
	459, -1000, -1000, 41195, 51569, 741, 1603, -1000, -1000, -1000,
	38113, -1000, 49289, -1000, 49289, -1000, 1078, -1000, 51189, 143,
	2168, -1000, -1000, 143, 2162, -1000, 143, 2153, -1000, 142,
	2147, -1000, -1000, 1392, 2144, -1000, -103, 2134, -1000, -1000,
	-103, 2130, -1000, -1000, 21058, -20, -1000, -1000, -1000, 839,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40809, 30079, -1000,
	-1000, 32371, 49289, 34663, 765, 58245, -1000, 2442, 59147, 30079,
	58245, -1000, 32371, 49289, 1980, -1000, 40423, 40037, 2338, 767,
	-1000, -1000, 49289, -1000, 21058, -1000, 2436, 1653, -67, -1000,
	-1000, -1000, -1000, -1000, 1650, 1671, 868, 1336, -1000, 14345,
	14345, 2247, -1000, 286, 10648, -1000, -1000, 1015, 1714, -1000,
	-1000, -1000, -1000, -1000, 39651, -1000, -1000, -1000, 1386, 49289,
	-1000, -1000, 1962, -1000, 31991, 49289, -1000, 49289, -1000, 49289,
	-1000, 49289, -1000, 49289, -1000, -1000, -1000, -1000, -1000, 1993,
	1237, 1956, -1000, 49289, -1000, 49289, -1000, -1000, -1000, 1644,
	-1000, -1000, -1000, 39271, 38885, 38499, -1000, -1000, 1182, -1000,
	997, -1000, -1000, 144, -1000, -1000, 1664, -1000, 1389, 1724,
	19380, 1730, 21058, 173, -1000, -1000, 173, 173, 13104, -1000,
	-1000, -1000, 49289, -1000, 58937, 59147, 10648, 968, 21058, 21058,
	21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058,
	21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058,
	21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058, 21058,
	21058, 21058, 21058, 1638, 21058, 955, 21058, 21058, 21058, 21058,
	1532, -1000, -1000, 1335, 492, 1354, -1000, 2499, 2499, 2499,
	58606, 58606, 545, 671, -1000, 21058, -1000, 316, 21058, 418,
	56010, 1600, -3, 11467, -1000, -1000, -1000, -1000, 18957, 789,
	58245, 9860, 11044, -1000, 2551, 1054, 1926, 1834, 576, 714,
	712, 708, 579, 564, 21058, 21058, 21058, 21058, 21058, 21058,
	21058, 21058, -1000, -1000, -1000, -1000, -1000, -1000, 2505, -1000,
	18548, 18125, -1000, 2550, 17702, 17279, -1000, 16856, 6729, 16433,
	965, 964, 963, 962, 21058, 12285, -1000, -67, -1000, 50809,
	-1000, 49289, -11, 2427, 21058, 139, -1000, 56873, -1000, 139,
	139, 574, -21, 58245, 1721, 1720, 24617, 1675, 1248, 1248,
	1248, -1000, 571, 660, 709, 7477, 16010, 570, 709, 709,
	255, 36973, 1285, 36973, 307, 416, 22687, 2214, -1000, -1000,
	49289, 10648, -18, 1313, -1000, 33511, 2301, 2287, 2269, 1069,
	-1000, 1041, 2367, 38113, 2395, 316, 2300, 1898, -1000, -1000,
	953, 38113, 2953, -1000, 59147, -1000, 1756, 2366, 1099, 1092,
	1099, 1099, 1087, 38113, 952, 1216, 30079, 2299, 947, -19,
	2393, 316, 2295, 1897, 946, -1000, -1000, 49289, 10648, 2294,
	990, 701, -13, 32751, 49289, 281, -1000, 21058, 316, 21058,
	316, 1029, -27, 279, 1727, 1685, 255, -1000, 33131, 2415,
	2129, 49289, 945, -1000, 2953, 2122, -1000, 1212, -1000, 2120,
	2118, 2413, 1485, 1585, -1000, -1000, -1000, 1463, 1584, 967,
	2111, 786, 181, 2411, 181, 26551, -1000, 49289, -1000, 49289,
	-1000, -1000, 49289, -1000, 49289, -1000, 49289, -1000, 49289, 49289,
	-1000, 49289, 30079, 30079, 30079, -35, 3168, 30839, 733, 943,
	-22, -1000, 821, 33131, 3515, -37, -1000, 1053, -1000, -1000,
	-1000, 367, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 796,
	569, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 567, 1185, 556, 556, 556, -1000, -1000,
	-1000, 727, -1000, 719, -1000, -1000, -1000, 796, 796, -1000,
	-1000, -204, 1887, -95, 34663, 701, -1000, 701, -1000, 1951,
	-1000, 2305, 739, -38, 864, -67, -1000, 1518, -1000, 1146,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2561, -1000, 2524, -1000, -1000, 2547, -15,
	-1000, -15, -1000, 10648, -1000, 49289, 1947, -1000, -1000, -1000,
	-1000, -1000, -1000, 49289, -1000, 49289, -1000, -1000, -1000, -1000,
	-1000, -1000, 602, -1000, 1933, -1000, 3168, 278, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49289, 49289, 49289, -1000,
	38113, -1000, -1000, -1000, -1000, 58245, -1000, 465, -1000, -1000,
	58245, 1103, 1732, -1000, 1732, -16, -1000, 56801, 1705, 49289,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 762, 913, 913, 992, 992, 992, 992, 2559,
	276, 3162, 3107, 4910, 4910, 4910, 4910, 4910, 4910, 4910,
	4910, 1478, 386, 386, 1478, 1478, 1478, 1478, 1478, 386,
	386, 386, 4910, 4910, 4910, 58606, 58317, 5215, 21058, 21058,
	942, 1328, 492, 5215, 21058, 5215, 5215, 5215, 5215, -1000,
	1317, -1000, -1000, -1000, -1000, 1885, 555, 6729, 6729, -1000,
	-1000, -1000, 11876, 21058, -1000, -1000, -1000, -1000, 552, 21058,
	-1000, 56083, -246, 414, -123, 277, 49289, 21058, 659, -52,
	-1000, 1081, -1000, 21058, 273, -1000, -1000, -36, 21058, 21058,
	21058, 401, -1000, 391, -1000, 941, -1000, 939, 938, 937,
	-1000, 550, 1241, 549, 548, 21058, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57956, 53477, 53188, 53049,
	5505, 52756, 52717, -55, -57, 390, -1000, 1877, -123, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 389, -1000, 384, -60,
	-1000, -65, -1000, 383, -1000, 57884, -123, 382, 5649, -1000,
	6729, 6729, 6729, -1000, 375, -1000, 56512, -1000, 761, 759,
	756, 755, 57595, 15587, 15587, 15587, 374, 57523, 21058, -123,
	-1000, -1000, 547, -66, 786, 15177, 23845, 10648, -1000, 786,
	786, 21058, -1000, 21058, 24617, 24617, 1571, 1718, 24617, -1000,
	-1000, -1000, -1000, 36973, 558, 709, 36973, -1000, 2505, 1703,
	-1000, 373, -1000, 14768, 36973, 36973, 10648, -1000, -1000, 49289,
	459, -1000, -1000, 709, 370, 272, 1978, 49289, 49289, 49289,
	-1000, -1000, 1582, 50429, 1575, 59147, 49289, -1000, -1000, 546,
	544, 1690, 1680, 49289, 49289, 50049, 49669, 49289, 1311, 21058,
	1236, 1499, 316, -1000, 751, 543, 49289, 1134, -1000, -1000,
	-1000, -1000, -1000, 49289, -1000, -1000, 2519, -1000, 1099, -1000,
	-1000, -1000, 1099, 2953, 1130, 49289, 30079, 779, 750, 49289,
	1218, 316, -1000, 748, 542, 10648, 1168, -1000, 744, 49289,
	1819, -1000, 1530, -1000, -1000, 9466, 58245, -1000, 58245, -1000,
	-1000, -1000, 10648, 1768, 1768, 369, -17, -1000, -1000, -1000,
	-1000, -1000, -1000, 1760, 49289, 625, 49289, 316, 49289, 129,
	30079, 49289, 30079, 30079, 30079, 316, 49289, 2106, 49289, 2102,
	2112, 689, 49289, 1290, 21058, 1179, -1000, 25775, 810, 49289,
	1117, 75, -1000, -1000, -1000, 31, 49289, -1000, -1000, 143,
	143, 143, -1000, 142, 1392, -1000, -103, -103, -1000, -1000,
	-1000, 1870, 37733, 49289, 2463, 30079, -68, -1000, 833, 910,
	908, -1000, 59147, -1000, 670, 954, -1000, 2517, 538, 2505,
	-1000, 733, 49289, 73, -1000, 776, 1333, -1000, 14345, 14345,
	-1000, 1518, -1000, -1000, 1151, -1000, 1165, -1000, -1000, -1000,
	-1000, 14345, -1000, -1000, 989, -95, -95, -1000, -1000, 197,
	-1000, 49289, -1000, -1000, -1000, -1000, 1103, -1000, 21058, -1000,
	-1000, -1000, 13104, -1000, -1000, -1000, 49289, -216, 21058, 5215,
	5215, 21058, 6729, 6729, -1000, 5215, -1000, -1000, -1000, -1000,
	-1000, 1869, 536, 21058, 59147, 4101, 3897, -71, 1478, -1000,
	21058, -1000, 9072, -73, 55721, -1000, -1000, 669, 2187, -1000,
	21058, 57234, 8678, 365, 13936, -1000, 57162, -54, -54, -1000,
	2560, 1610, 1481, 1224, 1091, 2514, -1000, 26937, 787, 1290,
	55648, 58937, 59147, 21058, 21058, -1000, 21058, 21058, 21058, -1000,
	-1000, 2505, -1000, 21058, -1000, -1000, -1000, -1000, -1000, 1867,
	21058, -1000, 58937, 59147, 6729, 6729, 6729, 6729, 6729, 6729,
	6729, 6729, 6729, 6729, 6729, 6729, 6729, 6729, 6729, 6729,
	6729, 6729, 6729, 1702, 6729, 2484, 2484, 2484, -1000, 1931,
	1867, 21058, 21058, -1000, -1000, -1000, -1000, 59147, 363, 362,
	361, -1000, 21058, -123, 3515, -1000, 1833, -1000, -143, -1000,
	2214, -1000, -1000, 1833, 1833, -76, 58245, -1000, 1571, -1000,
	533, 21058, 24617, -1000, 657, -1000, -81, -1000, 36973, -1000,
	646, -240, -1000, 697, -1000, 709, 360, -1000, -1000, -1000,
	271, 459, -1000, 36973, -1000, 10648, -1000, -1000, 933, 925,
	-1000, 2101, -1000, 1572, -1000, 815, -1000, 1164, 21058, 23459,
	532, 531, 1307, -1000, 2094, 1392, 2088, 1392, -1000, -1000,
	721, -1000, 58245, 527, 526, -1000, -18, 1273, -1000, 26171,
	21058, -1000, 921, -1000, -1000, -1000, 2953, 918, -1000, -1000,
	1195, 26171, -1000, -1000, -1000, 26171, 21058, -1000, -19, 916,
	26171, 2049, 733, 1866, 983, -1000, -1000, -1000, -1000, -1000,
	-1000, 1752, 33131, 49289, 524, 49289, 520, -1000, -1000, 519,
	49289, 701, 2953, -1000, 741, -1000, -1000, 820, 10648, 518,
	10648, 1658, 689, 30459, -1000, 741, 1724, -1000, 58245, -1000,
	1117, 12694, 2289, -82, -1000, 261, -1000, -1000, -1000, 786,
	26551, 24617, 21058, 2569, -83, -1000, -1000, -1000, -1000, -1000,
	316, -49, 515, -1000, 695, 694, -95, 1301, 1759, 1759,
	-1000, 2509, -1000, 645, 350, 2505, 343, -1000, -95, 49289,
	-1000, 1297, 10648, 49289, 49289, 10648, 49289, -1000, -1000, -67,
	-1000, -1000, -1000, -1000, 49289, -1000, -1000, -1000, 1327, 55359,
	-1000, 2304, 10648, 2492, 5215, 3091, 405, 21058, 59147, 58678,
	-84, 21058, 21058, -1000, 624, 58245, -1000, -1000, -1000, -1000,
	-1000, -1000, 58245, 21058, 260, -1000, 2555, 21058, 340, 334,
	333, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 330,
	-1000, -1000, 52329, -1000, 21058, 329, -1000, 328, 326, 6207,
	364, 55286, 54997, 54924, 322, 58245, 1931, 58245, -1000, -1000,
	747, 747, 1075, 1075, 1075, 1075, 2484, 596, 623, 455,
	415, 415, 415, 438, 656, 656, 415, 415, 415, 1863,
	1552, 514, 4411, -1000, -1000, 58245, 58245, 319, -1000, -1000,
	-1000, -123, 318, 1830, 2364, -1000, 24617, 1830, 1830, -1000,
	-1000, 49289, 58245, -1000, -229, -1000, 2505, -1000, -1000, 1703,
	-1000, 7885, 36973, 709, 10648, -1000, -1000, 140, 49289, 49289,
	49289, 2083, -1000, 3384, -1000, 54635, -93, -1000, 2319, 2319,
	21058, 255, -1000, -1000, 512, 23459, 49289, -1000, 1289, 1710,
	853, 49289, -1000, 49289, -1000, -1000, 49289, 49289, 49289, 49289,
	49289, -1000, 511, -96, 49289, 49289, 30079, -1000, -1000, -98,
	10648, -1000, 2293, -1000, 30079, 914, 1218, 1802, -1000, 510,
	23459, 509, 49289, 33131, 2404, -1000, 733, -1000, -1000, 507,
	1845, 1453, 23459, 1449, 1661, 689, 30459, -1000, 967, 1117,
	-1000, -1000, -78, -1000, 505, 316, 49289, 2566, 1290, -1000,
	-94, 58245, -1000, 690, -1000, 37353, 37353, 30079, 30079, -1000,
	2234, 2229, 559, -1000, -1000, 317, -1000, -95, 1706, -1000,
	-1000, 1220, 1529, -1000, -1000, -1000, -1000, -1000, 2304, 21058,
	21058, 58678, -101, -1000, 5215, 5215, -1000, 58245, 8284, -1000,
	57162, -1000, -1000, -1000, -1000, 1221, -1000, 54562, -1000, -1000,
	-1000, 21058, 21058, -1000, -1000, -1000, -1000, -1000, -1000, 6729,
	1856, 497, 59147, -1000, -1000, 738, 21058, 21058, 2214, 738,
	738, -106, 709, -1000, -1000, -1000, 2505, -1000, 36973, 140,
	10648, -1000, -1000, -1000, 49289, -1000, 49289, -1000, 10648, 49289,
	1853, 1566, -1000, -1000, 1677, 493, 6729, 49289, 735, -1000,
	1286, 23459, 2304, 10648, 2304, 54273, 11044, -113, -116, 1564,
	-1000, -1000, 1562, 21058, -1000, 59147, 1392, 1392, -124, -126,
	-1000, 912, 905, 21058, 893, -1000, -1000, -1000, 890, -1000,
	737, -103, 26171, -1000, -1000, 1231, 23459, -127, 23459, -129,
	311, 316, -1000, 23459, -1000, 49289, -141, 49289, -1000, 689,
	30459, -1000, 2112, -1000, 2207, 49289, 2263, -1000, -1000, -1000,
	1724, 492, -1000, -147, -1000, -1000, 489, 488, -1000, -1000,
	-115, -1000, 720, 717, -1000, -1000, -1000, 10648, 984, -1000,
	5215, 5215, -1000, -1000, -1000, 310, 1290, 2346, -1000, 54200,
	53911, 5886, 6729, 59147, -148, -1000, 49289, 58245, -123, -1000,
	-1000, -1000, 36973, 77, -1000, -1000, 1507, -1000, -1000, -1000,
	49289, 1555, -1000, -1000, 21058, 4411, 486, 21058, -1000, 1752,
	481, -1000, -1000, -1000, -1000, -1000, -1000, 2319, -36, -1000,
	1153, -1000, -1000, 58245, 2317, -1000, -1000, 479, 478, 49289,
	49289, -54, 477, 476, 26171, -1000, 49289, -149, 1286, -156,
	-1000, 1752, -1000, -158, 820, -1000, 474, 30459, -1000, 1658,
	982, -159, 49289, 1117, -1000, -1000, 30079, 30079, 1706, -1000,
	49289, -1000, 49289, -1000, 49289, -1000, 1135, 21058, -1000, -1000,
	5886, -161, -1000, -118, -1000, 2401, -1000, -1000, -1000, -1000,
	2078, 53838, 1634, 49289, 53549, 1218, 49289, 2304, 309, 49289,
	818, 10648, 1220, 1220, -1000, -1000, 308, 21058, 21058, -1000,
	471, -1000, 1752, 1286, 1218, 1286, 463, 23459, -1000, 1661,
	1068, -1000, 786, -1000, -1000, -170, -171, -1000, -173, -179,
	-1000, 306, 21876, 21876, -123, -1000, 49289, 462, 1991, -1000,
	1321, 1337, 305, 846, -1000, -182, -1000, -1000, 459, -1000,
	21058, -1000, -184, -1000, 808, -187, -1000, 804, 2555, -189,
	-190, 49289, 1218, 1752, -1000, 1752, 23459, -195, -1000, 26551,
	-1000, 733, 733, -1000, -1000, -1000, -1000, -1000, 22285, 1483,
	1096, 56440, -1000, -1000, -1000, 49289, -1000, 1435, 1400, 1109,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1634, 58245, -1000,
	1220, 1800, -1000, 1220, 1854, -1000, -1000, -197, -1000, 1218,
	1218, -198, -1000, -200, -1000, -1000, 2451, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2216, -1000, 841, 1476, 1476, 1321,
	-1000, 453, -1000, 452, 1379, -1000, -1000, 1286, -1000, 21467,
	-1000, 2471, -1000, -1000, 1704, -1000, -1000, 21058, 21058, -1000,
	-1000, -1000, 1752, -1000, -1000, -1000, -1000, -205, -213, 1218,
	1218, 870, -1000, -1000, 441, 21058, -214, 1218, -1000,
}
var sqlPgo = [...]int{

	0, 3067, 3063, 2013, 3062, 2517, 3060, 3059, 3057, 3056,
	3055, 2507, 3052, 3047, 3045, 3044, 3041, 3039, 3038, 3032,
	3031, 3030, 3029, 3024, 3022, 3021, 3019, 3018, 3016, 3013,
	3011, 3010, 2497, 3008, 2476, 3006, 3003, 2996, 2993, 2987,
	2984, 2973, 2969, 26, 2966, 2964, 2962, 2958, 2457, 2957,
	2956, 2450, 2952, 2950, 2448, 2945, 2942, 2941, 2441, 2422,
	2940, 2937, 2397, 2935, 2933, 2345, 2932, 2340, 2931, 2929,
	2330, 2928, 110, 113, 2926, 2303, 2925, 2924, 2271, 2269,
	2230, 2923, 2205, 2919, 2918, 2194, 2157, 2916, 114, 2914,
	2913, 2910, 2906, 2076, 2053, 2905, 2903, 2902, 168, 2901,
	2024, 2900, 2899, 2898, 2897, 2896, 2895, 2893, 2888, 2887,
	2886, 2884, 2881, 2879, 2878, 2876, 2865, 2863, 2861, 2860,
	2859, 2855, 2850, 2848, 2843, 2842, 2840, 181, 118, 2838,
	2837, 2021, 2001, 2835, 2834, 55, 52, 17, 80, 129,
	172, 4654, 152, 2833, 2832, 2830, 2827, 2825, 31, 121,
	120, 122, 119, 2825, 92, 2824, 2823, 62, 49, 21,
	20, 82, 2822, 2821, 2820, 2075, 99, 2818, 2817, 173,
	163, 2813, 417, 36, 100, 73, 95, 240, 56, 2812,
	101, 18, 2811, 124, 106, 2808, 59, 34, 22, 3219,
	98, 74, 93, 218, 178, 150, 149, 126, 372, 2807,
	174, 58, 145, 2803, 2800, 2799, 61, 143, 7, 3,
	141, 8, 2795, 10, 2794, 11, 2792, 2787, 2786, 2785,
	29, 111, 48, 37, 2783, 50, 30, 137, 2782, 170,
	2780, 64, 176, 146, 1, 161, 2779, 77, 14, 75,
	2776, 2775, 90, 160, 2774, 32, 123, 86, 102, 182,
	154, 89, 151, 157, 2773, 2768, 2763, 130, 2762, 138,
	108, 2760, 2758, 112, 25, 2756, 39, 159, 44, 2755,
	2754, 109, 2752, 147, 2751, 2750, 180, 103, 128, 5,
	54, 78, 9, 158, 105, 65, 71, 2747, 3255, 1612,
	1445, 43, 2746, 88, 68, 33, 81, 116, 169, 38,
	2745, 2743, 288, 2742, 2738, 2736, 127, 2735, 2726, 2725,
	94, 171, 104, 2724, 97, 47, 96, 153, 135, 175,
	125, 2723, 136, 83, 144, 2722, 57, 2721, 1991, 2718,
	140, 2717, 2711, 2705, 2704, 72, 2703, 2700, 2699, 1501,
	2697, 91, 2696, 139, 134, 156, 107, 117, 165, 164,
	445, 2693, 142, 40, 2685, 326, 24, 0, 3689, 3175,
	2681, 148, 87, 2676, 2670, 2668, 2664, 35, 12, 4,
	6, 15, 13, 28, 27, 79, 2663, 2652, 85, 131,
	2642, 179, 155, 2640, 2639, 2634, 51, 2626, 19, 2621,
	16, 2620, 2618, 23, 2, 2615, 2614, 162, 2613, 2611,
	2604, 2383, 2603, 177, 2602, 2598, 2591, 2589, 2588, 2066,
	2586, 2585, 42, 45, 133,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	402, 402, 152, 152, 151, 147, 147, 405, 405, 406,
	406, 154, 154, 154, 156, 156, 153, 153, 32, 32,
	86, 86, 86, 138, 138, 79, 79, 79, 74, 74,
	355, 355, 356, 356, 134, 134, 135, 135, 135, 135,
	136, 136, 137, 137, 137, 46, 34, 34, 34, 34,
	34, 34, 34, 35, 35, 35, 35, 36, 36, 36,
	36, 36, 36, 37, 37, 37, 37, 37, 37, 44,
	44, 128, 128, 47, 47, 47, 47, 47, 47, 47,
	47, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 58, 58, 56, 59, 59,
	60, 60, 60, 60, 60, 60, 61, 61, 61, 61,
	61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 68, 68, 68, 69, 69, 69, 66, 66,
	66, 64, 64, 64, 63, 63, 63, 67, 67, 67,
	65, 65, 65, 233, 233, 70, 70, 70, 70, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 73, 73, 73, 73, 73,
	73, 73, 73, 325, 325, 71, 71, 300, 300, 75,
	75, 258, 258, 76, 76, 76, 76, 76, 77, 77,
	77, 77, 87, 87, 87, 87, 401, 401, 227, 227,
	169, 169, 169, 169, 82, 82, 82, 82, 83, 83,
	83, 84, 84, 133, 133, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	43, 94, 94, 94, 96, 93, 93, 93, 95, 95,
	95, 95, 97, 97, 98, 98, 98, 98, 98, 98,
	99, 99, 349, 349, 236, 236, 347, 347, 348, 348,
	204, 204, 204, 204, 204, 205, 205, 205, 354, 354,
	354, 354, 354, 354, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 118, 118, 118, 127, 127,
	127, 127, 127, 127, 127, 120, 120, 120, 111, 111,
	101, 101, 107, 107, 107, 107, 107, 102, 102, 108,
	108, 110, 110, 112, 112, 112, 112, 112, 112, 103,
	103, 103, 103, 114, 114, 114, 114, 113, 113, 123,
	123, 123, 123, 123, 123, 123, 313, 313, 119, 119,
	119, 119, 122, 122, 122, 122, 117, 117, 117, 121,
	121, 124, 124, 124, 124, 104, 104, 105, 105, 106,
	106, 125, 125, 116, 116, 126, 126, 126, 126, 126,
	126, 126, 115, 115, 115, 404, 404, 109, 399, 399,
	397, 397, 397, 397, 397, 397, 397, 398, 398, 400,
	400, 80, 80, 80, 52, 52, 53, 53, 206, 206,
	207, 207, 281, 281, 281, 281, 208, 208, 155, 155,
	155, 211, 212, 212, 209, 209, 210, 210, 210, 214,
	214, 213, 216, 216, 215, 280, 365, 365, 366, 366,
	366, 366, 366, 366, 366, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 363, 363, 363, 364, 361,
	361, 362, 362, 362, 362, 407, 407, 279, 279, 220,
	220, 368, 368, 368, 368, 369, 369, 369, 369, 369,
	372, 371, 370, 370, 370, 370, 370, 309, 309, 309,
	57, 57, 57, 247, 247, 246, 246, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	130, 130, 54, 54, 54, 161, 161, 51, 51, 51,
	55, 55, 50, 50, 50, 50, 50, 264, 264, 262,
	262, 225, 225, 315, 315, 315, 173, 173, 148, 148,
	148, 20, 22, 22, 16, 16, 16, 16, 16, 16,
	29, 29, 30, 30, 26, 26, 263, 263, 265, 265,
	81, 81, 85, 85, 85, 91, 91, 129, 129, 129,
	129, 129, 129, 129, 33, 33, 33, 33, 45, 45,
	45, 45, 89, 410, 410, 410, 90, 90, 409, 409,
	168, 168, 168, 168, 170, 170, 276, 276, 277, 277,
	411, 411, 278, 278, 278, 163, 162, 164, 164, 49,
	49, 49, 157, 157, 158, 158, 159, 159, 160, 160,
	412, 412, 78, 78, 78, 132, 132, 200, 200, 273,
	273, 273, 221, 221, 178, 178, 275, 275, 274, 274,
	274, 245, 245, 245, 131, 131, 230, 230, 238, 238,
	239, 239, 321, 321, 240, 88, 88, 141, 141, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 142, 142,
	142, 142, 142, 142, 142, 145, 145, 145, 145, 146,
	146, 146, 144, 144, 379, 379, 379, 381, 381, 382,
	378, 378, 380, 380, 408, 408, 249, 249, 249, 218,
	219, 217, 217, 413, 413, 223, 223, 222, 224, 224,
	314, 314, 314, 243, 243, 243, 243, 268, 268, 266,
	266, 267, 267, 269, 269, 270, 270, 270, 271, 271,
	272, 272, 242, 242, 296, 296, 143, 143, 143, 229,
	229, 229, 231, 231, 286, 286, 286, 287, 287, 285,
	285, 285, 285, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 395, 395, 395, 396,
	396, 312, 312, 317, 317, 317, 317, 317, 317, 310,
	310, 311, 311, 322, 323, 323, 252, 252, 252, 252,
	250, 250, 251, 251, 318, 318, 318, 318, 244, 244,
	319, 319, 319, 282, 282, 326, 326, 326, 341, 341,
	228, 228, 228, 336, 336, 327, 327, 327, 327, 327,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 330, 330, 330, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 340, 340, 340, 340, 340, 331, 331,
	337, 338, 332, 333, 339, 339, 339, 339, 343, 343,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 335,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 260, 260, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 290, 290, 290, 290,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 373, 373, 373, 373, 373, 373, 373,
	373, 376, 376, 377, 377, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 383, 383, 384, 384, 386, 386,
	387, 387, 388, 389, 389, 389, 390, 391, 391, 385,
	385, 392, 392, 392, 393, 393, 394, 394, 394, 394,
	394, 302, 302, 308, 308, 308, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 171, 171, 171, 171, 171, 235, 235, 234,
	234, 299, 299, 297, 297, 301, 301, 253, 253, 342,
	342, 342, 342, 342, 342, 342, 254, 254, 254, 261,
	255, 255, 256, 256, 256, 256, 256, 293, 294, 257,
	257, 257, 295, 295, 303, 307, 307, 306, 305, 305,
	304, 304, 283, 283, 284, 284, 241, 241, 414, 414,
	237, 237, 320, 320, 320, 320, 202, 202, 232, 232,
	201, 201, 195, 195, 196, 196, 196, 196, 226, 226,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 344, 344, 344, 345, 346, 298, 188, 187, 175,
	176, 186, 185, 184, 174, 177, 181, 182, 183, 179,
	180, 191, 190, 189, 324, 197, 197, 198, 198, 198,
	199, 199, 199, 199, 172, 172, 192, 192, 193, 194,
	194, 165, 165, 165, 166, 166, 167, 167, 353, 353,
	351, 351, 351, 352, 352, 352, 352, 350, 350, 350,
	350, 350, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 2,
	0, 1, 1, 0, 2, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 1, 12, 12, 2, 7, 2,
	1, 1, 1, 3, 3, 0, 3, 1, 3, 1,
	1, 3, 2, 5, 0, 5, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 3, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 6,
	6, 1, 1, 1, 2, 1, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 1, 7, 3, 8, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 3, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 5, 6, 5, 1, 0, 2, 3,
	3, 3, 6, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 2, 3, 2, 3, 7, 7, 8, 10, 7,
	4, 5, 5, 5, 3, 1, 1, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 8, 11, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 5, 5, 2, 8, 9, 6, 5, 3,
	1, 4, 7, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 7, 3, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	4, 2, 4, 7, 3, 3, 0, 3, 6, 3,
	6, 3, 13, 16, 9, 12, 4, 2, 0, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 7, 3, 4, 3,
	4, 3, 4, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 2, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 2,
	2, 1, 5, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 423, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 257, 264, 285, 287, 289, 298,
	-40, -39, 117, -139, -141, 283, -83, -84, -93, -94,
	-95, -96, -133, 316, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	319, -33, -45, -90, -89, 364, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 420, 284,
	374, 37, 328, 65, 111, 293, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 391, 399, -145, -143, -144,
	-146, 305, 382, 341, 424, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 2, 341, 385, 306,
	375, 92, 167, 269, 255, -397, 2, 4, -359, -357,
	-196, -195, 341, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 232,
	234, 247, 251, 261, 263, 271, 295, 322, 337, 353,
	354, 355, 361, 362, 382, 383, 387, 394, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 347, 349,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 219, 222, 220, 221,
	224, 225, 227, 226, 233, 235, 236, 238, 239, 242,
	243, 246, 249, 252, 253, 254, 255, 256, 257, 258,
	260, 262, 264, 266, 267, 268, 269, 270, 272, 273,
	275, 276, 277, 278, 279, 283, 281, 282, 284, 285,
	286, 287, 289, 291, 292, 293, 294, 296, 317, 318,
	330, 298, 299, 300, 301, 302, 303, 304, 308, 312,
	309, 310, 311, 306, 307, 313, 314, 316, 319, 321,
	323, 324, 327, 328, 329, 331, 334, 335, 336, 332,
	333, 326, 339, 340, 342, 343, 344, 345, 346, 348,
	350, 351, 356, 359, 360, 364, 365, 367, 368, 371,
	372, 373, 378, 374, 376, 379, 380, 381, 386, 392,
	393, 395, 396, 397, -194, -165, 413, -193, 423, 423,
	423, 2, 188, 189, 268, 267, 313, 314, -189, -192,
	-193, -194, -165, 4, -357, -359, 92, 240, 423, 423,
	423, 2, 341, 329, 115, 306, 375, 291, 385, -262,
	184, 92, 370, -165, 264, 24, 2, 101, 173, 373,
	372, 24, 260, 307, 343, 345, 2, 423, 423, 2,
	385, 306, 341, 167, 92, 375, 291, -183, 2, -165,
	-73, 2, 420, -72, -5, -48, -58, -62, -75, -70,
	-11, -32, -34, -54, -51, -59, -65, -67, -79, -78,
	-80, -82, -86, -85, -88, -93, -94, -100, -131, -132,
	78, 25, 107, 316, 117, 183, 2, -401, -227, 2,
	24, -169, -165, 78, 145, 305, 341, 2, 188, 189,
	2, -183, 2, -397, 2, 188, 189, 2, -401, -227,
	23, 2, -165, 2, 302, 319, -170, 2, 298, -165,
	423, 423, 423, 423, 423, 423, 209, 58, 295, 313,
	-98, 360, -97, 353, 300, -99, -349, 2, 222, -165,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 2, -127, 313, 329, 152, 36,
	58, 24, 63, 93, 146, 167, 168, 196, 73, 74,
	267, 209, 189, -313, 119, 314, 342, 301, 339, 360,
	78, 376, 292, -404, 118, 4, 92, 222, 315, 353,
	67, 346, 347, 423, 423, 423, -408, 2, 341, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	-140, -142, -141, 423, 423, 423, 423, 423, -222, -223,
	369, 181, 113, 245, -139, -141, 2, -379, -127, 313,
	2, 58, 24, -347, 2, -288, 240, -290, 411, 412,
	406, 228, 398, -302, 98, 216, 215, -292, -303, 114,
	295, 420, -199, -291, 426, 9, -376, -141, 31, 52,
	-197, -165, 7, 8, 5, 6, -172, -328, -298, -335,
	363, 125, 231, -373, -374, -198, 4, -357, -351, -329,
	-338, -333, -334, -336, 42, 48, 47, 350, 221, 308,
	309, 310, 311, 323, 378, 163, 40, 238, 239, 175,
	182, 61, 84, 85, 83, 88, 87, 89, 86, 315,
	375, 53, 30, 157, 158, 162, 232, 159, 59, -375,
	43, 94, 106, 135, 136, 176, 177, 178, 179, 191,
	192, 333, 356, 39, 41, 44, 54, 55, 96, 97,
	123, 124, 134, 147, 174, 180, 202, 234, 251, 261,
	271, 322, 337, 353, 354, 355, 361, 362, 383, -358,
	-339, 79, 126, 143, 172, 160, 185, 186, 190, 203,
	206, 223, 230, 248, 250, 290, 320, -409, 2, 360,
	360, 2, -409, 2, -409, 2, -168, 2, 360, 357,
	-410, 360, 394, -381, 272, -382, -183, -381, 423, 423,
	425, 423, -217, -218, -219, 2, 24, 104, 420, 2,
	-316, 2, 418, -318, -172, 198, -375, -141, -317, 420,
	-189, 241, -198, 84, 85, 88, 87, 89, 4, -165,
	61, 216, 215, -3, 2, -318, 157, -189, 2, -318,
	157, 2, -190, 157, -318, -192, 2, -355, 157, -353,
	9, -352, 5, 4, -357, -359, -358, 2, -174, -165,
	2, -201, 157, -189, -186, -350, 4, -357, -359, -358,
	-360, 24, 26, 27, 28, 29, 31, 32, 33, 34,
	45, 52, 53, 57, 60, 62, 73, 78, 83, 84,
	86, 85, 87, 88, 89, 98, 100, 102, 104, 105,
	108, 111, 113, 125, 127, 139, 141, 142, 145, 148,
	150, 161, 167, 171, 181, 183, 198, 201, 207, 210,
	211, 228, 229, 231, 237, 240, 241, 244, 245, 259,
	265, 274, 288, 305, 315, 325, 338, 341, 352, 357,
	358, 363, 369, 370, 375, 377, 384, 385, 388, 389,
	390, 391, -187, -350, 357, 425, -232, -195, -196, -226,
	-165, 422, -288, 2, -88, 2, -288, 157, 2, -88,
	157, 2, -288, 157, 2, -88, 157, 2, -220, 420,
	422, 341, 62, 2, -189, 157, -179, 2, -165, 109,
	-190, 157, 2, -192, -355, 157, 2, -355, 157, 2,
	-191, 2, -189, 167, 167, -174, 157, 2, -165, 24,
	142, 2, 183, 2, 183, 2, -319, 2, -318, -233,
	157, 2, -189, -233, 157, 2, -233, 157, 2, -202,
	157, 2, -201, -174, 157, 2, -356, 157, 2, -355,
	-356, 157, 2, -258, 420, -325, 2, -324, -352, 382,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 313, -138, 80,
	219, 240, 357, 425, -189, -288, -88, -300, 420, 142,
	-288, -88, 240, 142, 242, 2, 92, 341, 397, 24,
	-165, 2, 317, 2, 420, -98, 56, 360, -277, 2,
	-278, -162, -163, -164, 187, 266, 270, 397, -347, 357,
	403, 142, -347, -236, 422, -127, 2, 139, 377, 2,
	7, 2, -355, 2, 317, 2, 267, 314, 58, 142,
	2, 2, -399, 2, 240, 142, 2, 142, 2, 142,
	2, 142, 2, 142, 2, 2, 267, 314, 2, 359,
	197, 359, 2, 142, 2, 142, 2, 5, 2, 187,
	266, 330, 2, 341, 385, 306, 2, 2, 142, 2,
	142, 397, 2, -244, -318, -222, -223, -243, -266, -267,
	207, 127, 237, -249, 24, 104, -249, -249, 46, 421,
	421, -127, 317, 2, 10, 11, 60, 35, 411, 412,
	413, 414, 137, 415, 416, 409, 410, 408, 401, 402,
	405, 193, 194, 75, 404, 403, 68, 213, 297, 128,
	129, 130, 131, 280, 164, 165, 166, 13, 14, 15,
	28, 244, 206, 398, 160, 320, 406, 16, 17, 18,
	185, 186, 230, 38, 161, -171, -203, -288, -288, -288,
	-288, -288, 250, -241, -283, 418, -141, 420, 420, -141,
	-288, -302, -234, 420, -346, 7, -141, -297, 418, -304,
	-288, 422, 420, 5, 420, 5, -383, 392, 139, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 263, -343, 386, -343, -343, -330, 420, -330,
	420, 420, -331, 420, 420, 420, -330, 420, 420, 420,
	393, 399, 393, 399, 420, 420, -276, -277, -276, 357,
	-170, 425, -381, -220, 420, -237, -320, -288, 413, -237,
	-237, 240, -234, -288, 79, -252, 190, 223, 143, 203,
	290, 172, -346, -73, -285, 426, 420, -172, -375, -141,
	-165, -312, 399, -312, -141, -317, 420, -316, 413, -189,
	420, 422, -150, 281, -149, 22, 25, 107, 380, 120,
	-210, 169, 255, 114, 326, -403, 117, 299, 348, 349,
	281, 114, -246, -248, 32, 90, 225, 252, 49, 155,
	215, 216, 328, 114, 281, 391, 114, 117, 281, -152,
	326, -403, 117, 299, 281, -151, -210, 114, 426, 117,
	235, -355, -232, 425, 425, -350, 413, 114, 114, 114,
	114, 142, -226, -350, -189, -197, -165, -198, 420, -220,
	228, 240, -397, -247, -246, 228, -161, -378, 391, 228,
	228, -220, -176, 157, 2, -166, -165, -176, 157, -378,
	228, -319, -200, -189, -200, 316, -183, 32, -154, 425,
	51, 286, 114, -154, 114, -154, 114, -154, 425, 114,
	-154, 114, 425, 114, 114, -234, 421, 425, -355, -397,
	-226, -169, 78, 420, 32, -299, -326, -327, -328, -337,
	-332, -335, 42, 48, 47, 350, 221, 308, 309, 310,
	311, 323, 378, 163, 40, 238, 239, 175, 4, 41,
	-339, 182, 174, 176, 177, 178, 179, 180, 322, 39,
	271, 135, 136, 134, 106, 97, 96, 234, 44, 43,
	94, 353, 354, 355, 356, 191, 192, 55, 54, 383,
	333, -356, -397, -226, 139, -174, 2, -189, 2, 69,
	70, 397, -349, -234, 32, -277, 2, -411, 425, 205,
	-205, 212, 227, 151, 241, 395, -354, 5, 4, -298,
	-309, 98, 209, -335, 8, 412, -344, 7, 411, -348,
	-347, -348, 82, 422, -350, 341, 191, -349, 24, 318,
	2, -189, -400, 139, -398, 291, -397, -189, -189, -189,
	-189, -189, 139, 2, 359, 2, 139, -165, -165, 205,
	-189, 2, -191, 2, -190, 2, 341, 167, 341, -154,
	425, -243, -267, -266, -269, -288, 24, -272, 133, 224,
	-288, -290, -140, -140, -140, -224, -314, -288, 265, 167,
	-349, -341, -326, -340, 276, 277, 275, 279, 278, -326,
	-188, -350, 353, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, 206, 160,
	320, 38, 161, -288, 357, -288, -288, -288, -288, 220,
	228, 231, 363, 125, 371, 104, 235, -414, 338, 34,
	-295, -141, 420, -308, 29, 325, 24, -302, 295, 420,
	-283, -288, -284, -235, -234, 421, 32, 425, -235, -301,
	-297, -307, -306, 388, -350, 413, 421, -234, 384, 24,
	104, 413, 2, 7, -259, 396, 218, 95, 153, 217,
	-260, 304, -384, 132, 148, 420, 421, 2, 421, 2,
	421, 2, 421, 2, 421, 2, -288, -288, -288, -288,
	-288, -288, -288, -234, -346, -253, 2, -342, -234, 4,
	396, 218, 95, 153, 217, 304, -253, 2, 7, -234,
	2, -234, 2, -254, 2, -288, -234, -255, -289, -290,
	411, 412, 406, -302, -256, 2, -288, -235, 353, 353,
	353, 353, -288, 45, 201, 358, -257, -288, 142, -234,
	-170, -382, 32, -234, -229, 425, 142, 32, 4, -229,
	-229, 420, 421, 425, 190, 190, -316, -252, 190, -250,
	248, -250, -250, -395, 420, 419, -312, -175, 418, 427,
	-350, -235, 2, 420, -312, -312, 422, -311, -310, 32,
	-183, 246, -311, 421, -189, -350, 425, 357, -263, 73,
	62, -280, 157, 62, -361, -177, 73, -362, -165, 57,
	370, 265, 141, -263, 73, -263, 73, 73, 316, 329,
	46, -318, 35, -88, 71, 142, 357, -318, -248, -326,
	90, 215, 216, 46, -345, -344, 412, -345, 46, -345,
	-345, -345, 391, -190, -318, 357, 256, -355, 71, 357,
	425, 35, -88, 71, 142, 357, -201, -175, 71, 341,
	-323, -322, 400, -195, -165, 422, -288, -88, -288, -88,
	331, 421, 422, 185, 185, -206, -207, -165, -281, -280,
	-363, -364, -361, 184, 167, 370, 126, 32, 114, -226,
	357, 114, 256, 114, 114, 32, 240, 228, 240, 228,
	-157, 344, 114, -282, 389, -273, -88, 420, 98, 32,
	-273, -238, -239, -321, -240, -177, 420, -183, -189, -233,
	-233, -233, -201, -202, -174, -355, -356, -356, 421, -73,
	-324, -137, 391, 357, 391, 377, -207, -72, 25, 78,
	107, 421, 425, -228, 31, 418, -259, 420, -343, 420,
	-137, -322, 142, -227, -323, -323, 139, 70, 403, 357,
	421, 360, -278, -204, 270, 324, 282, 312, 8, 7,
	7, 425, -350, -189, 139, -226, -226, 313, -73, 139,
	-73, 422, -189, -201, -189, -318, -270, -344, 420, -271,
	295, 296, 425, -148, 33, 102, 195, -189, 397, -288,
	-288, 357, -414, 338, -295, -288, 220, 231, 363, 125,
	371, 104, 235, 142, 420, -289, -289, -234, -288, 419,
	429, 421, 422, -226, -288, 419, 419, 425, -305, -306,
	108, -288, 422, -413, 425, -222, -288, -234, -234, 421,
	421, 357, 357, 357, 357, 420, -389, 249, 420, 420,
	-288, 32, 425, 425, 425, 421, 425, 425, 425, 421,
	421, 425, 421, 142, 421, 421, 421, 421, 421, -261,
	259, 421, 10, 11, 411, 412, 413, 414, 137, 415,
	416, 409, 410, 408, 401, 402, 403, 68, 213, 297,
	13, 14, 15, 185, 161, -289, -289, -289, 421, -293,
	-294, 142, 139, 397, 397, 397, 397, 32, -257, -257,
	-257, 421, 142, -234, 420, 421, -282, -320, -231, 2,
	-316, -185, -350, -282, -282, -234, -288, -316, -316, -251,
	377, 240, 190, -316, -310, 421, -396, -346, -312, -311,
	-346, -287, -286, 140, 226, 421, -235, 2, -311, -311,
	-350, -183, -220, -312, 421, 422, -149, -189, -177, -184,
	-165, 228, -280, 157, -156, 228, -326, -184, 420, 420,
	195, 195, -177, -184, 157, -177, 157, -184, -184, -402,
	270, 236, -288, 208, 269, 229, -150, 281, -88, 397,
	420, -191, 281, -197, -345, -345, -246, 281, -190, -355,
	391, 397, -174, -151, -88, 397, 420, -175, -152, 281,
	397, -189, -134, 156, 235, 413, -350, -128, 5, 231,
	-128, 421, 425, 167, -176, 167, -182, -166, -88, -189,
	142, -355, -190, -355, -355, -355, -88, -189, 114, -189,
	114, -158, 110, -412, 403, -174, -223, -222, -288, -245,
	-275, 288, 240, -221, -178, -177, 382, -183, -245, -230,
	425, 142, 403, 422, -221, -154, -154, -154, -154, -154,
	142, -136, 243, -135, -165, 5, -226, 23, -355, 421,
	-326, 418, 419, 7, 7, 420, -346, -137, -226, 142,
	-41, 391, 269, 92, 341, 255, 167, -347, -347, -277,
	368, 66, 270, -347, 341, 313, -73, -165, -271, -288,
	-314, -189, 426, -288, -288, -289, -289, 142, 420, -288,
	-299, 28, 28, 421, -284, -288, 413, -350, 421, 421,
	-297, 111, -288, 352, -350, 413, 421, 384, -413, -413,
	-413, 5, 218, 153, 217, -260, 217, -260, -260, 7,
	-390, -180, 420, -165, 389, -222, 421, -341, -326, -288,
	-288, -288, -288, -288, -346, -288, -293, -288, -341, -326,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, 104,
	228, 235, -289, -294, -293, -288, -288, -326, 421, 421,
	421, -234, -72, -242, 148, -323, 425, -242, -242, 421,
	-251, 420, -288, -316, 419, 421, 425, -311, 419, 425,
	428, 403, -312, 421, 422, -220, -310, -350, 357, 357,
	114, 228, 379, -365, -362, -288, -225, -315, -177, -377,
	420, -165, -373, -374, -172, 420, 420, -147, 107, 316,
	-265, 114, -154, 114, -154, 395, 420, 420, 357, -263,
	73, -291, -172, -234, 357, 357, 256, -291, -291, -234,
	357, -291, 117, -137, 142, 340, -208, 170, -281, -166,
	420, -176, 420, 420, -220, -189, -323, -247, -161, -264,
	377, -175, 420, -175, -159, 200, -412, -353, -378, -268,
	-266, -245, -237, 229, 72, 421, 425, 422, -282, -239,
	-231, -288, 2, 421, -88, 425, 420, 403, 403, 242,
	-138, -138, 7, 419, 421, -346, 421, -226, 243, -186,
	-174, -189, -187, -201, -189, 241, 421, -148, -175, 28,
	28, -288, -299, 421, -288, -288, 419, -288, 422, 5,
	-288, 421, 421, 421, 421, -391, -165, -288, 421, 421,
	421, 425, 425, 421, 421, 421, 421, 421, -294, 142,
	104, 235, 420, 421, 421, -296, 150, 46, -316, -296,
	-296, -226, -285, -346, -286, -175, 418, -311, -312, -350,
	422, -177, -184, -280, 114, -366, 73, -367, 60, 126,
	78, 228, 231, 370, 265, 57, 98, 274, 32, 421,
	421, 425, -173, 60, -173, -288, 420, -225, -226, 228,
	335, 98, 228, 98, 91, 365, -177, -184, -226, -226,
	-189, -177, -184, 420, 421, -191, -190, -355, 421, -175,
	71, -356, 353, -209, -210, 161, 420, -225, 420, -226,
	-206, 32, -137, 420, 144, 240, -225, 240, -160, 199,
	-412, -353, -157, -245, -274, 420, 240, -88, -178, 2,
	-223, 403, -135, -136, -355, -355, 91, 91, 419, 421,
	-42, -43, 167, 73, 258, -212, -211, 255, 235, -148,
	-288, -288, 421, -350, 413, -413, -385, 255, 421, -288,
	-288, -289, 142, 420, -299, -386, 390, -288, -234, -386,
	-386, 421, -312, -346, -311, -280, -184, -188, -181, -165,
	126, 157, 231, 195, 420, -289, -189, 420, 2, -279,
	-407, 77, 336, -315, -148, -188, -148, 421, -234, 421,
	421, 231, 231, -288, -326, -154, -154, 421, 421, 357,
	357, -234, 357, 357, 397, -291, 253, -225, 421, -225,
	421, 421, -88, -225, -189, 421, -189, -412, -353, -158,
	105, -226, 73, -268, -295, 421, 420, 420, 425, 24,
	420, 24, 420, -187, 341, 421, -223, 46, 421, 421,
	-289, -299, 421, -387, -388, -180, -311, 419, -367, -181,
	228, -288, -167, 420, -288, -208, 420, -173, -413, 274,
	-405, 60, 420, 420, -177, -184, -413, 420, 420, -291,
	-189, 421, -279, 421, -208, 421, -264, 420, -353, -159,
	372, 229, 421, -184, -245, -356, -356, -43, -226, -226,
	-189, -392, 269, 296, -234, 421, 425, 32, 114, 421,
	-368, 214, -165, 421, -209, -226, -148, 421, -189, -406,
	377, -188, -214, -213, -211, -216, -215, -211, 421, -234,
	-234, 420, -208, -279, -209, -279, 420, -225, -160, 316,
	-282, 421, 421, 421, 421, 421, -393, -394, 38, 367,
	82, -288, -393, -388, -390, 126, -369, -372, -371, 240,
	143, 254, 321, 421, 335, 387, 421, -220, -288, 421,
	425, 382, 421, 425, 382, 421, 421, -226, -209, -208,
	-208, -225, 421, -238, -137, -137, -394, 262, 138, 295,
	262, 138, -181, -371, 240, -372, 240, 372, 101, -368,
	-213, 161, -215, 142, 421, -209, -209, 421, -282, 28,
	-370, 225, 286, 51, 316, -370, -369, 420, 420, -155,
	51, 286, -279, -394, 21, 231, 98, -234, -234, -208,
	421, 421, -209, -209, 357, 420, -234, 421, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 186, 188, 190, 0, 0, 0, 213, 215, 217,
	218, -2, 0, 0, 0, 246, 247, 249, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 0, 855, -2, 0, 364, 366, 375, 377,
	379, 381, 382, 0, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 461, 463, 465, 467, 469, 471, 473,
	475, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	-2, 767, 769, 771, 773, -2, 62, 64, 66, 68,
	70, 72, 87, 221, 223, 225, 227, 230, 232, 234,
	892, 252, 254, 256, 258, 260, -2, 906, 0, 0,
	0, -2, 0, -2, -2, -2, 785, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 868, 870, 872,
	874, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, -2, -2, -2,
	-2, 0, 0, 1527, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1414, 1468, 1417, 1412, 187, 189,
	191, 192, 0, 0, 0, 0, 0, 0, 670, 1453,
	1466, 1467, 1468, 1471, 1472, 1473, 1527, 0, 214, 216,
	219, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 343, 1617, 345, 347, 0, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 248, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 342, 340, 1448,
	285, 286, 0, 325, 326, 327, 328, 329, 330, 332,
	289, 291, 293, 294, 296, 298, 300, 302, 304, 306,
	308, 310, 311, 313, 315, 316, 318, 320, 321, 323,
	730, 0, 0, 0, 0, 0, 169, 0, 357, 351,
	356, 358, 360, 361, 362, 363, 0, 167, 0, 0,
	603, 338, 336, 0, 162, 0, 0, 764, 0, 357,
	1495, 355, 765, 766, 0, 0, 760, 761, 1646, 795,
	365, 367, 376, 378, 380, 383, -2, -2, 1741, -2,
	406, -2, 414, 1744, 1648, 417, 0, 419, -2, 422,
	445, 447, 449, 451, 453, 455, 457, 459, 462, 464,
	466, 468, 470, 472, 474, 476, 478, 480, 482, 484,
	486, 488, 490, 492, 494, 495, 0, 0, 0, 0,
	0, 499, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 498, 500, 501, 502, 0,
	546, 585, 586, 768, 770, 772, 0, 711, 894, 63,
	65, 67, 69, 71, 222, 224, 226, 228, 231, 233,
	-2, 866, 867, 253, 255, 257, 259, 261, -2, 0,
	898, 898, 898, 0, 0, 867, 865, 0, 368, 0,
	370, 0, 499, 373, 374, 426, 427, 1106, 0, 0,
	0, 0, 0, 1231, 1184, -2, -2, 1216, 1218, 1720,
	1741, 0, 1220, 1221, 0, 1223, 1227, 1228, 0, 1391,
	1460, 1455, 1420, 1421, 1422, 1423, 0, 0, 1426, 0,
	1428, 1429, 1430, 1295, 1242, -2, -2, -2, 1464, 1020,
	1021, 1022, 1023, 1024, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1753, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 0, 1709, 1726, 1727, 1732, 1734, 1728, 1717, 1265,
	-2, -2, 1534, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1721, 1722, -2, 1724, -2, -2, 1733, -2, 1737, 1738,
	-2, -2, 1743, -2, -2, -2, 1747, 1748, -2, 1482,
	1073, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1766, 1767, 1768, 1769, 1770, 1771, 797, 775, 788,
	797, 777, 778, 779, 780, 781, 786, 787, 790, 0,
	782, 783, 784, 884, 1623, 887, 670, 885, 869, 871,
	0, 873, 0, 0, 0, 878, 901, 899, 0, 937,
	882, 883, 893, 952, 0, 0, 972, 972, 963, 0,
	994, 0, 1465, 0, 0, 0, 0, 0, -2, 1468,
	1753, 1764, 1765, 2, 79, 0, 1726, 994, 81, 0,
	1726, 84, 0, 1726, 0, -2, 88, 0, 1726, 170,
	171, 1478, 1479, 1483, 1484, 1485, 1486, 91, 0, 1444,
	99, 0, 1726, 1411, 0, 1441, 1487, 1488, 1489, 1490,
	1491, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 0, 1438, 0, 0, 595, 1408, 1413, 596,
	1418, 0, 193, 194, 195, 196, 197, 1726, 199, 200,
	0, 202, 203, 1726, 205, 206, 0, 208, 0, 0,
	0, 0, 0, 229, 670, 1726, 0, 236, 1449, 0,
	694, 1726, 692, 1452, -2, 1726, 714, 717, 1726, 719,
	670, 721, 1451, -2, 1475, 891, 1726, 811, 344, 346,
	0, 239, 0, 824, 0, 826, 0, 845, 1000, 153,
	1726, 264, 283, 153, 1726, 267, 153, 1726, 270, 153,
	1726, 273, 1406, 153, 1726, 276, 277, 1726, 279, 172,
	280, 1726, 282, 339, 0, 0, -2, 333, 1454, -2,
	331, 290, 292, 295, 297, 299, 301, 303, 305, 307,
	309, 312, 314, 317, 319, 322, 324, -2, 0, 163,
	164, 0, 0, 0, 0, 601, 602, 0, 0, 0,
	762, 763, 0, 0, 0, 387, 0, 0, 0, 0,
	794, 384, 0, 403, 0, 405, 1716, -2, -2, 409,
	798, 802, 803, 804, 0, 0, 0, 0, 416, 0,
	0, 0, 420, 423, 0, 496, 497, 0, 0, 507,
	508, 509, 510, 511, 0, 514, 535, 550, 0, 0,
	518, 520, 600, 522, 0, 0, 524, 0, 526, 0,
	528, 0, 530, 0, 532, 534, 536, 551, 538, 0,
	0, 0, 549, 0, 555, 0, 558, 559, 560, 0,
	562, 563, 564, 0, 0, 0, 572, 574, 0, 584,
	0, 503, 504, 153, 998, -2, 0, 861, 915, 916,
	0, 0, 0, 0, 896, 897, 0, 0, 0, 857,
	858, 369, 0, 372, 0, 0, 0, 0, 1326, 1327,
	1328, 1329, 1330, 1331, 1334, 1335, 1332, 1333, 1336, 1337,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 1340, 1341,
	0, 0, 1343, 0, 1345, 0, 0, 0, 0, 0,
	0, 1163, 1165, 1399, 0, 0, 1342, 1111, 1112, 1113,
	1148, 1149, 0, 1217, 1396, 1395, 1219, 0, 1348, -2,
	1349, 1231, 0, 0, 1222, 1435, 1229, 1230, 1348, 0,
	1390, 0, 0, 1425, 0, 1103, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 1071, 1078, 1075, 1074, 1059, 0, 1058,
	0, 0, 1056, 0, 0, 0, 1060, 0, 1371, -2,
	0, 0, 0, 0, 0, 0, 774, -2, 776, 0,
	792, 0, 886, 0, 0, 941, 1400, 1404, 1405, 941,
	941, 0, 0, 1349, 0, 0, 0, 0, 991, 991,
	991, 989, 966, 0, 972, 0, -2, 0, 972, 972,
	0, 982, 0, 982, -2, 963, 0, 0, 995, 996,
	0, 0, 100, 757, 119, 0, 757, 757, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 115, 107, 108,
	0, 0, 85, 695, 0, 698, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 117, 0, 142, 144, 0, 0, 0,
	0, 985, 594, 0, 0, 1469, 1416, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 1455, 1456, 609, 0,
	0, 0, 0, 690, 693, 0, 712, 0, 890, 0,
	0, 0, 0, 1726, 726, 1440, 1474, 0, 1726, 813,
	0, 1004, 0, 827, 0, 0, 1001, 0, 262, 0,
	151, 152, 0, 265, 0, 268, 0, 271, 0, 0,
	274, 0, 0, 0, 0, 0, 893, 0, 184, 0,
	349, 359, 0, 0, 893, 0, 1351, 1012, 1015, 1016,
	1017, 1103, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1079,
	1073, 1089, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1069, 0, 1044, 1044, 1044, 1061, 1062,
	1080, 1081, 1083, 1085, 1087, 1013, 1014, 1079, 1079, 1076,
	1077, 184, 0, 353, 0, 985, 389, 985, 391, 0,
	580, 0, 0, 0, 0, -2, 411, 0, 800, 0,
	805, 435, 436, 437, 807, 808, 415, 438, 439, 440,
	441, 442, 443, 0, 687, 0, 689, 1431, 0, 412,
	428, 413, 418, 0, 424, 0, 0, 512, 513, 515,
	516, 517, 521, 0, 588, 1638, 598, 523, 525, 527,
	529, 531, 893, 540, 0, 542, 893, 553, 556, 561,
	565, 566, 567, 568, 569, 570, 0, 0, 0, 710,
	0, 864, 913, 914, 919, 923, 924, 927, 930, 931,
	921, 1106, 879, 880, 881, 907, 908, 740, 0, 0,
	371, 1107, 1008, 1009, 1063, 1064, 1065, 1066, 1067, 1108,
	1109, 1437, 0, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, -2, -2, -2, -2, -2, -2, -2,
	-2, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, -2, -2, -2, 1146, 1147, -2, 1344, 1346,
	0, 1399, 0, -2, 0, -2, -2, -2, -2, 1160,
	0, 1162, 1167, 1169, 1171, 0, 0, 0, 0, 1398,
	1181, 1382, 0, 0, 1323, 1324, 1325, 1166, 0, 0,
	1397, 1394, 0, 0, 1347, 1226, 0, 0, 0, 0,
	1355, 1389, 1385, 0, 1457, 1463, 1233, 904, 0, 0,
	0, 0, 1240, 0, 1436, 1090, 1091, 1092, 1093, 1094,
	1095, 1104, 1305, 0, 0, 0, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 1358, -2,
	-2, -2, -2, -2, -2, -2, 0, 1279, 0, 0,
	1291, 0, 1293, 0, 1281, 1349, 1368, 0, 0, 1187,
	0, 0, 0, 1231, 0, 1284, 1349, 1376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 1381,
	791, 888, 0, 0, 1004, 0, 0, 0, 1403, 1004,
	1004, 0, 936, 0, 0, 0, 0, 0, 0, 986,
	990, 987, 988, 0, 0, 972, 982, 949, 0, 0,
	1439, 0, 957, -2, 982, 982, 0, 959, 981, 0,
	670, 971, 961, -2, 0, -2, 0, 0, 0, 0,
	756, 121, 1726, 0, 155, 0, 0, 660, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 696, 697,
	699, 705, 707, 0, 701, 1434, 0, 702, 0, 704,
	706, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 1410, 0, 0,
	175, 984, 0, 1409, 1419, 0, 198, 201, 204, 207,
	185, 669, 0, 0, 0, 0, 608, -2, 610, 612,
	613, 614, 615, 1572, 1475, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	815, 821, 0, 906, 0, 843, 829, 0, 0, 0,
	843, 847, 848, 850, 851, 0, 0, 1002, 284, 153,
	153, 153, 1407, 153, 153, 173, 278, 281, 341, 287,
	334, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 337, 0, 1005, 1007, 0, 1018, 0, 1071, 0,
	160, 184, 0, 0, 388, 393, 0, 581, 0, 0,
	404, 0, 799, 806, 0, 432, 0, 434, 688, 1433,
	1432, 0, 425, 505, 0, 599, 597, 539, 543, 893,
	545, 0, 582, 583, 587, 999, 0, 925, 0, 922,
	928, 929, 0, 910, 738, 739, 0, 0, 0, -2,
	-2, 0, 0, 0, 1182, -2, 1161, 1164, 1168, 1170,
	1172, 0, 0, 0, 0, 0, 0, 0, 1183, 1392,
	1395, 1321, 0, 0, 1350, 1353, 1354, 0, 0, 1386,
	0, 0, 0, 0, 0, 903, 904, 904, 904, 1239,
	0, 0, 0, 0, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 1260, 0, 0, 0, 1264,
	1042, 0, 1276, 0, 1278, 1068, 1290, 1292, 1280, 0,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1190, 1191, 1192, 1283, 1374,
	1375, 0, 0, 1082, 1084, 1086, 1088, 0, 0, 0,
	0, 1289, 0, 1380, 893, 938, 933, 1401, 985, 940,
	942, 1402, 1442, 933, 933, 0, 1350, 974, 0, 976,
	0, 0, 0, 978, 0, 967, 0, 969, 982, 954,
	0, 0, 947, 0, 946, 972, 0, 958, 960, 962,
	1457, 670, 980, 0, 997, 0, 120, 744, 0, 0,
	1443, 0, 123, 1726, 132, 0, 637, 0, 0, 0,
	0, 0, 759, 133, 1726, 153, 1726, 153, 134, 137,
	0, 141, 139, 0, 0, 628, 101, 757, 104, 0,
	0, 750, 0, 700, 703, 709, 86, 0, 752, 742,
	0, 0, 741, 143, 105, 0, 0, 754, 103, 0,
	0, 0, 184, 0, 0, 1415, 1470, 209, 211, 212,
	210, 617, 0, 1475, 0, 1475, 0, 1447, 606, 670,
	0, 985, 694, 715, -2, 718, 720, 728, 0, 0,
	0, 817, 821, 0, 820, 891, 918, 905, 1003, 822,
	843, 0, 0, 0, 832, 834, 831, 828, 825, 1004,
	0, 0, 0, 0, 0, 263, 266, 269, 272, 275,
	0, 182, 1605, 180, 177, 179, 348, 0, 0, 0,
	1352, 0, 1010, 0, 0, 0, 0, 161, 352, 0,
	390, 0, 0, 0, 0, 0, 0, 401, 402, -2,
	430, 431, 433, 429, 0, 541, 544, 552, 0, 0,
	909, 740, 0, 1110, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1383, 0, 1394, 1224, 1225, 1232, 1322,
	1356, 1384, 1388, 0, 1458, 1462, 1234, 0, 0, 0,
	0, 1427, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 0,
	1303, 1304, 1308, 1450, 0, 0, 1245, 0, 0, 0,
	0, 0, 0, 0, 0, 1357, 1367, 1369, 1188, 1189,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	-2, -2, -2, 1206, 1207, 1208, -2, -2, -2, 0,
	0, 0, 1370, 1372, 1373, 1377, 1378, 0, 1286, 1287,
	1288, 1379, 0, 935, 0, 939, 0, 935, 935, 900,
	975, 0, 993, 977, 952, 968, 0, 965, 950, 0,
	951, 0, 982, 972, 0, 979, 964, -2, 0, 0,
	0, 0, 154, 635, 659, 0, 0, 731, 737, 737,
	0, 1445, 1243, 1244, 0, 0, 0, 125, 0, 0,
	0, 0, 130, 0, 136, 140, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 111, 114, 0,
	0, 110, 0, 158, 0, 0, 625, 0, 611, 0,
	0, 0, 0, 609, 0, 235, 184, 691, 713, 0,
	0, 0, 0, 0, 819, 821, 0, 812, 813, 843,
	917, 823, 841, 842, 840, 0, 0, 0, 906, 849,
	846, 852, 853, 0, 168, 0, 0, 0, 0, 350,
	0, 0, 0, 1011, 1019, 0, 1072, 354, 0, 575,
	576, 623, 0, 579, 506, 920, 926, 911, 740, 0,
	0, -2, 0, 1175, -2, -2, 1393, 1387, 0, 1424,
	904, 1235, 1237, 1238, 1105, 1310, 1307, 0, 1294, 1255,
	1256, 0, 0, 1259, 1261, 1262, 1263, 1043, 1366, 0,
	0, 0, 0, 1285, 889, 1299, 0, 0, 943, 1299,
	1299, 0, 972, 970, 948, 944, 0, 955, 982, 1458,
	0, 746, 748, 122, 0, 636, 0, 639, 0, 0,
	0, 0, 646, 647, 0, 0, 0, 0, 0, 661,
	668, 0, 740, 0, 740, 0, 0, 0, 0, 0,
	127, 146, 0, 0, 758, 0, 153, 153, 0, 0,
	745, 0, 0, 0, 0, 751, 753, 743, 0, 755,
	0, 174, 0, 604, 624, 0, 0, 0, 0, 0,
	0, 0, 237, 0, 727, 0, 0, 0, 809, 821,
	0, 814, 815, 238, 0, 0, 0, 830, 833, 835,
	918, 0, 181, 0, 176, 178, 0, 0, 1006, 1070,
	392, 394, 0, 0, 400, 577, 622, 0, 0, 912,
	-2, -2, 1176, 1459, 1461, 0, 906, 0, 1296, 0,
	0, -2, 0, 0, 0, 875, 0, 934, 932, 876,
	877, 992, 982, 0, 956, 124, 0, 640, 641, 1446,
	643, 0, 645, 648, 0, 650, 1477, 0, 654, 617,
	0, 665, 666, 732, 733, 736, 734, 737, 904, 663,
	0, 126, 128, 145, 148, 129, 135, 0, 0, 0,
	0, 904, 0, 0, 0, 983, 0, 0, 668, 0,
	658, 617, 607, 0, 728, 724, 0, 0, 816, 817,
	0, 0, 0, 843, 854, 183, 0, 0, 0, 396,
	0, 398, 0, 621, 0, 1236, 1313, 0, 1257, 1258,
	-2, 0, 1214, 1298, 1300, 0, 953, 945, 638, 642,
	0, 0, 674, 0, 0, 625, 0, 740, 0, 0,
	150, 0, 0, 0, 747, 749, 0, 0, 0, 113,
	0, 657, 617, 668, 625, 668, 0, 0, 818, 819,
	0, 837, 1004, 839, 844, 0, 0, 395, 0, 0,
	578, 0, 0, 0, 1309, 1215, 0, 0, 0, 649,
	679, 0, 0, 0, 662, 0, 735, 1234, 670, 131,
	0, 147, 0, 629, 0, 0, 632, 0, 0, 0,
	0, 0, 625, 617, 605, 617, 0, 0, 810, 0,
	838, 184, 184, 397, 399, 1306, 1311, 1314, -2, 1692,
	1524, 0, 1312, 1301, 1302, 0, 651, 675, 676, 0,
	671, 672, 673, 1476, 652, 653, 667, 674, 149, 626,
	0, 0, 627, 0, 0, 116, 118, 0, 655, 625,
	625, 0, 725, 1004, 165, 166, 0, 1316, 1317, 1318,
	1319, 1320, 644, 677, 0, 678, 0, 0, 0, 679,
	630, 0, 633, 0, 620, 656, 722, 668, 836, 0,
	680, 0, 683, 684, 0, 681, 664, 0, 0, 616,
	618, 619, 617, 1315, 682, 685, 686, 0, 0, 625,
	625, 0, 723, 631, 0, 0, 0, 625, 634,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 409, 3, 415, 410, 3,
	420, 421, 413, 411, 425, 412, 422, 414, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 429, 424,
	401, 403, 402, 405, 426, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 418, 3, 419, 416, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 427, 408, 428, 406,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 404, 57744, 407,
	57745, 417, 57746, 423, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1156
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1160
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1212
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1222
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1226
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1238
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1244
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1255
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1262
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1272
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1292
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1337
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1382
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1408
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1427
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1437
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1497
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1509
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1513
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1522
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1532
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1541
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1542
		{
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1569
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1599
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.str = "CSV"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1607
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 165:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1635
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1639
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1642
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1662
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1666
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1676
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1686
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1690
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1696
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1700
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1704
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1728
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1731
		{
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1747
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1748
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1749
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1750
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1760
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1768
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1770
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1773
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1783
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1800
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1806
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1809
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1819
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1828
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1836
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1842
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1849
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1854
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1861
		{
			sqlVAL.str = ""
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1870
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1871
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1873
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1874
		{
			return helpWith(sqllex, "CREATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1878
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1880
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1882
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1883
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1895
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1906
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1938
		{
			return helpWith(sqllex, "DELETE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1948
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1949
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1950
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1952
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "DROP")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1985
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1997
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2015
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2023
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2031
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2054
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2061
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2069
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2073
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2095
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2120
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2123
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2135
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2139
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2140
		{
			return helpWith(sqllex, "DELETE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2141
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2143
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "INSERT")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2148
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2150
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2166
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2170
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2191
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2195
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2215
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2221
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2225
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2239
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2243
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2250
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2270
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2274
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2278
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2281
		{
			return helpWith(sqllex, "GRANT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2301
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2305
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2309
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2312
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2317
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2321
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2332
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2350
		{
			return helpWith(sqllex, "RESET")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2351
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2359
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2366
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2377
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2388
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "USE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2395
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2396
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2397
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2398
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2399
		{
			return helpWith(sqllex, "USE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2400
		{
			return unimplemented(sqllex, "set local")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2431
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2434
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2452
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2460
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2464
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2468
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2474
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2484
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2492
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2496
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2515
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2518
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2544
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2569
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2571
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2574
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2578
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2588
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2604
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2611
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2617
		{
			return unimplemented(sqllex, "set from current")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2618
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2626
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2631
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2638
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2642
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2659
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2665
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2675
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2679
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2683
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2687
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2691
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2697
		{
			sqlVAL.union.val = tree.Low
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2701
		{
			sqlVAL.union.val = tree.Normal
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2705
		{
			sqlVAL.union.val = tree.High
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2716
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2720
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2724
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2729
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2733
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2745
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2746
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2747
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2749
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2750
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2751
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2754
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2779
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2791
		{
			sqlVAL.str = "client_encoding"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			sqlVAL.str = "timezone"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2809
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2813
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2816
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2827
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2860
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2890
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2903
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2919
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2922
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2943
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2959
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2961
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2965
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2975
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2978
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2988
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2991
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2996
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3002
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3006
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3012
		{
			sqlVAL.union.val = true
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = false
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3026
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3030
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3061
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3082
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3086
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3094
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3099
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3104
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3116
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3127
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3137
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3148
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3151
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3159
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3162
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3166
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3171
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3176
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3183
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3191
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3198
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3215
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3219
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3222
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3230
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3237
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3242
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3362
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3366
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3370
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3409
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3413
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3418
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3422
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3431
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3438
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3442
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3463
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3466
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3514
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3539
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3553
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3569
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3575
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3596
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3601
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3606
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3619
		{
			sqlVAL.str = ""
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3626
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3632
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3639
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3646
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3652
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3662
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3693
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3708
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3718
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3722
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3726
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3730
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3734
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3738
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3756
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3760
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3764
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3768
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3772
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3776
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3780
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3788
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3792
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3796
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3803
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3847
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3852
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3875
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3885
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3909
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3913
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3919
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3923
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3928
		{
			return unimplemented(sqllex, "match full")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3929
		{
			return unimplemented(sqllex, "match partial")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3930
		{
			return unimplemented(sqllex, "match simple")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3931
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3942
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3946
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3950
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3982
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3996
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4004
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4022
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4030
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4038
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4042
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4045
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4049
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4050
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4053
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4054
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4057
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4059
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4061
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4063
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4064
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4066
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4067
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4069
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4081
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4096
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4100
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4104
		{
			sqlVAL.union.val = nil
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4114
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4121
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4136
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4154
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4167
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4181
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4199
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4204
		{
			sqlVAL.union.val = true
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4208
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4214
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4218
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4224
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4237
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4240
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4241
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4244
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4245
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4253
		{
			sqlVAL.union.val = tree.Descending
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4257
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4274
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4280
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4292
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4296
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4298
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4306
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4312
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4322
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = false
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = true
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = false
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4350
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4353
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4375
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4383
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4386
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4390
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4391
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4392
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4408
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4411
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4413
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4416
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4426
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4429
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4431
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4434
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4443
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4444
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4445
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4453
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4460
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4463
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4464
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.str = ""
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4472
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4476
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4480
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4490
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4500
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4506
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4510
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4523
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4525
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4529
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4533
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4537
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 809:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4589
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4593
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4597
		{
			sqlVAL.str = ""
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4603
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.str = ""
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4623
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.str = ""
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4632
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4633
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4645
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4659
		{
			return helpWith(sqllex, "INSERT")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4677
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4689
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4695
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4699
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4703
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4709
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4733
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4737
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4741
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4747
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4751
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4759
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 844:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4785
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4796
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4800
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4801
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4809
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4822
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4825
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4829
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4872
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4882
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4897
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4901
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4905
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4909
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4913
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4917
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4924
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4959
		{
			return helpWith(sqllex, "SELECT")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4960
		{
			return helpWith(sqllex, "VALUES")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4961
		{
			return helpWith(sqllex, "TABLE")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4983
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4996
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5022
		{
			return helpWith(sqllex, "SELECT")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5026
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5035
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5044
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5059
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5066
		{
			return helpWith(sqllex, "TABLE")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5078
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5081
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5082
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5086
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5096
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5104
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5105
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5109
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5112
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5115
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5116
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5120
		{
			sqlVAL.union.val = true
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5124
		{
			sqlVAL.union.val = false
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5128
		{
			sqlVAL.union.val = false
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = true
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5140
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5145
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5146
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5149
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5150
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5154
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5158
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5184
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5188
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5197
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5206
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5217
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5221
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5230
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5236
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5250
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5267
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5273
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5274
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5277
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5278
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5295
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5299
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5328
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5331
		{
			return helpWith(sqllex, "VALUES")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5333
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5345
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5348
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5356
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5370
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5382
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5387
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5410
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5418
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5422
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5449
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5467
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5470
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5471
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5472
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5477
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5479
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5482
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5484
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5513
		{
			sqlVAL.union.val = nil
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5514
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5515
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5519
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5523
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = true
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5533
		{
			sqlVAL.union.val = false
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5553
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5557
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5561
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5565
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5573
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5583
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5596
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5603
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5609
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5613
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5617
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5621
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5627
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5628
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5648
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5650
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5676
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5680
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5686
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5690
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5702
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5716
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5725
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5736
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5740
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5747
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5749
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5758
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5766
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5775
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5793
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5797
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5801
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5805
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5809
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5813
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5817
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5821
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5825
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5829
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5833
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5841
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5845
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5849
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5853
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5857
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = nil
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5916
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5920
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5924
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5932
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5936
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5946
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5950
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5968
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5996
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6000
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6004
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6010
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6014
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6020
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6031
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6059
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6063
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6072
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6073
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6094
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6102
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6121
		{
			sqlVAL.union.val = tree.Year
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = tree.Month
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.Day
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6133
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6141
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = tree.Month
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6151
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6155
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6159
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6163
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6167
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6171
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6175
		{
			sqlVAL.union.val = nil
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = tree.Second
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6184
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6219
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6240
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6244
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6248
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6252
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6256
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6260
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6280
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6296
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6300
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6447
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6489
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6497
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6501
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6513
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6617
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6653
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6719
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6724
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6738
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6742
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6746
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6763
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6768
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6779
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6786
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6787
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6797
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6800
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6811
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6827
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6828
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6832
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6862
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6866
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6870
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6874
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6886
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6890
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6902
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6906
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6910
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6920
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6925
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6930
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6935
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6940
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6945
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6955
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6964
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6965
		{
			return unimplemented(sqllex, "treat")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6979
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6986
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6991
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6996
		{
			return unimplemented(sqllex, "within group")
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6997
		{
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7001
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7005
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7032
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7040
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7074
		{
			sqlVAL.str = ""
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7080
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7094
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7095
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7096
		{
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7099
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7100
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7106
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7107
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7108
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7109
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7110
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7121
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Any
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = tree.Some
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.All
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = tree.Div
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7151
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = tree.LT
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7155
		{
			sqlVAL.union.val = tree.GT
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.LE
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7158
		{
			sqlVAL.union.val = tree.GE
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.NE
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.Like
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7165
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7250
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7254
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7271
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7275
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7292
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7296
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7304
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7308
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7362
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7412
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7421
		{
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7422
		{
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7436
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7445
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7449
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7453
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7488
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7541
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7545
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7549
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7553
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7556
		{
			return unimplemented(sqllex, "func const")
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7565
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7567
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7571
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7575
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7582
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7595
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7606
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7616
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7808
		{
			sqlVAL.str = ""
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7814
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7818
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
