// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:613
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10006

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1083,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 912,
	199, 912,
	214, 251,
	297, 251,
	306, 743,
	333, 251,
	342, 743,
	381, 743,
	405, 251,
	429, 743,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1083,
	188, 1083,
	415, 1083,
	416, 1083,
	-2, 0,
	-1, 87,
	122, 1057,
	138, 1057,
	196, 1057,
	226, 1057,
	261, 1057,
	271, 1057,
	410, 1057,
	-2, 1035,
	-1, 118,
	128, 661,
	213, 661,
	300, 641,
	351, 641,
	398, 661,
	-2, 0,
	-1, 119,
	4, 1085,
	21, 1085,
	22, 1085,
	23, 1085,
	24, 1085,
	25, 1085,
	27, 1085,
	33, 1085,
	38, 1085,
	39, 1085,
	40, 1085,
	41, 1085,
	42, 1085,
	43, 1085,
	44, 1085,
	45, 1085,
	46, 1085,
	47, 1085,
	48, 1085,
	49, 1085,
	51, 1085,
	52, 1085,
	53, 1085,
	54, 1085,
	55, 1085,
	56, 1085,
	59, 1085,
	60, 1085,
	61, 1085,
	62, 1085,
	64, 1085,
	65, 1085,
	69, 1085,
	70, 1085,
	71, 1085,
	72, 1085,
	73, 1085,
	74, 1085,
	76, 1085,
	77, 1085,
	78, 1085,
	79, 1085,
	81, 1085,
	83, 1085,
	84, 1085,
	85, 1085,
	88, 1085,
	89, 1085,
	97, 1085,
	98, 1085,
	99, 1085,
	100, 1085,
	101, 1085,
	102, 1085,
	103, 1085,
	104, 1085,
	106, 1085,
	108, 1085,
	109, 1085,
	111, 1085,
	114, 1085,
	115, 1085,
	116, 1085,
	118, 1085,
	120, 1085,
	121, 1085,
	123, 1085,
	124, 1085,
	125, 1085,
	126, 1085,
	127, 1085,
	128, 1085,
	129, 1085,
	130, 1085,
	131, 1085,
	132, 1085,
	133, 1085,
	134, 1085,
	135, 1085,
	137, 1085,
	143, 1085,
	144, 1085,
	145, 1085,
	146, 1085,
	147, 1085,
	148, 1085,
	150, 1085,
	152, 1085,
	156, 1085,
	157, 1085,
	159, 1085,
	160, 1085,
	162, 1085,
	163, 1085,
	165, 1085,
	166, 1085,
	167, 1085,
	168, 1085,
	169, 1085,
	170, 1085,
	171, 1085,
	172, 1085,
	174, 1085,
	175, 1085,
	177, 1085,
	178, 1085,
	179, 1085,
	182, 1085,
	183, 1085,
	184, 1085,
	185, 1085,
	188, 1085,
	189, 1085,
	190, 1085,
	191, 1085,
	192, 1085,
	193, 1085,
	194, 1085,
	195, 1085,
	197, 1085,
	199, 1085,
	201, 1085,
	203, 1085,
	204, 1085,
	205, 1085,
	207, 1085,
	208, 1085,
	211, 1085,
	212, 1085,
	213, 1085,
	214, 1085,
	215, 1085,
	217, 1085,
	218, 1085,
	220, 1085,
	221, 1085,
	223, 1085,
	224, 1085,
	227, 1085,
	228, 1085,
	231, 1085,
	232, 1085,
	233, 1085,
	235, 1085,
	236, 1085,
	237, 1085,
	238, 1085,
	239, 1085,
	240, 1085,
	241, 1085,
	242, 1085,
	243, 1085,
	244, 1085,
	246, 1085,
	247, 1085,
	248, 1085,
	250, 1085,
	252, 1085,
	254, 1085,
	256, 1085,
	257, 1085,
	258, 1085,
	259, 1085,
	260, 1085,
	262, 1085,
	263, 1085,
	264, 1085,
	266, 1085,
	267, 1085,
	268, 1085,
	269, 1085,
	272, 1085,
	273, 1085,
	274, 1085,
	276, 1085,
	278, 1085,
	279, 1085,
	280, 1085,
	281, 1085,
	282, 1085,
	283, 1085,
	284, 1085,
	285, 1085,
	286, 1085,
	287, 1085,
	289, 1085,
	290, 1085,
	291, 1085,
	292, 1085,
	293, 1085,
	294, 1085,
	296, 1085,
	298, 1085,
	299, 1085,
	300, 1085,
	301, 1085,
	302, 1085,
	303, 1085,
	304, 1085,
	305, 1085,
	306, 1085,
	307, 1085,
	309, 1085,
	310, 1085,
	311, 1085,
	312, 1085,
	313, 1085,
	315, 1085,
	316, 1085,
	317, 1085,
	318, 1085,
	319, 1085,
	320, 1085,
	321, 1085,
	322, 1085,
	324, 1085,
	326, 1085,
	327, 1085,
	328, 1085,
	329, 1085,
	330, 1085,
	331, 1085,
	333, 1085,
	334, 1085,
	335, 1085,
	336, 1085,
	337, 1085,
	338, 1085,
	339, 1085,
	340, 1085,
	342, 1085,
	343, 1085,
	344, 1085,
	345, 1085,
	346, 1085,
	347, 1085,
	348, 1085,
	349, 1085,
	350, 1085,
	351, 1085,
	353, 1085,
	354, 1085,
	355, 1085,
	356, 1085,
	357, 1085,
	359, 1085,
	360, 1085,
	361, 1085,
	362, 1085,
	363, 1085,
	365, 1085,
	366, 1085,
	367, 1085,
	368, 1085,
	369, 1085,
	370, 1085,
	371, 1085,
	372, 1085,
	373, 1085,
	374, 1085,
	375, 1085,
	376, 1085,
	378, 1085,
	379, 1085,
	380, 1085,
	382, 1085,
	383, 1085,
	384, 1085,
	385, 1085,
	386, 1085,
	387, 1085,
	388, 1085,
	390, 1085,
	391, 1085,
	392, 1085,
	393, 1085,
	394, 1085,
	396, 1085,
	398, 1085,
	399, 1085,
	400, 1085,
	401, 1085,
	402, 1085,
	404, 1085,
	405, 1085,
	406, 1085,
	408, 1085,
	409, 1085,
	412, 1085,
	413, 1085,
	414, 1085,
	415, 1085,
	416, 1085,
	417, 1085,
	419, 1085,
	421, 1085,
	422, 1085,
	423, 1085,
	424, 1085,
	425, 1085,
	426, 1085,
	427, 1085,
	429, 1085,
	430, 1085,
	431, 1085,
	436, 1085,
	437, 1085,
	438, 1085,
	439, 1085,
	440, 1085,
	441, 1085,
	-2, 0,
	-1, 120,
	1, 965,
	203, 965,
	296, 965,
	304, 965,
	444, 965,
	467, 965,
	-2, 0,
	-1, 122,
	1, 965,
	467, 965,
	-2, 0,
	-1, 123,
	1, 965,
	467, 965,
	-2, 0,
	-1, 124,
	1, 969,
	467, 969,
	-2, 0,
	-1, 149,
	122, 1056,
	138, 1056,
	196, 1056,
	226, 1056,
	261, 1056,
	271, 1056,
	410, 1056,
	-2, 1044,
	-1, 182,
	4, 1092,
	5, 1092,
	6, 1092,
	7, 1092,
	8, 1092,
	9, 1092,
	10, 1092,
	21, 1092,
	22, 1092,
	23, 1092,
	24, 1092,
	25, 1092,
	27, 1092,
	33, 1092,
	34, 1092,
	38, 1092,
	39, 1092,
	40, 1092,
	41, 1092,
	42, 1092,
	43, 1092,
	44, 1092,
	45, 1092,
	46, 1092,
	47, 1092,
	48, 1092,
	49, 1092,
	51, 1092,
	52, 1092,
	53, 1092,
	54, 1092,
	55, 1092,
	56, 1092,
	57, 1092,
	58, 1092,
	59, 1092,
	60, 1092,
	61, 1092,
	62, 1092,
	64, 1092,
	65, 1092,
	67, 1092,
	69, 1092,
	70, 1092,
	71, 1092,
	72, 1092,
	73, 1092,
	74, 1092,
	76, 1092,
	77, 1092,
	78, 1092,
	79, 1092,
	81, 1092,
	83, 1092,
	84, 1092,
	85, 1092,
	87, 1092,
	88, 1092,
	89, 1092,
	90, 1092,
	91, 1092,
	92, 1092,
	93, 1092,
	94, 1092,
	95, 1092,
	96, 1092,
	97, 1092,
	98, 1092,
	99, 1092,
	100, 1092,
	101, 1092,
	102, 1092,
	103, 1092,
	104, 1092,
	105, 1092,
	106, 1092,
	108, 1092,
	109, 1092,
	111, 1092,
	114, 1092,
	115, 1092,
	116, 1092,
	118, 1092,
	120, 1092,
	121, 1092,
	123, 1092,
	124, 1092,
	125, 1092,
	126, 1092,
	127, 1092,
	128, 1092,
	129, 1092,
	130, 1092,
	131, 1092,
	132, 1092,
	133, 1092,
	134, 1092,
	135, 1092,
	136, 1092,
	137, 1092,
	143, 1092,
	144, 1092,
	145, 1092,
	146, 1092,
	147, 1092,
	148, 1092,
	150, 1092,
	152, 1092,
	155, 1092,
	156, 1092,
	157, 1092,
	159, 1092,
	160, 1092,
	162, 1092,
	163, 1092,
	165, 1092,
	166, 1092,
	167, 1092,
	168, 1092,
	169, 1092,
	170, 1092,
	171, 1092,
	172, 1092,
	173, 1092,
	174, 1092,
	175, 1092,
	177, 1092,
	178, 1092,
	179, 1092,
	182, 1092,
	183, 1092,
	184, 1092,
	185, 1092,
	187, 1092,
	188, 1092,
	189, 1092,
	190, 1092,
	191, 1092,
	192, 1092,
	193, 1092,
	194, 1092,
	195, 1092,
	197, 1092,
	199, 1092,
	200, 1092,
	201, 1092,
	202, 1092,
	203, 1092,
	204, 1092,
	205, 1092,
	206, 1092,
	207, 1092,
	208, 1092,
	211, 1092,
	212, 1092,
	213, 1092,
	214, 1092,
	215, 1092,
	217, 1092,
	218, 1092,
	220, 1092,
	221, 1092,
	222, 1092,
	223, 1092,
	224, 1092,
	225, 1092,
	227, 1092,
	228, 1092,
	231, 1092,
	232, 1092,
	233, 1092,
	235, 1092,
	236, 1092,
	237, 1092,
	238, 1092,
	239, 1092,
	240, 1092,
	241, 1092,
	242, 1092,
	243, 1092,
	244, 1092,
	245, 1092,
	246, 1092,
	247, 1092,
	248, 1092,
	249, 1092,
	250, 1092,
	251, 1092,
	252, 1092,
	253, 1092,
	254, 1092,
	255, 1092,
	256, 1092,
	257, 1092,
	258, 1092,
	259, 1092,
	260, 1092,
	262, 1092,
	263, 1092,
	264, 1092,
	267, 1092,
	268, 1092,
	269, 1092,
	272, 1092,
	273, 1092,
	274, 1092,
	275, 1092,
	276, 1092,
	277, 1092,
	278, 1092,
	279, 1092,
	280, 1092,
	281, 1092,
	282, 1092,
	283, 1092,
	284, 1092,
	285, 1092,
	286, 1092,
	287, 1092,
	289, 1092,
	290, 1092,
	291, 1092,
	292, 1092,
	293, 1092,
	294, 1092,
	296, 1092,
	298, 1092,
	299, 1092,
	300, 1092,
	301, 1092,
	302, 1092,
	303, 1092,
	304, 1092,
	305, 1092,
	306, 1092,
	307, 1092,
	309, 1092,
	310, 1092,
	311, 1092,
	312, 1092,
	313, 1092,
	315, 1092,
	316, 1092,
	317, 1092,
	318, 1092,
	319, 1092,
	320, 1092,
	321, 1092,
	322, 1092,
	324, 1092,
	325, 1092,
	326, 1092,
	327, 1092,
	328, 1092,
	329, 1092,
	330, 1092,
	331, 1092,
	333, 1092,
	334, 1092,
	335, 1092,
	336, 1092,
	337, 1092,
	338, 1092,
	339, 1092,
	340, 1092,
	342, 1092,
	343, 1092,
	344, 1092,
	345, 1092,
	346, 1092,
	347, 1092,
	348, 1092,
	349, 1092,
	350, 1092,
	351, 1092,
	352, 1092,
	353, 1092,
	354, 1092,
	355, 1092,
	356, 1092,
	357, 1092,
	358, 1092,
	359, 1092,
	360, 1092,
	361, 1092,
	362, 1092,
	363, 1092,
	365, 1092,
	366, 1092,
	367, 1092,
	368, 1092,
	369, 1092,
	370, 1092,
	371, 1092,
	372, 1092,
	373, 1092,
	374, 1092,
	375, 1092,
	376, 1092,
	378, 1092,
	379, 1092,
	380, 1092,
	382, 1092,
	383, 1092,
	384, 1092,
	385, 1092,
	386, 1092,
	387, 1092,
	388, 1092,
	390, 1092,
	391, 1092,
	392, 1092,
	393, 1092,
	394, 1092,
	396, 1092,
	398, 1092,
	399, 1092,
	400, 1092,
	401, 1092,
	402, 1092,
	403, 1092,
	404, 1092,
	405, 1092,
	406, 1092,
	408, 1092,
	409, 1092,
	411, 1092,
	412, 1092,
	413, 1092,
	414, 1092,
	415, 1092,
	416, 1092,
	417, 1092,
	418, 1092,
	419, 1092,
	421, 1092,
	422, 1092,
	423, 1092,
	424, 1092,
	425, 1092,
	426, 1092,
	427, 1092,
	429, 1092,
	430, 1092,
	431, 1092,
	436, 1092,
	437, 1092,
	438, 1092,
	439, 1092,
	440, 1092,
	441, 1092,
	442, 1092,
	448, 1092,
	455, 1092,
	456, 1092,
	457, 1092,
	464, 1092,
	468, 1092,
	-2, 0,
	-1, 561,
	154, 1773,
	395, 1773,
	447, 1773,
	466, 1773,
	-2, 0,
	-1, 562,
	154, 1852,
	395, 1852,
	447, 1852,
	466, 1852,
	-2, 0,
	-1, 563,
	154, 1762,
	395, 1762,
	447, 1762,
	466, 1762,
	-2, 0,
	-1, 565,
	154, 1945,
	395, 1945,
	447, 1945,
	466, 1945,
	-2, 0,
	-1, 567,
	154, 1975,
	395, 1975,
	447, 1975,
	466, 1975,
	-2, 0,
	-1, 574,
	154, 1863,
	395, 1863,
	447, 1863,
	466, 1863,
	-2, 508,
	-1, 592,
	466, 1720,
	469, 1720,
	-2, 712,
	-1, 593,
	466, 1722,
	469, 1722,
	-2, 713,
	-1, 594,
	466, 1721,
	469, 1721,
	-2, 714,
	-1, 595,
	469, 1666,
	-2, 715,
	-1, 638,
	429, 894,
	-2, 744,
	-1, 744,
	300, 642,
	351, 642,
	-2, 0,
	-1, 745,
	300, 641,
	351, 641,
	-2, 589,
	-1, 749,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 750,
	1, 711,
	151, 711,
	463, 711,
	465, 711,
	467, 711,
	-2, 0,
	-1, 758,
	1, 645,
	463, 645,
	465, 645,
	467, 645,
	-2, 0,
	-1, 761,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 762,
	1, 673,
	463, 673,
	465, 673,
	467, 673,
	-2, 0,
	-1, 763,
	1, 676,
	463, 676,
	465, 676,
	467, 676,
	-2, 0,
	-1, 767,
	1, 690,
	463, 690,
	465, 690,
	467, 690,
	-2, 0,
	-1, 768,
	1, 692,
	463, 692,
	465, 692,
	467, 692,
	-2, 0,
	-1, 812,
	138, 1094,
	226, 1094,
	261, 1094,
	-2, 1044,
	-1, 828,
	138, 1093,
	226, 1093,
	261, 1093,
	-2, 1044,
	-1, 852,
	466, 1719,
	-2, 516,
	-1, 880,
	464, 1711,
	-2, 1702,
	-1, 886,
	5, 1231,
	-2, 1753,
	-1, 887,
	5, 1232,
	-2, 1757,
	-1, 888,
	5, 1233,
	-2, 1756,
	-1, 889,
	5, 1234,
	-2, 1972,
	-1, 890,
	5, 1235,
	-2, 1865,
	-1, 891,
	5, 1236,
	-2, 1937,
	-1, 892,
	5, 1237,
	-2, 1939,
	-1, 893,
	5, 1238,
	-2, 1952,
	-1, 894,
	5, 1239,
	-2, 1940,
	-1, 895,
	5, 1240,
	-2, 1941,
	-1, 896,
	5, 1241,
	-2, 1752,
	-1, 897,
	5, 1242,
	-2, 1988,
	-1, 898,
	5, 1243,
	-2, 1826,
	-1, 899,
	5, 1244,
	-2, 1875,
	-1, 900,
	5, 1245,
	-2, 1877,
	-1, 901,
	5, 1246,
	-2, 1830,
	-1, 902,
	5, 1247,
	464, 1729,
	-2, 1720,
	-1, 908,
	464, 1730,
	-2, 1721,
	-1, 910,
	5, 1251,
	-2, 2021,
	-1, 911,
	5, 1252,
	-2, 2022,
	-1, 912,
	5, 1253,
	-2, 1829,
	-1, 913,
	5, 1254,
	-2, 2034,
	-1, 914,
	5, 1255,
	-2, 1831,
	-1, 915,
	5, 1256,
	-2, 1832,
	-1, 916,
	5, 1257,
	-2, 1833,
	-1, 917,
	5, 1258,
	-2, 2003,
	-1, 918,
	5, 1259,
	-2, 2032,
	-1, 919,
	5, 1260,
	-2, 1809,
	-1, 920,
	5, 1261,
	-2, 1810,
	-1, 921,
	5, 1275,
	-2, 2015,
	-1, 923,
	5, 1250,
	-2, 2011,
	-1, 924,
	5, 1250,
	-2, 2010,
	-1, 925,
	5, 1250,
	-2, 2027,
	-1, 926,
	5, 1267,
	-2, 2005,
	-1, 927,
	5, 1268,
	-2, 1754,
	-1, 928,
	5, 1278,
	-2, 2004,
	-1, 929,
	5, 1280,
	-2, 2043,
	-1, 931,
	5, 1291,
	-2, 1783,
	-1, 932,
	5, 1302,
	-2, 2036,
	-1, 933,
	5, 1294,
	-2, 2037,
	-1, 934,
	5, 1302,
	-2, 2038,
	-1, 935,
	5, 1298,
	-2, 2039,
	-1, 936,
	5, 1219,
	-2, 1839,
	-1, 937,
	5, 1220,
	-2, 1840,
	-1, 938,
	466, 1717,
	-2, 1701,
	-1, 939,
	464, 2064,
	-2, 1718,
	-1, 959,
	5, 1286,
	-2, 1963,
	-1, 977,
	5, 1285,
	-2, 2044,
	-1, 987,
	5, 1287,
	430, 1287,
	-2, 2006,
	-1, 988,
	5, 1288,
	430, 1288,
	-2, 2007,
	-1, 1025,
	464, 1729,
	-2, 1720,
	-1, 1053,
	154, 1975,
	395, 1975,
	447, 1975,
	466, 1975,
	-2, 0,
	-1, 1056,
	1, 494,
	467, 494,
	-2, 977,
	-1, 1176,
	315, 1698,
	457, 1698,
	-2, 1697,
	-1, 1199,
	468, 1698,
	-2, 1699,
	-1, 1237,
	306, 743,
	429, 743,
	-2, 250,
	-1, 1257,
	285, 1081,
	-2, 883,
	-1, 1266,
	265, 1724,
	-2, 0,
	-1, 1332,
	1, 369,
	463, 369,
	465, 369,
	467, 369,
	-2, 1055,
	-1, 1335,
	4, 2042,
	11, 2042,
	12, 2042,
	14, 2042,
	15, 2042,
	16, 2042,
	17, 2042,
	18, 2042,
	19, 2042,
	21, 2042,
	22, 2042,
	23, 2042,
	24, 2042,
	25, 2042,
	27, 2042,
	30, 2042,
	31, 2042,
	33, 2042,
	35, 2042,
	38, 2042,
	39, 2042,
	40, 2042,
	41, 2042,
	42, 2042,
	43, 2042,
	44, 2042,
	45, 2042,
	46, 2042,
	47, 2042,
	48, 2042,
	49, 2042,
	51, 2042,
	52, 2042,
	53, 2042,
	54, 2042,
	55, 2042,
	56, 2042,
	59, 2042,
	60, 2042,
	61, 2042,
	62, 2042,
	64, 2042,
	65, 2042,
	66, 2042,
	69, 2042,
	70, 2042,
	71, 2042,
	72, 2042,
	73, 2042,
	74, 2042,
	75, 2042,
	76, 2042,
	77, 2042,
	78, 2042,
	79, 2042,
	81, 2042,
	82, 2042,
	83, 2042,
	84, 2042,
	85, 2042,
	87, 2042,
	88, 2042,
	89, 2042,
	97, 2042,
	98, 2042,
	99, 2042,
	100, 2042,
	101, 2042,
	102, 2042,
	103, 2042,
	104, 2042,
	106, 2042,
	108, 2042,
	109, 2042,
	111, 2042,
	114, 2042,
	115, 2042,
	116, 2042,
	118, 2042,
	120, 2042,
	121, 2042,
	123, 2042,
	124, 2042,
	125, 2042,
	126, 2042,
	127, 2042,
	128, 2042,
	129, 2042,
	130, 2042,
	131, 2042,
	132, 2042,
	133, 2042,
	134, 2042,
	135, 2042,
	139, 2042,
	140, 2042,
	141, 2042,
	142, 2042,
	143, 2042,
	144, 2042,
	145, 2042,
	146, 2042,
	147, 2042,
	148, 2042,
	149, 2042,
	150, 2042,
	152, 2042,
	155, 2042,
	156, 2042,
	157, 2042,
	159, 2042,
	160, 2042,
	162, 2042,
	163, 2042,
	165, 2042,
	166, 2042,
	167, 2042,
	168, 2042,
	169, 2042,
	170, 2042,
	171, 2042,
	172, 2042,
	173, 2042,
	174, 2042,
	175, 2042,
	176, 2042,
	177, 2042,
	178, 2042,
	179, 2042,
	180, 2042,
	181, 2042,
	183, 2042,
	184, 2042,
	185, 2042,
	187, 2042,
	188, 2042,
	189, 2042,
	190, 2042,
	191, 2042,
	192, 2042,
	193, 2042,
	194, 2042,
	195, 2042,
	197, 2042,
	199, 2042,
	200, 2042,
	201, 2042,
	202, 2042,
	203, 2042,
	204, 2042,
	205, 2042,
	206, 2042,
	207, 2042,
	208, 2042,
	209, 2042,
	210, 2042,
	211, 2042,
	212, 2042,
	213, 2042,
	214, 2042,
	215, 2042,
	217, 2042,
	218, 2042,
	220, 2042,
	221, 2042,
	222, 2042,
	223, 2042,
	224, 2042,
	225, 2042,
	227, 2042,
	228, 2042,
	231, 2042,
	232, 2042,
	233, 2042,
	234, 2042,
	235, 2042,
	236, 2042,
	237, 2042,
	238, 2042,
	239, 2042,
	240, 2042,
	241, 2042,
	242, 2042,
	243, 2042,
	244, 2042,
	245, 2042,
	246, 2042,
	247, 2042,
	248, 2042,
	250, 2042,
	253, 2042,
	254, 2042,
	256, 2042,
	257, 2042,
	258, 2042,
	259, 2042,
	260, 2042,
	262, 2042,
	263, 2042,
	264, 2042,
	267, 2042,
	268, 2042,
	269, 2042,
	270, 2042,
	272, 2042,
	273, 2042,
	274, 2042,
	276, 2042,
	278, 2042,
	279, 2042,
	280, 2042,
	281, 2042,
	282, 2042,
	283, 2042,
	284, 2042,
	285, 2042,
	286, 2042,
	287, 2042,
	289, 2042,
	290, 2042,
	291, 2042,
	292, 2042,
	293, 2042,
	294, 2042,
	296, 2042,
	298, 2042,
	299, 2042,
	300, 2042,
	301, 2042,
	302, 2042,
	303, 2042,
	304, 2042,
	305, 2042,
	306, 2042,
	307, 2042,
	309, 2042,
	310, 2042,
	311, 2042,
	312, 2042,
	313, 2042,
	314, 2042,
	315, 2042,
	316, 2042,
	317, 2042,
	318, 2042,
	319, 2042,
	320, 2042,
	321, 2042,
	322, 2042,
	324, 2042,
	325, 2042,
	326, 2042,
	327, 2042,
	328, 2042,
	329, 2042,
	330, 2042,
	331, 2042,
	332, 2042,
	333, 2042,
	334, 2042,
	335, 2042,
	336, 2042,
	337, 2042,
	338, 2042,
	339, 2042,
	340, 2042,
	342, 2042,
	343, 2042,
	344, 2042,
	345, 2042,
	346, 2042,
	347, 2042,
	348, 2042,
	349, 2042,
	350, 2042,
	351, 2042,
	353, 2042,
	354, 2042,
	355, 2042,
	356, 2042,
	357, 2042,
	358, 2042,
	359, 2042,
	360, 2042,
	361, 2042,
	362, 2042,
	363, 2042,
	365, 2042,
	366, 2042,
	367, 2042,
	368, 2042,
	369, 2042,
	370, 2042,
	371, 2042,
	372, 2042,
	373, 2042,
	374, 2042,
	375, 2042,
	376, 2042,
	378, 2042,
	379, 2042,
	380, 2042,
	382, 2042,
	383, 2042,
	384, 2042,
	385, 2042,
	386, 2042,
	387, 2042,
	388, 2042,
	390, 2042,
	391, 2042,
	392, 2042,
	393, 2042,
	394, 2042,
	396, 2042,
	398, 2042,
	399, 2042,
	400, 2042,
	401, 2042,
	402, 2042,
	404, 2042,
	405, 2042,
	406, 2042,
	408, 2042,
	409, 2042,
	412, 2042,
	413, 2042,
	414, 2042,
	415, 2042,
	416, 2042,
	417, 2042,
	419, 2042,
	421, 2042,
	422, 2042,
	423, 2042,
	424, 2042,
	425, 2042,
	426, 2042,
	427, 2042,
	429, 2042,
	430, 2042,
	431, 2042,
	436, 2042,
	437, 2042,
	438, 2042,
	439, 2042,
	440, 2042,
	441, 2042,
	442, 2042,
	443, 2042,
	445, 2042,
	446, 2042,
	447, 2042,
	448, 2042,
	449, 2042,
	450, 2042,
	452, 2042,
	453, 2042,
	454, 2042,
	455, 2042,
	456, 2042,
	457, 2042,
	458, 2042,
	459, 2042,
	460, 2042,
	462, 2042,
	465, 2042,
	466, 2042,
	468, 2042,
	469, 2042,
	-2, 0,
	-1, 1340,
	154, 1945,
	395, 1945,
	447, 1945,
	466, 1945,
	-2, 0,
	-1, 1370,
	300, 642,
	351, 642,
	-2, 0,
	-1, 1394,
	1, 637,
	463, 637,
	465, 637,
	467, 637,
	-2, 0,
	-1, 1395,
	1, 662,
	463, 662,
	465, 662,
	467, 662,
	-2, 0,
	-1, 1396,
	1, 644,
	463, 644,
	465, 644,
	467, 644,
	-2, 0,
	-1, 1398,
	1, 648,
	463, 648,
	465, 648,
	467, 648,
	-2, 0,
	-1, 1423,
	1, 1995,
	463, 1995,
	465, 1995,
	466, 1995,
	467, 1995,
	-2, 688,
	-1, 1424,
	1, 1942,
	463, 1942,
	465, 1942,
	466, 1942,
	467, 1942,
	-2, 689,
	-1, 1439,
	1, 972,
	467, 972,
	-2, 977,
	-1, 1444,
	138, 1093,
	226, 1093,
	261, 1093,
	-2, 1044,
	-1, 1540,
	122, 1057,
	138, 1057,
	196, 1057,
	226, 1057,
	261, 1057,
	271, 1057,
	410, 1057,
	-2, 1460,
	-1, 1595,
	465, 1600,
	-2, 0,
	-1, 1629,
	122, 1057,
	138, 1057,
	196, 1057,
	226, 1057,
	261, 1057,
	271, 1057,
	410, 1057,
	-2, 1169,
	-1, 1688,
	464, 1290,
	-2, 1278,
	-1, 1732,
	1, 496,
	467, 496,
	-2, 977,
	-1, 1934,
	1, 639,
	463, 639,
	465, 639,
	467, 639,
	-2, 0,
	-1, 1935,
	1, 664,
	463, 664,
	465, 664,
	467, 664,
	-2, 0,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1341,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1342,
	-1, 2029,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1343,
	-1, 2030,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1344,
	-1, 2031,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1345,
	-1, 2032,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1346,
	-1, 2033,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1347,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1348,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1360,
	-1, 2047,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1361,
	-1, 2048,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1362,
	-1, 2051,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1367,
	-1, 2057,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1371,
	-1, 2059,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1379,
	-1, 2060,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1380,
	-1, 2061,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1381,
	-1, 2062,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1382,
	-1, 2158,
	5, 1247,
	154, 1611,
	464, 1729,
	-2, 1720,
	-1, 2159,
	154, 1612,
	-2, 1999,
	-1, 2160,
	154, 1613,
	-2, 1862,
	-1, 2161,
	154, 1614,
	-2, 1784,
	-1, 2162,
	154, 1615,
	-2, 1820,
	-1, 2163,
	154, 1616,
	-2, 1860,
	-1, 2164,
	154, 1617,
	-2, 1936,
	-1, 2165,
	154, 1618,
	-2, 1444,
	-1, 2234,
	1, 1170,
	2, 1170,
	87, 1170,
	122, 1170,
	138, 1170,
	151, 1170,
	155, 1170,
	161, 1170,
	164, 1170,
	187, 1170,
	196, 1170,
	206, 1170,
	222, 1170,
	226, 1170,
	245, 1170,
	261, 1170,
	265, 1170,
	271, 1170,
	323, 1170,
	325, 1170,
	410, 1170,
	420, 1170,
	433, 1170,
	434, 1170,
	435, 1170,
	444, 1170,
	463, 1170,
	465, 1170,
	467, 1170,
	469, 1170,
	-2, 1169,
	-1, 2247,
	464, 1703,
	-2, 1715,
	-1, 2267,
	464, 1289,
	-2, 1279,
	-1, 2514,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1369,
	-1, 2515,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1373,
	-1, 2521,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1375,
	-1, 2708,
	203, 977,
	296, 977,
	304, 977,
	444, 977,
	-2, 493,
	-1, 2802,
	285, 1081,
	-2, 883,
	-1, 2891,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1377,
	-1, 2898,
	200, 0,
	202, 0,
	253, 0,
	-2, 1396,
	-1, 2961,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1425,
	-1, 2962,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1426,
	-1, 2963,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1427,
	-1, 2967,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1431,
	-1, 2968,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1432,
	-1, 2969,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1433,
	-1, 3013,
	464, 1704,
	-2, 1716,
	-1, 3102,
	466, 2146,
	-2, 1021,
	-1, 3153,
	200, 0,
	202, 0,
	253, 0,
	-2, 1397,
	-1, 3156,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1400,
	-1, 3157,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1402,
	-1, 3320,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1401,
	-1, 3321,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1403,
	-1, 3331,
	200, 0,
	-2, 1434,
	-1, 3444,
	200, 0,
	-2, 1435,
	-1, 3566,
	43, 0,
	173, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 2002,
}

const sqlPrivate = 57344

const sqlLast = 80578

var sqlAct = [...]int{

	908, 3360, 3660, 3389, 3565, 3363, 3575, 3532, 3257, 2639,
	2190, 3650, 3544, 3576, 2790, 3518, 3535, 3577, 3613, 3033,
	3135, 2409, 3349, 1026, 3396, 2929, 3564, 3448, 2640, 3285,
	838, 1324, 3309, 1180, 3094, 3089, 1208, 2014, 3405, 214,
	853, 214, 214, 2725, 214, 214, 214, 214, 214, 3214,
	2818, 214, 1457, 3270, 1663, 2074, 2811, 1320, 2786, 594,
	3075, 3290, 572, 2883, 2813, 2442, 1780, 3034, 1062, 3335,
	1081, 2382, 829, 2444, 2398, 2625, 2385, 214, 2374, 1173,
	2645, 594, 1018, 2662, 2654, 2452, 2682, 2298, 1868, 692,
	2507, 2643, 2433, 1888, 1910, 3134, 2410, 1865, 1635, 1858,
	1664, 2441, 1378, 2984, 1604, 2435, 2300, 1803, 3187, 2226,
	2624, 1568, 2227, 2224, 3449, 1820, 32, 1789, 206, 2011,
	2542, 1548, 2503, 837, 142, 2087, 4, 1200, 1189, 86,
	2358, 1816, 2007, 1192, 2116, 2357, 2451, 1439, 2229, 2383,
	1765, 1809, 904, 2107, 2208, 1069, 1767, 2071, 3390, 1605,
	2688, 1624, 2334, 1859, 825, 1182, 2788, 1333, 1317, 930,
	2118, 2333, 1307, 2403, 1850, 1255, 1012, 595, 2110, 2445,
	1058, 2216, 208, 596, 2290, 1614, 1563, 214, 214, 526,
	540, 207, 991, 548, 1009, 2198, 2088, 2154, 1531, 149,
	1458, 1456, 590, 556, 1331, 1281, 150, 864, 2187, 142,
	1849, 1008, 686, 1621, 1874, 638, 667, 1779, 566, 1205,
	1014, 865, 543, 37, 739, 36, 34, 25, 989, 1462,
	23, 21, 1438, 1263, 756, 2998, 551, 2999, 3690, 2538,
	2641, 599, 2207, 3681, 1890, 1890, 1890, 2207, 3680, 3659,
	602, 3642, 2207, 1826, 3640, 3228, 3599, 3597, 3228, 2828,
	3600, 2207, 3595, 599, 3592, 3589, 2207, 3586, 3593, 3590,
	3562, 1826, 602, 3561, 1826, 1006, 2827, 1826, 3560, 833,
	3557, 828, 1902, 702, 1902, 1470, 1471, 2706, 3556, 3530,
	3513, 834, 1902, 3228, 2262, 3507, 3506, 3501, 3500, 2207,
	2207, 3228, 3228, 3494, 3488, 1501, 3486, 1826, 3228, 3446,
	3228, 2258, 1473, 2262, 1470, 1471, 833, 1503, 1504, 1505,
	1513, 1514, 1515, 3427, 3424, 992, 992, 1826, 3228, 2200,
	1043, 3398, 3379, 1506, 1501, 3399, 1826, 2353, 2320, 3378,
	1472, 1473, 813, 1826, 3370, 1826, 1519, 3369, 1826, 812,
	3341, 3228, 2207, 3514, 1826, 3322, 1470, 1471, 3307, 2262,
	3430, 3298, 1902, 3255, 2173, 2841, 3246, 2207, 3227, 1472,
	2207, 3155, 3228, 820, 2988, 2262, 1501, 3110, 1492, 1066,
	3104, 2857, 3073, 1473, 2857, 1489, 3074, 3008, 3006, 2199,
	907, 3009, 3007, 1470, 1471, 2991, 2913, 1902, 1038, 2207,
	1826, 1470, 1471, 2910, 2988, 2856, 993, 2207, 2848, 2857,
	2638, 1472, 2849, 1501, 2207, 2636, 1066, 2597, 2598, 2207,
	1473, 1501, 880, 1478, 3247, 2635, 2589, 2570, 1473, 2207,
	2207, 2571, 2553, 2551, 2431, 995, 2207, 996, 1906, 2552,
	1826, 2456, 1495, 1496, 1497, 1498, 2430, 2360, 1472, 2275,
	1906, 1902, 1478, 2207, 1500, 1502, 1472, 1492, 182, 182,
	2261, 2849, 2348, 2256, 2262, 2597, 2598, 2207, 2615, 2616,
	2617, 2249, 1039, 2289, 2206, 1826, 1510, 2207, 2207, 1520,
	1784, 2612, 1905, 1500, 1502, 1738, 1906, 2597, 2598, 2841,
	2615, 2616, 2617, 2380, 1478, 2506, 1889, 1825, 184, 184,
	2287, 1600, 1204, 1516, 3061, 1517, 3151, 2886, 1493, 1891,
	1891, 1891, 1487, 1488, 2541, 2866, 1622, 1819, 2243, 2829,
	2242, 1495, 1496, 1497, 1498, 1500, 1502, 1380, 1508, 2612,
	2241, 1478, 2240, 2239, 997, 2113, 994, 1493, 2830, 1478,
	906, 214, 183, 183, 819, 182, 818, 817, 816, 1758,
	815, 2612, 176, 176, 811, 2603, 1518, 810, 2483, 3203,
	177, 177, 1500, 1502, 809, 1397, 808, 807, 806, 214,
	1500, 1502, 3166, 1507, 2827, 1021, 214, 805, 804, 1493,
	803, 151, 151, 802, 2145, 184, 1470, 1471, 801, 800,
	799, 737, 214, 1084, 214, 214, 1185, 214, 1084, 214,
	1185, 2114, 1039, 2603, 736, 735, 1494, 1024, 214, 214,
	734, 1068, 733, 1473, 732, 1073, 1493, 1499, 731, 730,
	729, 728, 727, 726, 1493, 2603, 725, 724, 723, 183,
	2619, 722, 721, 214, 1214, 1494, 720, 719, 718, 717,
	2613, 1472, 3582, 1539, 2199, 1039, 716, 214, 715, 714,
	1185, 1185, 214, 214, 2618, 214, 1195, 1898, 1889, 1982,
	713, 1511, 712, 711, 701, 700, 658, 214, 151, 657,
	615, 3002, 836, 2115, 2112, 214, 2618, 1494, 614, 613,
	605, 604, 2597, 2598, 603, 2615, 2616, 2617, 2613, 214,
	214, 214, 214, 214, 1185, 1185, 1499, 579, 578, 1185,
	577, 3150, 214, 1185, 214, 214, 1082, 576, 560, 204,
	2613, 1193, 203, 1176, 1494, 1056, 202, 1199, 214, 201,
	200, 199, 1494, 198, 1478, 1020, 1328, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 1213, 197, 1218, 2614, 1224,
	196, 1539, 195, 194, 193, 1509, 2612, 192, 1484, 1485,
	1491, 1512, 1490, 1486, 1185, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 191, 190, 75, 189, 3176, 188,
	1264, 1264, 3175, 2117, 187, 1207, 1077, 214, 1170, 1175,
	599, 1206, 186, 1268, 1051, 185, 2614, 2858, 2685, 602,
	2564, 214, 2547, 2364, 1226, 2250, 2391, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 214, 1350, 2614, 1625,
	1199, 2137, 2233, 2135, 1913, 1763, 1571, 1648, 1557, 1550,
	2603, 1321, 1570, 142, 142, 1346, 1336, 1338, 834, 1210,
	1075, 1469, 1349, 1028, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 1574, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 3563, 1311, 1314, 1334, 3433, 2597, 2598, 2608, 2606,
	2607, 2599, 2600, 2601, 2602, 2604, 2605, 2406, 1284, 1571,
	3059, 2618, 3482, 2111, 1407, 1570, 1265, 3439, 3431, 3299,
	3207, 3359, 1912, 2597, 2598, 1398, 2615, 2616, 2617, 3294,
	3186, 3185, 3173, 3172, 3171, 1445, 1569, 2271, 2852, 2609,
	2610, 2611, 2901, 3170, 182, 2613, 2608, 2606, 2607, 2599,
	2600, 2601, 2602, 2604, 2605, 3165, 3163, 3162, 3072, 1005,
	3022, 2609, 2610, 2611, 3021, 3020, 3012, 2981, 2608, 2606,
	2607, 2599, 2600, 2601, 2602, 2604, 2605, 3079, 2980, 2979,
	2906, 1555, 2902, 1444, 184, 2680, 2632, 2612, 2623, 2596,
	2593, 1551, 2592, 1549, 2700, 2590, 2577, 2576, 2575, 2572,
	2569, 1225, 2563, 2546, 2539, 1355, 2432, 2234, 2100, 1469,
	1831, 1829, 1468, 182, 1550, 1437, 182, 1443, 2392, 1538,
	1371, 1470, 1471, 3688, 3658, 1862, 3657, 3598, 183, 1027,
	2931, 3552, 118, 1455, 2603, 1399, 1759, 2335, 176, 1442,
	1220, 214, 3550, 2614, 3476, 2502, 177, 3473, 1473, 3470,
	3469, 182, 834, 184, 3468, 3463, 184, 3457, 3428, 1440,
	3423, 2603, 3422, 2077, 3375, 1611, 1602, 151, 214, 3355,
	1474, 1475, 1476, 1477, 1479, 1480, 1472, 813, 214, 1084,
	214, 214, 214, 214, 812, 3333, 1446, 2144, 594, 214,
	214, 184, 3317, 594, 214, 1658, 1573, 183, 3316, 214,
	183, 1465, 1466, 3304, 3303, 1185, 3283, 176, 2597, 2598,
	176, 1730, 2618, 3280, 1650, 177, 3274, 3202, 177, 2613,
	182, 3184, 3124, 3121, 3050, 1660, 1084, 3049, 3293, 3037,
	1727, 3036, 2994, 2897, 2859, 183, 151, 2842, 1735, 151,
	1656, 2805, 2775, 182, 1632, 176, 2613, 2751, 2083, 2728,
	1761, 1565, 1566, 177, 1608, 1609, 2609, 2610, 2611, 1478,
	184, 1729, 2727, 2608, 2606, 2607, 2599, 2600, 2601, 2602,
	2604, 2605, 2701, 182, 151, 2264, 2637, 2568, 3078, 992,
	2390, 2567, 1639, 184, 2562, 1470, 1471, 2530, 2373, 142,
	1575, 1572, 1651, 834, 2597, 2598, 1564, 1561, 2597, 2598,
	2269, 1199, 2268, 2245, 183, 1501, 2238, 1219, 1652, 1470,
	1471, 2205, 1473, 184, 176, 2133, 1633, 2614, 1535, 1647,
	2728, 1603, 177, 1599, 1654, 1598, 1597, 183, 1596, 1595,
	1630, 1594, 1914, 1593, 1592, 1591, 1473, 176, 2677, 1764,
	1472, 1732, 1589, 151, 2614, 177, 2603, 1588, 1587, 1586,
	1585, 1690, 1584, 1185, 1185, 214, 1583, 183, 1582, 1601,
	599, 1084, 1581, 1623, 1472, 599, 2405, 176, 1580, 602,
	1757, 1579, 1627, 1578, 602, 177, 1773, 1577, 1552, 1642,
	1659, 1641, 1640, 1638, 1822, 1726, 1637, 1636, 1536, 1666,
	1534, 1529, 1050, 2597, 2598, 1041, 151, 1034, 3450, 3277,
	214, 3204, 1661, 3159, 214, 214, 1806, 2597, 2598, 1808,
	3018, 3005, 1813, 2997, 2136, 2550, 2134, 214, 2236, 1821,
	3344, 3206, 3017, 1478, 2597, 2598, 214, 1551, 214, 1750,
	214, 2613, 2603, 3434, 214, 2698, 2603, 2608, 2606, 2607,
	2599, 2600, 2601, 2602, 2604, 2605, 1532, 1643, 214, 3249,
	1584, 1584, 863, 1758, 1500, 1502, 3432, 2609, 2610, 2611,
	1072, 3471, 2814, 1788, 2608, 2606, 2607, 2599, 2600, 2601,
	2602, 2604, 2605, 3401, 1827, 1070, 3400, 3297, 3248, 182,
	3000, 1823, 1802, 3358, 1853, 2844, 2843, 1758, 1185, 1733,
	1185, 214, 1185, 1066, 1817, 214, 2337, 3082, 1185, 1758,
	1370, 1185, 214, 1571, 214, 214, 1066, 1063, 1493, 1570,
	1625, 2754, 1071, 2574, 1185, 1185, 1185, 2613, 214, 184,
	1435, 1004, 1207, 1856, 2573, 214, 1871, 599, 1206, 2614,
	3406, 2603, 2512, 2322, 594, 214, 602, 214, 1067, 214,
	1556, 214, 1021, 214, 1021, 2603, 1744, 2597, 2598, 2699,
	2615, 2616, 2617, 1812, 1863, 1893, 1057, 214, 1895, 3048,
	214, 1897, 214, 183, 1824, 1900, 797, 1476, 1477, 1479,
	1480, 214, 1879, 176, 1024, 2792, 1024, 2791, 1066, 1559,
	1930, 177, 1911, 1408, 1916, 1379, 3397, 1380, 1804, 3064,
	3052, 2864, 214, 1840, 1655, 1841, 3336, 3661, 214, 2641,
	1064, 214, 151, 2933, 2108, 798, 1494, 2267, 1065, 2556,
	3583, 2612, 1590, 1567, 2784, 2614, 2613, 834, 1857, 834,
	1241, 1873, 3029, 1084, 3594, 1918, 3591, 1284, 2823, 1876,
	1359, 1876, 1921, 3528, 1877, 3090, 3043, 1022, 1881, 1882,
	2439, 2402, 3628, 1334, 3629, 1334, 2499, 3493, 653, 2710,
	2606, 2607, 2599, 2600, 2601, 2602, 2604, 2605, 3238, 1454,
	1986, 1995, 1229, 791, 778, 1784, 2276, 3584, 1749, 1748,
	789, 793, 1758, 1755, 787, 2302, 784, 212, 1968, 1966,
	1981, 3685, 1907, 1239, 1908, 2603, 3388, 1405, 3381, 3066,
	1063, 3063, 1020, 2712, 1020, 1452, 2089, 2090, 3062, 1051,
	3026, 3025, 1920, 2265, 2561, 2560, 599, 2559, 1084, 842,
	2558, 2516, 2089, 2105, 2614, 602, 1072, 2355, 832, 1745,
	2347, 2012, 2013, 2344, 2325, 2257, 1948, 654, 2058, 1474,
	1475, 1476, 1477, 1479, 1480, 1406, 2015, 2607, 2599, 2600,
	2601, 2602, 2604, 2605, 2601, 2602, 2604, 2605, 1066, 1984,
	2153, 214, 2157, 2157, 2171, 1240, 2089, 1063, 1480, 2191,
	2193, 1993, 1441, 1990, 2197, 2305, 1203, 2129, 1071, 1752,
	2613, 2128, 1404, 1084, 2016, 214, 1839, 2113, 2399, 1357,
	1690, 1690, 2865, 1064, 214, 1983, 1274, 1985, 1273, 1980,
	1925, 1065, 831, 1249, 1352, 1072, 214, 781, 1994, 1084,
	2283, 1272, 813, 1271, 1453, 813, 813, 1295, 2246, 2003,
	3492, 2248, 2004, 2005, 834, 3315, 832, 2313, 1666, 1666,
	2753, 2120, 3365, 2104, 2293, 834, 1992, 3554, 2312, 834,
	852, 1235, 1938, 1878, 2324, 2871, 2291, 2599, 2600, 2601,
	2602, 2604, 2605, 2114, 3039, 827, 2213, 1071, 2073, 1448,
	1064, 2599, 2600, 2601, 2602, 2604, 2605, 2073, 1065, 2870,
	1418, 1754, 1632, 1451, 2480, 1933, 2293, 833, 2614, 2085,
	1934, 1976, 1989, 2605, 1049, 2126, 3234, 1372, 2291, 214,
	2127, 2069, 1356, 2130, 773, 2131, 2132, 1185, 2102, 992,
	831, 1353, 1753, 2235, 2597, 2598, 2081, 2615, 2616, 2617,
	1759, 2335, 2079, 2117, 3250, 2067, 824, 2304, 2221, 2212,
	1394, 834, 2247, 2900, 1084, 2115, 2112, 1979, 3665, 214,
	1735, 1935, 1781, 2220, 2108, 2225, 2341, 214, 2231, 2232,
	2166, 1066, 2182, 2195, 1759, 2335, 142, 2922, 214, 2259,
	2218, 2219, 2214, 3225, 2203, 2204, 1759, 2335, 1630, 3618,
	3628, 214, 1777, 1941, 656, 655, 1185, 1403, 2612, 1434,
	2279, 1395, 709, 538, 3140, 833, 2504, 2505, 2255, 214,
	1084, 3222, 2281, 1782, 1783, 580, 214, 214, 1988, 774,
	1573, 2609, 2610, 2611, 2294, 773, 2709, 533, 2608, 2606,
	2607, 2599, 2600, 2601, 2602, 2604, 2605, 3139, 1066, 214,
	1978, 1778, 214, 649, 2282, 648, 830, 824, 214, 1368,
	2270, 2063, 1784, 3223, 3314, 2117, 1380, 1237, 1380, 2280,
	2064, 214, 3232, 2303, 2065, 2274, 2356, 2288, 2070, 214,
	2342, 214, 2603, 2323, 214, 2377, 1942, 2117, 1565, 1566,
	214, 2328, 1821, 214, 1643, 214, 2319, 214, 1358, 214,
	214, 3511, 214, 1185, 1185, 1185, 2327, 1185, 2277, 2273,
	785, 1415, 214, 214, 795, 214, 214, 785, 794, 1176,
	1975, 786, 586, 785, 1967, 1965, 214, 2486, 2820, 2352,
	774, 3040, 1031, 2618, 3675, 2426, 2427, 1199, 2297, 2361,
	1294, 214, 214, 214, 2306, 2309, 214, 2366, 214, 2368,
	1690, 214, 3653, 214, 830, 214, 2422, 2336, 2338, 2339,
	2340, 2315, 3366, 1029, 1234, 2111, 2413, 2613, 2396, 1759,
	1756, 1890, 2326, 3645, 775, 2765, 214, 214, 214, 214,
	214, 214, 2470, 214, 2471, 2343, 1821, 1784, 1666, 2759,
	1821, 2404, 1821, 1207, 2404, 3233, 1021, 3580, 599, 2362,
	2468, 3051, 2438, 2453, 1416, 588, 2371, 602, 1801, 3218,
	2489, 214, 1021, 3219, 2457, 2458, 2381, 1199, 1199, 2415,
	1786, 1768, 2066, 1354, 1256, 1769, 782, 3464, 1024, 142,
	2424, 2068, 2428, 2455, 2491, 1937, 2493, 2459, 2518, 2460,
	3509, 2408, 2465, 2292, 1024, 3646, 1032, 2072, 2919, 1977,
	1256, 1447, 2472, 3221, 2474, 2419, 2476, 2420, 2423, 2421,
	1254, 1199, 1334, 2741, 2429, 2614, 3224, 1775, 1932, 3510,
	2467, 2440, 2484, 2711, 2821, 775, 1048, 1417, 2478, 2473,
	685, 2475, 776, 2477, 2080, 1940, 1617, 1562, 3266, 3617,
	1775, 710, 2099, 2696, 1528, 1199, 1775, 1199, 852, 1815,
	214, 534, 852, 2345, 2544, 2545, 582, 2740, 2494, 2548,
	1168, 2488, 2519, 3311, 1770, 1168, 3136, 2293, 1620, 1814,
	2920, 777, 2778, 3327, 3581, 587, 3635, 1772, 3540, 2307,
	2485, 3648, 2820, 822, 3475, 773, 2549, 2215, 2566, 2230,
	2497, 2217, 3666, 3651, 833, 3276, 1020, 2055, 2743, 1810,
	3130, 2501, 3141, 1618, 535, 3014, 1044, 824, 3578, 3627,
	1382, 3077, 1020, 2540, 3625, 584, 3411, 2496, 3282, 3220,
	1782, 1783, 2809, 2745, 1461, 2394, 1848, 1610, 2609, 2610,
	2611, 1042, 1774, 776, 1037, 2608, 2606, 2607, 2599, 2600,
	2601, 2602, 2604, 2605, 536, 823, 537, 525, 1811, 3676,
	2634, 3579, 1084, 2517, 581, 3182, 3137, 834, 1785, 2487,
	2884, 1367, 1369, 2648, 2649, 3310, 2650, 3652, 1746, 1450,
	2117, 214, 777, 2744, 1807, 3372, 214, 2689, 3371, 214,
	774, 3616, 214, 214, 1084, 1460, 1891, 3670, 214, 3353,
	3237, 585, 3454, 3028, 2810, 1030, 3267, 3236, 2723, 3654,
	2555, 1084, 583, 2670, 2719, 2395, 1619, 2384, 214, 2375,
	1872, 1861, 1860, 1835, 3477, 1999, 2918, 3519, 2498, 1743,
	1972, 2970, 1460, 214, 3647, 2329, 1739, 2053, 3095, 3286,
	2056, 1775, 2372, 1297, 3395, 3393, 3354, 2733, 2730, 2729,
	2510, 214, 214, 214, 2694, 1991, 2658, 214, 2527, 3143,
	214, 1926, 2996, 1396, 706, 2707, 699, 214, 214, 2705,
	214, 214, 214, 2747, 1022, 2647, 1022, 2653, 2713, 2684,
	3312, 2660, 2525, 1459, 214, 214, 214, 2652, 2683, 2052,
	2659, 2379, 1280, 214, 1528, 2668, 1741, 2679, 2254, 2253,
	2209, 2671, 2672, 2686, 2308, 214, 1185, 2673, 214, 2642,
	2676, 2732, 3183, 1742, 2737, 2738, 1084, 2252, 1461, 2657,
	1459, 2251, 2720, 2697, 2687, 1084, 2000, 2669, 1278, 3144,
	214, 606, 708, 214, 214, 775, 831, 214, 2716, 2717,
	1185, 214, 2756, 2629, 2630, 2631, 2674, 3669, 2675, 1185,
	1185, 3459, 3361, 3235, 2731, 214, 3258, 2735, 2853, 2724,
	1870, 214, 2758, 2691, 2692, 2693, 214, 2211, 214, 2801,
	2971, 2816, 2210, 3478, 2708, 214, 2330, 2331, 2972, 2359,
	3632, 1771, 1690, 1383, 2766, 1266, 2531, 2532, 2522, 2702,
	2703, 3391, 2704, 2748, 2749, 3188, 2714, 2750, 1773, 1185,
	1185, 2523, 1267, 1199, 3522, 2528, 3634, 214, 214, 2985,
	2664, 214, 2124, 2779, 3460, 3596, 2746, 1185, 1690, 2825,
	1666, 2789, 2054, 1856, 1773, 3472, 2772, 2773, 2752, 1432,
	2774, 3362, 1613, 2797, 3332, 2761, 2770, 2690, 2687, 3181,
	2771, 821, 2764, 776, 214, 2626, 1084, 214, 214, 1084,
	214, 2776, 2781, 2453, 2817, 1430, 1666, 1817, 2777, 2762,
	2769, 2327, 2453, 2763, 3351, 1817, 704, 705, 697, 698,
	3523, 214, 1768, 2833, 2834, 2835, 1769, 2836, 2837, 2896,
	3461, 2123, 777, 1964, 2665, 1412, 2862, 2840, 1279, 2815,
	2620, 2621, 2622, 1613, 848, 834, 3352, 2780, 2591, 2855,
	1617, 2529, 2822, 2376, 2354, 2851, 2824, 2877, 1084, 2321,
	2860, 2831, 1410, 2272, 142, 142, 1168, 2838, 2839, 2876,
	1649, 1393, 1391, 1389, 1277, 1084, 2663, 214, 707, 1387,
	1646, 1433, 1620, 607, 608, 1385, 2867, 1347, 2868, 2627,
	2869, 1021, 2879, 1377, 2861, 2899, 2667, 1375, 1276, 2524,
	938, 1615, 2878, 827, 2482, 2481, 1021, 852, 2526, 1193,
	2462, 1617, 1082, 1168, 1974, 1770, 1945, 1618, 1199, 1728,
	1576, 1351, 1253, 1024, 3574, 2874, 2908, 2909, 1772, 2873,
	3254, 1431, 3245, 2880, 783, 3516, 1021, 3211, 1024, 210,
	1616, 528, 529, 1620, 544, 528, 544, 554, 559, 2882,
	3093, 575, 3046, 3044, 2982, 2915, 3027, 1429, 2808, 210,
	2656, 2800, 1615, 2793, 2400, 2389, 2388, 2369, 1024, 1904,
	1903, 2912, 2666, 1901, 2904, 1899, 1896, 696, 1618, 610,
	609, 210, 1963, 1774, 2914, 214, 214, 1411, 2927, 1894,
	1892, 2930, 2012, 2940, 2936, 3614, 1084, 1883, 2937, 2934,
	1690, 1616, 1832, 3001, 2921, 2923, 2924, 3629, 2012, 2950,
	2974, 2939, 1830, 1818, 1409, 2947, 1805, 214, 1800, 2812,
	1619, 1787, 1821, 1392, 1390, 1388, 1776, 2949, 1768, 611,
	612, 1386, 1769, 2925, 3416, 1001, 2508, 1384, 1666, 2978,
	1657, 1020, 2935, 2992, 2993, 1376, 2975, 3546, 1168, 1374,
	1275, 1690, 1690, 3023, 1463, 1655, 1020, 788, 790, 1002,
	3306, 3301, 2989, 2990, 214, 3300, 2454, 1690, 1690, 2987,
	1762, 142, 3053, 1231, 2983, 2293, 2293, 528, 528, 3418,
	3103, 1619, 1775, 2311, 1784, 210, 1020, 2291, 2310, 1666,
	1666, 1185, 1936, 1021, 1962, 3004, 3065, 3003, 1690, 1427,
	1428, 1961, 1943, 3239, 214, 1666, 1666, 1470, 1471, 3013,
	2509, 214, 3466, 1373, 2715, 2655, 1470, 1471, 3441, 1084,
	214, 1770, 3067, 3189, 1185, 1024, 3057, 2332, 2314, 1467,
	1736, 2349, 3058, 3060, 1772, 539, 1666, 2351, 214, 3045,
	1464, 3047, 3031, 1473, 2316, 1003, 3105, 3515, 3483, 2350,
	3086, 3076, 214, 214, 1185, 1185, 1185, 3097, 214, 214,
	214, 3011, 1472, 214, 214, 2407, 2318, 214, 214, 2196,
	1185, 1472, 3019, 3083, 1731, 3649, 214, 1084, 2317, 1662,
	3100, 550, 2892, 2893, 2695, 3668, 3068, 3096, 3485, 1774,
	3085, 1539, 2327, 2597, 2598, 1470, 1471, 1084, 1361, 3099,
	2724, 3128, 2285, 2284, 1360, 3084, 2119, 3016, 2285, 2286,
	2125, 1414, 3087, 3160, 1413, 3015, 2926, 1537, 3677, 3451,
	3385, 3345, 1771, 3343, 3158, 2413, 3273, 3205, 1022, 1856,
	3107, 3127, 3120, 3098, 3106, 3101, 3109, 3088, 3071, 3070,
	3069, 3042, 214, 1020, 1022, 3112, 2832, 3117, 3118, 2806,
	2804, 3116, 3123, 3126, 3091, 2453, 3125, 3111, 2464, 1690,
	3122, 3119, 3154, 2463, 2951, 2952, 2953, 2954, 2955, 2956,
	2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966,
	2967, 2968, 2969, 3138, 2973, 3133, 3145, 2417, 1775, 3129,
	2393, 2370, 2084, 1960, 1959, 1958, 1957, 1666, 1886, 1885,
	1884, 1864, 1843, 1842, 1838, 214, 1837, 1836, 1834, 1833,
	1168, 1084, 1426, 1084, 1425, 1306, 1305, 1304, 1303, 1302,
	1766, 1301, 1300, 1299, 1298, 1296, 1291, 1290, 1289, 1288,
	1287, 2002, 3146, 3180, 1248, 1247, 214, 214, 214, 1246,
	1245, 3194, 1244, 1021, 1021, 1243, 1242, 1236, 214, 1230,
	1228, 1227, 1047, 1046, 976, 214, 885, 214, 1737, 796,
	214, 214, 214, 640, 780, 3364, 3230, 1690, 1420, 73,
	1238, 626, 1084, 214, 214, 1024, 1024, 1084, 67, 3190,
	1327, 3041, 635, 3527, 3231, 214, 2739, 3195, 3193, 214,
	1944, 1381, 3196, 1946, 2678, 1168, 3242, 3243, 2237, 3508,
	3241, 214, 2683, 3210, 1084, 1666, 3201, 1185, 3191, 3192,
	3167, 2565, 3447, 3326, 2122, 1558, 3200, 69, 873, 958,
	3265, 3264, 3212, 3208, 3209, 3030, 3199, 2443, 1771, 3262,
	3261, 1035, 841, 1087, 1747, 214, 3229, 879, 1760, 2266,
	3288, 2156, 3240, 1670, 882, 1667, 3197, 1084, 1669, 3252,
	884, 3302, 883, 3253, 1668, 1560, 881, 1665, 3260, 1045,
	1168, 2378, 3291, 2411, 2174, 1283, 575, 3278, 760, 3275,
	3287, 3305, 3259, 1751, 2078, 2106, 2554, 1084, 1553, 854,
	874, 87, 210, 3289, 210, 210, 1168, 1190, 3296, 210,
	875, 2103, 1856, 1020, 1020, 1040, 2661, 2819, 210, 1209,
	3010, 3292, 1998, 3268, 2500, 643, 2594, 2109, 1033, 2179,
	3338, 2172, 3256, 3279, 1084, 2168, 2401, 3313, 1436, 1021,
	1530, 2412, 214, 1233, 214, 1074, 1084, 214, 857, 2076,
	1544, 3295, 2534, 1449, 2826, 214, 2681, 1252, 2263, 3284,
	3543, 2006, 210, 210, 3323, 1190, 1847, 3318, 1000, 3334,
	999, 1024, 998, 3534, 3531, 2787, 87, 210, 214, 1740,
	1082, 2278, 1522, 3348, 2794, 1293, 869, 3347, 1198, 2646,
	2854, 3339, 3340, 1250, 3465, 1521, 792, 214, 3456, 210,
	210, 210, 210, 1190, 1061, 214, 1060, 3346, 1059, 3384,
	3324, 2722, 575, 214, 210, 210, 3674, 3038, 1185, 3394,
	3403, 1168, 181, 3368, 214, 1987, 3367, 3342, 696, 826,
	3408, 178, 180, 3410, 179, 3269, 3055, 90, 35, 16,
	3382, 117, 116, 814, 115, 214, 214, 3324, 3386, 114,
	3392, 3413, 835, 3425, 3426, 113, 112, 3437, 3438, 2015,
	3417, 111, 110, 3402, 3376, 3377, 109, 214, 108, 3374,
	107, 3415, 106, 105, 1690, 3407, 3414, 1168, 104, 3291,
	103, 3412, 214, 3420, 102, 1010, 101, 210, 3419, 1020,
	100, 99, 2789, 98, 97, 96, 95, 94, 93, 1021,
	92, 210, 3462, 3436, 3453, 91, 571, 1021, 568, 49,
	48, 89, 1666, 88, 15, 33, 559, 13, 3445, 53,
	1021, 54, 12, 1917, 3421, 3467, 28, 3452, 1690, 3440,
	214, 1024, 3429, 29, 3474, 79, 78, 1542, 27, 1024,
	14, 1547, 214, 1185, 26, 24, 10, 8, 7, 214,
	30, 1634, 1024, 1185, 1185, 11, 147, 146, 72, 1185,
	3499, 145, 71, 214, 1199, 214, 1666, 144, 143, 70,
	22, 3480, 3481, 3484, 9, 3487, 3490, 139, 3404, 3491,
	3081, 66, 3512, 3479, 3497, 3498, 141, 140, 214, 63,
	3502, 138, 3495, 3503, 214, 214, 3524, 1084, 137, 3504,
	3496, 3505, 64, 3407, 136, 135, 214, 214, 65, 134,
	20, 3537, 5, 52, 3541, 6, 3308, 2863, 83, 3533,
	3536, 3547, 3549, 1690, 3551, 84, 31, 61, 60, 59,
	3525, 19, 3538, 1022, 3529, 51, 3559, 18, 3558, 171,
	170, 169, 168, 163, 162, 214, 167, 165, 1022, 1020,
	164, 3553, 166, 3555, 161, 133, 3585, 1020, 173, 172,
	175, 1666, 159, 155, 154, 158, 3331, 3570, 3571, 160,
	1020, 3573, 3572, 157, 156, 153, 174, 132, 1022, 131,
	3587, 3601, 56, 130, 129, 214, 128, 127, 3603, 126,
	3605, 55, 3610, 17, 3545, 1790, 2, 1, 3611, 0,
	3604, 3615, 3606, 3602, 0, 214, 3607, 0, 3356, 0,
	2015, 528, 0, 0, 1794, 0, 0, 0, 0, 3621,
	3622, 3626, 0, 0, 3624, 0, 0, 3623, 3631, 214,
	3548, 214, 210, 3630, 210, 0, 0, 3639, 210, 3641,
	3633, 3533, 0, 3637, 3536, 3644, 3638, 3643, 1209, 0,
	1190, 210, 0, 210, 0, 0, 0, 1791, 210, 1209,
	544, 2174, 2174, 210, 1209, 3636, 0, 3656, 0, 575,
	0, 3655, 2413, 0, 3663, 0, 3662, 3225, 3664, 0,
	0, 3608, 3609, 0, 3667, 3612, 1178, 0, 3671, 0,
	1201, 2597, 2598, 0, 2615, 2616, 2617, 0, 3672, 3673,
	0, 3678, 0, 3679, 0, 3222, 0, 0, 3215, 0,
	0, 0, 3682, 3683, 3684, 3686, 3687, 3444, 3545, 0,
	0, 0, 3213, 0, 3691, 0, 0, 0, 3217, 3689,
	0, 0, 0, 1470, 1471, 1022, 0, 1795, 0, 0,
	1257, 1260, 0, 0, 0, 0, 0, 3223, 0, 0,
	0, 0, 0, 1501, 0, 2612, 0, 0, 0, 1168,
	1473, 0, 0, 0, 0, 2174, 2174, 2174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3216,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 1168, 0, 1342, 0, 0, 0, 1492, 1796, 1797,
	0, 0, 0, 0, 1489, 0, 0, 1792, 1168, 87,
	0, 87, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 2603,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 1793,
	0, 0, 0, 3149, 1362, 852, 0, 0, 0, 0,
	0, 0, 1470, 1471, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 0,
	210, 1478, 1501, 0, 210, 210, 0, 0, 0, 1473,
	2618, 0, 0, 0, 0, 0, 0, 1869, 0, 835,
	87, 87, 0, 3218, 0, 0, 210, 3219, 210, 87,
	210, 0, 1500, 1502, 528, 0, 87, 1472, 0, 0,
	0, 0, 0, 1168, 2613, 0, 1492, 0, 1887, 0,
	0, 0, 1168, 1489, 0, 0, 0, 1798, 0, 0,
	0, 1487, 1488, 0, 0, 0, 0, 3221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3224, 0, 0, 0, 0, 0, 1493, 0, 0, 87,
	0, 575, 2895, 0, 0, 696, 0, 0, 0, 0,
	0, 0, 210, 0, 1190, 210, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 1022, 1022, 0, 575, 0,
	1478, 1799, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 0, 210, 0, 210,
	0, 210, 2614, 210, 0, 0, 0, 0, 0, 0,
	0, 1500, 1502, 0, 0, 0, 0, 1969, 0, 0,
	1970, 0, 1971, 0, 0, 0, 1499, 0, 814, 0,
	0, 210, 0, 1168, 0, 0, 1168, 0, 0, 0,
	1487, 1488, 0, 3220, 1494, 0, 1533, 0, 0, 0,
	0, 0, 559, 0, 0, 0, 0, 0, 575, 0,
	0, 210, 0, 1540, 0, 1493, 0, 1546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1168, 0, 2174, 2174, 0,
	1542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1168, 0, 0, 2609, 2610, 2611, 0, 0,
	0, 0, 2608, 2606, 2607, 2599, 2600, 2601, 2602, 2604,
	2605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 2178,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 1486, 1494, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 0, 0, 0, 0, 2174,
	2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174,
	2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 0, 2174,
	0, 0, 1626, 0, 1629, 0, 87, 0, 0, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 1168, 0, 528, 0, 0, 0, 0,
	0, 0, 210, 0, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1612, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 57, 0,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 58, 120, 1201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 39, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 38, 0, 68, 0, 544,
	0, 0, 0, 0, 1470, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1168, 41, 0, 0,
	0, 0, 42, 0, 1501, 0, 0, 74, 0, 0,
	123, 1473, 0, 0, 0, 0, 40, 85, 0, 2301,
	0, 0, 75, 82, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 43,
	0, 210, 0, 0, 1168, 1489, 0, 0, 0, 840,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 210,
	0, 0, 1909, 0, 1168, 0, 210, 2363, 1201, 0,
	0, 1919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1927, 1928, 1929, 0, 0, 1209,
	0, 0, 210, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 1869, 1478, 0, 0, 0, 0, 0, 0, 2301,
	0, 528, 0, 0, 2416, 0, 0, 0, 0, 0,
	210, 0, 0, 210, 0, 210, 0, 210, 0, 210,
	210, 0, 1190, 1500, 1502, 0, 0, 0, 0, 0,
	0, 0, 2436, 696, 0, 2301, 2301, 0, 835, 0,
	835, 0, 0, 0, 0, 0, 210, 77, 0, 0,
	0, 0, 1487, 1488, 0, 44, 0, 0, 1168, 0,
	1168, 210, 1190, 210, 0, 0, 1209, 0, 1209, 0,
	0, 1190, 0, 1190, 0, 1190, 0, 1493, 0, 47,
	148, 80, 0, 81, 0, 45, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 46, 210, 210, 210, 210,
	1190, 210, 182, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 118, 1168,
	0, 0, 0, 0, 1168, 0, 0, 0, 121, 0,
	0, 210, 0, 0, 0, 0, 2178, 2178, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 814, 0, 119, 814, 814, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 1168, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1209, 2075, 0, 0, 1168, 151, 0, 0, 3, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	2178, 2178, 2178, 0, 0, 0, 1540, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2174, 0, 1168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 2174, 0, 0, 1010, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1629, 0, 0, 0, 210, 0, 0, 0,
	0, 528, 0, 0, 0, 0, 528, 840, 0, 528,
	0, 840, 528, 528, 0, 0, 0, 0, 528, 0,
	0, 0, 0, 87, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1209, 0,
	0, 0, 0, 0, 1211, 0, 1215, 0, 1221, 0,
	0, 0, 0, 1209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2346, 0, 0, 0,
	0, 2301, 2301, 210, 0, 1470, 1471, 2301, 0, 0,
	2726, 0, 2174, 0, 0, 0, 0, 2301, 2726, 0,
	2301, 2726, 2726, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 1473, 0, 210, 210, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 1190, 0,
	1472, 0, 0, 0, 1345, 0, 0, 0, 0, 1492,
	87, 1348, 0, 0, 0, 0, 1489, 0, 0, 0,
	2783, 0, 0, 2785, 2301, 0, 0, 210, 0, 0,
	0, 210, 0, 2425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 210, 0, 0, 0, 0,
	0, 1190, 0, 210, 1168, 2890, 2301, 0, 528, 852,
	0, 87, 0, 87, 0, 2301, 1400, 0, 0, 0,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1869, 0,
	0, 1869, 0, 0, 0, 87, 0, 0, 87, 0,
	0, 0, 2178, 2178, 1500, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2872, 0, 87, 1190, 210, 0,
	210, 0, 0, 1487, 1488, 0, 0, 0, 0, 0,
	1523, 1524, 1525, 1526, 1527, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 0, 0, 0, 1554, 0, 0, 0, 0,
	0, 0, 87, 0, 2178, 2178, 2178, 2178, 2178, 2178,
	2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178,
	2178, 2178, 2178, 0, 2178, 0, 0, 2932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2075, 0, 1470,
	1471, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 210, 1606, 1606, 1606, 1540, 1501,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 74, 0, 0, 0, 528, 528, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 75, 82, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 1209, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	76, 0, 0, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0, 2889,
	0, 0, 0, 0, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 1010, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 1500, 1502,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2260, 0, 0, 0, 2767, 0, 2301, 210,
	0, 0, 0, 0, 0, 0, 0, 1487, 1488, 0,
	0, 77, 2436, 2436, 0, 0, 0, 0, 696, 696,
	2301, 0, 0, 1869, 1869, 0, 0, 696, 2301, 0,
	2798, 0, 1493, 0, 0, 0, 210, 0, 0, 2802,
	2803, 0, 0, 0, 148, 80, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 87, 87, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 2846,
	2847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 87, 3168, 0, 87, 0, 184, 1201, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 1010, 0, 0, 835, 0, 0, 210,
	176, 0, 0, 0, 0, 1209, 0, 210, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 87, 87, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 2301, 2301, 2301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1209, 0,
	0, 0, 0, 0, 0, 2301, 0, 2726, 0, 0,
	1209, 1209, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2301, 0, 1490, 1486, 3271,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 3281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1997, 0, 2001, 0,
	0, 0, 0, 0, 2008, 1209, 2178, 0, 0, 0,
	0, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 0, 2057, 2178, 2059,
	2060, 2061, 2062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 0, 0, 0, 0, 2086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1541, 0, 0, 0, 2101, 57, 690, 689,
	0, 0, 2301, 0, 2726, 0, 0, 3350, 87, 0,
	0, 58, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 1010, 1010, 62, 2139, 2142, 0, 2146,
	2147, 2148, 2149, 2150, 2151, 2152, 0, 0, 575, 0,
	2170, 0, 2181, 2183, 2188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 3350, 0, 0,
	0, 0, 0, 0, 0, 2301, 0, 2178, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1209, 0, 74, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 75, 82, 0, 58, 210, 210, 0, 0, 0,
	0, 939, 0, 0, 3113, 3114, 3115, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 2932, 0, 0,
	0, 0, 0, 0, 0, 2178, 2178, 0, 0, 0,
	0, 0, 3350, 0, 0, 76, 0, 0, 0, 68,
	211, 0, 0, 0, 0, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 1506, 1501, 0, 0, 0, 74,
	0, 0, 1473, 0, 0, 0, 0, 1519, 0, 85,
	3271, 0, 211, 0, 75, 82, 0, 0, 0, 1010,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 2726,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 1209, 0, 1209, 1489, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3520, 0,
	0, 57, 0, 0, 1209, 210, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 210, 2301, 0, 0,
	0, 0, 0, 0, 0, 0, 2365, 0, 2367, 62,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 148,
	80, 0, 81, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2932, 0, 0, 0, 0,
	68, 182, 0, 0, 0, 0, 0, 1510, 0, 0,
	1520, 0, 0, 691, 1500, 1502, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 1516, 2301, 1517, 0, 0, 77,
	85, 184, 0, 1487, 1488, 75, 82, 0, 0, 1010,
	0, 0, 0, 0, 0, 3350, 0, 1010, 0, 1508,
	0, 0, 0, 0, 119, 0, 0, 0, 1493, 0,
	0, 0, 148, 80, 0, 81, 0, 152, 0, 1209,
	0, 2301, 0, 0, 0, 183, 0, 1518, 0, 76,
	0, 0, 0, 0, 182, 176, 0, 0, 0, 2479,
	0, 0, 57, 177, 1507, 0, 691, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 688, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 184, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 68, 0, 0, 0, 87, 1494, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 2514,
	2515, 74, 1511, 0, 0, 2521, 177, 0, 0, 0,
	77, 85, 0, 0, 0, 0, 75, 82, 0, 0,
	0, 0, 0, 0, 2535, 2536, 0, 151, 0, 0,
	2101, 0, 0, 0, 0, 0, 0, 0, 0, 2543,
	0, 0, 0, 148, 80, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 2557, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 691, 0, 0,
	2578, 118, 0, 0, 0, 0, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 184, 0, 0, 0, 2585,
	0, 0, 0, 2586, 0, 0, 0, 0, 1470, 1471,
	0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 119, 0,
	0, 2188, 2188, 2188, 0, 0, 0, 1506, 1501, 0,
	0, 152, 0, 0, 0, 1473, 1606, 0, 0, 183,
	1519, 0, 0, 0, 2651, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 177, 2075, 0,
	0, 77, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 1339, 1489,
	0, 0, 0, 211, 1089, 211, 211, 1089, 0, 1089,
	211, 1089, 0, 0, 148, 80, 0, 81, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 840, 0, 0, 0, 691, 0,
	0, 0, 118, 0, 0, 0, 1495, 1496, 1497, 1498,
	0, 1089, 1089, 211, 211, 0, 1478, 0, 0, 0,
	2742, 0, 0, 0, 0, 0, 184, 0, 211, 0,
	0, 0, 0, 0, 1470, 1471, 0, 0, 0, 0,
	1510, 0, 0, 1520, 0, 0, 0, 1500, 1502, 119,
	211, 211, 211, 211, 1501, 1089, 1089, 0, 0, 0,
	1089, 1473, 152, 0, 1089, 211, 211, 1516, 0, 1517,
	183, 0, 0, 0, 0, 0, 1487, 1488, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 177, 1472,
	0, 0, 1508, 0, 0, 0, 0, 0, 1492, 0,
	0, 1493, 0, 0, 0, 1489, 0, 0, 0, 1337,
	0, 0, 0, 0, 87, 1089, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 211, 0,
	0, 0, 0, 0, 2520, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 0, 1500, 1502, 0, 0, 0, 0, 2881,
	0, 0, 0, 2008, 0, 0, 0, 0, 0, 2887,
	2888, 0, 0, 2891, 0, 1511, 0, 2894, 0, 0,
	0, 0, 1487, 1488, 0, 0, 2898, 0, 0, 0,
	0, 0, 0, 0, 0, 2905, 0, 0, 2651, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 2916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2941, 2942, 0, 2943, 2944, 2945, 0, 0, 2946, 0,
	0, 0, 2948, 0, 0, 0, 0, 0, 0, 1509,
	0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0,
	0, 0, 2097, 2976, 2977, 0, 2098, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2986, 0,
	0, 0, 0, 0, 0, 1494, 905, 0, 0, 0,
	0, 0, 0, 2995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 1470, 1471, 209, 0, 0, 0, 0,
	1089, 0, 211, 211, 211, 0, 0, 0, 0, 211,
	0, 0, 0, 1501, 211, 600, 0, 0, 0, 3024,
	1473, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 3032, 3035, 0, 600, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 3054,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 1606, 0, 0,
	0, 1478, 0, 0, 0, 0, 3108, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 1089, 211, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 1488, 0, 0, 0, 3147, 3148, 0, 0,
	0, 0, 3152, 3153, 0, 0, 0, 3156, 3157, 0,
	0, 0, 0, 0, 3161, 0, 1493, 0, 0, 0,
	0, 211, 0, 0, 3164, 211, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3169, 0, 0, 0, 0, 0, 0, 211, 0, 211,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 659, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 1089, 0, 1089, 1494, 0, 0, 0, 0, 1089,
	0, 0, 1089, 211, 0, 660, 211, 0, 0, 0,
	0, 0, 0, 0, 661, 1089, 1089, 1089, 0, 0,
	215, 0, 0, 3035, 0, 0, 211, 0, 0, 0,
	662, 0, 0, 0, 0, 211, 211, 0, 211, 0,
	211, 0, 211, 0, 211, 0, 682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 593,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	665, 593, 211, 666, 0, 0, 0, 616, 3035, 0,
	0, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 1089, 0, 0, 0, 205, 681,
	617, 0, 0, 0, 0, 0, 3319, 3320, 3321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3329, 3330, 618, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 0, 0, 0, 0, 1089,
	621, 0, 0, 0, 0, 3035, 0, 0, 209, 642,
	209, 209, 0, 3373, 0, 209, 0, 668, 0, 0,
	0, 0, 3380, 0, 600, 840, 0, 0, 622, 0,
	0, 3387, 0, 0, 685, 0, 669, 0, 0, 1470,
	1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 623, 0,
	0, 624, 646, 0, 0, 0, 651, 3035, 1506, 1501,
	3035, 0, 0, 684, 1089, 0, 1473, 0, 209, 209,
	670, 1519, 0, 671, 0, 0, 0, 0, 0, 679,
	3035, 3035, 0, 209, 0, 0, 672, 211, 0, 0,
	1089, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 209, 209, 209, 209, 0,
	1489, 0, 0, 0, 0, 0, 0, 673, 680, 0,
	209, 209, 0, 645, 0, 674, 0, 0, 0, 0,
	0, 627, 3455, 0, 0, 3458, 0, 0, 676, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 3035, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 678, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 628, 0, 1478, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 629, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1520, 1089, 0, 209, 1500, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 650, 0, 0, 0, 0, 0, 0, 1516, 211,
	1517, 630, 0, 0, 0, 0, 0, 1487, 1488, 0,
	0, 0, 211, 0, 631, 0, 0, 1089, 840, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	211, 1089, 1493, 636, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 632, 0, 0, 649, 0,
	648, 1518, 0, 633, 0, 0, 3569, 3569, 3569, 0,
	0, 0, 0, 211, 0, 0, 634, 0, 1507, 211,
	0, 641, 0, 0, 0, 3588, 652, 0, 647, 0,
	0, 0, 0, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3035, 0, 3035,
	0, 211, 0, 0, 211, 0, 211, 0, 211, 0,
	211, 211, 1499, 3569, 1089, 1089, 1089, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 211, 0, 1511, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1186, 0, 1085, 0,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 211, 211,
	211, 0, 211, 0, 211, 0, 3569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1628, 0,
	1023, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	1186, 1186, 211, 0, 0, 0, 0, 209, 1628, 209,
	0, 1079, 0, 0, 600, 0, 0, 0, 1197, 600,
	1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 0, 0, 0, 1186, 1186, 0, 3174, 0, 1186,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1186, 0, 0, 0, 1310, 1310,
	1310, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 1344, 0, 0, 0, 0, 0,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 1089, 0, 1492, 1419, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 209, 0, 0, 0,
	209, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 209, 0, 209, 909, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 0,
	1500, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 211, 211, 0, 0,
	1516, 0, 1517, 0, 211, 0, 0, 0, 209, 1487,
	1488, 209, 0, 0, 0, 0, 211, 1089, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 1089, 0, 0,
	0, 209, 0, 0, 1493, 0, 1089, 0, 0, 0,
	600, 209, 0, 209, 0, 209, 0, 209, 211, 209,
	0, 1089, 211, 1518, 0, 0, 0, 0, 0, 0,
	1089, 1089, 0, 0, 0, 0, 211, 0, 0, 1085,
	1507, 0, 0, 0, 0, 0, 0, 209, 593, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	1089, 1089, 0, 0, 1499, 0, 1085, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 1644, 1089, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 0,
	1653, 0, 1197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1511, 211,
	1089, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 1509, 1186, 1186, 1484, 1485, 1491, 1512, 1490,
	1486, 1085, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 2903,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 1845,
	0, 0, 0, 1852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1186, 0,
	1186, 0, 1186, 0, 0, 1285, 0, 1875, 1186, 1875,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1186, 1186, 1186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 209, 0, 0,
	0, 1852, 0, 0, 1923, 211, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 209, 0, 0, 0, 0,
	1089, 211, 600, 0, 1939, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 1949, 0, 1951, 0, 1953, 0,
	1955, 0, 1956, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 1085, 209, 1089, 1089, 1089, 0, 0,
	1086, 0, 0, 1187, 0, 1086, 0, 1187, 0, 0,
	1973, 1089, 0, 0, 0, 0, 0, 211, 1089, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 209,
	0, 209, 0, 209, 0, 209, 209, 0, 1089, 0,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1187, 1187, 0,
	0, 0, 209, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 0, 0, 0, 0, 0, 209, 1085, 209,
	0, 0, 1506, 1501, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 1187, 1187, 0, 0, 0, 1187, 0, 0, 0,
	1187, 0, 209, 209, 209, 209, 0, 209, 1472, 209,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 209, 0, 0,
	0, 0, 1089, 0, 1089, 0, 0, 0, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 0,
	0, 1478, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 211, 211, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 1520, 0,
	0, 0, 1500, 1502, 0, 2244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 1089, 0,
	0, 0, 1516, 0, 1517, 0, 0, 1186, 0, 0,
	0, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 1085, 0, 1493, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 1507, 0, 0, 0, 1186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 1628, 0, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1197, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1186, 1186, 1186, 0, 1186, 0, 209,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 1089,
	0, 1852, 0, 0, 0, 0, 1086, 2387, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 209, 209, 0, 0, 0, 211, 211, 0, 1628,
	0, 0, 1187, 0, 0, 0, 0, 0, 0, 2418,
	0, 209, 1310, 0, 1310, 0, 1310, 0, 1197, 1197,
	0, 0, 0, 1086, 1509, 0, 0, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 209, 0, 2461, 0, 209, 0, 0,
	0, 2588, 0, 0, 0, 0, 0, 0, 0, 0,
	2466, 209, 2469, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 1089, 2490, 1197, 2492, 1197, 0,
	2495, 0, 0, 0, 1089, 1089, 0, 0, 0, 0,
	1089, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 1089, 0,
	1187, 1187, 0, 0, 209, 0, 209, 211, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	1501, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1187, 0, 1187, 0, 1187,
	0, 0, 0, 0, 0, 1187, 0, 0, 1187, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 1187, 1187, 0, 0, 0, 0, 0, 1023,
	1023, 0, 0, 0, 0, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 1510, 0, 0, 1520, 0, 0, 0, 1500,
	1502, 0, 1506, 1501, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 1519, 0, 0, 0, 1516,
	0, 1517, 0, 0, 0, 0, 1186, 0, 1487, 1488,
	0, 0, 0, 0, 0, 0, 1085, 0, 1472, 0,
	0, 0, 2718, 0, 1508, 1085, 0, 1492, 0, 0,
	1086, 0, 0, 1493, 1489, 0, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 1186,
	1186, 0, 1518, 2755, 2757, 2387, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	209, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 1186,
	1186, 1478, 0, 0, 0, 1023, 2795, 0, 0, 0,
	2799, 0, 0, 1499, 0, 1086, 0, 1186, 0, 0,
	0, 0, 0, 0, 2807, 1510, 0, 0, 1520, 0,
	0, 1494, 1500, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 1085, 0, 0, 1085,
	0, 0, 1516, 0, 1517, 0, 0, 1511, 0, 0,
	0, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2850, 1508, 0, 0,
	1086, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1086, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 2875, 0, 1197,
	0, 0, 1507, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2885, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	0, 0, 0, 0, 0, 1023, 1499, 0, 2587, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 1628, 0, 0, 0,
	0, 0, 0, 0, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	209, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1509, 0, 0, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 2584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 1470, 1471,
	0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0,
	1187, 1187, 1187, 0, 1187, 0, 0, 1506, 1501, 1085,
	0, 738, 0, 773, 1186, 1473, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 209, 0, 1472, 1186, 1186, 1186, 0, 0, 757,
	743, 0, 1492, 0, 0, 0, 0, 0, 0, 1489,
	1186, 0, 0, 3080, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 747, 3092,
	0, 0, 779, 0, 0, 0, 0, 1085, 0, 754,
	755, 0, 0, 0, 0, 766, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 774, 749,
	0, 0, 0, 0, 0, 0, 1495, 1496, 1497, 1498,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 209, 209, 0, 0, 3131, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 1520, 0, 0, 0, 1500, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 742, 1516, 0, 1517,
	0, 0, 0, 0, 0, 0, 1487, 1488, 0, 0,
	0, 751, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1508, 1085, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 759, 758, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 0, 0, 209, 0,
	1518, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 209, 748, 1085, 0, 0, 1186, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 1494,
	0, 770, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 3244, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 2387, 0, 0, 1511, 768, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 1086, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 740,
	0, 776, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 761, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 0, 0, 0, 1085, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 1509,
	0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 767, 1483,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0,
	0, 0, 0, 1187, 0, 0, 2583, 0, 0, 0,
	769, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 1187, 1187, 1186, 0,
	0, 0, 0, 0, 3357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1187, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3409, 0, 1187, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 1501, 0, 0, 0, 0,
	0, 0, 1473, 1086, 3435, 1197, 1086, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	1472, 0, 0, 1186, 0, 0, 0, 0, 0, 1492,
	1506, 1501, 0, 1186, 1186, 0, 1489, 0, 1473, 1186,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 1086, 0, 0, 1492, 0, 1085, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 3489, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	1520, 0, 0, 0, 1500, 1502, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 3526, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 1516, 3542, 1517, 0, 0, 0,
	0, 0, 0, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 1508,
	1500, 1502, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 1518, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 1499, 0, 1086, 0, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 1187, 1187, 0, 0, 0, 0, 1511, 0,
	0, 0, 0, 0, 0, 1470, 1471, 1187, 1503, 1504,
	1505, 1513, 1514, 1515, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 1501, 0, 0, 0, 0,
	0, 0, 1473, 0, 1086, 0, 1509, 1519, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0, 0,
	1472, 0, 0, 2582, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 2098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 1086, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	1520, 0, 0, 0, 1500, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 0, 1517, 0, 0, 0,
	0, 0, 0, 1487, 1488, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1187, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1187, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0, 3521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1187, 1187, 0, 0, 0, 0, 1187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 1086, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 2222, 0, 0, 0, 0,
	0, 0, 0, 2223, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3198, 219, 220, 221, 222,
	223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095,
	1096, 1097, 1098, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1099, 233, 234, 235, 236,
	237, 238, 1100, 1101, 239, 484, 485, 486, 1102, 240,
	487, 1103, 1088, 1104, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1105, 251, 0, 252, 253,
	254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 257, 258, 259, 260, 261, 262, 488, 489,
	1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118, 267,
	268, 269, 1119, 270, 1120, 271, 272, 1121, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1122, 216, 1123, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1124, 290, 1125, 1126,
	961, 291, 292, 1127, 293, 494, 1128, 495, 294, 1129,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 1130, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1131, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 1132, 501, 1133, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1134, 325, 324, 1135, 326, 503, 967, 327, 328,
	968, 1136, 329, 330, 1137, 1138, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 1139, 218, 971, 348,
	1140, 504, 349, 505, 351, 352, 1141, 353, 354, 355,
	1142, 1143, 357, 358, 359, 1144, 1145, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1146, 371, 372, 508, 373, 509, 374,
	1147, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1148, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1149, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1150, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1151, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 1152,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1153, 443, 444, 442, 1154, 445, 446, 447,
	448, 449, 278, 450, 1155, 451, 514, 515, 516, 517,
	1156, 458, 1157, 452, 453, 518, 454, 519, 1158, 455,
	456, 457, 0, 459, 460, 1159, 1160, 461, 462, 463,
	464, 465, 467, 1161, 468, 1162, 466, 469, 470, 471,
	520, 521, 522, 1163, 473, 472, 523, 1164, 1165, 1166,
	1167, 474, 475, 524, 476, 477, 478, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3325, 0, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3251, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3132, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2928, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2911, 0, 219, 220, 221, 222,
	223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095,
	1096, 1097, 1098, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1099, 233, 234, 235, 236,
	237, 238, 1100, 1101, 239, 484, 485, 486, 1102, 240,
	487, 1103, 1088, 1104, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1105, 251, 0, 252, 253,
	254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 257, 258, 259, 260, 261, 262, 488, 489,
	1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118, 267,
	268, 269, 1119, 270, 1120, 271, 272, 1121, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1122, 216, 1123, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1124, 290, 1125, 1126,
	961, 291, 292, 1127, 293, 494, 1128, 495, 294, 1129,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 1130, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1131, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 1132, 501, 1133, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1134, 325, 324, 1135, 326, 503, 967, 327, 328,
	968, 1136, 329, 330, 1137, 1138, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 1139, 218, 971, 348,
	1140, 504, 349, 505, 351, 352, 1141, 353, 354, 355,
	1142, 1143, 357, 358, 359, 1144, 1145, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1146, 371, 372, 508, 373, 509, 374,
	1147, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1148, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1149, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1150, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1151, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 1152,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1153, 443, 444, 442, 1154, 445, 446, 447,
	448, 449, 278, 450, 1155, 451, 514, 515, 516, 517,
	1156, 458, 1157, 452, 453, 518, 454, 519, 1158, 455,
	456, 457, 0, 459, 460, 1159, 1160, 461, 462, 463,
	464, 465, 467, 1161, 468, 1162, 466, 469, 470, 471,
	520, 521, 522, 1163, 473, 472, 523, 1164, 1165, 1166,
	1167, 474, 475, 524, 476, 477, 478, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2782, 0, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2121, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1191, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1828, 0,
	0, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1080, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 2096, 0, 902, 860, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 2093, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 2094, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 2092, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 2095, 0, 0, 0,
	0, 0, 0, 872, 2091, 0, 836, 870, 902, 860,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 182, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 184, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 1335,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 176,
	474, 475, 524, 476, 477, 478, 847, 177, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 902, 860, 861, 862, 858, 859, 871, 1545, 1543,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 182, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 184, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 1335, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 176, 474, 475, 524, 476, 477, 478, 847,
	177, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 902, 860, 861, 862, 858, 859,
	871, 1545, 2533, 0, 0, 870, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 849, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 855, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 846, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	856, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 182, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 184, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 850, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 1335, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 176, 474, 475, 524, 476,
	477, 478, 847, 177, 0, 0, 0, 0, 845, 0,
	0, 0, 0, 0, 0, 843, 844, 902, 860, 861,
	862, 858, 859, 871, 1545, 1543, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 2184, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 2189, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 2185, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	2186, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	2143, 870, 902, 860, 861, 862, 858, 859, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 0, 0, 0, 0, 0,
	0, 0, 872, 2141, 0, 2140, 870, 902, 860, 861,
	862, 858, 859, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	0, 0, 0, 0, 0, 0, 0, 872, 2138, 0,
	1402, 870, 902, 860, 861, 862, 858, 859, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	1401, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 839, 870, 902, 860, 861,
	862, 858, 859, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 851, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	902, 860, 861, 862, 858, 859, 871, 872, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	3539, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 849, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	855, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 846, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 851, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 856, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 850, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 847, 0,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 843, 844, 902, 860, 861, 862, 858, 859, 871,
	872, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 3383, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 851, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 902, 860, 861, 862,
	858, 859, 871, 872, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 3102, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 1607,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	870, 902, 860, 861, 862, 858, 859, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 2907, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 902, 860, 861, 862, 858, 859,
	871, 872, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 849, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 855, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 2010, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 846, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 2009, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	856, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 850, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 847, 0, 0, 0, 0, 0, 845, 0,
	0, 0, 0, 0, 0, 843, 844, 902, 860, 861,
	862, 858, 859, 871, 872, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 851, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	902, 860, 861, 862, 858, 859, 871, 872, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 849, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	855, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 846, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 856, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 850, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 847, 0,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 843, 844, 1607, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 870, 902, 860, 861, 862, 858,
	859, 871, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 849, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 855, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 2189, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 846, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 856, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 850, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 847, 0, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 0, 843, 844, 902, 860,
	861, 862, 858, 859, 871, 872, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 0, 0, 0, 0, 0, 0, 0, 872, 1543,
	0, 2194, 870, 902, 860, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 2192, 870, 902, 860,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 2180, 870, 902, 860, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 2169, 870, 902, 860,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 2167, 870, 2158, 2165, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 2161, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 2162, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 2163,
	2160, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 2164,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 2159,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 2155, 870, 2158, 2165,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 2161, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 2162, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 2163, 2160, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 2164, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 2159, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 902, 860, 861, 862, 858, 859, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 0, 0, 0, 0, 0, 1551,
	0, 872, 0, 0, 0, 870, 902, 860, 861, 862,
	858, 859, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 1996, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 1223,
	870, 902, 860, 861, 862, 858, 859, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 1222, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 1217, 870, 902, 860, 861, 862,
	858, 859, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 1216, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 1212,
	870, 902, 860, 861, 862, 858, 859, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 902, 860, 861, 862, 858, 859,
	871, 872, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 849, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 855, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 846, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	856, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 850, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 847, 0, 0, 0, 0, 0, 845, 0,
	0, 0, 0, 0, 0, 843, 844, 902, 860, 861,
	862, 858, 859, 871, 872, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 3568, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 3567, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	902, 860, 861, 862, 858, 859, 871, 872, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 3566,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 3568, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 849, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	855, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 846, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 856, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 3567, 460, 0, 850, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 847, 0,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 843, 844, 902, 860, 861, 862, 858, 859, 871,
	872, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	0, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 2177, 0, 0,
	0, 0, 0, 0, 2175, 2176, 902, 860, 861, 862,
	858, 859, 871, 872, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 0,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 0, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 902, 860, 861, 862, 858, 859,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 872, 224, 0, 0,
	870, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 0, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 3568,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 849, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 855, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 0, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	0, 954, 0, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 846, 218, 0, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	856, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 0, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 3567, 460,
	0, 850, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 1025, 0, 0, 843, 844, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 870, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 950, 239, 484, 485,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	495, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1011, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	218, 971, 348, 0, 955, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1017, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 1019,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 182,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 982, 0, 443, 444, 442, 184,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 983, 454,
	984, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 466,
	469, 470, 471, 1335, 521, 522, 0, 473, 472, 523,
	1025, 0, 0, 176, 474, 475, 524, 476, 477, 478,
	0, 177, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	1015, 0, 1631, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 950, 239, 484, 485, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 495, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1011, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 218, 971,
	348, 0, 955, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 1017, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 1019, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 182, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 982, 0, 443, 444, 442, 184, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 983, 454, 984, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 466, 469, 470,
	471, 1335, 521, 522, 0, 473, 472, 523, 2644, 0,
	1025, 176, 474, 475, 524, 476, 477, 478, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 1015, 951,
	1631, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 950, 239, 484, 485, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 495, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1011, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 218, 971,
	348, 0, 955, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 1017, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 1019, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 983, 454, 984, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1007, 0,
	1025, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 1015, 951,
	1013, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 950, 239, 484, 485, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 495, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1011, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 218, 971,
	348, 0, 955, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 1017, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 1019, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 983, 454, 984, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1025, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 1015, 0,
	1013, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 950, 239, 484, 485, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 495, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1011, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 218, 971, 348, 0,
	955, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	1017, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 1019, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 983, 454, 984, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1025, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 1015, 0, 1013, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	950, 239, 484, 485, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 495, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 218, 971, 348, 0, 955, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 1019, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 983, 454, 984, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 836, 0, 1184, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 1534, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 1335, 521, 522,
	0, 473, 472, 523, 1332, 0, 1184, 176, 474, 475,
	524, 476, 477, 478, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 151, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 1335, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 176, 474, 475,
	524, 476, 477, 478, 0, 177, 0, 0, 0, 0,
	1184, 1183, 0, 0, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 1088, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 0, 971,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 1184, 1183,
	0, 0, 0, 0, 1181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1202, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1088, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 502, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 0, 971, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 2845, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1025, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 0, 0, 1341, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 950, 239,
	484, 485, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 495, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 218, 971, 348, 0, 955, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	983, 454, 984, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 836, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 182, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 184, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 1335, 521, 522, 0, 473,
	472, 523, 213, 0, 0, 176, 474, 475, 524, 476,
	477, 478, 0, 177, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 151, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1282, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 1645, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	213, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	1286, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 213, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 2796, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 213, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 1286, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 213, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 2414, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 213, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 2931, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	591, 0, 592, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 1915, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 598, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 597,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 589, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 703, 0, 592, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 601, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 598, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	597, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 2768, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 592, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	598, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 1947, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 597, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 592, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 601, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 598, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	597, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1366, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 1365, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 1364, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 1363, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1330, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1329, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1326, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1325, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1262, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1261, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1259, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1258, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1177, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1179, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1184, 1183, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 601, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 1734, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1184, 1183, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 1184, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1088, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 0, 971, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 2302, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 2299, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 2450, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 2305, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 2447, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 2449, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	2446, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	2304, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 2448, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 2302, 240, 487, 0, 0, 2296, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 2299,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 2305, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 2295, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 2304, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	2303, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1421, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 1424, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	1422, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 1423, 472,
	523, 1172, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1174, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1017, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1169, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1171, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1017, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1076, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1078, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1017, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 553, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 552, 223, 542, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 545, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 546, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	547, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 541, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 542, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 545, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 546, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	547, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 2760, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 1017, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 2386,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1924,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 1851, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1855, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1854, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1844, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1846, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1319, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1318, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1316, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1315, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1313, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1312, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1309, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1308, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1194, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1196, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 545, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 546, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	547, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 1954, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 1952, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	1950, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 695, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 694,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 693, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 2450, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	3263, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 532, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 531, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 530,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 213, 3272, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 213, 2437, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	3056, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 2228, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 213, 2437, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 2434, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 1931, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1922, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 573, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	1054, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 1052, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 574, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 570, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 1055, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 569, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1867, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1866, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 573, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 563, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 574, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 570, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 1340, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 569, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1323, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1322, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1270, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1269, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1251, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1188, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 573, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	1054, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 1052, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 574, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 570, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 1055, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 569, 515, 516, 517, 0, 458, 0, 452,
	1053, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 1036, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 573, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 563,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 561, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 562, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 574,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 564, 403, 0, 404, 408,
	409, 570, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 565, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 569, 515, 516, 517,
	0, 458, 0, 452, 567, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 557, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 558,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 555, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 549, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 527, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 2736, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 2734, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	2721, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 2397, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 558, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 1880, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 0, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 1292, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1232, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 990, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 0, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 0, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 0, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	0, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 0,
	1503, 1504, 1505, 1513, 1514, 1515, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 1506, 1501, 0, 0,
	0, 0, 1489, 0, 1473, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 0,
	1500, 1502, 0, 0, 0, 1495, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 0, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 1520, 0, 0, 1508, 1500, 1502, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 1518, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 0, 0, 0, 1511, 0,
	1499, 0, 0, 0, 1506, 1501, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 1519, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 1511, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 0, 3517, 0, 0, 0, 0,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 1509, 0,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 1510, 0, 0,
	1520, 3443, 0, 0, 1500, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 0, 1517, 0, 0, 0,
	0, 0, 0, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 1506, 1501, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 1519, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 1472, 0,
	0, 0, 1511, 0, 0, 0, 0, 1492, 1506, 1501,
	0, 0, 0, 0, 1489, 0, 1473, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 1510, 0, 0, 1520, 3442,
	0, 0, 1500, 1502, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 1516, 0, 1517, 0, 0, 0, 0, 0,
	0, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1520, 0, 0, 1508, 1500, 1502,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 0,
	1517, 0, 0, 0, 0, 1518, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 0,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0,
	1511, 0, 1499, 0, 0, 0, 1506, 1501, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 1511, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1509, 0, 0, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 0, 0, 3328, 0, 0,
	0, 0, 0, 0, 0, 1495, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 1510,
	0, 0, 1520, 3226, 0, 0, 1500, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 0, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 1506, 1501, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 1519, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	1472, 0, 0, 0, 1511, 0, 0, 0, 0, 1492,
	1506, 1501, 0, 0, 0, 0, 1489, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 1509, 0,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 1510, 0, 0,
	1520, 3179, 0, 0, 1500, 1502, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 1516, 0, 1517, 0, 0, 0,
	0, 0, 0, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 1508,
	1500, 1502, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 1518, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0,
	0, 0, 1511, 0, 1499, 0, 0, 0, 1506, 1501,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 1519, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 1511, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0, 3178,
	0, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 1510, 0, 0, 1520, 3177, 0, 0, 1500, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 0,
	1517, 0, 0, 0, 0, 0, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 0,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 1506, 1501, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 1472, 0, 0, 0, 1511, 0, 0, 0,
	0, 1492, 1506, 1501, 0, 0, 0, 0, 1489, 0,
	1473, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 1510,
	0, 0, 1520, 3142, 0, 0, 1500, 1502, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 0, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 1520, 0,
	0, 1508, 1500, 1502, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 1517, 0, 0, 0, 0, 1518,
	0, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	0, 0, 0, 0, 1511, 0, 1499, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	1511, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1509, 0,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0,
	0, 2938, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 1509, 0, 0, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 1510, 0, 0, 1520, 2580, 0, 0,
	1500, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 0, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 1506, 1501,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 1519, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 1472, 0, 0, 0, 1511, 0,
	0, 0, 0, 1492, 1506, 1501, 0, 0, 0, 0,
	1489, 0, 1473, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 1510, 0, 0, 1520, 2579, 0, 0, 1500, 1502,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 3620, 0, 0, 0, 1516, 0,
	1517, 0, 0, 0, 0, 0, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	1520, 0, 0, 1508, 1500, 1502, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 0, 1517, 0, 0, 0,
	0, 1518, 0, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 3619, 0, 0, 0,
	0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 0, 0, 0, 0, 1511, 0, 1499, 0,
	0, 0, 1506, 1501, 0, 0, 0, 0, 2508, 0,
	1473, 0, 0, 0, 0, 1519, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 1511, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 0, 2509, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 2537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 1510, 0, 0, 1520, 0,
	0, 0, 1500, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 1517, 0, 0, 0, 0, 0,
	0, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 1470, 1471, 0, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1494, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 2202, 0, 0, 0, 0, 0, 0, 1470, 1471,
	1511, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 1501, 0,
	0, 0, 2201, 0, 0, 1473, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 0, 1472, 1478, 0, 2627, 0, 0, 2626,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1520, 0, 0, 1509, 1500, 1502, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 1516, 0, 1517, 0, 0,
	0, 0, 0, 0, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 1496, 1497, 1498,
	1508, 0, 0, 0, 0, 0, 1478, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 0,
	1510, 0, 0, 1520, 0, 0, 0, 1500, 1502, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 1517,
	0, 0, 0, 0, 0, 0, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 1499,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 1470, 1471, 1511, 1503, 1504, 1505, 1513, 1514, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 1494,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 1509, 0, 0,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 1509,
	1500, 1502, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 0, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 833, 0, 0, 1470, 1471, 0, 1503, 1504, 1505,
	1513, 1514, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 1501, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 1494, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 1471, 1511, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 1472, 1478, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1520,
	0, 0, 1509, 1500, 1502, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 1516, 0, 1517, 0, 0, 0, 0,
	0, 0, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 1508, 0,
	0, 0, 0, 0, 1478, 0, 0, 1493, 0, 2633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 0, 1510, 0,
	0, 1520, 0, 0, 0, 1500, 1502, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 1517, 0, 0,
	0, 0, 0, 0, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 1499, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 1470,
	1471, 1511, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1501,
	0, 0, 0, 2628, 0, 0, 1473, 0, 0, 0,
	0, 1519, 2917, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 1494, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 1509, 0, 0, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1520, 0, 0, 1509, 1500, 1502,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 1516, 0,
	1517, 0, 0, 0, 0, 0, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1494, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1470, 1471, 1511, 1503, 1504, 1505,
	1513, 1514, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 1501, 0, 0, 0, 2581, 0,
	0, 1473, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 0, 0, 0, 1472,
	1478, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1520, 0, 0,
	1509, 1500, 1502, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 1516, 0, 1517, 0, 0, 0, 0, 0, 0,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 1508, 0, 0, 0,
	0, 0, 1478, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 1510, 0, 0, 1520,
	0, 0, 0, 1500, 1502, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 1517, 0, 0, 0, 2595,
	0, 0, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 1499, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 1470, 1471, 1511,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 1501, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1494, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 1509, 0, 0, 1484, 1485, 1491, 1512,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 1520, 0, 0, 1509, 1500, 1502, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 0, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	1501, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 1494, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 1471, 1511, 1503, 1504, 1505, 1513, 1514,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 0, 0, 1472, 1478, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 1520, 0, 0, 1509, 1500,
	1502, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 1516,
	0, 1517, 0, 0, 0, 0, 0, 0, 1487, 1488,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	1495, 1496, 1497, 1498, 1508, 0, 0, 0, 0, 0,
	1478, 1501, 0, 1493, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 0, 1510, 0, 0, 1520, 0, 0,
	0, 1500, 1502, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 1516, 1489, 1517, 0, 0, 0, 0, 0, 0,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 1499, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 1518, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 0,
	1500, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	1488, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 1511,
	0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512,
	1490, 1486, 1494, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 1470, 1471, 0, 0, 0, 0, 1513, 1514,
	1515, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1520, 0, 0,
	0, 1500, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1704, 1681, 1688, 1671, 1714, 1713,
	1487, 1488, 1673, 1672, 0, 0, 0, 0, 0, 0,
	1724, 1725, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1715, 0, 1711, 1710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1708, 1706, 1707, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 1683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1697,
	1686, 1699, 1701, 1702, 1703, 1698, 0, 1691, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 1720, 1721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1712, 0,
	0, 0, 1684, 0, 1685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 0, 0, 0, 0, 1512,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 0, 0, 0, 1705, 0, 0, 0, 1694,
	1692, 1693, 1696, 1695, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1676, 1677, 1679, 1680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1700, 1678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1723, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1674, 0,
	0, 1716, 1717, 1718, 1719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1682, 0, 0, 0, 0, 1689, 1722,
}
var sqlPact = [...]int{

	4231, -1000, -1000, -1000, -1000, -1000, -1000, 308, 305, 297,
	292, 290, 288, 287, 270, -1000, -1000, -1000, 267, -1000,
	-1000, 266, -1000, 265, 263, 259, 246, -1000, 244, 243,
	242, -1000, -1000, -1000, -1000, 239, 235, 232, 57475, 1932,
	69455, 60455, 1811, 51909, 69025, 51479, 68595, 68165, 231, -1000,
	67735, 230, 223, 221, -1000, -1000, 220, 1823, 41978, 207,
	204, 203, 2369, 202, 201, -1000, 193, -1000, 7365, 1389,
	-1000, 192, 189, -1000, 7207, 5770, 59601, 2304, 188, 187,
	42409, 2302, 2370, -1000, -1000, 1753, -1000, -1000, 186, 185,
	183, 172, 171, 169, 162, 161, 160, -1000, 159, 155,
	154, 151, 150, 149, 146, -1000, 145, 144, 143, 142,
	141, 137, 135, 133, 128, 127, 114, -1000, 10089, 1645,
	1524, 1522, 1518, 1511, 1519, 1017, 113, 112, 111, 106,
	103, 101, 100, -1000, -1000, 91, 90, 89, 87, -1000,
	80, 77, 194, 73, 71, 70, 69, 67, 2131, 2442,
	1446, 660, 21013, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 73695, 69879, 59, -42,
	57, -1000, 2723, 907, 34656, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 515, -1000, -1000, -1000, 357,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1864, 783, -1000, -1000, -1000,
	67305, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1919,
	-7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 781, -1000,
	1916, 166, 1888, -1000, -1000, -1000, -1000, -1000, 69879, -1000,
	-1000, 3041, 3040, 1722, 778, 66881, -1000, 1404, -1000, 947,
	23743, -1000, 1171, -1000, 23743, 354, -1000, -1000, -1000, -1000,
	-1000, 51049, 16451, 50619, 50189, 46339, 66451, 16011, 57051, 36816,
	1221, -1000, -1000, -1000, -1000, -1000, 23, 47201, 69879, -1000,
	353, -1000, -1000, -1000, -1000, -1000, -1000, 30217, 622, 29752,
	988, 29287, 782, -1000, -1000, -1000, -1000, 3039, 3038, 1111,
	3037, 2680, 73271, 1583, 3035, 1550, 1200, 1041, 3034, 3033,
	3030, 3028, 3027, 3023, 3022, 1262, 66021, 2461, 1718, 45899,
	45459, 57475, 57475, 2243, 65591, 1268, 1253, -1000, -1000, -1000,
	-1000, -1000, -1000, 2586, 2366, 2330, 39408, -1000, -1000, 3018,
	3017, 3016, 3015, 3014, 72847, 1559, 3013, 2069, 3012, 3011,
	3010, 3009, 3007, 3006, 3005, 3004, 3003, -1000, 56621, 56191,
	55761, 55331, 65161, 45019, 44579, -1000, -1000, -1000, 36372, 6185,
	6024, 64731, 37692, 57475, 57475, -1000, -1000, 30670, 729, -1000,
	-1000, -1000, 2423, -1000, 30670, 729, -1000, 69879, -1000, 2460,
	1642, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1730, 1478, 2886, 44139, 1857, 1286, 2739, 2585, 2581, 1433,
	2158, 2573, 2567, 2561, 2560, 2559, 1460, 2098, 553, 20548,
	1409, 1431, 2550, 2523, 2899, 1708, 49759, 3002, 3000, 2713,
	2493, 2467, 2417, -1000, -1000, -1000, -1000, 1368, -1000, -1000,
	52757, -1000, -1000, 1154, -1000, -1000, 1154, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1217, 71999, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1544, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1831, -1000, 1697, -1000, -1000, 1960, 1298, 2442, 2097,
	2718, 2718, 2718, 2768, 497, 494, -1000, 194, -1000, -1000,
	79196, -1000, -1000, 30670, 30670, 30670, 30670, 30670, 1817, -1000,
	777, -1000, -1000, 834, -1000, 776, 704, -1000, -1000, -1000,
	-1000, -1000, -1000, 774, 2902, -1000, -1000, -1000, -1000, -1000,
	2873, -1000, 18700, -1000, -1000, -1000, 479, 764, 30670, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 926, -1000, 342, 993, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 683, 1794, 682, 682, 682, -1000, -1000, 1033, -1000,
	-1000, -1000, 422, 677, 369, 676, -1000, -1000, -1000, -1000,
	2459, 763, 759, -1000, 757, 754, 748, -1000, -1000, -1000,
	744, 742, 738, 736, 735, 734, 733, 728, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1032, -1000, 721, 720,
	719, 717, 715, 714, 712, 711, 709, -1000, -1000, 22,
	69879, -1000, 515, 22, -1000, -1000, 707, -1000, 24196, 24196,
	24196, -1000, -1000, 1912, 30670, -1000, 2446, -1000, 38, 38,
	917, 35512, -1000, 33796, 917, 625, 840, 38978, -1000, 2416,
	-1000, -1000, 705, 341, -1000, -1000, 2406, 69879, 16889, 69879,
	57475, 57475, 57475, 2619, 30670, -1000, -1000, 43699, 69879, 57899,
	2834, 80150, 43699, 69879, 2458, -1000, -1000, -1000, 69879, -1000,
	30670, -1000, 2829, 1337, 47629, 2781, 6, -1000, -1000, -1000,
	-1000, -1000, -1000, 2052, 2103, 1130, 1959, 1514, -1000, 23743,
	2671, -1000, -1000, -1000, 339, 16889, -1000, 2695, 2592, 1437,
	-1000, 1949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1705, 2587, -1000, 3530, 2584, 1693, -1000, -1000, 1003, 2582,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1909,
	-1000, -1000, 2696, -1000, -1000, 1784, 2579, 39, -1000, -1000,
	899, -1000, 46777, 36816, 47201, 18, -1000, -1000, -39, -1000,
	15571, 79196, -1000, -1000, -1000, 79196, 837, -1000, -1000, 2578,
	-1000, 79196, 836, -1000, -1000, 2568, -1000, -1000, -1000, 2997,
	-1000, 2996, 2012, 2995, 2994, 2992, -1000, 1470, 1783, 2991,
	-1000, 2990, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54901,
	1911, -1000, -1000, 54041, 54471, 1039, -1000, 1003, 2011, -1000,
	-1000, 2010, -1000, 940, -1000, 2989, 64301, 2218, 1003, 2009,
	-1000, -1000, -1000, -1000, -1000, 40264, -1000, 40264, -1000, 40264,
	-1000, 1330, -1000, 72423, 38, 38, 2873, -1000, -1000, -1000,
	-1000, -1000, 2563, 2988, 2987, 2986, -1000, 69879, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 179, 2556, -1000,
	-1000, 179, 2555, -1000, 179, 2542, -1000, 178, 2541, -1000,
	-1000, 1915, 2539, -1000, -82, 2536, -1000, -1000, -82, 2535,
	-1000, 7, -1000, -1000, -1000, 907, -1000, 35942, -1000, 35942,
	63871, 46777, 997, 718, 41548, 79196, -1000, 36816, 79196, -1000,
	46777, 54041, -1000, 63441, 53617, -1000, -1000, 1259, 2094, -1000,
	-1000, -1000, -1000, 46777, 46777, 46777, -1000, 63011, -1000, -1000,
	1713, 1420, 2705, 1680, 57475, -1000, 1704, -1000, -1000, -1000,
	2722, 2455, -1000, 43271, 59171, -1000, 58747, -1000, 58323, -1000,
	57475, -1000, 57475, -1000, 2984, 2983, 2982, -1000, 2981, 2717,
	79196, 2710, -1000, 2521, 1527, 1526, 69879, -1000, -1000, 69879,
	-1000, 69879, -1000, -1000, -1000, 2046, -1000, -1000, -1000, -1000,
	57475, -1000, -1000, -1000, -1000, -1000, -1000, 2453, -1000, 1539,
	-1000, 1668, -1000, 1258, -1000, -1000, 180, -1000, -1000, 6,
	-1000, 71999, -1000, -1000, 2442, 2097, -1000, 69879, -1000, 1468,
	57475, -1000, 2084, -1000, 1320, -1000, 2442, 1913, 2134, 28822,
	2120, 30670, 194, -1000, -1000, 194, 194, 23290, -1000, -1000,
	80150, 80150, 16889, 1233, 30670, 30670, 30670, 30670, 30670, 30670,
	30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670,
	30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670,
	30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 2104,
	30670, 1183, 30670, 30670, 30670, 30670, 1619, -1000, -1000, 1670,
	549, 1720, -1000, 2874, 2874, 2874, 79541, 79541, 634, 2980,
	834, -1000, 30670, -1000, 729, 30670, 17329, -1000, -1000, -1000,
	494, 6407, 2057, -1000, 493, 17794, -1000, -1000, -1000, 18700,
	704, 28357, 30670, 1022, 79196, 1525, 2888, 15133, 2377, 2291,
	-1000, 2892, -1000, -1000, 2888, -1000, -1000, -1000, -1000, 2888,
	1230, 1226, 2888, -1000, 2888, 2888, 701, 801, 799, 20083,
	19618, 572, 30670, 30670, 30670, 30670, 30670, 30670, 30670, 30670,
	-1000, 27904, 27439, 26974, 32029, 26509, 30670, 19153, 26044, 25579,
	69879, 22, 2824, 30670, 165, -1000, 77717, -1000, 165, 165,
	697, -1, 79196, 2175, 2175, 35084, 1931, 1866, 1866, 1866,
	-1000, 917, 11613, 917, 62159, 1867, 917, 917, 336, 356,
	492, 33368, 2446, 62159, 805, 692, 56, 55, 53, -1000,
	-1000, 43, 41, -1000, -1000, 57475, 689, 17329, 16889, 1291,
	-4, 319, 2161, 2157, 2139, -1000, 2138, 1487, -12, 1180,
	-134, -1000, 5145, -15, -1000, 1091, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1027, 688,
	686, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 683, 1794,
	682, 682, 682, -1000, -1000, -1000, 422, 677, 369, 676,
	-1000, -1000, -1000, -1000, -1000, -1000, 2399, -39, 57899, 915,
	-26, 1117, 6, -1000, -1000, -1000, 47629, 1154, -1000, 1506,
	-1000, -1000, -1000, -1000, -1000, -1000, 1271, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 926, -1000, 2884, -1000, -1000, 2891,
	21, -1000, -1000, 16889, -1000, -6, 1648, -1000, 49329, 2049,
	2698, 2693, 1325, -1000, 1299, 2767, 52757, 2796, 2830, 108,
	-1000, 2395, -1000, -1000, 942, 1502, 1179, 52757, 3530, -1000,
	80150, -1000, 2178, 2766, 1329, 1295, 1329, 1329, 1341, -1000,
	52757, 1178, -1000, 1818, -1000, 46777, -1000, 1175, -1000, -17,
	2783, 2801, 107, -1000, 2390, 1172, -1000, -1000, 57475, 16889,
	2241, -1000, -28, 899, 18, 47201, 69879, 317, -1000, 30670,
	729, 30670, 729, -1000, -1000, 2533, -1000, -1000, -1000, 2979,
	1744, 2068, -1000, -1000, -1000, 674, 2008, 2389, 69879, 2133,
	14, 57475, -1000, 3530, 2006, -1000, -1000, 53187, -1000, -1000,
	2532, 2531, 666, 2978, -1000, 1910, 2004, -1000, -1000, -1000,
	71575, 1244, 2530, 1071, 752, 2820, -1000, 752, 40692, -1000,
	69879, -1000, -1000, 69879, -1000, -1000, -1000, 2975, -1000, 57475,
	-1000, -1000, 57475, -1000, 57475, -1000, 57475, -1000, 57475, 57475,
	-1000, 69879, 46777, 46777, 46777, 5863, 48481, -29, -41, 491,
	-1000, 62587, 69879, 1070, 48905, 69879, 2658, -38, -1000, 997,
	997, 899, -1000, 899, -1000, 57475, 2449, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2951, 2946, -1000, -1000, -1000, 1002,
	57475, 69879, 57475, -1000, -1000, 69879, -1000, 69879, -1000, 1002,
	69879, 1002, 69879, 1002, 69879, -1000, -1000, -1000, -1000, -1000,
	-1000, 729, 30670, 1364, -1000, 2444, -1000, 2443, -1000, 82,
	-1000, -1000, -1000, -1000, 1828, 57475, 57475, 57475, 57475, 69879,
	57475, -1000, 52757, -1000, -1000, 2442, -1000, -1000, 2037, -1000,
	17, 1081, -1000, -1000, -1000, -1000, -1000, 79196, 531, -1000,
	-1000, 79196, 1486, 2180, -1000, 2180, 16, -1000, 77372, 2079,
	57475, -1000, -1000, -1000, -1000, -1000, 941, 960, 960, 1148,
	1148, 1148, 1148, 2795, 380, 1124, 264, 79991, 79991, 372,
	372, 372, 372, 372, 79991, 335, 565, 565, 335, 335,
	335, 335, 335, 565, 565, 565, 79991, 79991, 79991, 79541,
	79459, 6922, 30670, 30670, 1166, 1661, 549, 6563, 30670, 4313,
	4313, 4313, 4313, -1000, 2186, -1000, -1000, -1000, -1000, 2387,
	673, 32029, 32029, -1000, -1000, -1000, -1000, 18247, 30670, -1000,
	-1000, -1000, -1000, 25114, -1000, -1000, 77038, -243, 489, -127,
	35, -1000, 30670, 30670, 30670, 488, -1000, 316, 30670, 69879,
	-1000, 10670, 802, -40, -1000, -43, 1342, -1000, 30670, -1000,
	-1000, 1165, -1000, 1162, 1160, 1159, -1000, 670, 487, -1000,
	314, -1000, 1862, 667, 663, 485, -48, 484, 933, 922,
	483, 482, 481, 30670, -1000, -1000, -1000, -1000, -1000, 76750,
	-1000, -1000, 76462, -1000, -1000, -1000, 78933, 10624, 10057, 9572,
	5944, 9419, 8812, -49, 480, -1000, 2384, -127, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 477, -1000, 475, -1000,
	78851, -127, 474, 444, -1000, 32029, 32029, 32029, -1000, 473,
	-1000, 77635, -1000, 78588, 24661, 24661, 24661, 471, 78325, 30670,
	-127, -50, -1000, -60, -1000, -1000, 662, -65, 1016, 24196,
	34226, 16889, -1000, 1016, 1016, 30670, -1000, 30670, 2121, -1000,
	-1000, -1000, 2111, 2385, 2175, 35084, -1000, -1000, -1000, -1000,
	62159, -1000, 2873, 2414, -1000, 62159, -1000, -1000, 69879, 515,
	-1000, 62159, 62159, 16889, 917, -1000, 917, 62159, 723, -1000,
	-1000, -1000, -1000, -1000, 470, 38120, 35, 312, 997, -1000,
	16889, 2222, 2222, 2222, 2222, -1000, -1000, 69879, 2850, -1000,
	1804, -1000, 80150, -1000, 823, 936, 658, -1000, 2888, 2888,
	-1000, 2888, 69879, 123, 23743, -1000, 1154, -1000, -1000, 1427,
	-1000, 1769, -1000, 1152, -1000, -1000, -1000, 23743, -1000, 2489,
	69879, 69879, 57475, -1000, -1000, 2003, 71151, 1997, 80150, 69879,
	-1000, -1000, 648, 635, 2078, 2077, 69879, 69879, 2076, 70727,
	70303, 69879, 1803, 30670, 1921, 1998, 729, 729, -1000, -1000,
	729, 633, 1250, 57475, 57475, 57475, 1674, -1000, -1000, -1000,
	-1000, -1000, 52333, -1000, -1000, 2890, -1000, 1329, -1000, -1000,
	-1000, 1329, 3530, 1660, 57475, 42847, 1003, 69879, 1813, 729,
	729, -1000, -1000, 729, 628, 16889, 1807, -1000, 997, 2383,
	-1000, 2241, -1000, -1000, 14695, 79196, -1000, 79196, -1000, 69879,
	-1000, 1035, 69879, 48905, 990, 2529, 39836, -39, 997, 46777,
	57475, 14, -1000, 3530, 2527, 515, -1000, -1000, 46777, 46777,
	2938, 627, 2937, -1000, 57475, 2524, 1907, 1993, 2591, 865,
	69879, 1016, 35084, 1809, -1000, 38550, 1053, 69879, 1605, 95,
	-1000, -1000, -1000, 62, 69879, -1000, 2934, -1000, -1000, 179,
	179, 179, -1000, 178, 1915, -1000, -82, -82, -1000, -1000,
	5863, 5863, 997, 10, 623, -1000, 889, 888, 37254, 46777,
	-67, -1000, -1000, -1000, -1000, -1000, 57475, 69879, 706, 2216,
	69879, -70, -1000, 311, 620, 997, 36816, 2372, -1000, -1000,
	1006, -1000, 1251, -1000, -1000, -1000, -1000, -1000, -1000, 37,
	-39, -39, -1000, 1002, -1000, 1002, -1000, 1002, -1000, 79196,
	-1000, 1359, 1335, 69879, -1000, 16889, 69879, 57475, 16889, 57475,
	2441, 2431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1486, -1000, 30670, -1000, -1000, -1000, 23290, 1953, -1000, -1000,
	57475, 29, 30670, 30670, 5218, 4874, 30670, 32029, 32029, -1000,
	30670, 3811, -1000, -1000, -1000, -1000, -1000, 2365, 619, 30670,
	80150, 1733, 862, -1000, 467, 8040, 335, -1000, 30670, -1000,
	465, 22837, -1000, 77980, -2, -72, -1000, 14257, -127, -79,
	-1000, -1000, 815, -1000, 2526, -1000, 30670, 78243, 2025, 1880,
	1547, 1413, 2888, 2901, 13819, -1000, 41120, 1020, 1873, -1000,
	-1000, 2888, 916, -1000, -1000, -1000, 916, -1000, 76416, -1000,
	-1000, 80150, 80150, 30670, 30670, -1000, 30670, 30670, 30670, -1000,
	-1000, 30670, -1000, -1000, 2331, 30670, -1000, 80150, 80150, 32029,
	32029, 32029, 32029, 32029, 32029, 32029, 32029, 32029, 32029, 32029,
	32029, 32029, 32029, 32029, 32029, 32029, 32029, 32029, 2159, 32029,
	2872, 2872, 2872, -1000, 2428, 2331, 30670, 30670, 80150, 464,
	463, 452, -1000, 30670, -127, -1000, -1000, 5863, -1000, 2288,
	-1000, 30670, -1000, -75, -1000, 2446, -1000, -1000, 2288, 2288,
	-80, 79196, 35084, 35084, -1000, 618, 30670, 2096, -1000, -1000,
	800, -244, -1000, 883, -1000, -1000, -1000, -1000, -1000, 515,
	-1000, -1000, -1000, 195, 62159, 62159, 798, -1000, -87, -1000,
	-1000, -88, -1000, 2816, 451, 16889, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -39, 1887, 2900, -1000, 2889, 810,
	797, 2888, 450, 449, 445, -39, 69879, -1000, 6, -1000,
	-1000, -1000, 30670, -1000, -1000, 2697, 1156, 1155, -1000, 2522,
	-1000, 1992, -1000, 1050, -1000, 1462, -1000, 30670, 30670, 617,
	615, 1578, 2929, 1066, 2519, 1915, 2518, 1915, -1000, -1000,
	970, -1000, 79196, 613, 610, -1000, -6, 1606, 1005, -1000,
	-1000, 30670, 30670, 61735, -1000, 392, 2696, 26, -1000, 1153,
	-1000, -1000, -1000, -1000, 3530, 1146, -1000, -1000, -1000, -1000,
	-1000, -1000, 1004, -1000, -1000, 30670, -1000, -17, 1144, -1000,
	46777, 997, -1000, 2928, 2927, 2926, 443, -93, -18, 80150,
	2806, 1898, 664, 57475, 912, -1000, 2873, -1000, -1000, -1000,
	57475, 2805, 1003, -1000, -1000, 2925, -1000, 1065, 16889, 57475,
	2516, 2060, 865, 48057, -1000, 1003, 1873, -105, -1000, 1605,
	22372, 2691, -95, -1000, -1000, -1000, 1016, 40692, 35084, 30670,
	2924, -98, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 61311, 61311, 46777, 46777, 46777, 997, 69879, 69879, 48905,
	2920, 609, 69879, 69879, 608, -1000, 69879, 69879, 2919, 46777,
	-1000, -1000, 729, -1000, 1881, 57475, 13381, -1000, -1000, -1000,
	-1000, -1000, 1002, -1000, -1000, 1833, 1947, 1833, 1517, 1484,
	1886, 76128, -1000, -1000, 2154, 2690, 16889, 2786, 4313, 30670,
	30670, 3692, 661, 466, 4313, 30670, 30670, 80150, 79660, -104,
	30670, 30670, -1000, 30670, 790, 79196, 2898, 30670, 442, 441,
	-1000, -1000, -1000, -1000, -1000, -1000, 79196, 30670, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 440, -1000, 96, -1000, -1000,
	-1000, 74119, -1000, 30670, 428, 419, -1000, -1000, -1000, 418,
	417, 7498, 293, 75840, 75794, 75506, 79196, 2428, 79196, -1000,
	-1000, 1137, 1137, 1263, 1263, 1263, 1263, 2872, 1133, 1232,
	1047, 396, 396, 396, 835, 1246, 1246, 396, 396, 396,
	2325, 2093, 607, 3650, -1000, -1000, 79196, 79196, 416, -1000,
	-1000, -1000, -127, 415, 2271, 2762, 79196, -1000, 35084, 2271,
	2271, -1000, -1000, 2385, 69879, 79196, 35084, -1000, 2414, -1000,
	12063, -1000, 16889, -1000, -1000, -1000, -1000, 2873, -1000, 38120,
	-1000, 603, -1000, 83, -1000, -1000, 788, 2915, 809, 405,
	-1000, -1000, -1000, -39, 79196, 69879, 69879, 69879, 2503, -1000,
	3612, -1000, 75218, -107, -1000, 77372, 30670, 69879, -1000, 1621,
	2142, 1102, -1000, 2724, 69879, -1000, 69879, -1000, -1000, 69879,
	69879, 57475, 2492, -109, 79196, -55, -1000, 881, -1000, 1297,
	-1000, 12943, 57475, 57475, 2490, -112, 16889, -82, -1000, -1000,
	-1000, -1000, 2211, -1000, 60025, 1951, 729, -1000, 60883, 2914,
	602, -1000, 1876, -1000, 786, 3530, 729, -1000, -1000, 599,
	69879, 1903, 592, 16889, 2062, 865, 48057, -1000, 1244, 2134,
	-1000, -90, -1000, 614, 729, 1873, -1000, -105, 79196, -1000,
	880, -1000, -114, -1000, -1000, 404, -1000, 2657, 2653, -1000,
	-1000, 30670, 590, 589, 69879, 2652, -1000, -1000, -117, -1000,
	2033, -1000, -1000, -1000, -1000, -1000, 16889, 1483, -1000, 584,
	578, -1000, -1000, -1000, -1000, -1000, 2690, 4313, 4313, 30670,
	30670, 30670, 4313, 79660, -120, -1000, 4313, 4313, -127, -1000,
	-1000, 77980, -1000, -1000, 79196, -1000, 12505, 1840, -1000, 75172,
	-1000, -1000, -1000, -1000, 30670, 30670, -1000, -1000, -1000, -1000,
	-1000, 32029, 2320, 571, 80150, -1000, -1000, 1012, 30670, 30670,
	2446, 1012, 1012, -1000, -125, -1000, -1000, -1000, 2873, 83,
	-1000, -1000, 2911, 16889, 808, -1000, 2909, -1000, -1000, -1000,
	-1000, 69879, -1000, 69879, -1000, 16889, 69879, 2367, 1984, -1000,
	-1000, 2075, 555, 32029, 57475, 869, 2285, 1587, 30670, 1953,
	-128, -131, 1973, -1000, -1000, 1970, 30670, -1000, 80150, 550,
	1915, 1915, -136, -143, -1000, 30670, 1143, 69879, 21919, -1000,
	2908, 2696, -1000, -1000, 30670, 1141, -1000, 1813, 2255, -1000,
	-1000, -1000, -1000, 2074, -1000, -1000, 69879, 2073, 1001, -144,
	-1000, 879, 876, -1000, 48905, 990, 984, -1000, -1000, -1000,
	30670, -1000, 57475, 30670, 1901, -1000, 865, 48057, -1000, 2591,
	1605, -1000, 2611, 69879, 2689, -1000, 2134, 549, -1000, 997,
	548, 546, -151, 30670, 30670, -152, 544, 997, -119, -1000,
	842, 819, -1000, -1000, 57475, 57475, 30670, 30670, -1000, 4313,
	4313, 4313, -1000, 402, -1000, -1000, 1873, 2757, -1000, 74884,
	74596, 1386, 32029, 80150, -166, -1000, 69879, 79196, -127, -1000,
	-1000, -1000, 785, -1000, 2907, -1000, -1000, 1758, -1000, -1000,
	-1000, 69879, 1991, -1000, -1000, 30670, 3650, 543, 30670, -1000,
	-1000, 2205, 2346, 2211, 541, -1000, -1000, -1000, -1000, -1000,
	1719, -1000, -1000, 79196, 2736, 30670, -1000, -1000, 540, 536,
	79196, 535, 864, 2311, -1000, -1000, -1000, 79196, 533, 990,
	-1000, 1853, 1951, 530, -1000, -1000, -1000, 2166, -1000, 60883,
	32482, 32482, 397, 2803, 984, -1000, 2869, -1000, -169, 1065,
	-171, 57475, 48057, -1000, 2060, -1000, 1245, -172, 69879, 1605,
	-1000, -1000, 46777, 46777, 1587, -177, -178, -1000, 46777, -1000,
	2033, -1000, 69879, -1000, 69879, -1000, -1000, -179, -180, -1000,
	1738, 30670, -1000, -1000, 1386, -185, -1000, -126, -1000, 2802,
	-1000, -1000, -1000, -1000, 2501, 74550, 2032, 69879, 11024, 2336,
	-1000, -1000, 1813, 69879, 57475, 1063, 16889, -186, 1833, 1833,
	30670, 21466, 1847, 30670, -1000, 57475, 69879, -1000, 2639, -1000,
	-1000, -1000, 2211, 729, -1000, -1000, 1587, 528, 1587, 517,
	-1000, 2062, 1324, -1000, 1016, -1000, -1000, -187, -195, 2211,
	1587, -1000, -197, -1000, -202, -205, -1000, -1000, 376, 31576,
	31576, 31576, -127, -1000, 69879, 516, 2477, -1000, 1893, 1842,
	167, 1086, -1000, -1000, 2285, -208, 515, -1000, 30670, -1000,
	-1000, -210, -1000, 1051, -211, -1000, 1049, -213, -1000, 2301,
	-1000, -218, 513, -219, -1000, -1000, -1000, 1813, 1001, 2211,
	30670, 2211, 30670, -1000, 40692, -1000, 997, 997, 1813, 2211,
	997, -1000, -1000, -1000, 2562, -1000, 32920, 1939, 1469, 77084,
	2562, 2562, -1000, -1000, 69879, -1000, 1899, 1894, 1385, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2032, 79196, -1000,
	1833, 2244, -1000, 1833, 2292, -1000, 1845, -1000, 69879, -1000,
	69879, 990, -1000, 1813, -221, 1813, -224, -203, -1000, -1000,
	-1000, 1813, -1000, -1000, 1884, 2835, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2588, -1000, 1077, 1896, 1896,
	1893, -1000, 512, -1000, 510, -1000, -226, -1000, -1000, 1014,
	1587, 1014, 1587, -1000, -1000, 1438, -1000, -1000, 1869, 31123,
	-1000, 2853, -1000, -1000, 2132, -1000, 2285, 30670, 30670, 1878,
	-1000, 2906, 2211, -1000, 2211, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -227, -232, -1000, -1000, -1000, -1000, 1813, 1813,
	1813, 1136, 1014, 1014, -1000, 509, -1000, -1000, 30670, -237,
	1813, -1000,
}
var sqlPgo = [...]int{

	0, 3567, 3566, 3563, 3561, 3559, 3557, 3556, 3554, 3553,
	3552, 3549, 3547, 3546, 3545, 3544, 3543, 3539, 3535, 3534,
	3533, 3532, 3530, 3529, 3528, 3525, 3524, 3522, 3520, 3517,
	3516, 3514, 3513, 3512, 3511, 3510, 3509, 3507, 3505, 3501,
	3499, 3498, 3497, 3496, 3495, 3488, 3487, 3486, 32, 3485,
	3483, 3482, 3480, 3479, 3478, 3475, 3474, 3472, 3468, 3461,
	3459, 3457, 3456, 3451, 3450, 3448, 38, 3447, 221, 3444,
	3440, 3439, 3438, 3437, 3432, 3431, 3428, 3427, 3426, 220,
	3425, 126, 3421, 3420, 3418, 3417, 3416, 217, 3415, 3414,
	3410, 3408, 3406, 3405, 3403, 3396, 127, 3393, 3392, 116,
	3391, 3389, 3387, 3385, 3384, 3383, 3381, 3380, 3379, 3378,
	208, 3376, 216, 3375, 3370, 3368, 3367, 3366, 3365, 3364,
	3363, 3361, 3360, 3356, 3354, 3350, 3348, 3343, 3342, 3340,
	3338, 3336, 3332, 3331, 3326, 3325, 3319, 3314, 3312, 3311,
	214, 150, 3309, 3308, 215, 213, 3307, 130, 105, 92,
	94, 3306, 89, 53, 3305, 14, 129, 196, 3170, 189,
	3304, 3302, 3301, 154, 3299, 3295, 3292, 3287, 90, 63,
	146, 140, 131, 141, 93, 3286, 3281, 74, 56, 34,
	29, 99, 153, 3278, 3276, 3274, 2590, 88, 3268, 3266,
	212, 193, 3265, 1302, 3264, 128, 135, 97, 87, 85,
	3263, 114, 22, 3260, 138, 43, 3259, 133, 70, 37,
	6896, 7349, 3258, 79, 223, 76, 118, 181, 172, 173,
	167, 142, 412, 3256, 204, 3254, 57, 158, 3252, 3251,
	3249, 58, 156, 78, 3245, 8, 3, 148, 20, 95,
	7, 3244, 16, 3243, 3242, 3240, 3238, 23, 136, 3236,
	120, 72, 3231, 19, 3230, 36, 180, 3228, 185, 91,
	3226, 3224, 209, 164, 162, 3223, 10, 186, 3222, 3220,
	3219, 3218, 3215, 104, 21, 96, 3211, 3210, 103, 191,
	3208, 50, 3206, 139, 71, 117, 219, 102, 171, 84,
	175, 144, 187, 3205, 3201, 3199, 198, 3198, 3197, 168,
	134, 3196, 3195, 224, 35, 52, 190, 61, 3194, 122,
	3192, 163, 3191, 3190, 3187, 222, 137, 170, 5, 65,
	101, 28, 9, 188, 125, 203, 83, 3186, 4246, 354,
	1559, 40, 110, 75, 55, 108, 121, 211, 54, 3185,
	3181, 2534, 3180, 3169, 3168, 3166, 143, 3165, 3164, 3163,
	112, 109, 151, 3158, 132, 67, 12, 80, 201, 210,
	86, 166, 184, 195, 3155, 149, 3153, 68, 115, 3151,
	157, 194, 100, 3147, 197, 111, 3146, 176, 3145, 3144,
	3142, 3140, 3138, 3135, 3134, 159, 3133, 119, 3131, 3129,
	152, 160, 161, 98, 30, 3128, 62, 113, 3127, 155,
	33, 3124, 3070, 31, 0, 8177, 5911, 7280, 3123, 1527,
	3122, 169, 106, 3120, 3119, 3117, 73, 3115, 60, 3112,
	3111, 49, 3110, 15, 6, 11, 17, 13, 530, 380,
	3109, 3108, 82, 107, 123, 3107, 218, 182, 3105, 3104,
	3103, 69, 3102, 27, 3101, 25, 3100, 3089, 26, 4,
	18, 3088, 3084, 192, 3083, 200, 3081, 3080, 2825, 3076,
	207, 66, 3073, 205, 3072, 145, 174, 3071, 3068, 3061,
	3060, 206, 3059, 3058, 24, 1, 3055, 3054, 3053, 165,
	2, 2624, 3049, 3048, 64, 3046, 3044, 147,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 460,
	460, 19, 31, 20, 32, 13, 461, 461, 461, 461,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 171, 171, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	459, 459, 173, 173, 172, 167, 167, 462, 462, 174,
	174, 174, 176, 176, 37, 37, 37, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 402, 402, 403, 403, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 468,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	469, 469, 470, 470, 471, 471, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 249, 249, 225, 225, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 455, 455, 263, 263,
	369, 369, 68, 68, 282, 282, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	264, 264, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 371, 371, 80, 80, 80,
	339, 339, 84, 84, 84, 297, 297, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	458, 458, 256, 256, 190, 190, 190, 190, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 465, 465,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 396,
	396, 272, 272, 394, 394, 410, 410, 395, 395, 229,
	229, 229, 229, 229, 230, 230, 230, 401, 401, 401,
	401, 401, 401, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 303, 303, 303, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 136, 136, 136, 136, 136, 136,
	353, 353, 132, 132, 132, 132, 135, 135, 135, 135,
	287, 287, 129, 129, 129, 130, 130, 130, 134, 134,
	137, 137, 137, 137, 116, 116, 116, 473, 473, 473,
	138, 138, 128, 128, 139, 139, 139, 139, 139, 139,
	139, 139, 127, 127, 127, 126, 126, 126, 126, 119,
	456, 456, 453, 453, 453, 453, 453, 453, 453, 454,
	454, 457, 457, 89, 89, 89, 58, 58, 155, 155,
	155, 155, 153, 153, 154, 154, 59, 59, 474, 474,
	474, 463, 463, 463, 464, 464, 464, 464, 464, 464,
	231, 231, 232, 232, 320, 320, 320, 320, 320, 235,
	235, 175, 175, 175, 238, 239, 239, 236, 236, 237,
	237, 237, 241, 241, 240, 243, 243, 242, 319, 417,
	417, 419, 419, 419, 419, 419, 419, 419, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 415, 415,
	415, 416, 411, 411, 412, 412, 412, 412, 233, 233,
	234, 234, 234, 234, 413, 414, 254, 254, 356, 418,
	418, 420, 420, 422, 475, 475, 475, 475, 475, 475,
	476, 476, 318, 318, 247, 247, 423, 423, 423, 423,
	424, 424, 424, 424, 424, 427, 426, 425, 425, 425,
	425, 425, 349, 349, 349, 62, 62, 62, 284, 284,
	283, 283, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 143, 143, 60,
	60, 60, 181, 181, 182, 182, 57, 57, 57, 478,
	478, 61, 61, 61, 479, 479, 67, 67, 67, 67,
	67, 67, 56, 56, 56, 56, 56, 480, 480, 304,
	304, 302, 302, 253, 253, 355, 194, 194, 168, 168,
	168, 23, 25, 25, 17, 17, 34, 34, 35, 35,
	30, 30, 466, 466, 467, 467, 90, 90, 94, 94,
	94, 102, 102, 142, 142, 142, 142, 142, 142, 142,
	38, 38, 38, 38, 50, 50, 50, 50, 100, 482,
	482, 482, 101, 101, 481, 481, 189, 189, 189, 189,
	191, 191, 315, 315, 316, 316, 483, 483, 317, 317,
	317, 317, 184, 183, 185, 185, 55, 55, 55, 177,
	177, 178, 178, 179, 179, 180, 180, 484, 484, 87,
	87, 87, 145, 145, 224, 224, 224, 311, 311, 311,
	248, 248, 199, 199, 314, 314, 312, 312, 312, 312,
	281, 281, 281, 144, 144, 261, 261, 274, 274, 275,
	275, 366, 366, 276, 99, 99, 158, 158, 156, 156,
	156, 156, 156, 156, 163, 163, 265, 265, 164, 164,
	164, 164, 165, 165, 165, 157, 157, 157, 159, 159,
	159, 159, 159, 159, 159, 162, 162, 162, 162, 166,
	166, 166, 161, 161, 434, 434, 434, 436, 436, 437,
	433, 433, 435, 435, 477, 477, 286, 286, 286, 245,
	246, 244, 244, 251, 251, 250, 252, 252, 354, 354,
	354, 169, 169, 169, 279, 279, 279, 279, 307, 307,
	305, 305, 305, 306, 306, 308, 308, 308, 309, 309,
	310, 310, 278, 278, 335, 335, 160, 160, 160, 258,
	258, 258, 259, 259, 326, 326, 326, 326, 326, 326,
	327, 327, 325, 325, 325, 325, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 358, 359, 359, 260, 260,
	360, 313, 313, 451, 451, 451, 452, 452, 352, 352,
	361, 361, 361, 361, 361, 361, 350, 350, 351, 351,
	367, 368, 368, 290, 290, 290, 290, 288, 288, 291,
	291, 291, 291, 289, 289, 362, 362, 362, 362, 280,
	280, 363, 363, 363, 363, 364, 321, 322, 322, 372,
	372, 372, 372, 387, 257, 257, 257, 257, 257, 485,
	485, 373, 373, 373, 373, 373, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 377, 377,
	377, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 386,
	386, 386, 386, 386, 378, 378, 383, 383, 384, 384,
	384, 379, 380, 385, 385, 385, 385, 486, 486, 389,
	389, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	375, 375, 375, 382, 382, 382, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 298,
	298, 300, 300, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 330, 330,
	330, 330, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 428, 428, 428, 428,
	428, 428, 428, 428, 431, 431, 432, 432, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 438,
	438, 439, 439, 441, 441, 442, 442, 443, 444, 444,
	444, 445, 446, 446, 440, 440, 447, 447, 447, 447,
	448, 448, 449, 449, 449, 449, 449, 450, 450, 450,
	450, 450, 341, 341, 342, 342, 348, 348, 348, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 192, 192, 192, 192, 192,
	270, 270, 268, 268, 268, 271, 271, 269, 269, 267,
	267, 266, 266, 338, 338, 336, 336, 340, 340, 292,
	292, 388, 388, 388, 388, 388, 388, 388, 388, 293,
	293, 293, 301, 294, 294, 295, 295, 295, 295, 295,
	332, 333, 296, 296, 296, 334, 334, 343, 347, 347,
	346, 345, 345, 344, 344, 323, 323, 324, 324, 277,
	277, 487, 487, 273, 273, 365, 365, 365, 365, 227,
	227, 262, 262, 226, 226, 219, 219, 220, 220, 220,
	220, 255, 255, 390, 390, 390, 391, 392, 393, 337,
	337, 209, 208, 196, 197, 207, 206, 205, 195, 198,
	202, 203, 204, 200, 201, 215, 214, 213, 211, 212,
	370, 221, 221, 222, 222, 222, 223, 223, 223, 223,
	193, 193, 216, 216, 217, 218, 218, 210, 210, 210,
	186, 186, 186, 187, 187, 188, 188, 400, 400, 398,
	398, 398, 399, 399, 399, 399, 397, 397, 397, 397,
	397, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 406, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 409, 409,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 8, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 6, 7, 2, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	6, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 10, 10, 3, 5, 5, 5, 3, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	4, 3, 3, 3, 1, 3, 9, 12, 0, 2,
	3, 1, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 3, 0,
	2, 4, 3, 3, 1, 5, 1, 3, 1, 2,
	0, 1, 2, 2, 0, 1, 3, 3, 2, 2,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 5, 8, 4, 1, 0,
	1, 2, 2, 1, 2, 3, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 1, 0, 3, 3, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 3, 2, 0, 1, 1,
	0, 6, 4, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 2, 3,
	4, 3, 4, 5, 0, 3, 0, 2, 2, 4,
	2, 3, 0, 2, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 3, 4,
	5, 2, 2, 0, 2, 2, 1, 1, 1, 0,
	2, 2, 5, 2, 3, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 4, 4, 3, 4,
	1, 5, 3, 4, 5, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 4, 1, 2,
	1, 4, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 2, 5, 1, 4, 2, 5, 1, 4,
	3, 3, 0, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 5, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 4, 3, 3, 4, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 3, 3, 3, 0,
	1, 4, 2, 2, 2, 2, 2, 3, 2, 2,
	3, 0, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 2, 2, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 467, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 324, 334, 318, -107, -108,
	353, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -468, 86, -435,
	-71, -74, -76, -472, 116, 131, 175, 286, -92, -93,
	320, 322, 132, -45, -44, 126, -156, -158, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 357, 404,
	42, 367, 71, 119, 328, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -434, -72, -73, -75, -77, -78, 319, -159,
	-157, 464, 417, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 435, 443, -162, -160,
	-161, -166, 341, 425, 381, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, -211, -216, -217, -218, -210,
	-186, -406, -409, 4, -404, -407, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 387, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 304, 306, 307, 309, 310, 311, 312, 313,
	318, 315, 316, 317, 319, 320, 321, 322, 324, 326,
	327, 328, 329, 331, 333, 354, 355, 369, 334, 335,
	336, 337, 338, 339, 340, 344, 348, 345, 346, 347,
	342, 343, 349, 350, 351, 353, 356, 357, 359, 360,
	362, 363, 365, 366, 367, 368, 370, 373, 374, 375,
	371, 372, 380, 378, 379, 382, 383, 384, 385, 386,
	388, 390, 398, 399, 401, 404, 405, 406, 396, 408,
	409, 412, 413, 414, 415, 416, 421, 417, 419, 422,
	423, 424, 430, 429, 436, 437, 439, 440, 441, 33,
	43, 44, 46, 49, 60, 61, 62, 65, 103, 104,
	124, 134, 135, 146, 160, 162, 169, 170, 171, 189,
	195, 197, 201, 221, 256, 258, 274, 278, 291, 293,
	305, 330, 361, 376, 391, 392, 393, 394, 400, 402,
	425, 426, 427, 431, 438, 265, -204, 2, -186, -186,
	294, 26, 2, 26, 290, 343, 383, 385, 2, -458,
	-256, 2, 26, -190, -186, 86, 158, 341, -204, 2,
	-458, -256, 24, 2, -186, 2, -191, 2, 334, -186,
	467, 81, 228, 64, 330, 350, -110, 399, -109, 391,
	336, -111, -396, 2, 244, -186, 467, 467, 467, 467,
	2, 381, 283, 429, 342, 418, 99, 302, 182, 395,
	-453, 2, 4, -407, -404, -220, -219, 381, 99, -218,
	-210, 457, -217, 467, 467, 467, 2, 204, 205, 301,
	300, 350, 351, 467, 467, 467, 2, 25, 58, 80,
	83, 105, 133, 153, 156, 270, -469, 236, 280, 299,
	336, 349, 380, 388, 401, -464, 368, 59, -463, 418,
	-478, 406, 114, -302, 99, 228, 157, 413, 385, 383,
	326, 161, 411, 109, 188, 416, 415, 467, 467, 25,
	58, 67, 83, 114, 133, 153, 156, -471, 280, 299,
	333, 336, 349, 380, 388, 406, 401, 2, 429, 342,
	381, 182, 99, 418, 326, 297, -81, 2, 464, 29,
	28, 353, -152, 381, 198, 2, -186, 204, 205, 2,
	467, 467, -453, 2, 204, 205, 2, 198, 2, 59,
	338, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 2, -140,
	350, 368, 167, 41, 64, 26, 298, 69, 284, 100,
	159, 182, 183, 212, 80, 81, -303, 40, 205, 204,
	-353, 382, 337, 343, 378, 399, 86, 419, 327, 441,
	302, 303, 127, 4, 99, 244, 352, 391, 228, 73,
	-477, 2, 381, -481, 2, 399, 399, 2, -481, 2,
	-481, 2, -189, 2, 399, 395, -482, 399, 438, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, -157, -159, -158, 467, 467, 467, 467, 467,
	-140, 350, 2, 64, 26, -163, -164, 151, -250, -251,
	410, 196, 122, 271, -156, -158, 2, -434, -394, 2,
	-328, -410, -330, 455, 456, 448, 251, 442, -341, 105,
	411, 265, -409, -331, -343, 124, 330, -271, 8, 9,
	5, 6, 7, -193, -374, -337, 403, 136, 255, -223,
	468, 10, 464, -431, -158, -342, 34, 162, 57, -398,
	-222, -376, -384, -380, -381, -485, 47, 53, 52, 388,
	243, 344, 345, 362, 346, 347, 45, 421, 179, 262,
	264, 190, 4, 197, -221, -210, -428, -429, -404, -405,
	189, 195, 191, 361, 192, 193, 194, 44, 305, 147,
	148, 146, 115, 104, 103, 258, 49, 48, 46, 426,
	-385, 101, 391, 392, 393, 394, 207, 208, -186, -406,
	67, 91, 92, 90, 95, 94, 96, 93, 352, 418,
	58, 33, 169, 170, 201, 256, 171, 65, -430, 372,
	87, 155, 187, 173, 200, 202, 206, 222, 225, 245,
	249, 253, 275, 277, 325, 358, -486, 427, 134, 135,
	278, 291, 376, 400, 402, 160, 221, 60, 61, -436,
	306, -437, -204, -436, 467, 467, 469, 467, -244, -245,
	-246, 2, 26, 112, 464, 2, -357, 2, -358, -362,
	-158, 216, -361, 464, -359, 462, -211, 266, -432, 331,
	-428, -429, -193, -210, -222, 4, -247, 464, 466, 99,
	381, 68, 182, -297, 464, -186, 26, 265, 395, 469,
	-339, 464, 265, 154, 268, -186, 2, 2, 354, 2,
	464, -110, 62, 399, 39, 350, -316, 2, -317, -183,
	-184, -185, -367, 203, 296, 304, 444, 441, -394, -465,
	154, 447, 395, -394, -272, 466, 2, -362, 169, -211,
	2, -208, -397, 4, -404, -407, -405, -408, 67, -406,
	26, 28, 29, 30, 32, 34, 35, 36, 37, 50,
	57, 58, 63, 66, 68, 80, 86, 90, 91, 93,
	92, 94, 95, 96, 105, 107, 110, 112, 113, 117,
	119, 122, 136, 138, 151, 153, 154, 158, 161, 164,
	176, 186, 196, 198, 216, 219, 226, 229, 230, 251,
	255, 261, 265, 266, 270, 271, 288, 295, 308, 323,
	341, 352, 364, 377, 381, 389, 395, 397, 403, 410,
	411, 418, 420, 428, 432, 433, 434, 435, -409, 2,
	-362, 169, 2, -213, 169, -362, -216, 2, -402, 169,
	-400, 10, -399, 5, 4, -404, -407, -405, 2, -195,
	-186, 2, -207, -397, 2, -226, 169, -211, -212, -216,
	-96, -402, 464, 395, 469, -262, -219, -220, -255, -186,
	466, -328, 2, -99, 2, -328, 169, 2, -99, 169,
	2, -328, 169, 2, -99, 169, 2, 2, 2, 401,
	2, 83, 169, -186, 381, 98, 2, 317, -470, 333,
	405, 429, 2, 2, 2, 2, 2, 2, 2, 381,
	-200, 2, -186, 151, 342, -479, 306, -402, 169, 2,
	-402, 169, 2, -214, -216, -214, 182, 199, -195, 169,
	2, 385, 383, 385, 383, 154, 2, 198, 2, 198,
	2, -363, 2, -364, -358, -211, 462, 2, 2, 2,
	2, 2, 169, -186, 381, 98, 2, 214, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -264, 169, 2,
	-211, -264, 169, 2, -264, 169, 2, -227, 169, 2,
	-226, -195, 169, 2, -403, 169, 2, -402, -403, 169,
	2, -371, 2, -370, -399, 425, -81, 464, -81, 464,
	350, 464, -402, -211, -211, -328, -99, 154, -328, -99,
	-152, 151, 2, 99, 381, -140, 2, 151, 420, 2,
	8, 2, -402, 337, 303, 143, 2, 354, 2, 355,
	64, -303, 441, 64, 154, 2, 154, 2, -287, 2,
	435, -456, 2, 265, 154, 2, 154, 2, 154, 2,
	154, 2, 154, 2, 300, 351, 205, 2, -99, 432,
	-328, 432, 2, 398, 213, 128, 154, -287, 2, 154,
	2, 154, 2, 5, 2, 203, 296, 369, 2, -211,
	-473, 2, 381, 429, 342, 2, 2, 76, 77, 154,
	2, 154, 2, 154, 441, 2, -280, -362, -315, -316,
	-315, 395, -191, -163, -250, -251, -140, 354, 2, -265,
	259, 415, 247, 356, 211, -163, -279, -305, -306, 226,
	138, 261, -286, 26, 112, -286, -286, 51, 465, 465,
	11, 12, 66, 38, 455, 456, 457, 458, 149, 459,
	460, 453, 454, 452, 445, 446, 450, 209, 210, 82,
	449, 447, 75, 234, 332, 139, 140, 141, 142, 314,
	180, 31, 181, 14, 15, 16, 30, 270, 225, 442,
	173, 358, 448, 17, 18, 19, 200, 202, 253, 43,
	176, -192, -228, -328, -328, -328, -328, -328, 277, 464,
	-277, -323, 462, -158, 464, 464, 464, 5, -393, 8,
	-158, -328, -341, 465, -269, 464, -158, -341, -336, 464,
	330, 462, 464, -344, -328, 5, 464, 466, -438, 436,
	-378, 464, 293, -377, 464, -377, -377, 430, -375, 464,
	443, 437, 464, -375, 464, 464, 151, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	430, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	469, -436, -247, 464, -273, -365, -328, 457, -273, -273,
	265, -266, -328, 87, -290, 206, 245, 155, 222, 325,
	187, -325, 468, -325, -352, 443, -158, -359, -210, -158,
	-361, 464, -357, -352, -82, -393, -68, -79, -87, -99,
	-112, -144, -145, 457, -211, 464, 154, 464, 466, 154,
	-255, -397, -195, -211, -221, -222, -226, 111, -266, -453,
	-255, -190, 35, -338, -372, -373, -374, -383, -379, -382,
	-386, 47, 53, 52, 388, 243, 344, 345, 362, 346,
	347, 45, 421, 179, 262, 264, 190, 4, 46, 426,
	-385, 197, 310, 311, 309, 313, 312, 189, 195, 191,
	361, 192, 193, 194, 44, 305, 147, 148, 146, 115,
	104, 103, 258, 49, 48, 101, 391, 392, 393, 394,
	207, 208, 427, 372, 60, 61, -453, -255, 151, -396,
	-266, 35, -316, 2, 105, -400, 39, -483, 469, 224,
	-230, 233, 250, 166, 266, 439, 259, -401, 5, 4,
	-337, -349, 105, 228, 197, 9, 456, -390, 8, 455,
	-395, -394, 89, 466, -397, -171, 315, -170, 23, 27,
	116, 423, 129, -237, 184, 283, 124, 365, 414, -460,
	-461, 335, 386, 387, 78, 259, 315, 124, -283, -285,
	35, 97, 247, 279, 54, 177, 238, 239, 367, 431,
	124, 315, -182, -433, 435, 124, -461, 315, -461, -173,
	365, 414, -460, -461, 335, 315, -172, -237, 124, 468,
	-368, -367, -403, -96, -262, 469, 469, -397, 457, 124,
	124, 124, 124, 2, 2, 251, 2, 2, 2, 156,
	-463, -471, 2, 2, 2, -211, 169, -249, 265, -455,
	-263, 381, -211, -213, 169, 2, -216, 429, -181, -182,
	251, 251, 35, 464, 2, -197, 169, 2, -187, -186,
	182, -433, 251, -363, -224, -211, -358, -224, 353, -204,
	35, -325, -325, 124, 2, 2, 2, -186, -174, 469,
	56, 321, 124, -174, 124, -174, 124, -174, 469, 124,
	-174, 124, 469, 124, 124, 465, 469, -371, -371, -402,
	-150, 435, 154, 86, 464, 464, -152, -97, -96, -402,
	-455, -195, 2, -211, 2, 381, 207, -402, -402, -402,
	-396, 26, 355, 2, 300, 351, 77, 355, 2, -211,
	381, 99, 182, 70, -457, 151, -454, 326, -453, -211,
	99, -211, 99, -211, 99, -211, -211, 2, 2, 2,
	2, 74, 74, 151, 2, 398, 2, 398, 2, -186,
	-186, -186, 224, -211, 151, 381, 182, 381, 182, 99,
	381, -174, 469, -191, -163, -279, -396, -165, 360, 254,
	-264, 211, 356, -163, -306, -305, 26, -328, -310, 145,
	246, -328, -330, -157, -157, -157, -252, -354, -328, 295,
	182, -387, -372, -372, -209, -397, 391, -328, -328, -328,
	-328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
	-328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
	-328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
	-328, -328, 225, 173, 358, 43, 176, -328, 395, -328,
	-328, -328, -328, 242, 251, 255, 403, 136, 412, 112,
	259, -487, 377, 37, -334, -158, -270, 464, -348, 32,
	364, 26, -341, 464, 2, -323, -328, -324, -267, -266,
	-266, 465, 428, 26, 112, 457, 2, 465, 469, 35,
	465, -328, -267, -340, -336, -266, -347, -346, 432, -298,
	-299, 440, 241, 102, 168, 240, -300, 340, -391, 8,
	-397, 457, -439, 144, 161, 8, -391, -391, 391, 391,
	-391, -391, -391, 464, 465, 2, 465, 2, 465, -328,
	2, 465, -328, 2, 465, 2, -328, -328, -328, -328,
	-328, -328, -328, -266, -292, 2, -388, -266, 4, 440,
	241, 102, 168, 240, 340, 5, -292, 2, -293, 2,
	-328, -266, -294, -329, -330, 455, 456, 448, -341, -295,
	2, -328, -267, -328, 50, 219, 397, -296, -328, 154,
	-266, -266, 2, -266, 2, -437, 35, -266, -258, 469,
	154, 35, 4, -258, -258, 464, 465, 469, -291, 165,
	237, 232, -291, -357, -290, 206, -288, 275, -288, -288,
	-352, -196, 462, 470, -397, -352, -351, -350, 35, -204,
	272, -352, -352, 466, 465, -351, 463, -451, 464, 467,
	467, 467, 467, 467, -211, 464, -266, -397, 370, 465,
	466, 200, 200, 200, 200, 331, 465, 395, 435, -81,
	267, 465, 469, -257, 34, 462, -389, 430, 464, 464,
	-299, 464, 154, -256, -465, 465, 399, -317, -229, 304,
	363, 316, 348, 379, 9, 8, 8, 469, -397, 469,
	-466, 80, 395, 68, -319, 169, 68, -411, -198, 80,
	-412, -186, 63, 411, 295, 153, -466, 80, 295, -466,
	80, 80, 353, 368, 51, -362, 38, 38, 26, -99,
	220, 154, 441, 381, 182, 395, -362, -285, -372, 97,
	238, 239, 51, -392, -390, 456, -392, 51, -392, -392,
	-392, 435, -213, -362, 395, 285, -402, 395, 469, 38,
	38, 26, -99, 220, 154, 395, -226, -196, -147, 178,
	465, -368, -219, -186, 466, -328, -99, -328, -99, 124,
	2, -479, 214, 464, -233, 251, 154, -255, -369, 198,
	469, -263, -284, -283, 251, -215, 2, -211, 124, 124,
	464, 120, 302, 2, 265, 251, -197, 169, -177, 384,
	124, -282, 420, -311, -99, 464, 105, 35, -311, -274,
	-275, -366, -276, -198, 464, -204, -186, 2, -211, -264,
	-264, -264, -226, -227, -195, -402, -403, -403, -81, -370,
	465, 465, 465, -149, 269, -148, -186, 5, -152, 420,
	-232, -320, -319, -415, -416, -411, 225, 182, 411, 199,
	137, -248, -199, -198, 98, -368, 469, -150, -150, -368,
	-368, -211, 151, 2, 2, -287, -211, -195, -226, -211,
	-255, -255, -287, -195, -287, -195, -287, -195, -99, -328,
	350, 151, 151, 466, -287, 302, 99, 381, 283, 182,
	-211, -226, -211, -226, -195, -211, -362, -163, 231, 415,
	-308, -390, 464, -309, 330, 331, 469, -168, 36, 110,
	211, -211, 441, 121, -328, -328, 395, -487, 377, -334,
	121, -328, 242, 255, 403, 136, 412, 112, 259, 154,
	464, -329, -329, 465, -268, -328, -328, 463, 472, 465,
	-251, 469, -250, -328, -266, -266, 465, 466, -266, -255,
	463, 463, 469, 465, -345, -346, 117, -328, 395, 395,
	395, 395, 464, 465, 466, -444, 276, 464, 464, 465,
	465, 469, 465, 441, 441, 465, 465, 465, -328, 465,
	465, 35, 469, 469, 469, 465, 469, 469, 469, 465,
	465, 154, 465, 465, -301, 288, 465, 11, 12, 455,
	456, 457, 458, 149, 459, 460, 453, 454, 452, 445,
	446, 447, 75, 234, 332, 14, 15, 16, 200, 176,
	-329, -329, -329, 465, -332, -333, 154, 151, 35, -296,
	-296, -296, 465, 154, -266, 465, 465, 464, 465, -322,
	-321, 433, -365, -259, 2, -357, -206, -397, -322, -322,
	-266, -328, 206, 206, -289, 420, 265, -291, -357, -351,
	-393, -327, -326, 152, 36, 110, 248, 172, -351, -204,
	-247, -351, -351, -397, -352, -352, -350, 465, -452, -393,
	465, -260, -360, -432, -251, 466, -150, -397, -141, 5,
	255, -141, -141, -141, -255, 24, 289, -372, 462, 463,
	8, 464, -391, -391, -391, -255, 154, -394, -316, 409,
	72, 304, 391, -394, -170, 315, -198, -198, -211, 251,
	-319, 169, -176, 251, -372, -205, -186, 464, 464, 211,
	211, -198, -205, 211, 169, -198, 169, -205, -205, -459,
	304, 260, -328, 227, 302, 252, -171, 315, -99, -99,
	-99, 464, -465, 420, 111, -211, -226, -211, -215, 315,
	249, -221, -392, -392, -283, 315, -213, -402, 255, -182,
	-195, -172, -99, -99, -99, 464, -196, -173, 315, -150,
	154, -147, 457, -186, 429, -186, -231, -234, -232, -198,
	-155, 437, 435, 124, -225, -211, 462, -150, -402, -211,
	124, -247, -402, -402, 2, 464, 2, -211, 124, 265,
	251, -178, 118, -484, 447, -195, -322, -259, -281, -314,
	323, 265, -248, 425, -204, -281, -261, 469, 154, 447,
	466, -248, 2, -174, -174, -174, -174, -174, -81, -81,
	-150, 469, 464, 447, 447, 464, -402, -402, 465, 469,
	-211, -197, 182, 182, -203, -187, 465, 469, 466, 464,
	-150, -96, 154, -46, 435, 381, 468, -287, -287, -287,
	350, 350, -186, -207, -195, -211, -208, -226, 151, 151,
	-309, -328, -354, -169, 257, -211, 468, -328, -328, 121,
	121, -328, -329, -329, -328, 121, 154, 464, -328, -338,
	30, 30, 465, 469, -324, -328, 465, 428, -251, -251,
	465, 457, -397, 465, -336, 119, -328, 389, 241, 168,
	240, -300, 240, -300, -300, -391, 5, -397, 457, -445,
	-201, 464, -186, 433, -250, -391, -375, -375, 465, -387,
	-372, -328, -328, -328, -328, -328, -328, -332, -328, -387,
	-372, -329, -329, -329, -329, -329, -329, -329, -329, -329,
	-329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
	112, 251, 259, -329, -333, -332, -328, -328, -372, 465,
	465, 465, -266, -81, -278, 161, -328, -368, 469, -278,
	-278, 465, -357, -357, 464, -328, 206, 463, 469, 471,
	447, -247, 466, -350, -351, 463, 465, 469, 465, 469,
	-313, 35, 465, -397, 268, 5, 8, 462, 463, -391,
	465, 465, 465, -255, -328, 395, 395, 124, 251, 422,
	-417, -412, -328, -253, -355, -328, 464, 464, -167, 116,
	353, -467, 2, 420, 124, -174, 124, -174, 439, 464,
	464, 395, 435, -266, -328, -151, 105, -396, -461, 468,
	-461, 468, 395, 395, 435, -266, 395, -403, -150, 2,
	2, 2, 465, 465, 469, -418, 35, 263, 464, 263,
	-211, -64, 435, -367, -393, -213, 35, -181, 2, -304,
	420, -196, -211, 124, -179, 218, -484, -400, -433, -251,
	-281, -273, 252, 79, 465, -322, -275, -259, -328, 2,
	465, -148, -149, -402, -402, -402, -150, -152, -152, -320,
	2, 464, -197, -187, 464, -152, -199, 2, -403, -99,
	269, -211, 457, -287, -239, -238, 283, 259, -239, 330,
	330, 266, 465, 145, 215, -168, -196, -328, -328, 121,
	30, 30, -328, -328, -338, 465, -328, -328, -266, 463,
	5, -328, 465, 465, -328, 465, 466, -446, -186, -328,
	465, 465, 465, 465, 469, 469, 465, 465, 465, 465,
	-333, 154, 112, 259, 464, 465, 465, -335, 164, 51,
	-357, -335, -335, -289, -255, -357, -326, -196, 462, -397,
	-393, -360, 464, 466, 463, 2, 462, 465, -198, -198,
	-319, 124, -419, 80, -421, 66, 137, 86, 251, 255,
	411, 295, 63, 105, 308, 35, 465, 465, 469, -168,
	-253, -255, 251, 374, 105, 251, 105, 98, 406, 69,
	-198, -205, -255, -255, -211, 130, 465, 469, 447, 2,
	457, 457, -215, -213, 130, 465, -196, -235, 185, -198,
	-416, -413, -414, 295, -420, -422, 137, 295, -99, -154,
	-153, -186, 5, 2, 464, -233, 269, 463, -284, -99,
	464, -186, 265, 464, -196, -180, 217, -484, -400, -177,
	-307, -305, -312, 464, 265, -99, -251, 447, 465, 465,
	98, 98, -253, 464, 464, -255, 98, 465, -47, -48,
	182, 80, 287, -208, 381, 182, 464, 464, -168, -328,
	-328, -328, 465, -251, -397, 457, -440, 283, 465, -328,
	-328, -329, 154, 464, -338, -441, 434, -328, -266, -441,
	-441, 465, -393, 2, 462, 2, -319, -205, -209, -202,
	-186, 137, 169, 255, 211, 464, -329, -211, 464, 2,
	-475, 107, 186, -318, -476, 85, 375, -355, -169, 465,
	465, 255, 255, -328, -372, 464, -174, -174, 465, 465,
	-328, 395, -396, 84, -394, 2, -461, -328, 395, -236,
	-237, 176, -418, 211, -202, 211, -474, 435, 465, 469,
	447, 447, -231, -155, -65, -66, 396, -367, -253, -211,
	-253, 265, -484, -400, -178, -281, 113, -255, 80, -307,
	-334, -150, 464, 464, 465, -253, -253, 465, 464, -150,
	469, 26, 464, 26, 464, -211, -226, -266, -266, 465,
	-251, 51, 465, 465, -329, -338, 465, -442, -443, -201,
	463, 2, -421, -202, 251, -328, -188, 464, -328, 186,
	108, 174, -235, 464, 308, -194, 66, -253, 464, 464,
	464, 447, 154, 464, -155, 281, 464, 98, 247, -153,
	-331, -331, 465, 35, -66, 9, 465, -304, 465, -211,
	-400, -179, 415, 252, 465, -205, -281, -403, -403, -318,
	465, 465, -403, -48, -255, -255, 465, 465, -447, 302,
	331, 163, -266, 465, 469, 35, 124, 465, -423, 235,
	-186, 465, 108, 174, -236, -255, -211, -462, 420, -209,
	465, -241, -240, -238, -243, -242, -238, -266, -394, 84,
	281, -266, -211, -254, -356, -198, 98, -235, -99, -318,
	464, -318, 464, -180, 353, -321, 465, 465, -235, -318,
	465, 465, 465, 465, -448, -449, 43, 408, 89, -328,
	-448, -448, -443, -445, 137, -424, -427, -426, 265, 359,
	155, 282, 465, 374, 431, -475, 465, -247, -328, 465,
	469, 425, 465, 469, 425, 465, 154, 465, 464, 465,
	469, -236, -474, -235, -253, -235, -253, -274, -150, -150,
	-236, -235, -150, -450, 123, -449, 292, 150, 330, 292,
	150, -450, -450, -202, -426, 265, -427, 265, 415, 109,
	-423, -240, 176, -242, 154, 281, -255, -356, -155, -236,
	465, -236, 465, -322, -236, 89, 161, 390, 247, 30,
	-425, 247, 321, 56, 353, -425, -424, 464, 464, 465,
	-480, 433, -318, -480, -318, 330, 273, -449, 22, 255,
	105, -475, -266, -266, -175, 56, 321, 2, -235, -235,
	465, 465, -236, -236, -236, 395, -480, -480, 464, -266,
	465, -236,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 943, 945, 947, 949, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1034, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 961, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1082, 329, 331, 333, 335, 337, 0, -2,
	1094, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1058, 1060,
	1062, 1064, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 835, 1698, 1712, 1713, 1714,
	1717, 1718, 1719, 1720, 1721, 1722, 2065, 2145, 2146, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 0, 426, 424, 1692, 427,
	1896, 429, 431, 316, 317, 318, 319, 320, 321, 0,
	441, 435, 440, 442, 444, 445, 446, 447, 421, 419,
	0, 441, 1744, 439, 941, 942, 936, 937, 1930, 971,
	460, -2, -2, -2, 2033, -2, 492, -2, 499, 2036,
	1932, 504, 0, 506, -2, 509, 944, 946, 948, 27,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, -2, -2, -2, -2, 0, 0, 1781, 1667,
	1714, 1670, 1665, 192, 194, 196, 197, 0, 0, 0,
	0, 0, 0, 221, 223, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 741, 742,
	889, 890, 911, 0, 0, 0, 0, 324, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 0, 0, 0, 254, 362, 363, 0, 1083,
	1083, 0, 0, 0, 0, 172, 163, 0, 0, 725,
	449, 451, 0, 158, 0, 0, 940, 0, 174, 0,
	0, 465, 467, 469, 534, 536, 538, 540, 542, 544,
	547, 549, 551, 553, 555, 557, 559, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, 582, 584, 585,
	0, 0, 0, 0, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 0, 588, 590, 591, 592, 0, 643, 660,
	0, 878, 1084, 973, 951, 964, 973, 953, 954, 955,
	956, 957, 962, 963, 966, 0, 958, 959, 960, 30,
	32, 34, 36, 38, 40, 42, 278, 280, 282, 284,
	288, 290, -2, 1056, 1057, 330, 332, 334, 336, 338,
	452, 0, 454, 0, 589, 1038, 1046, 0, -2, 0,
	1088, 1088, 1088, 0, 0, 1057, 1055, 0, 457, 458,
	513, 514, 1323, 0, 0, 0, 0, 0, 1564, 1407,
	0, 515, -2, 1438, 1440, 2012, 2033, 1563, 1442, 1443,
	1444, 1445, 1446, 0, 0, 1449, 1450, 1451, 1452, 1453,
	0, 1455, 0, 1459, 1460, 1461, 0, 2017, 1644, 1710,
	-2, 1226, 1227, 1228, 1229, 1230, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2023, 1706, 0, 1530, 1475, -2, 1731,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1790, -2, -2, -2, -2, -2, -2, -2,
	1282, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	2047, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	0, 2001, 2018, 2019, 2024, 2026, 2020, 2009, 1498, -2,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 1283, -2, 2013, 2014,
	2029, 2030, 2035, 2040, 2041, 2016, 2025, -2, -2, 1074,
	1905, 1077, 835, 1075, 1059, 1061, 0, 1063, 0, 0,
	0, 1068, 1091, 1089, 0, 1127, 1072, 1073, 1145, 1145,
	1169, 0, 1150, 0, 1169, 1083, 1195, 0, 1156, 1925,
	1476, 1477, 0, 1714, 1711, -2, 0, 0, 0, 0,
	0, 0, 0, 422, 0, 428, 430, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 462, 463, 0, 487,
	0, 491, 2008, -2, 1749, 1945, -2, 495, 974, 978,
	979, 980, 981, 0, 0, 0, 0, 0, 501, 0,
	0, 488, 489, 507, 510, 0, 51, 0, 2018, 1195,
	53, 0, 1682, 1736, 1737, 1738, 1739, 1740, 2047, 2064,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 55,
	0, 2018, 58, 0, 2018, 0, -2, 62, 1081, 2018,
	175, 176, 1727, 1728, 1732, 1733, 1734, 1735, 65, 0,
	1688, 67, 0, 1685, 76, 0, 2018, 0, 1664, -2,
	1182, 159, 0, 0, 0, 717, 1661, 1666, 718, 1671,
	0, 198, 199, 200, 201, 202, 2018, 204, 205, 0,
	207, 208, 2018, 210, 211, 0, 213, 229, 230, 0,
	232, 0, 2018, 0, 0, 0, 238, -2, 255, 0,
	252, 0, 242, 243, 245, 246, 247, 248, 249, 0,
	294, 292, 1693, 0, 0, 0, 895, -2, 2018, 881,
	886, 2018, 888, 900, 1696, 0, -2, 0, 1081, 2018,
	988, 745, 746, 747, 748, 0, 313, 0, 1001, 0,
	1003, 0, 1024, 1201, 1145, 1145, 0, 256, 257, 258,
	259, 260, 2018, 0, 0, 0, 265, 0, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 151, 2018, 341,
	360, 151, 2018, 344, 151, 2018, 347, 151, 2018, 350,
	1659, 151, 2018, 353, 354, 2018, 356, 177, 357, 2018,
	359, 0, -2, 415, 1700, -2, 365, 0, 366, 0,
	-2, 0, 189, 0, 0, 723, 724, 0, 938, 939,
	0, 0, 472, 0, 0, 586, 587, 0, 0, 597,
	598, 599, 600, 1933, 1903, 1806, 604, 0, 607, 610,
	-2, 0, 0, 0, 0, 614, 0, 619, 620, 621,
	0, 722, 623, 0, 0, 625, 0, 629, 0, 632,
	0, 634, 0, 636, -2, -2, -2, 647, -2, 0,
	651, 0, 653, 0, 0, 0, 0, 668, 669, 0,
	674, 0, 677, 678, 679, 0, 681, 682, 683, 684,
	0, 686, 687, -2, -2, 691, 693, 0, 700, 0,
	704, 0, 708, 0, 593, 594, 151, 1199, 950, -2,
	952, 0, 968, 1041, -2, 0, 453, 0, 456, 1052,
	0, 1048, 0, 1050, 0, 1039, 1044, 1106, 1107, 0,
	0, 0, 0, 1086, 1087, 0, 0, 0, 1036, 1037,
	0, 0, 0, 0, 1569, 1570, 1571, 1572, 1573, 1574,
	1577, 1578, 1575, 1576, 1579, 1580, 0, 0, 0, 0,
	0, 1581, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1582, 1583, 1584, 0, 0, 1586, 0,
	1588, 0, 0, 0, 0, 0, 0, 1386, 1388, 1652,
	0, 0, 1585, 1328, 1329, 1330, 1365, 1366, 0, 0,
	1439, 1649, 1648, 1441, 0, 1600, 0, 1448, 1454, 1678,
	-2, 0, 1564, 1595, 0, 0, 1462, 1463, 1464, 0,
	0, 1600, 0, 0, 1643, 1320, 0, 0, 1532, 0,
	1262, 0, 1263, 1264, 0, 1265, 1266, 1279, 1292, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 1624, -2, 0, 0, 0, 0,
	0, 1076, 0, 0, 1131, 1653, 1657, 1658, 1131, 1131,
	0, 0, 1601, 1192, 1192, 0, 0, 1188, 1188, 1188,
	1186, 1169, 0, 1169, 1179, 0, 1169, 1169, 0, -2,
	1150, 0, 0, 1179, 0, 1163, 403, 405, 407, 409,
	410, 411, 413, 1196, 1197, 0, 0, 0, 0, 0,
	0, 1715, 0, 0, 0, 1702, 0, 0, 0, 0,
	433, 443, 1083, 0, 1603, 1218, 1221, 1222, 1223, 1224,
	1225, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, -2, 1280,
	1282, 1303, 1269, 1270, 1271, 1272, 1273, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1275, 0,
	1250, 1250, 1250, 1267, 1268, 1291, 1302, 1294, 1302, 1298,
	1219, 1220, 1285, 1286, 1287, 1288, 0, 437, 0, 0,
	0, 0, -2, 497, 502, 503, 0, 0, 976, 0,
	982, 524, 525, 526, 984, 985, 0, 500, 527, 528,
	529, 530, 531, 532, 0, 852, 0, 854, 1673, 0,
	498, 517, 505, 0, 511, 77, 933, 116, 0, 933,
	933, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	101, 112, 89, 90, 0, 0, 0, 0, 59, 860,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 922, 0, 1080, 0, 100, 0, 95, 79,
	0, 0, 0, 102, 114, 0, 142, 144, 0, 0,
	180, 1181, 0, 1182, 716, 0, 0, 1715, 1669, 0,
	0, 0, 0, 231, 233, 0, 235, 236, 237, 0,
	894, 0, 244, 241, 285, 809, 2018, 0, 0, 311,
	306, 0, 308, 859, 2018, 857, 1697, 0, 879, 882,
	0, 0, 0, 0, 901, 0, 2018, 906, 1684, 1723,
	1724, 990, 0, 315, 0, 1004, 1006, 0, 0, 1202,
	0, 1204, 1205, 0, 262, 263, 264, 0, 339, 0,
	149, 150, 0, 342, 0, 345, 0, 348, 0, 0,
	351, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 1182, 161, 189,
	189, 1182, 474, 1182, 476, 0, 0, 601, 602, 603,
	605, 606, 608, 609, -2, -2, 701, 611, 612, 671,
	0, 0, 0, 670, 622, 0, 710, 1921, 720, 671,
	1781, 671, 1781, 671, 1781, 633, 635, 638, 663, 646,
	650, 0, 0, 0, 655, 0, 657, 0, 659, 671,
	672, 675, 680, 685, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 967, 1042, 1044, 455, 1045, 0, 1054,
	1047, 0, 1051, 1040, 1104, 1105, 1110, 1111, 1117, 1120,
	1121, 1113, 1323, 1069, 1070, 1071, 1095, 1096, 920, 0,
	2145, 1324, 1213, 1325, 1326, 1681, 0, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, -2, -2, -2,
	-2, -2, -2, -2, -2, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, -2, -2, -2, 1363,
	1364, -2, 1587, 1589, 0, 1652, 0, -2, 0, -2,
	-2, -2, -2, 1383, 0, 1385, 1390, 1392, 1394, 0,
	0, 0, 0, 1651, 1404, 1635, 1636, 0, 0, 1566,
	1567, 1568, 1389, 0, 1408, 1650, 1647, 0, 0, 1599,
	1094, 1466, 0, 0, 0, 0, 1473, 1458, 1597, 0,
	1596, 0, 0, 0, 1607, 0, 1642, 1638, 0, 1679,
	1319, 1306, 1307, 1308, 1309, 1310, 1311, 1321, 0, 1676,
	1703, 1709, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1501, 1502, 1503, 0,
	1505, 1506, 0, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 1610, -2, -2,
	-2, -2, -2, -2, -2, -2, 0, 1514, 0, 1516,
	1601, 1621, 0, 0, 1409, 0, 0, 0, 1564, 0,
	1519, 1601, 1629, 0, 0, 0, 0, 0, 1601, 0,
	1634, 0, 1526, 0, 1528, 1078, 0, 0, 1208, 0,
	0, 0, 1656, 1208, 1208, 0, 1126, 0, 0, 1189,
	1190, 1191, 0, 0, 1192, 0, 1183, 1187, 1184, 1185,
	1179, 1142, 0, 0, 1683, 1179, 1148, 1178, 0, 835,
	1168, 1179, 1179, 0, -2, 1152, 1169, 0, 0, 404,
	406, 408, 412, 414, 0, 0, 1094, -2, 189, 834,
	0, 0, 0, 0, 0, 423, 425, 0, 0, 417,
	0, 420, 0, 1209, 1212, 0, 0, -2, 0, 0,
	1304, 0, 0, 0, 0, 490, 0, 975, 983, 0,
	521, 0, 523, 0, 853, 1675, 1674, 0, 512, 0,
	0, 0, 0, 932, 120, 2018, 0, 153, 0, 0,
	803, 1689, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 91,
	0, 0, 0, 0, 0, 0, 0, 861, 862, 864,
	871, 873, 0, 867, 1677, 0, 868, 0, 870, 872,
	874, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 88, 92, 0, 0, 0, 0, 1663, 189, 0,
	160, 180, 1662, 1672, 0, 203, 206, 209, 212, 0,
	239, 0, 0, 751, 728, 0, 0, 293, 189, 0,
	0, 307, 855, 858, 0, 835, 893, 1695, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 2018, 992, 998,
	0, 1208, 0, 1022, 1007, 0, 0, 0, 1022, 1026,
	1027, 1029, 1030, 0, 0, 1203, 0, 266, 361, 151,
	151, 151, 1660, 151, 151, 178, 355, 358, 364, 416,
	1083, 1083, 189, 187, 1881, 185, 182, 184, 0, 0,
	0, 752, 754, 755, 756, 757, 0, 1724, 0, 1835,
	1724, 0, 1010, 1012, 0, 189, 0, 0, 305, 473,
	478, 595, 0, 640, 665, 613, 615, 616, 617, 0,
	721, 719, 624, 671, 627, 671, 630, 671, 649, 652,
	654, 0, 0, 0, 667, 0, 0, 0, 0, 0,
	0, 0, 705, 706, 707, 709, 1200, 1043, 1053, 1049,
	0, 1115, 0, 1114, 1118, 1119, 0, 1103, 918, 919,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1405,
	0, -2, 1384, 1387, 1391, 1393, 1395, 0, 0, 0,
	0, 0, 0, 1590, 0, 1592, 1406, 1645, 1648, 1562,
	0, 0, 1093, 1094, 1094, 0, 1472, 0, 1598, 0,
	1605, 1606, 0, 1465, 0, 1639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 1274,
	1248, 0, 1302, 1300, 1301, 1295, 1302, 1299, 0, 1504,
	1507, 0, 0, 0, 0, 1493, 0, 0, 0, 1497,
	1511, 0, 1513, 1515, 0, 0, 1517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 1413, 1414, 1518, 1627, 1628, 0, 0, 0, 0,
	0, 0, 1524, 0, 1633, 1525, 1527, 1083, 1128, 1123,
	1207, 0, 1654, 1182, 1130, 1132, 1655, 1686, 1123, 1123,
	0, 1602, 0, 0, 1173, 0, 0, 0, 1175, 1146,
	0, 0, 1140, 0, 1136, 1137, 1138, 1139, 1147, 835,
	1177, 1149, 1153, 1703, 0, 1179, 0, 1164, 0, 1166,
	1198, 0, 1158, 1161, 0, 0, 190, 1716, 214, 218,
	219, 215, 216, 217, 432, 0, 0, 1604, 0, 1214,
	0, 0, 0, 0, 0, 436, 0, 486, -2, 519,
	520, 522, 0, 518, 117, 933, 0, 0, 924, 0,
	122, 2018, 131, 0, 780, 0, 1687, 0, 0, 0,
	0, 935, 0, 0, 2018, 151, 2018, 151, 134, 137,
	0, 141, 139, 0, 0, 771, 78, 933, 81, 85,
	93, 0, 0, 0, 99, 0, 0, 0, 926, 0,
	865, 866, 869, 875, 60, 0, 928, 884, 885, 923,
	921, 143, 83, 87, 94, 0, 930, 80, 0, 154,
	0, 189, 1668, 0, 0, 0, 0, 0, 750, 820,
	0, 0, 0, 0, 299, 295, 0, 304, 310, 309,
	0, 0, -2, 887, 896, 0, 898, 910, 0, 0,
	0, 994, 998, 0, 997, 1081, 1094, 314, 999, 1022,
	0, 0, 0, 1009, 1005, 1002, 1208, 0, 0, 0,
	0, 0, 261, 340, 343, 346, 349, 352, 367, 368,
	164, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 1724, 1724, 0, 1691, 0, 0, 0, 0,
	157, 162, 0, 475, 0, 0, 0, 626, 628, 631,
	656, 658, 671, 694, 695, 766, 0, 766, 0, 0,
	0, 0, 1097, 1098, 0, 920, 0, 1327, 1368, 0,
	0, -2, 0, 0, 1372, 0, 0, 0, -2, 0,
	0, 0, 1591, 1593, 0, 1647, 1467, 0, 0, 0,
	1471, 1456, 1457, 1565, 1608, 1637, 1641, 0, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 0, 1680, 1704, 1708, 1538,
	1539, 1543, 1694, 0, 0, 0, 1293, 1297, 1478, 0,
	0, 0, 0, 0, 0, 0, 1609, 1620, 1622, 1410,
	1411, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, -2, -2, -2, 1428, 1429, 1430, -2, -2, -2,
	0, 0, 0, 1623, 1625, 1626, 1630, 1631, 0, 1521,
	1522, 1523, 1632, 0, 1125, 0, 1206, 1129, 0, 1125,
	1125, 1090, 1171, 0, 0, 1194, 0, 1143, 0, 1144,
	0, 1176, 0, 1151, 1154, 1155, 1165, 0, 1157, 0,
	1160, 0, 1467, -2, 434, 418, 0, 0, 1216, 0,
	1277, 1281, 1305, 438, 1180, 0, 0, 0, 0, 152,
	778, 802, 0, 0, 913, 920, 0, 0, 124, 0,
	0, 0, 132, 0, 0, 129, 0, 136, 140, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 103, 0,
	104, 0, 0, 0, 0, 0, 0, 179, 155, 234,
	892, 240, 760, 808, 0, 810, 0, 729, 0, 0,
	809, 291, 0, 298, 0, 859, 0, 880, 897, 0,
	0, 0, 0, 0, 996, 998, 0, 989, 990, 1109,
	1000, 1020, -2, 1019, 0, 1094, 1028, 1025, 1031, 1032,
	0, 186, 0, 181, 183, 0, 167, 0, 0, 753,
	758, 0, 0, 0, 0, 0, 1011, 1013, 0, 173,
	0, 596, 618, 666, 696, 765, 0, 0, 698, 0,
	0, 1112, 1116, 1101, 1102, 1099, 920, 1370, 1374, 0,
	0, 0, 1376, -2, 0, 1398, -2, -2, 1594, 1646,
	1447, 1094, 1468, 1470, 1640, 1322, 0, 1545, 1542, 0,
	1529, 1249, 1488, 1489, 0, 0, 1492, 1494, 1495, 1496,
	1619, 0, 0, 0, 0, 1520, 1079, 1534, 0, 0,
	1133, 1534, 1534, 1172, 0, 1174, 1141, 1134, 0, 1704,
	1167, 1159, 0, 0, 1210, 1215, 0, 1276, 118, 119,
	121, 0, 779, 0, 782, 0, 0, 0, 0, 789,
	790, 0, 0, 0, 0, 0, 824, 833, 0, 1103,
	0, 0, 0, 126, 146, 0, 0, 934, 0, 0,
	151, 151, 0, 0, 925, 0, 0, 0, 0, 106,
	0, 0, 927, 929, 0, 0, 931, 768, 0, 820,
	812, 813, 814, 0, 819, 821, 0, 0, 738, 0,
	734, 0, 0, 731, 751, 728, 0, 296, 856, 891,
	0, 909, 0, 0, 0, 986, 998, 0, 991, 992,
	1022, 1108, 0, 0, 0, 1008, 1109, 0, 188, 189,
	0, 0, 0, 0, 0, 0, 0, 189, 477, 479,
	0, 0, 485, 764, 0, 0, 0, 0, 1100, 1378,
	-2, -2, 1399, 0, 1705, 1707, 1094, 0, 1531, 0,
	0, -2, 0, 0, 0, 1065, 0, 1124, 1122, 1066,
	1067, 1193, 0, 1162, 0, 1217, 123, 0, 783, 784,
	1690, 786, 0, 788, 791, 0, 793, 1726, 0, 797,
	804, 825, 0, 760, 0, 830, 831, 914, 915, 806,
	0, 125, 127, 145, 917, 0, 128, 135, 0, 0,
	82, 0, 0, 1775, 109, 107, 105, 84, 0, 728,
	767, 0, 811, 0, 822, 823, 736, 0, 730, 0,
	0, 0, 0, 0, 297, 300, 0, 303, 0, 910,
	0, 0, 0, 993, 994, 312, 0, 0, 0, 1022,
	1033, 166, 0, 0, 833, 0, 0, 801, 0, 171,
	0, 481, 0, 483, 0, 697, 699, 0, 0, 1469,
	1549, 0, 1490, 1491, -2, 0, 1436, 1533, 1535, 0,
	1135, 1211, 781, 785, 0, 0, 839, 0, 0, 0,
	828, 829, 768, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 739, 0, 735,
	732, 733, 760, 0, 301, 302, 833, 0, 833, 0,
	995, 996, 0, 1015, 1016, 1018, 1023, 0, 0, 760,
	833, 800, 0, 480, 0, 0, 702, 703, 0, 0,
	0, 0, 1544, 1437, 0, 0, 0, 792, 844, 0,
	0, 0, 826, 827, 824, 0, 835, 130, 0, 916,
	133, 0, 772, 0, 0, 775, 0, 0, 110, 1775,
	108, 0, 0, 0, 816, 818, 740, 768, 738, 760,
	0, 760, 0, 987, 0, 1017, 189, 189, 768, 760,
	189, 482, 484, 1541, 1561, 1550, -2, 1981, 1778, 0,
	1561, 1561, 1536, 1537, 0, 794, 840, 841, 0, 836,
	837, 838, 1725, 795, 796, 805, 832, 839, 147, 769,
	0, 0, 770, 0, 0, 113, 0, 115, 0, 815,
	0, 728, 737, 768, 0, 768, 0, 1208, 168, 169,
	798, 768, 170, 1546, 0, 0, 1552, 1553, 1554, 1555,
	1556, 1547, 1548, 787, 842, 0, 843, 0, 0, 0,
	844, 773, 0, 776, 0, 111, 0, 817, 727, 907,
	833, 907, 833, 1014, 799, 0, 1558, 1559, 0, 0,
	845, 0, 848, 849, 0, 846, 824, 0, 0, 763,
	902, 0, 760, 904, 760, 1557, 1560, 1551, 847, 850,
	851, 807, 0, 0, 759, 761, 762, 908, 768, 768,
	768, 0, 907, 907, 774, 0, 903, 905, 0, 0,
	768, 777,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 453, 3, 459, 454, 3,
	464, 465, 457, 455, 469, 456, 466, 458, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 472, 3,
	445, 447, 446, 450, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 462, 3, 463, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 470, 452, 471, 448,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 449, 57788, 451, 57789, 461,
	57790, 467, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1106
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1116
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1117
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1118
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1126
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1135
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1136
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1199
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1225
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1236
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1251
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1255
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1259
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1270
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1282
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1301
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1333
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1341
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1357
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1366
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1377
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1387
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1395
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1419
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1430
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1437
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1449
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1456
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1464
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1469
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1478
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1484
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1492
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1513
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1523
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1532
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1543
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1549
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1575
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1580
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1612
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1700
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns: sqlDollar[7].union.idxElems(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1717
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1735
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1747
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1755
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1770
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1807
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1817
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1850
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1873
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1876
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1890
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1900
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1937
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1946
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1952
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1957
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1962
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1967
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1972
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1976
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1992
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1995
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1999
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2003
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2031
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2043
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2067
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2073
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2087
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2088
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2089
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2090
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2123
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2132
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2140
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2146
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2176
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2189
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2193
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2197
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2210
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2216
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2221
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2233
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2234
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2236
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2237
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2238
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2265
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2268
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2269
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2272
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2273
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2299
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2300
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2301
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2302
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2305
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2306
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2317
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2329
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2333
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2339
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2343
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2352
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2359
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2375
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2386
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2414
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2424
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2434
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2449
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2477
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2485
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2490
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2501
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2502
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2503
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2508
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2509
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2519
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2523
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2541
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2553
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2556
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2617
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2625
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2629
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2636
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2641
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2669
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2673
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2677
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2681
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2685
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2699
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2706
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2707
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2723
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2724
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2727
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2731
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2758
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2766
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2784
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2791
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2799
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2807
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2817
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2825
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2829
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2832
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2860
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2883
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2894
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2903
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2913
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2947
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2958
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2969
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2972
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2976
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2977
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2978
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2979
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2983
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2984
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2985
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3019
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3053
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3069
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3085
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3096
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3099
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3125
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3129
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3151
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3154
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3156
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3159
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3163
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3182
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3189
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3194
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3199
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3204
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3225
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3235
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3246
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3267
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3277
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3281
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3285
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3289
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3293
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3299
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3335
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3359
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3363
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3365
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3368
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3382
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3395
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3413
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3417
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3432
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3455
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3463
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3471
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3492
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3495
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3497
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3500
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3506
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3509
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3520
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3540
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3543
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3554
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3567
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3575
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3583
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3586
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3596
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3599
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3616
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3619
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3624
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3632
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3635
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3637
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3640
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3646
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3662
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3665
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3666
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3672
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3675
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3693
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3702
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3705
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3710
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3712
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3716
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3720
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3728
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3731
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3736
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3744
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3754
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3764
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3767
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3771
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3778
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3796
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3799
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3806
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3818
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3823
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3828
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3832
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3844
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3848
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3861
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3864
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3872
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3875
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3883
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3887
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3895
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3932
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3940
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3946
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3955
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3960
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3964
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3967
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3971
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3978
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3983
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4107
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4111
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4154
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4195
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4207
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4243
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4257
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = nil
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4277
		{

			sqlVAL.union.val = nil
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4283
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4288
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4314
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4326
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4339
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4340
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4341
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4359
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4361
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = true
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = true
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4368
		{
			sqlVAL.union.val = true
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4369
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4399
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4403
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4412
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4419
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4424
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.str = ""
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4469
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4495
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4499
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4505
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4519
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4560
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4582
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4586
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4590
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4594
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4606
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4620
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4624
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 798:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4631
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4653
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4663
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4675
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4680
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4686
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4692
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4703
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4713
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4737
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4747
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4762
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4796
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4812
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4816
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4827
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4828
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4829
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4830
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4831
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4832
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4859
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4863
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4883
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4887
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4891
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4904
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4940
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4944
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4948
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4952
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4966
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4972
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4991
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5000
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5008
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5012
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5019
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5023
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5024
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5034
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5037
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5039
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5041
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5043
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5046
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5047
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5049
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5059
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5062
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5077
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5082
		{
			sqlVAL.union.val = nil
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5092
		{
			sqlVAL.union.val = tree.DNull
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5102
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5109
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5114
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5115
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5123
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5132
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5133
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5136
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5137
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5143
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5145
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5147
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5149
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5151
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5153
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5169
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5183
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5198
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5212
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5226
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5229
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5230
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5234
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5249
		{
			sqlVAL.union.val = false
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = true
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = false
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5278
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5300
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.str = ""
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.Descending
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5319
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[6].union.expr(), IfExists: true}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5336
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5342
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5350
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5356
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5364
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5370
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5378
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5382
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5387
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5388
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5391
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5392
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5400
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5403
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5425
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5433
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5436
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5440
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5441
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5442
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5461
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5466
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5479
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5493
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5495
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5503
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5510
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5513
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5514
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5518
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5530
		{
			sqlVAL.str = ""
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5540
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5560
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5573
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5575
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5579
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5598
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5614
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 986:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5624
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5644
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5648
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5652
		{
			sqlVAL.str = ""
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5662
		{
			sqlVAL.str = ""
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5672
		{
			sqlVAL.str = ""
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5678
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.str = ""
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5687
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5688
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5700
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5714
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5732
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5736
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5745
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5794
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5811
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5812
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5820
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5858
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5861
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5890
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5894
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5962
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5982
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = tree.ForLocked{
				Strength:   sqlDollar[1].union.lockingStrength(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
				Targets:    sqlDollar[2].union.tableNames(),
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5999
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6002
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6003
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6015
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6050
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6051
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6052
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6087
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6113
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6157
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6173
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6194
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6202
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6203
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6211
		{
			sqlVAL.union.val = nil
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6216
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6217
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6221
		{
			sqlVAL.union.val = true
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6225
		{
			sqlVAL.union.val = false
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6229
		{
			sqlVAL.union.val = false
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = true
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6246
		{
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6247
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6261
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6267
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6277
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6298
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6303
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6332
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6341
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6361
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6406
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6407
		{
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6410
		{
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6411
		{
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6442
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6464
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6466
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6481
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6489
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6503
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6513
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6524
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6536
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6555
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6594
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6604
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6639
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6650
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6680
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6707
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6713
		{
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6715
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = nil
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6719
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6720
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6724
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = true
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = false
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.str = tree.AstFull
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6818
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6822
		{
			sqlVAL.str = tree.AstRight
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.str = tree.AstInner
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6832
		{
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6833
		{
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.str = tree.AstHash
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.str = ""
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6889
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6900
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6918
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6924
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6930
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6940
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6969
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6982
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6990
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6991
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7009
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7011
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7019
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = types.String
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = types.Name
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7072
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = types.INet
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = types.Oid
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7121
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7152
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7160
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = nil
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = types.Int2
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = types.Int2
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = types.Int4
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = types.Int
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = types.Int
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = types.Int
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = types.Float4
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = types.Float4
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = types.Float
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = types.Float
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7227
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7235
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7243
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = types.Bool
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = types.Bool
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = types.RegType
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7284
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = types.Float
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7303
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7309
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7317
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7331
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = types.String
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = true
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = false
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = types.Date
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7380
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7388
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7402
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7411
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7419
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7436
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7446
		{
			sqlVAL.union.val = true
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = false
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = false
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = types.Interval
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7460
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7544
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7559
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = nil
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7589
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7649
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7798
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7838
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7846
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7878
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7893
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7959
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7981
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8175
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8180
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8206
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8226
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8254
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8265
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8266
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8281
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8292
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8328
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8404
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8409
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8418
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8427
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8432
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8437
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8442
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8447
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8453
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8456
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8457
		{
			return unimplemented(sqllex, "treat")
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8478
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8483
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8488
		{
			return unimplemented(sqllex, "within group")
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8489
		{
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8504
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8524
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.str = ""
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8613
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8626
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8694
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8699
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8716
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8723
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8735
		{
			sqlVAL.union.val = tree.Any
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = tree.Some
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.union.val = tree.All
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8751
		{
			sqlVAL.union.val = tree.Div
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8754
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8755
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8757
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8758
		{
			sqlVAL.union.val = tree.LT
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = tree.GT
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8761
		{
			sqlVAL.union.val = tree.LE
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = tree.GE
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = tree.NE
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = tree.Like
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8770
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8793
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8797
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8803
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8807
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8822
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8832
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8843
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8849
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8859
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8869
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8873
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8879
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8916
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8924
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8930
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8937
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8941
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8958
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8962
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8966
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8970
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8974
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8980
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8992
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8996
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9000
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9006
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9018
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9025
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9035
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9041
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9045
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9052
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9062
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9069
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9075
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9084
		{
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9085
		{
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9089
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9112
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9134
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9157
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9165
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9188
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9197
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9201
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9205
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9209
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9215
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9227
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9231
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9240
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9251
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9260
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9268
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9280
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9377
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9384
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9388
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9392
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9406
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9410
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9414
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9427
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9445
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9458
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9465
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9490
		{
			sqlVAL.str = ""
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9496
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9500
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
