// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:601
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9845

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1076,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 905,
	199, 905,
	214, 251,
	297, 251,
	306, 738,
	333, 251,
	342, 738,
	381, 738,
	405, 251,
	429, 738,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1076,
	188, 1076,
	415, 1076,
	416, 1076,
	-2, 0,
	-1, 87,
	122, 1050,
	138, 1050,
	196, 1050,
	226, 1050,
	261, 1050,
	271, 1050,
	410, 1050,
	-2, 1028,
	-1, 118,
	128, 661,
	213, 661,
	300, 641,
	351, 641,
	398, 661,
	-2, 0,
	-1, 119,
	4, 1078,
	21, 1078,
	22, 1078,
	23, 1078,
	24, 1078,
	25, 1078,
	27, 1078,
	33, 1078,
	38, 1078,
	39, 1078,
	40, 1078,
	41, 1078,
	42, 1078,
	43, 1078,
	44, 1078,
	45, 1078,
	46, 1078,
	47, 1078,
	48, 1078,
	49, 1078,
	51, 1078,
	52, 1078,
	53, 1078,
	54, 1078,
	55, 1078,
	56, 1078,
	59, 1078,
	60, 1078,
	61, 1078,
	62, 1078,
	64, 1078,
	65, 1078,
	69, 1078,
	70, 1078,
	71, 1078,
	72, 1078,
	73, 1078,
	74, 1078,
	76, 1078,
	77, 1078,
	78, 1078,
	79, 1078,
	81, 1078,
	83, 1078,
	84, 1078,
	85, 1078,
	88, 1078,
	89, 1078,
	97, 1078,
	98, 1078,
	99, 1078,
	100, 1078,
	101, 1078,
	102, 1078,
	103, 1078,
	104, 1078,
	106, 1078,
	108, 1078,
	109, 1078,
	111, 1078,
	114, 1078,
	115, 1078,
	116, 1078,
	118, 1078,
	120, 1078,
	121, 1078,
	123, 1078,
	124, 1078,
	125, 1078,
	126, 1078,
	127, 1078,
	128, 1078,
	129, 1078,
	130, 1078,
	131, 1078,
	132, 1078,
	133, 1078,
	134, 1078,
	135, 1078,
	137, 1078,
	143, 1078,
	144, 1078,
	145, 1078,
	146, 1078,
	147, 1078,
	148, 1078,
	150, 1078,
	152, 1078,
	156, 1078,
	157, 1078,
	159, 1078,
	160, 1078,
	162, 1078,
	163, 1078,
	165, 1078,
	166, 1078,
	167, 1078,
	168, 1078,
	169, 1078,
	170, 1078,
	171, 1078,
	172, 1078,
	174, 1078,
	175, 1078,
	177, 1078,
	178, 1078,
	179, 1078,
	182, 1078,
	183, 1078,
	184, 1078,
	185, 1078,
	188, 1078,
	189, 1078,
	190, 1078,
	191, 1078,
	192, 1078,
	193, 1078,
	194, 1078,
	195, 1078,
	197, 1078,
	199, 1078,
	201, 1078,
	203, 1078,
	204, 1078,
	205, 1078,
	207, 1078,
	208, 1078,
	211, 1078,
	212, 1078,
	213, 1078,
	214, 1078,
	215, 1078,
	217, 1078,
	218, 1078,
	220, 1078,
	221, 1078,
	223, 1078,
	224, 1078,
	227, 1078,
	228, 1078,
	231, 1078,
	232, 1078,
	233, 1078,
	235, 1078,
	236, 1078,
	237, 1078,
	238, 1078,
	239, 1078,
	240, 1078,
	241, 1078,
	242, 1078,
	243, 1078,
	244, 1078,
	246, 1078,
	247, 1078,
	248, 1078,
	250, 1078,
	252, 1078,
	254, 1078,
	256, 1078,
	257, 1078,
	258, 1078,
	259, 1078,
	260, 1078,
	262, 1078,
	263, 1078,
	264, 1078,
	266, 1078,
	267, 1078,
	268, 1078,
	269, 1078,
	272, 1078,
	273, 1078,
	274, 1078,
	276, 1078,
	278, 1078,
	279, 1078,
	280, 1078,
	281, 1078,
	282, 1078,
	283, 1078,
	284, 1078,
	285, 1078,
	286, 1078,
	287, 1078,
	289, 1078,
	290, 1078,
	291, 1078,
	292, 1078,
	293, 1078,
	294, 1078,
	296, 1078,
	298, 1078,
	299, 1078,
	300, 1078,
	301, 1078,
	302, 1078,
	303, 1078,
	304, 1078,
	305, 1078,
	306, 1078,
	307, 1078,
	309, 1078,
	310, 1078,
	311, 1078,
	312, 1078,
	313, 1078,
	315, 1078,
	316, 1078,
	317, 1078,
	318, 1078,
	319, 1078,
	320, 1078,
	321, 1078,
	322, 1078,
	324, 1078,
	326, 1078,
	327, 1078,
	328, 1078,
	329, 1078,
	330, 1078,
	331, 1078,
	333, 1078,
	334, 1078,
	335, 1078,
	336, 1078,
	337, 1078,
	338, 1078,
	339, 1078,
	340, 1078,
	342, 1078,
	343, 1078,
	344, 1078,
	345, 1078,
	346, 1078,
	347, 1078,
	348, 1078,
	349, 1078,
	350, 1078,
	351, 1078,
	353, 1078,
	354, 1078,
	355, 1078,
	356, 1078,
	357, 1078,
	359, 1078,
	360, 1078,
	361, 1078,
	362, 1078,
	363, 1078,
	365, 1078,
	366, 1078,
	367, 1078,
	368, 1078,
	369, 1078,
	370, 1078,
	371, 1078,
	372, 1078,
	373, 1078,
	374, 1078,
	375, 1078,
	376, 1078,
	378, 1078,
	379, 1078,
	380, 1078,
	382, 1078,
	383, 1078,
	384, 1078,
	385, 1078,
	386, 1078,
	387, 1078,
	388, 1078,
	390, 1078,
	391, 1078,
	392, 1078,
	393, 1078,
	394, 1078,
	396, 1078,
	398, 1078,
	399, 1078,
	400, 1078,
	401, 1078,
	402, 1078,
	404, 1078,
	405, 1078,
	406, 1078,
	408, 1078,
	409, 1078,
	412, 1078,
	413, 1078,
	414, 1078,
	415, 1078,
	416, 1078,
	417, 1078,
	419, 1078,
	421, 1078,
	422, 1078,
	423, 1078,
	424, 1078,
	425, 1078,
	426, 1078,
	427, 1078,
	429, 1078,
	430, 1078,
	431, 1078,
	436, 1078,
	437, 1078,
	438, 1078,
	439, 1078,
	440, 1078,
	441, 1078,
	-2, 0,
	-1, 120,
	1, 958,
	203, 958,
	296, 958,
	304, 958,
	444, 958,
	467, 958,
	-2, 0,
	-1, 122,
	1, 958,
	467, 958,
	-2, 0,
	-1, 123,
	1, 958,
	467, 958,
	-2, 0,
	-1, 124,
	1, 962,
	467, 962,
	-2, 0,
	-1, 149,
	122, 1049,
	138, 1049,
	196, 1049,
	226, 1049,
	261, 1049,
	271, 1049,
	410, 1049,
	-2, 1037,
	-1, 182,
	4, 1085,
	5, 1085,
	6, 1085,
	7, 1085,
	8, 1085,
	9, 1085,
	10, 1085,
	21, 1085,
	22, 1085,
	23, 1085,
	24, 1085,
	25, 1085,
	27, 1085,
	33, 1085,
	34, 1085,
	38, 1085,
	39, 1085,
	40, 1085,
	41, 1085,
	42, 1085,
	43, 1085,
	44, 1085,
	45, 1085,
	46, 1085,
	47, 1085,
	48, 1085,
	49, 1085,
	51, 1085,
	52, 1085,
	53, 1085,
	54, 1085,
	55, 1085,
	56, 1085,
	57, 1085,
	58, 1085,
	59, 1085,
	60, 1085,
	61, 1085,
	62, 1085,
	64, 1085,
	65, 1085,
	67, 1085,
	69, 1085,
	70, 1085,
	71, 1085,
	72, 1085,
	73, 1085,
	74, 1085,
	76, 1085,
	77, 1085,
	78, 1085,
	79, 1085,
	81, 1085,
	83, 1085,
	84, 1085,
	85, 1085,
	87, 1085,
	88, 1085,
	89, 1085,
	90, 1085,
	91, 1085,
	92, 1085,
	93, 1085,
	94, 1085,
	95, 1085,
	96, 1085,
	97, 1085,
	98, 1085,
	99, 1085,
	100, 1085,
	101, 1085,
	102, 1085,
	103, 1085,
	104, 1085,
	105, 1085,
	106, 1085,
	108, 1085,
	109, 1085,
	111, 1085,
	114, 1085,
	115, 1085,
	116, 1085,
	118, 1085,
	120, 1085,
	121, 1085,
	123, 1085,
	124, 1085,
	125, 1085,
	126, 1085,
	127, 1085,
	128, 1085,
	129, 1085,
	130, 1085,
	131, 1085,
	132, 1085,
	133, 1085,
	134, 1085,
	135, 1085,
	136, 1085,
	137, 1085,
	143, 1085,
	144, 1085,
	145, 1085,
	146, 1085,
	147, 1085,
	148, 1085,
	150, 1085,
	152, 1085,
	155, 1085,
	156, 1085,
	157, 1085,
	159, 1085,
	160, 1085,
	162, 1085,
	163, 1085,
	165, 1085,
	166, 1085,
	167, 1085,
	168, 1085,
	169, 1085,
	170, 1085,
	171, 1085,
	172, 1085,
	173, 1085,
	174, 1085,
	175, 1085,
	177, 1085,
	178, 1085,
	179, 1085,
	182, 1085,
	183, 1085,
	184, 1085,
	185, 1085,
	187, 1085,
	188, 1085,
	189, 1085,
	190, 1085,
	191, 1085,
	192, 1085,
	193, 1085,
	194, 1085,
	195, 1085,
	197, 1085,
	199, 1085,
	200, 1085,
	201, 1085,
	202, 1085,
	203, 1085,
	204, 1085,
	205, 1085,
	206, 1085,
	207, 1085,
	208, 1085,
	211, 1085,
	212, 1085,
	213, 1085,
	214, 1085,
	215, 1085,
	217, 1085,
	218, 1085,
	220, 1085,
	221, 1085,
	222, 1085,
	223, 1085,
	224, 1085,
	225, 1085,
	227, 1085,
	228, 1085,
	231, 1085,
	232, 1085,
	233, 1085,
	235, 1085,
	236, 1085,
	237, 1085,
	238, 1085,
	239, 1085,
	240, 1085,
	241, 1085,
	242, 1085,
	243, 1085,
	244, 1085,
	245, 1085,
	246, 1085,
	247, 1085,
	248, 1085,
	249, 1085,
	250, 1085,
	251, 1085,
	252, 1085,
	253, 1085,
	254, 1085,
	255, 1085,
	256, 1085,
	257, 1085,
	258, 1085,
	259, 1085,
	260, 1085,
	262, 1085,
	263, 1085,
	264, 1085,
	267, 1085,
	268, 1085,
	269, 1085,
	272, 1085,
	273, 1085,
	274, 1085,
	275, 1085,
	276, 1085,
	277, 1085,
	278, 1085,
	279, 1085,
	280, 1085,
	281, 1085,
	282, 1085,
	283, 1085,
	284, 1085,
	285, 1085,
	286, 1085,
	287, 1085,
	289, 1085,
	290, 1085,
	291, 1085,
	292, 1085,
	293, 1085,
	294, 1085,
	296, 1085,
	298, 1085,
	299, 1085,
	300, 1085,
	301, 1085,
	302, 1085,
	303, 1085,
	304, 1085,
	305, 1085,
	306, 1085,
	307, 1085,
	309, 1085,
	310, 1085,
	311, 1085,
	312, 1085,
	313, 1085,
	315, 1085,
	316, 1085,
	317, 1085,
	318, 1085,
	319, 1085,
	320, 1085,
	321, 1085,
	322, 1085,
	324, 1085,
	325, 1085,
	326, 1085,
	327, 1085,
	328, 1085,
	329, 1085,
	330, 1085,
	331, 1085,
	333, 1085,
	334, 1085,
	335, 1085,
	336, 1085,
	337, 1085,
	338, 1085,
	339, 1085,
	340, 1085,
	342, 1085,
	343, 1085,
	344, 1085,
	345, 1085,
	346, 1085,
	347, 1085,
	348, 1085,
	349, 1085,
	350, 1085,
	351, 1085,
	352, 1085,
	353, 1085,
	354, 1085,
	355, 1085,
	356, 1085,
	357, 1085,
	358, 1085,
	359, 1085,
	360, 1085,
	361, 1085,
	362, 1085,
	363, 1085,
	365, 1085,
	366, 1085,
	367, 1085,
	368, 1085,
	369, 1085,
	370, 1085,
	371, 1085,
	372, 1085,
	373, 1085,
	374, 1085,
	375, 1085,
	376, 1085,
	378, 1085,
	379, 1085,
	380, 1085,
	382, 1085,
	383, 1085,
	384, 1085,
	385, 1085,
	386, 1085,
	387, 1085,
	388, 1085,
	390, 1085,
	391, 1085,
	392, 1085,
	393, 1085,
	394, 1085,
	396, 1085,
	398, 1085,
	399, 1085,
	400, 1085,
	401, 1085,
	402, 1085,
	403, 1085,
	404, 1085,
	405, 1085,
	406, 1085,
	408, 1085,
	409, 1085,
	411, 1085,
	412, 1085,
	413, 1085,
	414, 1085,
	415, 1085,
	416, 1085,
	417, 1085,
	418, 1085,
	419, 1085,
	421, 1085,
	422, 1085,
	423, 1085,
	424, 1085,
	425, 1085,
	426, 1085,
	427, 1085,
	429, 1085,
	430, 1085,
	431, 1085,
	436, 1085,
	437, 1085,
	438, 1085,
	439, 1085,
	440, 1085,
	441, 1085,
	442, 1085,
	448, 1085,
	455, 1085,
	456, 1085,
	457, 1085,
	464, 1085,
	468, 1085,
	-2, 0,
	-1, 561,
	154, 1765,
	395, 1765,
	447, 1765,
	466, 1765,
	-2, 0,
	-1, 562,
	154, 1844,
	395, 1844,
	447, 1844,
	466, 1844,
	-2, 0,
	-1, 563,
	154, 1754,
	395, 1754,
	447, 1754,
	466, 1754,
	-2, 0,
	-1, 565,
	154, 1937,
	395, 1937,
	447, 1937,
	466, 1937,
	-2, 0,
	-1, 567,
	154, 1967,
	395, 1967,
	447, 1967,
	466, 1967,
	-2, 0,
	-1, 574,
	154, 1855,
	395, 1855,
	447, 1855,
	466, 1855,
	-2, 508,
	-1, 591,
	466, 1712,
	469, 1712,
	-2, 712,
	-1, 592,
	466, 1714,
	469, 1714,
	-2, 713,
	-1, 593,
	466, 1713,
	469, 1713,
	-2, 714,
	-1, 594,
	469, 1659,
	-2, 715,
	-1, 637,
	429, 887,
	-2, 739,
	-1, 743,
	300, 642,
	351, 642,
	-2, 0,
	-1, 744,
	300, 641,
	351, 641,
	-2, 589,
	-1, 748,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 749,
	1, 711,
	151, 711,
	463, 711,
	465, 711,
	467, 711,
	-2, 0,
	-1, 757,
	1, 645,
	463, 645,
	465, 645,
	467, 645,
	-2, 0,
	-1, 760,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 761,
	1, 673,
	463, 673,
	465, 673,
	467, 673,
	-2, 0,
	-1, 762,
	1, 676,
	463, 676,
	465, 676,
	467, 676,
	-2, 0,
	-1, 766,
	1, 690,
	463, 690,
	465, 690,
	467, 690,
	-2, 0,
	-1, 767,
	1, 692,
	463, 692,
	465, 692,
	467, 692,
	-2, 0,
	-1, 811,
	138, 1087,
	226, 1087,
	261, 1087,
	-2, 1037,
	-1, 827,
	138, 1086,
	226, 1086,
	261, 1086,
	-2, 1037,
	-1, 851,
	466, 1711,
	-2, 516,
	-1, 880,
	464, 1703,
	-2, 1694,
	-1, 886,
	5, 1226,
	-2, 1745,
	-1, 887,
	5, 1227,
	-2, 1749,
	-1, 888,
	5, 1228,
	-2, 1748,
	-1, 889,
	5, 1229,
	-2, 1964,
	-1, 890,
	5, 1230,
	-2, 1857,
	-1, 891,
	5, 1231,
	-2, 1929,
	-1, 892,
	5, 1232,
	-2, 1931,
	-1, 893,
	5, 1233,
	-2, 1944,
	-1, 894,
	5, 1234,
	-2, 1932,
	-1, 895,
	5, 1235,
	-2, 1933,
	-1, 896,
	5, 1236,
	-2, 1744,
	-1, 897,
	5, 1237,
	-2, 1980,
	-1, 898,
	5, 1238,
	-2, 1818,
	-1, 899,
	5, 1239,
	-2, 1867,
	-1, 900,
	5, 1240,
	-2, 1869,
	-1, 901,
	5, 1241,
	-2, 1822,
	-1, 902,
	5, 1242,
	464, 1721,
	-2, 1712,
	-1, 903,
	5, 1298,
	464, 1298,
	-2, 2015,
	-1, 908,
	464, 1722,
	-2, 1713,
	-1, 910,
	5, 1246,
	-2, 2013,
	-1, 911,
	5, 1247,
	-2, 2014,
	-1, 912,
	5, 1248,
	-2, 1821,
	-1, 913,
	5, 1249,
	-2, 2026,
	-1, 914,
	5, 1250,
	-2, 1823,
	-1, 915,
	5, 1251,
	-2, 1824,
	-1, 916,
	5, 1252,
	-2, 1825,
	-1, 917,
	5, 1253,
	-2, 1995,
	-1, 918,
	5, 1254,
	-2, 2024,
	-1, 919,
	5, 1255,
	-2, 1801,
	-1, 920,
	5, 1256,
	-2, 1802,
	-1, 921,
	5, 1270,
	-2, 2007,
	-1, 923,
	5, 1245,
	-2, 2003,
	-1, 924,
	5, 1245,
	-2, 2002,
	-1, 925,
	5, 1245,
	-2, 2019,
	-1, 926,
	5, 1262,
	-2, 1997,
	-1, 927,
	5, 1263,
	-2, 1746,
	-1, 928,
	5, 1273,
	-2, 1996,
	-1, 929,
	5, 1275,
	-2, 2035,
	-1, 931,
	5, 1286,
	-2, 1775,
	-1, 932,
	5, 1297,
	-2, 2028,
	-1, 933,
	5, 1289,
	-2, 2029,
	-1, 934,
	5, 1297,
	-2, 2030,
	-1, 935,
	5, 1293,
	-2, 2031,
	-1, 936,
	5, 1212,
	-2, 1831,
	-1, 937,
	5, 1213,
	-2, 1832,
	-1, 938,
	466, 1709,
	-2, 1693,
	-1, 939,
	464, 2056,
	-2, 1710,
	-1, 959,
	5, 1281,
	-2, 1955,
	-1, 977,
	5, 1280,
	-2, 2036,
	-1, 987,
	5, 1282,
	430, 1282,
	-2, 1998,
	-1, 988,
	5, 1283,
	430, 1283,
	-2, 1999,
	-1, 1025,
	464, 1721,
	-2, 1712,
	-1, 1053,
	154, 1967,
	395, 1967,
	447, 1967,
	466, 1967,
	-2, 0,
	-1, 1056,
	1, 494,
	467, 494,
	-2, 970,
	-1, 1176,
	315, 1690,
	457, 1690,
	-2, 1689,
	-1, 1199,
	468, 1690,
	-2, 1691,
	-1, 1234,
	306, 738,
	429, 738,
	-2, 250,
	-1, 1254,
	285, 1074,
	-2, 878,
	-1, 1263,
	265, 1716,
	-2, 0,
	-1, 1329,
	1, 369,
	463, 369,
	465, 369,
	467, 369,
	-2, 1048,
	-1, 1332,
	4, 2034,
	11, 2034,
	12, 2034,
	14, 2034,
	15, 2034,
	16, 2034,
	17, 2034,
	18, 2034,
	19, 2034,
	21, 2034,
	22, 2034,
	23, 2034,
	24, 2034,
	25, 2034,
	27, 2034,
	30, 2034,
	31, 2034,
	33, 2034,
	35, 2034,
	38, 2034,
	39, 2034,
	40, 2034,
	41, 2034,
	42, 2034,
	43, 2034,
	44, 2034,
	45, 2034,
	46, 2034,
	47, 2034,
	48, 2034,
	49, 2034,
	51, 2034,
	52, 2034,
	53, 2034,
	54, 2034,
	55, 2034,
	56, 2034,
	59, 2034,
	60, 2034,
	61, 2034,
	62, 2034,
	64, 2034,
	65, 2034,
	66, 2034,
	69, 2034,
	70, 2034,
	71, 2034,
	72, 2034,
	73, 2034,
	74, 2034,
	75, 2034,
	76, 2034,
	77, 2034,
	78, 2034,
	79, 2034,
	81, 2034,
	82, 2034,
	83, 2034,
	84, 2034,
	85, 2034,
	87, 2034,
	88, 2034,
	89, 2034,
	97, 2034,
	98, 2034,
	99, 2034,
	100, 2034,
	101, 2034,
	102, 2034,
	103, 2034,
	104, 2034,
	106, 2034,
	108, 2034,
	109, 2034,
	111, 2034,
	114, 2034,
	115, 2034,
	116, 2034,
	118, 2034,
	120, 2034,
	121, 2034,
	123, 2034,
	124, 2034,
	125, 2034,
	126, 2034,
	127, 2034,
	128, 2034,
	129, 2034,
	130, 2034,
	131, 2034,
	132, 2034,
	133, 2034,
	134, 2034,
	135, 2034,
	139, 2034,
	140, 2034,
	141, 2034,
	142, 2034,
	143, 2034,
	144, 2034,
	145, 2034,
	146, 2034,
	147, 2034,
	148, 2034,
	149, 2034,
	150, 2034,
	152, 2034,
	155, 2034,
	156, 2034,
	157, 2034,
	159, 2034,
	160, 2034,
	162, 2034,
	163, 2034,
	165, 2034,
	166, 2034,
	167, 2034,
	168, 2034,
	169, 2034,
	170, 2034,
	171, 2034,
	172, 2034,
	173, 2034,
	174, 2034,
	175, 2034,
	176, 2034,
	177, 2034,
	178, 2034,
	179, 2034,
	180, 2034,
	181, 2034,
	183, 2034,
	184, 2034,
	185, 2034,
	187, 2034,
	188, 2034,
	189, 2034,
	190, 2034,
	191, 2034,
	192, 2034,
	193, 2034,
	194, 2034,
	195, 2034,
	197, 2034,
	199, 2034,
	200, 2034,
	201, 2034,
	202, 2034,
	203, 2034,
	204, 2034,
	205, 2034,
	206, 2034,
	207, 2034,
	208, 2034,
	209, 2034,
	210, 2034,
	211, 2034,
	212, 2034,
	213, 2034,
	214, 2034,
	215, 2034,
	217, 2034,
	218, 2034,
	220, 2034,
	221, 2034,
	222, 2034,
	223, 2034,
	224, 2034,
	225, 2034,
	227, 2034,
	228, 2034,
	231, 2034,
	232, 2034,
	233, 2034,
	234, 2034,
	235, 2034,
	236, 2034,
	237, 2034,
	238, 2034,
	239, 2034,
	240, 2034,
	241, 2034,
	242, 2034,
	243, 2034,
	244, 2034,
	245, 2034,
	246, 2034,
	247, 2034,
	248, 2034,
	250, 2034,
	253, 2034,
	254, 2034,
	256, 2034,
	257, 2034,
	258, 2034,
	259, 2034,
	260, 2034,
	262, 2034,
	263, 2034,
	264, 2034,
	267, 2034,
	268, 2034,
	269, 2034,
	270, 2034,
	272, 2034,
	273, 2034,
	274, 2034,
	276, 2034,
	278, 2034,
	279, 2034,
	280, 2034,
	281, 2034,
	282, 2034,
	283, 2034,
	284, 2034,
	285, 2034,
	286, 2034,
	287, 2034,
	289, 2034,
	290, 2034,
	291, 2034,
	292, 2034,
	293, 2034,
	294, 2034,
	296, 2034,
	298, 2034,
	299, 2034,
	300, 2034,
	301, 2034,
	302, 2034,
	303, 2034,
	304, 2034,
	305, 2034,
	306, 2034,
	307, 2034,
	309, 2034,
	310, 2034,
	311, 2034,
	312, 2034,
	313, 2034,
	314, 2034,
	315, 2034,
	316, 2034,
	317, 2034,
	318, 2034,
	319, 2034,
	320, 2034,
	321, 2034,
	322, 2034,
	324, 2034,
	325, 2034,
	326, 2034,
	327, 2034,
	328, 2034,
	329, 2034,
	330, 2034,
	331, 2034,
	332, 2034,
	333, 2034,
	334, 2034,
	335, 2034,
	336, 2034,
	337, 2034,
	338, 2034,
	339, 2034,
	340, 2034,
	342, 2034,
	343, 2034,
	344, 2034,
	345, 2034,
	346, 2034,
	347, 2034,
	348, 2034,
	349, 2034,
	350, 2034,
	351, 2034,
	353, 2034,
	354, 2034,
	355, 2034,
	356, 2034,
	357, 2034,
	358, 2034,
	359, 2034,
	360, 2034,
	361, 2034,
	362, 2034,
	363, 2034,
	365, 2034,
	366, 2034,
	367, 2034,
	368, 2034,
	369, 2034,
	370, 2034,
	371, 2034,
	372, 2034,
	373, 2034,
	374, 2034,
	375, 2034,
	376, 2034,
	378, 2034,
	379, 2034,
	380, 2034,
	382, 2034,
	383, 2034,
	384, 2034,
	385, 2034,
	386, 2034,
	387, 2034,
	388, 2034,
	390, 2034,
	391, 2034,
	392, 2034,
	393, 2034,
	394, 2034,
	396, 2034,
	398, 2034,
	399, 2034,
	400, 2034,
	401, 2034,
	402, 2034,
	404, 2034,
	405, 2034,
	406, 2034,
	408, 2034,
	409, 2034,
	412, 2034,
	413, 2034,
	414, 2034,
	415, 2034,
	416, 2034,
	417, 2034,
	419, 2034,
	421, 2034,
	422, 2034,
	423, 2034,
	424, 2034,
	425, 2034,
	426, 2034,
	427, 2034,
	429, 2034,
	430, 2034,
	431, 2034,
	436, 2034,
	437, 2034,
	438, 2034,
	439, 2034,
	440, 2034,
	441, 2034,
	442, 2034,
	443, 2034,
	445, 2034,
	446, 2034,
	447, 2034,
	448, 2034,
	449, 2034,
	450, 2034,
	452, 2034,
	453, 2034,
	454, 2034,
	455, 2034,
	456, 2034,
	457, 2034,
	458, 2034,
	459, 2034,
	460, 2034,
	462, 2034,
	465, 2034,
	466, 2034,
	468, 2034,
	469, 2034,
	-2, 0,
	-1, 1337,
	154, 1937,
	395, 1937,
	447, 1937,
	466, 1937,
	-2, 0,
	-1, 1367,
	300, 642,
	351, 642,
	-2, 0,
	-1, 1391,
	1, 637,
	463, 637,
	465, 637,
	467, 637,
	-2, 0,
	-1, 1392,
	1, 662,
	463, 662,
	465, 662,
	467, 662,
	-2, 0,
	-1, 1393,
	1, 644,
	463, 644,
	465, 644,
	467, 644,
	-2, 0,
	-1, 1395,
	1, 648,
	463, 648,
	465, 648,
	467, 648,
	-2, 0,
	-1, 1420,
	1, 1987,
	463, 1987,
	465, 1987,
	466, 1987,
	467, 1987,
	-2, 688,
	-1, 1421,
	1, 1934,
	463, 1934,
	465, 1934,
	466, 1934,
	467, 1934,
	-2, 689,
	-1, 1436,
	1, 965,
	467, 965,
	-2, 970,
	-1, 1441,
	138, 1086,
	226, 1086,
	261, 1086,
	-2, 1037,
	-1, 1539,
	122, 1050,
	138, 1050,
	196, 1050,
	226, 1050,
	261, 1050,
	271, 1050,
	410, 1050,
	-2, 1454,
	-1, 1592,
	465, 1593,
	-2, 0,
	-1, 1626,
	122, 1050,
	138, 1050,
	196, 1050,
	226, 1050,
	261, 1050,
	271, 1050,
	410, 1050,
	-2, 1162,
	-1, 1685,
	464, 1285,
	-2, 1273,
	-1, 1729,
	1, 496,
	467, 496,
	-2, 970,
	-1, 1929,
	1, 639,
	463, 639,
	465, 639,
	467, 639,
	-2, 0,
	-1, 1930,
	1, 664,
	463, 664,
	465, 664,
	467, 664,
	-2, 0,
	-1, 2022,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1334,
	-1, 2023,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1335,
	-1, 2024,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1336,
	-1, 2025,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1337,
	-1, 2026,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1338,
	-1, 2027,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1339,
	-1, 2028,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1340,
	-1, 2029,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1341,
	-1, 2041,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1353,
	-1, 2042,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1354,
	-1, 2043,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1355,
	-1, 2046,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1360,
	-1, 2052,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1364,
	-1, 2054,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1372,
	-1, 2055,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1373,
	-1, 2056,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1374,
	-1, 2057,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1375,
	-1, 2152,
	5, 1242,
	154, 1604,
	464, 1721,
	-2, 1712,
	-1, 2153,
	154, 1605,
	-2, 1991,
	-1, 2154,
	154, 1606,
	-2, 1854,
	-1, 2155,
	154, 1607,
	-2, 1776,
	-1, 2156,
	154, 1608,
	-2, 1812,
	-1, 2157,
	154, 1609,
	-2, 1852,
	-1, 2158,
	154, 1610,
	-2, 1928,
	-1, 2159,
	154, 1611,
	-2, 1437,
	-1, 2228,
	1, 1163,
	2, 1163,
	87, 1163,
	122, 1163,
	138, 1163,
	151, 1163,
	155, 1163,
	161, 1163,
	164, 1163,
	187, 1163,
	196, 1163,
	206, 1163,
	222, 1163,
	226, 1163,
	245, 1163,
	261, 1163,
	265, 1163,
	271, 1163,
	323, 1163,
	325, 1163,
	410, 1163,
	420, 1163,
	433, 1163,
	434, 1163,
	435, 1163,
	444, 1163,
	463, 1163,
	465, 1163,
	467, 1163,
	469, 1163,
	-2, 1162,
	-1, 2241,
	464, 1695,
	-2, 1707,
	-1, 2263,
	464, 1284,
	-2, 1274,
	-1, 2509,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1362,
	-1, 2510,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1366,
	-1, 2516,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1368,
	-1, 2701,
	203, 970,
	296, 970,
	304, 970,
	444, 970,
	-2, 493,
	-1, 2795,
	285, 1074,
	-2, 878,
	-1, 2884,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1370,
	-1, 2891,
	200, 0,
	202, 0,
	253, 0,
	-2, 1389,
	-1, 2954,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1418,
	-1, 2955,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1419,
	-1, 2956,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1420,
	-1, 2960,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1424,
	-1, 2961,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1425,
	-1, 2962,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1426,
	-1, 3006,
	464, 1696,
	-2, 1708,
	-1, 3095,
	466, 2138,
	-2, 1014,
	-1, 3146,
	200, 0,
	202, 0,
	253, 0,
	-2, 1390,
	-1, 3149,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1393,
	-1, 3150,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1395,
	-1, 3311,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1394,
	-1, 3312,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1396,
	-1, 3322,
	200, 0,
	-2, 1427,
	-1, 3431,
	200, 0,
	-2, 1428,
	-1, 3548,
	43, 0,
	173, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1994,
}

const sqlPrivate = 57344

const sqlLast = 78775

var sqlAct = [...]int{

	908, 3351, 3252, 3547, 3642, 3380, 3354, 3557, 2633, 3632,
	2184, 3526, 3517, 2782, 3514, 3501, 3128, 3558, 3595, 3340,
	3387, 3559, 2403, 3546, 2922, 2634, 3435, 3276, 837, 1026,
	2009, 3300, 3087, 3082, 3392, 2811, 3207, 2069, 3069, 214,
	1062, 214, 214, 865, 214, 214, 214, 214, 214, 1660,
	1180, 214, 930, 2876, 1454, 2804, 2778, 3281, 2292, 593,
	2806, 3027, 3326, 1321, 1777, 2375, 1081, 2392, 1905, 3026,
	572, 1205, 2367, 2438, 1860, 2656, 2446, 214, 2378, 1632,
	1173, 593, 1018, 2676, 2502, 2436, 2648, 2351, 2718, 880,
	2435, 828, 3180, 2427, 1863, 3127, 2619, 2429, 2404, 1375,
	2637, 1853, 1852, 2294, 2537, 2221, 1547, 2218, 2977, 2618,
	2006, 1565, 1601, 2082, 2120, 3436, 1317, 1786, 1661, 2002,
	2352, 2498, 836, 142, 1192, 2445, 2100, 691, 1189, 86,
	1811, 2376, 1815, 904, 2220, 1436, 1804, 206, 1883, 1764,
	4, 2639, 1069, 1762, 2202, 3381, 2112, 1602, 2066, 2328,
	824, 2780, 1844, 1182, 1009, 1330, 863, 1304, 1314, 1252,
	2397, 2439, 2223, 540, 1012, 2094, 594, 208, 207, 1058,
	1621, 2327, 595, 2681, 1611, 991, 2181, 214, 214, 2083,
	2210, 2148, 1528, 1455, 149, 1453, 589, 2284, 556, 150,
	1843, 566, 1278, 32, 1869, 666, 2192, 637, 142, 1328,
	1202, 1008, 1618, 526, 1776, 543, 1560, 548, 864, 551,
	37, 36, 34, 1014, 25, 23, 685, 21, 1435, 1459,
	738, 755, 989, 1260, 2533, 2635, 598, 601, 2991, 1906,
	2992, 2821, 3672, 832, 1885, 1885, 2201, 1885, 1066, 3663,
	3662, 3641, 3624, 2201, 2201, 1820, 3221, 3622, 598, 601,
	3581, 3221, 3579, 3577, 3582, 827, 2201, 2201, 3574, 2699,
	3571, 2820, 3575, 2451, 3572, 3568, 3544, 701, 3543, 1820,
	1820, 3542, 1820, 3539, 1024, 1897, 3538, 1897, 1394, 3496,
	1897, 833, 3490, 2256, 3489, 3484, 2201, 3483, 2201, 3221,
	832, 3221, 3477, 2347, 686, 3471, 1820, 1538, 3469, 3221,
	3433, 3414, 3221, 3411, 2256, 1820, 3370, 3221, 3369, 3361,
	1820, 3360, 1820, 1820, 3332, 3221, 2552, 2194, 1820, 57,
	689, 688, 2553, 2201, 3313, 3298, 1006, 812, 2256, 1897,
	3289, 3249, 811, 58, 2834, 2201, 1066, 3239, 3220, 992,
	992, 2201, 3221, 1038, 3148, 3103, 1043, 62, 2256, 2850,
	841, 3097, 3067, 3001, 3497, 2850, 3068, 3002, 1223, 2999,
	2984, 2981, 2915, 3000, 2201, 2252, 1820, 2903, 2849, 819,
	2841, 2201, 2850, 2773, 2842, 2632, 2630, 1897, 68, 2201,
	2201, 2629, 2583, 2565, 2554, 2201, 2201, 2566, 2201, 2425,
	2424, 1217, 2269, 1901, 1901, 2400, 2201, 2255, 3417, 1820,
	993, 2256, 1467, 1468, 1897, 2250, 2243, 2200, 74, 2201,
	1820, 2201, 1900, 995, 182, 996, 1901, 1039, 85, 2981,
	75, 182, 1498, 75, 82, 2193, 3240, 1820, 2842, 1470,
	2342, 2201, 1781, 2283, 1735, 2834, 2373, 2501, 1884, 1467,
	1468, 1819, 1500, 1501, 1502, 1510, 1511, 1512, 2281, 1597,
	1201, 3054, 2879, 2859, 184, 1619, 1814, 1469, 1377, 1498,
	2822, 184, 2237, 2236, 2235, 2234, 1470, 76, 2233, 182,
	997, 1516, 994, 818, 817, 816, 1211, 2591, 2592, 2823,
	2609, 2610, 2611, 815, 814, 1755, 1538, 810, 2536, 2478,
	2139, 809, 808, 807, 1469, 806, 3144, 2314, 183, 1886,
	1886, 805, 1886, 1489, 804, 183, 803, 802, 176, 184,
	1486, 801, 800, 799, 798, 176, 177, 736, 735, 734,
	733, 732, 835, 177, 731, 1222, 730, 729, 728, 727,
	726, 214, 725, 724, 723, 722, 721, 151, 720, 719,
	1475, 2606, 718, 717, 151, 716, 2820, 3420, 715, 714,
	713, 2591, 2592, 183, 712, 711, 710, 700, 1216, 214,
	699, 2591, 2592, 657, 656, 614, 214, 1492, 1493, 1494,
	1495, 1497, 1499, 613, 1039, 612, 604, 1475, 77, 603,
	602, 579, 214, 1084, 214, 214, 1185, 214, 1084, 214,
	578, 577, 151, 576, 560, 2385, 204, 214, 214, 1068,
	203, 1507, 202, 1073, 1517, 201, 200, 199, 1497, 1499,
	198, 148, 80, 197, 81, 2597, 196, 182, 182, 195,
	2097, 194, 214, 193, 192, 1490, 191, 190, 189, 188,
	182, 182, 2193, 182, 187, 186, 214, 1484, 1485, 1185,
	1185, 214, 214, 185, 214, 690, 118, 1893, 1884, 118,
	1977, 3196, 3159, 1505, 2995, 2851, 214, 184, 184, 2679,
	2559, 1039, 1490, 2548, 214, 2357, 2612, 2244, 2227, 1760,
	184, 184, 2137, 184, 2132, 1645, 1622, 2130, 214, 214,
	214, 214, 214, 1185, 1185, 1554, 2098, 1549, 1185, 2597,
	1082, 214, 1185, 214, 214, 1193, 119, 182, 1466, 2597,
	2607, 183, 183, 1056, 1568, 1195, 1207, 214, 1396, 152,
	1567, 176, 176, 1075, 183, 183, 1028, 183, 3564, 177,
	177, 3545, 1176, 1491, 176, 176, 1199, 176, 1467, 1468,
	182, 1571, 177, 177, 3465, 177, 1077, 184, 1170, 1175,
	151, 151, 1496, 1185, 1568, 3426, 3418, 1325, 1908, 3290,
	1567, 3200, 3350, 151, 2399, 1470, 687, 1051, 2099, 2096,
	1491, 3179, 3285, 1204, 598, 601, 214, 3178, 3166, 1203,
	184, 1566, 1265, 3165, 2607, 3164, 3163, 2386, 1261, 1261,
	214, 183, 3157, 1469, 3156, 3155, 1508, 3066, 3015, 3014,
	3012, 176, 3005, 2591, 2592, 214, 2974, 2973, 2608, 177,
	2972, 1210, 2899, 1215, 2895, 1221, 2845, 2674, 2626, 2617,
	1318, 142, 142, 2590, 183, 182, 1907, 833, 1199, 1550,
	151, 1548, 3052, 2587, 176, 2586, 2584, 2572, 2571, 1333,
	1335, 2570, 177, 2567, 1347, 2564, 1308, 1311, 2542, 2541,
	2534, 1331, 1467, 1468, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 2426, 151, 1549, 184, 1005, 1281, 2101, 2228,
	1404, 182, 1498, 2591, 2592, 1262, 1475, 2105, 1466, 1470,
	1506, 1857, 2608, 1481, 1482, 1488, 1509, 1487, 1483, 1825,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1465,
	3670, 1343, 1823, 3640, 1536, 3639, 3580, 1469, 1346, 183,
	1027, 184, 2924, 1442, 3534, 3532, 1489, 3462, 3459, 176,
	3456, 2603, 2604, 2605, 3455, 3454, 1441, 177, 2602, 2600,
	2601, 2593, 2594, 2595, 2596, 2598, 2599, 3450, 3444, 3415,
	2693, 2597, 1756, 2329, 1434, 3410, 3409, 2072, 151, 2384,
	3346, 2497, 3437, 2671, 3324, 183, 3308, 3307, 1467, 1468,
	1537, 1395, 3268, 2138, 3295, 176, 3294, 3274, 2095, 3271,
	1352, 3284, 1440, 177, 3265, 3195, 1368, 3177, 1498, 3117,
	1492, 1493, 1494, 1495, 3114, 1470, 3043, 3042, 1452, 3030,
	1475, 3029, 2261, 1439, 151, 3421, 2987, 2890, 2078, 2852,
	2835, 214, 2602, 2600, 2601, 2593, 2594, 2595, 2596, 2598,
	2599, 2597, 833, 1469, 1437, 2593, 2594, 2595, 2596, 2598,
	2599, 1497, 1499, 2798, 3197, 1608, 2607, 2767, 214, 2744,
	2721, 812, 1599, 2720, 2695, 2631, 811, 2563, 214, 1084,
	214, 214, 214, 214, 2562, 2547, 2525, 2366, 593, 214,
	214, 1443, 1572, 593, 214, 1655, 1570, 1467, 1468, 214,
	1462, 1463, 1569, 1561, 1558, 1185, 2265, 2264, 2239, 2591,
	2592, 1727, 2609, 2610, 2611, 1490, 2232, 2199, 2128, 1532,
	1644, 1600, 1596, 1595, 1470, 1594, 1084, 1593, 2591, 2592,
	1592, 1591, 1590, 1589, 1588, 1666, 1475, 1586, 2721, 1585,
	1584, 1583, 1582, 1581, 1687, 1580, 1579, 1578, 1758, 1647,
	1577, 1024, 1469, 1024, 1576, 1732, 1575, 1574, 1551, 1533,
	1657, 1751, 1605, 1606, 2608, 1724, 1531, 1497, 1499, 1726,
	1526, 1652, 1050, 2606, 1041, 1034, 1909, 1467, 1468, 3152,
	3011, 1562, 1563, 1755, 2998, 2136, 1648, 2131, 142, 2990,
	2129, 2551, 2230, 833, 907, 1496, 3335, 3199, 3010, 1653,
	1550, 2258, 2691, 992, 1470, 1629, 1529, 3242, 1649, 2591,
	2592, 1640, 1755, 1491, 1367, 1651, 1072, 1070, 3457, 2807,
	1199, 1490, 1471, 1472, 1473, 1474, 1476, 1477, 1627, 3288,
	3241, 2993, 1469, 1761, 3419, 1630, 2837, 2836, 1568, 1729,
	1066, 3075, 2097, 1432, 1567, 3393, 1622, 2597, 1663, 2569,
	1066, 1185, 214, 1755, 2568, 598, 601, 2507, 1084, 1636,
	598, 601, 1620, 1598, 3349, 2316, 2597, 1754, 1071, 1581,
	1067, 1063, 3041, 1770, 1656, 1624, 1639, 1638, 1637, 1723,
	1635, 1634, 1581, 1633, 1556, 2600, 2601, 2593, 2594, 2595,
	2596, 2598, 2599, 1066, 1376, 1658, 2331, 214, 906, 2591,
	2592, 214, 214, 1741, 1801, 796, 1906, 1803, 2098, 2784,
	1808, 2783, 3388, 1377, 214, 1475, 3327, 1405, 1854, 1491,
	3058, 3643, 3045, 214, 2857, 214, 1747, 214, 2761, 1799,
	2747, 214, 2607, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 2635, 2926, 797, 214, 2591, 2592, 2557, 3565,
	1858, 2607, 2113, 2263, 1587, 1785, 1781, 1564, 2776, 2595,
	2596, 2598, 2599, 2606, 1064, 1821, 1746, 1745, 1004, 1851,
	1755, 1752, 1065, 1238, 3576, 3573, 2816, 1730, 777, 1021,
	2099, 2096, 1847, 3022, 1356, 1185, 3511, 1185, 214, 1185,
	3083, 1812, 214, 3036, 2433, 1185, 2396, 1451, 1185, 214,
	3611, 214, 214, 1535, 3476, 3610, 3566, 2494, 652, 3231,
	1226, 1185, 1185, 1185, 1057, 214, 2703, 1866, 1204, 598,
	601, 1402, 214, 2270, 1203, 3667, 3379, 1236, 3372, 3060,
	2608, 593, 214, 1449, 214, 2692, 214, 2597, 214, 1850,
	214, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 3056, 2608,
	1807, 2296, 1818, 1963, 214, 3055, 3019, 214, 1072, 214,
	790, 792, 3018, 788, 2546, 786, 783, 1749, 214, 1403,
	1961, 2545, 2544, 2543, 2511, 2349, 1742, 2341, 2338, 2319,
	2101, 1835, 1834, 1020, 2597, 1925, 2251, 653, 2053, 214,
	1438, 1200, 2705, 1874, 847, 214, 2124, 1888, 214, 1237,
	1890, 2287, 2123, 1892, 2011, 1833, 1401, 1895, 2393, 1271,
	1071, 1270, 1066, 2285, 833, 1868, 833, 2858, 1975, 1911,
	1084, 1872, 2607, 1920, 1281, 1246, 1871, 1913, 1871, 1916,
	1269, 1349, 1268, 1354, 1876, 1877, 780, 2167, 1331, 2277,
	1331, 2299, 1450, 2603, 2604, 2605, 1477, 1292, 1232, 2068,
	2602, 2600, 2601, 2593, 2594, 2595, 2596, 2598, 2599, 1688,
	1990, 1666, 1666, 3306, 2242, 1981, 2318, 3475, 2307, 2607,
	1687, 1687, 2593, 2594, 2595, 2596, 2598, 2599, 1063, 1051,
	2095, 2068, 862, 2064, 1902, 2287, 1903, 1971, 1987, 1915,
	1750, 1369, 3536, 2084, 2085, 3356, 3627, 2285, 598, 601,
	2306, 1448, 1974, 3227, 2481, 1084, 1933, 2062, 2522, 1873,
	2335, 2084, 2110, 1778, 1072, 1063, 2864, 1943, 1445, 1984,
	2608, 1936, 1976, 1473, 1474, 1476, 1477, 2010, 1350, 2259,
	1756, 2329, 2520, 2863, 2475, 2076, 2007, 2008, 1929, 2746,
	2101, 2074, 1979, 1774, 708, 2249, 3494, 2147, 214, 2151,
	2151, 2165, 3647, 2084, 1988, 1985, 2185, 2187, 2599, 1756,
	2329, 2191, 3243, 2113, 1779, 1780, 1071, 2608, 3628, 3562,
	1084, 1064, 214, 3600, 1663, 1663, 1765, 1978, 1980, 1065,
	1766, 214, 1431, 2298, 831, 1973, 1031, 2484, 1989, 1930,
	1928, 1400, 1775, 214, 812, 1049, 1084, 812, 812, 1998,
	1756, 2329, 1999, 2000, 1937, 2240, 3610, 2109, 1064, 538,
	1391, 833, 2114, 2058, 655, 654, 1065, 1029, 3032, 1765,
	1253, 3133, 2059, 1766, 833, 1983, 2060, 1377, 833, 580,
	2065, 2122, 648, 533, 647, 1640, 2126, 2127, 2517, 3132,
	2602, 2600, 2601, 2593, 2594, 2595, 2596, 2598, 2599, 3225,
	1377, 2518, 1024, 2702, 3630, 2523, 1251, 2215, 830, 2813,
	2080, 1392, 3305, 1234, 3451, 2317, 1253, 1022, 1024, 1767,
	2499, 2500, 2758, 2704, 3657, 1885, 214, 1772, 1365, 2909,
	2107, 2752, 1769, 2734, 1185, 3492, 1970, 2050, 2483, 2601,
	2593, 2594, 2595, 2596, 2598, 2599, 3563, 2814, 1781, 2297,
	1032, 1765, 1355, 2241, 2207, 1766, 2206, 2480, 833, 2770,
	992, 1084, 1767, 684, 3493, 2229, 214, 1756, 1753, 1066,
	1629, 2160, 2176, 2189, 214, 1769, 586, 2733, 3044, 1415,
	1291, 1231, 142, 832, 1732, 214, 1798, 1771, 2208, 2214,
	1783, 2219, 1787, 1627, 2225, 2226, 2212, 2213, 214, 1962,
	2253, 1185, 2197, 2198, 794, 2813, 1066, 784, 793, 1997,
	784, 1791, 785, 784, 214, 1084, 1960, 1559, 1185, 831,
	214, 214, 3226, 3561, 2061, 1781, 2689, 1570, 3057, 2101,
	1771, 1666, 2260, 2063, 1972, 3357, 2482, 3617, 2381, 2513,
	1687, 2906, 2339, 214, 1767, 3261, 214, 3629, 826, 2519,
	2736, 2288, 214, 1935, 1788, 1772, 2353, 1769, 2521, 588,
	1351, 772, 2286, 3218, 3129, 781, 214, 2048, 2282, 2268,
	2051, 2067, 3318, 709, 214, 2738, 214, 3635, 2336, 214,
	3599, 2354, 605, 823, 1525, 214, 1772, 3522, 214, 2267,
	214, 3215, 214, 830, 214, 214, 3461, 214, 1185, 1185,
	1185, 2561, 1185, 2321, 2271, 3033, 2322, 214, 214, 1932,
	214, 214, 1771, 2907, 2370, 1562, 1563, 2211, 2740, 2047,
	1444, 214, 829, 2075, 2104, 2737, 3648, 2291, 2309, 1772,
	2350, 2224, 2407, 3216, 1792, 1176, 214, 214, 214, 2320,
	2390, 214, 2168, 214, 1663, 832, 214, 534, 214, 1030,
	214, 1199, 2337, 2450, 2300, 2303, 773, 2353, 3267, 2353,
	582, 2708, 2420, 2421, 2330, 2332, 2333, 2334, 832, 2447,
	2313, 214, 214, 214, 214, 214, 214, 3007, 214, 587,
	1412, 2449, 3123, 2452, 2453, 1802, 1204, 598, 601, 3658,
	1886, 1610, 2355, 1927, 2364, 1793, 1794, 1048, 2374, 1044,
	535, 2346, 1610, 3262, 1789, 3134, 214, 1379, 3560, 3609,
	2416, 1772, 2465, 2101, 2466, 2287, 3607, 3398, 2359, 584,
	2361, 3071, 3598, 142, 3273, 2418, 1768, 2301, 3302, 2802,
	1772, 1199, 1199, 2402, 2460, 2432, 1790, 2454, 2409, 2455,
	536, 2422, 537, 1763, 2467, 2413, 2469, 2414, 2471, 2415,
	2388, 1842, 2049, 2417, 2463, 1331, 1607, 2423, 581, 1614,
	2273, 2434, 1810, 2398, 2479, 2462, 2398, 1042, 3633, 1768,
	1614, 1037, 2275, 1413, 2468, 1199, 2470, 525, 2472, 3211,
	1364, 1366, 1809, 3212, 606, 607, 2963, 1458, 2486, 2514,
	2488, 1617, 3130, 1782, 1457, 585, 3175, 1743, 1447, 2539,
	2540, 774, 1617, 2489, 2276, 214, 583, 829, 1614, 1199,
	1612, 1199, 1805, 2877, 2549, 3652, 3363, 3362, 2682, 2274,
	3344, 1612, 3230, 3214, 1795, 3441, 1615, 3021, 2803, 3229,
	3301, 2492, 2491, 1779, 1780, 2716, 3217, 1615, 1740, 1353,
	1617, 772, 3634, 2496, 2712, 2389, 1414, 2377, 2368, 1613,
	2473, 1768, 1867, 1856, 1855, 2905, 1021, 1829, 1021, 2209,
	1613, 1806, 1994, 823, 3463, 3502, 1525, 2493, 1457, 2650,
	1967, 3136, 3277, 2323, 3636, 1615, 2550, 2535, 1736, 2203,
	609, 608, 1456, 3088, 2365, 1294, 3386, 3384, 1796, 3345,
	2726, 2723, 2722, 212, 2628, 2658, 1084, 2505, 1986, 2512,
	1921, 2989, 833, 2647, 2646, 1738, 2642, 2643, 1393, 775,
	2644, 2248, 705, 2247, 1277, 214, 2246, 1458, 2245, 2372,
	214, 1263, 1739, 214, 698, 2964, 214, 214, 1084, 1616,
	610, 611, 214, 2965, 1275, 3303, 773, 830, 1264, 3213,
	1616, 3137, 2302, 3176, 3446, 1084, 2205, 707, 776, 3352,
	3253, 2204, 214, 2664, 3232, 2846, 1456, 1865, 2556, 2772,
	1020, 3614, 1020, 1995, 3382, 3651, 3342, 214, 3505, 2659,
	1380, 3181, 2978, 2118, 3616, 3228, 1429, 3578, 1616, 1427,
	1409, 3447, 3458, 2621, 1024, 214, 214, 214, 3323, 3174,
	3062, 214, 1407, 2620, 214, 1390, 2654, 2700, 3343, 1024,
	1666, 214, 214, 2641, 214, 214, 214, 2889, 2855, 1687,
	2706, 2657, 2673, 3464, 2324, 2325, 2585, 1541, 214, 214,
	214, 1546, 2677, 2687, 2649, 1388, 1386, 214, 3353, 1024,
	2524, 2661, 2678, 2369, 3506, 2667, 1666, 2670, 2698, 214,
	1185, 2636, 214, 2709, 2710, 1687, 851, 3448, 1384, 2653,
	1084, 2652, 2680, 2651, 2662, 2623, 2624, 2625, 1084, 2724,
	2665, 2666, 2728, 214, 1959, 1382, 214, 214, 2683, 2348,
	214, 2315, 1374, 1185, 214, 2690, 2713, 2266, 1372, 2696,
	2697, 774, 1185, 1185, 1185, 2663, 2872, 1646, 1273, 214,
	2725, 1643, 1430, 2730, 2731, 214, 1344, 2871, 2751, 2668,
	214, 2669, 214, 826, 2809, 2477, 2701, 2660, 2793, 214,
	1276, 2717, 1324, 1663, 703, 704, 1652, 2168, 2168, 2759,
	2684, 2685, 2686, 2707, 2476, 2781, 696, 697, 1428, 1770,
	1274, 1426, 1408, 1185, 1185, 2749, 2457, 2768, 2818, 1969,
	2789, 214, 214, 706, 1406, 214, 1940, 1389, 1725, 1663,
	1573, 1348, 1185, 2739, 1250, 1770, 1199, 2117, 2447, 2745,
	2754, 3248, 3556, 3238, 3499, 2680, 3204, 2447, 2757, 782,
	2762, 3086, 3039, 2763, 3037, 3020, 1850, 1387, 1385, 214,
	2801, 1084, 214, 214, 1084, 214, 1024, 2769, 1812, 775,
	2792, 2785, 2394, 2383, 2321, 2833, 1812, 2810, 2382, 2362,
	1383, 1899, 1898, 2755, 2741, 2742, 214, 2756, 2743, 1896,
	2805, 1894, 1891, 1958, 1889, 1887, 2844, 1381, 1878, 2853,
	2168, 2168, 2168, 2808, 1373, 2815, 1826, 1824, 776, 833,
	1371, 1813, 1800, 1797, 2824, 938, 1784, 2764, 2765, 2848,
	1272, 2766, 1773, 3596, 1022, 2917, 1022, 142, 142, 1084,
	2869, 3403, 2826, 2827, 2828, 1460, 2829, 2830, 2503, 1654,
	1084, 3611, 214, 3528, 2817, 2831, 2832, 3297, 2860, 1666,
	2861, 3292, 2862, 3291, 210, 2892, 528, 529, 1687, 544,
	528, 544, 554, 559, 2854, 2448, 575, 821, 1193, 772,
	1759, 1082, 787, 789, 210, 1228, 2287, 3405, 2305, 1001,
	3096, 2870, 2287, 1781, 1931, 2866, 1424, 1425, 2285, 1957,
	2867, 823, 695, 1956, 2304, 1938, 210, 2873, 3453, 1666,
	1666, 2875, 1199, 1002, 1370, 3428, 3182, 2326, 1687, 1687,
	2901, 2902, 2504, 2308, 1464, 1666, 1666, 1733, 2975, 539,
	2345, 1461, 1467, 1468, 1687, 1687, 2312, 2897, 2343, 822,
	2310, 3498, 2344, 3466, 3079, 3631, 2914, 3070, 2311, 3004,
	2916, 1467, 1468, 2401, 2190, 1728, 1666, 2920, 2927, 214,
	214, 2908, 2910, 2911, 1659, 1687, 2688, 2923, 2353, 2929,
	1084, 2928, 1663, 2930, 773, 550, 2932, 3650, 1470, 2591,
	2592, 1467, 1468, 2994, 2007, 2933, 3468, 1469, 2940, 1358,
	214, 1538, 2942, 2279, 2278, 1357, 2121, 3009, 2912, 1003,
	2007, 2943, 528, 528, 2279, 2967, 1469, 2694, 2280, 2125,
	210, 2119, 2092, 1411, 3153, 3008, 1410, 2904, 1536, 2968,
	1534, 3659, 1663, 1663, 3438, 3376, 1024, 1024, 3336, 3334,
	3264, 2971, 3198, 3120, 3113, 3102, 3081, 214, 1663, 1663,
	3065, 2982, 2983, 3064, 142, 3046, 3063, 1021, 2980, 3035,
	2825, 2799, 2797, 2459, 851, 2458, 2411, 2387, 851, 2363,
	2079, 3016, 2976, 1021, 2996, 1955, 1168, 1954, 3059, 1663,
	1953, 1168, 1952, 1881, 1880, 214, 214, 3006, 2985, 2986,
	1879, 1859, 1837, 214, 1836, 1832, 1831, 1830, 1828, 1827,
	1423, 1422, 1084, 214, 2997, 1303, 1302, 1185, 1301, 1300,
	3013, 1299, 1298, 3051, 3053, 1297, 1296, 3050, 1295, 1293,
	1288, 214, 3024, 1287, 1286, 1666, 1285, 3076, 3098, 774,
	1284, 1245, 1244, 1243, 1687, 214, 214, 1185, 1185, 1185,
	3061, 214, 214, 214, 1242, 1241, 214, 214, 3093, 1240,
	214, 214, 1239, 1185, 1233, 1227, 1225, 3090, 1224, 214,
	1084, 1020, 1047, 2168, 2168, 1046, 3089, 3038, 3077, 3040,
	976, 885, 1734, 3078, 795, 2321, 639, 1020, 779, 2407,
	1084, 3355, 1417, 73, 1235, 625, 67, 3034, 634, 3084,
	3510, 2732, 1939, 1378, 1941, 2672, 2231, 3491, 3080, 3160,
	2717, 3092, 2560, 3434, 3317, 2116, 1555, 3151, 3109, 2447,
	3091, 1024, 69, 873, 958, 3260, 3121, 3259, 3205, 3099,
	3115, 3023, 3100, 2437, 3257, 214, 3094, 3119, 3256, 3105,
	1850, 840, 3104, 3112, 1666, 820, 1087, 775, 1663, 1744,
	3147, 3116, 879, 1687, 2168, 2168, 2168, 2168, 2168, 2168,
	2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168,
	2168, 2168, 2168, 3138, 2168, 3126, 3131, 3139, 3110, 3111,
	2077, 1757, 3218, 2262, 2150, 1667, 776, 3118, 882, 1664,
	884, 883, 1665, 1557, 881, 1662, 2371, 2405, 214, 1541,
	1280, 759, 1748, 2073, 1084, 2111, 1084, 2555, 1178, 1552,
	3215, 853, 875, 3208, 2108, 1040, 852, 2655, 2812, 3003,
	3283, 1993, 2495, 642, 2588, 2093, 1033, 3206, 2173, 214,
	214, 214, 2166, 3210, 2162, 2395, 1433, 1527, 2406, 1074,
	856, 214, 2071, 1543, 2529, 1446, 2172, 3173, 214, 2819,
	214, 2675, 3216, 214, 214, 214, 2257, 1663, 3525, 3122,
	2001, 1254, 1257, 1841, 1000, 1084, 214, 214, 1185, 3187,
	999, 1084, 998, 1185, 3516, 3513, 1035, 3189, 2779, 214,
	1737, 1024, 2272, 3186, 3209, 3184, 3185, 3201, 3202, 1024,
	3193, 3190, 1519, 2786, 214, 2677, 3194, 1084, 869, 1198,
	1185, 2640, 1024, 2847, 1045, 1247, 3233, 3452, 1518, 3223,
	791, 575, 3224, 3192, 1339, 1609, 3203, 3443, 1061, 1060,
	1059, 2715, 3656, 3222, 3235, 3236, 3031, 210, 214, 210,
	210, 181, 1190, 3183, 210, 1982, 3251, 3254, 3234, 825,
	1084, 3188, 210, 1206, 3245, 178, 180, 3246, 179, 3048,
	3279, 2771, 3255, 90, 3269, 1022, 3266, 3282, 3250, 3278,
	35, 16, 117, 116, 115, 1359, 114, 1230, 113, 3280,
	1084, 1022, 112, 111, 110, 109, 108, 107, 106, 105,
	104, 1249, 103, 102, 3275, 101, 210, 210, 100, 1190,
	99, 98, 97, 96, 3293, 95, 94, 93, 3211, 3296,
	3287, 210, 3212, 3329, 1850, 92, 3304, 1084, 91, 1290,
	571, 568, 49, 48, 89, 214, 88, 214, 15, 1084,
	214, 33, 13, 210, 210, 210, 210, 1190, 214, 53,
	54, 1666, 1168, 12, 3309, 1912, 575, 3325, 210, 210,
	1687, 28, 3214, 214, 29, 79, 78, 1082, 27, 3339,
	14, 214, 695, 26, 24, 3217, 3314, 3330, 3331, 10,
	8, 7, 30, 1631, 11, 147, 146, 72, 839, 145,
	71, 144, 214, 851, 3263, 143, 214, 3315, 70, 1168,
	3375, 3333, 22, 3270, 214, 1666, 3359, 9, 139, 1185,
	3390, 3385, 3391, 3358, 1687, 214, 3074, 66, 141, 140,
	3337, 3286, 63, 3383, 138, 3338, 137, 64, 136, 135,
	65, 210, 134, 20, 3315, 5, 214, 214, 3394, 3377,
	52, 3373, 6, 3299, 2856, 210, 2010, 3402, 3424, 3425,
	83, 84, 3389, 31, 2781, 61, 3407, 60, 214, 3400,
	559, 59, 19, 51, 1663, 18, 3401, 171, 3399, 1021,
	170, 3395, 3282, 214, 3397, 3406, 169, 168, 3213, 3366,
	3365, 163, 162, 167, 1021, 165, 3404, 3449, 164, 3408,
	166, 161, 3440, 133, 3412, 3413, 173, 3416, 1666, 172,
	1199, 175, 3367, 3368, 3432, 3439, 159, 1687, 155, 154,
	158, 160, 157, 156, 1021, 153, 174, 132, 1663, 131,
	56, 130, 129, 128, 3460, 127, 126, 55, 17, 214,
	1185, 1168, 2, 1, 0, 0, 214, 0, 0, 3427,
	1185, 1185, 0, 0, 0, 0, 1185, 0, 3482, 0,
	214, 0, 214, 3423, 0, 0, 3467, 0, 0, 0,
	3470, 0, 3394, 0, 3474, 0, 0, 0, 0, 3495,
	0, 0, 3479, 1020, 1199, 214, 0, 0, 0, 3486,
	3473, 214, 214, 0, 1084, 3507, 0, 0, 1020, 0,
	0, 0, 214, 214, 0, 0, 0, 3519, 3529, 0,
	3523, 3515, 3518, 3480, 3481, 0, 3531, 0, 3533, 3485,
	0, 1663, 0, 0, 3512, 3540, 3520, 0, 1020, 0,
	3541, 3487, 0, 3488, 3478, 0, 0, 0, 214, 0,
	0, 0, 3535, 3537, 0, 0, 0, 0, 0, 3567,
	0, 2172, 2172, 0, 0, 0, 0, 3552, 3553, 0,
	0, 3527, 3508, 3555, 3554, 2168, 528, 0, 0, 0,
	0, 0, 0, 0, 3585, 3583, 3587, 214, 0, 3569,
	0, 1021, 0, 0, 3593, 0, 3592, 210, 0, 210,
	0, 3584, 3597, 210, 2526, 2527, 0, 214, 0, 3589,
	0, 2010, 0, 1206, 0, 1190, 210, 2168, 210, 0,
	0, 3603, 3604, 210, 1206, 544, 3605, 3608, 210, 1206,
	3606, 214, 0, 214, 575, 3612, 0, 3613, 3615, 3515,
	0, 3621, 3518, 3623, 3619, 2407, 0, 3620, 3625, 3626,
	0, 0, 3586, 0, 3588, 0, 0, 3590, 3591, 0,
	0, 3594, 0, 1816, 2172, 2172, 2172, 0, 0, 0,
	3638, 3637, 0, 0, 0, 0, 0, 0, 3645, 3644,
	0, 3646, 0, 0, 0, 3649, 0, 0, 0, 0,
	3653, 3527, 0, 0, 0, 1020, 0, 3660, 0, 3661,
	3654, 3655, 3618, 0, 0, 0, 0, 2614, 2615, 2616,
	3530, 0, 0, 1168, 0, 0, 3664, 3665, 3666, 3668,
	3669, 0, 0, 0, 2168, 0, 839, 0, 3673, 0,
	839, 3671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1208, 0, 1212, 0, 1218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 1168, 0,
	0, 1904, 0, 0, 0, 0, 0, 1816, 0, 0,
	1914, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 1922, 1923, 1924, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 210, 210, 0, 0,
	0, 1021, 1021, 0, 0, 0, 0, 0, 0, 1864,
	0, 0, 1342, 0, 0, 0, 0, 0, 210, 1345,
	210, 0, 210, 1168, 0, 0, 528, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1882, 0, 0, 0, 1467, 1468, 0, 0, 0, 1168,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 1397, 0, 0, 0, 1498, 0,
	0, 0, 0, 575, 0, 1470, 0, 695, 0, 0,
	0, 0, 0, 0, 210, 0, 1190, 210, 0, 1469,
	0, 0, 0, 0, 0, 1020, 1020, 0, 1489, 0,
	575, 0, 0, 1469, 0, 1486, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 210, 0, 210,
	0, 210, 0, 210, 0, 210, 0, 2591, 2592, 1022,
	2609, 2610, 2611, 0, 0, 0, 0, 0, 0, 1964,
	0, 0, 1965, 0, 1966, 0, 3143, 0, 1520, 1521,
	1522, 1523, 1524, 210, 1168, 0, 0, 2172, 2172, 0,
	0, 0, 1492, 1493, 1494, 1495, 1021, 0, 0, 0,
	0, 0, 1475, 0, 559, 0, 0, 0, 1540, 0,
	575, 0, 0, 210, 1553, 0, 1475, 0, 0, 0,
	0, 2606, 0, 0, 0, 0, 0, 0, 0, 0,
	2885, 2886, 0, 1497, 1499, 0, 0, 0, 1168, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 2172, 2172,
	2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
	2172, 2172, 2172, 2172, 2172, 2172, 2172, 1490, 2172, 0,
	0, 0, 0, 0, 0, 2597, 0, 0, 0, 0,
	1020, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952,
	2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962,
	0, 2966, 0, 0, 1603, 1603, 1603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 528, 1021, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 210, 0,
	2607, 0, 0, 0, 0, 1491, 0, 528, 0, 0,
	0, 0, 0, 0, 210, 0, 528, 0, 0, 1491,
	0, 0, 0, 0, 0, 839, 1467, 1468, 210, 1022,
	1022, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1020, 1469, 0, 0, 0, 0, 0, 0, 1020, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2608, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 0, 0, 0, 0, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 2295, 0, 0, 0, 0, 0, 0, 0, 210,
	2419, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 1499, 0, 0, 210,
	0, 0, 0, 0, 1022, 210, 2356, 0, 0, 0,
	0, 2603, 2604, 2605, 0, 0, 0, 0, 2602, 2600,
	2601, 2593, 2594, 2595, 2596, 2598, 2599, 0, 1206, 0,
	0, 210, 0, 0, 0, 0, 0, 210, 0, 1168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 1864, 0, 0, 0, 0, 0, 0, 0, 2295,
	0, 528, 0, 0, 2410, 0, 0, 0, 0, 0,
	210, 1168, 0, 210, 0, 210, 0, 210, 0, 210,
	210, 0, 1190, 0, 0, 0, 0, 0, 1168, 0,
	0, 0, 2430, 695, 0, 2295, 2295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 1190, 210, 0, 851, 1206, 0, 1206, 0,
	0, 1190, 0, 1190, 0, 1190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 210, 210, 210,
	1190, 210, 0, 210, 1022, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
	0, 210, 0, 1168, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1992, 0, 1996, 0, 0, 0, 0, 0,
	2003, 0, 0, 0, 0, 0, 0, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 0, 2052, 0, 2054, 2055, 2056, 2057, 2172,
	1471, 1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2081, 0, 0, 0, 0,
	1206, 0, 0, 0, 2591, 2592, 0, 2609, 2610, 2611,
	1540, 0, 0, 0, 2106, 0, 0, 0, 0, 0,
	0, 2172, 3322, 2894, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 1168, 0, 0, 1168, 0, 0,
	0, 58, 2134, 0, 0, 2140, 2141, 2142, 2143, 2144,
	2145, 2146, 0, 0, 0, 62, 2164, 0, 2175, 2177,
	2182, 0, 0, 0, 3347, 0, 0, 0, 2606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1168, 0, 0, 210, 0, 0, 0, 0,
	528, 0, 2760, 1168, 0, 528, 74, 0, 528, 0,
	0, 528, 528, 0, 0, 0, 85, 528, 2172, 0,
	0, 75, 82, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 2597, 0, 0, 2790, 0, 1206, 0, 0,
	0, 0, 0, 0, 2794, 2795, 2796, 0, 0, 0,
	0, 0, 1206, 0, 0, 0, 0, 0, 0, 0,
	0, 3431, 0, 0, 0, 76, 0, 0, 0, 0,
	2295, 2295, 210, 0, 0, 0, 2295, 0, 0, 2719,
	0, 0, 0, 2612, 0, 0, 2295, 2719, 0, 2295,
	2719, 2719, 0, 0, 0, 2839, 2840, 0, 0, 0,
	0, 0, 0, 210, 210, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 1816, 0, 0, 2607, 0, 0,
	0, 0, 0, 1168, 210, 0, 0, 1190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2775, 0,
	0, 2777, 2295, 0, 0, 210, 0, 2254, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 77, 0, 0, 2358,
	1190, 2360, 210, 0, 0, 2295, 0, 528, 0, 0,
	0, 0, 0, 0, 2295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	80, 0, 81, 0, 0, 2608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 1864, 0, 0,
	1864, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 1168, 0, 118, 0, 0,
	0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 0, 2865, 0, 0, 1190, 210, 0,
	210, 184, 1503, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 210, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 1168, 0, 0, 0, 152, 1469, 0,
	0, 0, 0, 2474, 0, 183, 0, 1489, 0, 0,
	0, 0, 0, 1168, 1486, 176, 0, 0, 2603, 2604,
	2605, 0, 0, 177, 0, 2602, 2600, 2601, 2593, 2594,
	2595, 2596, 2598, 2599, 0, 0, 0, 2925, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2509, 2510, 0, 0, 0, 0, 2516,
	0, 0, 0, 0, 0, 1507, 0, 0, 1517, 0,
	0, 0, 1497, 1499, 0, 0, 0, 0, 2530, 2531,
	0, 0, 210, 210, 2106, 0, 0, 1168, 0, 1168,
	0, 0, 1513, 2538, 1514, 0, 0, 0, 0, 0,
	0, 1484, 1485, 0, 528, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 2558,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 2573, 1206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 1168, 3106,
	3107, 3108, 0, 0, 1168, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2591, 2592, 0, 2609, 2610, 2611, 0,
	1168, 0, 575, 939, 2182, 2182, 2182, 0, 0, 0,
	0, 0, 2893, 0, 0, 0, 0, 0, 0, 1603,
	0, 0, 0, 0, 0, 0, 1496, 2645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3072, 210, 211, 1168, 1491, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 2606, 210, 0,
	0, 0, 211, 0, 0, 0, 1467, 1468, 0, 0,
	1508, 0, 0, 1168, 0, 0, 2295, 210, 0, 0,
	0, 0, 0, 0, 211, 0, 1498, 0, 0, 0,
	2430, 2430, 0, 1470, 839, 0, 695, 695, 2295, 0,
	0, 1864, 1864, 0, 0, 695, 2295, 839, 0, 0,
	1168, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 1469, 1168, 0, 0, 0, 0, 0, 0, 0,
	1489, 2597, 0, 2735, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 851, 0, 1481, 1482, 1488,
	1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 0, 0, 0, 3142, 3169, 1467, 1468,
	3161, 3168, 2612, 0, 1510, 1511, 1512, 0, 0, 0,
	3247, 0, 0, 0, 1492, 1493, 1494, 1495, 1498, 0,
	0, 0, 0, 0, 1475, 1470, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 2607, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 905,
	0, 0, 0, 1469, 0, 1497, 1499, 210, 0, 0,
	0, 0, 1489, 1206, 0, 210, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 1484, 1485, 0, 0, 209, 0,
	0, 0, 0, 0, 2295, 2295, 2295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1206, 0, 599, 1490,
	0, 0, 0, 2295, 0, 2719, 0, 0, 1206, 1206,
	210, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	599, 210, 210, 0, 2608, 0, 1475, 0, 0, 0,
	0, 0, 0, 2874, 2295, 0, 0, 2003, 0, 0,
	0, 0, 0, 2880, 2881, 0, 0, 2884, 0, 3272,
	1507, 2887, 0, 1517, 0, 0, 0, 1497, 1499, 0,
	2891, 0, 0, 2591, 2592, 0, 2609, 2610, 2611, 2898,
	0, 0, 2645, 0, 0, 0, 0, 1168, 0, 1496,
	0, 851, 0, 1206, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 2918, 0, 0, 0, 1491, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 2934, 2935, 0, 2936, 2937, 2938, 0,
	0, 2939, 0, 0, 1023, 2941, 0, 2606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2603, 2604, 2605,
	0, 0, 0, 0, 2602, 2600, 2601, 2593, 2594, 2595,
	2596, 2598, 2599, 0, 0, 0, 2969, 2970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2295, 2979, 2719, 0, 0, 3341, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 2988, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 2597, 0, 0, 0, 0, 575, 0, 0, 1491,
	0, 0, 0, 0, 1487, 1483, 0, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 0, 3341, 2613, 0,
	0, 2295, 0, 0, 0, 1508, 0, 0, 0, 210,
	0, 3017, 0, 0, 0, 0, 0, 0, 0, 0,
	1206, 0, 2612, 0, 0, 0, 3025, 3028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 3047, 0, 0, 0, 0, 2607, 0, 0, 0,
	0, 0, 0, 2925, 0, 211, 1089, 211, 211, 1089,
	0, 1089, 211, 0, 0, 0, 0, 0, 3341, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1603,
	0, 0, 1089, 1089, 211, 211, 0, 0, 3101, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 211,
	0, 2719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2608, 1206, 0, 1206, 0, 0,
	0, 211, 211, 211, 211, 0, 1089, 1089, 0, 0,
	0, 1089, 0, 0, 0, 1089, 211, 211, 0, 0,
	3503, 0, 0, 0, 0, 0, 1206, 210, 3140, 3141,
	0, 0, 0, 0, 3145, 3146, 0, 210, 2295, 3149,
	3150, 0, 0, 0, 0, 0, 3154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3158, 1089, 0, 0, 0,
	0, 0, 3162, 2925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 2603, 2604, 2605,
	0, 0, 2295, 0, 2602, 2600, 2601, 2593, 2594, 2595,
	2596, 2598, 2599, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 3341, 209, 209, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 599, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 1206, 0, 2295, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 3028, 0, 0, 0, 0,
	62, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512,
	209, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 1498, 0, 0, 0, 209, 0, 0, 1470, 0,
	0, 68, 0, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 209, 209,
	209, 0, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 74, 209, 209, 0, 1489, 0, 0, 0, 0,
	0, 85, 1486, 0, 0, 0, 75, 82, 0, 0,
	3028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2591, 2592, 0, 2609, 2610, 2611, 0, 0, 3310, 3311,
	3312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 3320, 3321, 209, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 3328, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 1507, 2606, 0, 1517, 0, 0, 0,
	1497, 1499, 1089, 0, 211, 211, 211, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 211, 3028, 0, 0,
	1513, 0, 1514, 0, 0, 3364, 0, 0, 1089, 1484,
	1485, 0, 0, 0, 3371, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 3378, 1505, 0, 0, 0, 1089,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 3028, 2597, 0,
	3028, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	3028, 3028, 0, 0, 148, 80, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 125, 0, 2612,
	0, 0, 0, 57, 0, 0, 0, 0, 690, 0,
	658, 0, 118, 0, 1496, 0, 0, 58, 120, 0,
	592, 0, 3442, 0, 0, 3445, 0, 0, 0, 0,
	0, 62, 1491, 2607, 0, 0, 184, 0, 0, 0,
	0, 0, 592, 659, 0, 0, 39, 122, 0, 0,
	0, 0, 660, 0, 1089, 211, 0, 0, 1508, 119,
	38, 1089, 68, 0, 0, 0, 0, 0, 661, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 41, 0, 681, 0, 0, 42, 0, 0,
	176, 1625, 74, 1023, 0, 123, 0, 209, 177, 662,
	211, 40, 85, 0, 211, 211, 0, 75, 82, 0,
	209, 1625, 209, 0, 0, 0, 0, 599, 663, 151,
	0, 0, 599, 0, 909, 0, 211, 0, 211, 0,
	211, 2608, 0, 839, 43, 0, 0, 0, 664, 0,
	0, 665, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487,
	1483, 76, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 0, 0, 0, 0, 0, 680, 3551, 3551,
	3551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3570, 1089, 0,
	1089, 0, 1089, 0, 0, 0, 0, 0, 1089, 0,
	0, 1089, 211, 0, 0, 211, 0, 0, 3028, 0,
	3028, 0, 0, 0, 1089, 1089, 1089, 0, 0, 0,
	0, 0, 0, 0, 3551, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 211, 0, 211, 0, 211,
	0, 211, 0, 211, 2603, 2604, 2605, 0, 0, 0,
	0, 2602, 2600, 2601, 2593, 2594, 2595, 2596, 2598, 2599,
	0, 0, 77, 0, 0, 667, 0, 0, 0, 0,
	44, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 599, 684, 0, 668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 148, 80, 0, 81, 0,
	45, 211, 0, 0, 124, 0, 0, 3551, 0, 0,
	46, 683, 0, 0, 0, 0, 0, 182, 669, 0,
	0, 670, 0, 1089, 0, 0, 209, 678, 0, 50,
	209, 209, 0, 118, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 209, 0, 209, 184, 0, 0,
	0, 0, 0, 0, 0, 672, 679, 0, 0, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 674, 0, 152, 0, 1467, 1468, 0, 0, 0,
	0, 183, 0, 682, 0, 0, 0, 0, 1089, 0,
	0, 176, 0, 0, 677, 1498, 0, 0, 0, 177,
	0, 0, 1470, 0, 0, 0, 0, 0, 209, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	1469, 209, 0, 0, 0, 0, 0, 0, 0, 1489,
	599, 209, 0, 209, 0, 209, 1486, 209, 0, 209,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 209, 0, 1089,
	0, 0, 0, 0, 0, 2888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 1493, 1494, 1495, 209, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 1186, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 57,
	0, 0, 0, 1484, 1485, 0, 0, 0, 0, 0,
	1186, 1186, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 205, 62, 1490, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 1186, 1186, 0, 0, 68, 1186,
	0, 211, 0, 1186, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 1089, 0,
	0, 1089, 0, 211, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 1023, 75, 82, 0, 0, 0, 1496, 211,
	0, 0, 0, 0, 1186, 211, 0, 1086, 1023, 0,
	1187, 0, 1086, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 211, 0,
	0, 211, 0, 211, 0, 211, 0, 211, 211, 0,
	0, 1089, 1089, 1089, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 1187, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1187, 1187, 0,
	0, 0, 1187, 0, 0, 0, 1187, 0, 0, 0,
	0, 0, 0, 0, 211, 211, 211, 211, 0, 211,
	0, 211, 0, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 0, 77, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 209, 0, 0, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 148, 80, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 209, 1470, 119, 209, 0, 209,
	0, 209, 0, 209, 209, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	1085, 0, 0, 1469, 0, 0, 0, 176, 0, 592,
	209, 0, 1489, 0, 592, 177, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 209, 1186, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2883, 1089,
	209, 209, 209, 209, 0, 209, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 1089, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 1079,
	0, 1490, 1186, 0, 0, 0, 1197, 0, 0, 1085,
	0, 211, 211, 211, 0, 0, 0, 0, 0, 1187,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 1089, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 1089, 211, 0, 0,
	0, 0, 0, 1282, 0, 1089, 1089, 1089, 0, 0,
	0, 1496, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 1307, 1307, 1197, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1089, 0, 1023,
	0, 0, 0, 0, 211, 0, 1186, 0, 1186, 0,
	1186, 0, 0, 0, 0, 1089, 1186, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1625,
	0, 0, 1186, 1186, 1186, 1187, 0, 0, 0, 0,
	0, 0, 1086, 0, 1089, 0, 211, 1089, 211, 0,
	0, 0, 592, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 209, 0, 1467, 1468,
	0, 0, 0, 0, 0, 0, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 209, 209, 209,
	0, 0, 1089, 0, 0, 0, 1625, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 1085, 1489, 0, 0, 0, 0, 0, 0, 1486,
	0, 874, 87, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 1187,
	0, 1187, 0, 1187, 0, 0, 0, 0, 209, 1187,
	0, 0, 1187, 0, 0, 0, 1023, 0, 2882, 0,
	0, 0, 0, 0, 0, 1187, 1187, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 87, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 209, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 813, 209, 0, 0, 0, 0,
	0, 1490, 0, 834, 1086, 1641, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1650, 0,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 211, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	1089, 1089, 1089, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 211, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 1023, 1023, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 1085, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 0, 0, 0, 1839, 0, 0, 0, 1846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 0, 0, 0, 1089, 0, 1089,
	1282, 0, 1870, 0, 1870, 0, 0, 0, 1187, 1186,
	1186, 1186, 1498, 1186, 0, 209, 0, 0, 0, 1470,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 211, 0,
	0, 1023, 0, 0, 0, 0, 1489, 0, 1089, 211,
	211, 1089, 0, 1486, 1089, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 1187, 1846, 0, 0, 1918,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 1086,
	1089, 0, 1187, 1089, 0, 0, 0, 0, 0, 1934,
	0, 0, 2515, 0, 0, 0, 0, 0, 0, 1944,
	0, 1946, 0, 1948, 0, 1950, 0, 1951, 0, 0,
	1492, 1493, 1494, 1495, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 1499, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 1187, 1187, 1187, 1307, 1187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 87,
	1089, 87, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 1023, 1089, 0, 0, 1490, 0, 0, 0, 1023,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1625, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 209, 0, 0, 211, 0, 834,
	87, 87, 1089, 0, 62, 209, 209, 0, 0, 87,
	0, 0, 0, 0, 0, 1496, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 211,
	211, 0, 0, 1491, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 85, 1085, 0, 0, 0,
	75, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	2238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 1089, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 1089, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 813, 0,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 0, 0, 1530, 209, 0, 0,
	0, 1186, 0, 0, 0, 211, 0, 1089, 0, 0,
	0, 1085, 209, 0, 1539, 211, 0, 0, 1545, 1085,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1186, 0, 0, 0, 0, 0,
	0, 0, 0, 1186, 1186, 1186, 0, 0, 0, 0,
	0, 0, 1086, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 209, 0, 0, 0,
	0, 1197, 0, 0, 1186, 1186, 0, 0, 148, 80,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 1846, 0, 0, 0, 0, 0, 2380,
	0, 0, 690, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 1085, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 1623, 0, 1626, 0, 87, 0, 0,
	184, 0, 2412, 0, 1187, 1307, 0, 1307, 0, 1307,
	0, 1197, 1197, 0, 1086, 0, 0, 0, 209, 0,
	0, 0, 1086, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 1187, 2456, 0,
	0, 0, 0, 0, 183, 0, 1187, 1187, 1187, 0,
	1085, 0, 0, 2461, 176, 2464, 0, 0, 0, 0,
	0, 1085, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 1334, 0, 0, 0, 0, 2485, 1197,
	2487, 1197, 0, 2490, 0, 0, 0, 1187, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1187, 0, 0, 0,
	0, 0, 0, 2506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 1468, 0, 1500, 1501,
	1502, 1510, 1511, 1512, 0, 1086, 0, 0, 1086, 0,
	0, 0, 0, 0, 1503, 1498, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 1493, 1494, 1495, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 1468, 1507, 0, 0,
	1517, 0, 0, 1085, 1497, 1499, 0, 0, 1186, 0,
	0, 0, 0, 0, 0, 1498, 834, 0, 834, 0,
	0, 0, 1470, 0, 1513, 0, 1514, 0, 0, 0,
	0, 0, 0, 1484, 1485, 0, 0, 0, 1186, 1186,
	1186, 0, 0, 0, 1086, 0, 0, 0, 0, 1505,
	1469, 0, 0, 0, 1186, 0, 0, 0, 1490, 1489,
	0, 1085, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2711, 2508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 1493, 1494, 1495, 0, 0, 0,
	0, 0, 0, 1475, 0, 2748, 2750, 2380, 1496, 0,
	0, 813, 0, 0, 813, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 1497, 1499, 1086, 0, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 2787, 0, 0,
	0, 2791, 0, 1484, 1485, 1085, 0, 1085, 0, 2070,
	0, 1187, 1187, 1187, 0, 0, 2800, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 1187, 1490, 0,
	0, 0, 0, 0, 1086, 0, 1539, 0, 0, 0,
	1539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 2843, 1186,
	0, 0, 1085, 0, 1186, 0, 1506, 0, 0, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 0, 1085, 2579,
	0, 1186, 0, 2580, 1010, 0, 0, 0, 1496, 0,
	2868, 0, 1197, 0, 0, 0, 0, 0, 0, 0,
	1626, 0, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 2878, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	1086, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 1187, 0, 0, 1086, 0, 1187, 0, 0,
	0, 0, 0, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1187, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 1498, 0,
	0, 87, 0, 0, 87, 1470, 0, 0, 0, 0,
	1516, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 1486,
	0, 1186, 0, 3073, 0, 0, 0, 0, 0, 0,
	0, 1186, 1186, 0, 0, 0, 0, 1186, 0, 0,
	3085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 1187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 1517, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 2070, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1187, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 1187, 1187, 0, 0, 0, 0,
	1187, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 3237, 0, 0, 0, 0, 0, 0, 1503,
	1498, 0, 0, 2380, 0, 1508, 1010, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1492, 1493,
	1494, 1495, 2102, 0, 0, 0, 2103, 0, 1475, 0,
	0, 0, 87, 87, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 1517, 0, 0, 0, 1497,
	1499, 0, 0, 0, 0, 87, 87, 0, 0, 87,
	0, 0, 0, 0, 0, 3348, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1010, 0,
	0, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3396, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 87, 0, 1504,
	0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 3422, 1197, 0, 0, 0, 0, 0,
	0, 0, 1503, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 1491, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 1468, 1508, 1500, 1501,
	1502, 1510, 1511, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 1498, 3472, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	1469, 1475, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 3509,
	0, 0, 0, 0, 0, 1507, 0, 0, 1517, 3524,
	0, 1506, 1497, 1499, 1481, 1482, 1488, 1509, 1487, 1483,
	0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	0, 0, 1513, 0, 1514, 0, 0, 0, 3167, 0,
	0, 1484, 1485, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 1493, 1494, 1495, 1505, 1010, 1010,
	0, 0, 0, 1475, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 1507, 0, 0,
	1517, 0, 0, 0, 1497, 1499, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 1514, 0, 0, 0,
	0, 0, 0, 1484, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 1496, 0, 1490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1701,
	1678, 1685, 1668, 1711, 1710, 0, 0, 1670, 1669, 0,
	0, 0, 0, 0, 0, 1721, 1722, 87, 0, 0,
	0, 0, 1508, 0, 1506, 0, 0, 1481, 1482, 1488,
	1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 2896, 0, 0, 0, 0, 1712, 0, 1708, 1707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1705, 1703, 1704, 0, 0, 1506, 0, 0, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 2582, 1680, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 1694, 1683, 1696, 1698, 1699, 1700,
	1695, 1010, 1688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1717, 1718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1709, 0, 0, 0, 1681, 0, 1682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	1702, 0, 0, 0, 1691, 1689, 1690, 1693, 1692, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1673,
	1674, 1676, 1677, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1697, 1675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1671, 0, 0, 1713, 1714, 1715, 1716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1679, 0, 0, 0,
	0, 1686, 1719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	2070, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 87, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 2216, 0, 0, 0, 0, 0, 0, 0, 2217,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3191, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3316, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3244, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3125, 0, 219, 220, 221, 222,
	223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095,
	1096, 1097, 1098, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1099, 233, 234, 235, 236,
	237, 238, 1100, 1101, 239, 484, 485, 486, 1102, 240,
	487, 1103, 1088, 1104, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1105, 251, 0, 252, 253,
	254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 257, 258, 259, 260, 261, 262, 488, 489,
	1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118, 267,
	268, 269, 1119, 270, 1120, 271, 272, 1121, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1122, 216, 1123, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1124, 290, 1125, 1126,
	961, 291, 292, 1127, 293, 494, 1128, 495, 294, 1129,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 1130, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1131, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 1132, 501, 1133, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1134, 325, 324, 1135, 326, 503, 967, 327, 328,
	968, 1136, 329, 330, 1137, 1138, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 1139, 218, 971, 348,
	1140, 504, 349, 505, 351, 352, 1141, 353, 354, 355,
	1142, 1143, 357, 358, 359, 1144, 1145, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1146, 371, 372, 508, 373, 509, 374,
	1147, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1148, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1149, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1150, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1151, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 1152,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1153, 443, 444, 442, 1154, 445, 446, 447,
	448, 449, 278, 450, 1155, 451, 514, 515, 516, 517,
	1156, 458, 1157, 452, 453, 518, 454, 519, 1158, 455,
	456, 457, 0, 459, 460, 1159, 1160, 461, 462, 463,
	464, 465, 467, 1161, 468, 1162, 466, 469, 470, 471,
	520, 521, 522, 1163, 473, 472, 523, 1164, 1165, 1166,
	1167, 474, 475, 524, 476, 477, 478, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2921, 0, 219, 220, 221, 222, 223, 1090,
	224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097,
	1098, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1099, 233, 234, 235, 236, 237, 238,
	1100, 1101, 239, 484, 485, 486, 1102, 240, 487, 1103,
	1088, 1104, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1105, 251, 0, 252, 253, 254, 1106,
	960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113,
	257, 258, 259, 260, 261, 262, 488, 489, 1114, 263,
	1115, 265, 264, 1116, 266, 1117, 1118, 267, 268, 269,
	1119, 270, 1120, 271, 272, 1121, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1122,
	216, 1123, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1124, 290, 1125, 1126, 961, 291,
	292, 1127, 293, 494, 1128, 495, 294, 1129, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1130,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1131,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1132,
	501, 1133, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1134,
	325, 324, 1135, 326, 503, 967, 327, 328, 968, 1136,
	329, 330, 1137, 1138, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1139, 218, 971, 348, 1140, 504,
	349, 505, 351, 352, 1141, 353, 354, 355, 1142, 1143,
	357, 358, 359, 1144, 1145, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1146, 371, 372, 508, 373, 509, 374, 1147, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1148, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1149, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1150, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1151, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1152, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1153, 443, 444, 442, 1154, 445, 446, 447, 448, 449,
	278, 450, 1155, 451, 514, 515, 516, 517, 1156, 458,
	1157, 452, 453, 518, 454, 519, 1158, 455, 456, 457,
	0, 459, 460, 1159, 1160, 461, 462, 463, 464, 465,
	467, 1161, 468, 1162, 466, 469, 470, 471, 520, 521,
	522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474,
	475, 524, 476, 477, 478, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2913, 0, 219, 220, 221, 222, 223, 1090, 224, 1091,
	1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1099, 233, 234, 235, 236, 237, 238, 1100, 1101,
	239, 484, 485, 486, 1102, 240, 487, 1103, 1088, 1104,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1105, 251, 0, 252, 253, 254, 1106, 960, 255,
	256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258,
	259, 260, 261, 262, 488, 489, 1114, 263, 1115, 265,
	264, 1116, 266, 1117, 1118, 267, 268, 269, 1119, 270,
	1120, 271, 272, 1121, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1122, 216, 1123,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1124, 290, 1125, 1126, 961, 291, 292, 1127,
	293, 494, 1128, 495, 294, 1129, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1130, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1131, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1132, 501, 1133,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1134, 325, 324,
	1135, 326, 503, 967, 327, 328, 968, 1136, 329, 330,
	1137, 1138, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1139, 218, 971, 348, 1140, 504, 349, 505,
	351, 352, 1141, 353, 354, 355, 1142, 1143, 357, 358,
	359, 1144, 1145, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1146,
	371, 372, 508, 373, 509, 374, 1147, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1148,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1149, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1150, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1151, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1152, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1153, 443,
	444, 442, 1154, 445, 446, 447, 448, 449, 278, 450,
	1155, 451, 514, 515, 516, 517, 1156, 458, 1157, 452,
	453, 518, 454, 519, 1158, 455, 456, 457, 0, 459,
	460, 1159, 1160, 461, 462, 463, 464, 465, 467, 1161,
	468, 1162, 466, 469, 470, 471, 520, 521, 522, 1163,
	473, 472, 523, 1164, 1165, 1166, 1167, 474, 475, 524,
	476, 477, 478, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2774, 0,
	219, 220, 221, 222, 223, 1090, 224, 1091, 1092, 1093,
	0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1099,
	233, 234, 235, 236, 237, 238, 1100, 1101, 239, 484,
	485, 486, 1102, 240, 487, 1103, 1088, 1104, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1105,
	251, 0, 252, 253, 254, 1106, 960, 255, 256, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260,
	261, 262, 488, 489, 1114, 263, 1115, 265, 264, 1116,
	266, 1117, 1118, 267, 268, 269, 1119, 270, 1120, 271,
	272, 1121, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1122, 216, 1123, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1124, 290, 1125, 1126, 961, 291, 292, 1127, 293, 494,
	1128, 495, 294, 1129, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1130, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1131, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1132, 501, 1133, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1134, 325, 324, 1135, 326,
	503, 967, 327, 328, 968, 1136, 329, 330, 1137, 1138,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1139, 218, 971, 348, 1140, 504, 349, 505, 351, 352,
	1141, 353, 354, 355, 1142, 1143, 357, 358, 359, 1144,
	1145, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1146, 371, 372,
	508, 373, 509, 374, 1147, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1148, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1149, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1150, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1151, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1152, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1153, 443, 444, 442,
	1154, 445, 446, 447, 448, 449, 278, 450, 1155, 451,
	514, 515, 516, 517, 1156, 458, 1157, 452, 453, 518,
	454, 519, 1158, 455, 456, 457, 0, 459, 460, 1159,
	1160, 461, 462, 463, 464, 465, 467, 1161, 468, 1162,
	466, 469, 470, 471, 520, 521, 522, 1163, 473, 472,
	523, 1164, 1165, 1166, 1167, 474, 475, 524, 476, 477,
	478, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2115, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 1191,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1822, 0, 0, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 1080,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094,
	479, 1095, 1096, 1097, 1098, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1099, 233, 234,
	235, 236, 237, 238, 1100, 1101, 239, 484, 485, 486,
	1102, 240, 487, 1103, 1088, 1104, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1105, 251, 0,
	252, 253, 254, 1106, 960, 255, 256, 1107, 1108, 1110,
	1109, 1111, 1112, 1113, 257, 258, 259, 260, 261, 262,
	488, 489, 1114, 263, 1115, 265, 264, 1116, 266, 1117,
	1118, 267, 268, 269, 1119, 270, 1120, 271, 272, 1121,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1122, 216, 1123, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1124, 290,
	1125, 1126, 961, 291, 292, 1127, 293, 494, 1128, 495,
	294, 1129, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1130, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1131, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1132, 501, 1133, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1134, 325, 324, 1135, 326, 503, 967,
	327, 328, 968, 1136, 329, 330, 1137, 1138, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1139, 218,
	971, 348, 1140, 504, 349, 505, 351, 352, 1141, 353,
	354, 355, 1142, 1143, 357, 358, 359, 1144, 1145, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1146, 371, 372, 508, 373,
	509, 374, 1147, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1148, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1149, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1150, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1151,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1152, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1153, 443, 444, 442, 1154, 445,
	446, 447, 448, 449, 278, 450, 1155, 451, 514, 515,
	516, 517, 1156, 458, 1157, 452, 453, 518, 454, 519,
	1158, 455, 456, 457, 0, 459, 460, 1159, 1160, 461,
	462, 463, 464, 465, 467, 1161, 468, 1162, 466, 469,
	470, 471, 520, 521, 522, 1163, 473, 472, 523, 1164,
	1165, 1166, 1167, 474, 475, 524, 476, 477, 478, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095,
	1096, 1097, 1098, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1099, 233, 234, 235, 236,
	237, 238, 1100, 1101, 239, 484, 485, 486, 1102, 240,
	487, 1103, 1088, 1104, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1105, 251, 0, 252, 253,
	254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 257, 258, 259, 260, 261, 262, 488, 489,
	1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118, 267,
	268, 269, 1119, 270, 1120, 271, 272, 1121, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1122, 216, 1123, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1124, 290, 1125, 1126,
	961, 291, 292, 1127, 293, 494, 1128, 495, 294, 1129,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 1130, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1131, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 1132, 501, 1133, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1134, 325, 324, 1135, 326, 503, 967, 327, 328,
	968, 1136, 329, 330, 1137, 1138, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 1139, 218, 971, 348,
	1140, 504, 349, 505, 351, 352, 1141, 353, 354, 355,
	1142, 1143, 357, 358, 359, 1144, 1145, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1146, 371, 372, 508, 373, 509, 374,
	1147, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1148, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1149, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1150, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1151, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 1152,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1153, 443, 444, 442, 1154, 445, 446, 447,
	448, 449, 278, 450, 1155, 451, 514, 515, 516, 517,
	1156, 458, 1157, 452, 453, 518, 454, 519, 1158, 455,
	456, 457, 0, 459, 460, 1159, 1160, 461, 462, 463,
	464, 465, 467, 1161, 468, 1162, 466, 469, 470, 471,
	520, 521, 522, 1163, 473, 472, 523, 1164, 1165, 1166,
	1167, 474, 475, 524, 476, 477, 478, 2091, 0, 902,
	859, 860, 861, 857, 858, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 2088, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 2089, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 2087, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 2090, 0, 0, 0, 0, 0, 0, 872,
	2086, 0, 835, 870, 902, 859, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 182, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 184, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 1332, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 176, 474, 475, 524, 476,
	477, 478, 846, 177, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 902, 859, 860,
	861, 857, 858, 871, 1544, 1542, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 182, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 184, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 1332, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 176, 474,
	475, 524, 476, 477, 478, 846, 177, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 842, 843,
	902, 859, 860, 861, 857, 858, 871, 1544, 2528, 0,
	0, 870, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 848, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	854, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 845, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 855, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 182, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 184, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 849, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 1332, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 176, 474, 475, 524, 476, 477, 478, 846, 177,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 842, 843, 902, 859, 860, 861, 857, 858, 871,
	1544, 1542, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 2178,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 848, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 854, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 2183, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 2179, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	845, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 855,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 2180, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	849, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 846, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 842, 843, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 2135, 870, 902, 859,
	860, 861, 857, 858, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 848,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 854, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 845, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 855, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 849, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 846, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 842,
	843, 0, 0, 0, 0, 0, 0, 0, 872, 2133,
	0, 1399, 870, 902, 859, 860, 861, 857, 858, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 848, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 854, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	845, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 855,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	849, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 1398, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 846, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 842, 843, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 838, 870, 902, 859,
	860, 861, 857, 858, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 848,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 854, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 845, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 850,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 855, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 849, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 846, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 842,
	843, 902, 859, 860, 861, 857, 858, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 3521, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 850, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 902, 859, 860, 861, 857, 858,
	871, 872, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 3374, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 850, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 902, 859, 860,
	861, 857, 858, 871, 872, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 3095, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 846, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 842, 843,
	1604, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 870, 902, 859, 860, 861, 857, 858, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 848, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 854, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 845,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 855, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 849,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 2900, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	846, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 842, 843, 902, 859, 860, 861, 857,
	858, 871, 872, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 848, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 854, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 2005, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 845, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 2004, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 855, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 849, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 846, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 842, 843, 902, 859,
	860, 861, 857, 858, 871, 872, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 848,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 854, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 845, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 850,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 855, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 849, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 846, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 842,
	843, 902, 859, 860, 861, 857, 858, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 1604, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 870, 902, 859, 860, 861,
	857, 858, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 848, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 2183, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 845, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 849, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 846, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 842, 843, 902,
	859, 860, 861, 857, 858, 871, 872, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 872,
	1542, 0, 2188, 870, 902, 859, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 2186, 870, 902,
	859, 860, 861, 857, 858, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 2174, 870, 902, 859, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 2163, 870, 902,
	859, 860, 861, 857, 858, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 2161, 870, 2152, 2159, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 2155, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 2156, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	2157, 2154, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	2158, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	2153, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 2149, 870, 2152,
	2159, 860, 861, 857, 858, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 2155, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 2156, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 2157, 2154, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 2158, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 2153, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 902, 859, 860, 861, 857, 858, 871, 872,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 848, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 854, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 845,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 855, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 849,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	846, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 842, 843, 0, 0, 0, 0, 0,
	1550, 0, 872, 0, 0, 0, 870, 902, 859, 860,
	861, 857, 858, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 1991,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 846, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	1220, 870, 902, 859, 860, 861, 857, 858, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 848, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 854, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 1219, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 845,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 855, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 849,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	846, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 842, 843, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 1214, 870, 902, 859, 860,
	861, 857, 858, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 1213, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 846, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	1209, 870, 902, 859, 860, 861, 857, 858, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 848, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 854, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 845,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 855, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 849,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	846, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 842, 843, 902, 859, 860, 861, 857,
	858, 871, 872, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 848, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 854, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 845, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 855, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 849, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 846, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 842, 843, 902, 859,
	860, 861, 857, 858, 871, 872, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 3550, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 848,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 854, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 845, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 855, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 3549, 460, 0, 849, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 846, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 842,
	843, 902, 859, 860, 861, 857, 858, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	3548, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 3550, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 3549, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 902, 859, 860, 861, 857, 858,
	871, 872, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 0, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 2171, 0,
	0, 0, 0, 0, 0, 2169, 2170, 902, 859, 860,
	861, 857, 858, 871, 872, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 0, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 3550, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 0, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 0, 954, 0, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 218, 0, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 0, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 3549, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 1025, 0, 0, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 870, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 950,
	239, 484, 485, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 495, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1011, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 218, 971, 348, 0, 955, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1017, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 1019, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 182, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 982, 0, 443,
	444, 442, 184, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 983, 454, 984, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 466, 469, 470, 471, 1332, 521, 522, 0,
	473, 472, 523, 1025, 0, 0, 176, 474, 475, 524,
	476, 477, 478, 0, 177, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 1015, 0, 1628, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 950, 239, 484,
	485, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 495, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1011, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 218, 971, 348, 0, 955, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1017, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	1019, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	182, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 982, 0, 443, 444, 442,
	184, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 983,
	454, 984, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	466, 469, 470, 471, 1332, 521, 522, 0, 473, 472,
	523, 2638, 0, 1025, 176, 474, 475, 524, 476, 477,
	478, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 1015, 951, 1628, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 950, 239, 484,
	485, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 495, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1011, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 218, 971, 348, 0, 955, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1017, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	1019, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 983,
	454, 984, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1007, 0, 1025, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 1015, 951, 1013, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 950, 239, 484,
	485, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 495, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1011, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 218, 971, 348, 0, 955, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1017, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	1019, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 983,
	454, 984, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1025, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 1015, 0, 1013, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 950, 239, 484, 485, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 495,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1011, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 218,
	971, 348, 0, 955, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 1017, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 1019, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 983, 454, 984,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1025,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 1015,
	0, 1013, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 950, 239, 484, 485, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 495, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 218, 971, 348,
	0, 955, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 1019, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 983, 454, 984, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 835, 0, 1184,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 1531,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 1088, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 0, 971, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	1332, 521, 522, 0, 473, 472, 523, 1329, 0, 1184,
	176, 474, 475, 524, 476, 477, 478, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 151,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 1088, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 0, 971, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	1332, 521, 522, 0, 473, 472, 523, 0, 0, 0,
	176, 474, 475, 524, 476, 477, 478, 0, 177, 0,
	0, 0, 0, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1184, 1183, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1817, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1088, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 1184,
	1183, 0, 0, 0, 0, 1181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 2838, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 1088, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 0, 971, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 1025, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 0, 0, 1338,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 950, 239, 484, 485, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 495, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 0, 218, 971, 348, 0, 955,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 983, 454, 984, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 835, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 182, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 184, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 1332, 521,
	522, 0, 473, 472, 523, 213, 0, 0, 176, 474,
	475, 524, 476, 477, 478, 0, 177, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 151, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1279, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 1642, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 213, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 1283, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 213, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 2788, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 213,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 1283,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 213, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 2408,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 213, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 2924, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 702, 0, 591, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 1910, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	597, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 596, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 590, 0, 591, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 600, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 597, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 596, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 591, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 600,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 597,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 1942, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 596, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 591, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 600, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 597, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 596,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1363, 0, 1184, 1183, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 1362, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 1361, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 1360, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1327, 0, 1184, 1183, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1326, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1323, 0, 1184, 1183, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1322, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1259, 0, 1184, 1183, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1258, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1256, 0, 1184, 1183, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1255, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1177, 0, 1184, 1183, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1179, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1184, 1183, 0, 0, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 1088, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 0, 971,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1184, 1183, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 600, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1088, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 1731, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 963, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 0,
	0, 971, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1184, 1183, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 1088, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 0, 0, 971,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 1184, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1088, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 2296, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 2293, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 2444, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 2299, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 2441, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 2443, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 2440,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 2298,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 2442, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 2296, 240, 487, 0, 0, 2290, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 2293, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 2299, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 2289, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 2298, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 2297,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1418, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	1421, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 1419,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 1420, 472, 523,
	1172, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1174, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1017, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1169, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1171, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1017, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1076, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1078, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1017, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	553, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 552, 223, 542, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 545, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 546, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 547,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	541, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 542, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 545, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 546, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 547,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 2753, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 1017, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 2379, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1919, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 1845, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1849, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1848,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1838, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1840,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1316, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1315,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1313, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1312,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1310, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1309,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1306, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1305,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1194, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 1196,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 545, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 546, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 547,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 1949, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 1947, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 1945,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 694, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 693, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 692, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 2444, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 3258,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 532, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	531, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 530, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 213, 2431, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 3049, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 2222, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 213, 2431, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 2428, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 1926, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1917, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 573, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 1054, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 1052, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 574, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 570, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 1055, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 569, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1862, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1861, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 573, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 563, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 574, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 570, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 1337, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 569, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1320, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1319, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1267, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1266, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1248, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1188, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 573, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 1054, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 1052, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 574, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 570, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 1055, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 569, 515, 516, 517, 0, 458, 0,
	452, 1053, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 1036, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	563, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 561, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 562, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 564, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 565, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 567, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 557, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	558, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 555, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 549, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 527, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 2729, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 2727, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 2714, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 2391, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 558, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 1875,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 0, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 1289, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1229, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 990, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 0, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 0, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 0, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 0, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1503, 1498, 0,
	0, 0, 0, 1486, 0, 1470, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 1493, 1494, 1495, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 1517, 0, 0,
	0, 1497, 1499, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 1517, 0, 0, 1505, 1497, 1499, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 1515, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 1508,
	0, 1496, 0, 0, 0, 0, 0, 1503, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 1491,
	1516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 1508, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 1481, 1482, 1488, 1509,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	2581, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	1507, 0, 0, 1517, 0, 0, 2578, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 1498, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 1516, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 0, 1491,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1468, 1508, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 1469, 1475,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 1517, 0, 0, 1506,
	1497, 1499, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	1513, 0, 1514, 0, 0, 0, 2577, 0, 0, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 1493, 1494, 1495, 1505, 0, 0, 0, 0,
	0, 1475, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 1507, 0, 0, 1517, 0,
	0, 0, 1497, 1499, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 1514, 0, 0, 0, 0, 0,
	0, 1484, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 1496, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 1467, 1468, 1508, 1500,
	1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 1498, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 1516, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 1491, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 2576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 1517, 0, 0, 1506, 1497, 1499, 1481, 1482, 1488,
	1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 0, 0, 1513, 0, 1514, 0, 0,
	0, 2103, 0, 0, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502,
	1510, 1511, 1512, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 1503, 1498, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 1516, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 1469,
	0, 0, 0, 1508, 0, 0, 0, 0, 1489, 1503,
	1498, 0, 0, 0, 0, 1486, 0, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 1506, 0, 0,
	1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 1507, 0, 0, 1517,
	3504, 0, 0, 1497, 1499, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 1517, 0, 0, 1505, 1497,
	1499, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 1515, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 1508, 0, 1496, 0, 0, 0, 1503, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	1516, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 1508, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 1481, 1482,
	1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 0, 0, 0, 0, 3500, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483,
	0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	1507, 0, 0, 1517, 3430, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 1503, 1498, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 1516, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 1469, 0, 0, 0, 1508, 0, 0, 0, 0,
	1489, 1503, 1498, 0, 0, 0, 0, 1486, 0, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1507, 0,
	0, 1517, 3429, 0, 0, 1497, 1499, 0, 0, 0,
	1492, 1493, 1494, 1495, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 1513, 0, 1514, 0, 0,
	0, 0, 0, 0, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 1517, 0, 0,
	1505, 1497, 1499, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 1515, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 1508, 0, 1496, 0, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 1508,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0,
	3319, 0, 0, 0, 0, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 1506, 0, 0, 1481, 1482, 1488, 1509,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 1507, 0, 0, 1517, 3219, 0, 0, 1497,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 1503, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	1516, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502,
	1510, 1511, 1512, 1469, 0, 0, 0, 1508, 0, 0,
	0, 0, 1489, 1503, 1498, 0, 0, 0, 0, 1486,
	0, 1470, 0, 0, 0, 0, 1516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483,
	0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	1507, 0, 0, 1517, 3172, 0, 0, 1497, 1499, 0,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 1517,
	0, 0, 1505, 1497, 1499, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	1515, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 1508, 0, 1496, 0, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 1508, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 0, 3171, 0, 0, 0, 0, 0, 0, 0,
	1492, 1493, 1494, 1495, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 1506, 0, 0, 1481, 1482,
	1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 1507, 0, 0, 1517, 3170, 0,
	0, 1497, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 1469, 0, 0, 0, 1508,
	0, 0, 0, 0, 1489, 1503, 1498, 0, 0, 0,
	0, 1486, 0, 1470, 0, 0, 0, 0, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 1506, 0, 0, 1481, 1482, 1488, 1509,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 1507, 0, 0, 1517, 3135, 0, 0, 1497,
	1499, 0, 0, 0, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 1517, 0, 0, 1505, 1497, 1499, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 1514, 0, 0,
	0, 0, 1515, 0, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502,
	1510, 1511, 1512, 0, 0, 0, 0, 1508, 0, 1496,
	0, 0, 0, 1503, 1498, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 1516, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 1508, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483,
	0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	0, 0, 0, 0, 2931, 0, 0, 0, 0, 0,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 1506, 0, 0,
	1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 1507, 0, 0, 1517,
	2574, 0, 0, 1497, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 1508, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 1498, 0, 0, 0, 0, 2503, 0,
	1470, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 1493, 1494, 1495, 0, 0, 0, 0, 1469, 0,
	1475, 3602, 0, 0, 0, 1506, 0, 1489, 1481, 1482,
	1488, 1509, 1487, 1483, 1486, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 1507, 0, 2532, 1517, 0, 0,
	0, 1497, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2504, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 1493, 1494, 1495, 0, 1505, 0, 0, 0,
	0, 1475, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 1507, 0, 0, 1517, 0,
	0, 0, 1497, 1499, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 1514, 0, 0, 0, 0, 0,
	0, 1484, 1485, 3601, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 1496, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1491, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2196, 0, 0, 0, 0, 0,
	0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	1503, 1498, 0, 0, 0, 2195, 0, 0, 1470, 0,
	0, 0, 0, 1516, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 0, 0,
	1508, 0, 0, 1506, 0, 1489, 1481, 1482, 1488, 1509,
	1487, 1483, 1486, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 1469, 0, 1475,
	0, 0, 0, 0, 1506, 0, 1489, 1481, 1482, 1488,
	1509, 1487, 1483, 1486, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 1507, 0, 0, 1517, 0, 0, 0,
	1497, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 1514, 0, 0, 0, 0, 0, 0, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 1493, 1494, 1495, 0, 1505, 0, 0, 0, 0,
	1475, 0, 2621, 0, 1490, 2620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 1507, 0, 0, 1517, 0, 0,
	0, 1497, 1499, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 1496, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 1508,
	0, 0, 1506, 0, 1489, 1481, 1482, 1488, 1509, 1487,
	1483, 1486, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 1498, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 1469, 0, 1475, 0,
	0, 0, 0, 1506, 0, 1489, 1481, 1482, 1488, 1509,
	1487, 1483, 1486, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 1507, 0, 0, 1517, 0, 0, 0, 1497,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 1505, 0, 0, 0, 0, 1475,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 1507, 0, 0, 1517, 0, 0, 0,
	1497, 1499, 0, 0, 0, 0, 0, 0, 0, 1504,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 1514, 0, 0, 0, 0, 0, 0, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 1496, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 0, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 1503, 1498,
	0, 0, 0, 2622, 0, 0, 1470, 0, 0, 0,
	0, 1516, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 1508, 0,
	0, 1506, 0, 1489, 1481, 1482, 1488, 1509, 1487, 1483,
	1486, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 2919,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 1493, 1494,
	1495, 0, 0, 0, 0, 1469, 0, 1475, 0, 0,
	0, 0, 1506, 0, 1489, 1481, 1482, 1488, 1509, 1487,
	1483, 1486, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 1507, 0, 0, 1517, 0, 0, 0, 1497, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	1514, 0, 0, 0, 0, 0, 0, 1484, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 1505, 0, 0, 0, 0, 1475, 0,
	0, 0, 1490, 2627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 1507, 0, 0, 1517, 0, 0, 0, 1497,
	1499, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 1496, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 1503, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	1516, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 1508, 0, 0,
	1506, 0, 1489, 1481, 1482, 1488, 1509, 1487, 1483, 1486,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 1498,
	0, 0, 0, 2575, 0, 0, 1470, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 1469, 0, 1475, 0, 0, 0,
	0, 1506, 0, 1489, 1481, 1482, 1488, 1509, 1487, 1483,
	1486, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	1507, 0, 0, 1517, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 1493, 1494,
	1495, 0, 1505, 0, 0, 0, 0, 1475, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 1507, 0, 0, 1517, 0, 0, 0, 1497, 1499,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	1514, 0, 0, 0, 0, 2589, 0, 1484, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 1496, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 1468, 0,
	1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 1503, 1498, 0, 0,
	0, 0, 0, 0, 1470, 0, 0, 0, 0, 1516,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 1508, 0, 0, 1506,
	0, 1489, 1481, 1482, 1488, 1509, 1487, 1483, 1486, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 1493, 1494, 1495, 0,
	0, 0, 0, 1469, 0, 1475, 0, 0, 0, 0,
	1506, 0, 1489, 1481, 1482, 1488, 1509, 1487, 1483, 1486,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1507,
	0, 0, 1517, 0, 0, 0, 1497, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 1514, 0,
	0, 0, 0, 0, 0, 1484, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 1505, 0, 0, 0, 0, 1475, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	1507, 0, 0, 1517, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	1496, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 0,
	1515, 0, 0, 0, 0, 0, 737, 0, 772, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 756, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 746, 0, 0, 0, 778, 0, 1491,
	0, 0, 0, 0, 753, 754, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 773, 748, 1508, 0, 0, 1506, 0,
	0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478,
	1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0, 0,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 0, 0, 0, 0, 750, 751, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 758, 757,
	0, 0, 0, 0, 617, 636, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 777, 0, 0, 0, 618, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	0, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 0, 769, 770, 0, 622,
	0, 0, 623, 645, 0, 0, 0, 650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 761, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 0, 0, 0, 739, 0, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 644, 0, 760, 0, 0, 0,
	0, 0, 626, 0, 0, 776, 0, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 766, 0, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 768, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 0, 0, 648,
	0, 647, 0, 0, 632, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 651, 0, 646,
	0, 0, 0, 0, 638,
}
var sqlPact = [...]int{

	6406, -1000, -1000, -1000, -1000, -1000, -1000, 176, 168, 167,
	162, 161, 160, 159, 157, -1000, -1000, -1000, 156, -1000,
	-1000, 154, -1000, 152, 149, 146, 143, -1000, 140, 139,
	138, -1000, -1000, -1000, -1000, 135, 133, 129, 55654, 1812,
	67206, 58634, 1657, 50088, 66776, 49658, 66346, 65916, 127, -1000,
	65486, 126, 124, 123, -1000, -1000, 114, 1677, 41022, 113,
	112, 109, 1880, 108, 106, -1000, 98, -1000, 78356, 1249,
	-1000, 97, 96, -1000, 6415, 292, 57780, 2222, 93, 90,
	40591, 2210, 2245, -1000, -1000, 1535, -1000, -1000, 89, 88,
	87, 83, 82, 81, 78, 76, 75, -1000, 72, 71,
	69, 68, 67, 66, 65, -1000, 63, 62, 61, 60,
	59, 57, 54, 53, 52, 51, 50, -1000, 78204, 1484,
	1414, 1413, 1411, 1408, 1409, 856, 47, 46, 45, 44,
	40, 39, 37, -1000, -1000, 34, 28, 26, 25, -1000,
	24, 20, 128, 17, 16, 8, 7, 6, 2585, 2252,
	1512, 520, 20064, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 71446, 67630, 5, -54,
	3, -1000, 2597, 854, 33269, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 436, -1000, -1000, -1000, 250,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1568, 661, -1000, -1000, -1000,
	65056, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1806,
	-52, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 660, -1000,
	1802, 192, 1731, -1000, -1000, -1000, -1000, -1000, 67630, -1000,
	-1000, 2863, 2860, 1643, 658, 64632, -1000, 1362, -1000, 779,
	22794, -1000, 1013, -1000, 22794, 247, -1000, -1000, -1000, -1000,
	-1000, 49228, 15967, 48798, 48368, 44518, 64202, 15527, 55230, 1046,
	-1000, -1000, -1000, -1000, -1000, -19, 45380, 67630, -1000, 240,
	-1000, -1000, -1000, -1000, -1000, -1000, 29268, 474, 28803, 389,
	28338, 356, -1000, -1000, -1000, -1000, 2856, 2854, 959, 2853,
	2512, 71022, 1400, 2852, 1396, 1044, 894, 2850, 2847, 2843,
	2842, 2831, 2830, 2829, 1094, 63772, 2303, 1364, 44078, 43638,
	55654, 55654, 2039, 63342, 1097, 1076, -1000, -1000, -1000, -1000,
	-1000, -1000, 2386, 2232, 2212, 38021, -1000, -1000, 2828, 2824,
	2822, 2821, 2818, 70598, 1399, 2817, 1971, 2816, 2814, 2813,
	2810, 2809, 2807, 2806, 2804, 2803, -1000, 54800, 54370, 53940,
	53510, 62912, 43198, 42758, -1000, -1000, -1000, 34985, 8509, 6992,
	62482, 36305, 55654, 55654, -1000, -1000, 29721, 80, -1000, -1000,
	-1000, 2242, -1000, 29721, 80, -1000, 67630, -1000, 2300, 1479,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2137,
	1332, 2697, 42318, 1726, 1100, 2560, 2376, 2370, 1242, 2005,
	2363, 2346, 2324, 2323, 2293, 1360, 2003, 276, 19599, 1243,
	1265, 2290, 2278, 2721, 1777, 47938, 2799, 2798, 2530, 2277,
	2274, 2238, -1000, -1000, -1000, -1000, 1191, -1000, -1000, 50936,
	-1000, -1000, 1018, -1000, -1000, 1018, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1045, 69750, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1697, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1857, -1000, 1566, -1000, -1000, 1839, 1136, 2252, 1956, 2529,
	2529, 2529, 2583, 424, 403, -1000, 128, -1000, -1000, 77866,
	-1000, -1000, 29721, 29721, 29721, 29721, 29721, 1607, -1000, 656,
	-1000, -1000, 694, -1000, 652, 605, -1000, -1000, -1000, -1000,
	-1000, -1000, 645, 2725, -1000, 889, -1000, -1000, -1000, -1000,
	2693, -1000, 18216, -1000, -1000, -1000, 357, 644, 29721, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 219, 798, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 590, 1524, 589, 589, 589, -1000, -1000, 877, -1000,
	-1000, -1000, 307, 588, 267, 578, -1000, -1000, -1000, -1000,
	2299, 643, 642, -1000, 640, 636, 633, -1000, -1000, -1000,
	632, 631, 629, 628, 627, 626, 625, 623, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 874, -1000, 620, 619,
	618, 617, 616, 613, 611, 609, 608, -1000, -1000, -20,
	67630, -1000, 436, -20, -1000, -1000, 607, -1000, 23247, 23247,
	23247, -1000, -1000, 1791, 29721, -1000, 1915, -1000, -13, -13,
	753, 34125, -1000, 32409, 753, 289, 704, 37591, -1000, 2237,
	-1000, -1000, 606, 209, -1000, -1000, 2233, 67630, 16405, 67630,
	55654, 55654, 55654, 2448, 29721, -1000, -1000, 41878, 67630, 56078,
	2639, 10665, 41878, 67630, 2297, -1000, -1000, -1000, 67630, -1000,
	29721, -1000, 2630, 1325, 45808, 2598, -35, -1000, -1000, -1000,
	-1000, -1000, -1000, 1954, 1972, 987, 1838, 1312, -1000, 22794,
	2501, -1000, -1000, -1000, 203, 16405, -1000, 1728, 2418, 1228,
	-1000, 1834, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1475, 2412, -1000, 1757, 2409, 1471, -1000, -1000, 844, 2408,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1670,
	-1000, -1000, 2525, -1000, -1000, 1747, 2407, -12, -1000, -1000,
	35429, 45380, -28, -1000, -1000, -42, -1000, 15087, 77866, -1000,
	-1000, -1000, 77866, 768, -1000, -1000, 2403, -1000, 77866, 755,
	-1000, -1000, 2402, -1000, -1000, -1000, 2797, -1000, 2796, 1906,
	2795, 2794, 2793, -1000, 1299, 1466, 2792, -1000, 2790, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 53080, 1786, -1000, -1000,
	52220, 52650, 890, -1000, 833, 1903, -1000, -1000, 1902, -1000,
	836, -1000, 2789, 62052, 2075, 833, 1901, -1000, -1000, -1000,
	-1000, -1000, 38877, -1000, 38877, -1000, 38877, -1000, 1206, -1000,
	70174, -13, -13, 2693, -1000, -1000, -1000, -1000, -1000, 2394,
	2788, 2782, 2781, -1000, 67630, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 179, 2391, -1000, -1000, 179, 2390,
	-1000, 179, 2388, -1000, 178, 2387, -1000, -1000, 1669, 2385,
	-1000, -65, 2378, -1000, -1000, -65, 2377, -1000, -53, -1000,
	-1000, -1000, 854, -1000, 34555, -1000, 34555, 61622, 44956, 821,
	662, 40161, 77866, -1000, 35429, 77866, -1000, 44956, 52220, -1000,
	61192, 51796, -1000, -1000, 1092, 1993, -1000, -1000, -1000, -1000,
	44956, 44956, 44956, -1000, 60762, -1000, -1000, 1638, 1288, 2527,
	1554, 55654, -1000, 1472, -1000, -1000, -1000, 2545, 2295, -1000,
	41450, 57350, -1000, 56926, -1000, 56502, -1000, 55654, -1000, 55654,
	-1000, 2780, 2778, 2775, -1000, 2773, 2539, 77866, 2535, -1000,
	2362, 1418, 1401, 67630, -1000, -1000, 67630, -1000, 67630, -1000,
	-1000, -1000, 1946, -1000, -1000, -1000, -1000, 55654, -1000, -1000,
	-1000, -1000, -1000, -1000, 2288, -1000, 1355, -1000, 1453, -1000,
	1087, -1000, -1000, 181, -1000, -1000, -35, -1000, 69750, -1000,
	-1000, 2252, 1956, -1000, 67630, -1000, 1315, 55654, -1000, 1987,
	-1000, 1182, -1000, 2252, 1826, 2030, 27873, 2017, 29721, 128,
	-1000, -1000, 128, 128, 22341, -1000, -1000, 10665, 10665, 16405,
	1063, 29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721,
	29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721,
	29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721, 29721,
	29721, 29721, 29721, 29721, 29721, 29721, 1694, 29721, 1043, 29721,
	29721, 29721, 29721, 1421, -1000, -1000, 1494, 473, 1559, -1000,
	2680, 2680, 2680, 77947, 77947, 524, 2768, 694, -1000, 29721,
	-1000, 80, 29721, 16845, -1000, 2714, 1090, -1000, -1000, 403,
	9707, 1889, -1000, 402, 17310, -1000, -1000, -1000, 18216, 605,
	27408, 29721, 870, 77866, 14649, 2313, 2112, -1000, 2713, -1000,
	-1000, 2698, -1000, -1000, -1000, -1000, 2698, 1061, 1055, 2711,
	-1000, 2698, 2698, 604, 675, 672, 19134, 670, 488, 29721,
	29721, 29721, 29721, 29721, 29721, 29721, 29721, -1000, 26955, 26490,
	26025, 31080, 25560, 29721, 18669, 25095, 24630, 67630, -20, 2629,
	29721, 163, -1000, 76390, -1000, 163, 163, 603, -58, 77866,
	2014, 2014, 33697, 1953, 1642, 1642, 1642, -1000, 753, 11129,
	753, 59910, 1659, 753, 753, 202, 233, 394, 31981, 1915,
	59910, 679, 602, 1, -2, -3, -1000, -1000, -4, -5,
	-1000, -1000, 55654, 594, 16845, 16405, 1144, -59, 201, 2018,
	2016, 2013, -1000, 2011, 1264, -60, 1041, -70, -1000, 4640,
	-68, -1000, 1117, -1000, -1000, -1000, 518, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 873, 593, 592, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 590, 1524, 589, 589, 589,
	-1000, -1000, -1000, 307, 588, 267, 578, -1000, -1000, -1000,
	-1000, -1000, -1000, 2223, -42, 56078, 771, -73, 974, -35,
	-1000, -1000, -1000, 45808, 1018, -1000, 1756, -1000, -1000, -1000,
	-1000, -1000, -1000, 1110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2723, -1000, 2695, -1000, -1000, 2710, -21, -1000, -1000,
	16405, -1000, -36, 1467, -1000, 47508, 1947, 2534, 2518, 1197,
	-1000, 1150, 2582, 50936, 2612, 2620, 277, -1000, 2217, -1000,
	-1000, 774, 1334, 1034, 50936, 1757, -1000, 10665, -1000, 2076,
	2576, 1154, 1195, 1154, 1154, 1125, -1000, 50936, 1033, 1557,
	44956, -1000, 1032, -1000, -39, 2610, 2614, 73, -1000, 2215,
	1030, -1000, -1000, 55654, 16405, 746, -1000, 44956, -28, 45380,
	67630, 199, -1000, 29721, 80, 29721, 80, -1000, -1000, 2375,
	-1000, -1000, -1000, 2767, 1410, 1970, -1000, -1000, -1000, 573,
	1897, 2179, 67630, 2021, -33, 55654, -1000, 1757, 1896, -1000,
	-1000, 51366, -1000, 1553, -1000, 2374, 2369, 475, 2765, -1000,
	1785, 1894, -1000, -1000, -1000, 69326, 1074, 2368, 926, 290,
	2628, -1000, 290, 39305, -1000, 67630, -1000, -1000, 67630, -1000,
	-1000, -1000, 2764, -1000, 55654, -1000, -1000, 55654, -1000, 55654,
	-1000, 55654, -1000, 55654, 55654, -1000, 67630, 44956, 44956, 44956,
	6085, 46660, -75, -76, 387, -1000, 60338, 67630, 924, 47084,
	67630, 2487, -206, -1000, 821, 821, 746, -1000, 746, -1000,
	55654, 2285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2763,
	2761, -1000, -1000, -1000, 828, 55654, 67630, 55654, -1000, -1000,
	67630, -1000, 67630, -1000, 828, 67630, 828, 67630, 828, 67630,
	-1000, -1000, -1000, -1000, -1000, -1000, 80, 29721, 1234, -1000,
	2273, -1000, 2254, -1000, 23, -1000, -1000, -1000, -1000, 1455,
	55654, 55654, 55654, 55654, 67630, 55654, -1000, 50936, -1000, -1000,
	2252, -1000, -1000, 1936, -1000, -31, 942, -1000, -1000, -1000,
	-1000, -1000, 77866, 477, -1000, -1000, 77866, 1390, 2041, -1000,
	2041, -32, -1000, 76102, 1986, 55654, -1000, -1000, -1000, -1000,
	-1000, 766, 1116, 1116, 1036, 1036, 1036, 1036, 2650, 937,
	4165, 391, 5447, 5447, 831, 831, 831, 831, 831, 5447,
	3837, 717, 717, 3837, 3837, 3837, 3837, 3837, 717, 717,
	717, 5447, 5447, 5447, 77947, 6130, 9174, 29721, 29721, 1029,
	1462, 473, 8261, 29721, 3823, 3823, 3823, 3823, -1000, 1446,
	-1000, -1000, -1000, -1000, 2176, 572, 31080, 31080, -1000, -1000,
	-1000, -1000, 17763, 29721, -1000, -1000, -1000, -1000, 24165, -1000,
	-1000, 75733, -248, 375, -146, 19, -1000, 29721, 29721, 29721,
	374, -1000, 373, -1000, -1000, 1028, -1000, 1027, 1026, 1019,
	-1000, 571, 197, 29721, 67630, -1000, 72982, 678, -147, -1000,
	-81, 1181, -1000, 29721, 194, -1000, 1625, 570, 563, 370,
	-82, -1000, 368, 763, 758, 366, 363, 362, 29721, -1000,
	-1000, -1000, -1000, -1000, 75445, -1000, -1000, -1000, -1000, -1000,
	77578, 72900, 72637, 72347, 9014, 72301, 10374, -83, 361, -1000,
	2162, -146, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	360, -1000, 358, -1000, 77497, -146, 348, 5622, -1000, 31080,
	31080, 31080, -1000, 344, -1000, 76471, -1000, 77128, 23712, 23712,
	23712, 343, 77209, 29721, -146, -84, -1000, -89, -1000, -1000,
	561, -90, 859, 23247, 32839, 16405, -1000, 859, 859, 29721,
	-1000, 29721, 1998, -1000, -1000, -1000, 1997, 1904, 2014, 33697,
	-1000, -1000, -1000, -1000, 59910, -1000, 2693, 2159, -1000, 59910,
	-1000, -1000, 67630, 436, -1000, 59910, 59910, 16405, 753, -1000,
	753, 59910, 478, -1000, -1000, -1000, -1000, -1000, 342, 36733,
	19, 193, -1000, -1000, 16405, 2113, 2113, 2113, 2113, -1000,
	-1000, 67630, 2652, -1000, 1537, -1000, 10665, -1000, 690, 922,
	-1000, 2709, 560, -1000, 2698, 2698, 67630, 105, 22794, -1000,
	1018, -1000, -1000, 1294, -1000, 1419, -1000, 1051, -1000, -1000,
	-1000, 22794, -1000, 1646, 67630, 67630, 55654, -1000, -1000, 1893,
	68902, 1884, 10665, 67630, -1000, -1000, 559, 556, 1981, 1980,
	67630, 67630, 1979, 68478, 68054, 67630, 1473, 29721, 1623, 1603,
	80, 80, -1000, -1000, 80, 555, 1169, 55654, 55654, 55654,
	1416, -1000, -1000, -1000, -1000, -1000, 50512, -1000, -1000, 2706,
	-1000, 1154, -1000, -1000, -1000, 1154, 1757, 1407, 55654, 44956,
	843, 67630, 1572, 80, 80, -1000, -1000, 80, 553, 16405,
	1444, -1000, 2081, -1000, -92, -1000, -1000, 14211, 77866, -1000,
	77866, -1000, 67630, -1000, 879, 67630, 47084, 824, 2367, 38449,
	-42, 821, 44956, 55654, -33, -1000, 1757, 2366, 436, -1000,
	-1000, 44956, 44956, 44956, 2760, 549, 2759, -1000, 55654, 2356,
	1764, 1877, 2392, 722, 67630, 859, 33697, 1482, -1000, 37163,
	901, 67630, 1386, 77, -1000, -1000, -1000, 13, 67630, -1000,
	2758, -1000, -1000, 179, 179, 179, -1000, 178, 1669, -1000,
	-65, -65, -1000, -1000, 6085, 6085, 821, -34, 526, -1000,
	740, 739, 35867, 44956, -95, -1000, -1000, -1000, -1000, -1000,
	55654, 67630, 624, 2073, 67630, -97, -1000, 189, 525, -1000,
	821, 35429, 2154, -1000, -1000, 839, -1000, 1086, -1000, -1000,
	-1000, -1000, -1000, -1000, -15, -42, -42, -1000, 828, -1000,
	828, -1000, 828, -1000, 77866, -1000, 1233, 1216, 67630, -1000,
	16405, 67630, 55654, 16405, 55654, 2246, 2235, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1390, -1000, 29721, -1000, -1000,
	-1000, 22341, 1856, -1000, -1000, 55654, -16, 29721, 29721, 7787,
	7357, 29721, 31080, 31080, -1000, 29721, 6814, -1000, -1000, -1000,
	-1000, -1000, 2153, 523, 29721, 10665, 5262, 4633, -1000, 339,
	10292, 3837, -1000, 29721, -1000, 337, 21888, -1000, 76759, -38,
	-98, -1000, 2722, 1914, 1673, 1489, 1250, 2700, 13773, -146,
	-103, -1000, -1000, 688, -1000, 2426, -1000, 29721, 76840, 13335,
	-1000, 39733, 860, 1674, -1000, -1000, 2698, 751, -1000, -1000,
	-1000, 751, -1000, 75399, -1000, 10665, 10665, 29721, 29721, -1000,
	29721, 29721, 29721, -1000, -1000, 29721, -1000, -1000, 2139, 29721,
	-1000, 10665, 10665, 31080, 31080, 31080, 31080, 31080, 31080, 31080,
	31080, 31080, 31080, 31080, 31080, 31080, 31080, 31080, 31080, 31080,
	31080, 31080, 1974, 31080, 2678, 2678, 2678, -1000, 2132, 2139,
	29721, 29721, 10665, 335, 332, 331, -1000, 29721, -146, -1000,
	-1000, 6085, -1000, 2111, -1000, 29721, -1000, -108, -1000, 1915,
	-1000, -1000, 2111, 2111, -105, 77866, 33697, 33697, -1000, 522,
	29721, 1995, -1000, -1000, 676, -241, -1000, 734, -1000, -1000,
	-1000, -1000, -1000, 436, -1000, -1000, -1000, 188, 59910, 59910,
	671, -1000, -106, -1000, -1000, -112, -1000, 2624, 327, 16405,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -42, 1709, 2720,
	-1000, 2699, 686, 667, 325, 2698, 324, 323, -42, 67630,
	-1000, -35, -1000, -1000, -1000, 29721, -1000, -1000, 2528, 1017,
	1011, -1000, 2351, -1000, 1876, -1000, 911, -1000, 1338, -1000,
	29721, 29721, 517, 515, 1552, 2757, 923, 2350, 1669, 2348,
	1669, -1000, -1000, 783, -1000, 77866, 513, 512, -1000, -36,
	1383, 837, -1000, -1000, 29721, 29721, 59486, -1000, 354, 2525,
	-17, -1000, 1010, -1000, -1000, -1000, -1000, 1757, 1003, -1000,
	-1000, 1543, -1000, -1000, 835, -1000, -1000, 29721, -1000, -39,
	984, 821, 2136, -1000, -1000, 2754, 2751, 2748, 322, -113,
	-41, 10665, 2622, 1758, 67630, 55654, 756, -1000, 2693, -1000,
	-1000, -1000, 55654, 2619, -1000, 833, -1000, -1000, 2744, -1000,
	920, 16405, 55654, 2347, 1965, 722, 46236, -1000, 833, 1674,
	-50, -1000, 1386, 21423, 2521, -114, -1000, -1000, -1000, 859,
	39305, 33697, 29721, 2743, -120, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 59062, 59062, 44956, 44956, 44956, 821,
	67630, 67630, 47084, 2742, 510, 67630, 67630, 505, -1000, 67630,
	67630, 2741, 44956, -1000, -1000, 80, -1000, 1713, 55654, 12897,
	-1000, -1000, -1000, -1000, -1000, 828, -1000, -1000, 1581, 1833,
	1581, 1359, 1341, 1739, 75111, -1000, -1000, 2026, 2522, 16405,
	2631, 3823, 29721, 29721, 5335, 3916, 466, 3823, 29721, 29721,
	10665, 428, -121, 29721, 29721, -1000, 29721, 666, 77866, 2719,
	29721, 320, 319, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 317, -1000, -1000, -1000, -1000, -1000, 77866, 29721,
	186, -1000, -1000, -1000, 71870, -1000, 29721, 311, 310, -1000,
	-1000, -1000, 308, 303, 10029, 4992, 74823, 74777, 74489, 77866,
	2132, 77866, -1000, -1000, 852, 852, 1148, 1148, 1148, 1148,
	2678, 1285, 1067, 782, 1238, 1238, 1238, 540, 550, 550,
	1238, 1238, 1238, 2135, 1984, 503, 6229, -1000, -1000, 77866,
	77866, 302, -1000, -1000, -1000, -146, 296, 2107, 2575, 77866,
	-1000, 33697, 2107, 2107, -1000, -1000, 1904, 67630, 77866, 33697,
	-1000, 2159, -1000, 11579, -1000, 16405, -1000, -1000, -1000, -1000,
	2693, -1000, 36733, -1000, 501, -1000, 185, -1000, -1000, 551,
	2740, 685, -1000, 286, -1000, -1000, -42, 77866, 67630, 67630,
	67630, 2342, -1000, 2937, -1000, 74201, -127, -1000, 76102, 29721,
	67630, -1000, 1448, 2024, 953, -1000, 2072, 67630, -1000, 67630,
	-1000, -1000, 67630, 67630, 55654, 2333, -128, 77866, -43, -1000,
	733, -1000, 1155, -1000, 12459, 55654, 55654, 44956, 2331, -134,
	16405, -1000, 44956, -1000, -1000, -1000, 2065, -1000, 58204, 1708,
	80, -1000, 2738, 500, -1000, 1689, -1000, 489, 1757, 80,
	-1000, -1000, 495, 67630, 1759, 493, 16405, 1955, 722, 46236,
	-1000, 1074, 2030, -1000, -44, -1000, 497, 80, 1674, -1000,
	-50, 77866, -1000, 732, -1000, -135, -1000, -1000, 284, -1000,
	2475, 2473, -1000, -1000, 29721, 492, 490, 67630, 2469, -1000,
	-1000, -140, -1000, 1948, -1000, -1000, -1000, -1000, -1000, 16405,
	1331, -1000, 483, 482, -1000, -1000, -1000, -1000, -1000, 2522,
	3823, 3823, 29721, 29721, 29721, 3823, 428, -141, -1000, 3823,
	3823, -146, -1000, -1000, 76759, -1000, -1000, -1000, 77866, 12021,
	1589, -1000, 74155, -1000, -1000, -1000, -1000, 29721, 29721, -1000,
	-1000, -1000, -1000, -1000, 31080, 2134, 480, 10665, -1000, -1000,
	832, 29721, 29721, 1915, 832, 832, -1000, -151, -1000, -1000,
	-1000, 2693, 185, -1000, -1000, 2737, 16405, 684, -1000, 2736,
	-1000, -1000, -1000, -1000, 67630, -1000, 67630, -1000, 16405, 67630,
	2129, 1865, -1000, -1000, 1978, 476, 31080, 55654, 750, 2142,
	1460, 29721, 1856, -154, -156, 1862, -1000, -1000, 1861, 29721,
	-1000, 10665, 55654, 1669, 1669, -157, -159, -1000, 29721, 983,
	67630, 20970, -1000, 2733, 2525, -1000, -1000, -1000, 29721, 981,
	-1000, -65, 1572, 2088, -1000, -1000, -1000, -1000, 1976, -1000,
	-1000, 67630, 1975, 827, -1000, 47084, 824, 799, -1000, -1000,
	-1000, 29721, -1000, 55654, 29721, 1752, -1000, 722, 46236, -1000,
	2392, 1386, -1000, 2438, 67630, 2517, -1000, 2030, 473, -1000,
	821, 472, 471, -162, 29721, 29721, -164, 465, 821, -71,
	-1000, 720, 521, -1000, -1000, 55654, 55654, 29721, 29721, -1000,
	3823, 3823, 3823, -1000, 280, -1000, -1000, 1674, 2574, -1000,
	73867, 73579, 1048, 31080, 10665, -165, -1000, 67630, 77866, -146,
	-1000, -1000, -1000, 479, -1000, 2732, -1000, -1000, 1828, -1000,
	-1000, -1000, 67630, 1874, -1000, -1000, 29721, 6229, 464, 29721,
	-1000, -1000, 2058, 2173, 2065, 463, -1000, -1000, -1000, -1000,
	-1000, 1406, -1000, -1000, 77866, 2552, -1000, -1000, -1000, 451,
	450, 77866, 446, 721, 2128, -1000, -1000, -1000, 77866, 444,
	824, -1000, 1615, 1708, 443, -1000, -1000, -1000, 2066, 269,
	2618, 799, -1000, 2687, -1000, -167, 920, -170, 55654, 46236,
	-1000, 1965, -1000, 1102, -173, 67630, 1386, -1000, -1000, 44956,
	44956, 1460, -178, -180, -1000, 44956, -1000, 1948, -1000, 67630,
	-1000, 67630, -1000, -1000, -181, -183, -1000, 1433, 29721, -1000,
	-1000, 1048, -186, -1000, -115, -1000, 2616, -1000, -1000, -1000,
	-1000, 2340, 73533, 1930, 67630, 73245, 2160, -1000, -1000, 1572,
	67630, 55654, 916, 16405, 1581, 1581, 29721, 20517, 1606, 29721,
	-1000, 55654, 67630, -1000, 2465, 2065, 80, -1000, -1000, 1460,
	441, 1460, 440, -1000, 1955, 1189, -1000, 859, -1000, -1000,
	-189, -192, 2065, 1460, -1000, -194, -1000, -197, -199, -1000,
	-1000, 256, 30627, 30627, 30627, -146, -1000, 67630, 438, 2325,
	-1000, 1743, 1464, 253, 925, -1000, -1000, 2142, -200, 436,
	-1000, 29721, -1000, -205, -1000, 900, -207, -1000, 899, -212,
	-1000, 2123, -1000, -213, 432, -215, -1000, -1000, -1000, 1572,
	827, 2065, 29721, 2065, 29721, -1000, 39305, -1000, 821, 821,
	1572, 2065, 821, -1000, -1000, -1000, 2420, -1000, 31533, 1730,
	1293, 76021, 2420, 2420, -1000, -1000, 67630, -1000, 1751, 1744,
	1241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1930,
	77866, -1000, 1581, 2085, -1000, 1581, 2120, -1000, 1556, -1000,
	67630, -1000, 67630, 824, -1000, 1572, -218, 1572, -223, -208,
	-1000, -1000, -1000, 1572, -1000, -1000, 1457, 2625, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2452, -1000, 940,
	1821, 1821, 1743, -1000, 431, -1000, 429, -1000, -224, -1000,
	-1000, 838, 1460, 838, 1460, -1000, -1000, 1272, -1000, -1000,
	1653, 30174, -1000, 2665, -1000, -1000, 2010, -1000, 2142, 29721,
	29721, 1668, -1000, 2729, 2065, -1000, 2065, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -225, -226, -1000, -1000, -1000, -1000,
	1572, 1572, 1572, 980, 838, 838, -1000, 426, -1000, -1000,
	29721, -233, 1572, -1000,
}
var sqlPgo = [...]int{

	0, 3403, 3402, 3398, 3397, 3396, 3395, 3393, 3392, 3391,
	3390, 3389, 3387, 3386, 3385, 3383, 3382, 3381, 3380, 3379,
	3378, 3376, 3371, 3369, 3366, 3363, 3361, 3360, 3358, 3355,
	3353, 3352, 3351, 3347, 3346, 3340, 3337, 3335, 3333, 3332,
	3331, 3327, 3325, 3323, 3321, 3320, 3314, 3313, 31, 3312,
	3310, 3305, 3303, 3302, 3300, 3299, 3298, 3297, 3296, 3294,
	3292, 3289, 3288, 3287, 3286, 3282, 34, 3278, 217, 3277,
	3272, 3268, 3265, 3261, 3260, 3259, 3257, 3256, 3255, 215,
	3254, 140, 3253, 3252, 3251, 3250, 3249, 214, 3244, 3243,
	3240, 3238, 3236, 3235, 3234, 3231, 132, 3225, 3223, 193,
	3220, 3219, 3212, 3211, 3208, 3206, 3204, 3203, 3202, 3201,
	191, 3200, 212, 3198, 3195, 3187, 3186, 3185, 3183, 3182,
	3181, 3180, 3178, 3175, 3173, 3172, 3170, 3169, 3168, 3167,
	3166, 3165, 3164, 3163, 3162, 3158, 3156, 3154, 3153, 3152,
	220, 173, 3151, 3150, 211, 210, 3143, 3141, 97, 93,
	68, 3139, 127, 129, 189, 7871, 184, 3138, 3136, 3135,
	150, 3129, 3125, 3121, 3116, 84, 53, 139, 143, 130,
	136, 138, 3112, 3111, 67, 55, 32, 27, 102, 3110,
	3109, 3108, 2535, 94, 3107, 3100, 205, 188, 3098, 1532,
	3097, 128, 87, 74, 58, 76, 3095, 115, 19, 3093,
	162, 88, 3091, 124, 66, 30, 5509, 7007, 3089, 80,
	223, 78, 137, 168, 167, 172, 166, 133, 89, 3088,
	194, 3083, 116, 158, 3082, 3072, 3070, 56, 151, 72,
	3068, 2, 5, 145, 16, 95, 14, 3065, 12, 3064,
	3062, 3060, 3054, 29, 125, 3053, 104, 91, 3050, 69,
	3048, 71, 163, 3046, 196, 100, 3041, 3039, 200, 152,
	157, 3035, 10, 179, 3034, 3033, 3032, 3030, 3029, 112,
	22, 98, 3028, 3027, 108, 185, 3026, 35, 3025, 131,
	65, 117, 219, 99, 180, 86, 174, 144, 181, 3024,
	3022, 3018, 176, 3016, 3015, 126, 165, 3014, 3013, 221,
	33, 54, 183, 57, 3012, 121, 3011, 160, 3010, 3009,
	3008, 218, 135, 169, 6, 85, 90, 25, 8, 182,
	113, 202, 75, 3007, 3105, 1487, 350, 3006, 109, 96,
	37, 92, 106, 208, 49, 3005, 3004, 1444, 3002, 3001,
	2999, 2997, 146, 2995, 2993, 2992, 105, 134, 170, 2991,
	119, 61, 11, 141, 201, 213, 83, 164, 154, 192,
	2990, 147, 2987, 40, 120, 2986, 155, 199, 118, 2985,
	156, 111, 2984, 206, 2983, 2982, 2981, 2980, 43, 2979,
	2978, 52, 2975, 110, 2974, 2973, 149, 114, 171, 79,
	28, 2971, 70, 107, 2942, 153, 50, 2939, 2412, 63,
	0, 6554, 5283, 6391, 2936, 2193, 2931, 161, 103, 2928,
	2924, 2923, 73, 2921, 38, 2918, 2917, 36, 2915, 15,
	7, 9, 21, 17, 1248, 1144, 2914, 2913, 82, 101,
	122, 2912, 222, 175, 2906, 2905, 2904, 62, 2903, 26,
	2902, 24, 2899, 2897, 23, 3, 18, 2896, 2895, 186,
	2894, 190, 2893, 2892, 2639, 2891, 204, 64, 2890, 197,
	2888, 142, 187, 2887, 2886, 2885, 2884, 195, 2883, 2882,
	13, 20, 1, 2881, 2878, 2876, 159, 4, 2469, 2874,
	2872, 60, 2871, 2870, 148,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 456,
	456, 19, 31, 20, 32, 13, 457, 457, 457, 457,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	455, 455, 170, 170, 169, 164, 164, 458, 458, 171,
	171, 171, 173, 173, 37, 37, 95, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 398, 398, 399, 399, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	465, 465, 466, 466, 467, 467, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 245, 245, 221, 221, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 451, 451, 259, 259,
	365, 365, 68, 68, 278, 278, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	260, 260, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 367, 367, 80, 80, 80,
	335, 335, 84, 84, 84, 293, 293, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	454, 454, 252, 252, 186, 186, 186, 186, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 461, 461,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 392,
	392, 268, 268, 390, 390, 406, 406, 391, 391, 225,
	225, 225, 225, 225, 226, 226, 226, 397, 397, 397,
	397, 397, 397, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 299, 299, 299, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 136, 136, 136, 136, 136, 136,
	349, 349, 132, 132, 132, 132, 135, 135, 135, 135,
	283, 283, 129, 129, 129, 130, 130, 130, 134, 134,
	137, 137, 137, 137, 116, 116, 116, 469, 469, 469,
	138, 138, 128, 128, 139, 139, 139, 139, 139, 139,
	139, 139, 127, 127, 127, 126, 126, 126, 126, 119,
	452, 452, 449, 449, 449, 449, 449, 449, 449, 450,
	450, 453, 453, 89, 89, 89, 58, 58, 470, 470,
	470, 59, 59, 471, 471, 471, 459, 459, 459, 460,
	460, 460, 460, 460, 460, 227, 227, 228, 228, 316,
	316, 316, 316, 316, 231, 231, 172, 172, 172, 234,
	235, 235, 232, 232, 233, 233, 233, 237, 237, 236,
	239, 239, 238, 315, 413, 413, 415, 415, 415, 415,
	415, 415, 415, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 411, 411, 411, 412, 407, 407, 408,
	408, 408, 408, 229, 229, 230, 230, 230, 230, 409,
	410, 250, 250, 352, 414, 414, 416, 416, 418, 472,
	472, 472, 472, 472, 472, 473, 473, 314, 314, 243,
	243, 419, 419, 419, 419, 420, 420, 420, 420, 420,
	423, 422, 421, 421, 421, 421, 421, 345, 345, 345,
	62, 62, 62, 280, 280, 279, 279, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 143, 143, 60, 60, 60, 178, 178, 57,
	57, 57, 475, 475, 61, 61, 61, 476, 476, 67,
	67, 67, 67, 67, 67, 56, 56, 56, 56, 56,
	477, 477, 300, 300, 298, 298, 249, 249, 351, 190,
	190, 165, 165, 165, 23, 25, 25, 17, 17, 34,
	34, 35, 35, 30, 30, 462, 462, 463, 463, 90,
	90, 94, 94, 94, 102, 102, 142, 142, 142, 142,
	142, 142, 142, 38, 38, 38, 38, 50, 50, 50,
	50, 100, 479, 479, 479, 101, 101, 478, 478, 185,
	185, 185, 185, 187, 187, 311, 311, 312, 312, 480,
	480, 313, 313, 313, 313, 180, 179, 181, 181, 55,
	55, 55, 174, 174, 175, 175, 176, 176, 177, 177,
	481, 481, 87, 87, 87, 145, 145, 220, 220, 220,
	307, 307, 307, 244, 244, 195, 195, 310, 310, 308,
	308, 308, 308, 277, 277, 277, 144, 144, 257, 257,
	270, 270, 271, 271, 362, 362, 272, 99, 99, 155,
	155, 153, 153, 153, 153, 153, 153, 160, 160, 261,
	261, 161, 161, 161, 161, 162, 162, 162, 154, 154,
	154, 156, 156, 156, 156, 156, 156, 156, 159, 159,
	159, 159, 163, 163, 163, 158, 158, 430, 430, 430,
	432, 432, 433, 429, 429, 431, 431, 474, 474, 282,
	282, 282, 241, 242, 240, 240, 247, 247, 246, 248,
	248, 350, 350, 350, 166, 166, 166, 275, 275, 275,
	275, 303, 303, 301, 301, 301, 302, 302, 304, 304,
	304, 305, 305, 306, 306, 274, 274, 331, 331, 157,
	157, 157, 254, 254, 254, 255, 255, 322, 322, 322,
	322, 322, 322, 323, 323, 321, 321, 321, 321, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 354, 355,
	355, 256, 256, 356, 309, 309, 447, 447, 447, 448,
	448, 348, 348, 357, 357, 357, 357, 357, 357, 346,
	346, 347, 347, 363, 364, 364, 286, 286, 286, 286,
	284, 284, 287, 287, 287, 287, 285, 285, 358, 358,
	358, 358, 276, 276, 359, 359, 359, 359, 360, 317,
	318, 318, 368, 368, 368, 368, 383, 253, 253, 253,
	253, 253, 482, 482, 369, 369, 369, 369, 369, 369,
	369, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 373, 373, 373, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 382, 382, 382, 382, 382, 374,
	374, 379, 379, 380, 380, 380, 375, 376, 381, 381,
	381, 381, 483, 483, 385, 385, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 371, 371, 371, 378, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 294, 294, 295, 295, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 326, 326, 326, 326, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	424, 424, 424, 424, 424, 424, 424, 424, 427, 427,
	428, 428, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 434, 434, 435, 435, 437, 437, 438, 438,
	439, 440, 440, 440, 441, 442, 442, 436, 436, 443,
	443, 443, 443, 444, 444, 445, 445, 445, 445, 445,
	446, 446, 446, 446, 446, 337, 337, 338, 338, 344,
	344, 344, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 188, 188,
	188, 188, 188, 266, 266, 264, 264, 264, 267, 267,
	265, 265, 263, 263, 262, 262, 334, 334, 332, 332,
	336, 336, 288, 288, 384, 384, 384, 384, 384, 384,
	384, 384, 289, 289, 289, 297, 290, 290, 291, 291,
	291, 291, 291, 328, 329, 292, 292, 292, 330, 330,
	339, 343, 343, 342, 341, 341, 340, 340, 319, 319,
	320, 320, 273, 273, 484, 484, 269, 269, 361, 361,
	361, 361, 223, 223, 258, 258, 222, 222, 215, 215,
	216, 216, 216, 216, 251, 251, 386, 386, 386, 387,
	388, 389, 333, 205, 204, 192, 193, 203, 202, 201,
	191, 194, 198, 199, 200, 196, 197, 211, 210, 209,
	207, 208, 366, 217, 217, 218, 218, 218, 219, 219,
	219, 219, 189, 189, 212, 212, 213, 214, 214, 206,
	206, 206, 182, 182, 182, 183, 183, 184, 184, 396,
	396, 394, 394, 394, 395, 395, 395, 395, 393, 393,
	393, 393, 393, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 402, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 405, 405,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 6, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 10, 10, 3, 5, 5, 5, 3, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	3, 9, 12, 0, 2, 3, 1, 1, 0, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 5,
	8, 5, 11, 3, 0, 2, 4, 3, 3, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 2, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 3, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 3, 0,
	2, 2, 4, 2, 3, 0, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 3, 1,
	3, 3, 4, 5, 2, 2, 0, 2, 2, 1,
	1, 1, 0, 2, 2, 5, 2, 3, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 4,
	4, 3, 4, 1, 5, 3, 4, 5, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 5, 6, 4, 6, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 1, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 2,
	1, 0, 2, 5, 7, 2, 1, 2, 4, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 5, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 467, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 324, 334, 318, -107, -108,
	353, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -464, 86, -431,
	-71, -74, -76, -468, 116, 131, 175, 286, -92, -93,
	320, 322, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 357, 404,
	42, 367, 71, 119, 328, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -430, -72, -73, -75, -77, -78, 319, -156,
	-154, 464, 417, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 435, 443, -159, -157,
	-158, -163, 341, 425, 381, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, -207, -212, -213, -214, -206,
	-182, -402, -405, 4, -400, -403, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 387, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 304, 306, 307, 309, 310, 311, 312, 313,
	318, 315, 316, 317, 319, 320, 321, 322, 324, 326,
	327, 328, 329, 331, 333, 354, 355, 369, 334, 335,
	336, 337, 338, 339, 340, 344, 348, 345, 346, 347,
	342, 343, 349, 350, 351, 353, 356, 357, 359, 360,
	362, 363, 365, 366, 367, 368, 370, 373, 374, 375,
	371, 372, 380, 378, 379, 382, 383, 384, 385, 386,
	388, 390, 398, 399, 401, 404, 405, 406, 396, 408,
	409, 412, 413, 414, 415, 416, 421, 417, 419, 422,
	423, 424, 430, 429, 436, 437, 439, 440, 441, 33,
	43, 44, 46, 49, 60, 61, 62, 65, 103, 104,
	124, 134, 135, 146, 160, 162, 169, 170, 171, 189,
	195, 197, 201, 221, 256, 258, 274, 278, 291, 293,
	305, 330, 361, 376, 391, 392, 393, 394, 400, 402,
	425, 426, 427, 431, 438, 265, -200, 2, -182, -182,
	294, 26, 2, 26, 290, 343, 383, 385, 2, -454,
	-252, 2, 26, -186, -182, 86, 158, 341, -200, 2,
	-454, -252, 24, 2, -182, 2, -187, 2, 334, -182,
	467, 81, 228, 64, 330, 350, -110, 399, -109, 391,
	336, -111, -392, 2, 244, -182, 467, 467, 467, 467,
	2, 381, 283, 429, 342, 418, 99, 302, 182, -449,
	2, 4, -403, -400, -216, -215, 381, 99, -214, -206,
	457, -213, 467, 467, 467, 2, 204, 205, 301, 300,
	350, 351, 467, 467, 467, 2, 25, 58, 80, 83,
	105, 133, 153, 156, 270, -465, 236, 280, 299, 336,
	349, 380, 388, 401, -460, 368, 59, -459, 418, -475,
	406, 114, -298, 99, 228, 157, 413, 385, 383, 326,
	161, 411, 109, 188, 416, 415, 467, 467, 25, 58,
	67, 83, 114, 133, 153, 156, -467, 280, 299, 333,
	336, 349, 380, 388, 406, 401, 2, 429, 342, 381,
	182, 99, 418, 326, 297, -81, 2, 464, 29, 28,
	353, -152, 381, 198, 2, -182, 204, 205, 2, 467,
	467, -449, 2, 204, 205, 2, 198, 2, 59, 338,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 2, -140, 350,
	368, 167, 41, 64, 26, 298, 69, 284, 100, 159,
	182, 183, 212, 80, 81, -299, 40, 205, 204, -349,
	382, 337, 343, 378, 399, 86, 419, 327, 441, 302,
	303, 127, 4, 99, 244, 352, 391, 228, 73, -474,
	2, 381, -478, 2, 399, 399, 2, -478, 2, -478,
	2, -185, 2, 399, 395, -479, 399, 438, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, -154, -156, -155, 467, 467, 467, 467, 467, -140,
	350, 2, 64, 26, -160, -161, 151, -246, -247, 410,
	196, 122, 271, -153, -155, 2, -430, -390, 2, -324,
	-406, -326, 455, 456, 448, 251, 442, -337, 105, 411,
	265, -405, -327, -339, 124, 330, -267, 8, 9, 5,
	6, 7, -189, -370, -333, -378, 403, 136, 255, -219,
	468, 10, 464, -427, -155, -338, 34, 162, 57, -394,
	-218, -372, -380, -376, -377, -482, 47, 53, 52, 388,
	243, 344, 345, 362, 346, 347, 45, 421, 179, 262,
	264, 190, 4, 197, -217, -206, -424, -425, -400, -401,
	189, 195, 191, 361, 192, 193, 194, 44, 305, 147,
	148, 146, 115, 104, 103, 258, 49, 48, 46, 426,
	-381, 101, 391, 392, 393, 394, 207, 208, -182, -402,
	67, 91, 92, 90, 95, 94, 96, 93, 352, 418,
	58, 33, 169, 170, 201, 256, 171, 65, -426, 372,
	87, 155, 187, 173, 200, 202, 206, 222, 225, 245,
	249, 253, 275, 277, 325, 358, -483, 427, 134, 135,
	278, 291, 376, 400, 402, 160, 221, 60, 61, -432,
	306, -433, -200, -432, 467, 467, 469, 467, -240, -241,
	-242, 2, 26, 112, 464, 2, -353, 2, -354, -358,
	-155, 216, -357, 464, -355, 462, -207, 266, -428, 331,
	-424, -425, -189, -206, -218, 4, -243, 464, 466, 99,
	381, 68, 182, -293, 464, -182, 26, 265, 395, 469,
	-335, 464, 265, 154, 268, -182, 2, 2, 354, 2,
	464, -110, 62, 399, 39, 350, -312, 2, -313, -179,
	-180, -181, -363, 203, 296, 304, 444, 441, -390, -461,
	154, 447, 395, -390, -268, 466, 2, -358, 169, -207,
	2, -204, -393, 4, -400, -403, -401, -404, 67, -402,
	26, 28, 29, 30, 32, 34, 35, 36, 37, 50,
	57, 58, 63, 66, 68, 80, 86, 90, 91, 93,
	92, 94, 95, 96, 105, 107, 110, 112, 113, 117,
	119, 122, 136, 138, 151, 153, 154, 158, 161, 164,
	176, 186, 196, 198, 216, 219, 226, 229, 230, 251,
	255, 261, 265, 266, 270, 271, 288, 295, 308, 323,
	341, 352, 364, 377, 381, 389, 395, 397, 403, 410,
	411, 418, 420, 428, 432, 433, 434, 435, -405, 2,
	-358, 169, 2, -209, 169, -358, -212, 2, -398, 169,
	-396, 10, -395, 5, 4, -400, -403, -401, 2, -191,
	-182, 2, -203, -393, 2, -222, 169, -207, -208, -212,
	395, 469, -258, -215, -216, -251, -182, 466, -324, 2,
	-99, 2, -324, 169, 2, -99, 169, 2, -324, 169,
	2, -99, 169, 2, 2, 2, 401, 2, 83, 169,
	-182, 381, 98, 2, 317, -466, 333, 405, 429, 2,
	2, 2, 2, 2, 2, 2, 381, -196, 2, -182,
	151, 342, -476, 306, -398, 169, 2, -398, 169, 2,
	-210, -212, -210, 182, 199, -191, 169, 2, 385, 383,
	385, 383, 154, 2, 198, 2, 198, 2, -359, 2,
	-360, -354, -207, 462, 2, 2, 2, 2, 2, 169,
	-182, 381, 98, 2, 214, 2, 2, 2, 2, 2,
	2, 2, 2, 2, -260, 169, 2, -207, -260, 169,
	2, -260, 169, 2, -223, 169, 2, -222, -191, 169,
	2, -399, 169, 2, -398, -399, 169, 2, -367, 2,
	-366, -395, 425, -81, 464, -81, 464, 350, 464, -398,
	-207, -207, -324, -99, 154, -324, -99, -152, 151, 2,
	99, 381, -140, 2, 151, 420, 2, 8, 2, -398,
	337, 303, 143, 2, 354, 2, 355, 64, -299, 441,
	64, 154, 2, 154, 2, -283, 2, 435, -452, 2,
	265, 154, 2, 154, 2, 154, 2, 154, 2, 154,
	2, 300, 351, 205, 2, -99, 432, -324, 432, 2,
	398, 213, 128, 154, -283, 2, 154, 2, 154, 2,
	5, 2, 203, 296, 369, 2, -207, -469, 2, 381,
	429, 342, 2, 2, 76, 77, 154, 2, 154, 2,
	154, 441, 2, -276, -358, -311, -312, -311, 395, -187,
	-160, -246, -247, -140, 354, 2, -261, 259, 415, 247,
	356, 211, -160, -275, -301, -302, 226, 138, 261, -282,
	26, 112, -282, -282, 51, 465, 465, 11, 12, 66,
	38, 455, 456, 457, 458, 149, 459, 460, 453, 454,
	452, 445, 446, 450, 209, 210, 82, 449, 447, 75,
	234, 332, 139, 140, 141, 142, 314, 180, 31, 181,
	14, 15, 16, 30, 270, 225, 442, 173, 358, 448,
	17, 18, 19, 200, 202, 253, 43, 176, -188, -224,
	-324, -324, -324, -324, -324, 277, 464, -273, -319, 462,
	-155, 464, 464, 464, 5, 464, 5, -389, 8, -155,
	-324, -337, 465, -265, 464, -155, -337, -332, 464, 330,
	462, 464, -340, -324, 466, -434, 436, -374, 464, 293,
	-373, 464, -373, -373, 430, -371, 464, 443, 437, 464,
	-371, 464, 464, 151, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 430, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 469, -432, -243,
	464, -269, -361, -324, 457, -269, -269, 265, -262, -324,
	87, -286, 206, 245, 155, 222, 325, 187, -321, 468,
	-321, -348, 443, -155, -355, -206, -155, -357, 464, -353,
	-348, -82, -389, -68, -79, -87, -99, -112, -144, -145,
	457, -207, 464, 154, 464, 466, 154, -251, -393, -191,
	-207, -217, -218, -222, 111, -262, -449, -251, -186, 35,
	-334, -368, -369, -370, -379, -375, -378, -382, 47, 53,
	52, 388, 243, 344, 345, 362, 346, 347, 45, 421,
	179, 262, 264, 190, 4, 46, 426, -381, 197, 310,
	311, 309, 313, 312, 189, 195, 191, 361, 192, 193,
	194, 44, 305, 147, 148, 146, 115, 104, 103, 258,
	49, 48, 101, 391, 392, 393, 394, 207, 208, 427,
	372, 60, 61, -449, -251, 151, -392, -262, 35, -312,
	2, 105, -396, 39, -480, 469, 224, -226, 233, 250,
	166, 266, 439, 259, -397, 5, 4, -333, -345, 105,
	228, -378, 9, 456, -386, 8, 455, -391, -390, 89,
	466, -393, -168, 315, -167, 23, 27, 116, 423, 129,
	-233, 184, 283, 124, 365, 414, -456, -457, 335, 386,
	387, 78, 259, 315, 124, -279, -281, 35, 97, 247,
	279, 54, 177, 238, 239, 367, 431, 124, 315, 435,
	124, -457, 315, -457, -170, 365, 414, -456, -457, 335,
	315, -169, -233, 124, 468, -96, -398, 464, -258, 469,
	469, -393, 457, 124, 124, 124, 124, 2, 2, 251,
	2, 2, 2, 156, -459, -467, 2, 2, 2, -207,
	169, -245, 265, -451, -259, 381, -207, -209, 169, 2,
	-212, 429, -178, -429, 435, 251, 251, 35, 464, 2,
	-193, 169, 2, -183, -182, 182, -429, 251, -359, -220,
	-207, -354, -220, 353, -200, 35, -321, -321, 124, 2,
	2, 2, -182, -171, 469, 56, 321, 124, -171, 124,
	-171, 124, -171, 469, 124, -171, 124, 469, 124, 124,
	465, 469, -367, -367, -398, -150, 435, 154, 86, 464,
	464, -152, -97, -96, -398, -451, -191, 2, -207, 2,
	381, 207, -398, -398, -398, -392, 26, 355, 2, 300,
	351, 77, 355, 2, -207, 381, 99, 182, 70, -453,
	151, -450, 326, -449, -207, 99, -207, 99, -207, 99,
	-207, -207, 2, 2, 2, 2, 74, 74, 151, 2,
	398, 2, 398, 2, -182, -182, -182, 224, -207, 151,
	381, 182, 381, 182, 99, 381, -171, 469, -187, -160,
	-275, -392, -162, 360, 254, -260, 211, 356, -160, -302,
	-301, 26, -324, -306, 145, 246, -324, -326, -154, -154,
	-154, -248, -350, -324, 295, 182, -383, -368, -368, -205,
	-393, 391, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, 225, 173, 358,
	43, 176, -324, 395, -324, -324, -324, -324, 242, 251,
	255, 403, 136, 412, 112, 259, -484, 377, 37, -330,
	-155, -266, 464, -344, 32, 364, 26, -337, 464, 2,
	-319, -324, -320, -263, -262, -262, 465, 428, 26, 112,
	457, 2, 8, -294, -296, 440, 241, 102, 168, 240,
	-295, 340, 465, 469, 35, 465, -324, -263, -336, -332,
	-262, -343, -342, 432, -393, 457, -435, 144, 161, 8,
	-387, 8, -387, 391, 391, 8, -387, -387, 464, 465,
	2, 465, 2, 465, -324, 2, 465, 2, 465, 2,
	-324, -324, -324, -324, -324, -324, -324, -262, -288, 2,
	-384, -262, 4, 440, 241, 102, 168, 240, 340, 5,
	-288, 2, -289, 2, -324, -262, -290, -325, -326, 455,
	456, 448, -337, -291, 2, -324, -263, -324, 50, 219,
	397, -292, -324, 154, -262, -262, 2, -262, 2, -433,
	35, -262, -254, 469, 154, 35, 4, -254, -254, 464,
	465, 469, -287, 165, 237, 232, -287, -353, -286, 206,
	-284, 275, -284, -284, -348, -192, 462, 470, -393, -348,
	-347, -346, 35, -200, 272, -348, -348, 466, 465, -347,
	463, -447, 464, 467, 467, 467, 467, 467, -207, 464,
	-262, -393, 370, 465, 466, 200, 200, 200, 200, 331,
	465, 395, 435, -81, 267, 465, 469, -253, 34, 462,
	-296, 464, -385, 430, 464, 464, 154, -252, -461, 465,
	399, -313, -225, 304, 363, 316, 348, 379, 9, 8,
	8, 469, -393, 469, -462, 80, 395, 68, -315, 169,
	68, -407, -194, 80, -408, -182, 63, 411, 295, 153,
	-462, 80, 295, -462, 80, 80, 353, 368, 51, -358,
	38, 38, 26, -99, 220, 154, 441, 381, 182, 395,
	-358, -281, -368, 97, 238, 239, 51, -388, -386, 456,
	-388, 51, -388, -388, -388, 435, -209, -358, 395, 285,
	-398, 395, 469, 38, 38, 26, -99, 220, 154, 395,
	-222, -192, -364, -363, -399, -215, -182, 466, -324, -99,
	-324, -99, 124, 2, -476, 214, 464, -229, 251, 154,
	-251, -365, 198, 469, -259, -280, -279, 251, -211, 2,
	-207, 285, 124, 124, 464, 120, 302, 2, 265, 251,
	-193, 169, -174, 384, 124, -278, 420, -307, -99, 464,
	105, 35, -307, -270, -271, -362, -272, -194, 464, -200,
	-182, 2, -207, -260, -260, -260, -222, -223, -191, -398,
	-399, -399, -81, -366, 465, 465, 465, -149, 269, -148,
	-182, 5, -152, 420, -228, -316, -315, -411, -412, -407,
	225, 182, 411, 199, 137, -244, -195, -194, 98, -150,
	-363, 469, -150, -150, -364, -364, -207, 151, 2, 2,
	-283, -207, -191, -222, -207, -251, -251, -283, -191, -283,
	-191, -283, -191, -99, -324, 350, 151, 151, 466, -283,
	302, 99, 381, 283, 182, -207, -222, -207, -222, -191,
	-207, -358, -160, 231, 415, -304, -386, 464, -305, 330,
	331, 469, -165, 36, 110, 211, -207, 441, 121, -324,
	-324, 395, -484, 377, -330, 121, -324, 242, 255, 403,
	136, 412, 112, 259, 154, 464, -325, -325, 465, -264,
	-324, -324, 463, 472, 465, -247, 469, -246, -324, -262,
	-262, 465, 465, 395, 395, 395, 395, 464, 466, -262,
	-251, 463, 463, 469, 465, -341, -342, 117, -324, 466,
	-440, 276, 464, 464, 465, 465, 469, 465, 441, 441,
	465, 465, 465, -324, 465, 35, 469, 469, 469, 465,
	469, 469, 469, 465, 465, 154, 465, 465, -297, 288,
	465, 11, 12, 455, 456, 457, 458, 149, 459, 460,
	453, 454, 452, 445, 446, 447, 75, 234, 332, 14,
	15, 16, 200, 176, -325, -325, -325, 465, -328, -329,
	154, 151, 35, -292, -292, -292, 465, 154, -262, 465,
	465, 464, 465, -318, -317, 433, -361, -255, 2, -353,
	-202, -393, -318, -318, -262, -324, 206, 206, -285, 420,
	265, -287, -353, -347, -389, -323, -322, 152, 36, 110,
	248, 172, -347, -200, -243, -347, -347, -393, -348, -348,
	-346, 465, -448, -389, 465, -256, -356, -428, -247, 466,
	-393, -141, 5, 255, -141, -141, -141, -251, 24, 289,
	-368, 462, 463, 8, 8, 464, -387, -387, -251, 154,
	-390, -312, 409, 72, 304, 391, -390, -167, 315, -194,
	-194, -207, 251, -315, 169, -173, 251, -368, -201, -182,
	464, 464, 211, 211, -194, -201, 211, 169, -194, 169,
	-201, -201, -455, 304, 260, -324, 227, 302, 252, -168,
	315, -99, -99, -99, 464, -461, 420, 111, -207, -222,
	-207, -211, 315, 249, -217, -388, -388, -279, 315, -209,
	-398, 435, -191, -169, -99, -99, -99, 464, -192, -170,
	315, -147, 178, 465, 457, -182, 429, -182, -227, -230,
	-228, -194, -470, 437, 435, 124, -221, -207, 462, -150,
	-398, -207, 124, -243, -398, -398, -398, 2, 464, 2,
	-207, 124, 265, 251, -175, 118, -481, 447, -191, -318,
	-255, -277, -310, 323, 265, -244, 425, -200, -277, -257,
	469, 154, 447, 466, -244, 2, -171, -171, -171, -171,
	-171, -81, -81, -150, 469, 464, 447, 447, 464, -398,
	-398, 465, 469, -207, -193, 182, 182, -199, -183, 465,
	469, 466, 464, -150, -96, 154, -46, 435, 381, 468,
	-283, -283, -283, 350, 350, -182, -203, -191, -207, -204,
	-222, 151, 151, -305, -324, -350, -166, 257, -207, 468,
	-324, -324, 121, 121, -324, -325, -325, -324, 121, 154,
	464, -324, -334, 30, 30, 465, 469, -320, -324, 465,
	428, -247, -247, 465, 5, 241, 168, 240, -295, 240,
	-295, -295, 8, 457, -393, 465, -332, 119, -324, 389,
	-393, 457, -441, -197, 464, -182, 433, -246, -387, -371,
	-371, 465, -383, -368, -324, -324, -324, -324, -324, -324,
	-328, -324, -383, -368, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, 112, 251, 259, -325, -329, -328, -324,
	-324, -368, 465, 465, 465, -262, -81, -274, 161, -324,
	-364, 469, -274, -274, 465, -353, -353, 464, -324, 206,
	463, 469, 471, 447, -243, 466, -346, -347, 463, 465,
	469, 465, 469, -309, 35, 465, -393, 268, 5, 8,
	462, 463, 465, -387, 465, 465, -251, -324, 395, 395,
	124, 251, 422, -413, -408, -324, -249, -351, -324, 464,
	464, -164, 116, 353, -463, 2, 420, 124, -171, 124,
	-171, 439, 464, 464, 395, 435, -262, -324, -151, 105,
	-392, -457, 468, -457, 468, 395, 395, 285, 435, -262,
	395, -150, 154, 2, 2, 2, 465, 465, 469, -414,
	35, 263, -182, -207, -64, 435, -363, -389, -209, 35,
	-178, 2, -300, 420, -192, -207, 124, -176, 218, -481,
	-396, -429, -247, -277, -269, 252, 79, 465, -318, -271,
	-255, -324, 2, 465, -148, -149, -398, -398, -398, -150,
	-152, -152, -316, 2, 464, -193, -183, 464, -152, -195,
	2, -399, -99, 269, -207, 457, -283, -235, -234, 283,
	259, -235, 330, 330, 266, 465, 145, 215, -165, -192,
	-324, -324, 121, 30, 30, -324, -324, -334, 465, -324,
	-324, -262, 463, 5, -324, 465, 465, 465, -324, 466,
	-442, -182, -324, 465, 465, 465, 465, 469, 469, 465,
	465, 465, 465, -329, 154, 112, 259, 464, 465, 465,
	-331, 164, 51, -353, -331, -331, -285, -251, -353, -322,
	-192, 462, -393, -389, -356, 464, 466, 463, 2, 462,
	465, -194, -194, -315, 124, -415, 80, -417, 66, 137,
	86, 251, 255, 411, 295, 63, 105, 308, 35, 465,
	465, 469, -165, -249, -251, 251, 374, 105, 251, 105,
	98, 406, 182, -194, -201, -251, -251, -207, 130, 465,
	469, 447, 2, 457, 457, -211, -209, -398, 130, 465,
	-192, -399, -231, 185, -194, -412, -409, -410, 295, -416,
	-418, 137, 295, -99, 2, 464, -229, 269, 463, -280,
	-99, 464, -182, 265, 464, -192, -177, 217, -481, -396,
	-174, -303, -301, -308, 464, 265, -99, -247, 447, 465,
	465, 98, 98, -249, 464, 464, -251, 98, 465, -47,
	-48, 182, 80, 287, -204, 381, 182, 464, 464, -165,
	-324, -324, -324, 465, -247, -393, 457, -436, 283, 465,
	-324, -324, -325, 154, 464, -334, -437, 434, -324, -262,
	-437, -437, 465, -389, 2, 462, 2, -315, -201, -205,
	-198, -182, 137, 169, 255, 211, 464, -325, -207, 464,
	2, -472, 107, 186, -314, -473, 85, 375, -351, -166,
	465, 465, 255, 255, -324, -368, -222, -171, -171, 465,
	465, -324, 395, -392, 84, -390, 2, -457, -324, 395,
	-232, -233, 176, -414, 211, -198, 211, -471, 435, -227,
	-470, -65, -66, 396, -363, -249, -207, -249, 265, -481,
	-396, -175, -277, 113, -251, 80, -303, -330, -150, 464,
	464, 465, -249, -249, 465, 464, -150, 469, 26, 464,
	26, 464, -207, -222, -262, -262, 465, -247, 51, 465,
	465, -325, -334, 465, -438, -439, -197, 463, 2, -417,
	-198, 251, -324, -184, 464, -324, 186, 108, 174, -231,
	464, 308, -190, 66, 464, 464, 464, 447, 154, 464,
	-470, 281, 464, 98, 247, 465, 35, -66, 9, 465,
	-300, 465, -207, -396, -176, 415, 252, 465, -201, -277,
	-399, -399, -314, 465, 465, -399, -48, -251, -251, 465,
	465, -443, 302, 331, 163, -262, 465, 469, 35, 124,
	465, -419, 235, -182, 465, 108, 174, -232, -251, -207,
	-458, 420, -205, -237, -236, -234, -239, -238, -234, -262,
	-390, 84, 281, -262, -207, -250, -352, -194, 98, -231,
	-99, -314, 464, -314, 464, -177, 353, -317, 465, 465,
	-231, -314, 465, 465, 465, 465, -444, -445, 43, 408,
	89, -324, -444, -444, -439, -441, 137, -420, -423, -422,
	265, 359, 155, 282, 465, 374, 431, -472, 465, -243,
	-324, 465, 469, 425, 465, 469, 425, 465, 154, 465,
	464, 465, 469, -232, -471, -231, -249, -231, -249, -270,
	-150, -150, -232, -231, -150, -446, 123, -445, 292, 150,
	330, 292, 150, -446, -446, -198, -422, 265, -423, 265,
	415, 109, -419, -236, 176, -238, 154, 281, -251, -352,
	-470, -232, 465, -232, 465, -318, -232, 89, 161, 390,
	247, 30, -421, 247, 321, 56, 353, -421, -420, 464,
	464, 465, -477, 433, -314, -477, -314, 330, 273, -445,
	22, 255, 105, -472, -262, -262, -172, 56, 321, 2,
	-231, -231, 465, 465, -232, -232, -232, 395, -477, -477,
	464, -262, 465, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 936, 938, 940, 942, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1027, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 954, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1075, 329, 331, 333, 335, 337, 0, -2,
	1087, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1051, 1053,
	1055, 1057, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 830, 1690, 1704, 1705, 1706,
	1709, 1710, 1711, 1712, 1713, 1714, 2057, 2137, 2138, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 0, 426, 424, 1684, 427,
	1888, 429, 431, 316, 317, 318, 319, 320, 321, 0,
	441, 435, 440, 442, 444, 445, 446, 447, 421, 419,
	0, 441, 1736, 439, 934, 935, 929, 930, 1922, 964,
	460, -2, -2, -2, 2025, -2, 492, -2, 499, 2028,
	1924, 504, 0, 506, -2, 509, 937, 939, 941, 27,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, -2, -2, -2, -2, 0, 0, 1773, 1660, 1706,
	1663, 1658, 192, 194, 196, 197, 0, 0, 0, 0,
	0, 0, 221, 223, 226, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 736, 737, 882,
	883, 904, 0, 0, 0, 0, 324, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 254, 362, 363, 0, 1076, 1076,
	0, 0, 0, 0, 172, 163, 0, 0, 725, 449,
	451, 0, 158, 0, 0, 933, 0, 174, 0, 0,
	465, 467, 469, 534, 536, 538, 540, 542, 544, 547,
	549, 551, 553, 555, 557, 559, 562, 564, 566, 568,
	570, 572, 574, 576, 578, 580, 582, 584, 585, 0,
	0, 0, 0, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 0, 588, 590, 591, 592, 0, 643, 660, 0,
	873, 1077, 966, 944, 957, 966, 946, 947, 948, 949,
	950, 955, 956, 959, 0, 951, 952, 953, 30, 32,
	34, 36, 38, 40, 42, 278, 280, 282, 284, 288,
	290, -2, 1049, 1050, 330, 332, 334, 336, 338, 452,
	0, 454, 0, 589, 1031, 1039, 0, -2, 0, 1081,
	1081, 1081, 0, 0, 1050, 1048, 0, 457, 458, 513,
	514, 1316, 0, 0, 0, 0, 0, 1557, 1400, 0,
	515, -2, 1431, 1433, 2004, 2025, 1556, 1435, 1436, 1437,
	1438, 1439, 0, 0, 1442, 0, 1444, 1445, 1446, 1447,
	0, 1449, 0, 1453, 1454, 1455, 0, 2009, 1637, 1702,
	-2, 1221, 1222, 1223, 1224, 1225, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1698, 0, 1523, 1469, -2, 1723,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1782, -2, -2, -2, -2, -2, -2, -2,
	1277, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	2039, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	0, 1993, 2010, 2011, 2016, 2018, 2012, 2001, 1492, -2,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 1278, -2, 2005, 2006,
	2021, 2022, 2027, 2032, 2033, 2008, 2017, -2, -2, 1067,
	1897, 1070, 830, 1068, 1052, 1054, 0, 1056, 0, 0,
	0, 1061, 1084, 1082, 0, 1120, 1065, 1066, 1138, 1138,
	1162, 0, 1143, 0, 1162, 1076, 1188, 0, 1149, 1917,
	1470, 1471, 0, 1706, 1703, -2, 0, 0, 0, 0,
	0, 0, 0, 422, 0, 428, 430, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 462, 463, 0, 487,
	0, 491, 2000, -2, 1741, 1937, -2, 495, 967, 971,
	972, 973, 974, 0, 0, 0, 0, 0, 501, 0,
	0, 488, 489, 507, 510, 0, 51, 0, 2010, 1188,
	53, 0, 1674, 1728, 1729, 1730, 1731, 1732, 2039, 2056,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 55,
	0, 2010, 58, 0, 2010, 0, -2, 62, 0, 2010,
	175, 176, 1719, 1720, 1724, 1725, 1726, 1727, 65, 0,
	1680, 67, 0, 1677, 76, 0, 2010, 0, 1657, -2,
	0, 0, 717, 1654, 1659, 718, 1664, 0, 198, 199,
	200, 201, 202, 2010, 204, 205, 0, 207, 208, 2010,
	210, 211, 0, 213, 229, 230, 0, 232, 0, 2010,
	0, 0, 0, 238, -2, 255, 0, 252, 0, 242,
	243, 245, 246, 247, 248, 249, 0, 294, 292, 1685,
	0, 0, 0, 888, -2, 2010, 876, 879, 2010, 881,
	893, 1688, 0, -2, 0, 1074, 2010, 981, 740, 741,
	742, 743, 0, 313, 0, 994, 0, 996, 0, 1017,
	1194, 1138, 1138, 0, 256, 257, 258, 259, 260, 2010,
	0, 0, 0, 265, 0, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 151, 2010, 341, 360, 151, 2010,
	344, 151, 2010, 347, 151, 2010, 350, 1652, 151, 2010,
	353, 354, 2010, 356, 177, 357, 2010, 359, 0, -2,
	415, 1692, -2, 365, 0, 366, 0, -2, 0, 189,
	0, 0, 723, 724, 0, 931, 932, 0, 0, 472,
	0, 0, 586, 587, 0, 0, 597, 598, 599, 600,
	1925, 1895, 1798, 604, 0, 607, 610, -2, 0, 0,
	0, 0, 614, 0, 619, 620, 621, 0, 722, 623,
	0, 0, 625, 0, 629, 0, 632, 0, 634, 0,
	636, -2, -2, -2, 647, -2, 0, 651, 0, 653,
	0, 0, 0, 0, 668, 669, 0, 674, 0, 677,
	678, 679, 0, 681, 682, 683, 684, 0, 686, 687,
	-2, -2, 691, 693, 0, 700, 0, 704, 0, 708,
	0, 593, 594, 151, 1192, 943, -2, 945, 0, 961,
	1034, -2, 0, 453, 0, 456, 1045, 0, 1041, 0,
	1043, 0, 1032, 1037, 1099, 1100, 0, 0, 0, 0,
	1079, 1080, 0, 0, 0, 1029, 1030, 0, 0, 0,
	0, 1562, 1563, 1564, 1565, 1566, 1567, 1570, 1571, 1568,
	1569, 1572, 1573, 0, 0, 0, 0, 0, 1574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1575, 1576, 1577, 0, 0, 1579, 0, 1581, 0, 0,
	0, 0, 0, 0, 1379, 1381, 1645, 0, 0, 1578,
	1321, 1322, 1323, 1358, 1359, 0, 0, 1432, 1642, 1641,
	1434, 0, 1593, 0, 1441, 0, 1313, 1448, 1671, -2,
	0, 1557, 1588, 0, 0, 1456, 1457, 1458, 0, 0,
	1593, 0, 0, 1636, 0, 1525, 0, 1257, 0, 1258,
	1259, 0, 1260, 1261, 1274, 1287, 0, 0, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 1617, -2, 0, 0, 0, 0, 0, 1069, 0,
	0, 1124, 1646, 1650, 1651, 1124, 1124, 0, 0, 1594,
	1185, 1185, 0, 0, 1181, 1181, 1181, 1179, 1162, 0,
	1162, 1172, 0, 1162, 1162, 0, -2, 1143, 0, 0,
	1172, 0, 1156, 403, 405, 407, 409, 410, 411, 413,
	1189, 1190, 0, 0, 0, 0, 0, 0, 1707, 0,
	0, 0, 1694, 0, 0, 0, 0, 433, 443, 1076,
	0, 1596, 1211, 1214, 1215, 1216, 1217, 1220, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, -2, 1275, 1277, 1298, 1264,
	1265, 1266, 1267, 1268, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1270, 0, 1245, 1245, 1245,
	1262, 1263, 1286, 1297, 1289, 1297, 1293, 1212, 1213, 1280,
	1281, 1282, 1283, 0, 437, 0, 0, 0, 0, -2,
	497, 502, 503, 0, 0, 969, 0, 975, 524, 525,
	526, 977, 978, 0, 500, 527, 528, 529, 530, 531,
	532, 0, 847, 0, 849, 1666, 0, 498, 517, 505,
	0, 511, 77, 926, 116, 0, 926, 926, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 101, 112, 89,
	90, 0, 0, 0, 0, 59, 855, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 0,
	0, 100, 0, 95, 79, 0, 0, 0, 102, 114,
	0, 142, 144, 0, 0, 1175, 159, 0, 716, 0,
	0, 1707, 1662, 0, 0, 0, 0, 231, 233, 0,
	235, 236, 237, 0, 887, 0, 244, 241, 285, 804,
	2010, 0, 0, 311, 306, 0, 308, 854, 2010, 852,
	1689, 0, 874, 0, 1073, 0, 0, 0, 0, 894,
	0, 2010, 899, 1676, 1715, 1716, 983, 0, 315, 0,
	997, 999, 0, 0, 1195, 0, 1197, 1198, 0, 262,
	263, 264, 0, 339, 0, 149, 150, 0, 342, 0,
	345, 0, 348, 0, 0, 351, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 0, 189, 161, 189, 189, 1175, 474, 1175, 476,
	0, 0, 601, 602, 603, 605, 606, 608, 609, -2,
	-2, 701, 611, 612, 671, 0, 0, 0, 670, 622,
	0, 710, 1913, 720, 671, 1773, 671, 1773, 671, 1773,
	633, 635, 638, 663, 646, 650, 0, 0, 0, 655,
	0, 657, 0, 659, 671, 672, 675, 680, 685, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 960, 1035,
	1037, 455, 1038, 0, 1047, 1040, 0, 1044, 1033, 1097,
	1098, 1103, 1104, 1110, 1113, 1114, 1106, 1316, 1062, 1063,
	1064, 1088, 1089, 913, 0, 2137, 1317, 1206, 1318, 1319,
	1673, 0, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, -2, -2, -2, -2, -2, -2, -2, -2,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, -2, -2, -2, 1356, 1357, -2, 1580, 1582, 0,
	1645, 0, -2, 0, -2, -2, -2, -2, 1376, 0,
	1378, 1383, 1385, 1387, 0, 0, 0, 0, 1644, 1397,
	1628, 1629, 0, 0, 1559, 1560, 1561, 1382, 0, 1401,
	1643, 1640, 0, 0, 1592, 1087, 1460, 0, 0, 0,
	0, 1467, 0, 1672, 1312, 1299, 1300, 1301, 1302, 1303,
	1304, 1314, 1452, 1590, 0, 1589, 0, 0, 0, 1600,
	0, 1635, 1631, 0, 1695, 1701, 1533, 0, 0, 0,
	0, 1669, 0, 0, 0, 0, 0, 0, 0, 1493,
	1494, 1495, 1496, 1497, 0, 1499, 1500, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 1603, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 1507, 0, 1509, 1594, 1614, 0, 0, 1402, 0,
	0, 0, 1557, 0, 1512, 1594, 1622, 0, 0, 0,
	0, 0, 1594, 0, 1627, 0, 1519, 0, 1521, 1071,
	0, 0, 1201, 0, 0, 0, 1649, 1201, 1201, 0,
	1119, 0, 0, 1182, 1183, 1184, 0, 0, 1185, 0,
	1176, 1180, 1177, 1178, 1172, 1135, 0, 0, 1675, 1172,
	1141, 1171, 0, 830, 1161, 1172, 1172, 0, -2, 1145,
	1162, 0, 0, 404, 406, 408, 412, 414, 0, 0,
	1087, -2, 190, 829, 0, 0, 0, 0, 0, 423,
	425, 0, 0, 417, 0, 420, 0, 1202, 1205, 0,
	1218, 0, 0, -2, 0, 0, 0, 0, 0, 490,
	0, 968, 976, 0, 521, 0, 523, 0, 848, 1668,
	1667, 0, 512, 0, 0, 0, 0, 925, 120, 2010,
	0, 153, 0, 0, 798, 1681, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 91, 0, 0, 0, 0, 0, 0,
	0, 856, 857, 859, 866, 868, 0, 862, 1670, 0,
	863, 0, 865, 867, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 92, 0, 0, 0,
	0, 1656, 180, 1174, 0, 1655, 1665, 0, 203, 206,
	209, 212, 0, 239, 0, 0, 746, 728, 0, 0,
	293, 189, 0, 0, 307, 850, 853, 0, 830, 886,
	1687, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 2010, 985, 991, 0, 1201, 0, 1015, 1000, 0,
	0, 0, 1015, 1019, 1020, 1022, 1023, 0, 0, 1196,
	0, 266, 361, 151, 151, 151, 1653, 151, 151, 178,
	355, 358, 364, 416, 1076, 1076, 189, 187, 1873, 185,
	182, 184, 0, 0, 0, 747, 749, 750, 751, 752,
	0, 1716, 0, 1827, 1716, 0, 1003, 1005, 0, 156,
	189, 0, 0, 305, 473, 478, 595, 0, 640, 665,
	613, 615, 616, 617, 0, 721, 719, 624, 671, 627,
	671, 630, 671, 649, 652, 654, 0, 0, 0, 667,
	0, 0, 0, 0, 0, 0, 0, 705, 706, 707,
	709, 1193, 1036, 1046, 1042, 0, 1108, 0, 1107, 1111,
	1112, 0, 1096, 911, 912, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1398, 0, -2, 1377, 1380, 1384,
	1386, 1388, 0, 0, 0, 0, 0, 0, 1583, 0,
	1585, 1399, 1638, 1641, 1555, 0, 0, 1086, 1087, 1087,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 1591,
	0, 1598, 1599, 0, 1459, 0, 1632, 0, 0, 0,
	1468, 0, 0, 0, 1269, 1243, 0, 1297, 1295, 1296,
	1290, 1297, 1294, 0, 1498, 0, 0, 0, 0, 1487,
	0, 0, 0, 1491, 1504, 0, 1506, 1508, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 1406, 1407, 1511, 1620, 1621,
	0, 0, 0, 0, 0, 0, 1517, 0, 1626, 1518,
	1520, 1076, 1121, 1116, 1200, 0, 1647, 1175, 1123, 1125,
	1648, 1678, 1116, 1116, 0, 1595, 0, 0, 1166, 0,
	0, 0, 1168, 1139, 0, 0, 1133, 0, 1129, 1130,
	1131, 1132, 1140, 830, 1170, 1142, 1146, 1695, 0, 1172,
	0, 1157, 0, 1159, 1191, 0, 1151, 1154, 0, 0,
	1708, 214, 218, 219, 215, 216, 217, 432, 0, 0,
	1597, 0, 1207, 0, 0, 0, 0, 0, 436, 0,
	486, -2, 519, 520, 522, 0, 518, 117, 926, 0,
	0, 917, 0, 122, 2010, 131, 0, 775, 0, 1679,
	0, 0, 0, 0, 928, 0, 0, 2010, 151, 2010,
	151, 134, 137, 0, 141, 139, 0, 0, 766, 78,
	926, 81, 85, 93, 0, 0, 0, 99, 0, 0,
	0, 919, 0, 860, 861, 864, 870, 60, 0, 921,
	915, 0, 914, 143, 83, 87, 94, 0, 923, 80,
	0, 189, 0, 160, 1661, 0, 0, 0, 0, 0,
	745, 815, 0, 0, 0, 0, 299, 295, 0, 304,
	310, 309, 0, 0, 877, -2, 880, 889, 0, 891,
	903, 0, 0, 0, 987, 991, 0, 990, 1074, 1087,
	314, 992, 1015, 0, 0, 0, 1002, 998, 995, 1201,
	0, 0, 0, 0, 0, 261, 340, 343, 346, 349,
	352, 367, 368, 164, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 1716, 1716, 0, 1683, 0,
	0, 0, 0, 157, 162, 0, 475, 0, 0, 0,
	626, 628, 631, 656, 658, 671, 694, 695, 761, 0,
	761, 0, 0, 0, 0, 1090, 1091, 0, 913, 0,
	1320, 1361, 0, 0, -2, 0, 0, 1365, 0, 0,
	0, -2, 0, 0, 0, 1584, 1586, 0, 1640, 1461,
	0, 0, 0, 1465, 1443, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 0, 1450, 1451, 1558, 1601, 1630, 1634, 0,
	1696, 1700, 1531, 1532, 1536, 1686, 0, 0, 0, 1288,
	1292, 1472, 0, 0, 0, 0, 0, 0, 0, 1602,
	1613, 1615, 1403, 1404, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, -2, -2, -2, 1421, 1422, 1423,
	-2, -2, -2, 0, 0, 0, 1616, 1618, 1619, 1623,
	1624, 0, 1514, 1515, 1516, 1625, 0, 1118, 0, 1199,
	1122, 0, 1118, 1118, 1083, 1164, 0, 0, 1187, 0,
	1136, 0, 1137, 0, 1169, 0, 1144, 1147, 1148, 1158,
	0, 1150, 0, 1153, 0, 1461, -2, 434, 418, 0,
	0, 1209, 1219, 0, 1272, 1276, 438, 1173, 0, 0,
	0, 0, 152, 773, 797, 0, 0, 906, 913, 0,
	0, 124, 0, 0, 0, 132, 0, 0, 129, 0,
	136, 140, 0, 0, 0, 0, 0, 96, 97, 98,
	0, 103, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 234, 885, 240, 755, 803, 0, 805,
	0, 729, 0, 804, 291, 0, 298, 0, 854, 0,
	875, 890, 0, 0, 0, 0, 0, 989, 991, 0,
	982, 983, 1102, 993, 1013, -2, 1012, 0, 1087, 1021,
	1018, 1024, 1025, 0, 186, 0, 181, 183, 0, 167,
	0, 0, 748, 753, 0, 0, 0, 0, 0, 1004,
	1006, 0, 173, 0, 596, 618, 666, 696, 760, 0,
	0, 698, 0, 0, 1105, 1109, 1094, 1095, 1092, 913,
	1363, 1367, 0, 0, 0, 1369, -2, 0, 1391, -2,
	-2, 1587, 1639, 1440, 1087, 1462, 1464, 1315, 1633, 0,
	1538, 1535, 0, 1522, 1244, 1482, 1483, 0, 0, 1486,
	1488, 1489, 1490, 1612, 0, 0, 0, 0, 1513, 1072,
	1527, 0, 0, 1126, 1527, 1527, 1165, 0, 1167, 1134,
	1127, 0, 1696, 1160, 1152, 0, 0, 1203, 1208, 0,
	1271, 118, 119, 121, 0, 774, 0, 777, 0, 0,
	0, 0, 784, 785, 0, 0, 0, 0, 0, 819,
	828, 0, 1096, 0, 0, 0, 126, 146, 0, 0,
	927, 0, 0, 151, 151, 0, 0, 918, 0, 0,
	0, 0, 106, 0, 0, 920, 922, 916, 0, 0,
	924, 179, 763, 0, 815, 807, 808, 809, 0, 814,
	816, 0, 0, 733, 730, 746, 728, 0, 296, 851,
	884, 0, 902, 0, 0, 0, 979, 991, 0, 984,
	985, 1015, 1101, 0, 0, 0, 1001, 1102, 0, 188,
	189, 0, 0, 0, 0, 0, 0, 0, 189, 477,
	479, 0, 0, 485, 759, 0, 0, 0, 0, 1093,
	1371, -2, -2, 1392, 0, 1697, 1699, 1087, 0, 1524,
	0, 0, -2, 0, 0, 0, 1058, 0, 1117, 1115,
	1059, 1060, 1186, 0, 1155, 0, 1210, 123, 0, 778,
	779, 1682, 781, 0, 783, 786, 0, 788, 1718, 0,
	792, 799, 820, 0, 755, 0, 825, 826, 907, 908,
	801, 0, 125, 127, 145, 910, 133, 128, 135, 0,
	0, 82, 0, 0, 1767, 109, 107, 105, 84, 0,
	728, 762, 0, 806, 0, 817, 818, 731, 0, 0,
	0, 297, 300, 0, 303, 0, 903, 0, 0, 0,
	986, 987, 312, 0, 0, 0, 1015, 1026, 166, 0,
	0, 828, 0, 0, 796, 0, 171, 0, 481, 0,
	483, 0, 697, 699, 0, 0, 1463, 1542, 0, 1484,
	1485, -2, 0, 1429, 1526, 1528, 0, 1128, 1204, 776,
	780, 0, 0, 834, 0, 0, 0, 823, 824, 763,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 734, 0, 755, 0, 301, 302, 828,
	0, 828, 0, 988, 989, 0, 1008, 1009, 1011, 1016,
	0, 0, 755, 828, 795, 0, 480, 0, 0, 702,
	703, 0, 0, 0, 0, 1537, 1430, 0, 0, 0,
	787, 839, 0, 0, 0, 821, 822, 819, 0, 830,
	130, 0, 909, 0, 767, 0, 0, 770, 0, 0,
	110, 1767, 108, 0, 0, 0, 811, 813, 735, 763,
	733, 755, 0, 755, 0, 980, 0, 1010, 189, 189,
	763, 755, 189, 482, 484, 1534, 1554, 1543, -2, 1973,
	1770, 0, 1554, 1554, 1529, 1530, 0, 789, 835, 836,
	0, 831, 832, 833, 1717, 790, 791, 800, 827, 834,
	147, 764, 0, 0, 765, 0, 0, 113, 0, 115,
	0, 810, 0, 728, 732, 763, 0, 763, 0, 1201,
	168, 169, 793, 763, 170, 1539, 0, 0, 1545, 1546,
	1547, 1548, 1549, 1540, 1541, 782, 837, 0, 838, 0,
	0, 0, 839, 768, 0, 771, 0, 111, 0, 812,
	727, 900, 828, 900, 828, 1007, 794, 0, 1551, 1552,
	0, 0, 840, 0, 843, 844, 0, 841, 819, 0,
	0, 758, 895, 0, 755, 897, 755, 1550, 1553, 1544,
	842, 845, 846, 802, 0, 0, 754, 756, 757, 901,
	763, 763, 763, 0, 900, 900, 769, 0, 896, 898,
	0, 0, 763, 772,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 453, 3, 459, 454, 3,
	464, 465, 457, 455, 469, 456, 466, 458, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 472, 3,
	445, 447, 446, 450, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 462, 3, 463, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 470, 452, 471, 448,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 449, 57788, 451, 57789, 461,
	57790, 467, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1092
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1112
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1237
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1319
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1352
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1381
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1416
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1435
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1499
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1518
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1529
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1535
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1686
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				TableIndex: sqlDollar[6].union.tableIndexName(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1733
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1832
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1923
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1932
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1948
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1953
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1958
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1989
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2059
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2170
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2174
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2182
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2201
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2206
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2218
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2222
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2223
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2250
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2253
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2254
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2257
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2258
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2284
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2290
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2291
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2318
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2337
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2360
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2399
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2434
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2462
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2488
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2519
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2523
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2541
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2587
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2617
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2621
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2626
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2658
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2677
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2709
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2743
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2776
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2784
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2792
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2806
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2817
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2841
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2845
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2868
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2872
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2879
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2884
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2888
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2916
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2962
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2964
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3034
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3136
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3174
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3179
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3184
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3189
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3270
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3284
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3402
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3440
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3448
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3494
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3513
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3528
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3552
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3560
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3606
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3609
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3629
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3633
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3643
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3650
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3651
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3660
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3662
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3678
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3690
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3692
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3697
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3701
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3704
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3716
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3718
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3721
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3739
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3752
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3755
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3763
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3767
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3770
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3784
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3803
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3817
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3829
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3833
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3846
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3857
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3860
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3868
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3872
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3880
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3902
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3906
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3917
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3925
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3931
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3940
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3945
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3949
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3952
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3956
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3963
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3968
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4088
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4096
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4139
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4144
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4164
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4189
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4192
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4228
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4241
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4255
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4256
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4257
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4261
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4272
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4284
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4285
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4286
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4311
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4314
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4319
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4325
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4344
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4348
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4357
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4364
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4369
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4464
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4501
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4505
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4531
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4551
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4565
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4576
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4586
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4620
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4631
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4658
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4682
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4692
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4707
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4772
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4773
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4774
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4775
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4776
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4794
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4798
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4828
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4836
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4857
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4865
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4871
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4889
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4893
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4897
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4901
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4911
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4936
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4945
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4953
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4957
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4964
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4979
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4984
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4986
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4989
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4992
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4994
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5007
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5022
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5047
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5052
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5053
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5061
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5070
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5071
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5075
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5081
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5083
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5085
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5087
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5089
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5091
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5107
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5121
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5136
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5150
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5164
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5167
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5168
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5172
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5187
		{
			sqlVAL.union.val = false
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = false
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5216
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.str = ""
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = tree.Descending
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5264
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5274
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5280
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5288
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5294
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5302
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5308
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5325
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5326
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5329
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5330
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5341
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5363
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5374
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5378
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5379
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5380
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5399
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5401
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5417
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5422
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5431
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5432
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5433
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5441
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5448
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5451
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5452
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5456
		{
			sqlVAL.str = ""
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.str = ""
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5498
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5511
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5513
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5517
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5530
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5548
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5552
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 979:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5582
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.str = ""
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5600
		{
			sqlVAL.str = ""
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.str = ""
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.str = ""
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5625
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5626
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5652
		{
			return helpWith(sqllex, "INSERT")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5670
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5674
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5683
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5732
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5740
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5749
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5750
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5758
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5763
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5796
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5799
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5828
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5832
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5881
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5900
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5927
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5932
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5936
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5939
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5942
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5944
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5945
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5950
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5985
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5986
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5987
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6022
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6048
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6070
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6085
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6092
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6108
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6113
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6137
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6138
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = nil
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6151
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6152
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = true
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = false
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = false
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.union.val = true
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6181
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6182
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6202
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6212
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6233
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6238
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6258
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6267
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6296
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6342
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6345
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6346
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6363
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6377
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6399
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6401
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6416
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6438
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6443
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6448
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6459
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6471
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6490
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6529
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6539
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6574
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6585
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6615
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6648
		{
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6650
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = nil
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6659
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = true
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = false
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6719
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6743
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.str = tree.AstFull
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.str = tree.AstRight
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.str = tree.AstInner
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6767
		{
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6768
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.str = tree.AstHash
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.str = ""
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6830
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6835
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6853
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6859
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6865
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6875
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6904
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6917
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6925
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6926
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6944
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6946
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6954
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6955
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6966
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6968
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = types.String
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = types.Name
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7020
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = types.INet
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = types.Oid
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7069
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7100
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7108
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = nil
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = types.Int2
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = types.Int2
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = types.Int4
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.Int
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = types.Int
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = types.Int
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = types.Float4
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = types.Float4
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = types.Float
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = types.Float
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7175
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7183
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7191
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = types.Bool
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = types.Bool
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = types.RegType
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7232
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = types.Float
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7251
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7257
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7279
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = types.String
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = true
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = false
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = types.Date
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7328
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7333
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7341
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7343
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7351
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7368
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = true
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = false
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = false
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = types.Interval
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = tree.Year
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = tree.Month
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = tree.Day
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.Month
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = nil
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = tree.Second
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7456
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7503
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7736
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7747
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7785
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7813
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7835
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8029
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8034
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8043
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8061
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8070
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8109
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8120
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8121
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8136
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8147
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8191
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8264
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8273
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8275
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8278
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8283
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8288
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8293
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8298
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8307
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8308
		{
			return unimplemented(sqllex, "treat")
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8329
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8334
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8339
		{
			return unimplemented(sqllex, "within group")
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8340
		{
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8375
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.str = ""
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8464
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8477
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8545
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8574
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = tree.Any
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = tree.Some
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.All
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = tree.Div
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8605
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8606
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = tree.LT
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8610
		{
			sqlVAL.union.val = tree.GT
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = tree.LE
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8613
		{
			sqlVAL.union.val = tree.GE
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8614
		{
			sqlVAL.union.val = tree.NE
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = tree.Like
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8710
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8771
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8809
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8813
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8821
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8831
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8843
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8847
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8851
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8869
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8876
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8886
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8892
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8896
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8903
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8909
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8926
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8935
		{
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8936
		{
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8940
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8950
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8959
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8963
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8967
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8975
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8985
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9008
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9016
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9039
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9048
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9052
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9056
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9060
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9066
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9078
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9082
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9091
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9102
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9111
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9119
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9216
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9223
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9227
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9231
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9245
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9249
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9253
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9266
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9284
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9297
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9304
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9329
		{
			sqlVAL.str = ""
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9335
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9339
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
