// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9477

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1032,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	179, 871,
	196, 871,
	211, 240,
	288, 240,
	296, 711,
	323, 240,
	332, 711,
	369, 711,
	392, 240,
	416, 711,
	-2, 0,
	-1, 74,
	211, 244,
	-2, 0,
	-1, 75,
	106, 1032,
	185, 1032,
	402, 1032,
	403, 1032,
	-2, 0,
	-1, 87,
	119, 1006,
	134, 1006,
	193, 1006,
	222, 1006,
	253, 1006,
	263, 1006,
	397, 1006,
	-2, 993,
	-1, 117,
	124, 632,
	202, 624,
	210, 632,
	290, 618,
	341, 618,
	385, 632,
	-2, 0,
	-1, 118,
	4, 1034,
	21, 1034,
	22, 1034,
	23, 1034,
	24, 1034,
	25, 1034,
	27, 1034,
	32, 1034,
	37, 1034,
	38, 1034,
	39, 1034,
	40, 1034,
	41, 1034,
	42, 1034,
	43, 1034,
	44, 1034,
	45, 1034,
	46, 1034,
	47, 1034,
	49, 1034,
	50, 1034,
	51, 1034,
	52, 1034,
	53, 1034,
	54, 1034,
	57, 1034,
	58, 1034,
	59, 1034,
	60, 1034,
	62, 1034,
	63, 1034,
	67, 1034,
	68, 1034,
	69, 1034,
	70, 1034,
	71, 1034,
	73, 1034,
	74, 1034,
	75, 1034,
	76, 1034,
	78, 1034,
	80, 1034,
	81, 1034,
	82, 1034,
	85, 1034,
	86, 1034,
	94, 1034,
	95, 1034,
	96, 1034,
	97, 1034,
	98, 1034,
	99, 1034,
	100, 1034,
	101, 1034,
	103, 1034,
	105, 1034,
	106, 1034,
	108, 1034,
	111, 1034,
	112, 1034,
	113, 1034,
	115, 1034,
	117, 1034,
	118, 1034,
	120, 1034,
	121, 1034,
	122, 1034,
	123, 1034,
	124, 1034,
	125, 1034,
	126, 1034,
	127, 1034,
	128, 1034,
	129, 1034,
	130, 1034,
	131, 1034,
	133, 1034,
	139, 1034,
	140, 1034,
	141, 1034,
	142, 1034,
	143, 1034,
	144, 1034,
	146, 1034,
	148, 1034,
	152, 1034,
	153, 1034,
	155, 1034,
	156, 1034,
	158, 1034,
	159, 1034,
	161, 1034,
	162, 1034,
	163, 1034,
	164, 1034,
	165, 1034,
	166, 1034,
	167, 1034,
	168, 1034,
	170, 1034,
	171, 1034,
	173, 1034,
	174, 1034,
	175, 1034,
	179, 1034,
	180, 1034,
	181, 1034,
	182, 1034,
	185, 1034,
	186, 1034,
	187, 1034,
	188, 1034,
	189, 1034,
	190, 1034,
	191, 1034,
	192, 1034,
	194, 1034,
	196, 1034,
	198, 1034,
	200, 1034,
	201, 1034,
	202, 1034,
	204, 1034,
	205, 1034,
	208, 1034,
	209, 1034,
	210, 1034,
	211, 1034,
	213, 1034,
	214, 1034,
	216, 1034,
	217, 1034,
	219, 1034,
	220, 1034,
	223, 1034,
	224, 1034,
	227, 1034,
	228, 1034,
	230, 1034,
	231, 1034,
	232, 1034,
	233, 1034,
	234, 1034,
	235, 1034,
	236, 1034,
	237, 1034,
	238, 1034,
	239, 1034,
	241, 1034,
	242, 1034,
	243, 1034,
	244, 1034,
	246, 1034,
	249, 1034,
	250, 1034,
	251, 1034,
	252, 1034,
	254, 1034,
	255, 1034,
	256, 1034,
	258, 1034,
	259, 1034,
	260, 1034,
	261, 1034,
	264, 1034,
	265, 1034,
	267, 1034,
	269, 1034,
	270, 1034,
	271, 1034,
	272, 1034,
	273, 1034,
	274, 1034,
	275, 1034,
	276, 1034,
	277, 1034,
	278, 1034,
	280, 1034,
	281, 1034,
	282, 1034,
	283, 1034,
	284, 1034,
	285, 1034,
	287, 1034,
	289, 1034,
	290, 1034,
	291, 1034,
	292, 1034,
	293, 1034,
	294, 1034,
	295, 1034,
	296, 1034,
	297, 1034,
	299, 1034,
	300, 1034,
	301, 1034,
	302, 1034,
	303, 1034,
	305, 1034,
	306, 1034,
	307, 1034,
	308, 1034,
	309, 1034,
	310, 1034,
	311, 1034,
	312, 1034,
	314, 1034,
	316, 1034,
	317, 1034,
	318, 1034,
	319, 1034,
	320, 1034,
	321, 1034,
	323, 1034,
	324, 1034,
	325, 1034,
	326, 1034,
	327, 1034,
	328, 1034,
	329, 1034,
	330, 1034,
	332, 1034,
	333, 1034,
	334, 1034,
	335, 1034,
	336, 1034,
	337, 1034,
	338, 1034,
	339, 1034,
	340, 1034,
	341, 1034,
	343, 1034,
	344, 1034,
	345, 1034,
	346, 1034,
	348, 1034,
	349, 1034,
	350, 1034,
	351, 1034,
	353, 1034,
	354, 1034,
	355, 1034,
	356, 1034,
	357, 1034,
	358, 1034,
	359, 1034,
	360, 1034,
	361, 1034,
	362, 1034,
	363, 1034,
	364, 1034,
	366, 1034,
	367, 1034,
	368, 1034,
	370, 1034,
	371, 1034,
	372, 1034,
	373, 1034,
	374, 1034,
	375, 1034,
	376, 1034,
	378, 1034,
	379, 1034,
	380, 1034,
	381, 1034,
	383, 1034,
	385, 1034,
	386, 1034,
	387, 1034,
	388, 1034,
	389, 1034,
	391, 1034,
	392, 1034,
	393, 1034,
	395, 1034,
	396, 1034,
	399, 1034,
	400, 1034,
	401, 1034,
	402, 1034,
	403, 1034,
	404, 1034,
	406, 1034,
	408, 1034,
	409, 1034,
	410, 1034,
	411, 1034,
	412, 1034,
	413, 1034,
	414, 1034,
	416, 1034,
	417, 1034,
	418, 1034,
	423, 1034,
	424, 1034,
	425, 1034,
	426, 1034,
	427, 1034,
	428, 1034,
	-2, 0,
	-1, 119,
	1, 924,
	200, 924,
	287, 924,
	294, 924,
	431, 924,
	454, 924,
	-2, 0,
	-1, 121,
	1, 924,
	454, 924,
	-2, 0,
	-1, 122,
	1, 924,
	454, 924,
	-2, 0,
	-1, 123,
	1, 928,
	454, 928,
	-2, 0,
	-1, 147,
	119, 1005,
	134, 1005,
	193, 1005,
	222, 1005,
	253, 1005,
	263, 1005,
	397, 1005,
	-2, 1002,
	-1, 179,
	4, 1041,
	5, 1041,
	6, 1041,
	7, 1041,
	8, 1041,
	9, 1041,
	10, 1041,
	21, 1041,
	22, 1041,
	23, 1041,
	24, 1041,
	25, 1041,
	27, 1041,
	32, 1041,
	33, 1041,
	37, 1041,
	38, 1041,
	39, 1041,
	40, 1041,
	41, 1041,
	42, 1041,
	43, 1041,
	44, 1041,
	45, 1041,
	46, 1041,
	47, 1041,
	49, 1041,
	50, 1041,
	51, 1041,
	52, 1041,
	53, 1041,
	54, 1041,
	55, 1041,
	56, 1041,
	57, 1041,
	58, 1041,
	59, 1041,
	60, 1041,
	62, 1041,
	63, 1041,
	65, 1041,
	67, 1041,
	68, 1041,
	69, 1041,
	70, 1041,
	71, 1041,
	73, 1041,
	74, 1041,
	75, 1041,
	76, 1041,
	78, 1041,
	80, 1041,
	81, 1041,
	82, 1041,
	84, 1041,
	85, 1041,
	86, 1041,
	87, 1041,
	88, 1041,
	89, 1041,
	90, 1041,
	91, 1041,
	92, 1041,
	93, 1041,
	94, 1041,
	95, 1041,
	96, 1041,
	97, 1041,
	98, 1041,
	99, 1041,
	100, 1041,
	101, 1041,
	102, 1041,
	103, 1041,
	105, 1041,
	106, 1041,
	108, 1041,
	111, 1041,
	112, 1041,
	113, 1041,
	115, 1041,
	117, 1041,
	118, 1041,
	120, 1041,
	121, 1041,
	122, 1041,
	123, 1041,
	124, 1041,
	125, 1041,
	126, 1041,
	127, 1041,
	128, 1041,
	129, 1041,
	130, 1041,
	131, 1041,
	132, 1041,
	133, 1041,
	139, 1041,
	140, 1041,
	141, 1041,
	142, 1041,
	143, 1041,
	144, 1041,
	146, 1041,
	148, 1041,
	151, 1041,
	152, 1041,
	153, 1041,
	155, 1041,
	156, 1041,
	158, 1041,
	159, 1041,
	161, 1041,
	162, 1041,
	163, 1041,
	164, 1041,
	165, 1041,
	166, 1041,
	167, 1041,
	168, 1041,
	169, 1041,
	170, 1041,
	171, 1041,
	173, 1041,
	174, 1041,
	175, 1041,
	179, 1041,
	180, 1041,
	181, 1041,
	182, 1041,
	184, 1041,
	185, 1041,
	186, 1041,
	187, 1041,
	188, 1041,
	189, 1041,
	190, 1041,
	191, 1041,
	192, 1041,
	194, 1041,
	196, 1041,
	197, 1041,
	198, 1041,
	199, 1041,
	200, 1041,
	201, 1041,
	202, 1041,
	203, 1041,
	204, 1041,
	205, 1041,
	208, 1041,
	209, 1041,
	210, 1041,
	211, 1041,
	213, 1041,
	214, 1041,
	216, 1041,
	217, 1041,
	218, 1041,
	219, 1041,
	220, 1041,
	221, 1041,
	223, 1041,
	224, 1041,
	227, 1041,
	228, 1041,
	230, 1041,
	231, 1041,
	232, 1041,
	233, 1041,
	234, 1041,
	235, 1041,
	236, 1041,
	237, 1041,
	238, 1041,
	239, 1041,
	240, 1041,
	241, 1041,
	242, 1041,
	243, 1041,
	244, 1041,
	245, 1041,
	246, 1041,
	247, 1041,
	248, 1041,
	249, 1041,
	250, 1041,
	251, 1041,
	252, 1041,
	254, 1041,
	255, 1041,
	256, 1041,
	259, 1041,
	260, 1041,
	261, 1041,
	264, 1041,
	265, 1041,
	266, 1041,
	267, 1041,
	268, 1041,
	269, 1041,
	270, 1041,
	271, 1041,
	272, 1041,
	273, 1041,
	274, 1041,
	275, 1041,
	276, 1041,
	277, 1041,
	278, 1041,
	280, 1041,
	281, 1041,
	282, 1041,
	283, 1041,
	284, 1041,
	285, 1041,
	287, 1041,
	289, 1041,
	290, 1041,
	291, 1041,
	292, 1041,
	293, 1041,
	294, 1041,
	295, 1041,
	296, 1041,
	297, 1041,
	299, 1041,
	300, 1041,
	301, 1041,
	302, 1041,
	303, 1041,
	305, 1041,
	306, 1041,
	307, 1041,
	308, 1041,
	309, 1041,
	310, 1041,
	311, 1041,
	312, 1041,
	314, 1041,
	315, 1041,
	316, 1041,
	317, 1041,
	318, 1041,
	319, 1041,
	320, 1041,
	321, 1041,
	323, 1041,
	324, 1041,
	325, 1041,
	326, 1041,
	327, 1041,
	328, 1041,
	329, 1041,
	330, 1041,
	332, 1041,
	333, 1041,
	334, 1041,
	335, 1041,
	336, 1041,
	337, 1041,
	338, 1041,
	339, 1041,
	340, 1041,
	341, 1041,
	342, 1041,
	343, 1041,
	344, 1041,
	345, 1041,
	346, 1041,
	347, 1041,
	348, 1041,
	349, 1041,
	350, 1041,
	351, 1041,
	353, 1041,
	354, 1041,
	355, 1041,
	356, 1041,
	357, 1041,
	358, 1041,
	359, 1041,
	360, 1041,
	361, 1041,
	362, 1041,
	363, 1041,
	364, 1041,
	366, 1041,
	367, 1041,
	368, 1041,
	370, 1041,
	371, 1041,
	372, 1041,
	373, 1041,
	374, 1041,
	375, 1041,
	376, 1041,
	378, 1041,
	379, 1041,
	380, 1041,
	381, 1041,
	383, 1041,
	385, 1041,
	386, 1041,
	387, 1041,
	388, 1041,
	389, 1041,
	390, 1041,
	391, 1041,
	392, 1041,
	393, 1041,
	395, 1041,
	396, 1041,
	398, 1041,
	399, 1041,
	400, 1041,
	401, 1041,
	402, 1041,
	403, 1041,
	404, 1041,
	405, 1041,
	406, 1041,
	408, 1041,
	409, 1041,
	410, 1041,
	411, 1041,
	412, 1041,
	413, 1041,
	414, 1041,
	416, 1041,
	417, 1041,
	418, 1041,
	423, 1041,
	424, 1041,
	425, 1041,
	426, 1041,
	427, 1041,
	428, 1041,
	429, 1041,
	437, 1041,
	442, 1041,
	443, 1041,
	444, 1041,
	451, 1041,
	456, 1041,
	-2, 0,
	-1, 546,
	150, 1708,
	382, 1708,
	434, 1708,
	453, 1708,
	-2, 0,
	-1, 547,
	150, 1785,
	382, 1785,
	434, 1785,
	453, 1785,
	-2, 0,
	-1, 548,
	150, 1698,
	382, 1698,
	434, 1698,
	453, 1698,
	-2, 0,
	-1, 550,
	150, 1873,
	382, 1873,
	434, 1873,
	453, 1873,
	-2, 0,
	-1, 552,
	150, 1900,
	382, 1900,
	434, 1900,
	453, 1900,
	-2, 0,
	-1, 559,
	150, 1795,
	382, 1795,
	434, 1795,
	453, 1795,
	-2, 491,
	-1, 576,
	453, 1657,
	455, 1657,
	-2, 680,
	-1, 577,
	453, 1659,
	455, 1659,
	-2, 681,
	-1, 578,
	453, 1658,
	455, 1658,
	-2, 682,
	-1, 579,
	455, 1604,
	-2, 683,
	-1, 726,
	290, 619,
	341, 619,
	-2, 0,
	-1, 727,
	290, 618,
	341, 618,
	-2, 571,
	-1, 730,
	1, 642,
	450, 642,
	452, 642,
	454, 642,
	-2, 0,
	-1, 731,
	1, 679,
	147, 679,
	450, 679,
	452, 679,
	454, 679,
	-2, 0,
	-1, 740,
	1, 642,
	450, 642,
	452, 642,
	454, 642,
	-2, 0,
	-1, 741,
	1, 644,
	450, 644,
	452, 644,
	454, 644,
	-2, 0,
	-1, 742,
	1, 647,
	450, 647,
	452, 647,
	454, 647,
	-2, 0,
	-1, 746,
	1, 661,
	450, 661,
	452, 661,
	454, 661,
	-2, 0,
	-1, 747,
	1, 663,
	450, 663,
	452, 663,
	454, 663,
	-2, 0,
	-1, 790,
	134, 1043,
	222, 1043,
	253, 1043,
	-2, 1002,
	-1, 805,
	134, 1042,
	222, 1042,
	253, 1042,
	-2, 1002,
	-1, 829,
	453, 1656,
	-2, 499,
	-1, 858,
	451, 1648,
	-2, 1639,
	-1, 864,
	5, 1178,
	-2, 1689,
	-1, 865,
	5, 1179,
	-2, 1693,
	-1, 866,
	5, 1180,
	-2, 1692,
	-1, 867,
	5, 1181,
	-2, 1898,
	-1, 868,
	5, 1182,
	-2, 1797,
	-1, 869,
	5, 1183,
	-2, 1865,
	-1, 870,
	5, 1184,
	-2, 1867,
	-1, 871,
	5, 1185,
	-2, 1878,
	-1, 872,
	5, 1186,
	-2, 1868,
	-1, 873,
	5, 1187,
	-2, 1869,
	-1, 874,
	5, 1188,
	-2, 1688,
	-1, 875,
	5, 1189,
	-2, 1913,
	-1, 876,
	5, 1190,
	-2, 1760,
	-1, 877,
	5, 1191,
	-2, 1805,
	-1, 878,
	5, 1192,
	-2, 1807,
	-1, 879,
	5, 1193,
	-2, 1764,
	-1, 880,
	5, 1194,
	451, 1666,
	-2, 1657,
	-1, 881,
	5, 1250,
	451, 1250,
	-2, 1948,
	-1, 886,
	451, 1667,
	-2, 1658,
	-1, 888,
	5, 1198,
	-2, 1946,
	-1, 889,
	5, 1199,
	-2, 1947,
	-1, 890,
	5, 1200,
	-2, 1763,
	-1, 891,
	5, 1201,
	-2, 1959,
	-1, 892,
	5, 1202,
	-2, 1765,
	-1, 893,
	5, 1203,
	-2, 1766,
	-1, 894,
	5, 1204,
	-2, 1767,
	-1, 895,
	5, 1205,
	-2, 1928,
	-1, 896,
	5, 1206,
	-2, 1957,
	-1, 897,
	5, 1207,
	-2, 1743,
	-1, 898,
	5, 1208,
	-2, 1744,
	-1, 899,
	5, 1222,
	-2, 1940,
	-1, 901,
	5, 1197,
	-2, 1936,
	-1, 902,
	5, 1197,
	-2, 1935,
	-1, 903,
	5, 1197,
	-2, 1952,
	-1, 904,
	5, 1214,
	-2, 1930,
	-1, 905,
	5, 1215,
	-2, 1690,
	-1, 906,
	5, 1225,
	-2, 1929,
	-1, 907,
	5, 1227,
	-2, 1968,
	-1, 909,
	5, 1238,
	-2, 1718,
	-1, 910,
	5, 1249,
	-2, 1961,
	-1, 911,
	5, 1241,
	-2, 1962,
	-1, 912,
	5, 1249,
	-2, 1963,
	-1, 913,
	5, 1245,
	-2, 1964,
	-1, 914,
	5, 1165,
	-2, 1773,
	-1, 915,
	5, 1166,
	-2, 1774,
	-1, 916,
	453, 1654,
	-2, 1638,
	-1, 917,
	451, 1988,
	-2, 1655,
	-1, 937,
	5, 1233,
	-2, 1888,
	-1, 954,
	5, 1232,
	-2, 1969,
	-1, 964,
	5, 1234,
	417, 1234,
	-2, 1931,
	-1, 965,
	5, 1235,
	417, 1235,
	-2, 1932,
	-1, 1001,
	451, 1666,
	-2, 1657,
	-1, 1029,
	150, 1900,
	382, 1900,
	434, 1900,
	453, 1900,
	-2, 0,
	-1, 1030,
	1, 479,
	454, 479,
	-2, 936,
	-1, 1150,
	305, 1635,
	444, 1635,
	-2, 1634,
	-1, 1173,
	456, 1635,
	-2, 1636,
	-1, 1208,
	296, 711,
	416, 711,
	-2, 239,
	-1, 1228,
	276, 1030,
	-2, 844,
	-1, 1237,
	257, 1661,
	-2, 0,
	-1, 1301,
	1, 354,
	450, 354,
	452, 354,
	454, 354,
	-2, 1004,
	-1, 1304,
	4, 1967,
	11, 1967,
	12, 1967,
	14, 1967,
	15, 1967,
	16, 1967,
	17, 1967,
	18, 1967,
	19, 1967,
	21, 1967,
	22, 1967,
	23, 1967,
	24, 1967,
	25, 1967,
	27, 1967,
	30, 1967,
	32, 1967,
	34, 1967,
	37, 1967,
	38, 1967,
	39, 1967,
	40, 1967,
	41, 1967,
	42, 1967,
	43, 1967,
	44, 1967,
	45, 1967,
	46, 1967,
	47, 1967,
	49, 1967,
	50, 1967,
	51, 1967,
	52, 1967,
	53, 1967,
	54, 1967,
	57, 1967,
	58, 1967,
	59, 1967,
	60, 1967,
	62, 1967,
	63, 1967,
	64, 1967,
	67, 1967,
	68, 1967,
	69, 1967,
	70, 1967,
	71, 1967,
	72, 1967,
	73, 1967,
	74, 1967,
	75, 1967,
	76, 1967,
	78, 1967,
	79, 1967,
	80, 1967,
	81, 1967,
	82, 1967,
	84, 1967,
	85, 1967,
	86, 1967,
	94, 1967,
	95, 1967,
	96, 1967,
	97, 1967,
	98, 1967,
	99, 1967,
	100, 1967,
	101, 1967,
	103, 1967,
	105, 1967,
	106, 1967,
	108, 1967,
	111, 1967,
	112, 1967,
	113, 1967,
	115, 1967,
	117, 1967,
	118, 1967,
	120, 1967,
	121, 1967,
	122, 1967,
	123, 1967,
	124, 1967,
	125, 1967,
	126, 1967,
	127, 1967,
	128, 1967,
	129, 1967,
	130, 1967,
	131, 1967,
	135, 1967,
	136, 1967,
	137, 1967,
	138, 1967,
	139, 1967,
	140, 1967,
	141, 1967,
	142, 1967,
	143, 1967,
	144, 1967,
	145, 1967,
	146, 1967,
	148, 1967,
	151, 1967,
	152, 1967,
	153, 1967,
	155, 1967,
	156, 1967,
	158, 1967,
	159, 1967,
	161, 1967,
	162, 1967,
	163, 1967,
	164, 1967,
	165, 1967,
	166, 1967,
	167, 1967,
	168, 1967,
	169, 1967,
	170, 1967,
	171, 1967,
	172, 1967,
	173, 1967,
	174, 1967,
	175, 1967,
	176, 1967,
	177, 1967,
	178, 1967,
	180, 1967,
	181, 1967,
	182, 1967,
	184, 1967,
	185, 1967,
	186, 1967,
	187, 1967,
	188, 1967,
	189, 1967,
	190, 1967,
	191, 1967,
	192, 1967,
	194, 1967,
	196, 1967,
	197, 1967,
	198, 1967,
	199, 1967,
	200, 1967,
	201, 1967,
	202, 1967,
	203, 1967,
	204, 1967,
	205, 1967,
	206, 1967,
	207, 1967,
	208, 1967,
	209, 1967,
	210, 1967,
	211, 1967,
	213, 1967,
	214, 1967,
	216, 1967,
	217, 1967,
	218, 1967,
	219, 1967,
	220, 1967,
	221, 1967,
	223, 1967,
	224, 1967,
	227, 1967,
	228, 1967,
	229, 1967,
	230, 1967,
	231, 1967,
	232, 1967,
	233, 1967,
	234, 1967,
	235, 1967,
	236, 1967,
	237, 1967,
	238, 1967,
	239, 1967,
	240, 1967,
	241, 1967,
	242, 1967,
	243, 1967,
	244, 1967,
	247, 1967,
	249, 1967,
	250, 1967,
	251, 1967,
	252, 1967,
	254, 1967,
	255, 1967,
	256, 1967,
	259, 1967,
	260, 1967,
	261, 1967,
	262, 1967,
	264, 1967,
	265, 1967,
	267, 1967,
	269, 1967,
	270, 1967,
	271, 1967,
	272, 1967,
	273, 1967,
	274, 1967,
	275, 1967,
	276, 1967,
	277, 1967,
	278, 1967,
	280, 1967,
	281, 1967,
	282, 1967,
	283, 1967,
	284, 1967,
	285, 1967,
	287, 1967,
	289, 1967,
	290, 1967,
	291, 1967,
	292, 1967,
	293, 1967,
	294, 1967,
	295, 1967,
	296, 1967,
	297, 1967,
	299, 1967,
	300, 1967,
	301, 1967,
	302, 1967,
	303, 1967,
	304, 1967,
	305, 1967,
	306, 1967,
	307, 1967,
	308, 1967,
	309, 1967,
	310, 1967,
	311, 1967,
	312, 1967,
	314, 1967,
	315, 1967,
	316, 1967,
	317, 1967,
	318, 1967,
	319, 1967,
	320, 1967,
	321, 1967,
	322, 1967,
	323, 1967,
	324, 1967,
	325, 1967,
	326, 1967,
	327, 1967,
	328, 1967,
	329, 1967,
	330, 1967,
	332, 1967,
	333, 1967,
	334, 1967,
	335, 1967,
	336, 1967,
	337, 1967,
	338, 1967,
	339, 1967,
	340, 1967,
	341, 1967,
	343, 1967,
	344, 1967,
	345, 1967,
	346, 1967,
	347, 1967,
	348, 1967,
	349, 1967,
	350, 1967,
	351, 1967,
	353, 1967,
	354, 1967,
	355, 1967,
	356, 1967,
	357, 1967,
	358, 1967,
	359, 1967,
	360, 1967,
	361, 1967,
	362, 1967,
	363, 1967,
	364, 1967,
	366, 1967,
	367, 1967,
	368, 1967,
	370, 1967,
	371, 1967,
	372, 1967,
	373, 1967,
	374, 1967,
	375, 1967,
	376, 1967,
	378, 1967,
	379, 1967,
	380, 1967,
	381, 1967,
	383, 1967,
	385, 1967,
	386, 1967,
	387, 1967,
	388, 1967,
	389, 1967,
	391, 1967,
	392, 1967,
	393, 1967,
	395, 1967,
	396, 1967,
	399, 1967,
	400, 1967,
	401, 1967,
	402, 1967,
	403, 1967,
	404, 1967,
	406, 1967,
	408, 1967,
	409, 1967,
	410, 1967,
	411, 1967,
	412, 1967,
	413, 1967,
	414, 1967,
	416, 1967,
	417, 1967,
	418, 1967,
	423, 1967,
	424, 1967,
	425, 1967,
	426, 1967,
	427, 1967,
	428, 1967,
	429, 1967,
	430, 1967,
	432, 1967,
	433, 1967,
	434, 1967,
	435, 1967,
	436, 1967,
	437, 1967,
	439, 1967,
	440, 1967,
	441, 1967,
	442, 1967,
	443, 1967,
	444, 1967,
	445, 1967,
	446, 1967,
	447, 1967,
	449, 1967,
	452, 1967,
	453, 1967,
	455, 1967,
	456, 1967,
	-2, 0,
	-1, 1307,
	150, 1873,
	382, 1873,
	434, 1873,
	453, 1873,
	-2, 0,
	-1, 1335,
	290, 619,
	341, 619,
	-2, 0,
	-1, 1358,
	1, 614,
	450, 614,
	452, 614,
	454, 614,
	-2, 0,
	-1, 1359,
	1, 633,
	450, 633,
	452, 633,
	454, 633,
	-2, 0,
	-1, 1360,
	1, 621,
	450, 621,
	452, 621,
	454, 621,
	-2, 0,
	-1, 1381,
	1, 1920,
	450, 1920,
	452, 1920,
	453, 1920,
	454, 1920,
	-2, 659,
	-1, 1382,
	1, 1871,
	450, 1871,
	452, 1871,
	453, 1871,
	454, 1871,
	-2, 660,
	-1, 1395,
	1, 931,
	454, 931,
	-2, 936,
	-1, 1400,
	134, 1042,
	222, 1042,
	253, 1042,
	-2, 1002,
	-1, 1493,
	119, 1006,
	134, 1006,
	193, 1006,
	222, 1006,
	253, 1006,
	263, 1006,
	397, 1006,
	-2, 1406,
	-1, 1546,
	452, 1539,
	-2, 0,
	-1, 1588,
	119, 1006,
	134, 1006,
	193, 1006,
	222, 1006,
	253, 1006,
	263, 1006,
	397, 1006,
	-2, 1115,
	-1, 1642,
	451, 1237,
	-2, 1225,
	-1, 1681,
	1, 481,
	454, 481,
	-2, 936,
	-1, 1871,
	1, 616,
	450, 616,
	452, 616,
	454, 616,
	-2, 0,
	-1, 1872,
	1, 635,
	450, 635,
	452, 635,
	454, 635,
	-2, 0,
	-1, 1952,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1286,
	-1, 1953,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1287,
	-1, 1954,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1288,
	-1, 1955,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1289,
	-1, 1956,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1290,
	-1, 1957,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1291,
	-1, 1958,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1292,
	-1, 1959,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1293,
	-1, 1971,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1305,
	-1, 1972,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1306,
	-1, 1973,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1307,
	-1, 1976,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1312,
	-1, 1982,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1316,
	-1, 1984,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1324,
	-1, 1985,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1325,
	-1, 1986,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1326,
	-1, 1987,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1327,
	-1, 2081,
	5, 1194,
	150, 1550,
	451, 1666,
	-2, 1657,
	-1, 2082,
	150, 1551,
	-2, 1924,
	-1, 2083,
	150, 1552,
	-2, 1794,
	-1, 2084,
	150, 1553,
	-2, 1719,
	-1, 2085,
	150, 1554,
	-2, 1754,
	-1, 2086,
	150, 1555,
	-2, 1792,
	-1, 2087,
	150, 1556,
	-2, 1864,
	-1, 2163,
	1, 1116,
	84, 1116,
	119, 1116,
	134, 1116,
	147, 1116,
	151, 1116,
	157, 1116,
	160, 1116,
	184, 1116,
	193, 1116,
	203, 1116,
	218, 1116,
	222, 1116,
	240, 1116,
	253, 1116,
	257, 1116,
	263, 1116,
	313, 1116,
	315, 1116,
	397, 1116,
	407, 1116,
	420, 1116,
	421, 1116,
	422, 1116,
	431, 1116,
	450, 1116,
	452, 1116,
	454, 1116,
	455, 1116,
	-2, 1115,
	-1, 2168,
	451, 1640,
	-2, 1652,
	-1, 2189,
	451, 1236,
	-2, 1226,
	-1, 2422,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1314,
	-1, 2423,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1318,
	-1, 2429,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1320,
	-1, 2609,
	200, 936,
	287, 936,
	294, 936,
	431, 936,
	-2, 478,
	-1, 2699,
	276, 1030,
	-2, 844,
	-1, 2778,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1322,
	-1, 2785,
	197, 0,
	199, 0,
	247, 0,
	-2, 1341,
	-1, 2848,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1370,
	-1, 2849,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1371,
	-1, 2850,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1372,
	-1, 2854,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1376,
	-1, 2855,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1377,
	-1, 2856,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1378,
	-1, 2899,
	451, 1641,
	-2, 1653,
	-1, 2986,
	453, 2070,
	-2, 979,
	-1, 3032,
	197, 0,
	199, 0,
	247, 0,
	-2, 1342,
	-1, 3035,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1345,
	-1, 3036,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1347,
	-1, 3191,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1346,
	-1, 3192,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1348,
	-1, 3202,
	197, 0,
	-2, 1379,
	-1, 3305,
	197, 0,
	-2, 1380,
	-1, 3421,
	41, 0,
	169, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1927,
}

const sqlPrivate = 57344

const sqlLast = 72052

var sqlAct = [...]int{

	886, 3232, 3235, 3420, 3430, 3507, 3257, 3135, 3497, 2319,
	2112, 3390, 3387, 2686, 1179, 3399, 3374, 3431, 2816, 3432,
	3018, 1002, 3309, 3221, 2328, 3264, 2320, 3419, 3159, 1939,
	3182, 815, 2626, 2972, 3269, 2715, 2977, 3094, 2919, 211,
	1999, 211, 211, 1612, 211, 211, 211, 211, 211, 1293,
	1408, 211, 2982, 2155, 2708, 1154, 2959, 806, 2682, 578,
	2710, 2920, 2360, 557, 3206, 1613, 2316, 2415, 2291, 2362,
	1581, 1849, 2585, 2531, 1147, 1055, 1583, 211, 2293, 994,
	1491, 578, 2571, 1036, 3017, 2558, 1289, 2370, 2359, 1807,
	2296, 2351, 2547, 3066, 2353, 1555, 1342, 1800, 2329, 1810,
	1799, 674, 2220, 2871, 2218, 2530, 1726, 3310, 1936, 1501,
	2156, 2450, 2012, 2277, 4, 1735, 814, 140, 2050, 1932,
	1519, 2030, 2411, 1760, 1166, 86, 2252, 2369, 1753, 882,
	2294, 1713, 1711, 1556, 2130, 1395, 1043, 2590, 2253, 2042,
	3258, 803, 1996, 2684, 1156, 1302, 1276, 1286, 32, 2322,
	1796, 579, 1222, 525, 1032, 1514, 2158, 2363, 825, 2024,
	205, 989, 2138, 1565, 2120, 2109, 968, 2013, 580, 986,
	203, 204, 1482, 2077, 211, 211, 1409, 1407, 541, 1591,
	147, 574, 2210, 1795, 1828, 1300, 551, 148, 1816, 1252,
	669, 650, 140, 619, 842, 1176, 1725, 511, 528, 536,
	991, 533, 37, 966, 1394, 36, 737, 34, 25, 2446,
	23, 21, 1234, 2888, 1413, 2325, 2889, 3535, 1850, 583,
	2129, 1830, 2321, 1582, 1163, 2151, 721, 1040, 2773, 1197,
	586, 1830, 1830, 810, 2725, 3526, 885, 1492, 2129, 3525,
	3506, 583, 2129, 1767, 3493, 3491, 3454, 3108, 3108, 3455,
	3452, 1842, 586, 2129, 2607, 3450, 3447, 2724, 2129, 3448,
	805, 3444, 684, 3441, 3445, 1040, 1767, 852, 87, 3417,
	810, 179, 1767, 1421, 1422, 811, 1454, 1455, 1456, 1464,
	1465, 1466, 3416, 2122, 3415, 1767, 2027, 1842, 3412, 2874,
	3411, 1842, 1457, 1842, 2272, 3369, 2178, 3359, 2182, 1424,
	3108, 3358, 1763, 1470, 3108, 2239, 1019, 3352, 3346, 181,
	1767, 3108, 3344, 3307, 3290, 3108, 2182, 1767, 2129, 3287,
	2465, 791, 3108, 2503, 2504, 2466, 1423, 3370, 790, 1767,
	969, 969, 1421, 1422, 1443, 3293, 3249, 3248, 843, 1767,
	1767, 1440, 3241, 87, 1842, 1767, 3240, 2503, 2504, 3108,
	3212, 2028, 180, 1767, 3193, 1014, 75, 2182, 1424, 908,
	3180, 983, 173, 1842, 3171, 3132, 3125, 2737, 2129, 2129,
	174, 2503, 2504, 798, 2521, 2522, 2523, 3107, 970, 3034,
	3108, 2994, 2182, 2988, 2753, 1423, 2753, 972, 973, 2874,
	3030, 149, 1196, 2957, 2121, 3083, 2958, 1446, 1447, 1448,
	1449, 2894, 2884, 2877, 2895, 2885, 2129, 1429, 792, 179,
	2809, 2503, 2504, 1767, 2521, 2522, 2523, 812, 997, 3126,
	179, 2797, 2029, 2026, 2129, 2129, 2752, 1767, 1015, 2753,
	3029, 1461, 2518, 2744, 1471, 2745, 2745, 2267, 1451, 1452,
	1453, 2209, 2544, 2542, 179, 2129, 2129, 181, 1684, 987,
	2541, 2503, 2504, 2129, 2521, 2522, 2523, 2509, 181, 1467,
	2495, 1468, 2449, 2129, 2478, 2737, 1429, 2479, 1438, 1439,
	2788, 2303, 2518, 2467, 2503, 2504, 2129, 2349, 1831, 2414,
	1846, 2509, 181, 1459, 1421, 1422, 1766, 2207, 1831, 1831,
	180, 1444, 2195, 2181, 1551, 2129, 2182, 1451, 1452, 1453,
	173, 180, 1185, 2176, 2170, 2509, 2129, 1767, 174, 1469,
	1424, 173, 2518, 1175, 2726, 2128, 211, 2031, 2129, 174,
	1845, 2149, 3045, 1846, 1458, 180, 1191, 2503, 2504, 149,
	1344, 2148, 2892, 2727, 2754, 173, 2147, 1423, 2588, 2724,
	149, 2519, 2146, 174, 211, 2509, 2145, 974, 971, 797,
	1444, 211, 2503, 2504, 796, 1704, 795, 2524, 179, 1015,
	179, 2395, 2472, 179, 2324, 2519, 1450, 211, 1058, 211,
	211, 1159, 211, 1058, 211, 117, 794, 793, 789, 788,
	787, 786, 211, 211, 1445, 2509, 785, 1042, 2121, 2519,
	784, 1047, 783, 782, 781, 780, 181, 2524, 181, 779,
	778, 181, 719, 718, 717, 716, 715, 211, 2509, 1462,
	2154, 1015, 714, 2518, 2025, 713, 712, 711, 1429, 710,
	709, 211, 1838, 1159, 1159, 211, 211, 708, 211, 2519,
	707, 2068, 1829, 1912, 2520, 706, 813, 2524, 2187, 180,
	211, 180, 705, 1445, 180, 704, 703, 702, 211, 173,
	701, 173, 700, 699, 698, 697, 696, 174, 2520, 174,
	1169, 2509, 211, 211, 211, 211, 211, 1159, 1159, 2519,
	695, 694, 1159, 693, 211, 1159, 211, 211, 149, 683,
	149, 1492, 2520, 149, 682, 641, 2509, 640, 1030, 1190,
	211, 1460, 2519, 599, 1435, 1436, 1442, 1441, 1437, 1463,
	598, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	597, 589, 588, 587, 3377, 564, 2461, 1297, 563, 562,
	561, 545, 2520, 201, 200, 199, 1159, 2503, 2504, 198,
	2521, 2522, 2523, 1178, 197, 196, 1051, 1027, 1144, 1149,
	1150, 1184, 583, 1189, 1173, 1195, 211, 195, 194, 193,
	1177, 192, 191, 586, 2505, 2506, 2507, 2508, 2510, 2511,
	211, 190, 2520, 1425, 1426, 1427, 1428, 1430, 1431, 189,
	2519, 188, 187, 186, 185, 211, 2512, 2513, 2505, 2506,
	2507, 2508, 2510, 2511, 184, 2520, 183, 1305, 2518, 140,
	2281, 1317, 2515, 2516, 2517, 1235, 1235, 811, 182, 2514,
	2512, 2513, 2505, 2506, 2507, 2508, 2510, 2511, 2171, 1280,
	1283, 2162, 2066, 2064, 2062, 2060, 1303, 1709, 1598, 1508,
	1181, 1049, 1522, 1004, 3437, 3418, 3340, 3300, 1521, 1313,
	1852, 179, 2515, 2516, 2517, 1173, 1316, 1365, 1236, 2514,
	2512, 2513, 2505, 2506, 2507, 2508, 2510, 2511, 1401, 1525,
	1522, 3172, 1239, 1584, 3296, 179, 1521, 3294, 3167, 3087,
	87, 2509, 87, 2520, 87, 2503, 2504, 3231, 3065, 181,
	2309, 3064, 2515, 2516, 2517, 1420, 3052, 1520, 1804, 2514,
	2512, 2513, 2505, 2506, 2507, 2508, 2510, 2511, 2525, 3051,
	1290, 3050, 2748, 181, 3049, 3043, 3042, 1851, 3041, 2956,
	2908, 1503, 1400, 2907, 2513, 2505, 2506, 2507, 2508, 2510,
	2511, 2905, 180, 2524, 2898, 1425, 1426, 1427, 1428, 1430,
	1431, 2868, 173, 2867, 2866, 982, 1421, 1422, 2793, 1393,
	174, 2789, 1399, 2583, 1336, 2538, 180, 2529, 2502, 812,
	87, 2499, 2498, 2496, 2485, 2519, 173, 1406, 87, 1322,
	2484, 149, 1424, 1398, 174, 87, 2483, 2480, 2505, 2506,
	2507, 2508, 2510, 2511, 2477, 179, 2455, 2454, 211, 2447,
	1396, 2350, 2163, 2035, 1420, 149, 811, 1490, 1419, 1423,
	2514, 2512, 2513, 2505, 2506, 2507, 2508, 2510, 2511, 1705,
	2254, 1553, 1562, 1772, 211, 791, 1503, 1770, 2410, 2509,
	3533, 3505, 790, 181, 211, 1058, 211, 211, 211, 1495,
	3504, 3453, 1003, 1500, 578, 211, 211, 2818, 1600, 578,
	211, 1607, 841, 1416, 1417, 211, 1402, 3407, 858, 1609,
	1504, 3405, 1502, 1524, 1676, 3337, 3334, 1679, 2520, 3331,
	3330, 3329, 884, 3325, 3319, 2310, 180, 3291, 3286, 3285,
	1058, 2002, 3166, 3227, 3204, 3177, 173, 3176, 1516, 1517,
	1429, 3157, 840, 3154, 174, 3148, 1572, 3082, 1592, 3063,
	3008, 3005, 1559, 1560, 2935, 1707, 2934, 2923, 2922, 2880,
	2601, 2067, 792, 2784, 2755, 149, 2738, 2702, 1678, 2672,
	2651, 2629, 2628, 2603, 2543, 2476, 2475, 2460, 2438, 2290,
	1484, 1526, 140, 1523, 1515, 2503, 2504, 1512, 2521, 2522,
	2523, 2191, 2190, 2166, 1421, 1422, 811, 2143, 1493, 2127,
	2058, 1486, 1499, 1597, 969, 2564, 1554, 2008, 1550, 1549,
	1548, 1547, 1546, 1545, 1577, 1544, 1543, 1604, 1542, 1540,
	1424, 1539, 1538, 1537, 1536, 1535, 1534, 1533, 2515, 2516,
	2517, 1532, 1589, 1531, 1530, 2514, 2512, 2513, 2505, 2506,
	2507, 2508, 2510, 2511, 2629, 1681, 2518, 1423, 1695, 1694,
	1529, 1552, 1704, 1701, 583, 1159, 211, 1528, 1056, 583,
	1703, 1505, 1058, 1167, 1487, 586, 1485, 1480, 1580, 1586,
	586, 1579, 1719, 1578, 1576, 1608, 1575, 1574, 1853, 1026,
	1675, 2503, 2504, 1017, 2308, 1010, 3312, 3153, 3084, 3038,
	1000, 2904, 2887, 2883, 1610, 2464, 2144, 3216, 3086, 2503,
	2504, 211, 211, 2903, 996, 997, 2184, 997, 211, 1504,
	1602, 2599, 1483, 1704, 1593, 1704, 1696, 1044, 211, 2509,
	1704, 1046, 3332, 2711, 998, 1584, 1037, 211, 3170, 211,
	3127, 211, 2890, 87, 2740, 211, 1585, 2739, 1588, 2967,
	1421, 1422, 2065, 2063, 2061, 2059, 1698, 211, 1040, 1522,
	1750, 1040, 3270, 1752, 2482, 1521, 1757, 1391, 1734, 3297,
	2481, 2256, 3295, 1682, 1335, 2420, 1424, 1690, 2241, 1041,
	2933, 2524, 2654, 1045, 1510, 1805, 1788, 1850, 2507, 2508,
	2510, 2511, 776, 2688, 3265, 2687, 1344, 1159, 211, 1159,
	1761, 3207, 211, 1423, 1801, 1159, 3230, 1730, 1159, 211,
	1040, 211, 211, 2519, 1535, 2027, 1822, 1178, 1535, 1343,
	2948, 1159, 1159, 1038, 211, 2509, 583, 1813, 1366, 211,
	1039, 777, 2937, 2759, 1177, 3508, 2666, 586, 578, 211,
	1748, 211, 2321, 211, 2820, 211, 1619, 211, 1645, 1427,
	1428, 1430, 1431, 2043, 1856, 211, 1756, 2189, 211, 1541,
	211, 1765, 1518, 3438, 981, 2470, 2680, 1644, 1792, 211,
	1700, 1212, 3449, 3446, 2915, 2720, 1326, 3384, 1699, 2973,
	2028, 2357, 1791, 3479, 1429, 3118, 1200, 1867, 211, 2196,
	772, 1782, 1781, 3480, 211, 636, 770, 3351, 3530, 3256,
	2611, 1820, 3251, 1855, 1210, 768, 2520, 766, 2950, 2519,
	763, 2946, 1900, 1489, 1058, 1451, 1452, 1453, 1031, 3439,
	2945, 1898, 811, 2912, 2911, 2459, 1815, 1363, 2213, 1818,
	2458, 1736, 2457, 809, 809, 2456, 756, 2424, 2274, 2211,
	2266, 1303, 2263, 2213, 2317, 1691, 2244, 1730, 2177, 1740,
	1919, 2029, 2026, 1983, 2211, 1833, 1397, 1916, 1835, 1046,
	1174, 1837, 804, 2613, 2054, 1840, 2053, 1040, 1444, 1941,
	1245, 1037, 1244, 1211, 637, 1264, 1364, 1937, 1938, 3188,
	1780, 631, 1847, 1243, 1027, 1242, 1223, 2014, 2015, 1909,
	1206, 1737, 1858, 2760, 2222, 1910, 760, 2243, 583, 1058,
	1863, 2203, 2520, 3237, 2169, 2014, 2040, 808, 808, 586,
	3409, 1045, 2600, 1362, 1998, 2232, 2515, 2516, 2517, 1883,
	3435, 1324, 1221, 2514, 2512, 2513, 2505, 2506, 2507, 2508,
	2510, 2511, 1914, 2095, 1870, 1859, 1998, 1404, 2925, 1917,
	1431, 2076, 211, 2080, 2080, 2093, 2031, 2014, 1334, 2006,
	2113, 2115, 630, 3350, 2004, 2119, 1046, 1727, 1038, 1220,
	1319, 1445, 1025, 2231, 812, 1039, 1913, 1911, 1819, 1915,
	1741, 2762, 1908, 1058, 211, 1918, 2761, 810, 810, 2031,
	1876, 2653, 2225, 211, 791, 1723, 211, 791, 791, 1058,
	819, 1928, 3114, 2392, 1929, 1930, 1705, 1702, 2167, 2175,
	2803, 811, 2412, 2413, 2039, 1601, 1728, 1729, 1045, 2717,
	1980, 1376, 3471, 1208, 811, 1871, 1037, 2718, 811, 2514,
	2512, 2513, 2505, 2506, 2507, 2508, 2510, 2511, 2007, 2052,
	1742, 1743, 2185, 1724, 2056, 2057, 2164, 2260, 691, 1738,
	1337, 1721, 3436, 2025, 2010, 2511, 1721, 1495, 2150, 2663,
	1710, 590, 2160, 2161, 1320, 2658, 2800, 1705, 2254, 1705,
	2254, 1747, 2037, 1877, 1705, 2254, 1872, 1739, 211, 3187,
	2043, 792, 2675, 2717, 792, 792, 1593, 1759, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 2242, 1361, 3479,
	2134, 639, 638, 1390, 2100, 2031, 3520, 1758, 969, 629,
	1058, 628, 1040, 1038, 2104, 211, 811, 2088, 2117, 1732,
	1039, 807, 807, 211, 2125, 2126, 2179, 3434, 140, 2224,
	3326, 2136, 2140, 2141, 211, 1754, 2610, 2801, 632, 2000,
	1223, 2612, 1008, 2398, 3105, 3112, 2135, 211, 1978, 1344,
	1159, 1981, 1589, 812, 2936, 1730, 1728, 1729, 1344, 1263,
	1619, 1619, 1744, 211, 1058, 565, 1493, 211, 211, 2212,
	1493, 3102, 1907, 2435, 1205, 668, 2641, 2214, 2926, 2186,
	774, 1644, 1644, 1755, 773, 1830, 3470, 2643, 1524, 3500,
	764, 1325, 1768, 211, 3238, 211, 2433, 1513, 211, 764,
	1977, 765, 2247, 997, 764, 1899, 1007, 2597, 3367, 2300,
	2645, 2947, 3103, 211, 1897, 2194, 1516, 1517, 2640, 1373,
	211, 2261, 211, 2305, 211, 1745, 2401, 997, 2264, 1358,
	211, 2193, 2031, 211, 987, 211, 1005, 211, 2197, 211,
	211, 2223, 211, 1159, 1159, 1159, 1721, 1159, 2278, 2275,
	2246, 211, 211, 2426, 211, 211, 2644, 1040, 1588, 571,
	591, 592, 3113, 1875, 211, 3144, 3019, 523, 2255, 2257,
	2258, 2259, 2217, 761, 2238, 1997, 211, 211, 211, 87,
	1359, 211, 3184, 211, 1994, 2005, 211, 1869, 211, 1403,
	211, 518, 2234, 2345, 2346, 2387, 3198, 2388, 2226, 2228,
	1333, 2430, 2314, 2245, 3486, 2271, 1374, 1992, 211, 211,
	211, 211, 2431, 211, 1024, 2436, 2262, 1150, 1178, 692,
	2283, 2400, 2285, 3469, 2332, 2341, 1979, 583, 2373, 2375,
	2376, 1479, 3395, 1173, 2288, 2279, 211, 1321, 586, 2397,
	2374, 3365, 573, 2278, 2199, 2278, 3336, 2139, 2304, 594,
	593, 2034, 2474, 2356, 2159, 3098, 2201, 810, 3099, 2371,
	2347, 3152, 140, 3521, 2386, 2323, 3014, 2323, 2327, 2900,
	3366, 2383, 1020, 2377, 3022, 2378, 1375, 3498, 2334, 2338,
	1568, 2339, 1346, 2340, 3183, 1751, 3433, 2342, 2202, 2276,
	3478, 1303, 2348, 87, 3476, 2403, 3101, 2358, 2396, 595,
	596, 2200, 3275, 3156, 800, 2706, 751, 2312, 3104, 1173,
	1173, 1794, 1988, 1571, 1561, 1018, 2399, 1000, 3145, 1000,
	1989, 1013, 2427, 1990, 87, 510, 1995, 2961, 802, 2452,
	2453, 996, 2137, 996, 1940, 211, 1605, 567, 1412, 87,
	1616, 87, 1831, 3020, 2462, 1411, 3499, 1569, 1173, 2463,
	1564, 998, 1731, 998, 2432, 572, 3515, 2407, 3061, 2857,
	1692, 3243, 2409, 2434, 801, 3242, 2343, 3225, 3316, 3117,
	2573, 1689, 3105, 2448, 2799, 1619, 3116, 2914, 3501, 1173,
	2591, 2707, 2406, 3185, 87, 2624, 87, 2620, 2313, 2295,
	2292, 1814, 1803, 1802, 1776, 569, 1644, 3375, 752, 3102,
	3338, 2385, 3095, 1323, 751, 751, 1904, 1685, 3100, 1006,
	2389, 2248, 2390, 87, 2391, 3093, 1924, 1568, 2978, 2044,
	2131, 3097, 2540, 2425, 1058, 3160, 802, 802, 811, 2289,
	2545, 1266, 566, 1410, 2404, 2552, 2553, 1687, 2554, 3263,
	3103, 3261, 2574, 211, 1570, 3226, 519, 1411, 2631, 2630,
	1571, 211, 2418, 1688, 688, 2100, 2100, 1864, 211, 2882,
	2557, 211, 211, 1058, 1412, 1991, 2556, 1360, 570, 1566,
	2174, 3096, 1058, 2173, 1993, 2172, 2302, 1251, 211, 568,
	2578, 2469, 1237, 2572, 1569, 1479, 2133, 808, 3136, 1249,
	1714, 2132, 2595, 211, 1715, 2858, 752, 752, 520, 1238,
	3062, 2859, 3514, 2576, 2568, 3321, 1567, 2606, 2749, 2168,
	3233, 211, 211, 211, 2579, 2580, 1925, 211, 690, 3115,
	211, 2567, 1812, 2677, 2566, 2587, 2608, 211, 211, 211,
	211, 211, 681, 2569, 3483, 1410, 521, 1347, 522, 2614,
	2582, 753, 3259, 211, 211, 211, 2586, 3339, 2598, 2000,
	2249, 2250, 211, 2563, 3067, 2546, 2100, 2100, 2100, 2872,
	2633, 3378, 2637, 2638, 211, 1159, 3223, 211, 2048, 3485,
	1493, 2561, 2535, 2536, 2537, 1058, 1388, 1370, 2575, 2621,
	1716, 1570, 1058, 3098, 2625, 1368, 3099, 211, 3451, 3234,
	211, 211, 1718, 3333, 3203, 3322, 3060, 2952, 3224, 1357,
	211, 1355, 2549, 1159, 211, 2532, 1159, 1159, 1159, 2604,
	2605, 2593, 2594, 211, 2577, 2617, 2618, 2562, 2691, 211,
	2208, 1353, 1351, 2592, 3101, 211, 3379, 211, 2783, 1349,
	2656, 2632, 2609, 2635, 211, 2657, 3104, 1341, 2664, 753,
	753, 2615, 799, 2757, 754, 2497, 1339, 1247, 1720, 2437,
	1719, 2299, 2273, 686, 687, 2240, 2192, 1159, 1159, 997,
	3323, 1599, 1596, 2722, 1389, 211, 211, 2646, 1314, 211,
	1250, 1896, 2533, 2695, 997, 1719, 804, 2713, 2652, 2394,
	755, 2659, 1248, 2660, 2648, 2649, 2393, 2661, 2650, 2380,
	987, 2668, 2662, 1906, 1880, 2685, 211, 1677, 1058, 211,
	211, 1058, 211, 997, 2674, 987, 1527, 1296, 1761, 1318,
	2246, 689, 916, 1227, 1173, 3429, 1761, 2669, 2670, 211,
	2047, 2671, 2736, 762, 1387, 1369, 3131, 3124, 3372, 2371,
	3091, 679, 680, 1367, 1791, 2976, 3100, 2931, 2371, 2811,
	2709, 1721, 754, 754, 1616, 1616, 2756, 1356, 2929, 1354,
	811, 207, 2719, 513, 514, 2747, 529, 513, 529, 539,
	544, 2728, 1058, 560, 2735, 3279, 140, 2913, 2751, 1352,
	1350, 207, 2647, 1058, 2705, 211, 2767, 1348, 755, 755,
	2690, 2689, 2786, 2721, 2318, 1340, 2307, 2306, 2768, 678,
	2286, 2667, 1844, 207, 1338, 1246, 1843, 1841, 1839, 1836,
	2673, 1834, 1832, 87, 87, 1823, 1773, 87, 1771, 2795,
	2796, 1762, 1749, 1746, 1733, 1722, 1895, 978, 2416, 1414,
	1606, 1619, 2764, 2730, 2731, 2732, 3480, 2733, 2734, 3401,
	3179, 2769, 3174, 3173, 2771, 2372, 87, 87, 1708, 1202,
	87, 979, 1644, 2712, 2213, 767, 769, 2213, 3281, 2230,
	2869, 2213, 2987, 1937, 2827, 2211, 1873, 1619, 2229, 2791,
	1878, 1730, 2227, 1385, 1386, 3328, 3302, 3068, 211, 1937,
	2837, 2251, 1173, 1421, 1422, 2233, 2810, 1717, 1644, 2802,
	2804, 2805, 2817, 211, 2100, 2100, 513, 513, 2821, 1058,
	2417, 1418, 812, 524, 207, 1000, 2826, 2268, 2822, 2891,
	2865, 2823, 1415, 2235, 2861, 2824, 2834, 3371, 211, 996,
	1421, 1422, 2836, 3341, 1714, 2965, 2270, 87, 1715, 1000,
	2960, 2886, 2909, 2765, 980, 3496, 1423, 2269, 1714, 998,
	2237, 2278, 1715, 996, 2897, 2326, 1424, 2862, 2596, 535,
	2118, 2236, 1680, 1611, 3513, 2503, 2504, 1421, 1422, 2205,
	2204, 3343, 1492, 998, 211, 2051, 2875, 2876, 2870, 2902,
	140, 2873, 2938, 1423, 2100, 2100, 2100, 2100, 2100, 2100,
	2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
	2100, 2100, 2100, 2949, 2100, 2806, 1328, 2205, 2602, 211,
	211, 211, 1327, 2893, 2206, 2055, 2049, 2022, 1372, 3039,
	2901, 1371, 2798, 1490, 1716, 1488, 1058, 211, 3522, 3313,
	3217, 1159, 3215, 3147, 3085, 3011, 1718, 2942, 1716, 3004,
	2993, 2971, 2906, 2955, 2954, 211, 2953, 2928, 2729, 2917,
	1718, 2703, 2701, 2989, 2551, 2382, 2878, 2879, 211, 211,
	1159, 1159, 1159, 2381, 211, 211, 211, 2336, 2951, 211,
	211, 2625, 2984, 211, 211, 2311, 1159, 2287, 2009, 1616,
	1894, 211, 2943, 2944, 2983, 2964, 2980, 1893, 1892, 1826,
	2979, 1825, 1720, 2581, 1058, 2969, 2968, 1619, 2246, 1824,
	1806, 1784, 2589, 1783, 1779, 1778, 1720, 1777, 1775, 1774,
	1405, 1384, 1383, 997, 997, 1275, 1274, 1273, 1644, 1272,
	2970, 3037, 1271, 1270, 1269, 3012, 1268, 1267, 1265, 1260,
	2981, 87, 1259, 2985, 3000, 1258, 1257, 1256, 2991, 211,
	2930, 1219, 2932, 2990, 987, 987, 1619, 1619, 3033, 2332,
	2996, 1218, 2995, 1217, 3003, 1216, 1215, 1214, 3006, 1213,
	3024, 3010, 1619, 1619, 1207, 3001, 3002, 1644, 1644, 3007,
	1201, 1199, 1198, 3021, 3009, 1023, 1022, 953, 2371, 863,
	3016, 1791, 1683, 1644, 1644, 1721, 775, 623, 759, 3236,
	1378, 73, 1209, 1619, 610, 67, 2927, 3383, 2639, 1721,
	1879, 211, 1345, 1881, 2565, 2142, 3364, 3046, 2473, 3308,
	3197, 1058, 2589, 1058, 1644, 3073, 2616, 2046, 1509, 69,
	851, 936, 3143, 3142, 3092, 2549, 3013, 2916, 3059, 2361,
	1712, 3140, 211, 211, 211, 3139, 818, 1061, 1693, 857,
	1706, 2188, 2079, 1615, 211, 860, 1617, 862, 1011, 861,
	211, 2974, 211, 1618, 1511, 211, 211, 211, 3111, 859,
	1614, 2301, 2330, 1254, 738, 739, 211, 211, 1159, 3121,
	3122, 1058, 1697, 1159, 3075, 2003, 1021, 2041, 2468, 211,
	1506, 3110, 997, 560, 3120, 3072, 3076, 831, 3081, 3070,
	3071, 3077, 853, 2038, 211, 2586, 3090, 1058, 1152, 207,
	1159, 207, 207, 1016, 1164, 830, 207, 2570, 2716, 3109,
	2896, 3165, 1923, 987, 207, 1180, 2408, 1920, 626, 3025,
	2500, 1717, 3134, 2023, 1009, 2101, 2094, 2090, 1167, 211,
	1392, 1056, 1481, 1927, 2331, 1717, 3088, 3089, 3164, 1204,
	1058, 3129, 1048, 3178, 1619, 87, 834, 2001, 3138, 1497,
	1228, 1231, 3149, 1226, 3119, 3162, 3128, 207, 207, 3161,
	1164, 2442, 2723, 3150, 3175, 1644, 1058, 3169, 3163, 2584,
	2183, 3398, 207, 1931, 3069, 1793, 977, 976, 975, 3389,
	1262, 1563, 3074, 3137, 3386, 2683, 1686, 2198, 1473, 2692,
	847, 1172, 2808, 2550, 207, 207, 207, 207, 1164, 3209,
	2750, 1224, 1309, 2814, 1058, 3327, 560, 1472, 207, 207,
	771, 3318, 211, 3189, 211, 3186, 1058, 211, 3194, 1035,
	1034, 1033, 678, 2623, 3519, 211, 2924, 3205, 178, 3146,
	175, 997, 177, 176, 3151, 2940, 3078, 1791, 2676, 997,
	90, 35, 16, 1619, 116, 3220, 3219, 211, 115, 114,
	113, 112, 997, 1329, 111, 3210, 3211, 3168, 110, 109,
	108, 107, 987, 106, 1644, 211, 2096, 105, 104, 211,
	987, 1000, 3213, 103, 3218, 102, 101, 211, 207, 3254,
	3214, 100, 1159, 3267, 99, 996, 1000, 211, 3262, 98,
	3239, 97, 207, 96, 95, 94, 3133, 93, 92, 91,
	996, 3280, 556, 553, 3245, 998, 49, 544, 211, 211,
	3252, 48, 89, 3272, 3260, 1000, 3274, 88, 15, 2899,
	998, 33, 3158, 13, 53, 1616, 54, 3266, 211, 996,
	12, 3283, 817, 28, 211, 3288, 3289, 3277, 3278, 2100,
	2983, 3276, 3282, 29, 211, 79, 78, 27, 87, 998,
	14, 26, 24, 87, 10, 8, 3271, 7, 30, 1573,
	11, 1616, 145, 3324, 3284, 144, 72, 3315, 3306, 143,
	71, 142, 3292, 2685, 141, 3301, 87, 3314, 70, 22,
	9, 137, 2100, 3268, 2966, 66, 139, 3311, 138, 63,
	136, 3335, 135, 64, 134, 3299, 211, 1159, 133, 65,
	1605, 132, 211, 20, 5, 52, 1159, 1159, 6, 3181,
	3357, 2758, 1159, 83, 84, 31, 211, 61, 211, 60,
	59, 19, 51, 3342, 3246, 3247, 18, 3345, 169, 168,
	3362, 167, 3363, 3368, 3353, 3349, 166, 161, 3354, 160,
	211, 165, 163, 162, 3361, 164, 211, 211, 159, 1058,
	131, 3380, 3348, 171, 170, 3355, 3356, 211, 211, 157,
	3381, 3360, 3392, 153, 152, 3396, 156, 3404, 3402, 3406,
	3388, 3391, 3271, 158, 155, 154, 151, 172, 3385, 1173,
	130, 3414, 2100, 56, 3393, 3413, 129, 128, 127, 126,
	125, 211, 55, 17, 2, 1, 0, 0, 3408, 3410,
	513, 0, 3440, 0, 0, 0, 0, 0, 0, 0,
	3428, 0, 0, 3427, 3425, 3426, 0, 0, 0, 0,
	0, 207, 1619, 207, 3442, 0, 207, 0, 0, 3456,
	211, 0, 3458, 0, 3460, 0, 1180, 0, 1164, 207,
	3465, 0, 3466, 1644, 0, 3468, 207, 1180, 529, 3457,
	211, 207, 1180, 0, 3462, 1564, 0, 560, 2000, 0,
	0, 0, 3400, 0, 3459, 0, 3461, 0, 0, 0,
	3477, 3475, 0, 3474, 211, 0, 211, 1619, 3482, 3481,
	3484, 1616, 0, 0, 0, 3490, 3388, 3492, 3487, 3391,
	3489, 3488, 3494, 3495, 0, 0, 0, 0, 1644, 0,
	0, 0, 0, 3463, 3464, 0, 3503, 3467, 0, 3502,
	3403, 0, 0, 0, 3509, 0, 3511, 0, 3510, 0,
	3512, 0, 1568, 3080, 0, 3516, 0, 0, 0, 0,
	1616, 1616, 670, 0, 2332, 3517, 3518, 3523, 0, 3524,
	0, 0, 0, 0, 0, 0, 1616, 1616, 0, 0,
	3527, 3528, 3529, 3531, 3532, 1571, 0, 57, 0, 672,
	2439, 2440, 3536, 1619, 3534, 0, 0, 0, 0, 58,
	0, 0, 1421, 1422, 1566, 0, 0, 1616, 0, 0,
	3400, 0, 0, 62, 1644, 0, 0, 0, 0, 1569,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 1764, 0, 0, 1000, 1000, 0, 207, 0,
	0, 1567, 0, 68, 0, 0, 0, 2096, 2096, 996,
	996, 0, 0, 0, 0, 1423, 0, 0, 2560, 87,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 998,
	998, 817, 0, 74, 0, 0, 0, 0, 0, 0,
	1056, 0, 85, 207, 207, 0, 0, 75, 82, 0,
	207, 2526, 2527, 2528, 0, 0, 0, 0, 0, 0,
	1811, 0, 0, 1182, 0, 1186, 3195, 1192, 0, 207,
	0, 207, 0, 207, 0, 0, 1570, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1827,
	0, 76, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 0, 3195, 0, 0, 0, 2096, 2096,
	2096, 0, 0, 0, 0, 0, 1940, 0, 1616, 0,
	0, 0, 0, 0, 0, 0, 1848, 1451, 1452, 1453,
	560, 0, 0, 0, 678, 1857, 0, 0, 0, 0,
	0, 207, 0, 1164, 207, 0, 0, 0, 1865, 1866,
	0, 1312, 0, 0, 0, 0, 560, 0, 1315, 0,
	0, 207, 0, 0, 1000, 0, 0, 0, 2559, 0,
	207, 207, 0, 207, 0, 207, 0, 207, 996, 207,
	1444, 0, 0, 0, 0, 0, 0, 1901, 0, 0,
	1902, 0, 1903, 209, 0, 0, 0, 77, 998, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1616, 0, 0,
	544, 0, 0, 0, 0, 0, 560, 0, 0, 146,
	80, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 673, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 181,
	1421, 1422, 1474, 1475, 1476, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 1000, 0, 0, 1424, 0, 0, 0,
	0, 1000, 1494, 0, 150, 0, 0, 996, 1507, 0,
	0, 0, 180, 0, 1000, 996, 0, 0, 0, 0,
	0, 0, 173, 1423, 829, 0, 0, 998, 996, 1940,
	174, 0, 0, 0, 0, 998, 2503, 2504, 0, 2521,
	2522, 2523, 0, 0, 0, 0, 0, 0, 998, 0,
	0, 671, 0, 0, 513, 0, 0, 1421, 1422, 2779,
	2780, 0, 0, 1464, 1465, 1466, 0, 0, 0, 207,
	0, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 1424, 0, 0, 513, 1470, 0, 0,
	0, 0, 0, 207, 0, 513, 0, 2518, 207, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 2096, 2096, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 1557, 1557, 1557,
	0, 0, 0, 0, 0, 1451, 1452, 1453, 0, 2838,
	2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848,
	2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 0, 2860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2509, 0, 0, 0, 0, 0, 1616, 0, 0, 0,
	529, 1446, 1447, 1448, 1449, 0, 0, 0, 1444, 0,
	0, 1429, 0, 0, 0, 817, 2096, 2096, 2096, 2096,
	2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096,
	2096, 2096, 2096, 2096, 2096, 1461, 2096, 2221, 1471, 0,
	0, 0, 1451, 1452, 1453, 207, 0, 0, 0, 0,
	0, 1616, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2265, 0, 207,
	0, 0, 0, 0, 2519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 1459, 0, 207,
	2280, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 1180, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1811, 0, 1616, 0, 0,
	0, 0, 2221, 0, 513, 0, 2335, 0, 0, 0,
	0, 0, 207, 0, 0, 207, 0, 207, 0, 207,
	2344, 207, 207, 0, 1164, 0, 0, 2520, 0, 0,
	1450, 0, 0, 2354, 678, 0, 2221, 2221, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 1164,
	207, 0, 0, 1180, 0, 1180, 0, 0, 1164, 0,
	1164, 0, 1164, 1462, 0, 0, 0, 0, 0, 0,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	207, 207, 1164, 207, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 829,
	0, 0, 0, 829, 0, 0, 0, 0, 207, 0,
	0, 1142, 0, 0, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2515, 2516, 2517,
	0, 0, 0, 0, 2514, 2512, 2513, 2505, 2506, 2507,
	2508, 2510, 2511, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1921, 0, 1926, 0, 0, 0, 0, 0,
	1933, 0, 0, 0, 0, 0, 0, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 0, 1982, 0, 1984, 1985, 1986, 1987, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2011, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 513, 0, 0, 0, 0,
	1494, 0, 0, 513, 2036, 0, 0, 0, 0, 0,
	513, 0, 0, 513, 513, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1180, 0, 0, 0, 0, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 0, 0, 3202, 1180, 2092, 0, 2103, 2105,
	2110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2221, 2221, 207, 0, 0, 0, 2221,
	0, 0, 2627, 0, 0, 0, 0, 0, 0, 2221,
	2627, 2221, 2627, 2627, 0, 0, 0, 3228, 0, 0,
	0, 0, 0, 0, 0, 207, 207, 207, 0, 0,
	0, 2096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2665, 0, 57, 0, 207, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2679,
	62, 0, 2681, 2221, 2096, 0, 0, 0, 0, 0,
	2696, 0, 207, 2698, 2699, 2700, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	68, 1164, 0, 0, 0, 0, 0, 2221, 0, 513,
	0, 0, 0, 0, 0, 0, 2221, 3305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 2742, 2743, 0, 2503, 2504, 85,
	2521, 2522, 2523, 0, 75, 82, 0, 207, 1811, 0,
	0, 1811, 0, 0, 0, 0, 2787, 0, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2096, 0, 0, 0, 2763, 0,
	0, 1164, 207, 0, 207, 0, 1421, 1422, 76, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 829, 2518, 0,
	0, 207, 2282, 1142, 2284, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 2819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2509, 0, 0, 0, 0, 2180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 2524, 0, 0, 146, 80, 0, 81,
	0, 0, 0, 0, 0, 1142, 0, 0, 0, 207,
	207, 0, 0, 0, 1461, 0, 0, 1471, 179, 0,
	513, 1451, 1452, 1453, 0, 2519, 0, 0, 0, 0,
	673, 0, 0, 117, 0, 513, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 181, 0, 0, 0,
	1180, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 660, 0, 1444, 0, 0, 0, 118, 2422,
	2423, 0, 0, 0, 0, 2429, 0, 0, 0, 0,
	0, 150, 1469, 0, 0, 642, 0, 0, 0, 180,
	0, 0, 0, 0, 2443, 2444, 560, 1458, 0, 173,
	2036, 0, 0, 0, 0, 0, 0, 174, 2520, 2451,
	0, 0, 0, 0, 0, 0, 643, 0, 0, 0,
	0, 0, 0, 0, 917, 644, 0, 0, 149, 0,
	0, 2962, 207, 207, 0, 2471, 0, 0, 0, 1450,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	2486, 0, 0, 0, 0, 0, 665, 1445, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 2221, 207, 0,
	0, 646, 0, 0, 0, 0, 0, 2997, 2998, 2999,
	2354, 2354, 1462, 208, 0, 0, 678, 678, 2221, 647,
	0, 1811, 1811, 0, 0, 678, 2221, 0, 2110, 2110,
	2110, 0, 0, 207, 0, 208, 0, 0, 0, 648,
	0, 0, 649, 1557, 0, 0, 0, 0, 2515, 2516,
	2517, 2555, 0, 0, 0, 2514, 2512, 2513, 2505, 2506,
	2507, 2508, 2510, 2511, 0, 0, 0, 1142, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3047, 0, 0, 1460, 0, 0, 1435, 1436, 1442,
	1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 817, 3055, 0, 0,
	3054, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 1142, 1180, 2642, 207, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 652,
	0, 0, 0, 0, 2221, 2221, 2221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1180, 0, 0, 0,
	0, 0, 2221, 0, 2627, 0, 667, 1180, 1180, 207,
	0, 0, 0, 653, 0, 3130, 654, 0, 207, 207,
	0, 883, 662, 0, 0, 0, 1142, 0, 0, 655,
	0, 2221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1142, 2714, 0, 0, 3155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 663,
	206, 0, 0, 0, 0, 0, 657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 659, 0,
	584, 1180, 0, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2770, 0, 0, 0, 1933, 0, 0, 0,
	0, 0, 2774, 2775, 0, 0, 2778, 0, 0, 0,
	2781, 0, 0, 1142, 0, 0, 0, 0, 0, 2785,
	0, 0, 0, 0, 2221, 0, 2627, 0, 2792, 3222,
	57, 2555, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2812, 0, 0, 0, 62, 0, 0, 560,
	0, 0, 0, 999, 0, 0, 0, 1142, 0, 0,
	0, 2828, 2829, 0, 2830, 2831, 2832, 3222, 0, 2833,
	0, 2221, 0, 2835, 0, 0, 68, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2863, 2864, 74, 0, 0, 0,
	207, 207, 0, 0, 0, 85, 0, 0, 0, 0,
	75, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	2819, 0, 2881, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 76, 0, 0, 0, 0, 0,
	0, 208, 1063, 208, 208, 1063, 0, 1063, 208, 0,
	0, 0, 0, 0, 0, 2910, 208, 1424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	2918, 2921, 0, 0, 2627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 0, 212, 0, 1180, 0,
	1180, 0, 1443, 0, 2939, 0, 0, 1063, 1063, 208,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3376, 0, 208, 0, 0, 0, 1180, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	2221, 0, 0, 0, 0, 0, 208, 208, 208, 208,
	77, 1063, 1063, 0, 0, 577, 1063, 0, 0, 1063,
	208, 208, 0, 0, 0, 1446, 1447, 1448, 1449, 1557,
	0, 0, 0, 2819, 0, 1429, 0, 577, 2992, 0,
	0, 0, 146, 80, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 1451, 1452, 1453, 0,
	1063, 0, 2221, 0, 0, 0, 673, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 3026, 3027,
	208, 0, 3222, 0, 3031, 3032, 0, 0, 0, 3035,
	3036, 0, 181, 0, 208, 0, 3040, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1180, 0, 2221, 1444,
	0, 0, 0, 0, 118, 3044, 0, 0, 0, 0,
	0, 0, 3048, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 1142, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	206, 206, 0, 0, 149, 206, 0, 0, 0, 0,
	0, 0, 0, 584, 1450, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 0, 0, 0, 57,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 829, 0,
	0, 0, 0, 0, 2921, 62, 206, 206, 0, 0,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 206, 206, 206, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 1142, 75,
	82, 0, 0, 0, 0, 1142, 0, 2921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 208, 0,
	3190, 3191, 3192, 0, 0, 0, 0, 0, 0, 1063,
	0, 208, 208, 76, 0, 0, 0, 206, 208, 0,
	0, 0, 0, 208, 0, 3200, 3201, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 3208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2921, 0, 0, 0, 0, 0, 0, 0, 3244, 0,
	0, 1142, 0, 0, 1142, 0, 3250, 0, 0, 817,
	0, 0, 0, 3255, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 77,
	0, 0, 0, 0, 0, 0, 2921, 0, 0, 2921,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 2921, 2921,
	0, 146, 80, 0, 81, 1142, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 1142, 0, 0, 0,
	0, 1443, 0, 179, 0, 0, 0, 0, 1440, 1063,
	208, 0, 0, 0, 1059, 673, 1063, 1160, 117, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3317,
	0, 0, 3320, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 208, 0, 0, 0,
	0, 0, 208, 118, 1446, 1447, 1448, 1449, 0, 1160,
	1160, 0, 0, 0, 1429, 0, 150, 0, 0, 0,
	0, 208, 0, 208, 180, 208, 0, 0, 0, 0,
	1587, 0, 999, 0, 173, 206, 0, 0, 1461, 0,
	0, 1471, 174, 0, 0, 1451, 1452, 1453, 206, 1587,
	0, 0, 1142, 1160, 1160, 584, 0, 0, 1160, 0,
	584, 1160, 0, 1306, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 817, 1438, 1439, 0, 0, 0,
	0, 1063, 0, 1063, 0, 0, 0, 0, 0, 1063,
	1459, 0, 1063, 208, 0, 0, 208, 0, 1444, 0,
	0, 0, 0, 0, 0, 1063, 1063, 3424, 3424, 3424,
	0, 0, 1160, 208, 0, 0, 1469, 0, 0, 0,
	0, 0, 208, 208, 0, 208, 3443, 208, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2921, 0, 2921,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3424, 0, 0, 0, 0, 0, 1142,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 1142, 3424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 206, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 206, 0,
	206, 0, 206, 0, 0, 0, 0, 0, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 1142, 0, 1142, 1063, 0, 0,
	206, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 1063, 1424, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	206, 1059, 206, 0, 206, 0, 206, 0, 206, 0,
	577, 1423, 0, 0, 0, 577, 0, 992, 0, 1443,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 1424, 3028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 1423, 1429, 1142, 1063, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 1142,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 208, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2782, 0, 208, 1063, 0,
	0, 208, 0, 0, 0, 0, 0, 1142, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 1142,
	0, 1160, 1429, 0, 0, 0, 1444, 208, 1059, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 1421, 1422, 0, 208, 0, 0, 208, 999, 208,
	0, 208, 0, 208, 208, 0, 0, 1063, 1063, 1063,
	0, 1063, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 999, 0, 0, 0, 0, 206, 208, 0,
	0, 1450, 0, 0, 0, 0, 1444, 0, 0, 0,
	208, 0, 208, 0, 1423, 0, 0, 0, 0, 1445,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 208, 0, 208, 0, 208, 0, 0,
	0, 0, 0, 1160, 0, 1160, 0, 0, 0, 0,
	0, 1160, 0, 0, 1160, 0, 0, 0, 2777, 0,
	208, 0, 0, 0, 0, 0, 0, 1160, 1160, 0,
	0, 1450, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 577, 1429, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 206, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 206, 0,
	0, 0, 1142, 0, 0, 0, 829, 1060, 0, 0,
	1161, 0, 1060, 0, 206, 0, 0, 0, 584, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1161, 1161, 0, 0, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 206, 0, 206, 0, 206, 0,
	206, 206, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 0, 1450, 1059, 1161, 1161, 1063, 0,
	0, 1161, 0, 0, 1161, 206, 0, 0, 0, 0,
	0, 0, 1445, 1424, 0, 0, 0, 206, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	1423, 0, 0, 0, 0, 0, 1063, 0, 1443, 206,
	206, 0, 206, 0, 206, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 0, 0, 1053, 0, 0, 206, 0, 0,
	0, 1171, 0, 0, 0, 1059, 0, 208, 0, 0,
	0, 0, 0, 0, 2776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 208, 208, 208,
	0, 1429, 0, 0, 0, 0, 208, 0, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 208, 1063,
	0, 0, 0, 0, 0, 0, 0, 1255, 0, 1063,
	0, 0, 1451, 1452, 1453, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	1279, 1279, 1171, 0, 208, 0, 0, 1063, 208, 0,
	1063, 1063, 1063, 1310, 1311, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1063, 0, 0, 0, 1160, 0, 0, 208,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1059, 0, 0, 1377, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 999, 0, 0, 1424, 0, 0,
	0, 1470, 1063, 0, 208, 1063, 208, 0, 0, 999,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 1423, 0, 0, 0, 1445, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 1587, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1160,
	1160, 1160, 0, 1160, 1060, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 1060,
	0, 0, 0, 0, 206, 206, 206, 0, 0, 0,
	0, 0, 0, 1587, 0, 0, 0, 0, 0, 1461,
	0, 0, 1471, 0, 0, 206, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 206, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 1459, 0, 0, 206, 0, 0, 0, 0, 1444,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 1594, 0, 0, 1161, 0, 206, 0, 0, 0,
	0, 1060, 0, 0, 1603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 206, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 208, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	1063, 208, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 1063, 1063, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 208, 1161, 0, 1161, 0,
	0, 0, 0, 0, 1161, 0, 0, 1161, 1063, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 1460,
	1161, 1161, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0,
	0, 0, 2491, 0, 0, 2492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 999, 999,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1786, 0,
	0, 0, 0, 0, 0, 1798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1160, 0, 1060, 1255, 0, 1817, 0, 1817, 0,
	0, 1059, 0, 0, 0, 1063, 0, 1063, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1160,
	0, 0, 1160, 1160, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 208, 1063, 0, 0, 1063, 1798, 1063, 0, 1861,
	0, 206, 206, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 1160, 1160, 0, 1874, 0, 206, 0,
	0, 1063, 0, 0, 1063, 0, 1884, 0, 1886, 0,
	1888, 0, 1890, 0, 1891, 0, 0, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 1905, 1059, 1421, 1422,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 1424, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 1059, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 999, 0, 0, 0,
	0, 0, 1429, 0, 999, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 1063, 1587, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 208, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 206, 1161,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 0,
	0, 1421, 1422, 1060, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 2165, 0, 0, 1444, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	208, 1063, 1443, 0, 0, 0, 0, 0, 0, 1440,
	1063, 1063, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 1161, 1161, 1161, 0, 1161, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 1160, 0, 1445,
	0, 208, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1429, 1160, 1160, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 0, 0, 0, 206, 0, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1171, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	2298, 1459, 0, 0, 0, 1798, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 1469, 0, 206,
	206, 0, 0, 0, 0, 0, 0, 2337, 0, 0,
	1279, 0, 1279, 0, 1279, 0, 1171, 1171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2379, 0, 0, 0, 0, 0, 1059, 0, 1059,
	0, 0, 0, 2384, 1450, 1171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2402, 1171, 206, 2405, 0,
	0, 1421, 1422, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 1160, 0, 0, 1059, 0, 1160,
	0, 0, 0, 2419, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 1160, 0, 206, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 206, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 1059, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 2421, 0,
	1421, 1422, 1059, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 1457,
	0, 0, 0, 0, 0, 1429, 1424, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 1423, 0, 0, 1451, 1452, 1453, 0,
	0, 1443, 0, 0, 1161, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1161, 0, 0, 1161, 1161, 1161, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 1161, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 1467, 0, 1468, 0,
	2619, 0, 0, 0, 0, 1438, 1439, 1060, 0, 0,
	1060, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	2655, 1171, 2298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1160, 0, 0, 1469, 0, 0, 0,
	0, 0, 1160, 1160, 0, 0, 0, 0, 1160, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 2693, 0, 0,
	0, 2697, 0, 0, 0, 1059, 0, 0, 0, 0,
	2704, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 2746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2766, 0, 1171,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 2772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	0, 2032, 0, 0, 2033, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 1060, 1470, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 1161,
	1161, 1161, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 1161, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1060, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 1423, 0, 0, 0,
	1429, 0, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 2963, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 1446, 1447, 1448,
	1449, 0, 0, 0, 2975, 0, 1459, 1429, 0, 0,
	1060, 0, 1060, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1469, 0, 1471, 0, 0, 0, 1451, 1452,
	1453, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3015, 1467,
	0, 1468, 0, 0, 0, 0, 0, 1161, 1438, 1439,
	1060, 0, 1161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 1450,
	0, 1444, 0, 0, 0, 0, 1060, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 1469,
	0, 0, 720, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 727, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 757, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 1450, 0, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 728, 0, 0,
	0, 758, 0, 0, 1445, 0, 0, 735, 736, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 752, 730, 0, 1462,
	0, 0, 0, 0, 1460, 1060, 0, 1435, 1436, 1442,
	1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 750, 3123, 0, 0, 0, 0, 0,
	3053, 0, 0, 2298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 732,
	733, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 0, 0, 0, 0, 0, 0, 2790, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 3229, 749, 0, 1161, 1161, 0, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 1060, 0,
	722, 0, 754, 0, 3273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	740, 0, 0, 0, 0, 3298, 1171, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 0, 0, 0, 3382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3397, 216, 217, 218, 219, 220,
	1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071,
	1072, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1073, 229, 230, 231, 232, 233, 234, 1074,
	1075, 235, 469, 470, 471, 1076, 236, 472, 1077, 1062,
	1078, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1079, 246, 0, 247, 248, 249, 1080, 938, 250,
	251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253,
	254, 255, 256, 257, 473, 474, 1088, 258, 1089, 260,
	259, 1090, 261, 1091, 1092, 262, 263, 264, 1093, 265,
	1094, 266, 267, 1095, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1096, 213, 1097, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1098, 284, 1099, 1100, 939, 285, 286, 1101, 287,
	479, 1102, 480, 288, 1103, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1104, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1105, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1106, 486, 1107,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1108, 318, 317, 1109,
	319, 488, 945, 320, 321, 946, 1110, 322, 323, 1111,
	1112, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1113,
	215, 948, 1114, 489, 490, 341, 342, 1115, 343, 344,
	345, 1116, 1117, 347, 348, 349, 1118, 1119, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1120, 360, 361, 493, 362, 494, 363,
	1121, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1122, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1123, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1124, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1125, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1126, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1127,
	429, 430, 428, 1128, 431, 432, 433, 434, 435, 272,
	436, 1129, 499, 500, 501, 502, 1130, 443, 1131, 437,
	438, 503, 439, 504, 1132, 440, 441, 442, 0, 444,
	445, 1133, 1134, 446, 447, 448, 449, 450, 452, 1135,
	453, 1136, 451, 454, 455, 456, 505, 506, 507, 1137,
	458, 457, 508, 1138, 1139, 1140, 1141, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 2152, 0, 0, 0, 0, 0, 0,
	0, 2153, 216, 217, 218, 219, 220, 1064, 221, 1065,
	1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 1073,
	229, 230, 231, 232, 233, 234, 1074, 1075, 235, 469,
	470, 471, 1076, 236, 472, 1077, 1062, 1078, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 1079, 246,
	0, 247, 248, 249, 1080, 938, 250, 251, 1081, 1082,
	1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255, 256,
	257, 473, 474, 1088, 258, 1089, 260, 259, 1090, 261,
	1091, 1092, 262, 263, 264, 1093, 265, 1094, 266, 267,
	1095, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 1096, 213, 1097, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1098, 284,
	1099, 1100, 939, 285, 286, 1101, 287, 479, 1102, 480,
	288, 1103, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1104, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 1105, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1106, 486, 1107, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1108, 318, 317, 1109, 319, 488, 945,
	320, 321, 946, 1110, 322, 323, 1111, 1112, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1113, 215, 948, 1114,
	489, 490, 341, 342, 1115, 343, 344, 345, 1116, 1117,
	347, 348, 349, 1118, 1119, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	1120, 360, 361, 493, 362, 494, 363, 1121, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 1122,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 1123, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 1124, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 1125, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 1126, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 1127, 429, 430, 428,
	1128, 431, 432, 433, 434, 435, 272, 436, 1129, 499,
	500, 501, 502, 1130, 443, 1131, 437, 438, 503, 439,
	504, 1132, 440, 441, 442, 0, 444, 445, 1133, 1134,
	446, 447, 448, 449, 450, 452, 1135, 453, 1136, 451,
	454, 455, 456, 505, 506, 507, 1137, 458, 457, 508,
	1138, 1139, 1140, 1141, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3079, 216, 217, 218, 219, 220, 1064, 221, 1065, 1066,
	1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1073, 229,
	230, 231, 232, 233, 234, 1074, 1075, 235, 469, 470,
	471, 1076, 236, 472, 1077, 1062, 1078, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1079, 246, 0,
	247, 248, 249, 1080, 938, 250, 251, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 252, 253, 254, 255, 256, 257,
	473, 474, 1088, 258, 1089, 260, 259, 1090, 261, 1091,
	1092, 262, 263, 264, 1093, 265, 1094, 266, 267, 1095,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1096, 213, 1097, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1098, 284, 1099,
	1100, 939, 285, 286, 1101, 287, 479, 1102, 480, 288,
	1103, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1104, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1105, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1106, 486, 1107, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1108, 318, 317, 1109, 319, 488, 945, 320,
	321, 946, 1110, 322, 323, 1111, 1112, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1113, 215, 948, 1114, 489,
	490, 341, 342, 1115, 343, 344, 345, 1116, 1117, 347,
	348, 349, 1118, 1119, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1120,
	360, 361, 493, 362, 494, 363, 1121, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1122, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1123, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1124, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1125, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1126, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1127, 429, 430, 428, 1128,
	431, 432, 433, 434, 435, 272, 436, 1129, 499, 500,
	501, 502, 1130, 443, 1131, 437, 438, 503, 439, 504,
	1132, 440, 441, 442, 0, 444, 445, 1133, 1134, 446,
	447, 448, 449, 450, 452, 1135, 453, 1136, 451, 454,
	455, 456, 505, 506, 507, 1137, 458, 457, 508, 1138,
	1139, 1140, 1141, 459, 460, 509, 461, 462, 463, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3196, 0, 216, 217, 218, 219,
	220, 1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070,
	1071, 1072, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1073, 229, 230, 231, 232, 233, 234,
	1074, 1075, 235, 469, 470, 471, 1076, 236, 472, 1077,
	1062, 1078, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1079, 246, 0, 247, 248, 249, 1080, 938,
	250, 251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252,
	253, 254, 255, 256, 257, 473, 474, 1088, 258, 1089,
	260, 259, 1090, 261, 1091, 1092, 262, 263, 264, 1093,
	265, 1094, 266, 267, 1095, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1096, 213, 1097,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1098, 284, 1099, 1100, 939, 285, 286, 1101,
	287, 479, 1102, 480, 288, 1103, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1104, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1105, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1106, 486,
	1107, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1108, 318, 317,
	1109, 319, 488, 945, 320, 321, 946, 1110, 322, 323,
	1111, 1112, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1113, 215, 948, 1114, 489, 490, 341, 342, 1115, 343,
	344, 345, 1116, 1117, 347, 348, 349, 1118, 1119, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1120, 360, 361, 493, 362, 494,
	363, 1121, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1122, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1123, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1124, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1125, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 1126, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1127, 429, 430, 428, 1128, 431, 432, 433, 434, 435,
	272, 436, 1129, 499, 500, 501, 502, 1130, 443, 1131,
	437, 438, 503, 439, 504, 1132, 440, 441, 442, 0,
	444, 445, 1133, 1134, 446, 447, 448, 449, 450, 452,
	1135, 453, 1136, 451, 454, 455, 456, 505, 506, 507,
	1137, 458, 457, 508, 1138, 1139, 1140, 1141, 459, 460,
	509, 461, 462, 463, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2815,
	0, 216, 217, 218, 219, 220, 1064, 221, 1065, 1066,
	1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1073, 229,
	230, 231, 232, 233, 234, 1074, 1075, 235, 469, 470,
	471, 1076, 236, 472, 1077, 1062, 1078, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1079, 246, 0,
	247, 248, 249, 1080, 938, 250, 251, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 252, 253, 254, 255, 256, 257,
	473, 474, 1088, 258, 1089, 260, 259, 1090, 261, 1091,
	1092, 262, 263, 264, 1093, 265, 1094, 266, 267, 1095,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1096, 213, 1097, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1098, 284, 1099,
	1100, 939, 285, 286, 1101, 287, 479, 1102, 480, 288,
	1103, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1104, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1105, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1106, 486, 1107, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1108, 318, 317, 1109, 319, 488, 945, 320,
	321, 946, 1110, 322, 323, 1111, 1112, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1113, 215, 948, 1114, 489,
	490, 341, 342, 1115, 343, 344, 345, 1116, 1117, 347,
	348, 349, 1118, 1119, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1120,
	360, 361, 493, 362, 494, 363, 1121, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1122, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1123, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1124, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1125, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1126, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1127, 429, 430, 428, 1128,
	431, 432, 433, 434, 435, 272, 436, 1129, 499, 500,
	501, 502, 1130, 443, 1131, 437, 438, 503, 439, 504,
	1132, 440, 441, 442, 0, 444, 445, 1133, 1134, 446,
	447, 448, 449, 450, 452, 1135, 453, 1136, 451, 454,
	455, 456, 505, 506, 507, 1137, 458, 457, 508, 1138,
	1139, 1140, 1141, 459, 460, 509, 461, 462, 463, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2807, 0, 216, 217, 218, 219,
	220, 1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070,
	1071, 1072, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1073, 229, 230, 231, 232, 233, 234,
	1074, 1075, 235, 469, 470, 471, 1076, 236, 472, 1077,
	1062, 1078, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1079, 246, 0, 247, 248, 249, 1080, 938,
	250, 251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252,
	253, 254, 255, 256, 257, 473, 474, 1088, 258, 1089,
	260, 259, 1090, 261, 1091, 1092, 262, 263, 264, 1093,
	265, 1094, 266, 267, 1095, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1096, 213, 1097,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1098, 284, 1099, 1100, 939, 285, 286, 1101,
	287, 479, 1102, 480, 288, 1103, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1104, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1105, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1106, 486,
	1107, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1108, 318, 317,
	1109, 319, 488, 945, 320, 321, 946, 1110, 322, 323,
	1111, 1112, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1113, 215, 948, 1114, 489, 490, 341, 342, 1115, 343,
	344, 345, 1116, 1117, 347, 348, 349, 1118, 1119, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1120, 360, 361, 493, 362, 494,
	363, 1121, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1122, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1123, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1124, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1125, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 1126, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1127, 429, 430, 428, 1128, 431, 432, 433, 434, 435,
	272, 436, 1129, 499, 500, 501, 502, 1130, 443, 1131,
	437, 438, 503, 439, 504, 1132, 440, 441, 442, 0,
	444, 445, 1133, 1134, 446, 447, 448, 449, 450, 452,
	1135, 453, 1136, 451, 454, 455, 456, 505, 506, 507,
	1137, 458, 457, 508, 1138, 1139, 1140, 1141, 459, 460,
	509, 461, 462, 463, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2678,
	0, 216, 217, 218, 219, 220, 1064, 221, 1065, 1066,
	1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1073, 229,
	230, 231, 232, 233, 234, 1074, 1075, 235, 469, 470,
	471, 1076, 236, 472, 1077, 1062, 1078, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1079, 246, 0,
	247, 248, 249, 1080, 938, 250, 251, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 252, 253, 254, 255, 256, 257,
	473, 474, 1088, 258, 1089, 260, 259, 1090, 261, 1091,
	1092, 262, 263, 264, 1093, 265, 1094, 266, 267, 1095,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1096, 213, 1097, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1098, 284, 1099,
	1100, 939, 285, 286, 1101, 287, 479, 1102, 480, 288,
	1103, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1104, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1105, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1106, 486, 1107, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1108, 318, 317, 1109, 319, 488, 945, 320,
	321, 946, 1110, 322, 323, 1111, 1112, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1113, 215, 948, 1114, 489,
	490, 341, 342, 1115, 343, 344, 345, 1116, 1117, 347,
	348, 349, 1118, 1119, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1120,
	360, 361, 493, 362, 494, 363, 1121, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1122, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1123, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1124, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1125, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1126, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1127, 429, 430, 428, 1128,
	431, 432, 433, 434, 435, 272, 436, 1129, 499, 500,
	501, 502, 1130, 443, 1131, 437, 438, 503, 439, 504,
	1132, 440, 441, 442, 0, 444, 445, 1133, 1134, 446,
	447, 448, 449, 450, 452, 1135, 453, 1136, 451, 454,
	455, 456, 505, 506, 507, 1137, 458, 457, 508, 1138,
	1139, 1140, 1141, 459, 460, 509, 461, 462, 463, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2045, 0, 216, 217, 218, 219,
	220, 1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070,
	1071, 1072, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1073, 229, 230, 231, 232, 233, 234,
	1074, 1075, 235, 469, 470, 471, 1076, 236, 472, 1077,
	1062, 1078, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1079, 246, 0, 247, 248, 249, 1080, 938,
	250, 251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252,
	253, 254, 255, 256, 257, 473, 474, 1088, 258, 1089,
	260, 259, 1090, 261, 1091, 1092, 262, 263, 264, 1093,
	265, 1094, 266, 267, 1095, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1096, 213, 1097,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1098, 284, 1099, 1100, 939, 285, 286, 1101,
	287, 479, 1102, 480, 288, 1103, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1104, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1105, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1106, 486,
	1107, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1108, 318, 317,
	1109, 319, 488, 945, 320, 321, 946, 1110, 322, 323,
	1111, 1112, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1113, 215, 948, 1114, 489, 490, 341, 342, 1115, 343,
	344, 345, 1116, 1117, 347, 348, 349, 1118, 1119, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1120, 360, 361, 493, 362, 494,
	363, 1121, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1122, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1123, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1124, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1125, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 1126, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1127, 429, 430, 428, 1128, 431, 432, 433, 434, 435,
	272, 436, 1129, 499, 500, 501, 502, 1130, 443, 1131,
	437, 438, 503, 439, 504, 1132, 440, 441, 442, 0,
	444, 445, 1133, 1134, 446, 447, 448, 449, 450, 452,
	1135, 453, 1136, 451, 454, 455, 456, 505, 506, 507,
	1137, 458, 457, 508, 1138, 1139, 1140, 1141, 459, 460,
	509, 461, 462, 463, 1165, 0, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1769,
	0, 0, 0, 216, 217, 218, 219, 220, 1064, 221,
	1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	1073, 229, 230, 231, 232, 233, 234, 1074, 1075, 235,
	469, 470, 471, 1076, 236, 472, 1077, 1062, 1078, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 1079,
	246, 0, 247, 248, 249, 1080, 938, 250, 251, 1081,
	1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255,
	256, 257, 473, 474, 1088, 258, 1089, 260, 259, 1090,
	261, 1091, 1092, 262, 263, 264, 1093, 265, 1094, 266,
	267, 1095, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 1096, 213, 1097, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1098,
	284, 1099, 1100, 939, 285, 286, 1101, 287, 479, 1102,
	480, 288, 1103, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 1104, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 1105, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 1106, 486, 1107, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 1108, 318, 317, 1109, 319, 488,
	945, 320, 321, 946, 1110, 322, 323, 1111, 1112, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 1113, 215, 948,
	1114, 489, 490, 341, 342, 1115, 343, 344, 345, 1116,
	1117, 347, 348, 349, 1118, 1119, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 1120, 360, 361, 493, 362, 494, 363, 1121, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	1122, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 1123, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 1124, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 1125, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 1126, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 1127, 429, 430,
	428, 1128, 431, 432, 433, 434, 435, 272, 436, 1129,
	499, 500, 501, 502, 1130, 443, 1131, 437, 438, 503,
	439, 504, 1132, 440, 441, 442, 0, 444, 445, 1133,
	1134, 446, 447, 448, 449, 450, 452, 1135, 453, 1136,
	451, 454, 455, 456, 505, 506, 507, 1137, 458, 457,
	508, 1138, 1139, 1140, 1141, 459, 460, 509, 461, 462,
	463, 1054, 0, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 1064, 221, 1065, 1066, 1067,
	1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 1073, 229, 230,
	231, 232, 233, 234, 1074, 1075, 235, 469, 470, 471,
	1076, 236, 472, 1077, 1062, 1078, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 1079, 246, 0, 247,
	248, 249, 1080, 938, 250, 251, 1081, 1082, 1084, 1083,
	1085, 1086, 1087, 252, 253, 254, 255, 256, 257, 473,
	474, 1088, 258, 1089, 260, 259, 1090, 261, 1091, 1092,
	262, 263, 264, 1093, 265, 1094, 266, 267, 1095, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 1096, 213, 1097, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1098, 284, 1099, 1100,
	939, 285, 286, 1101, 287, 479, 1102, 480, 288, 1103,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1104, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 1105, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1106, 486, 1107, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1108, 318, 317, 1109, 319, 488, 945, 320, 321,
	946, 1110, 322, 323, 1111, 1112, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1113, 215, 948, 1114, 489, 490,
	341, 342, 1115, 343, 344, 345, 1116, 1117, 347, 348,
	349, 1118, 1119, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 1120, 360,
	361, 493, 362, 494, 363, 1121, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 1122, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 1123, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	1124, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 1125, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 1126, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 1127, 429, 430, 428, 1128, 431,
	432, 433, 434, 435, 272, 436, 1129, 499, 500, 501,
	502, 1130, 443, 1131, 437, 438, 503, 439, 504, 1132,
	440, 441, 442, 0, 444, 445, 1133, 1134, 446, 447,
	448, 449, 450, 452, 1135, 453, 1136, 451, 454, 455,
	456, 505, 506, 507, 1137, 458, 457, 508, 1138, 1139,
	1140, 1141, 459, 460, 509, 461, 462, 463, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071,
	1072, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1073, 229, 230, 231, 232, 233, 234, 1074,
	1075, 235, 469, 470, 471, 1076, 236, 472, 1077, 1062,
	1078, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1079, 246, 0, 247, 248, 249, 1080, 938, 250,
	251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253,
	254, 255, 256, 257, 473, 474, 1088, 258, 1089, 260,
	259, 1090, 261, 1091, 1092, 262, 263, 264, 1093, 265,
	1094, 266, 267, 1095, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1096, 213, 1097, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1098, 284, 1099, 1100, 939, 285, 286, 1101, 287,
	479, 1102, 480, 288, 1103, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1104, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1105, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1106, 486, 1107,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1108, 318, 317, 1109,
	319, 488, 945, 320, 321, 946, 1110, 322, 323, 1111,
	1112, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1113,
	215, 948, 1114, 489, 490, 341, 342, 1115, 343, 344,
	345, 1116, 1117, 347, 348, 349, 1118, 1119, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1120, 360, 361, 493, 362, 494, 363,
	1121, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1122, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1123, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1124, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1125, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1126, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1127,
	429, 430, 428, 1128, 431, 432, 433, 434, 435, 272,
	436, 1129, 499, 500, 501, 502, 1130, 443, 1131, 437,
	438, 503, 439, 504, 1132, 440, 441, 442, 0, 444,
	445, 1133, 1134, 446, 447, 448, 449, 450, 452, 1135,
	453, 1136, 451, 454, 455, 456, 505, 506, 507, 1137,
	458, 457, 508, 1138, 1139, 1140, 1141, 459, 460, 509,
	461, 462, 463, 2021, 0, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 2018, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	257, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	2019, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 2017, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 2020, 0, 0, 0, 0,
	0, 0, 850, 2016, 0, 0, 813, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1304, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 824, 174, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1498, 1496, 0, 0, 0,
	848, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1304, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 824, 174, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1498, 2441, 0, 0, 0,
	848, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1304, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 824, 174, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1498, 1496, 0, 0, 0,
	848, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 2106, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 2111, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 2107,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 2108, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 816,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 3394, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 3253, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 2986, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 1558, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 2794, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 1935,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 1934, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 828, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 1558, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 2111, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 1496, 0, 0, 2116, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 2114, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 2102, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 2091, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	2089, 848, 2081, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 222, 223, 224, 225, 465,
	895, 874, 906, 864, 905, 904, 0, 229, 866, 865,
	232, 233, 234, 856, 928, 235, 964, 965, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 909, 2084, 902, 901,
	826, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	900, 264, 0, 265, 0, 266, 267, 0, 832, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	845, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 2085, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 2086, 2083, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 215, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 896, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 833, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 2087, 0,
	409, 410, 869, 870, 872, 873, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 891, 871, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 937, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 2082, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 2078, 848, 2081, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	2084, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 2085, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 2086, 2083, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 2087, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 2082, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 880, 837, 838, 839, 835,
	836, 849, 850, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	257, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	1504, 0, 850, 0, 0, 0, 0, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	1922, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 1194,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 1193, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 1188, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 1187, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 1183, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 3423,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 3422, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 3421, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 3423,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 3422, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 880, 837, 838, 839, 835, 836, 849, 0,
	2099, 0, 0, 0, 0, 2097, 2098, 0, 0, 216,
	217, 218, 219, 220, 850, 221, 0, 0, 0, 848,
	929, 854, 0, 0, 0, 222, 223, 224, 225, 0,
	895, 874, 906, 864, 905, 904, 0, 229, 866, 865,
	232, 233, 234, 856, 928, 235, 964, 965, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 3423, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 909, 257, 902, 901,
	826, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	900, 264, 0, 265, 0, 266, 267, 0, 832, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	845, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 0, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 0, 932, 0, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 215, 0, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 896, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 833, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 869, 870, 872, 873, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 0, 415, 891, 871, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 937, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 3422, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 1001, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 848, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	928, 235, 469, 470, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 480, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 988, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	215, 948, 0, 933, 490, 341, 342, 0, 343, 344,
	345, 0, 993, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 995, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 960, 439, 961, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 451, 454, 455, 456, 1304, 506, 507, 0,
	458, 457, 508, 1001, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 0, 174, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 0, 985, 0, 1590, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 928, 235, 469, 470, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 480, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 988, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 215, 948, 0, 933, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 496,
	995, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	179, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 959, 0, 429, 430, 428, 181, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 960, 439, 961, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 451, 454, 455,
	456, 1304, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 173, 459, 460, 509, 461, 462, 463, 0, 174,
	0, 0, 2548, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	1590, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 928, 235, 469, 470,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 988, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 215, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 993, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 995, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	984, 0, 1001, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 985,
	929, 990, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 928, 235, 469, 470, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	988, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 215, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 993, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 995,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1001, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 0, 985, 0, 990,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 928,
	235, 469, 470, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 480, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 988, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 0, 933, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 995, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1001, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 0, 985, 0, 990, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 928, 235, 469, 470, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 215, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 995,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 813, 0, 1158,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 1485,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 179, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 181, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 1304, 506, 507,
	0, 458, 457, 508, 1301, 0, 1158, 173, 459, 460,
	509, 461, 462, 463, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 149, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1062, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 179, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 181, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 1304, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 173, 459, 460, 509, 461, 462,
	463, 0, 174, 0, 0, 0, 0, 1158, 1157, 0,
	0, 0, 0, 1155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 1062, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 2741, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1062, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1001, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 0, 0, 0, 1308,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 928,
	235, 469, 470, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 480, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 0, 933, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 813, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 179, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 181,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 1304, 506, 507, 0, 458, 457, 508, 210,
	0, 0, 173, 459, 460, 509, 461, 462, 463, 0,
	174, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 149, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 210, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 1595, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 210,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 2694,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 210, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 2333, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 210,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 2818, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 685, 0, 576, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 1854, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 582, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 581, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 575, 0, 576, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 585, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 582, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 581,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 576, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 585, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 582, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 1882, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	581, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 576, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 585, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 582, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 581, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 585, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1332, 0, 1158, 1157, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 1062, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 1331,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 1330, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1299,
	0, 1158, 1157, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 1062, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1298, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1295, 0, 1158, 1157,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1062,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1294,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1233, 0, 1158, 1157, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 1062, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1232, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1230, 0, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1062, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1229, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1151, 0, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1153, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1158, 1157, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 1062, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1158,
	1157, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	1158, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 1062, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 0, 948, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 952, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 2222, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 2219, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	2368, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 2225, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 2365, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 2367, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 2364, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 2224, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 2366, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 2222,
	236, 472, 0, 0, 2216, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 2219, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 2225, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 2215, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 2224, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 2223, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1379, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 1382, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 1380, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 1381, 457, 508, 1146, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1148, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1143, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1145, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1050, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1052, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 538, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 537, 220, 527,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 530, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 531, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 532, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 526, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 527, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 530, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 531, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 532, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 993,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	2297, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1862, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 1797, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1790, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1789, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1785, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1787, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1288,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1287, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1285, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1284,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1282, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1281, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1278, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1277, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1253, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1168, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1170, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 530, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 531, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 532, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 1889, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 1887, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 1885, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 677, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 676,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 675, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 2368, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 3141, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 517, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 516, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 515, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 2157, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 210, 2355, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 2941, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 210, 2355,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 2352, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 1868, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1860, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 558, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 1028,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 559, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 555, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 554, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1809, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1808, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 558, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 548, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 559, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 555,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 1307, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 554, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1292, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1291, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1241,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1240, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1225, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1162, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	558, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 1028, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 559, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 555, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 554, 500, 501, 502,
	0, 443, 0, 437, 1029, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 1012, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 558, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 548, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 546, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	547, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 559, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 549, 391, 0, 392,
	396, 397, 555, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 550, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 554, 500, 501, 502, 0, 443,
	0, 437, 552, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 542, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 543, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 540, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 534,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 512, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 2636, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 2634, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 2622, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 2315, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 543, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 1821, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 0, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1261, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1203, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	967, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 0, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 0,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 0, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 0, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 0, 0, 1423, 0, 0, 0, 1429, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 1468, 0, 0, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 1459, 1429, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	1469, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 1450, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 1445, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1423, 1462, 0, 0,
	0, 0, 1460, 0, 1443, 1435, 1436, 1442, 1441, 1437,
	1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 0, 0, 0, 0, 2494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 1446, 1447, 1448,
	1449, 0, 1424, 0, 0, 0, 1470, 1429, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1423,
	0, 1461, 0, 0, 1471, 2493, 0, 1443, 1451, 1452,
	1453, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 1468, 0, 0, 0, 0, 0, 0, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 0, 0, 0, 1469,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 1450, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 1445, 1470, 0,
	0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 1423, 1462, 0, 0, 0, 0, 2490, 0, 1443,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 1423, 0,
	0, 0, 1429, 0, 1460, 0, 1443, 1435, 1436, 1442,
	1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 1461, 0, 0, 1471,
	2489, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 1446,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 1459, 1429,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1469, 0, 1471, 0, 0, 0,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 1450, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 1445, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 1462, 0, 0, 0, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0, 0,
	0, 0, 2488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1446, 1447, 1448, 1449, 0, 1424, 0, 0, 0,
	1470, 1429, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 0, 1461, 0, 0, 1471, 2033,
	0, 1443, 1451, 1452, 1453, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 1469, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	1450, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 1445, 1470, 0, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 1423, 1462, 0, 3373, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 1423, 0, 0, 0, 1429, 0, 1460, 0,
	1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	1461, 3304, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	1468, 0, 0, 0, 0, 0, 0, 1438, 1439, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 1459, 1429, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 1469, 0,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 1450, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	1445, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 1462, 0, 0, 0, 0,
	1460, 0, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 3303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1446, 1447, 1448, 1449, 0,
	1424, 0, 0, 0, 1470, 1429, 0, 1460, 0, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 1423, 0, 1461,
	3199, 0, 1471, 0, 0, 1443, 1451, 1452, 1453, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 1469, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 1468, 0, 1450, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 1445, 1470, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1423,
	1462, 0, 3106, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 1423, 0, 0, 0,
	1429, 0, 1460, 0, 1443, 1435, 1436, 1442, 1441, 1437,
	1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 1461, 3058, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 1446, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 1459, 1429, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1469, 0, 1471, 0, 0, 0, 1451, 1452,
	1453, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 1468, 0, 0, 0, 0, 0, 0, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 1450,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 1445, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1462,
	0, 0, 0, 0, 1460, 0, 1443, 1435, 1436, 1442,
	1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 0, 3057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1446,
	1447, 1448, 1449, 0, 1424, 0, 0, 0, 1470, 1429,
	0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 1423, 0, 1461, 3056, 0, 1471, 0, 0, 1443,
	1451, 1452, 1453, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 1469, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 1450, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 1445,
	1470, 0, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 1462, 0, 3023, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	1423, 0, 0, 0, 1429, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 1461, 2825,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	1459, 1429, 3473, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 1469, 0, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 1450, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 2416, 0, 1424, 0, 0, 1445, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 1462, 0, 0, 0, 0, 1460, 0,
	1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 2445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2417, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 1446, 1447, 1448, 1449, 0, 1424, 0,
	0, 0, 1470, 1429, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 1423, 0, 1461, 0, 0,
	1471, 0, 0, 1443, 1451, 1452, 1453, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 1469, 1429, 0, 2533, 0,
	0, 2532, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	1468, 0, 1450, 0, 0, 0, 0, 1438, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 1469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2124, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 2123, 0, 0,
	1424, 0, 0, 1445, 1470, 0, 0, 1460, 0, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 1423, 1462, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 0, 0, 1423, 0, 0, 0, 1429, 0,
	1460, 0, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 1468, 0, 0, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 1459, 1429, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	1469, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 1450, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 810, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 1445, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1423, 1462, 0, 0,
	0, 0, 1460, 0, 1443, 1435, 1436, 1442, 1441, 1437,
	1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 1446, 1447, 1448,
	1449, 0, 1424, 0, 0, 0, 1470, 1429, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1423,
	0, 1461, 0, 0, 1471, 0, 0, 1443, 1451, 1452,
	1453, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 1468, 0, 0, 0, 0, 0, 0, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 0, 0, 0, 1469,
	1429, 0, 0, 0, 0, 2539, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 1450, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2813,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 2534, 0, 0, 1424, 0, 0, 1445, 1470, 0,
	0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 1423, 1462, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 1423, 0,
	0, 0, 1429, 0, 1460, 0, 1443, 1435, 1436, 1442,
	1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 1446,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 1459, 1429,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1469, 0, 1471, 0, 0, 0,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 1450, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 2501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	2487, 0, 0, 1424, 0, 0, 1445, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 1462, 0, 0, 0, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1446, 1447, 1448, 1449, 0, 1424, 0, 0, 0,
	1470, 1429, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 0, 1461, 0, 0, 1471, 0,
	0, 1443, 1451, 1452, 1453, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 1469, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 1461, 57,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 58, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 1467, 0, 1468, 0,
	1450, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	39, 121, 0, 0, 0, 0, 0, 0, 1445, 0,
	1459, 0, 0, 38, 0, 68, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 41, 1469, 0, 0, 0,
	42, 0, 0, 0, 0, 74, 0, 0, 122, 0,
	0, 1458, 0, 40, 85, 0, 0, 0, 0, 75,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 1462, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 77,
	1440, 0, 0, 0, 0, 0, 0, 44, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	47, 146, 80, 0, 81, 0, 45, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 50, 1429, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 181, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1641, 150, 1438, 1439, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 173, 0, 0, 0, 0, 0,
	1444, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1653, 1635, 1642, 1625, 1663, 1662, 0,
	0, 1627, 1626, 149, 0, 0, 3, 0, 0, 1673,
	1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1664,
	0, 1660, 1659, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 1658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1657, 1655, 1656, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1637, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1646, 1640, 1648,
	1650, 1651, 1652, 1647, 0, 1645, 0, 0, 600, 0,
	0, 0, 0, 0, 0, 1669, 1670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 1629,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 1661, 602, 621, 0, 1638, 0, 1639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 0, 1654, 0, 605, 0,
	1622, 1620, 1621, 1624, 1623, 0, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1630, 1631, 1633, 1634, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 608, 631,
	1649, 1632, 0, 634, 0, 0, 0, 0, 0, 0,
	0, 1672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1628, 0, 1665,
	1666, 1667, 1668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1636,
	0, 0, 0, 0, 1643, 1671, 0, 0, 0, 0,
	630, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 629, 0, 628,
	0, 0, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 635, 0, 632, 0, 0, 0,
	0, 622,
}
var sqlPact = [...]int{

	71052, -1000, -1000, -1000, -1000, -1000, -1000, 344, 332, 330,
	320, 319, 318, 317, 315, -1000, -1000, -1000, 307, -1000,
	-1000, 298, -1000, 297, 295, 294, 293, -1000, 281, 280,
	275, -1000, -1000, -1000, -1000, 271, 270, 269, 49843, 1768,
	61044, 52732, 1865, 44440, 60627, 44023, 60210, 59793, 267, -1000,
	59376, 266, 265, 264, -1000, -1000, 261, 1763, 36070, 259,
	258, 257, 1659, 256, 246, -1000, 239, -1000, 71646, 1299,
	-1000, 233, 231, -1000, 5030, 3510, 51904, 2230, 230, 225,
	35652, 2152, 2216, -1000, -1000, 1591, -1000, -1000, 219, 217,
	216, 202, 201, 200, 199, 198, 196, -1000, 193, 192,
	191, 188, 181, 176, 173, 166, 165, 163, 162, 161,
	158, 152, 151, 150, 149, 148, -1000, 9540, 1504, 1418,
	1415, 1413, 1404, 1398, 916, 146, 145, 141, 140, 139,
	138, -1000, -1000, 136, 132, 127, 126, -1000, 125, 124,
	232, 123, 122, 102, 100, 95, 2002, 2229, 1324, 634,
	16967, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 65154, 61455, 94, -67, 93, -1000, 2515,
	923, 29808, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 561, -1000, -1000, -1000, 370, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1740, 754, -1000, -1000, -1000, 58959, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1764, -27, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 752, -1000, 1758, 156, 1712, -1000, -1000,
	-1000, -1000, -1000, 61455, -1000, -1000, 2854, 2853, 1570, 748,
	58548, -1000, 1426, -1000, 861, 19620, -1000, 1087, -1000, 19620,
	368, -1000, -1000, -1000, -1000, -1000, 43606, 13889, 43189, 42772,
	39865, 58131, 13462, 49432, 1088, -1000, -1000, -1000, -1000, -1000,
	58, 37303, 61455, -1000, 367, -1000, -1000, -1000, -1000, -1000,
	-1000, 25923, 500, 25470, 524, 25017, 227, -1000, -1000, -1000,
	-1000, 2850, 2849, 1008, 2848, 2459, 64743, 1405, 2842, 1316,
	1091, 965, 2837, 2835, 2834, 2833, 2831, 2829, 2819, 1200,
	57714, 2266, 39438, 39011, 49843, 49843, 2003, 57297, -1000, -1000,
	1122, 1109, -1000, -1000, -1000, -1000, 2345, 2187, 2175, 49015,
	-1000, -1000, 2815, 2814, 2813, 2810, 2807, 64332, 1390, 2806,
	1920, 2805, 2804, 2802, 2801, 2800, 2797, 2795, 2794, 2793,
	-1000, 48598, 48181, 47764, 47347, 56880, 38584, 38157, -1000, -1000,
	-1000, 31472, 5932, 56463, 32328, 49843, 49843, -1000, -1000, 26363,
	-60, -1000, -1000, -1000, 2218, -1000, 26363, -60, -1000, 61455,
	-1000, 2262, 1568, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2101, 1384, 2684, 37730, 1556, 1222, 2344, 2335,
	1327, 1980, 2327, 2320, 2319, 2299, 2297, 1539, 1965, 1313,
	1336, 2283, 2275, 2696, 1619, 42355, 2790, 2789, 2490, 2274,
	2214, -1000, -1000, -1000, -1000, 1275, -1000, -1000, -1000, 44851,
	-1000, -1000, 1046, -1000, -1000, 1046, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1084, 63510, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2100,
	-1000, 1545, -1000, -1000, 2788, 2229, 1911, 2493, 2493, 2493,
	2542, 526, 522, -1000, 232, -1000, -1000, 70909, -1000, -1000,
	26363, 26363, 26363, 26363, 26363, 1663, -1000, 736, -1000, -1000,
	783, -1000, 735, 670, -1000, -1000, -1000, -1000, -1000, -1000,
	733, 2700, -1000, 972, -1000, -1000, -1000, -1000, 2644, -1000,
	16074, -1000, -1000, -1000, 581, 730, 26363, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 366, 871, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 656,
	1513, 653, 653, 653, -1000, -1000, 955, -1000, -1000, -1000,
	426, 652, 398, 650, -1000, -1000, -1000, -1000, 2259, 726,
	719, -1000, 703, 702, 700, -1000, -1000, -1000, 696, 695,
	694, 693, 692, 691, 690, 688, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 952, -1000, 687, 685, 684, 682, 681,
	680, 679, 678, 677, -1000, -1000, 39, 61455, -1000, 561,
	39, -1000, -1000, 675, -1000, 20060, 20060, 20060, -1000, -1000,
	1757, 26363, -1000, 1966, -1000, 229, -233, 815, 30638, -1000,
	28959, 815, 790, 33575, -1000, 2212, -1000, -1000, 672, 365,
	-1000, -1000, 2211, 61455, 14314, 61455, 49843, 49843, -1000, 2412,
	26363, -1000, -1000, 36892, 61455, 50254, 2609, 71451, 36892, 61455,
	2250, -1000, -1000, -1000, 61455, -1000, 26363, -1000, 2608, 1281,
	-7, -1000, -1000, -1000, -1000, -1000, -1000, 1887, 1909, 1029,
	1809, 1164, -1000, 19620, 2452, -1000, -1000, -1000, 364, 14314,
	-1000, 2605, 2395, 1242, -1000, 1801, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1414, 2394, -1000, 1407, 2393, 1366,
	-1000, -1000, 928, 2392, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1680, -1000, -1000, 2486, -1000, -1000, 1382,
	2391, -154, -1000, -1000, 40290, 37303, 31, -1000, -1000, -28,
	-1000, 13035, 70909, -1000, -1000, -1000, 70909, 877, -1000, -1000,
	2388, -1000, 70909, 873, -1000, -1000, 2386, -1000, -1000, -1000,
	2787, -1000, 2786, 1849, 2785, 2783, 2782, -1000, 1338, 1487,
	2781, -1000, 2779, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46930, 46513, 962, -1000, 1754, -1000, -1000, 46096, 892, 1848,
	-1000, -1000, 1847, -1000, 844, -1000, 2778, 56046, 2043, 892,
	1846, -1000, -1000, -1000, -1000, -1000, 49843, -1000, 49843, -1000,
	49843, -1000, 1235, -1000, 63921, -233, -1000, -1000, -1000, -1000,
	-1000, 2385, 2777, 2769, 2767, -1000, 61455, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 177, 2382, -1000, -1000,
	177, 2381, -1000, 177, 2379, -1000, 167, 2378, -1000, -1000,
	1731, 2377, -1000, -111, 2376, -1000, -1000, -111, 2372, -1000,
	68, -1000, -1000, -1000, 923, -1000, 31055, 55629, 40290, 875,
	747, 35235, 70909, -1000, 40290, 70909, -1000, 40290, 46096, -1000,
	55212, 45685, -1000, -1000, 1141, 1953, -1000, -1000, -1000, -1000,
	40290, 40290, -1000, 54795, -1000, 1542, 1335, 2482, 49843, -1000,
	1494, -1000, -1000, -1000, 2492, 2247, -1000, 36481, 51487, -1000,
	51076, -1000, 50665, -1000, 49843, -1000, 49843, -1000, 2766, 2765,
	2758, 2369, 1429, 1420, 61455, -1000, -1000, 61455, -1000, 61455,
	-1000, -1000, -1000, 1886, -1000, -1000, -1000, -1000, 49843, -1000,
	-1000, -1000, -1000, -1000, -1000, 2246, -1000, 1403, -1000, 1136,
	-1000, -1000, 178, -1000, -1000, -7, -1000, 63510, -1000, -1000,
	2229, 1911, -1000, 61455, -1000, -1000, -1000, 2229, 1785, 2013,
	24564, 1975, 26363, 232, -1000, -1000, 232, 232, 19180, -1000,
	-1000, 71451, 71451, 14314, 1101, 26363, 26363, 26363, 26363, 26363,
	26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363,
	26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363,
	26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363, 26363,
	1579, 26363, 1081, 26363, 26363, 26363, 26363, 1775, -1000, -1000,
	1510, 600, 1533, -1000, 2636, 2636, 2636, 6189, 6189, 676,
	2756, 783, -1000, 26363, -1000, -60, 26363, 14741, -1000, 2689,
	1226, -1000, -1000, 522, 8739, 1917, -1000, 521, 15194, -1000,
	-1000, -1000, 16074, 670, 24111, 26363, 944, 70909, 12610, 2280,
	2111, -1000, 2688, -1000, -1000, 2647, -1000, -1000, -1000, -1000,
	2647, 1098, 1096, 2687, -1000, 2647, 2647, 669, 813, 812,
	811, 810, 629, 26363, 26363, 26363, 26363, 26363, 26363, 26363,
	26363, -1000, 23671, 23218, 22765, 27683, 22312, 26363, 16514, 21859,
	21406, 61455, 39, 2606, 26363, 133, -1000, 69703, -1000, 133,
	133, 668, 63, 70909, 1959, 1959, 30223, 1829, 1681, 1681,
	1681, -1000, 666, 766, 92, 88, 82, -1000, -1000, 77,
	67, 815, 10044, 53143, 1690, 815, 815, 358, 423, 520,
	28544, 1966, 53143, -1000, -1000, 49843, 662, 14741, 14314, 1156,
	52, 355, 1978, 1976, 1973, -1000, 1288, 51, 1076, -126,
	-1000, 4647, 41, -1000, 1193, -1000, -1000, -1000, -1000, 187,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 950, 661, 660, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 656, 1513, 653,
	653, 653, -1000, -1000, -1000, 426, 652, 398, 650, -1000,
	-1000, -1000, -1000, -1000, -1000, 2206, -28, 50254, 859, 40,
	1013, -7, -1000, 1046, -1000, 1650, -1000, -1000, -1000, -1000,
	-1000, -1000, 1144, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2698, -1000, 2641, -1000, -1000, 2686, 32, -1000, -1000, 14314,
	-1000, -14, 1387, -1000, 41938, 2485, 2481, 2472, 1230, -1000,
	1169, 2526, 44851, 2566, 2604, 89, -1000, 2205, -1000, -1000,
	860, 1328, 1074, 44851, 1407, -1000, 71451, -1000, 2017, 2522,
	1227, 1232, 1227, 1227, 1225, -1000, 44851, 1070, 1552, 40290,
	-1000, 1068, -1000, -18, 2560, 2590, 78, -1000, 2202, 1066,
	-1000, -1000, 49843, 14314, 840, 31, 37303, 61455, 337, -1000,
	26363, -60, 26363, -60, -1000, -1000, 2370, -1000, -1000, -1000,
	2755, 1444, 1918, -1000, -1000, -1000, 648, 1845, 1407, 1844,
	-1000, -1000, 45268, 2201, 61455, 1981, 16, 49843, -1000, -1000,
	1547, -1000, 2367, 2366, 753, 2753, -1000, 1750, 1843, -1000,
	-1000, -1000, 63099, 1082, 2364, 932, 113, 2601, 113, 34405,
	-1000, 61455, -1000, 61455, -1000, -1000, -1000, 2745, -1000, 49843,
	-1000, -1000, 49843, -1000, 49843, -1000, 49843, -1000, 49843, 49843,
	-1000, 61455, 40290, 40290, 40290, 5483, 41116, 25, 519, -1000,
	54384, 61455, 984, 41527, 61455, 2440, -204, 875, 875, 840,
	-1000, 840, -1000, 49843, 2242, -1000, -1000, -1000, -1000, -1000,
	-1000, 2741, 2733, -1000, 884, 49843, 61455, 49843, -1000, -1000,
	61455, -1000, 61455, -1000, -1000, 61455, -1000, 61455, -1000, 61455,
	-1000, -1000, -1000, -1000, -1000, 1263, -1000, 2239, -1000, 2232,
	-1000, 108, -1000, -1000, -1000, -1000, 1647, 49843, 49843, 61455,
	49843, -1000, 44851, -1000, -1000, 2229, -1000, -1000, -1000, -1000,
	-1000, 70909, -1000, 547, -1000, -1000, 70909, 1292, 1994, -1000,
	1994, 24, -1000, 69318, 1944, 49843, -1000, -1000, -1000, -1000,
	-1000, 857, 915, 915, 1103, 1103, 1103, 1103, 2599, 3869,
	321, 3541, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
	1249, 473, 473, 1249, 1249, 1249, 1249, 1249, 473, 473,
	473, 3956, 3956, 3956, 6189, 8300, 8630, 26363, 26363, 1065,
	1488, 600, 8097, 26363, 5640, 5640, 5640, 5640, -1000, 1664,
	-1000, -1000, -1000, -1000, 2199, 647, 27683, 27683, -1000, -1000,
	-1000, -1000, 15634, 26363, -1000, -1000, -1000, -1000, 20953, -1000,
	-1000, 68959, -250, 517, -137, 7, -1000, 26363, 26363, 26363,
	515, -1000, 514, -1000, -1000, 1063, -1000, 1060, 1058, 1053,
	-1000, 646, 263, 26363, 61455, -1000, 66804, 765, -130, -1000,
	21, 1261, -1000, 26363, 109, -1000, 1685, 645, 644, 512,
	12, -1000, 505, 852, 846, 504, 498, 492, 26363, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 70806,
	66727, 66445, 66342, 7450, 66060, 65983, 8, 491, -1000, 2195,
	-137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 490, -1000,
	489, -1000, 70524, -137, 486, 716, -1000, 27683, 27683, 27683,
	-1000, 485, -1000, 69421, -1000, 70447, 20513, 20513, 20513, 483,
	70165, 26363, -137, -2, -1000, -9, -1000, -1000, 643, -10,
	932, 20060, 29390, 14314, -1000, 932, 932, 26363, -1000, 26363,
	1963, -1000, -1000, -1000, 1957, 3351, 1959, 30223, -1000, -1000,
	-1000, -1000, 53143, 673, 815, -1000, -1000, -1000, -1000, -1000,
	53143, -1000, 2644, 2035, -1000, -1000, -1000, 61455, 561, -1000,
	53143, 53143, 14314, 815, -1000, 481, 32743, 7, 85, -1000,
	-1000, 14314, 2075, 2075, 2075, -1000, -1000, 61455, 2614, -1000,
	1527, -1000, 71451, -1000, 782, 1072, -1000, 2680, 642, -1000,
	2647, 2647, 61455, 104, 19620, -1000, 1046, -1000, -1000, 1340,
	-1000, 1447, -1000, 1095, -1000, -1000, -1000, 19620, -1000, 2591,
	61455, 61455, 49843, -1000, -1000, 1842, 62688, 1840, 71451, 61455,
	-1000, -1000, 641, 640, 1941, 1940, 61455, 61455, 62277, 61866,
	61455, 1524, 26363, 1564, 2167, -60, -60, -1000, -1000, -60,
	639, 1184, 49843, 49843, 49843, 1360, -1000, -1000, -1000, -1000,
	-1000, 49843, -1000, -1000, 2679, -1000, 1227, -1000, -1000, -1000,
	1227, 1407, 1354, 49843, 40290, 924, 61455, 1572, -60, -60,
	-1000, -1000, -60, 638, 14314, 1377, -1000, 2049, -1000, -1000,
	-1000, 12185, 70909, -1000, 70909, -1000, 61455, -1000, 960, 61455,
	41527, 881, 2361, -1000, 1407, 2360, 561, -1000, -1000, 33990,
	-28, 875, 40290, 49843, 16, 40290, 40290, 40290, 2730, 636,
	2729, -1000, 49843, 2354, 1748, 1836, 2325, 809, 61455, 1694,
	-1000, 26363, 1370, -1000, 33160, 973, 61455, 1306, 84, -1000,
	-1000, -1000, 80, 61455, -1000, 2726, -1000, -1000, 177, 177,
	177, -1000, 167, 1731, -1000, -111, -111, -1000, -1000, 5483,
	875, 10, 635, -1000, 823, 820, 31903, 40290, -19, -1000,
	-1000, -1000, -1000, -1000, 49843, 61455, 713, 2029, 61455, -26,
	-1000, 81, 633, -1000, 875, 2193, -1000, -1000, 921, -1000,
	1134, -1000, -1000, -1000, -1000, -1000, -1000, -28, -28, -1000,
	-1000, -1000, -1000, 1246, 1241, 61455, -1000, 14314, 61455, 49843,
	14314, 49843, -1000, -1000, -1000, -1000, -1000, -1000, 1292, -1000,
	26363, -1000, -1000, -1000, 19180, -1000, -1000, -1000, 49843, -228,
	26363, 26363, 7196, 6910, 26363, 27683, 27683, -1000, 26363, 6737,
	-1000, -1000, -1000, -1000, -1000, 2178, 632, 26363, 71451, 4756,
	440, -1000, 479, 9292, 1249, -1000, 26363, -1000, 476, 18740,
	-1000, 69780, -30, -31, -1000, 2697, 1838, 1502, 1375, 1259,
	2677, 11760, -137, -42, -1000, -1000, 780, -1000, 2323, -1000,
	26363, 70062, 11335, -1000, 34820, 934, 1694, -1000, -1000, 2647,
	845, -1000, -1000, -1000, 845, -1000, 68677, 71451, 71451, 26363,
	26363, -1000, 26363, 26363, 26363, -1000, -1000, 26363, -1000, -1000,
	2155, 26363, -1000, 71451, 71451, 27683, 27683, 27683, 27683, 27683,
	27683, 27683, 27683, 27683, 27683, 27683, 27683, 27683, 27683, 27683,
	27683, 27683, 27683, 27683, 1950, 27683, 2634, 2634, 2634, -1000,
	2225, 2155, 26363, 26363, 71451, 472, 471, 469, -1000, 26363,
	-137, -1000, -1000, 5483, -1000, 2102, -1000, -166, -1000, 1966,
	-1000, -1000, 2102, 2102, -49, 70909, 30223, 30223, -1000, 628,
	26363, 1956, -1000, 763, -1000, -50, -1000, 53143, -1000, 762,
	-242, -1000, 818, -1000, -1000, -1000, -1000, 561, -1000, -1000,
	-1000, 79, 53143, -1000, -51, -1000, 2600, 462, 14314, -1000,
	-1000, -1000, -1000, -1000, -1000, -28, 1709, 2695, -1000, 2651,
	774, 761, 459, 2647, 451, 448, -28, 61455, -1000, -7,
	-1000, -1000, -1000, 26363, -1000, -1000, 2478, 1052, 1051, -1000,
	2347, -1000, 1832, -1000, 975, -1000, 1443, -1000, 26363, 26363,
	627, 626, 1435, 2725, 2328, 1731, 2317, 1731, -1000, -1000,
	864, -1000, 70909, 625, 623, -1000, -14, 1372, 920, -1000,
	-1000, 26363, 26363, 53969, -1000, 2486, 2486, -1000, 1048, -1000,
	-1000, -1000, 1407, 1039, -1000, -1000, 1535, -1000, -1000, 908,
	-1000, -1000, 26363, -1000, -18, 1036, 875, 2147, -1000, 2724,
	2722, 2721, 447, -59, -20, 71451, 2586, 1772, 61455, 49843,
	49843, 2581, 837, -1000, 2644, -1000, -1000, -1000, -1000, 892,
	-1000, -1000, 2719, -1000, 982, 14314, 49843, 2315, 1904, 809,
	40705, -1000, 892, 2013, 70909, -1000, 1306, 18287, 2476, -69,
	-1000, -1000, -1000, 932, 34405, 30223, 26363, 2718, -71, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 53558, 53558, 40290,
	40290, 40290, 875, 61455, 61455, 41527, 2717, 620, 61455, 61455,
	619, -1000, 61455, 61455, 2713, 40290, -1000, -60, -1000, 1705,
	49843, -1000, -1000, 884, -1000, -1000, 1592, 1792, 1592, 1716,
	68574, -1000, 2483, 14314, 2562, 5640, 26363, 26363, 6657, 400,
	360, 5640, 26363, 26363, 71451, 71251, -73, 26363, 26363, -1000,
	26363, 759, 70909, 2694, 26363, 446, 444, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 443, -1000, -1000, -1000,
	-1000, -1000, 70909, 26363, 69, -1000, -1000, -1000, 65565, -1000,
	26363, 442, 439, -1000, -1000, -1000, 437, 424, 9215, 4805,
	68292, 68215, 67933, 70909, 2225, 70909, -1000, -1000, 854, 854,
	1208, 1208, 1208, 1208, 2634, 463, 312, 336, 541, 541,
	541, 1190, 516, 516, 541, 541, 541, 2146, 1949, 618,
	1094, -1000, -1000, 70909, 70909, 419, -1000, -1000, -1000, -137,
	416, 2094, 2518, -1000, 30223, 2094, 2094, -1000, -1000, 3351,
	61455, 70909, 30223, -233, -1000, 2644, -1000, -1000, 2035, -1000,
	10481, -1000, 14314, -1000, -1000, 32743, -1000, 616, -1000, -58,
	-1000, -1000, 758, 2712, 769, -1000, 407, -1000, -1000, -28,
	70909, 61455, 61455, 61455, 2310, -1000, 2038, -1000, 67830, -75,
	-1000, 69318, 26363, 61455, -1000, 1500, 1974, 1002, -1000, 61455,
	-1000, 61455, -1000, -1000, 61455, 61455, 49843, 2301, -86, 70909,
	-36, -1000, 816, -1000, -1000, 49843, 49843, 40290, 2300, -87,
	14314, -1000, 40290, -1000, -1000, -1000, 2006, -1000, 52315, 1732,
	-60, -1000, 2711, 614, 1407, -60, -1000, 1700, -1000, 757,
	-1000, -1000, 612, 61455, 1746, 610, 14314, 1912, 809, 40705,
	-1000, 1082, 1306, -1000, -1000, -61, -1000, 601, -60, 1694,
	-1000, -66, 70909, -1000, 814, -1000, -88, -1000, -1000, 399,
	-1000, 2438, 2437, -1000, -1000, 26363, 606, 604, 61455, 2435,
	-1000, -1000, -92, -1000, 1805, -1000, -1000, -1000, -1000, 14314,
	1310, -1000, -1000, -1000, -1000, 2483, 5640, 5640, 26363, 26363,
	26363, 5640, 71251, -98, -1000, 5640, 5640, -137, -1000, -1000,
	69780, -1000, -1000, -1000, 70909, 10910, 1622, -1000, 67548, -1000,
	-1000, -1000, -1000, 26363, 26363, -1000, -1000, -1000, -1000, -1000,
	27683, 2144, 603, 71451, -1000, -1000, 890, 26363, 26363, 1966,
	890, 890, -1000, -102, -1000, 815, -1000, -1000, -1000, 2644,
	-58, -1000, 2710, 14314, 768, -1000, 2708, -1000, -1000, -1000,
	-1000, 61455, -1000, 61455, -1000, 14314, 61455, 2133, 1819, -1000,
	-1000, 1937, 602, 27683, 49843, 865, 2106, 1431, 26363, -1000,
	-106, -110, 1817, -1000, -1000, 1813, 26363, -1000, 71451, 1731,
	1731, -115, -116, -1000, 26363, 1030, 61455, 17847, -1000, -1000,
	-1000, 26363, 1027, -1000, -111, 1572, 2070, -1000, -1000, -1000,
	-1000, 1933, -1000, -1000, 61455, 1931, 882, -1000, 41527, 881,
	-1000, -1000, 889, -1000, 26363, -1000, 49843, 26363, 1745, -1000,
	809, 40705, -1000, 2325, -1000, 2355, 61455, 2471, -1000, 2013,
	600, -1000, 875, 598, 597, -133, 26363, 26363, -138, 596,
	875, -120, -1000, 831, 828, -1000, -1000, 49843, 49843, -1000,
	5640, 5640, 5640, -1000, 375, -1000, -1000, 1694, 2517, -1000,
	67471, 67189, 3935, 27683, 71451, -139, -1000, 61455, 70909, -137,
	-1000, -1000, -1000, 53143, 756, -1000, 2707, -1000, -1000, 1710,
	-1000, -1000, -1000, 61455, 1823, -1000, -1000, 26363, 1094, 593,
	26363, -1000, -1000, 2022, 2190, 2006, 592, -1000, -1000, -1000,
	-1000, 1432, -1000, -1000, 70909, 2501, -1000, -1000, 590, 589,
	70909, 588, 808, 2143, -1000, 70909, 585, 881, -1000, 1674,
	1732, 584, -1000, -1000, -1000, 2005, 374, 2579, 889, -1000,
	2642, -1000, -140, 982, -144, 49843, 40705, -1000, 1904, 1161,
	-145, 61455, 1306, -1000, -1000, 40290, 40290, 1431, -151, -155,
	-1000, 40290, -1000, 1805, -1000, 61455, -1000, 61455, -1000, -1000,
	-1000, 1649, 26363, -1000, -1000, 3935, -157, -1000, -128, -1000,
	2573, -1000, -1000, -1000, -1000, -1000, 2308, 67086, 1867, 61455,
	262, 2156, -1000, -1000, 1572, 61455, 49843, 980, 14314, 1592,
	1592, 26363, 17407, 1660, 26363, -1000, 49843, 61455, -1000, 2434,
	2006, -60, -1000, -1000, 1431, 580, 1431, 576, -1000, 1912,
	1177, -1000, 932, -1000, -1000, -162, -164, 2006, 1431, -1000,
	-168, -1000, -170, -183, 373, 27243, 27243, 27243, -137, -1000,
	61455, 566, 2282, -1000, 1729, 1379, 372, 1011, -1000, -1000,
	2106, -189, 561, -1000, 26363, -1000, -191, -1000, 971, -196,
	-1000, 970, -197, -1000, 2138, -1000, -202, 560, -206, -1000,
	-1000, -1000, 1572, 882, 2006, 26363, 2006, 26363, -1000, 34405,
	-1000, 875, 875, 1572, 2006, 875, -1000, -1000, -1000, -1000,
	-1000, 28108, 1640, 1302, 69036, -1000, -1000, -1000, -1000, 61455,
	-1000, 1737, 1733, 1297, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1867, 70909, -1000, 1592, 2062, -1000, 1592, 2119,
	-1000, 1632, -1000, 61455, -1000, 61455, 881, -1000, 1572, -207,
	1572, -208, -198, -1000, -1000, -1000, 1572, -1000, 2595, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2420, -1000, 991, 1735,
	1735, 1729, -1000, 559, -1000, 550, -1000, -212, -1000, -1000,
	925, 1431, 925, 1431, -1000, -1000, 26803, -1000, 2622, -1000,
	-1000, 1954, -1000, 2106, 26363, 26363, 1652, -1000, 2706, 2006,
	-1000, 2006, -1000, -1000, -1000, -1000, -1000, -213, -217, -1000,
	-1000, -1000, -1000, 1572, 1572, 1572, 1026, 925, 925, -1000,
	549, -1000, -1000, 26363, -235, 1572, -1000,
}
var sqlPgo = [...]int{

	0, 3375, 3374, 3373, 3372, 3370, 3369, 3368, 3367, 3366,
	3363, 3360, 3357, 3356, 3355, 3354, 3353, 3346, 3344, 3343,
	3339, 3334, 3333, 3330, 3328, 3325, 3323, 3322, 3321, 3319,
	3317, 3316, 3311, 3309, 3308, 3306, 3302, 3301, 3300, 3299,
	3297, 3295, 3294, 3293, 3291, 3289, 30, 3288, 3285, 3284,
	3283, 3281, 3279, 3278, 3274, 3273, 3272, 3270, 3269, 3268,
	3266, 3265, 3264, 3263, 34, 3261, 211, 3260, 3259, 3258,
	3254, 3251, 3250, 3249, 3246, 3245, 3242, 210, 3240, 114,
	3239, 3238, 3237, 3235, 3234, 208, 3232, 3231, 3230, 3227,
	3226, 3225, 3223, 3213, 3210, 148, 3206, 3204, 3203, 3201,
	3198, 3197, 3192, 3191, 3186, 3183, 186, 3182, 207, 3179,
	3178, 3177, 3175, 3174, 3173, 3171, 3169, 3164, 3161, 3156,
	3155, 3153, 3148, 3147, 3143, 3141, 3140, 3139, 3138, 3134,
	3131, 3130, 3129, 3128, 3124, 226, 137, 3122, 3121, 205,
	202, 3120, 3118, 94, 91, 71, 3115, 101, 125, 187,
	267, 180, 3113, 3112, 3110, 3108, 3106, 67, 131, 132,
	123, 128, 184, 3104, 3103, 66, 54, 36, 28, 100,
	3101, 3100, 3099, 2412, 99, 3091, 3090, 198, 178, 3087,
	1062, 3085, 224, 225, 89, 104, 87, 3081, 107, 23,
	3080, 156, 32, 3073, 124, 75, 29, 5361, 6727, 3071,
	74, 212, 90, 170, 171, 160, 168, 151, 129, 1028,
	3070, 188, 3069, 86, 147, 3068, 3067, 3066, 58, 143,
	68, 3065, 7, 6, 140, 20, 84, 12, 3064, 11,
	3059, 3058, 3057, 3056, 21, 127, 3055, 111, 57, 3053,
	38, 3051, 14, 153, 3050, 164, 92, 3049, 3042, 195,
	150, 146, 10, 167, 3041, 3029, 3027, 3026, 3022, 95,
	24, 98, 3014, 3012, 103, 177, 3010, 35, 130, 78,
	115, 214, 96, 162, 85, 163, 134, 173, 3007, 3006,
	3005, 165, 3004, 3003, 121, 159, 3000, 2998, 206, 33,
	50, 176, 52, 2997, 2996, 122, 2992, 149, 2991, 2990,
	2988, 204, 135, 154, 2, 62, 88, 26, 9, 172,
	112, 70, 82, 2987, 3061, 1543, 1600, 2985, 105, 73,
	40, 93, 109, 194, 43, 2983, 2973, 158, 2972, 2967,
	2960, 2958, 139, 2957, 2955, 2952, 110, 53, 76, 2945,
	2944, 119, 61, 15, 179, 200, 72, 161, 169, 189,
	2943, 133, 2942, 83, 113, 2941, 145, 185, 65, 2940,
	1022, 120, 2939, 155, 2934, 2933, 2929, 2927, 338, 2926,
	2925, 359, 2923, 108, 2922, 2921, 138, 118, 126, 80,
	31, 2920, 63, 610, 2919, 144, 55, 2918, 2407, 49,
	0, 6549, 5094, 5706, 2917, 3783, 2916, 157, 102, 2915,
	2911, 2909, 69, 2907, 56, 2904, 2903, 37, 2902, 16,
	4, 8, 19, 17, 1042, 236, 2901, 2900, 79, 97,
	116, 2899, 203, 166, 2898, 2897, 2890, 64, 2889, 22,
	2888, 18, 2887, 2886, 27, 3, 2885, 2884, 181, 2883,
	183, 2882, 2880, 2593, 2878, 196, 106, 2877, 136, 182,
	2876, 2875, 2874, 2872, 191, 2871, 193, 2870, 13, 25,
	1, 2869, 2868, 2867, 152, 5, 2423, 2866, 2862, 60,
	141, 2859, 2857, 142,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 34, 34, 10, 10,
	9, 9, 9, 11, 11, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 24, 24, 14, 14,
	26, 26, 15, 15, 27, 27, 445, 445, 18, 29,
	19, 30, 12, 446, 446, 446, 446, 22, 20, 20,
	31, 31, 146, 146, 146, 146, 17, 17, 25, 25,
	159, 159, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 444, 444, 161, 161, 160, 156, 156,
	447, 447, 162, 162, 162, 164, 164, 35, 35, 93,
	93, 93, 147, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 81, 81, 388, 388, 389, 389, 142, 142,
	143, 143, 143, 143, 144, 144, 145, 145, 145, 49,
	37, 37, 37, 37, 37, 37, 37, 38, 38, 38,
	38, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 40, 40, 47, 47, 47, 47, 136, 136, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 452,
	452, 453, 453, 454, 454, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	61, 61, 236, 236, 212, 212, 62, 62, 62, 63,
	63, 64, 64, 51, 51, 440, 440, 250, 250, 355,
	355, 66, 66, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 68, 68, 68, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 75, 75, 75, 76,
	76, 76, 73, 73, 73, 71, 71, 71, 70, 70,
	70, 74, 74, 74, 72, 72, 72, 251, 251, 77,
	77, 77, 77, 77, 77, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	357, 357, 78, 78, 78, 325, 325, 82, 82, 82,
	282, 282, 83, 83, 83, 83, 83, 84, 84, 84,
	84, 94, 94, 94, 94, 443, 443, 243, 243, 177,
	177, 177, 177, 89, 89, 89, 89, 90, 90, 90,
	91, 91, 141, 141, 100, 100, 100, 100, 100, 99,
	99, 99, 99, 99, 99, 41, 41, 41, 42, 42,
	43, 43, 44, 44, 45, 45, 46, 46, 46, 46,
	46, 102, 102, 448, 448, 104, 101, 101, 101, 103,
	103, 103, 103, 105, 106, 106, 106, 106, 106, 106,
	107, 107, 382, 382, 258, 258, 380, 380, 396, 396,
	381, 381, 216, 216, 216, 216, 216, 217, 217, 217,
	387, 387, 387, 387, 387, 387, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 126, 126, 126,
	135, 135, 135, 135, 135, 135, 135, 128, 128, 128,
	117, 117, 109, 109, 109, 109, 113, 113, 113, 113,
	113, 110, 110, 119, 119, 119, 119, 114, 114, 116,
	116, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	111, 111, 111, 111, 121, 121, 121, 121, 288, 288,
	288, 120, 120, 340, 340, 131, 131, 131, 131, 131,
	131, 339, 339, 127, 127, 127, 127, 130, 130, 130,
	130, 272, 272, 124, 124, 124, 125, 125, 125, 129,
	129, 132, 132, 132, 132, 112, 112, 112, 457, 457,
	457, 133, 133, 123, 123, 134, 134, 134, 134, 134,
	134, 134, 134, 122, 122, 122, 122, 115, 441, 441,
	438, 438, 438, 438, 438, 438, 438, 439, 439, 442,
	442, 87, 87, 87, 56, 56, 458, 458, 458, 57,
	57, 459, 459, 459, 456, 456, 456, 456, 456, 456,
	456, 456, 218, 218, 219, 219, 306, 306, 306, 306,
	306, 222, 222, 163, 163, 163, 225, 226, 226, 223,
	223, 224, 224, 224, 228, 228, 227, 230, 230, 229,
	305, 403, 403, 405, 405, 405, 405, 405, 405, 405,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	401, 401, 401, 402, 397, 397, 398, 398, 398, 398,
	220, 220, 221, 221, 221, 221, 399, 400, 241, 241,
	343, 404, 404, 406, 406, 408, 460, 460, 460, 460,
	460, 460, 461, 461, 304, 304, 234, 234, 409, 409,
	409, 409, 410, 410, 410, 410, 410, 413, 412, 411,
	411, 411, 411, 411, 335, 335, 335, 60, 60, 60,
	269, 269, 268, 268, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 138, 138,
	58, 58, 58, 169, 169, 55, 55, 55, 463, 463,
	59, 59, 59, 464, 464, 65, 65, 65, 65, 65,
	65, 54, 54, 54, 54, 54, 465, 465, 289, 289,
	287, 287, 240, 240, 342, 181, 181, 157, 157, 157,
	21, 23, 23, 16, 16, 32, 32, 33, 33, 28,
	28, 449, 449, 450, 450, 88, 88, 92, 92, 92,
	98, 98, 137, 137, 137, 137, 137, 137, 137, 36,
	36, 36, 36, 48, 48, 48, 48, 96, 467, 467,
	467, 97, 97, 466, 466, 176, 176, 176, 176, 178,
	178, 301, 301, 302, 302, 468, 468, 303, 303, 303,
	303, 171, 170, 172, 172, 53, 53, 53, 165, 165,
	166, 166, 167, 167, 168, 168, 469, 469, 85, 85,
	85, 140, 140, 211, 211, 297, 297, 297, 235, 235,
	186, 186, 300, 300, 298, 298, 298, 298, 267, 267,
	267, 139, 139, 248, 248, 260, 260, 261, 261, 352,
	352, 262, 95, 95, 150, 150, 148, 148, 148, 148,
	148, 148, 470, 470, 149, 149, 149, 151, 151, 151,
	151, 151, 151, 151, 154, 154, 154, 154, 155, 155,
	155, 153, 153, 420, 420, 420, 422, 422, 423, 419,
	419, 421, 421, 462, 462, 271, 271, 271, 232, 233,
	231, 231, 238, 238, 237, 239, 239, 341, 341, 341,
	265, 265, 265, 265, 292, 292, 290, 290, 291, 291,
	293, 293, 294, 294, 294, 295, 295, 296, 296, 264,
	264, 321, 321, 152, 152, 152, 245, 245, 245, 246,
	246, 312, 312, 312, 312, 312, 312, 313, 313, 311,
	311, 311, 311, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 345, 345, 247, 247, 346, 299, 299, 436,
	436, 436, 437, 437, 338, 338, 347, 347, 347, 347,
	347, 347, 336, 336, 337, 337, 353, 354, 354, 275,
	275, 275, 275, 273, 273, 276, 276, 276, 276, 274,
	274, 348, 348, 348, 348, 266, 266, 349, 349, 349,
	350, 307, 308, 308, 358, 358, 358, 358, 358, 373,
	244, 244, 244, 244, 244, 471, 471, 359, 359, 359,
	359, 359, 359, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 363, 363, 363, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 372, 372, 372, 372,
	372, 364, 364, 369, 369, 370, 370, 370, 365, 366,
	371, 371, 371, 371, 472, 472, 375, 375, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 361, 361, 361,
	368, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 283, 283, 284, 284, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 316, 316, 316, 316, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 414, 414, 414, 414, 414, 414, 414, 414,
	417, 417, 418, 418, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 424, 424, 425, 425, 427, 427, 428,
	428, 429, 430, 430, 430, 431, 432, 432, 426, 426,
	433, 433, 433, 433, 434, 434, 435, 435, 435, 435,
	435, 327, 327, 328, 328, 334, 334, 334, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 179, 179, 179, 179, 179, 256,
	256, 254, 254, 254, 257, 257, 255, 255, 253, 253,
	252, 252, 324, 324, 322, 322, 326, 326, 277, 277,
	374, 374, 374, 374, 374, 374, 374, 278, 278, 278,
	286, 279, 279, 280, 280, 280, 280, 280, 318, 319,
	281, 281, 281, 320, 320, 329, 333, 333, 332, 331,
	331, 330, 330, 309, 309, 310, 310, 263, 263, 473,
	473, 259, 259, 351, 351, 351, 351, 214, 214, 249,
	249, 213, 213, 206, 206, 207, 207, 207, 207, 242,
	242, 376, 376, 376, 377, 378, 379, 323, 196, 195,
	183, 184, 194, 193, 192, 182, 185, 189, 190, 191,
	187, 188, 202, 201, 200, 198, 199, 356, 208, 208,
	209, 209, 209, 210, 210, 210, 210, 180, 180, 203,
	203, 204, 205, 205, 197, 197, 197, 173, 173, 173,
	174, 174, 175, 175, 386, 386, 384, 384, 384, 385,
	385, 385, 385, 383, 383, 383, 383, 383, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 392,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 395,
	395,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 9,
	6, 9, 6, 5, 6, 5, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 3, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 1, 1, 2, 1, 2,
	7, 3, 2, 0, 1, 3, 3, 1, 0, 1,
	2, 2, 1, 6, 5, 1, 2, 1, 3, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 6, 3, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 3, 4,
	4, 5, 3, 5, 5, 5, 3, 3, 3, 4,
	3, 4, 3, 5, 4, 5, 3, 4, 5, 3,
	4, 3, 4, 3, 3, 4, 4, 5, 0, 1,
	1, 3, 4, 1, 0, 5, 4, 6, 4, 6,
	4, 1, 0, 3, 4, 4, 5, 7, 5, 3,
	3, 2, 0, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 3, 4, 3, 1, 1,
	1, 2, 3, 2, 3, 6, 6, 7, 9, 7,
	9, 3, 4, 5, 5, 5, 3, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 10, 13, 0, 2, 3, 9,
	12, 0, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 0, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	3, 0, 2, 4, 3, 3, 1, 5, 1, 3,
	1, 2, 0, 1, 2, 2, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 2, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 2, 3, 4, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 1, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 3, 4, 1, 5, 3,
	4, 5, 1, 5, 1, 3, 2, 0, 3, 0,
	2, 3, 1, 3, 2, 0, 3, 5, 6, 4,
	6, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 1, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 2, 1, 0, 2, 5, 7, 2, 1, 1,
	2, 4, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 1, 2, 2,
	2, 4, 3, 5, 6, 8, 6, 5, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-84, -78, -94, -98, -88, -100, -137, -3, -35, -37,
	-50, -66, -68, -77, -86, -85, -87, -89, -93, -92,
	-81, -41, -95, -99, -108, -138, -139, -140, 81, 68,
	121, 103, 108, 154, 285, 314, 324, 308, -103, -104,
	343, -36, -48, -97, -96, -4, -10, 27, 39, -38,
	-39, -40, 53, -58, -55, -52, -61, -451, 83, -421,
	-69, -72, -74, -455, 113, 127, 171, 277, -90, -91,
	310, 312, 128, -43, -42, 122, -148, -150, -101, -102,
	-141, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, -134, 346, 391, 40,
	355, 69, 116, 318, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-420, -70, -71, -73, -75, -76, 309, -151, -149, 451,
	404, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 422, 430, -154, -152, -153, -155, 331,
	412, 369, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, -198, -203, -204, -205, -197, -173, -392, -395,
	4, -390, -393, 133, 179, 246, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 76, 73, 74, 75, 78, 80, 81, 82,
	85, 86, 94, 95, 96, 97, 98, 99, 103, 106,
	105, 108, 111, 112, 113, 115, 117, 118, 121, 122,
	125, 123, 375, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 278,
	280, 281, 283, 285, 287, 289, 290, 291, 292, 293,
	294, 296, 297, 299, 300, 301, 302, 303, 308, 305,
	306, 307, 309, 310, 311, 312, 314, 316, 317, 318,
	319, 321, 323, 344, 345, 357, 324, 325, 326, 327,
	328, 329, 330, 334, 338, 335, 336, 337, 339, 332,
	333, 340, 341, 343, 346, 348, 350, 351, 354, 355,
	356, 358, 361, 362, 363, 359, 360, 353, 368, 366,
	367, 370, 371, 372, 373, 374, 376, 385, 386, 388,
	391, 392, 393, 383, 395, 396, 399, 400, 401, 402,
	403, 408, 404, 406, 409, 410, 411, 417, 416, 423,
	424, 426, 427, 428, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 282, 284, 295, 320, 349, 364, 378,
	379, 380, 381, 387, 389, 412, 413, 414, 418, 425,
	257, -191, 2, -173, -173, 285, 26, 2, 26, 281,
	333, 371, 373, 2, -443, -243, 2, 26, -177, -173,
	83, 154, 331, -191, 2, -443, -243, 24, 2, -173,
	2, -178, 2, 324, -173, 454, 78, 224, 62, 320,
	340, -106, 386, -105, 378, 326, -107, -382, 2, 239,
	-173, 454, 454, 454, 454, 2, 369, 274, 416, 332,
	405, 96, 292, 179, -438, 2, 4, -393, -390, -207,
	-206, 369, 96, -205, -197, 444, -204, 454, 454, 454,
	2, 201, 202, 291, 290, 340, 341, 454, 454, 454,
	2, 25, 56, 77, 80, 102, 129, 149, 152, 262,
	-452, 231, 271, 289, 326, 339, 368, 376, 388, -456,
	356, 57, 405, -463, 393, 111, -287, 96, 373, 371,
	224, 153, 400, 316, 157, 398, 106, 185, 403, 402,
	454, 454, 25, 56, 65, 80, 111, 129, 149, 152,
	-454, 271, 289, 323, 326, 339, 368, 376, 393, 388,
	2, 416, 332, 369, 179, 96, 405, 316, 288, -79,
	2, 451, 29, 343, -147, 369, 195, 2, -173, 201,
	202, 2, 454, 454, -438, 2, 201, 202, 2, 195,
	2, 57, 328, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	2, -135, 340, 356, 163, 39, 62, 26, 67, 275,
	97, 155, 179, 180, 209, 77, 78, -288, -340, -339,
	370, 327, 333, 366, 386, 83, 406, 317, 428, 293,
	123, 4, 96, 239, 342, 378, 224, 38, 71, -462,
	2, 369, -466, 2, 386, 386, 2, -466, 2, -466,
	2, -176, 2, 386, 382, -467, 386, 425, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	-149, -151, -150, 454, 454, 454, 454, 454, -135, 340,
	2, 62, 26, -470, 147, -237, -238, 397, 193, 119,
	263, -148, -150, 2, -420, -380, 2, -314, -396, -316,
	442, 443, 437, 245, 429, -327, 102, 398, 257, -395,
	-317, -329, 120, 320, -257, 8, 9, 5, 6, 7,
	-180, -360, -323, -368, 390, 132, 248, -210, 456, 10,
	451, -417, -150, -328, 33, 158, 55, -384, -209, -362,
	-370, -366, -367, -471, 45, 51, 50, 376, 238, 334,
	335, 350, 336, 337, 43, 408, 175, 254, 256, 187,
	4, 194, -208, -197, -414, -415, -390, -391, 186, 192,
	188, 349, 189, 190, 191, 42, 295, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 413, -371, 98,
	378, 379, 380, 381, 204, 205, -173, -392, 65, 88,
	89, 87, 92, 91, 93, 90, 342, 405, 56, 32,
	165, 166, 198, 249, 167, 63, -416, 360, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 315, 347, -472, 414, 130, 131, 269, 282, 364,
	387, 389, 156, 217, 58, 59, -422, 296, -423, -191,
	-422, 454, 454, 455, 454, -231, -232, -233, 2, 26,
	109, 451, 2, -344, 2, 449, -348, -150, 212, -347,
	451, -345, -198, 258, -418, 321, -414, -415, -180, -197,
	-209, 4, -234, 451, 453, 96, 369, 66, 2, -282,
	451, -173, 26, 257, 382, 455, -325, 451, 257, 150,
	260, -173, 2, 2, 344, 2, 451, -106, 60, 386,
	-302, 2, -303, -170, -171, -172, -353, 200, 287, 294,
	431, 428, -380, -448, 150, 434, 382, -380, -258, 453,
	2, -348, 165, -198, 2, -195, -383, 4, -390, -393,
	-391, -394, 65, -392, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 48, 55, 56, 61, 64, 66, 77,
	83, 87, 88, 90, 89, 91, 92, 93, 102, 104,
	107, 109, 110, 114, 116, 119, 132, 134, 147, 149,
	150, 154, 157, 160, 172, 183, 193, 195, 212, 215,
	222, 225, 226, 245, 248, 253, 257, 258, 262, 263,
	279, 286, 298, 313, 331, 342, 352, 365, 369, 377,
	382, 384, 390, 397, 398, 405, 407, 415, 419, 420,
	421, 422, -395, 2, -348, 165, 2, -200, 165, -348,
	-203, 2, -388, 165, -386, 10, -385, 5, 4, -390,
	-393, -391, 2, -182, -173, 2, -194, -383, 2, -213,
	165, -198, -199, -203, 382, 455, -249, -206, -207, -242,
	-173, 453, -314, 2, -95, 2, -314, 165, 2, -95,
	165, 2, -314, 165, 2, -95, 165, 2, 2, 2,
	388, 2, 80, 165, -173, 369, 95, 2, 307, -453,
	323, 392, 416, 2, 2, 2, 2, 2, 2, 2,
	369, 332, -464, 296, -187, 2, -173, 147, -388, 165,
	2, -388, 165, 2, -201, -203, -201, 179, 196, -182,
	165, 2, 373, 371, 373, 371, 150, 2, 195, 2,
	195, 2, -349, 2, -350, -198, 2, 2, 2, 2,
	2, 165, -173, 369, 95, 2, 211, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -251, 165, 2, -198,
	-251, 165, 2, -251, 165, 2, -214, 165, 2, -213,
	-182, 165, 2, -389, 165, 2, -388, -389, 165, 2,
	-357, 2, -356, -385, 412, -79, 451, 340, 451, -388,
	-198, -198, -314, -95, 150, -314, -95, -147, 147, 2,
	96, 369, -135, 2, 147, 407, 2, 8, 2, -388,
	293, 139, 2, 344, 2, 62, -288, 428, 150, 2,
	150, 2, -272, 2, 422, -441, 2, 257, 150, 2,
	150, 2, 150, 2, 150, 2, 150, 2, 290, 341,
	202, 385, 210, 124, 150, -272, 2, 150, 2, 150,
	2, 5, 2, 200, 287, 357, 2, -198, -457, 2,
	369, 416, 332, 2, 2, 73, 74, 150, 2, 150,
	428, 2, -266, -348, -301, -302, -301, 382, -178, -470,
	-237, -238, -135, 344, 2, 2, -470, -265, -290, -291,
	222, 134, 253, -271, 26, 109, -271, -271, 49, 452,
	452, 11, 12, 64, 37, 442, 443, 444, 445, 145,
	446, 447, 440, 441, 439, 432, 433, 436, 206, 207,
	79, 435, 434, 72, 229, 322, 135, 136, 137, 138,
	304, 176, 177, 178, 14, 15, 16, 30, 262, 221,
	429, 169, 347, 437, 17, 18, 19, 197, 199, 247,
	41, 172, -179, -215, -314, -314, -314, -314, -314, 268,
	451, -263, -309, 449, -150, 451, 451, 451, 5, 451,
	5, -379, 8, -150, -314, -327, 452, -255, 451, -150,
	-327, -322, 451, 320, 449, 451, -330, -314, 453, -424,
	423, -364, 451, 284, -363, 451, -363, -363, 417, -361,
	451, 430, 424, 451, -361, 451, 451, 147, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 417, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 455, -422, -234, 451, -259, -351, -314, 444, -259,
	-259, 257, -252, -314, 84, -275, 203, 240, 151, 218,
	315, 184, -379, -80, -66, -77, -85, -95, -108, -139,
	-140, -311, 456, -338, 430, -150, -345, -197, -150, -347,
	451, -344, -338, 444, -198, 451, 150, 451, 453, 150,
	-242, -383, -182, -198, -208, -209, 108, -252, -438, -242,
	-177, 34, -324, -358, -359, -372, -360, -369, -365, -368,
	300, 301, 299, 303, 302, 45, 51, 50, 376, 238,
	334, 335, 350, 336, 337, 43, 408, 175, 254, 256,
	187, 4, 44, 413, -371, 194, 186, 192, 188, 349,
	189, 190, 191, 42, 295, 143, 144, 142, 112, 101,
	100, 250, 47, 46, 98, 378, 379, 380, 381, 204,
	205, 414, 360, 58, 59, -438, -242, 147, -382, -252,
	34, -302, 2, -468, 455, 220, -217, 228, 244, 162,
	258, 426, 251, -387, 5, 4, -323, -335, 102, 224,
	-368, 9, 443, -376, 8, 442, -381, -380, 86, 453,
	-383, -159, 305, -158, 23, 27, 113, 410, 125, -224,
	181, 274, 120, 353, 401, -445, -446, 325, 374, 375,
	75, 251, 305, 120, -268, -270, 34, 94, 242, 270,
	52, 173, 233, 234, 355, 418, 120, 305, 422, 120,
	-446, 305, -446, -161, 353, 401, -445, -446, 325, 305,
	-160, -224, 120, 456, -388, -249, 455, 455, -383, 444,
	120, 120, 120, 120, 2, 2, 245, 2, 2, 2,
	152, -456, -454, 2, 2, 2, -198, 165, -200, 165,
	2, -203, 416, -236, 257, -440, -250, 369, -198, -169,
	-419, 422, 245, 245, 34, 451, 2, -184, 165, 2,
	-174, -173, 179, -419, 245, -349, -211, -198, -211, 343,
	-191, 34, -311, 120, 2, 2, 2, -173, -162, 455,
	54, 311, 120, -162, 120, -162, 120, -162, 455, 120,
	-162, 120, 455, 120, 120, 452, 455, -357, -388, -145,
	422, 150, 83, 451, 451, -147, -389, -388, -440, -182,
	2, -198, 2, 369, 204, -388, -388, -382, 26, 345,
	2, 290, 341, 74, -198, 369, 96, 179, 68, -442,
	147, -439, 316, -438, -198, 96, -198, 96, -198, 96,
	-198, -198, 2, 2, 2, 147, 2, 385, 2, 385,
	2, -173, -173, -173, 220, -198, 147, 369, 179, 96,
	369, -162, 455, -178, -470, -265, -382, -470, -291, -290,
	-293, -314, 26, -296, 141, 241, -314, -316, -149, -149,
	-149, -239, -341, -314, 286, 179, -373, -358, -358, -196,
	-383, 378, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, 221, 169, 347,
	41, 172, -314, 382, -314, -314, -314, -314, 237, 245,
	248, 390, 132, 399, 109, 251, -473, 365, 36, -320,
	-150, -256, 451, -334, 31, 352, 26, -327, 451, 2,
	-309, -314, -310, -253, -252, -252, 452, 415, 26, 109,
	444, 2, 8, -283, -285, 427, 236, 99, 164, 235,
	-284, 330, 452, 455, 34, 452, -314, -253, -326, -322,
	-252, -333, -332, 419, -383, 444, -425, 140, 157, 8,
	-377, 8, -377, 378, 378, 8, -377, -377, 451, 452,
	2, 452, 2, 452, 2, 452, 2, 452, 2, -314,
	-314, -314, -314, -314, -314, -314, -252, -277, 2, -374,
	-252, 4, 427, 236, 99, 164, 235, 330, -277, 2,
	-278, 2, -314, -252, -279, -315, -316, 442, 443, 437,
	-327, -280, 2, -314, -253, -314, 48, 215, 384, -281,
	-314, 150, -252, -252, 2, -252, 2, -423, 34, -252,
	-245, 455, 150, 34, 4, -245, -245, 451, 452, 455,
	-276, 161, 232, 227, -276, -344, -275, 203, -273, 266,
	-273, -273, -436, 451, 450, 454, 454, 454, 454, 454,
	-338, -183, 449, 457, -383, -337, -336, 34, -191, 264,
	-338, -338, 453, 452, -337, -198, 451, -252, -383, 358,
	452, 453, 197, 197, 197, 321, 452, 382, 422, -79,
	259, 452, 455, -244, 33, 449, -285, 451, -375, 417,
	451, 451, 150, -243, -448, 452, 386, -303, -216, 294,
	351, 306, 338, 367, 9, 8, 8, 455, -383, 455,
	-449, 77, 382, 66, -305, 165, 66, -397, -185, 77,
	-398, -173, 61, 398, 286, 149, -449, 77, -449, 77,
	77, 343, 356, 49, -348, 37, 37, 26, -95, 216,
	150, 428, 369, 179, 382, -348, -270, -358, 94, 233,
	234, 49, -378, -376, 443, -378, 49, -378, -378, -378,
	422, -200, -348, 382, 276, -388, 382, 455, 37, 37,
	26, -95, 216, 150, 382, -213, -183, -354, -353, -206,
	-173, 453, -314, -95, -314, -95, 120, 2, -464, 211,
	451, -220, 245, -269, -268, 245, -202, 2, -198, 150,
	-242, -355, 195, 455, -250, 276, 120, 120, 451, 117,
	292, 2, 257, 245, -184, 165, -165, 372, 120, -308,
	-307, 420, -297, -95, 451, 102, 34, -297, -260, -261,
	-352, -262, -185, 451, -191, -173, 2, -198, -251, -251,
	-251, -213, -214, -182, -388, -389, -389, -79, -356, 452,
	452, -144, 261, -143, -173, 5, -147, 407, -219, -306,
	-305, -401, -402, -397, 221, 179, 398, 196, 133, -235,
	-186, -185, 95, -145, -353, -145, -145, -354, -354, -198,
	147, 2, 2, -272, -198, -182, -213, -242, -242, -182,
	-182, -182, 340, 147, 147, 453, -272, 292, 96, 369,
	274, 179, -198, -213, -182, -198, -348, -470, -294, -376,
	451, -295, 320, 321, 455, -157, 35, 107, 208, -198,
	428, 118, -314, -314, 382, -473, 365, -320, 118, -314,
	237, 248, 390, 132, 399, 109, 251, 150, 451, -315,
	-315, 452, -254, -314, -314, 450, 459, 452, -238, 455,
	-237, -314, -252, -252, 452, 452, 382, 382, 382, 382,
	451, 453, -252, -242, 450, 450, 455, 452, -331, -332,
	114, -314, 453, -430, 267, 451, 451, 452, 452, 455,
	452, 428, 428, 452, 452, 452, -314, 34, 455, 455,
	455, 452, 455, 455, 455, 452, 452, 150, 452, 452,
	-286, 279, 452, 11, 12, 442, 443, 444, 445, 145,
	446, 447, 440, 441, 439, 432, 433, 434, 72, 229,
	322, 14, 15, 16, 197, 172, -315, -315, -315, 452,
	-318, -319, 150, 147, 34, -281, -281, -281, 452, 150,
	-252, 452, 452, 451, 452, -308, -351, -246, 2, -344,
	-193, -383, -308, -308, -252, -314, 203, 203, -274, 407,
	257, -276, -344, -336, 452, -437, -379, -338, -337, -379,
	-313, -312, 148, 35, 107, 243, 168, -191, -234, -337,
	-337, -383, -338, 452, -247, -346, -418, -238, 453, -383,
	-136, 5, 248, -136, -136, -242, 24, 280, -358, 449,
	450, 8, 8, 451, -377, -377, -242, 150, -380, -302,
	396, 70, 294, 378, -380, -158, 305, -185, -185, -198,
	245, -305, 165, -164, 245, -358, -192, -173, 451, 451,
	208, 208, -185, -192, 165, -185, 165, -192, -192, -444,
	294, 252, -314, 223, 292, 246, -159, 305, -95, -95,
	-95, 451, -448, 407, 108, -198, -213, -202, 305, -208,
	-378, -378, -268, 305, -200, -388, 422, -182, -160, -95,
	-95, -95, 451, -183, -161, 305, -142, 174, 444, -173,
	416, -173, -218, -221, -219, -185, -458, 424, 422, 120,
	120, -234, -212, -198, 449, -145, -388, -198, -388, -388,
	-388, 2, 451, 2, -198, 120, 257, 245, -166, 115,
	-469, 434, -182, -238, -314, -267, -300, 313, 257, -235,
	412, -191, -267, -248, 455, 150, 434, 453, -235, 2,
	-162, -162, -162, -162, -162, -79, -145, 455, 451, 434,
	434, 451, -388, -388, 452, 455, -198, -184, 179, 179,
	-190, -174, 452, 455, 453, 451, -145, 150, -44, 422,
	369, 340, 340, -173, -194, -182, -198, -195, -213, -295,
	-314, -341, -198, 456, -314, -314, 118, 118, -314, -315,
	-315, -314, 118, 150, 451, -314, -324, 30, 30, 452,
	455, -310, -314, 452, 415, -238, -238, 452, 5, 236,
	164, 235, -284, 235, -284, -284, 8, 444, -383, 452,
	-322, 116, -314, 377, -383, 444, -431, -188, 451, -173,
	420, -237, -377, -361, -361, 452, -373, -358, -314, -314,
	-314, -314, -314, -314, -318, -314, -373, -358, -315, -315,
	-315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
	-315, -315, -315, -315, -315, -315, -315, 109, 245, 251,
	-315, -319, -318, -314, -314, -358, 452, 452, 452, -252,
	-79, -264, 157, -354, 455, -264, -264, 452, -344, -344,
	451, -314, 203, 450, 452, 455, -337, 450, 455, 458,
	434, -234, 453, -336, 452, 455, -299, 34, 452, -383,
	260, 5, 8, 449, 450, 452, -377, 452, 452, -242,
	-314, 382, 382, 120, 245, 409, -403, -398, -314, -240,
	-342, -314, 451, 451, -156, 113, 343, -450, 2, 120,
	-162, 120, -162, 426, 451, 451, 382, 422, -252, -314,
	-146, 102, -382, -446, -446, 382, 382, 276, 422, -252,
	382, -145, 150, 2, 2, 2, 452, 452, 455, -404,
	34, 255, -173, -198, -200, 34, -62, 422, -353, -379,
	-169, 2, -289, 407, -183, -198, 120, -167, 214, -469,
	-386, -419, -292, -290, -267, -259, 246, 76, 452, -308,
	-261, -246, -314, 2, 452, -143, -144, -388, -388, -388,
	-145, -147, -147, -306, 2, 451, -184, -174, 451, -147,
	-186, 2, -389, -95, 261, -198, -272, -226, -225, 274,
	251, -226, 258, 452, -157, -183, -314, -314, 118, 30,
	30, -314, -314, -324, 452, -314, -314, -252, 450, 5,
	-314, 452, 452, 452, -314, 453, -432, -173, -314, 452,
	452, 452, 452, 455, 455, 452, 452, 452, 452, -319,
	150, 109, 251, 451, 452, 452, -321, 160, 49, -344,
	-321, -321, -274, -242, -344, -311, -379, -312, -183, 449,
	-383, -346, 451, 453, 450, 2, 449, 452, -185, -185,
	-305, 120, -405, 77, -407, 64, 133, 83, 245, 248,
	398, 286, 61, 102, 298, 34, 452, 452, 455, -157,
	-240, -242, 245, 362, 102, 245, 102, 95, 393, -185,
	-192, -242, -242, -198, 126, 452, 455, 434, -202, -200,
	-388, 126, 452, -183, -389, -222, 182, -185, -402, -399,
	-400, 286, -406, -408, 133, 286, -95, 2, 451, -220,
	-269, -95, 261, 450, 451, -173, 257, 451, -183, -168,
	213, -469, -386, -165, -267, -298, 451, 257, -95, -238,
	434, 452, 452, 95, 95, -240, 451, 451, -242, 95,
	452, -45, -46, 179, 77, 278, -195, 369, 179, -157,
	-314, -314, -314, 452, -238, -383, 444, -426, 274, 452,
	-314, -314, -315, 150, 451, -324, -427, 421, -314, -252,
	-427, -427, 452, -338, -379, 2, 449, 2, -305, -192,
	-196, -189, -173, 133, 165, 248, 208, 451, -315, -198,
	451, 2, -460, 104, 183, -304, -461, 82, 363, -342,
	452, 452, 248, 248, -314, -358, -162, -162, 452, 452,
	-314, 382, -382, 81, -380, -314, 382, -223, -224, 172,
	-404, 208, -189, 208, -459, 422, -218, -458, -63, -64,
	383, -353, -240, -198, -240, 257, -469, -386, -166, 110,
	-242, 77, -292, -320, -145, 451, 451, 452, -240, -240,
	452, 451, -145, 455, 26, 451, 26, 451, -198, -213,
	452, -238, 49, 452, 452, -315, -324, 452, -428, -429,
	-188, -337, 450, 2, -407, -189, 245, -314, -175, 451,
	-314, 183, 105, 170, -222, 451, 298, -181, 64, 451,
	451, 451, 434, 150, 451, -458, 272, 451, 95, 242,
	452, 34, -64, 9, 452, -289, 452, -198, -386, -167,
	402, 246, 452, -192, -267, -389, -389, -304, 452, 452,
	-389, -46, -242, -242, -433, 292, 321, 159, -252, 452,
	455, 34, 120, 452, -409, 230, -173, 452, 105, 170,
	-223, -242, -198, -447, 407, -196, -228, -227, -225, -230,
	-229, -225, -252, -380, 81, 272, -252, -198, -241, -343,
	-185, 95, -222, -95, -304, 451, -304, 451, -168, 343,
	-307, 452, 452, -222, -304, 452, 452, 452, 452, -434,
	-435, 41, 395, 86, -314, -434, -434, -429, -431, 133,
	-410, -413, -412, 257, 348, 151, 273, 452, 362, 418,
	-460, 452, -234, -314, 452, 455, 412, 452, 455, 412,
	452, 150, 452, 451, 452, 455, -223, -459, -222, -240,
	-222, -240, -260, -145, -145, -223, -222, -145, -435, 283,
	146, 320, 283, 146, -189, -412, 257, -413, 257, 402,
	106, -409, -227, 172, -229, 150, 272, -242, -343, -458,
	-223, 452, -223, 452, -308, -223, 30, -411, 242, 311,
	54, 343, -411, -410, 451, 451, 452, -465, 420, -304,
	-465, -304, -435, 22, 248, 102, -460, -252, -252, -163,
	54, 311, 2, -222, -222, 452, 452, -223, -223, -223,
	382, -465, -465, 451, -252, 452, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 355, 356, 358,
	359, 360, 362, 363, 365, 367, 369, 371, 372, 374,
	376, 378, 379, 380, 381, 382, 384, 386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 444, 446,
	0, 902, 904, 906, 908, 25, 26, 0, 0, 180,
	182, 184, 0, 209, 211, 213, 214, 216, -2, 0,
	309, 310, 312, 314, -2, -2, 0, 0, 433, 435,
	0, 0, 0, 455, 456, 0, 992, -2, 449, 451,
	453, 516, 518, 520, 522, 524, 526, 528, 529, 531,
	533, 535, 537, 539, 541, 543, 545, 547, 549, 551,
	553, 555, 557, 559, 561, 563, 565, -2, -2, -2,
	0, -2, -2, -2, 920, 29, 31, 33, 35, 37,
	39, 58, 265, 266, 268, 270, 272, 275, 276, 278,
	1031, 316, 318, 320, 322, 324, 0, -2, 1043, 0,
	0, 41, 42, 43, 44, 45, 46, 47, 48, 65,
	66, 67, 68, 69, 70, 71, 72, 51, 53, 54,
	60, 61, 63, 0, 0, 1007, 1009, 1011, 1013, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	357, 361, 364, 366, 368, 370, 373, 375, 377, 383,
	385, 387, 797, 1635, 1649, 1650, 1651, 1654, 1655, 1656,
	1657, 1658, 1659, 1989, 2069, 2070, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	0, 411, 409, 1629, 412, 1825, 414, 416, 303, 304,
	305, 306, 307, 308, 0, 426, 420, 425, 427, 429,
	430, 431, 432, 406, 404, 0, 426, 1681, 424, 900,
	901, 895, 896, 1858, 930, 445, -2, -2, -2, 1958,
	-2, 477, -2, 484, 1961, 1860, 487, 0, 489, -2,
	492, 903, 905, 907, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, -2, -2, -2, -2,
	0, 0, 1716, 1605, 1651, 1608, 1603, 181, 183, 185,
	186, 0, 0, 0, 0, 0, 0, 210, 212, 215,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 705,
	0, 0, 710, 848, 849, 870, 0, 0, 0, 0,
	311, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 243, 349,
	350, 0, 1032, 0, 0, 0, 0, 161, 152, 0,
	0, 693, 434, 436, 0, 151, 0, 0, 899, 0,
	163, 0, 0, 450, 452, 454, 517, 519, 521, 523,
	525, 527, 530, 532, 534, 536, 538, 540, 542, 544,
	546, 548, 550, 552, 554, 556, 558, 560, 562, 564,
	566, 567, 0, 0, 0, 0, -2, -2, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 570, 572, 573, 574, 0, 620, 623, 631, 0,
	839, 1033, 932, 910, 923, 932, 912, 913, 914, 915,
	916, 921, 922, 925, 0, 917, 918, 919, 30, 32,
	34, 36, 38, 40, 267, 269, 271, 273, 277, 279,
	-2, 1005, 1006, 317, 319, 321, 323, 325, 437, 0,
	439, 0, 571, 996, 0, -2, 0, 1037, 1037, 1037,
	0, 0, 1006, 1004, 0, 442, 443, 496, 497, 1268,
	0, 0, 0, 0, 0, 1503, 1352, 0, 498, -2,
	1383, 1385, 1937, 1958, 1502, 1387, 1388, 1389, 1390, 1391,
	0, 0, 1394, 0, 1396, 1397, 1398, 1399, 0, 1401,
	0, 1405, 1406, 1407, 0, 1942, 1582, 1647, -2, 1173,
	1174, 1175, 1176, 1177, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1643, 0, 1474, 1421, -2, 1668, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1725, -2, -2, -2, -2, -2, -2, -2, 1229, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1972, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 0, 1926,
	1943, 1944, 1949, 1951, 1945, 1934, 1444, -2, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1230, -2, 1938, 1939, 1954, 1955, 1960,
	1965, 1966, 1941, 1950, -2, -2, 1023, 1833, 1026, 797,
	1024, 1008, 1010, 0, 1012, 0, 0, 0, 1017, 1040,
	1038, 0, 1074, 1021, 1022, 1032, 1092, 1115, 0, 1097,
	0, 1115, 1141, 0, 1102, 1853, 1422, 1423, 0, 1651,
	1648, -2, 0, 0, 0, 0, 0, 0, 206, 407,
	0, 413, 415, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 447, 448, 0, 472, 0, 476, 1933, -2,
	-2, 480, 933, 937, 938, 939, 940, 0, 0, 0,
	0, 0, 486, 0, 0, 473, 474, 490, 493, 0,
	49, 0, 1943, 1141, 50, 0, 1619, 1673, 1674, 1675,
	1676, 1677, 1972, 1988, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 52, 0, 1943, 55, 0, 1943, 0,
	-2, 59, 0, 1943, 164, 165, 1664, 1665, 1669, 1670,
	1671, 1672, 62, 0, 1625, 64, 0, 1622, 73, 0,
	1943, 0, 1602, -2, 0, 0, 685, 1599, 1604, 686,
	1609, 0, 187, 188, 189, 190, 191, 1943, 193, 194,
	0, 196, 197, 1943, 199, 200, 0, 202, 218, 219,
	0, 221, 0, 1943, 0, 0, 0, 227, -2, 244,
	0, 241, 0, 231, 232, 234, 235, 236, 237, 238,
	0, 0, 0, 854, 283, 281, 1630, 0, -2, 1943,
	842, 845, 1943, 847, 859, 1633, 0, -2, 0, 1030,
	1943, 947, 706, 707, 708, 709, 0, 302, 0, 960,
	0, 962, 0, 982, 1147, 1092, 245, 246, 247, 248,
	249, 1943, 0, 0, 0, 254, 0, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 144, 1943, 328, 347,
	144, 1943, 331, 144, 1943, 334, 144, 1943, 337, 1597,
	144, 1943, 340, 341, 1943, 343, 166, 344, 1943, 346,
	0, -2, 400, 1637, -2, 352, 0, -2, 0, 178,
	0, 0, 691, 692, 0, 897, 898, 0, 0, 457,
	0, 0, 568, 569, 0, 0, 579, 580, 581, 582,
	1831, 1740, 585, 0, 588, -2, 0, 0, 0, 592,
	0, 596, 597, 598, 0, 690, 600, 0, 0, 602,
	0, 606, 0, 609, 0, 611, 0, 613, -2, -2,
	-2, 0, 0, 0, 0, 639, 640, 0, 645, 0,
	648, 649, 650, 0, 652, 653, 654, 655, 0, 657,
	658, -2, -2, 662, 664, 0, 671, 0, 676, 0,
	575, 576, 144, 1145, 909, -2, 911, 0, 927, 999,
	-2, 0, 438, 0, 441, 1003, 997, 1002, 1052, 1053,
	0, 0, 0, 0, 1035, 1036, 0, 0, 0, 994,
	995, 0, 0, 0, 0, 1508, 1509, 1510, 1511, 1512,
	1513, 1516, 1517, 1514, 1515, 1518, 1519, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 1522, 1523, 0, 0, 1525,
	0, 1527, 0, 0, 0, 0, 0, 0, 1331, 1333,
	1590, 0, 0, 1524, 1273, 1274, 1275, 1310, 1311, 0,
	0, 1384, 1587, 1586, 1386, 0, 1539, 0, 1393, 0,
	1265, 1400, 1616, -2, 0, 1503, 1534, 0, 0, 1408,
	1409, 1410, 0, 0, 1539, 0, 0, 1581, 0, 1476,
	0, 1209, 0, 1210, 1211, 0, 1212, 1213, 1226, 1239,
	0, 0, 0, 0, 1243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1231, 0, 0, 0, 1562, -2, 0, 0, 0,
	0, 0, 1025, 0, 0, 1078, 1591, 1595, 1596, 1078,
	1078, 0, 0, 1540, 1138, 1138, 0, 0, 1134, 1134,
	1134, 1132, 1109, 0, 388, 390, 392, 394, 395, 396,
	398, 1115, 0, 1125, 0, 1115, 1115, 0, -2, 1097,
	0, 0, 1125, 1142, 1143, 0, 0, 0, 0, 0,
	0, 1652, 0, 0, 0, 1639, 0, 0, 0, 418,
	428, 1032, 0, 1542, 1164, 1158, 1167, 1168, 1169, 1170,
	1216, 1217, 1218, 1219, 1220, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, -2, 1227, 1229, 1250, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1222, 0, 1197,
	1197, 1197, 1214, 1215, 1238, 1249, 1241, 1249, 1245, 1165,
	1166, 1232, 1233, 1234, 1235, 0, 422, 0, 0, 0,
	0, -2, 482, 0, 935, 0, 941, 507, 508, 509,
	943, 944, 0, 485, 510, 511, 512, 513, 514, 515,
	0, 814, 0, 816, 1611, 0, 483, 500, 488, 0,
	494, 74, 892, 110, 0, 892, 892, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 98, 106, 86, 87,
	0, 0, 0, 0, 56, 822, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	97, 0, 92, 76, 0, 0, 0, 100, 108, 0,
	135, 137, 0, 0, 1128, 684, 0, 0, 1652, 1607,
	0, 0, 0, 0, 220, 222, 0, 224, 225, 226,
	0, 853, 0, 233, 230, 274, 771, 1943, 821, 1943,
	819, 1634, 0, 0, 0, 300, 295, 0, 297, 840,
	0, 1029, 0, 0, 0, 0, 860, 0, 1943, 865,
	1621, 1660, 1661, 949, 0, 1153, 0, 963, 0, 0,
	1148, 0, 1150, 0, 251, 252, 253, 0, 326, 0,
	142, 143, 0, 329, 0, 332, 0, 335, 0, 0,
	338, 0, 0, 0, 0, 1032, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 178, 178, 178, 1128,
	459, 1128, 461, 0, 0, 583, 584, 586, 587, 589,
	590, -2, -2, 672, 642, 0, 0, 0, 641, 599,
	0, 678, 1849, 688, 601, 1716, 604, 1716, 607, 1716,
	610, 612, 615, 634, 622, 0, 626, 0, 628, 0,
	630, 642, 643, 646, 651, 656, 0, 0, 0, 0,
	0, 838, 0, 926, 1000, 1002, 440, 998, 1050, 1051,
	1056, 1060, 1061, 1064, 1067, 1068, 1058, 1268, 1018, 1019,
	1020, 1044, 1045, 879, 0, 2069, 1269, 1159, 1270, 1271,
	1618, 0, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, -2, -2, -2, -2, -2, -2, -2, -2,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, -2, -2, -2, 1308, 1309, -2, 1526, 1528, 0,
	1590, 0, -2, 0, -2, -2, -2, -2, 1328, 0,
	1330, 1335, 1337, 1339, 0, 0, 0, 0, 1589, 1349,
	1573, 1574, 0, 0, 1505, 1506, 1507, 1334, 0, 1353,
	1588, 1585, 0, 0, 1538, 1043, 1412, 0, 0, 0,
	0, 1419, 0, 1617, 1264, 1251, 1252, 1253, 1254, 1255,
	1256, 1266, 1404, 1536, 0, 1535, 0, 0, 0, 1546,
	0, 1580, 1576, 0, 1640, 1646, 1484, 0, 0, 0,
	0, 1614, 0, 0, 0, 0, 0, 0, 0, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	1549, -2, -2, -2, -2, -2, -2, -2, 0, 1458,
	0, 1460, 1540, 1559, 0, 0, 1354, 0, 0, 0,
	1503, 0, 1463, 1540, 1567, 0, 0, 0, 0, 0,
	1540, 0, 1572, 0, 1470, 0, 1472, 1027, 0, 0,
	1153, 0, 0, 0, 1594, 1153, 1153, 0, 1073, 0,
	0, 1135, 1136, 1137, 0, 0, 1138, 0, 1129, 1133,
	1130, 1131, 0, 0, 1115, 389, 391, 393, 397, 399,
	1125, 1089, 0, 0, 1620, 1095, 1124, 0, 797, 1114,
	1125, 1125, 0, -2, 1099, 0, 0, 1043, -2, 179,
	796, 0, 0, 0, 0, 408, 410, 0, 0, 402,
	0, 405, 0, 1154, 1157, 0, 1171, 0, 0, -2,
	0, 0, 0, 0, 0, 475, 0, 934, 942, 0,
	504, 0, 506, 0, 815, 1613, 1612, 0, 495, 0,
	0, 0, 0, 891, 114, 1943, 0, 146, 0, 0,
	765, 1626, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 88, 0,
	0, 0, 0, 0, 0, 0, 823, 824, 826, 832,
	834, 0, 828, 1615, 0, 829, 0, 831, 833, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 89, 0, 0, 0, 0, 1601, 169, 1127, 1600,
	1610, 0, 192, 195, 198, 201, 0, 228, 0, 0,
	713, 696, 0, 817, 820, 0, 797, 852, 1632, 0,
	282, 178, 0, 0, 296, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 1943, 951, 957, 0, 1043,
	1152, 0, 980, 965, 0, 0, 0, 980, 984, 985,
	987, 988, 0, 0, 1149, 0, 255, 348, 144, 144,
	144, 1598, 144, 144, 167, 342, 345, 351, 401, 1032,
	178, 176, 1811, 174, 171, 173, 0, 0, 0, 714,
	716, 717, 718, 719, 0, 1661, 0, 1769, 1661, 0,
	968, 970, 0, 149, 178, 0, 294, 458, 463, 577,
	0, 617, 636, 591, 593, 594, 595, 689, 687, 603,
	605, 608, 625, 0, 0, 0, 638, 0, 0, 0,
	0, 0, 673, 674, 675, 677, 1146, 1001, 0, 1062,
	0, 1059, 1065, 1066, 0, 1047, 877, 878, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1350, 0, -2,
	1329, 1332, 1336, 1338, 1340, 0, 0, 0, 0, 0,
	0, 1529, 0, 1531, 1351, 1583, 1586, 1501, 0, 0,
	1042, 1043, 1043, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 1537, 0, 1544, 1545, 0, 1411, 0, 1577,
	0, 0, 0, 1420, 0, 0, 0, 1221, 1195, 0,
	1249, 1247, 1248, 1242, 1249, 1246, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1443, 1455, 0, 1457, 1459,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1357, 1358, 1359, 1462,
	1565, 1566, 0, 0, 0, 0, 0, 0, 1468, 0,
	1571, 1469, 1471, 1032, 1075, 1070, 1592, 1128, 1077, 1079,
	1593, 1623, 1070, 1070, 0, 1541, 0, 0, 1119, 0,
	0, 0, 1121, 0, 1110, 0, 1112, 1125, 1094, 0,
	0, 1087, 0, 1083, 1084, 1085, 1086, 797, 1123, 1096,
	1100, 1640, 0, 1144, 0, 1104, 1107, 0, 0, 1653,
	203, 207, 208, 204, 205, 417, 0, 0, 1543, 0,
	1160, 0, 0, 0, 0, 0, 421, 0, 471, -2,
	502, 503, 505, 0, 501, 111, 892, 0, 0, 883,
	0, 116, 1943, 125, 0, 742, 0, 1624, 0, 0,
	0, 0, 894, 0, 1943, 144, 1943, 144, 127, 130,
	0, 134, 132, 0, 0, 733, 75, 892, 78, 82,
	90, 0, 0, 0, 96, 0, 0, 885, 0, 827,
	830, 836, 57, 0, 887, 881, 0, 880, 136, 80,
	84, 91, 0, 889, 77, 0, 178, 0, 1606, 0,
	0, 0, 0, 0, 712, 782, 0, 0, 0, 0,
	0, 0, 288, 284, 0, 293, 299, 298, 843, -2,
	846, 855, 0, 857, 869, 0, 0, 0, 953, 957,
	0, 956, 1030, 1055, 1151, 958, 980, 0, 0, 0,
	967, 964, 961, 1153, 0, 0, 0, 0, 0, 250,
	327, 330, 333, 336, 339, 353, 153, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 1661, 1661,
	0, 1628, 0, 0, 0, 0, 150, 0, 460, 0,
	0, 627, 629, 642, 665, 666, 728, 0, 728, 0,
	0, 1046, 879, 0, 1272, 1313, 0, 0, -2, 0,
	0, 1317, 0, 0, 0, -2, 0, 0, 0, 1530,
	1532, 0, 1585, 1413, 0, 0, 0, 1417, 1395, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 0, 1402, 1403, 1504,
	1547, 1575, 1579, 0, 1641, 1645, 1482, 1483, 1487, 1631,
	0, 0, 0, 1240, 1244, 1424, 0, 0, 0, 0,
	0, 0, 0, 1548, 1558, 1560, 1355, 1356, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, -2, -2,
	-2, 1373, 1374, 1375, -2, -2, -2, 0, 0, 0,
	1561, 1563, 1564, 1568, 1569, 0, 1465, 1466, 1467, 1570,
	0, 1072, 0, 1076, 0, 1072, 1072, 1039, 1117, 0,
	0, 1140, 0, 1092, 1111, 0, 1101, 1090, 0, 1091,
	0, 1122, 0, 1098, 1103, 0, 1106, 0, 1413, -2,
	419, 403, 0, 0, 1162, 1172, 0, 1224, 1228, 423,
	1126, 0, 0, 0, 0, 145, 740, 764, 0, 0,
	872, 879, 0, 0, 118, 0, 0, 0, 126, 0,
	123, 0, 129, 133, 0, 0, 0, 0, 0, 93,
	94, 95, 0, 99, 101, 0, 0, 0, 0, 0,
	0, 147, 0, 223, 851, 229, 722, 770, 0, 772,
	0, 697, 0, 771, 821, 0, 280, 0, 287, 0,
	841, 856, 0, 0, 0, 0, 0, 955, 957, 0,
	948, 949, 980, 1054, 959, 978, -2, 977, 0, 1043,
	986, 983, 989, 990, 0, 175, 0, 170, 172, 0,
	156, 0, 0, 715, 720, 0, 0, 0, 0, 0,
	969, 971, 0, 162, 0, 578, 637, 667, 727, 0,
	0, 669, 1057, 1063, 1048, 879, 1315, 1319, 0, 0,
	0, 1321, -2, 0, 1343, -2, -2, 1533, 1584, 1392,
	1043, 1414, 1416, 1267, 1578, 0, 1489, 1486, 0, 1473,
	1196, 1434, 1435, 0, 0, 1438, 1440, 1441, 1442, 1557,
	0, 0, 0, 0, 1464, 1028, 1478, 0, 0, 1080,
	1478, 1478, 1118, 0, 1120, 1115, 1113, 1088, 1081, 0,
	1641, 1105, 0, 0, 1155, 1161, 0, 1223, 112, 113,
	115, 0, 741, 0, 744, 0, 0, 0, 0, 751,
	752, 0, 0, 0, 0, 0, 786, 795, 0, 874,
	0, 0, 0, 120, 139, 0, 0, 893, 0, 144,
	144, 0, 0, 884, 0, 0, 0, 0, 886, 888,
	882, 0, 0, 890, 168, 730, 0, 782, 774, 775,
	776, 0, 781, 783, 0, 0, 701, 698, 713, 696,
	818, 850, 0, 285, 0, 868, 0, 0, 0, 945,
	957, 0, 950, 951, 301, 0, 0, 0, 966, 1055,
	0, 177, 178, 0, 0, 0, 0, 0, 0, 0,
	178, 462, 464, 0, 0, 470, 726, 0, 0, 1049,
	1323, -2, -2, 1344, 0, 1642, 1644, 1043, 0, 1475,
	0, 0, -2, 0, 0, 0, 1014, 0, 1071, 1069,
	1015, 1016, 1139, 1125, 0, 1108, 0, 1163, 117, 0,
	745, 746, 1627, 748, 0, 750, 753, 0, 755, 1663,
	0, 759, 766, 787, 0, 722, 0, 792, 793, 873,
	768, 0, 119, 121, 138, 876, 122, 128, 0, 0,
	79, 0, 0, 1710, 103, 81, 0, 696, 729, 0,
	773, 0, 784, 785, 699, 0, 0, 0, 286, 289,
	0, 292, 0, 869, 0, 0, 0, 952, 953, 0,
	0, 0, 980, 991, 155, 0, 0, 795, 0, 0,
	763, 0, 160, 0, 466, 0, 468, 0, 668, 670,
	1415, 1493, 0, 1436, 1437, -2, 0, 1381, 1477, 1479,
	0, 1093, 1082, 1156, 743, 747, 0, 0, 801, 0,
	0, 0, 790, 791, 730, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 702, 0,
	722, 0, 290, 291, 795, 0, 795, 0, 954, 955,
	0, 973, 974, 976, 981, 0, 0, 722, 795, 762,
	0, 465, 0, 0, 0, 0, 0, 0, 1488, 1382,
	0, 0, 0, 754, 806, 0, 0, 0, 788, 789,
	786, 0, 797, 124, 0, 875, 0, 734, 0, 0,
	737, 0, 0, 104, 1710, 102, 0, 0, 0, 778,
	780, 703, 730, 701, 722, 0, 722, 0, 946, 0,
	975, 178, 178, 730, 722, 178, 467, 469, 1485, 1490,
	1494, -2, 1906, 1713, 0, 1491, 1492, 1480, 1481, 0,
	756, 802, 803, 0, 798, 799, 800, 1662, 757, 758,
	767, 794, 801, 140, 731, 0, 0, 732, 0, 0,
	107, 0, 109, 0, 777, 0, 696, 700, 730, 0,
	730, 0, 1153, 157, 158, 760, 730, 159, 0, 1496,
	1497, 1498, 1499, 1500, 749, 804, 0, 805, 0, 0,
	0, 806, 735, 0, 738, 0, 105, 0, 779, 695,
	866, 795, 866, 795, 972, 761, 0, 807, 0, 810,
	811, 0, 808, 786, 0, 0, 725, 861, 0, 722,
	863, 722, 1495, 809, 812, 813, 769, 0, 0, 721,
	723, 724, 867, 730, 730, 730, 0, 866, 866, 736,
	0, 862, 864, 0, 0, 730, 739,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1054
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1181
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1264
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1280
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1289
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1300
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1310
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1328
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1342
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1353
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1372
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1396
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1407
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1424
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1459
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1499
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1515
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1520
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1598
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1737
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1767
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1808
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1817
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1823
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1828
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1833
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1838
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1843
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1847
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1863
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1866
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1874
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1882
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1892
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1906
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = nil
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1944
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1978
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1983
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2038
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2067
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2093
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2108
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2109
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2110
		{
			return helpWith(sqllex, "CREATE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "create cast")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplemented(sqllex, "create operator")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplemented(sqllex, "create publication")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplemented(sqllex, "create rule")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return unimplemented(sqllex, "create server")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2131
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2132
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2133
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2140
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2141
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2144
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2145
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			return unimplemented(sqllex, "drop server")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2164
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2166
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2167
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2171
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2172
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2173
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2176
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2177
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2178
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2189
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2205
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2215
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2224
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2231
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2247
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2258
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2270
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2278
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2286
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2300
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2321
		{

			sqlVAL.union.val = nil
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2335
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "DELETE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2352
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2355
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2356
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2357
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2358
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2359
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2369
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2370
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{
			return helpWith(sqllex, "DROP")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2374
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2375
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2376
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2377
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2378
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2386
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2393
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2401
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2420
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2423
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2431
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2454
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2462
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2469
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2484
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2492
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2499
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2503
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2508
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2534
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "DELETE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "INSERT")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2565
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2567
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2570
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2575
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2576
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2577
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2582
		{
			return helpWith(sqllex, "DELETE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "INSERT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2617
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2625
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2629
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2633
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2650
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2658
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2680
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2688
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2719
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2722
		{
			return helpWith(sqllex, "GRANT")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2742
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2746
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2758
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2762
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2790
		{
			return helpWith(sqllex, "RESET")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2817
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2831
		{
			return helpWith(sqllex, "USE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2836
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2837
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2838
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2844
		{
			return helpWith(sqllex, "USE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2878
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2904
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2928
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3022
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3054
		{
			return unimplemented(sqllex, "set from current")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3068
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3085
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3127
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3131
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3135
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3139
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3143
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = tree.Low
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3153
		{
			sqlVAL.union.val = tree.Normal
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3157
		{
			sqlVAL.union.val = tree.High
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3168
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3172
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3216
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3217
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3219
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3221
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3222
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SHOW")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.str = "client_encoding"
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			sqlVAL.str = "timezone"
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3270
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3281
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3297
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3312
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3329
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3333
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3338
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3349
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3364
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3395
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3403
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3411
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3414
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3424
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3429
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3436
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3444
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3449
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3468
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3472
		{
			sqlVAL.union.val = true
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = true
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.union.val = false
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = false
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3503
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3510
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3514
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = true
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = false
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3552
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3565
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = false
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3576
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3594
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3597
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3616
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3621
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3626
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3642
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3646
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3659
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3662
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3673
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3685
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3693
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3730
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3735
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3739
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3742
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3746
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3753
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3758
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3882
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3886
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3925
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3929
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3934
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3938
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3947
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3954
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3958
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3979
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3982
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4018
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4030
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4043
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4044
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4045
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4049
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4060
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4072
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4074
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4088
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4089
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4090
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4091
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4092
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4093
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4094
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4095
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4100
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4106
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4116
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4125
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4129
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4145
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4150
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4155
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.str = ""
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4181
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4195
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4201
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4211
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4245
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4266
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4308
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4332
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4346
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4357
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4406
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4412
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4439
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4453
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4457
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4463
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4473
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4488
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4495
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4501
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4542
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4553
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4554
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4555
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4557
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4558
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4617
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4630
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4642
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4658
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4670
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4674
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4688
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4692
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4698
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4717
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4722
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4726
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4737
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4738
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4741
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4742
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4747
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4749
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4752
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4754
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4755
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4757
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4770
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4778
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4785
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = nil
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4810
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4815
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4816
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4824
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4832
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4836
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4837
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4843
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4845
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4847
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4849
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4851
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4853
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4869
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4883
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4898
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4912
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4926
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4929
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4930
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4949
		{
			sqlVAL.union.val = false
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4955
		{
			sqlVAL.union.val = true
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4959
		{
			sqlVAL.union.val = false
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4978
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4989
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4990
		{
			sqlVAL.str = ""
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4998
		{
			sqlVAL.union.val = tree.Descending
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5002
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5008
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5025
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5031
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5039
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5045
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5053
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5059
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5067
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5071
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5076
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5077
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5080
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5081
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5089
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5092
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5102
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5114
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5125
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5129
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5130
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5131
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5155
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5165
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5168
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5170
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5173
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5182
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5183
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5184
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5192
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5202
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5203
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.str = ""
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.str = ""
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5225
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5229
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5245
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5249
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5262
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5264
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5268
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5277
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5287
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 945:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5323
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5333
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.str = ""
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.str = ""
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5361
		{
			sqlVAL.str = ""
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5367
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.str = ""
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5376
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5377
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5403
		{
			return helpWith(sqllex, "INSERT")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5421
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5425
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5434
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5441
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5445
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5449
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5479
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5487
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5493
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5496
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5497
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5499
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5505
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5510
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5514
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 981:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5543
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5575
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5579
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5651
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5655
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5659
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5667
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5672
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5673
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5678
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5713
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5714
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5715
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5776
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5820
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5832
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5836
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5840
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5844
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5862
		{
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5863
		{
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5867
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = nil
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5876
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5877
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5881
		{
			sqlVAL.union.val = true
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = false
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5889
		{
			sqlVAL.union.val = false
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5895
		{
			sqlVAL.union.val = true
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5906
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5907
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5911
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5915
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5921
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5927
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5941
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5946
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5961
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5981
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5985
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6000
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6037
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6038
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6041
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6042
		{
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6095
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6097
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6109
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6112
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6134
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6139
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6144
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6155
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6162
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6167
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6186
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6194
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6225
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6239
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6274
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6285
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6325
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6337
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6339
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = nil
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = true
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = false
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6412
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6419
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.str = tree.AstFull
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6442
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6446
		{
			sqlVAL.str = tree.AstRight
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6450
		{
			sqlVAL.str = tree.AstInner
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6456
		{
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6457
		{
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.str = tree.AstHash
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.str = ""
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6513
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6519
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6524
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6542
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6548
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6556
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6585
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6598
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6606
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6607
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6621
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6629
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6631
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6639
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6640
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6651
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6652
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = types.String
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = types.Name
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6693
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = types.INet
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = types.Oid
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6773
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6781
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.union.val = nil
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = types.Int2
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = types.Int2
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = types.Int4
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = types.Int
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = types.Int
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = types.Int
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6828
		{
			sqlVAL.union.val = types.Float4
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = types.Float4
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = types.Float
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = types.Float
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6848
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6856
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6864
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = types.Bool
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = types.Bool
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = types.RegType
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6905
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = types.Float
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6924
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6930
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6952
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = types.String
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = true
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = false
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = types.Date
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7001
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7006
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7014
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7016
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7024
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7040
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = true
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = false
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = false
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = types.Interval
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = tree.Year
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = tree.Month
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = tree.Day
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = tree.Month
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = nil
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = tree.Second
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7127
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7174
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7418
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7484
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7700
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7705
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7714
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7732
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7741
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7780
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7791
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7792
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7807
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7818
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7935
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7940
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7945
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7950
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7955
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7960
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7965
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7974
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7975
		{
			return unimplemented(sqllex, "treat")
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8006
		{
			return unimplemented(sqllex, "within group")
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8007
		{
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.str = ""
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8133
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8146
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8220
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = tree.Any
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = tree.Some
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = tree.All
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = tree.Div
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = tree.LT
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = tree.GT
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = tree.LE
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = tree.GE
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = tree.NE
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = tree.Like
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8470
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8476
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8580
		{
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8581
		{
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8585
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8653
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8661
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8723
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8727
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8736
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8747
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8756
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8764
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8868
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8872
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8876
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8890
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8911
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8929
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8942
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8949
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8974
		{
			sqlVAL.str = ""
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8980
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8984
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
