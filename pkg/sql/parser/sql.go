// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7828

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	416, 55,
	-2, 863,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	164, 701,
	-2, 0,
	-1, 59,
	101, 863,
	170, 863,
	364, 863,
	365, 863,
	-2, 0,
	-1, 72,
	113, 837,
	126, 837,
	178, 837,
	204, 837,
	233, 837,
	241, 837,
	361, 837,
	-2, 826,
	-1, 107,
	194, 531,
	352, 531,
	-2, 0,
	-1, 112,
	4, 865,
	20, 865,
	21, 865,
	22, 865,
	23, 865,
	25, 865,
	30, 865,
	35, 865,
	36, 865,
	37, 865,
	38, 865,
	39, 865,
	40, 865,
	41, 865,
	42, 865,
	43, 865,
	44, 865,
	46, 865,
	47, 865,
	48, 865,
	49, 865,
	50, 865,
	51, 865,
	54, 865,
	55, 865,
	56, 865,
	58, 865,
	59, 865,
	63, 865,
	64, 865,
	65, 865,
	66, 865,
	67, 865,
	69, 865,
	70, 865,
	71, 865,
	72, 865,
	74, 865,
	76, 865,
	77, 865,
	80, 865,
	81, 865,
	82, 865,
	90, 865,
	91, 865,
	92, 865,
	93, 865,
	94, 865,
	95, 865,
	96, 865,
	97, 865,
	99, 865,
	101, 865,
	103, 865,
	106, 865,
	107, 865,
	109, 865,
	110, 865,
	114, 865,
	115, 865,
	116, 865,
	117, 865,
	118, 865,
	119, 865,
	120, 865,
	121, 865,
	122, 865,
	123, 865,
	131, 865,
	132, 865,
	133, 865,
	134, 865,
	135, 865,
	137, 865,
	139, 865,
	143, 865,
	145, 865,
	146, 865,
	148, 865,
	150, 865,
	151, 865,
	152, 865,
	153, 865,
	154, 865,
	155, 865,
	156, 865,
	157, 865,
	160, 865,
	165, 865,
	166, 865,
	167, 865,
	170, 865,
	171, 865,
	172, 865,
	173, 865,
	174, 865,
	175, 865,
	176, 865,
	177, 865,
	179, 865,
	181, 865,
	184, 865,
	185, 865,
	186, 865,
	188, 865,
	189, 865,
	192, 865,
	193, 865,
	194, 865,
	196, 865,
	197, 865,
	199, 865,
	201, 865,
	202, 865,
	205, 865,
	206, 865,
	209, 865,
	211, 865,
	214, 865,
	215, 865,
	216, 865,
	217, 865,
	218, 865,
	220, 865,
	221, 865,
	222, 865,
	223, 865,
	228, 865,
	229, 865,
	230, 865,
	231, 865,
	232, 865,
	234, 865,
	235, 865,
	237, 865,
	238, 865,
	239, 865,
	242, 865,
	243, 865,
	245, 865,
	247, 865,
	248, 865,
	249, 865,
	250, 865,
	251, 865,
	252, 865,
	253, 865,
	254, 865,
	256, 865,
	257, 865,
	258, 865,
	259, 865,
	260, 865,
	262, 865,
	263, 865,
	264, 865,
	265, 865,
	266, 865,
	267, 865,
	268, 865,
	269, 865,
	271, 865,
	272, 865,
	273, 865,
	274, 865,
	275, 865,
	277, 865,
	278, 865,
	279, 865,
	280, 865,
	281, 865,
	282, 865,
	283, 865,
	285, 865,
	288, 865,
	289, 865,
	290, 865,
	291, 865,
	292, 865,
	294, 865,
	295, 865,
	296, 865,
	297, 865,
	298, 865,
	299, 865,
	300, 865,
	302, 865,
	303, 865,
	304, 865,
	305, 865,
	306, 865,
	307, 865,
	308, 865,
	309, 865,
	310, 865,
	312, 865,
	313, 865,
	314, 865,
	315, 865,
	317, 865,
	318, 865,
	319, 865,
	320, 865,
	322, 865,
	323, 865,
	324, 865,
	325, 865,
	326, 865,
	327, 865,
	328, 865,
	329, 865,
	330, 865,
	332, 865,
	333, 865,
	335, 865,
	336, 865,
	338, 865,
	339, 865,
	340, 865,
	341, 865,
	342, 865,
	343, 865,
	344, 865,
	345, 865,
	347, 865,
	348, 865,
	349, 865,
	352, 865,
	353, 865,
	354, 865,
	355, 865,
	357, 865,
	358, 865,
	359, 865,
	360, 865,
	363, 865,
	364, 865,
	365, 865,
	366, 865,
	368, 865,
	370, 865,
	371, 865,
	372, 865,
	373, 865,
	374, 865,
	375, 865,
	378, 865,
	379, 865,
	384, 865,
	385, 865,
	386, 865,
	387, 865,
	388, 865,
	389, 865,
	-2, 0,
	-1, 133,
	113, 836,
	126, 836,
	178, 836,
	204, 836,
	233, 836,
	241, 836,
	361, 836,
	-2, 829,
	-1, 138,
	1, 759,
	184, 759,
	262, 759,
	266, 759,
	415, 759,
	416, 759,
	-2, 0,
	-1, 140,
	1, 759,
	415, 759,
	416, 759,
	-2, 0,
	-1, 141,
	1, 759,
	415, 759,
	416, 759,
	-2, 0,
	-1, 142,
	1, 763,
	415, 763,
	416, 763,
	-2, 0,
	-1, 168,
	4, 872,
	5, 872,
	6, 872,
	7, 872,
	8, 872,
	9, 872,
	20, 872,
	21, 872,
	22, 872,
	23, 872,
	25, 872,
	30, 872,
	31, 872,
	35, 872,
	36, 872,
	37, 872,
	38, 872,
	39, 872,
	40, 872,
	41, 872,
	42, 872,
	43, 872,
	44, 872,
	46, 872,
	47, 872,
	48, 872,
	49, 872,
	50, 872,
	51, 872,
	52, 872,
	53, 872,
	54, 872,
	55, 872,
	56, 872,
	58, 872,
	59, 872,
	61, 872,
	63, 872,
	64, 872,
	65, 872,
	66, 872,
	67, 872,
	69, 872,
	70, 872,
	71, 872,
	72, 872,
	74, 872,
	76, 872,
	77, 872,
	79, 872,
	80, 872,
	81, 872,
	82, 872,
	83, 872,
	84, 872,
	85, 872,
	86, 872,
	88, 872,
	89, 872,
	90, 872,
	91, 872,
	92, 872,
	93, 872,
	94, 872,
	95, 872,
	96, 872,
	97, 872,
	98, 872,
	99, 872,
	101, 872,
	103, 872,
	106, 872,
	107, 872,
	109, 872,
	110, 872,
	114, 872,
	115, 872,
	116, 872,
	117, 872,
	118, 872,
	119, 872,
	120, 872,
	121, 872,
	122, 872,
	123, 872,
	124, 872,
	125, 872,
	131, 872,
	132, 872,
	133, 872,
	134, 872,
	135, 872,
	137, 872,
	139, 872,
	142, 872,
	143, 872,
	145, 872,
	146, 872,
	148, 872,
	150, 872,
	151, 872,
	152, 872,
	153, 872,
	154, 872,
	155, 872,
	156, 872,
	157, 872,
	158, 872,
	160, 872,
	165, 872,
	166, 872,
	167, 872,
	169, 872,
	170, 872,
	171, 872,
	172, 872,
	173, 872,
	174, 872,
	175, 872,
	176, 872,
	177, 872,
	179, 872,
	181, 872,
	182, 872,
	183, 872,
	184, 872,
	185, 872,
	186, 872,
	187, 872,
	188, 872,
	189, 872,
	192, 872,
	193, 872,
	194, 872,
	196, 872,
	197, 872,
	199, 872,
	200, 872,
	201, 872,
	202, 872,
	203, 872,
	205, 872,
	206, 872,
	209, 872,
	211, 872,
	212, 872,
	213, 872,
	214, 872,
	215, 872,
	216, 872,
	217, 872,
	218, 872,
	219, 872,
	220, 872,
	221, 872,
	222, 872,
	223, 872,
	224, 872,
	226, 872,
	227, 872,
	228, 872,
	229, 872,
	230, 872,
	231, 872,
	232, 872,
	234, 872,
	235, 872,
	238, 872,
	239, 872,
	242, 872,
	243, 872,
	244, 872,
	245, 872,
	246, 872,
	247, 872,
	248, 872,
	249, 872,
	250, 872,
	251, 872,
	252, 872,
	253, 872,
	254, 872,
	256, 872,
	257, 872,
	258, 872,
	259, 872,
	260, 872,
	262, 872,
	263, 872,
	264, 872,
	265, 872,
	266, 872,
	267, 872,
	268, 872,
	269, 872,
	271, 872,
	272, 872,
	273, 872,
	274, 872,
	275, 872,
	277, 872,
	278, 872,
	279, 872,
	280, 872,
	281, 872,
	282, 872,
	283, 872,
	285, 872,
	286, 872,
	288, 872,
	289, 872,
	290, 872,
	291, 872,
	292, 872,
	294, 872,
	295, 872,
	296, 872,
	297, 872,
	298, 872,
	299, 872,
	300, 872,
	302, 872,
	303, 872,
	304, 872,
	305, 872,
	306, 872,
	307, 872,
	308, 872,
	309, 872,
	310, 872,
	311, 872,
	312, 872,
	313, 872,
	314, 872,
	315, 872,
	316, 872,
	317, 872,
	318, 872,
	319, 872,
	320, 872,
	322, 872,
	323, 872,
	324, 872,
	325, 872,
	326, 872,
	327, 872,
	328, 872,
	329, 872,
	330, 872,
	332, 872,
	333, 872,
	335, 872,
	336, 872,
	338, 872,
	339, 872,
	340, 872,
	341, 872,
	342, 872,
	343, 872,
	344, 872,
	345, 872,
	347, 872,
	348, 872,
	349, 872,
	352, 872,
	353, 872,
	354, 872,
	355, 872,
	356, 872,
	357, 872,
	358, 872,
	359, 872,
	360, 872,
	363, 872,
	364, 872,
	365, 872,
	366, 872,
	367, 872,
	368, 872,
	370, 872,
	371, 872,
	372, 872,
	373, 872,
	374, 872,
	375, 872,
	378, 872,
	379, 872,
	384, 872,
	385, 872,
	386, 872,
	387, 872,
	388, 872,
	389, 872,
	390, 872,
	398, 872,
	403, 872,
	404, 872,
	405, 872,
	412, 872,
	418, 872,
	-2, 0,
	-1, 171,
	1, 55,
	416, 55,
	-2, 863,
	-1, 590,
	141, 1540,
	350, 1540,
	395, 1540,
	414, 1540,
	-2, 0,
	-1, 591,
	141, 1466,
	350, 1466,
	395, 1466,
	414, 1466,
	-2, 0,
	-1, 593,
	141, 1612,
	350, 1612,
	395, 1612,
	414, 1612,
	-2, 0,
	-1, 595,
	141, 1640,
	350, 1640,
	395, 1640,
	414, 1640,
	-2, 0,
	-1, 602,
	141, 1545,
	350, 1545,
	395, 1545,
	414, 1545,
	-2, 406,
	-1, 636,
	1, 502,
	411, 502,
	413, 502,
	415, 502,
	416, 502,
	-2, 0,
	-1, 637,
	1, 570,
	138, 570,
	411, 570,
	413, 570,
	415, 570,
	416, 570,
	-2, 0,
	-1, 643,
	1, 517,
	411, 517,
	413, 517,
	415, 517,
	416, 517,
	-2, 0,
	-1, 645,
	1, 521,
	411, 521,
	413, 521,
	415, 521,
	416, 521,
	-2, 0,
	-1, 648,
	1, 532,
	411, 532,
	413, 532,
	415, 532,
	416, 532,
	-2, 0,
	-1, 649,
	1, 538,
	411, 538,
	413, 538,
	415, 538,
	416, 538,
	-2, 0,
	-1, 650,
	1, 541,
	411, 541,
	413, 541,
	415, 541,
	416, 541,
	-2, 0,
	-1, 654,
	1, 555,
	411, 555,
	413, 555,
	415, 555,
	416, 555,
	-2, 0,
	-1, 655,
	1, 557,
	411, 557,
	413, 557,
	415, 557,
	416, 557,
	-2, 0,
	-1, 681,
	126, 874,
	204, 874,
	233, 874,
	-2, 832,
	-1, 689,
	126, 873,
	204, 873,
	233, 873,
	-2, 830,
	-1, 716,
	412, 1712,
	-2, 1151,
	-1, 717,
	412, 1713,
	-2, 1152,
	-1, 748,
	412, 1424,
	-2, 1415,
	-1, 749,
	5, 1009,
	412, 1437,
	-2, 1428,
	-1, 750,
	412, 1438,
	-2, 1429,
	-1, 757,
	5, 993,
	-2, 1458,
	-1, 758,
	5, 994,
	-2, 1462,
	-1, 759,
	5, 995,
	-2, 1461,
	-1, 760,
	5, 996,
	-2, 1636,
	-1, 761,
	5, 997,
	-2, 1547,
	-1, 762,
	5, 998,
	-2, 1605,
	-1, 763,
	5, 999,
	-2, 1607,
	-1, 764,
	5, 1000,
	-2, 1608,
	-1, 765,
	5, 1001,
	-2, 1609,
	-1, 766,
	5, 1002,
	-2, 1617,
	-1, 767,
	5, 1003,
	-2, 1648,
	-1, 768,
	5, 1004,
	-2, 1517,
	-1, 769,
	5, 1005,
	-2, 1457,
	-1, 770,
	5, 1006,
	-2, 1555,
	-1, 771,
	5, 1007,
	-2, 1556,
	-1, 772,
	5, 1008,
	-2, 1521,
	-1, 773,
	5, 1055,
	412, 1055,
	-2, 1681,
	-1, 790,
	5, 1030,
	-2, 1459,
	-1, 791,
	5, 1048,
	-2, 1486,
	-1, 793,
	5, 1022,
	-2, 1504,
	-1, 794,
	5, 1023,
	-2, 1505,
	-1, 795,
	5, 1014,
	-2, 1520,
	-1, 796,
	5, 1015,
	-2, 1522,
	-1, 797,
	5, 1016,
	-2, 1523,
	-1, 798,
	5, 1017,
	-2, 1524,
	-1, 799,
	5, 981,
	-2, 1530,
	-1, 800,
	5, 982,
	-2, 1531,
	-1, 801,
	5, 1045,
	-2, 1626,
	-1, 802,
	5, 1053,
	-2, 1638,
	-1, 803,
	5, 1020,
	-2, 1662,
	-1, 804,
	5, 1047,
	-2, 1663,
	-1, 805,
	5, 1029,
	-2, 1664,
	-1, 806,
	5, 1047,
	-2, 1665,
	-1, 807,
	5, 1047,
	-2, 1666,
	-1, 808,
	5, 1012,
	-2, 1669,
	-1, 809,
	5, 1012,
	-2, 1670,
	-1, 812,
	5, 1037,
	-2, 1674,
	-1, 814,
	5, 1013,
	-2, 1679,
	-1, 815,
	5, 1018,
	-2, 1680,
	-1, 817,
	5, 1012,
	-2, 1684,
	-1, 820,
	5, 1021,
	-2, 1689,
	-1, 821,
	5, 1019,
	-2, 1691,
	-1, 823,
	5, 1049,
	-2, 1693,
	-1, 824,
	5, 1051,
	-2, 1694,
	-1, 827,
	5, 1044,
	-2, 1698,
	-1, 896,
	412, 1437,
	-2, 1428,
	-1, 913,
	277, 1412,
	405, 1412,
	-2, 1411,
	-1, 1054,
	252, 861,
	-2, 687,
	-1, 1063,
	236, 1432,
	-2, 0,
	-1, 1106,
	1, 270,
	411, 270,
	413, 270,
	415, 270,
	416, 270,
	-2, 835,
	-1, 1109,
	4, 1697,
	10, 1697,
	11, 1697,
	13, 1697,
	14, 1697,
	15, 1697,
	16, 1697,
	17, 1697,
	18, 1697,
	20, 1697,
	21, 1697,
	22, 1697,
	23, 1697,
	25, 1697,
	28, 1697,
	30, 1697,
	32, 1697,
	35, 1697,
	36, 1697,
	37, 1697,
	38, 1697,
	39, 1697,
	40, 1697,
	41, 1697,
	42, 1697,
	43, 1697,
	44, 1697,
	46, 1697,
	47, 1697,
	48, 1697,
	49, 1697,
	50, 1697,
	51, 1697,
	54, 1697,
	55, 1697,
	56, 1697,
	58, 1697,
	59, 1697,
	60, 1697,
	63, 1697,
	64, 1697,
	65, 1697,
	66, 1697,
	67, 1697,
	68, 1697,
	69, 1697,
	70, 1697,
	71, 1697,
	72, 1697,
	74, 1697,
	75, 1697,
	76, 1697,
	77, 1697,
	79, 1697,
	80, 1697,
	81, 1697,
	82, 1697,
	90, 1697,
	91, 1697,
	92, 1697,
	93, 1697,
	94, 1697,
	95, 1697,
	96, 1697,
	97, 1697,
	99, 1697,
	101, 1697,
	103, 1697,
	106, 1697,
	107, 1697,
	109, 1697,
	110, 1697,
	114, 1697,
	115, 1697,
	116, 1697,
	117, 1697,
	118, 1697,
	119, 1697,
	120, 1697,
	121, 1697,
	122, 1697,
	123, 1697,
	127, 1697,
	128, 1697,
	129, 1697,
	130, 1697,
	131, 1697,
	132, 1697,
	133, 1697,
	134, 1697,
	135, 1697,
	136, 1697,
	137, 1697,
	139, 1697,
	142, 1697,
	143, 1697,
	145, 1697,
	146, 1697,
	148, 1697,
	150, 1697,
	151, 1697,
	152, 1697,
	153, 1697,
	154, 1697,
	155, 1697,
	156, 1697,
	157, 1697,
	158, 1697,
	159, 1697,
	160, 1697,
	161, 1697,
	162, 1697,
	163, 1697,
	165, 1697,
	166, 1697,
	167, 1697,
	169, 1697,
	170, 1697,
	171, 1697,
	172, 1697,
	173, 1697,
	174, 1697,
	175, 1697,
	176, 1697,
	177, 1697,
	179, 1697,
	181, 1697,
	182, 1697,
	183, 1697,
	184, 1697,
	185, 1697,
	186, 1697,
	187, 1697,
	188, 1697,
	189, 1697,
	190, 1697,
	191, 1697,
	192, 1697,
	193, 1697,
	194, 1697,
	196, 1697,
	197, 1697,
	199, 1697,
	200, 1697,
	201, 1697,
	202, 1697,
	203, 1697,
	205, 1697,
	206, 1697,
	209, 1697,
	210, 1697,
	211, 1697,
	214, 1697,
	215, 1697,
	216, 1697,
	217, 1697,
	218, 1697,
	219, 1697,
	220, 1697,
	221, 1697,
	222, 1697,
	223, 1697,
	226, 1697,
	228, 1697,
	229, 1697,
	230, 1697,
	231, 1697,
	232, 1697,
	234, 1697,
	235, 1697,
	238, 1697,
	239, 1697,
	240, 1697,
	242, 1697,
	243, 1697,
	245, 1697,
	247, 1697,
	248, 1697,
	249, 1697,
	250, 1697,
	251, 1697,
	252, 1697,
	253, 1697,
	254, 1697,
	256, 1697,
	257, 1697,
	258, 1697,
	259, 1697,
	260, 1697,
	262, 1697,
	263, 1697,
	264, 1697,
	265, 1697,
	266, 1697,
	267, 1697,
	268, 1697,
	269, 1697,
	271, 1697,
	272, 1697,
	273, 1697,
	274, 1697,
	275, 1697,
	276, 1697,
	277, 1697,
	278, 1697,
	279, 1697,
	280, 1697,
	281, 1697,
	282, 1697,
	283, 1697,
	285, 1697,
	286, 1697,
	288, 1697,
	289, 1697,
	290, 1697,
	291, 1697,
	292, 1697,
	293, 1697,
	294, 1697,
	295, 1697,
	296, 1697,
	297, 1697,
	298, 1697,
	299, 1697,
	300, 1697,
	302, 1697,
	303, 1697,
	304, 1697,
	305, 1697,
	306, 1697,
	307, 1697,
	308, 1697,
	309, 1697,
	310, 1697,
	312, 1697,
	313, 1697,
	314, 1697,
	315, 1697,
	316, 1697,
	317, 1697,
	318, 1697,
	319, 1697,
	320, 1697,
	322, 1697,
	323, 1697,
	324, 1697,
	325, 1697,
	326, 1697,
	327, 1697,
	328, 1697,
	329, 1697,
	330, 1697,
	332, 1697,
	333, 1697,
	335, 1697,
	336, 1697,
	338, 1697,
	339, 1697,
	340, 1697,
	341, 1697,
	342, 1697,
	343, 1697,
	344, 1697,
	345, 1697,
	347, 1697,
	348, 1697,
	349, 1697,
	352, 1697,
	353, 1697,
	354, 1697,
	355, 1697,
	357, 1697,
	358, 1697,
	359, 1697,
	360, 1697,
	363, 1697,
	364, 1697,
	365, 1697,
	366, 1697,
	368, 1697,
	370, 1697,
	371, 1697,
	372, 1697,
	373, 1697,
	374, 1697,
	375, 1697,
	378, 1697,
	379, 1697,
	384, 1697,
	385, 1697,
	386, 1697,
	387, 1697,
	388, 1697,
	389, 1697,
	390, 1697,
	391, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	396, 1697,
	397, 1697,
	398, 1697,
	400, 1697,
	401, 1697,
	402, 1697,
	403, 1697,
	404, 1697,
	405, 1697,
	406, 1697,
	407, 1697,
	408, 1697,
	410, 1697,
	413, 1697,
	414, 1697,
	417, 1697,
	418, 1697,
	-2, 0,
	-1, 1127,
	141, 1612,
	350, 1612,
	395, 1612,
	414, 1612,
	-2, 0,
	-1, 1152,
	141, 1640,
	350, 1640,
	395, 1640,
	414, 1640,
	-2, 0,
	-1, 1153,
	184, 771,
	262, 771,
	266, 771,
	-2, 393,
	-1, 1229,
	126, 873,
	204, 873,
	233, 873,
	-2, 833,
	-1, 1313,
	113, 837,
	126, 837,
	178, 837,
	204, 837,
	233, 837,
	241, 837,
	361, 837,
	-2, 1192,
	-1, 1359,
	413, 1307,
	-2, 0,
	-1, 1366,
	184, 771,
	262, 771,
	266, 771,
	-2, 766,
	-1, 1395,
	413, 1307,
	-2, 0,
	-1, 1403,
	113, 837,
	126, 837,
	178, 837,
	204, 837,
	233, 837,
	241, 837,
	361, 837,
	-2, 940,
	-1, 1597,
	184, 771,
	262, 771,
	266, 771,
	-2, 395,
	-1, 1704,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1090,
	-1, 1705,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1091,
	-1, 1706,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1092,
	-1, 1707,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1093,
	-1, 1708,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1094,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1095,
	-1, 1710,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1096,
	-1, 1711,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1097,
	-1, 1723,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1109,
	-1, 1724,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1110,
	-1, 1725,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1111,
	-1, 1728,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1116,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1118,
	-1, 1736,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1122,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1123,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1124,
	-1, 1739,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1125,
	-1, 1815,
	5, 1009,
	141, 1318,
	412, 1437,
	-2, 1428,
	-1, 1816,
	141, 1319,
	-2, 1658,
	-1, 1817,
	141, 1320,
	-2, 1544,
	-1, 1818,
	141, 1321,
	-2, 1487,
	-1, 1819,
	141, 1322,
	-2, 1512,
	-1, 1820,
	141, 1323,
	-2, 1543,
	-1, 1821,
	141, 1324,
	-2, 1604,
	-1, 1889,
	413, 1307,
	-2, 0,
	-1, 1899,
	1, 941,
	79, 941,
	113, 941,
	126, 941,
	142, 941,
	147, 941,
	149, 941,
	169, 941,
	178, 941,
	187, 941,
	200, 941,
	204, 941,
	219, 941,
	233, 941,
	236, 941,
	241, 941,
	284, 941,
	286, 941,
	361, 941,
	369, 941,
	381, 941,
	382, 941,
	392, 941,
	411, 941,
	413, 941,
	415, 941,
	416, 941,
	417, 941,
	-2, 940,
	-1, 1901,
	412, 1416,
	-2, 1426,
	-1, 1980,
	413, 1375,
	417, 1375,
	-2, 1404,
	-1, 2102,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1117,
	-1, 2103,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1119,
	-1, 2108,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1120,
	-1, 2126,
	246, 1278,
	-2, 1280,
	-1, 2335,
	252, 861,
	-2, 687,
	-1, 2398,
	184, 771,
	262, 771,
	266, 771,
	-2, 392,
	-1, 2414,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1121,
	-1, 2419,
	182, 0,
	183, 0,
	226, 0,
	-2, 1139,
	-1, 2428,
	246, 1279,
	-2, 1281,
	-1, 2477,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1169,
	-1, 2478,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1170,
	-1, 2479,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1171,
	-1, 2483,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1175,
	-1, 2484,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1176,
	-1, 2485,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1177,
	-1, 2526,
	412, 1417,
	-2, 1427,
	-1, 2640,
	182, 0,
	183, 0,
	226, 0,
	-2, 1140,
	-1, 2643,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1143,
	-1, 2644,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1145,
	-1, 2789,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1144,
	-1, 2790,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1146,
	-1, 2800,
	182, 0,
	-2, 1178,
	-1, 2889,
	182, 0,
	-2, 1179,
	-1, 2987,
	38, 0,
	158, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1661,
}

const sqlPrivate = 57344

const sqlLast = 56478

var sqlAct = [...]int{

	750, 2986, 2575, 2995, 2829, 1765, 3049, 2962, 2006, 2965,
	2818, 2949, 2963, 2742, 2996, 1038, 2997, 2014, 747, 2051,
	2893, 2449, 2757, 2588, 2593, 1096, 2985, 746, 2535, 2780,
	2349, 917, 1691, 2598, 1528, 1022, 2697, 2096, 742, 1751,
	211, 2382, 2712, 2342, 2536, 211, 2805, 1060, 2384, 1232,
	2537, 2354, 211, 2003, 1982, 1978, 2243, 1393, 2344, 211,
	2675, 211, 2260, 2202, 211, 211, 724, 211, 211, 829,
	932, 789, 542, 27, 211, 2219, 1883, 2614, 1092, 2015,
	1374, 1481, 211, 1477, 1466, 1480, 1966, 926, 1486, 1489,
	1913, 2230, 2502, 1529, 1894, 521, 472, 1317, 1981, 698,
	127, 1430, 1320, 1764, 2201, 2138, 1677, 2092, 910, 1682,
	1763, 1622, 1904, 518, 1636, 2353, 1366, 1446, 2894, 1940,
	690, 2318, 733, 1478, 1790, 1411, 1452, 1375, 1772, 1413,
	1748, 2743, 882, 71, 1155, 740, 207, 1941, 1345, 1967,
	1347, 1979, 554, 1784, 1099, 919, 1875, 2008, 1985, 1896,
	1893, 1089, 1406, 1107, 1384, 864, 887, 714, 1852, 127,
	1811, 207, 1621, 211, 211, 600, 1860, 1308, 1231, 1233,
	741, 557, 1076, 1079, 201, 133, 594, 1496, 580, 206,
	134, 1365, 862, 628, 1402, 2518, 2125, 694, 2519, 1504,
	1504, 1504, 1237, 2053, 211, 211, 211, 922, 211, 211,
	935, 935, 1968, 1394, 694, 211, 211, 1502, 515, 573,
	3076, 3070, 3069, 566, 1869, 1869, 1869, 2007, 2172, 2173,
	3046, 2190, 2191, 2192, 2711, 3043, 3021, 1516, 3015, 1460,
	2711, 3014, 1869, 3011, 3008, 1869, 2639, 3012, 3009, 568,
	689, 3005, 885, 2983, 27, 1460, 2982, 1460, 2981, 704,
	1460, 2980, 1516, 2360, 2944, 1516, 2931, 2924, 2043, 2922,
	1460, 2711, 2920, 2711, 2891, 2412, 2711, 1869, 2043, 695,
	2877, 127, 1968, 2388, 2622, 2865, 2187, 929, 2860, 2711,
	2858, 2848, 1460, 2847, 2711, 1460, 2361, 1460, 2945, 2840,
	1027, 2839, 913, 1460, 2811, 2711, 2791, 2505, 1460, 2878,
	2043, 207, 2737, 682, 2035, 2733, 1869, 2710, 681, 1869,
	2642, 2711, 865, 865, 2043, 2612, 1455, 2604, 2514, 2605,
	699, 2605, 2515, 879, 1129, 2508, 903, 907, 912, 1869,
	2423, 2373, 2216, 2167, 1869, 2323, 1869, 1869, 1460, 2166,
	1516, 915, 2331, 1869, 2178, 2160, 866, 2159, 2062, 2161,
	2129, 1869, 1869, 168, 1248, 1249, 2130, 1281, 1282, 1283,
	1291, 1292, 1293, 1869, 2042, 2031, 1974, 1868, 2043, 1869,
	1460, 1869, 1284, 1520, 1460, 1862, 1138, 1521, 2505, 1251,
	2137, 868, 1297, 869, 1861, 1600, 2622, 1956, 1902, 170,
	2193, 1130, 2490, 2425, 2323, 2095, 2073, 1370, 1767, 1025,
	171, 1126, 1125, 1124, 1250, 2362, 168, 1619, 1123, 1122,
	1121, 1120, 1270, 1119, 1118, 1117, 1116, 1115, 2188, 1267,
	1505, 1505, 1505, 1114, 2363, 2690, 169, 1248, 1249, 1113,
	1112, 1111, 1110, 870, 867, 162, 688, 687, 1248, 1249,
	686, 685, 170, 163, 684, 680, 679, 678, 677, 676,
	2172, 2173, 1251, 675, 674, 673, 672, 671, 670, 666,
	665, 664, 626, 1251, 135, 625, 624, 1318, 623, 622,
	621, 1273, 1274, 1275, 1276, 620, 1787, 1250, 619, 169,
	1256, 211, 211, 618, 211, 922, 922, 211, 1250, 617,
	211, 616, 615, 211, 614, 613, 612, 611, 610, 211,
	609, 2189, 1288, 1298, 608, 1278, 1279, 1280, 748, 211,
	211, 211, 211, 211, 922, 922, 607, 135, 606, 605,
	1892, 922, 604, 1248, 1249, 589, 1294, 1295, 588, 1291,
	1292, 1293, 587, 1788, 1265, 1266, 1248, 1249, 586, 585,
	1100, 584, 506, 2172, 2173, 505, 478, 1286, 1251, 1130,
	477, 1297, 211, 1256, 1271, 1512, 1503, 1661, 476, 466,
	2649, 1251, 2360, 211, 1256, 465, 464, 191, 190, 189,
	1296, 188, 187, 1250, 1248, 1249, 2178, 1065, 186, 185,
	1053, 1270, 184, 211, 1285, 183, 1250, 182, 181, 1278,
	1279, 1280, 1050, 180, 211, 1789, 1786, 179, 178, 1251,
	1093, 2184, 2185, 2186, 177, 176, 175, 174, 2183, 2181,
	2182, 2174, 2175, 2176, 2177, 2179, 2180, 173, 1460, 172,
	1277, 2606, 1401, 2523, 1250, 2256, 2135, 2084, 1975, 1054,
	1057, 1078, 1270, 922, 1970, 1625, 1803, 1272, 1271, 1410,
	1273, 1274, 1275, 1276, 1244, 739, 1801, 1799, 1797, 1256,
	2188, 1861, 1130, 1324, 695, 1169, 1040, 1029, 3002, 2984,
	1289, 2967, 1256, 2956, 2885, 2881, 1108, 2879, 211, 2178,
	2861, 1288, 1298, 2774, 1278, 1279, 1280, 2765, 2674, 891,
	2673, 1791, 2828, 1083, 1086, 2672, 2665, 1278, 1279, 1280,
	2661, 1273, 1274, 1275, 1276, 2660, 2659, 2655, 2654, 2653,
	1256, 2652, 2645, 2621, 2172, 2173, 2011, 2190, 2191, 2192,
	1163, 2619, 1153, 2522, 1167, 2499, 1286, 2498, 2497, 2435,
	2322, 1272, 2638, 1271, 2255, 1278, 1279, 1280, 1315, 2172,
	2173, 2246, 2326, 2189, 1287, 2212, 1271, 1262, 1263, 1269,
	1268, 1264, 1290, 2188, 1261, 1259, 1260, 1252, 1253, 1254,
	1255, 1257, 1258, 2200, 2171, 2168, 2165, 878, 2164, 2162,
	2143, 2662, 2187, 2142, 2126, 1899, 1244, 1328, 1759, 1785,
	1150, 1525, 1243, 1321, 1271, 1311, 1464, 1177, 3074, 697,
	3057, 3056, 1039, 1463, 2451, 2975, 2970, 1229, 2926, 1277,
	2917, 2916, 2912, 2048, 2911, 2905, 549, 2902, 2876, 2875,
	1228, 1753, 1230, 1620, 1942, 2824, 1272, 39, 2802, 2752,
	2747, 2745, 2091, 1170, 2732, 2716, 883, 2670, 2623, 1272,
	2591, 43, 1254, 1255, 1257, 1258, 2189, 2582, 2581, 1289,
	2178, 1252, 1253, 1254, 1255, 1257, 1258, 2579, 2556, 2555,
	1277, 2181, 2182, 2174, 2175, 2176, 2177, 2179, 2180, 548,
	2545, 2544, 2377, 2764, 2510, 2178, 695, 1272, 2418, 211,
	2379, 2307, 2291, 2270, 211, 2269, 2215, 2172, 2173, 2199,
	2152, 2151, 2896, 2236, 682, 2148, 2193, 2122, 550, 681,
	2117, 1372, 1348, 1381, 1245, 1240, 1241, 58, 552, 1760,
	1353, 211, 59, 2050, 1889, 1880, 1867, 1248, 1249, 1795,
	1472, 1335, 1334, 1287, 2188, 1333, 1332, 1395, 1373, 168,
	1364, 1290, 1363, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 1251, 1359, 61, 2187, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 2182, 2174, 2175, 2176, 2177,
	2179, 2180, 1358, 1343, 1357, 170, 1346, 1250, 1355, 1354,
	1349, 1351, 1350, 1378, 1379, 1341, 1397, 1340, 1356, 1339,
	885, 1338, 1337, 1336, 1261, 1259, 1260, 1252, 1253, 1254,
	1255, 1257, 1258, 1325, 1312, 1311, 2045, 1149, 1134, 1391,
	2270, 127, 169, 1104, 2773, 2647, 2618, 2189, 2517, 2513,
	2128, 162, 1881, 2178, 1321, 1392, 2172, 2173, 2375, 163,
	1309, 1425, 1407, 2061, 2345, 2770, 2625, 2624, 2520, 1968,
	1361, 2172, 2173, 865, 1401, 1144, 1362, 1166, 2854, 2311,
	2010, 2306, 695, 1619, 62, 922, 211, 2302, 2290, 2207,
	935, 1367, 1606, 1360, 1429, 1419, 2206, 1369, 2205, 1226,
	211, 935, 211, 211, 2101, 1404, 1371, 1802, 2060, 1593,
	211, 136, 64, 2882, 65, 2880, 1162, 1800, 1798, 1796,
	1473, 1453, 1619, 2554, 211, 211, 1330, 2188, 2053, 1482,
	1400, 211, 168, 211, 1338, 211, 1485, 2806, 168, 211,
	2405, 1338, 860, 551, 2390, 2301, 107, 2184, 2185, 2186,
	2172, 2173, 2827, 1619, 2183, 2181, 2182, 2174, 2175, 2176,
	2177, 2179, 2180, 1442, 2007, 1526, 2453, 1773, 170, 3003,
	1519, 2133, 1344, 3013, 170, 861, 3010, 1220, 2356, 2531,
	2959, 1787, 207, 2589, 2176, 2177, 2179, 2180, 211, 211,
	211, 211, 1944, 2036, 196, 514, 922, 2178, 211, 211,
	2930, 1174, 211, 211, 3036, 169, 207, 1493, 211, 2400,
	2189, 169, 1218, 1491, 162, 1595, 485, 3004, 2724, 854,
	162, 1583, 163, 1915, 495, 1469, 2063, 877, 163, 1458,
	935, 3037, 1205, 1534, 1327, 1206, 3073, 2853, 1788, 1426,
	211, 2852, 1607, 135, 2850, 211, 2849, 2569, 211, 135,
	1646, 211, 1219, 211, 2564, 211, 2563, 211, 2741, 211,
	2528, 1615, 2527, 1078, 1553, 1459, 1423, 1906, 2147, 211,
	2146, 211, 2145, 852, 1523, 513, 2178, 2144, 2559, 211,
	211, 211, 2104, 1585, 1476, 207, 1164, 1424, 1500, 1587,
	2034, 693, 1993, 496, 207, 1961, 484, 1847, 1955, 850,
	1789, 1786, 1414, 1495, 847, 1415, 1918, 211, 1951, 856,
	1932, 935, 1498, 1735, 1368, 1024, 2376, 2183, 2181, 2182,
	2174, 2175, 2176, 2177, 2179, 2180, 1846, 1653, 1845, 1597,
	1531, 1165, 1693, 2004, 1140, 1658, 668, 1172, 563, 2929,
	2884, 2403, 2574, 1664, 207, 1965, 1659, 1534, 1534, 1407,
	2188, 1507, 1627, 2831, 1509, 1258, 692, 1511, 1750, 1973,
	1618, 1514, 1524, 1522, 1150, 1906, 2172, 2173, 1925, 1757,
	579, 2066, 1584, 1594, 1755, 1750, 1905, 1053, 1553, 1553,
	578, 1042, 1315, 2068, 1632, 935, 1791, 1416, 1623, 1655,
	1204, 1777, 1247, 1611, 1201, 2978, 1148, 579, 1791, 1924,
	1418, 1499, 1683, 1690, 2445, 1629, 2351, 1809, 3028, 2941,
	2093, 2094, 2352, 2069, 2298, 2046, 1814, 1814, 2293, 694,
	1825, 1827, 1635, 1832, 1141, 2067, 1441, 1917, 1427, 211,
	1855, 211, 2908, 2189, 2401, 3027, 2942, 3059, 1342, 1859,
	1143, 1202, 1421, 1773, 1531, 1531, 1420, 2565, 1995, 2547,
	1952, 2786, 1217, 891, 2180, 935, 2856, 891, 1504, 1662,
	2351, 211, 1663, 211, 2174, 2175, 2176, 2177, 2179, 2180,
	211, 935, 1681, 682, 1785, 211, 682, 682, 1673, 1620,
	1942, 1674, 1675, 211, 1770, 1768, 1225, 498, 497, 211,
	1791, 2797, 2178, 2282, 3036, 1660, 2442, 1306, 1948, 2150,
	1421, 211, 1444, 2399, 922, 695, 1810, 1876, 1657, 1897,
	695, 694, 1180, 1248, 1249, 211, 935, 885, 1620, 1942,
	2627, 211, 2999, 1844, 1758, 1911, 2310, 2281, 1916, 1907,
	1534, 1421, 2613, 211, 1139, 1761, 211, 885, 1251, 691,
	2183, 2181, 2182, 2174, 2175, 2176, 2177, 2179, 2180, 1620,
	1942, 1383, 2634, 3052, 2998, 2557, 3026, 1929, 2443, 1887,
	211, 1553, 211, 1250, 211, 467, 2188, 211, 1173, 211,
	848, 211, 1822, 211, 211, 1189, 211, 922, 922, 922,
	865, 1958, 922, 1911, 507, 1935, 1857, 211, 1919, 1921,
	1396, 1934, 1963, 1962, 883, 1877, 1878, 913, 1872, 695,
	1645, 1873, 479, 2029, 2030, 1865, 1866, 1856, 2832, 1949,
	2018, 1471, 3035, 1898, 1387, 1927, 1943, 1945, 1946, 1947,
	1992, 1933, 1404, 1910, 848, 658, 192, 1531, 197, 2009,
	3000, 2009, 1449, 1950, 1214, 3033, 2756, 1911, 1882, 1256,
	1934, 1390, 1890, 1891, 1791, 703, 1834, 211, 1953, 2189,
	849, 2025, 1417, 1903, 2548, 848, 1041, 858, 2106, 1385,
	857, 2754, 1445, 2027, 2001, 734, 1756, 1414, 3060, 1142,
	1415, 669, 1388, 562, 512, 1749, 2782, 1999, 1610, 1609,
	127, 1619, 1616, 2038, 1475, 1732, 935, 127, 211, 1505,
	1380, 1386, 489, 1137, 2032, 211, 1631, 3001, 211, 1128,
	198, 475, 1236, 1246, 2787, 208, 2013, 1147, 2232, 2315,
	473, 2020, 1215, 659, 1457, 482, 197, 491, 211, 211,
	211, 2028, 211, 3050, 517, 2026, 558, 1108, 2037, 517,
	208, 2842, 558, 576, 2056, 2033, 2057, 2899, 2047, 583,
	2022, 211, 2023, 2841, 2024, 2822, 511, 603, 468, 2708,
	1414, 2049, 1416, 1415, 2319, 2114, 2486, 3065, 1389, 2174,
	2175, 2176, 2177, 2179, 2180, 1418, 1421, 2781, 2668, 1349,
	2530, 1356, 1613, 1181, 2705, 2112, 1216, 2698, 1346, 2078,
	2284, 488, 2079, 2052, 3051, 2266, 1387, 200, 198, 2055,
	2696, 2262, 1451, 2002, 2064, 2700, 2000, 2086, 1494, 1159,
	2286, 199, 2720, 127, 1484, 1730, 1733, 127, 1483, 1187,
	1450, 1420, 1479, 1390, 3053, 2706, 1474, 2081, 2244, 2120,
	1182, 2083, 1598, 1179, 2441, 2950, 2123, 469, 517, 517,
	1669, 1874, 203, 2107, 1650, 1416, 897, 1447, 195, 660,
	2285, 2231, 2699, 1601, 1388, 2140, 2141, 2594, 1418, 1235,
	1729, 2758, 2823, 1554, 2088, 2723, 1628, 2783, 1448, 473,
	473, 473, 2722, 927, 473, 1154, 2090, 2109, 2272, 514,
	208, 1028, 470, 193, 1936, 200, 2487, 1160, 2110, 1235,
	1614, 1161, 2115, 2488, 509, 2271, 3064, 485, 2099, 199,
	2233, 571, 1871, 1870, 1420, 2669, 1421, 1977, 565, 708,
	1976, 2245, 483, 196, 692, 2198, 1252, 1253, 1254, 1255,
	1257, 1258, 1605, 194, 2576, 1855, 1855, 1855, 1670, 510,
	2214, 1075, 2288, 2105, 935, 481, 195, 1234, 2719, 2217,
	1389, 1073, 661, 2226, 2224, 2225, 2324, 480, 547, 35,
	211, 2701, 1064, 211, 2702, 1063, 512, 695, 3040, 513,
	2744, 211, 211, 935, 891, 3, 211, 1234, 2136, 508,
	2132, 193, 490, 1731, 211, 211, 211, 484, 662, 2314,
	211, 1603, 2253, 211, 891, 2676, 2320, 486, 2704, 1421,
	211, 211, 211, 211, 211, 1604, 1236, 2707, 2721, 546,
	34, 196, 2820, 211, 885, 2503, 1937, 1938, 545, 31,
	211, 194, 885, 885, 1159, 1412, 885, 2111, 544, 77,
	1534, 1794, 211, 922, 2113, 2259, 211, 1417, 511, 2753,
	1911, 3042, 935, 2821, 2263, 2801, 211, 2667, 1211, 2573,
	2273, 935, 2276, 695, 2235, 2268, 935, 1026, 2238, 2203,
	2292, 1553, 2241, 2274, 846, 2278, 2279, 1159, 211, 2218,
	211, 1209, 211, 2247, 1199, 211, 922, 922, 922, 1197,
	211, 2289, 211, 2417, 1195, 2267, 211, 1886, 2209, 2210,
	2211, 211, 2163, 211, 570, 2221, 2116, 1620, 1617, 2703,
	211, 564, 1160, 2228, 2229, 2054, 1161, 2234, 543, 76,
	2305, 883, 2257, 2240, 1419, 211, 2392, 922, 2308, 1074,
	1417, 2249, 2250, 2303, 2358, 2252, 1960, 1531, 1053, 1072,
	35, 883, 1193, 2287, 211, 211, 540, 22, 1931, 1419,
	2299, 2355, 2294, 2329, 2295, 1160, 2239, 901, 2296, 1161,
	2355, 2337, 2381, 2297, 541, 23, 2325, 1465, 1224, 2328,
	2309, 514, 1534, 2304, 2254, 211, 473, 1048, 1453, 473,
	1191, 1053, 473, 2346, 1453, 927, 509, 2300, 1068, 2321,
	211, 34, 1185, 2333, 473, 1071, 504, 1210, 2395, 2708,
	31, 539, 29, 1553, 473, 473, 473, 473, 927, 2370,
	77, 538, 20, 1223, 1135, 851, 853, 2347, 499, 2204,
	1208, 510, 1637, 1198, 2705, 2364, 935, 2374, 1196, 2387,
	2334, 2335, 2336, 1194, 695, 2082, 2076, 701, 2380, 658,
	2058, 211, 2420, 1647, 1586, 1383, 1534, 603, 536, 19,
	1331, 513, 2357, 537, 18, 526, 15, 1793, 473, 703,
	2994, 508, 2396, 2397, 1644, 2706, 527, 16, 2571, 1531,
	2398, 2372, 127, 535, 56, 2402, 1456, 1553, 1145, 2947,
	489, 1192, 2404, 1534, 1534, 2394, 2406, 2408, 2694, 603,
	76, 2552, 2410, 702, 2550, 534, 55, 933, 1023, 2391,
	2529, 1534, 1534, 482, 1049, 525, 54, 2870, 1387, 2500,
	2341, 2339, 2005, 1997, 1553, 1553, 2424, 1996, 22, 1190,
	2365, 2366, 2367, 2429, 2368, 2369, 2426, 659, 533, 12,
	211, 1184, 1553, 1553, 1070, 1390, 23, 1534, 1683, 2457,
	1994, 1991, 1518, 1531, 1517, 211, 1515, 935, 2454, 2461,
	2437, 2438, 2439, 1385, 2456, 2492, 1683, 2466, 2524, 2450,
	2444, 2446, 2447, 473, 2463, 1513, 1388, 1510, 1553, 488,
	1508, 2393, 2465, 29, 1506, 1454, 524, 49, 1443, 2542,
	1531, 1531, 1440, 20, 1171, 1386, 658, 2562, 2541, 531,
	46, 2701, 2496, 2491, 2702, 885, 2504, 2493, 1531, 1531,
	1643, 2501, 1428, 2568, 1422, 127, 703, 2506, 2507, 532,
	47, 2509, 2430, 2343, 211, 211, 1238, 211, 523, 48,
	19, 3037, 211, 2572, 874, 18, 2097, 15, 2704, 2772,
	935, 2771, 935, 1624, 1531, 922, 2583, 2707, 16, 2525,
	2615, 530, 7, 529, 6, 56, 875, 2560, 2872, 2533,
	500, 211, 1389, 660, 528, 37, 522, 36, 2607, 2566,
	1923, 891, 2603, 2567, 1911, 2739, 2596, 55, 2570, 891,
	891, 2600, 1964, 891, 659, 485, 2512, 54, 1959, 211,
	2516, 1954, 935, 211, 211, 935, 211, 2599, 1906, 1934,
	483, 2558, 2595, 2059, 211, 2098, 1239, 501, 1930, 1922,
	12, 2018, 553, 935, 2578, 2580, 2590, 2586, 2592, 2585,
	2910, 2587, 2577, 481, 1591, 1592, 2713, 1906, 2597, 1183,
	2631, 2521, 2601, 885, 2887, 480, 876, 2609, 1920, 2703,
	2608, 2677, 1939, 502, 1926, 503, 1242, 1957, 1471, 2636,
	1928, 2616, 211, 2641, 700, 2946, 661, 1534, 49, 2750,
	490, 2012, 2628, 1998, 583, 484, 1990, 1858, 1596, 517,
	1527, 46, 3048, 2626, 2632, 486, 2371, 2620, 3063, 572,
	2629, 1248, 1249, 1318, 2551, 2617, 2553, 2448, 1553, 2637,
	1399, 47, 662, 2378, 897, 2071, 473, 1248, 1249, 2072,
	48, 2172, 2173, 1248, 1249, 1824, 1251, 1783, 883, 2650,
	660, 211, 2071, 2070, 2221, 1213, 883, 883, 1212, 2440,
	883, 935, 211, 7, 935, 6, 1328, 2666, 211, 211,
	211, 1250, 1176, 1326, 2768, 2332, 37, 1175, 36, 2611,
	1222, 1221, 1207, 1203, 1200, 1186, 211, 1250, 1146, 1599,
	859, 211, 667, 211, 1531, 2830, 211, 211, 211, 211,
	211, 2280, 1188, 2542, 211, 211, 922, 2679, 2680, 2237,
	935, 2682, 2541, 2717, 922, 2684, 1879, 885, 2691, 2940,
	1911, 2714, 211, 211, 2693, 2656, 2149, 2892, 2796, 1792,
	1329, 2692, 52, 2538, 727, 2681, 922, 2685, 2542, 2740,
	2695, 2725, 2532, 661, 1984, 2751, 211, 2541, 2746, 2730,
	2542, 2734, 1983, 2683, 938, 2726, 1608, 751, 1813, 2541,
	2755, 1684, 2731, 211, 211, 922, 922, 2760, 753, 2762,
	2718, 208, 1532, 1911, 756, 755, 754, 1533, 2749, 662,
	2727, 2728, 1352, 2785, 752, 1028, 2738, 473, 1470, 1530,
	935, 2761, 1105, 2759, 2016, 208, 2355, 2767, 2678, 646,
	1612, 1053, 1754, 1771, 2131, 2776, 2748, 1322, 719, 1490,
	1490, 2775, 2687, 2735, 731, 2788, 473, 2766, 473, 730,
	473, 1769, 1133, 2808, 517, 718, 2242, 2350, 2763, 211,
	1668, 935, 2089, 1665, 2549, 211, 487, 211, 2169, 935,
	211, 1103, 1841, 1833, 1829, 2803, 1227, 2688, 211, 1534,
	2736, 1307, 2017, 1168, 935, 2359, 2044, 2077, 1676, 873,
	872, 871, 2838, 2964, 2961, 2784, 2809, 2810, 2769, 1602,
	2542, 2817, 2065, 603, 208, 1028, 558, 1300, 2851, 2541,
	1553, 723, 891, 208, 1028, 1911, 2835, 927, 473, 2815,
	2834, 2222, 2836, 603, 2327, 211, 2833, 211, 1046, 2816,
	922, 1299, 855, 1534, 2542, 211, 2542, 2901, 1158, 2777,
	2778, 2542, 2795, 2541, 2857, 2541, 2859, 1157, 1156, 891,
	2541, 2863, 2265, 3058, 2813, 603, 2909, 935, 2546, 2958,
	473, 2868, 167, 208, 1553, 164, 473, 166, 473, 891,
	473, 165, 473, 2873, 473, 2869, 1531, 211, 2855, 2313,
	2874, 891, 80, 211, 1648, 891, 1649, 2867, 2844, 2599,
	891, 211, 2883, 2862, 473, 473, 473, 33, 32, 106,
	105, 2898, 2904, 104, 103, 102, 101, 2890, 100, 2814,
	99, 1534, 98, 97, 96, 95, 94, 93, 92, 2871,
	211, 211, 603, 2897, 91, 90, 89, 211, 88, 87,
	1531, 86, 85, 2921, 2923, 84, 83, 2812, 922, 82,
	891, 599, 1553, 211, 212, 596, 922, 922, 79, 883,
	2906, 211, 78, 211, 30, 211, 25, 110, 2925, 111,
	24, 75, 74, 2943, 2928, 28, 17, 11, 21, 2927,
	2913, 2934, 2935, 211, 2933, 132, 211, 131, 2936, 211,
	130, 935, 129, 2914, 128, 14, 2543, 2886, 2953, 13,
	125, 2918, 2968, 2969, 2971, 2966, 126, 2972, 124, 2974,
	123, 122, 121, 2845, 2846, 2932, 2561, 2973, 1531, 120,
	2979, 10, 8, 2960, 2955, 2542, 211, 109, 2561, 9,
	2779, 2977, 2561, 2389, 2541, 2976, 68, 2561, 69, 2907,
	26, 42, 41, 2895, 40, 2937, 2992, 2938, 2993, 2991,
	108, 211, 2915, 3006, 583, 3018, 517, 3019, 158, 211,
	1431, 157, 156, 155, 152, 3017, 154, 151, 153, 3025,
	2954, 897, 150, 119, 2542, 211, 3022, 1435, 160, 159,
	3023, 3024, 148, 2541, 3020, 3031, 517, 883, 517, 146,
	1746, 897, 3034, 3032, 891, 473, 147, 3039, 3038, 149,
	1914, 145, 3041, 144, 161, 2966, 118, 117, 473, 2018,
	1744, 3047, 3044, 3045, 473, 116, 115, 1461, 1432, 114,
	113, 5, 3055, 549, 3054, 2, 473, 1, 1467, 0,
	3062, 3061, 0, 891, 39, 3016, 0, 0, 0, 0,
	473, 0, 3066, 3067, 3068, 0, 1969, 0, 43, 0,
	0, 923, 0, 0, 936, 936, 1672, 0, 1980, 0,
	3075, 1028, 3071, 3072, 0, 0, 0, 0, 891, 0,
	3077, 0, 0, 0, 0, 0, 548, 0, 0, 0,
	891, 0, 1436, 0, 0, 1914, 0, 517, 0, 473,
	0, 0, 473, 0, 473, 0, 473, 0, 473, 473,
	0, 927, 1740, 0, 0, 550, 0, 0, 0, 0,
	1741, 0, 1914, 1742, 58, 552, 0, 1747, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 1438, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 61, 0, 0, 0, 0, 0, 1626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2543, 0, 558, 0, 0, 0, 1434, 0, 1835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 2543, 0, 0, 0, 0,
	0, 0, 0, 473, 0, 0, 0, 2543, 0, 889,
	1028, 0, 0, 1028, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 891, 0, 891, 0, 1692, 0,
	0, 891, 1743, 473, 473, 473, 0, 473, 0, 1745,
	0, 62, 1439, 0, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 471, 0, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 64,
	0, 65, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 0, 549, 0, 0, 0, 2080, 0, 0,
	551, 0, 1774, 107, 39, 2118, 2119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 1382, 0, 0, 0, 170, 0, 2543, 0, 923,
	923, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2561, 923, 923,
	0, 2543, 169, 2543, 0, 923, 0, 0, 2543, 0,
	0, 162, 0, 0, 0, 550, 0, 0, 0, 163,
	0, 0, 0, 0, 58, 552, 0, 0, 1901, 59,
	0, 0, 0, 2195, 2196, 2197, 0, 0, 0, 0,
	135, 0, 0, 905, 0, 891, 0, 0, 931, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 39, 0, 0, 0, 0, 0, 2172, 2173,
	0, 2190, 2191, 2192, 0, 0, 43, 0, 897, 0,
	0, 924, 0, 0, 937, 937, 897, 897, 0, 0,
	897, 0, 0, 0, 891, 517, 0, 0, 517, 706,
	0, 0, 0, 0, 548, 0, 517, 517, 0, 0,
	2561, 517, 0, 0, 0, 0, 0, 923, 0, 473,
	1914, 2261, 0, 0, 0, 1914, 2187, 0, 2261, 0,
	0, 0, 0, 550, 0, 1914, 2261, 1914, 2261, 2261,
	0, 0, 58, 552, 0, 0, 0, 59, 473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 473, 0, 0,
	0, 927, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 473, 2543, 0, 0, 0, 0, 0, 136, 64,
	0, 65, 0, 0, 2178, 0, 0, 0, 1835, 1835,
	0, 0, 0, 1490, 0, 1490, 0, 473, 0, 168,
	473, 0, 0, 0, 0, 473, 0, 473, 0, 0,
	551, 927, 0, 107, 0, 0, 1914, 0, 517, 0,
	0, 2543, 0, 0, 0, 1914, 0, 0, 0, 0,
	2193, 0, 0, 2074, 0, 170, 0, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2188, 2385,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 169, 0, 0, 0, 1835, 1835, 1835, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 163,
	2407, 0, 2415, 2416, 0, 0, 136, 64, 0, 65,
	0, 0, 0, 0, 0, 473, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	1044, 0, 0, 0, 0, 0, 1062, 0, 551, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2189, 0, 0, 0, 0, 0, 0, 1082, 1082,
	1082, 931, 0, 170, 0, 0, 2452, 0, 0, 924,
	924, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475,
	2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485,
	0, 2489, 0, 0, 0, 0, 0, 0, 924, 924,
	169, 0, 0, 0, 0, 924, 0, 0, 0, 162,
	0, 0, 1131, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 1032, 1035, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 2184, 2185, 2186, 0, 517, 0, 0, 2183, 2181,
	2182, 2174, 2175, 2176, 2177, 2179, 2180, 0, 0, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2223, 0, 0, 0, 0, 2540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1399, 0, 0, 923,
	2251, 0, 0, 0, 936, 0, 0, 924, 1399, 0,
	0, 0, 1399, 0, 0, 936, 1132, 1399, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 1914,
	1490, 0, 1490, 0, 0, 0, 0, 473, 0, 0,
	0, 0, 0, 0, 0, 1835, 1835, 0, 0, 0,
	706, 0, 0, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 0, 0, 1914, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2317, 0,
	0, 0, 0, 2317, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 1028, 0, 0, 39, 927, 473,
	0, 473, 0, 0, 0, 0, 0, 0, 0, 473,
	923, 43, 0, 0, 1835, 1835, 1835, 1835, 1835, 1835,
	1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
	1835, 1835, 1835, 0, 1835, 0, 0, 0, 0, 548,
	0, 0, 0, 0, 936, 0, 0, 0, 728, 72,
	0, 0, 0, 0, 0, 0, 0, 2657, 0, 0,
	0, 1301, 1302, 1303, 1304, 1305, 0, 0, 550, 0,
	0, 0, 0, 0, 1314, 0, 0, 58, 552, 0,
	0, 0, 59, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 897, 0, 0, 61, 0, 1028, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 517, 0, 0,
	1408, 0, 0, 1914, 2261, 1914, 0, 0, 0, 0,
	0, 0, 0, 2433, 0, 0, 0, 0, 0, 0,
	2540, 1028, 0, 0, 0, 0, 1914, 0, 2261, 0,
	0, 1028, 1028, 473, 1914, 2261, 0, 0, 0, 473,
	473, 0, 0, 0, 0, 0, 683, 0, 0, 0,
	0, 0, 0, 0, 696, 2540, 0, 1028, 1980, 0,
	0, 0, 2039, 0, 0, 0, 0, 2540, 0, 936,
	0, 0, 0, 39, 0, 0, 0, 0, 0, 0,
	0, 1914, 0, 0, 62, 0, 0, 43, 0, 886,
	72, 0, 0, 1376, 1376, 1376, 0, 0, 2385, 2385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 64, 0, 65, 2040, 0, 0, 0, 0,
	0, 0, 0, 0, 2800, 0, 0, 0, 0, 0,
	0, 0, 168, 0, 2526, 0, 0, 0, 0, 936,
	0, 0, 0, 551, 2041, 0, 107, 0, 0, 0,
	0, 1468, 0, 0, 552, 936, 0, 0, 0, 0,
	0, 0, 0, 2825, 517, 0, 0, 0, 170, 924,
	1914, 0, 2261, 0, 937, 2819, 0, 0, 0, 0,
	0, 0, 1497, 473, 1497, 937, 0, 2540, 923, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 1399, 0, 0,
	0, 2540, 163, 2540, 0, 0, 0, 0, 2540, 0,
	473, 0, 473, 0, 0, 0, 0, 0, 0, 0,
	1028, 0, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 1589, 0, 0, 0, 0, 0, 2889, 0,
	0, 923, 923, 923, 0, 0, 923, 0, 0, 933,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 2452, 0, 0, 0, 0, 0, 517, 0,
	62, 0, 0, 0, 1633, 0, 2819, 0, 0, 0,
	1638, 0, 1639, 0, 1640, 0, 1641, 0, 1642, 0,
	0, 0, 0, 0, 937, 0, 0, 136, 64, 0,
	65, 0, 0, 0, 0, 1914, 2261, 0, 1651, 1062,
	1399, 0, 473, 0, 0, 0, 0, 0, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2261, 551,
	0, 0, 107, 0, 0, 0, 1028, 0, 1028, 0,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 0, 170, 0, 0, 1835, 2951, 0,
	0, 1028, 0, 0, 473, 0, 706, 706, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 2689, 2540, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 0, 0, 1835, 0, 0, 0,
	162, 2452, 0, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 0, 1028, 0, 0, 135,
	0, 2540, 0, 0, 1914, 0, 1666, 0, 1671, 0,
	0, 0, 0, 0, 1678, 0, 0, 0, 0, 937,
	2819, 0, 0, 0, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 0,
	1734, 1835, 1736, 1737, 1738, 1739, 0, 0, 0, 1900,
	0, 0, 0, 0, 0, 2172, 2173, 2793, 2190, 2191,
	2192, 1762, 0, 0, 0, 0, 0, 0, 1314, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2172,
	2173, 0, 2190, 2191, 2192, 937, 0, 0, 1804, 1805,
	1806, 1807, 1808, 0, 931, 0, 0, 2422, 2793, 0,
	0, 0, 0, 0, 0, 0, 1692, 0, 0, 1831,
	0, 1843, 0, 2187, 0, 1848, 1853, 0, 924, 0,
	0, 1692, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 0, 2187, 936, 0,
	0, 0, 0, 2021, 0, 0, 1082, 683, 1082, 0,
	1082, 0, 931, 931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 1310,
	0, 1313, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 2178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 924, 924, 924, 1023, 0, 924, 0, 0, 0,
	0, 0, 0, 0, 0, 2178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1971, 1972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	936, 2193, 0, 0, 0, 2188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2075, 0, 0,
	923, 923, 923, 0, 0, 0, 0, 0, 0, 2188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2085, 931, 2087,
	937, 0, 0, 1248, 1249, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 0, 1692, 0,
	2100, 0, 0, 0, 0, 0, 0, 0, 1251, 0,
	72, 0, 0, 1398, 0, 0, 0, 1403, 2189, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 0,
	0, 0, 0, 1250, 0, 0, 0, 0, 1284, 0,
	0, 0, 2189, 0, 0, 1251, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2172, 2173,
	0, 2190, 2191, 2192, 0, 0, 0, 0, 0, 0,
	1250, 0, 0, 0, 0, 0, 2421, 0, 1270, 0,
	0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 2187, 0, 2184, 2185,
	2186, 0, 0, 0, 0, 2183, 2181, 2182, 2174, 2175,
	2176, 2177, 2179, 2180, 1278, 1279, 1280, 1273, 1274, 1275,
	1276, 0, 2184, 2185, 2186, 0, 1256, 0, 0, 2183,
	2181, 2182, 2174, 2175, 2176, 2177, 2179, 2180, 0, 0,
	0, 2102, 2103, 0, 0, 0, 0, 2108, 1288, 1298,
	0, 1278, 1279, 1280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 2178, 0, 2121, 0, 0, 0,
	0, 0, 1294, 1295, 0, 0, 0, 0, 0, 2127,
	1265, 1266, 0, 0, 0, 2134, 0, 0, 0, 0,
	2139, 936, 0, 1286, 0, 0, 0, 0, 937, 0,
	1271, 0, 0, 2258, 0, 0, 0, 2153, 0, 0,
	2193, 0, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	1285, 0, 1062, 0, 0, 0, 0, 0, 2188, 0,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1853, 1853, 1853, 0, 2312, 1277, 0, 0, 0,
	0, 0, 0, 1376, 936, 0, 936, 0, 0, 923,
	0, 2227, 0, 1272, 0, 0, 0, 924, 0, 0,
	0, 2330, 0, 0, 0, 0, 937, 0, 0, 2338,
	0, 2340, 0, 0, 0, 937, 1289, 0, 0, 0,
	937, 0, 0, 0, 0, 2172, 2173, 0, 2190, 2191,
	2192, 2189, 0, 0, 0, 0, 936, 0, 0, 936,
	924, 924, 924, 0, 0, 0, 0, 2283, 0, 1248,
	1249, 0, 0, 0, 0, 0, 683, 936, 0, 683,
	683, 0, 0, 0, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 1251, 0, 0, 0, 0, 0,
	0, 924, 0, 2187, 0, 0, 0, 0, 0, 0,
	1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290, 1250,
	1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 2411,
	0, 0, 0, 2952, 0, 0, 0, 1752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2348,
	696, 2184, 2185, 2186, 0, 1313, 0, 0, 2183, 2181,
	2182, 2174, 2175, 2176, 2177, 2179, 2180, 0, 0, 0,
	0, 2178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 936, 0,
	0, 0, 0, 0, 2194, 1256, 0, 0, 0, 0,
	937, 0, 706, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 2193, 0, 0,
	1278, 1279, 1280, 0, 886, 0, 0, 0, 0, 0,
	923, 0, 0, 2409, 936, 0, 0, 1678, 923, 0,
	0, 0, 0, 2413, 1403, 2188, 2414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2419, 0,
	923, 0, 0, 72, 0, 0, 0, 2427, 0, 1271,
	0, 0, 0, 0, 0, 2431, 0, 0, 0, 2227,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 923,
	923, 0, 0, 0, 0, 0, 0, 0, 2458, 2459,
	2460, 0, 0, 0, 0, 2462, 0, 0, 0, 0,
	0, 0, 2464, 0, 936, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 2189, 0,
	0, 0, 0, 0, 0, 72, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 2494, 2495, 0, 0, 0,
	0, 0, 1272, 0, 0, 936, 0, 0, 0, 72,
	0, 2584, 0, 936, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 2511, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 937, 0, 0, 924,
	0, 2534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2630, 923, 931, 0, 0, 2184, 2185,
	2186, 0, 0, 2633, 0, 2183, 2181, 2182, 2174, 2175,
	2176, 2177, 2179, 2180, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 937, 0, 0, 937,
	0, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 72, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 1376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 0, 0, 0, 0,
	923, 923, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2640,
	0, 0, 0, 2643, 2644, 0, 0, 2646, 0, 0,
	0, 0, 1752, 0, 2648, 936, 0, 0, 2651, 0,
	0, 0, 0, 0, 0, 937, 0, 2729, 937, 0,
	0, 0, 1313, 1062, 0, 2658, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 2671, 0, 937, 0, 0, 0, 924, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 2715, 0, 0, 0, 0, 0, 0, 0, 924,
	924, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	1270, 886, 0, 0, 0, 0, 0, 1267, 0, 886,
	886, 0, 0, 886, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 1273,
	1274, 1275, 1276, 937, 0, 0, 0, 72, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	2789, 2790, 0, 0, 2864, 0, 2866, 0, 0, 0,
	1288, 1298, 0, 1278, 1279, 1280, 72, 0, 0, 0,
	0, 0, 0, 0, 2799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 2807, 0,
	0, 0, 1265, 1266, 924, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 1286, 0, 72, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 696,
	0, 937, 0, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 0, 2843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2919, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 2939, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 1272, 0, 0, 0, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 2957, 0,
	924, 924, 0, 0, 0, 0, 0, 0, 1289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2900, 0, 0, 2903,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2990, 2990, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1178, 0, 921, 920, 0, 0,
	2990, 918, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 898, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 830, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 831, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 832, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	834, 0, 280, 0, 886, 0, 0, 279, 281, 288,
	0, 833, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 835, 836, 290, 291, 292, 837,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 838, 300, 301, 839, 0, 302, 303, 0,
	0, 304, 0, 305, 900, 899, 306, 307, 309, 310,
	308, 840, 311, 312, 314, 313, 0, 0, 841, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 842, 323, 843, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 72, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 844, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 845, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1752,
	213, 214, 215, 216, 939, 217, 940, 941, 942, 943,
	423, 944, 945, 946, 947, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 948, 224, 225, 226, 227,
	228, 229, 949, 950, 428, 429, 430, 951, 230, 431,
	952, 898, 953, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 954, 240, 0, 241, 242, 955, 830,
	243, 244, 245, 956, 957, 959, 958, 960, 961, 962,
	246, 247, 474, 248, 249, 250, 432, 433, 963, 251,
	964, 252, 965, 253, 966, 967, 254, 255, 968, 256,
	257, 969, 0, 970, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 971, 831, 972, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 973, 270,
	974, 975, 832, 271, 976, 272, 438, 977, 439, 978,
	273, 274, 275, 276, 277, 278, 440, 441, 834, 979,
	280, 0, 0, 0, 980, 279, 281, 288, 981, 833,
	282, 442, 284, 283, 285, 286, 287, 443, 982, 444,
	983, 289, 835, 836, 290, 291, 292, 837, 293, 294,
	0, 0, 295, 296, 297, 984, 299, 298, 985, 445,
	838, 300, 301, 839, 986, 302, 303, 987, 988, 304,
	0, 305, 900, 899, 306, 307, 309, 310, 308, 840,
	311, 312, 314, 313, 989, 990, 841, 991, 446, 315,
	447, 316, 317, 992, 318, 319, 993, 994, 320, 321,
	995, 996, 322, 448, 842, 323, 843, 449, 324, 325,
	326, 327, 328, 329, 330, 997, 331, 450, 332, 451,
	333, 998, 334, 335, 336, 337, 338, 452, 339, 340,
	999, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 1000, 353, 844, 1001, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 1002, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 1003, 377, 358, 359, 378, 845, 379, 454, 380,
	381, 1004, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 1005, 387, 455, 1006, 391, 392, 1007, 393, 394,
	395, 396, 397, 398, 399, 400, 1008, 456, 457, 401,
	1009, 1010, 402, 403, 458, 459, 1011, 404, 405, 406,
	407, 1012, 1013, 408, 409, 410, 412, 1014, 413, 1015,
	411, 414, 415, 416, 460, 461, 1016, 1017, 417, 462,
	1018, 1019, 1020, 1021, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	1884, 0, 0, 0, 0, 0, 0, 0, 0, 1885,
	213, 214, 215, 216, 939, 217, 940, 941, 942, 943,
	423, 944, 945, 946, 947, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 948, 224, 225, 226, 227,
	228, 229, 949, 950, 428, 429, 430, 951, 230, 431,
	952, 898, 953, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 954, 240, 0, 241, 242, 955, 830,
	243, 244, 245, 956, 957, 959, 958, 960, 961, 962,
	246, 247, 474, 248, 249, 250, 432, 433, 963, 251,
	964, 252, 965, 253, 966, 967, 254, 255, 968, 256,
	257, 969, 0, 970, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 971, 831, 972, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 973, 270,
	974, 975, 832, 271, 976, 272, 438, 977, 439, 978,
	273, 274, 275, 276, 277, 278, 440, 441, 834, 979,
	280, 0, 0, 0, 980, 279, 281, 288, 981, 833,
	282, 442, 284, 283, 285, 286, 287, 443, 982, 444,
	983, 289, 835, 836, 290, 291, 292, 837, 293, 294,
	0, 0, 295, 296, 297, 984, 299, 298, 985, 445,
	838, 300, 301, 839, 986, 302, 303, 987, 988, 304,
	0, 305, 900, 899, 306, 307, 309, 310, 308, 840,
	311, 312, 314, 313, 989, 990, 841, 991, 446, 315,
	447, 316, 317, 992, 318, 319, 993, 994, 320, 321,
	995, 996, 322, 448, 842, 323, 843, 449, 324, 325,
	326, 327, 328, 329, 330, 997, 331, 450, 332, 451,
	333, 998, 334, 335, 336, 337, 338, 452, 339, 340,
	999, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 1000, 353, 844, 1001, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 1002, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 1003, 377, 358, 359, 378, 845, 379, 454, 380,
	381, 1004, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 1005, 387, 455, 1006, 391, 392, 1007, 393, 394,
	395, 396, 397, 398, 399, 400, 1008, 456, 457, 401,
	1009, 1010, 402, 403, 458, 459, 1011, 404, 405, 406,
	407, 1012, 1013, 408, 409, 410, 412, 1014, 413, 1015,
	411, 414, 415, 416, 460, 461, 1016, 1017, 417, 462,
	1018, 1019, 1020, 1021, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2686, 213, 214, 215, 216, 939, 217, 940, 941, 942,
	943, 423, 944, 945, 946, 947, 218, 219, 220, 424,
	425, 221, 426, 222, 223, 427, 948, 224, 225, 226,
	227, 228, 229, 949, 950, 428, 429, 430, 951, 230,
	431, 952, 898, 953, 231, 232, 233, 234, 235, 0,
	237, 238, 239, 236, 954, 240, 0, 241, 242, 955,
	830, 243, 244, 245, 956, 957, 959, 958, 960, 961,
	962, 246, 247, 474, 248, 249, 250, 432, 433, 963,
	251, 964, 252, 965, 253, 966, 967, 254, 255, 968,
	256, 257, 969, 0, 970, 434, 261, 258, 259, 262,
	263, 260, 264, 435, 436, 971, 831, 972, 0, 0,
	0, 0, 265, 266, 437, 267, 268, 0, 269, 973,
	270, 974, 975, 832, 271, 976, 272, 438, 977, 439,
	978, 273, 274, 275, 276, 277, 278, 440, 441, 834,
	979, 280, 0, 0, 0, 980, 279, 281, 288, 981,
	833, 282, 442, 284, 283, 285, 286, 287, 443, 982,
	444, 983, 289, 835, 836, 290, 291, 292, 837, 293,
	294, 0, 0, 295, 296, 297, 984, 299, 298, 985,
	445, 838, 300, 301, 839, 986, 302, 303, 987, 988,
	304, 0, 305, 900, 899, 306, 307, 309, 310, 308,
	840, 311, 312, 314, 313, 989, 990, 841, 991, 446,
	315, 447, 316, 317, 992, 318, 319, 993, 994, 320,
	321, 995, 996, 322, 448, 842, 323, 843, 449, 324,
	325, 326, 327, 328, 329, 330, 997, 331, 450, 332,
	451, 333, 998, 334, 335, 336, 337, 338, 452, 339,
	340, 999, 341, 342, 343, 344, 345, 0, 347, 348,
	346, 349, 350, 351, 352, 1000, 353, 844, 1001, 354,
	355, 356, 453, 357, 0, 361, 362, 363, 364, 365,
	366, 367, 1002, 373, 374, 368, 370, 371, 372, 369,
	375, 376, 1003, 377, 358, 359, 378, 845, 379, 454,
	380, 381, 1004, 390, 382, 383, 384, 360, 385, 388,
	389, 386, 1005, 387, 455, 1006, 391, 392, 1007, 393,
	394, 395, 396, 397, 398, 399, 400, 1008, 456, 457,
	401, 1009, 1010, 402, 403, 458, 459, 1011, 404, 405,
	406, 407, 1012, 1013, 408, 409, 410, 412, 1014, 413,
	1015, 411, 414, 415, 416, 460, 461, 1016, 1017, 417,
	462, 1018, 1019, 1020, 1021, 418, 419, 463, 420, 421,
	422, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2794, 213, 214, 215,
	216, 939, 217, 940, 941, 942, 943, 423, 944, 945,
	946, 947, 218, 219, 220, 424, 425, 221, 426, 222,
	223, 427, 948, 224, 225, 226, 227, 228, 229, 949,
	950, 428, 429, 430, 951, 230, 431, 952, 898, 953,
	231, 232, 233, 234, 235, 0, 237, 238, 239, 236,
	954, 240, 0, 241, 242, 955, 830, 243, 244, 245,
	956, 957, 959, 958, 960, 961, 962, 246, 247, 474,
	248, 249, 250, 432, 433, 963, 251, 964, 252, 965,
	253, 966, 967, 254, 255, 968, 256, 257, 969, 0,
	970, 434, 261, 258, 259, 262, 263, 260, 264, 435,
	436, 971, 831, 972, 0, 0, 0, 0, 265, 266,
	437, 267, 268, 0, 269, 973, 270, 974, 975, 832,
	271, 976, 272, 438, 977, 439, 978, 273, 274, 275,
	276, 277, 278, 440, 441, 834, 979, 280, 0, 0,
	0, 980, 279, 281, 288, 981, 833, 282, 442, 284,
	283, 285, 286, 287, 443, 982, 444, 983, 289, 835,
	836, 290, 291, 292, 837, 293, 294, 0, 0, 295,
	296, 297, 984, 299, 298, 985, 445, 838, 300, 301,
	839, 986, 302, 303, 987, 988, 304, 0, 305, 900,
	899, 306, 307, 309, 310, 308, 840, 311, 312, 314,
	313, 989, 990, 841, 991, 446, 315, 447, 316, 317,
	992, 318, 319, 993, 994, 320, 321, 995, 996, 322,
	448, 842, 323, 843, 449, 324, 325, 326, 327, 328,
	329, 330, 997, 331, 450, 332, 451, 333, 998, 334,
	335, 336, 337, 338, 452, 339, 340, 999, 341, 342,
	343, 344, 345, 0, 347, 348, 346, 349, 350, 351,
	352, 1000, 353, 844, 1001, 354, 355, 356, 453, 357,
	0, 361, 362, 363, 364, 365, 366, 367, 1002, 373,
	374, 368, 370, 371, 372, 369, 375, 376, 1003, 377,
	358, 359, 378, 845, 379, 454, 380, 381, 1004, 390,
	382, 383, 384, 360, 385, 388, 389, 386, 1005, 387,
	455, 1006, 391, 392, 1007, 393, 394, 395, 396, 397,
	398, 399, 400, 1008, 456, 457, 401, 1009, 1010, 402,
	403, 458, 459, 1011, 404, 405, 406, 407, 1012, 1013,
	408, 409, 410, 412, 1014, 413, 1015, 411, 414, 415,
	416, 460, 461, 1016, 1017, 417, 462, 1018, 1019, 1020,
	1021, 418, 419, 463, 420, 421, 422, 934, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2434, 213, 214, 215, 216, 939, 217, 940,
	941, 942, 943, 423, 944, 945, 946, 947, 218, 219,
	220, 424, 425, 221, 426, 222, 223, 427, 948, 224,
	225, 226, 227, 228, 229, 949, 950, 428, 429, 430,
	951, 230, 431, 952, 898, 953, 231, 232, 233, 234,
	235, 0, 237, 238, 239, 236, 954, 240, 0, 241,
	242, 955, 830, 243, 244, 245, 956, 957, 959, 958,
	960, 961, 962, 246, 247, 474, 248, 249, 250, 432,
	433, 963, 251, 964, 252, 965, 253, 966, 967, 254,
	255, 968, 256, 257, 969, 0, 970, 434, 261, 258,
	259, 262, 263, 260, 264, 435, 436, 971, 831, 972,
	0, 0, 0, 0, 265, 266, 437, 267, 268, 0,
	269, 973, 270, 974, 975, 832, 271, 976, 272, 438,
	977, 439, 978, 273, 274, 275, 276, 277, 278, 440,
	441, 834, 979, 280, 0, 0, 0, 980, 279, 281,
	288, 981, 833, 282, 442, 284, 283, 285, 286, 287,
	443, 982, 444, 983, 289, 835, 836, 290, 291, 292,
	837, 293, 294, 0, 0, 295, 296, 297, 984, 299,
	298, 985, 445, 838, 300, 301, 839, 986, 302, 303,
	987, 988, 304, 0, 305, 900, 899, 306, 307, 309,
	310, 308, 840, 311, 312, 314, 313, 989, 990, 841,
	991, 446, 315, 447, 316, 317, 992, 318, 319, 993,
	994, 320, 321, 995, 996, 322, 448, 842, 323, 843,
	449, 324, 325, 326, 327, 328, 329, 330, 997, 331,
	450, 332, 451, 333, 998, 334, 335, 336, 337, 338,
	452, 339, 340, 999, 341, 342, 343, 344, 345, 0,
	347, 348, 346, 349, 350, 351, 352, 1000, 353, 844,
	1001, 354, 355, 356, 453, 357, 0, 361, 362, 363,
	364, 365, 366, 367, 1002, 373, 374, 368, 370, 371,
	372, 369, 375, 376, 1003, 377, 358, 359, 378, 845,
	379, 454, 380, 381, 1004, 390, 382, 383, 384, 360,
	385, 388, 389, 386, 1005, 387, 455, 1006, 391, 392,
	1007, 393, 394, 395, 396, 397, 398, 399, 400, 1008,
	456, 457, 401, 1009, 1010, 402, 403, 458, 459, 1011,
	404, 405, 406, 407, 1012, 1013, 408, 409, 410, 412,
	1014, 413, 1015, 411, 414, 415, 416, 460, 461, 1016,
	1017, 417, 462, 1018, 1019, 1020, 1021, 418, 419, 463,
	420, 421, 422, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2316, 213,
	214, 215, 216, 939, 217, 940, 941, 942, 943, 423,
	944, 945, 946, 947, 218, 219, 220, 424, 425, 221,
	426, 222, 223, 427, 948, 224, 225, 226, 227, 228,
	229, 949, 950, 428, 429, 430, 951, 230, 431, 952,
	898, 953, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 954, 240, 0, 241, 242, 955, 830, 243,
	244, 245, 956, 957, 959, 958, 960, 961, 962, 246,
	247, 474, 248, 249, 250, 432, 433, 963, 251, 964,
	252, 965, 253, 966, 967, 254, 255, 968, 256, 257,
	969, 0, 970, 434, 261, 258, 259, 262, 263, 260,
	264, 435, 436, 971, 831, 972, 0, 0, 0, 0,
	265, 266, 437, 267, 268, 0, 269, 973, 270, 974,
	975, 832, 271, 976, 272, 438, 977, 439, 978, 273,
	274, 275, 276, 277, 278, 440, 441, 834, 979, 280,
	0, 0, 0, 980, 279, 281, 288, 981, 833, 282,
	442, 284, 283, 285, 286, 287, 443, 982, 444, 983,
	289, 835, 836, 290, 291, 292, 837, 293, 294, 0,
	0, 295, 296, 297, 984, 299, 298, 985, 445, 838,
	300, 301, 839, 986, 302, 303, 987, 988, 304, 0,
	305, 900, 899, 306, 307, 309, 310, 308, 840, 311,
	312, 314, 313, 989, 990, 841, 991, 446, 315, 447,
	316, 317, 992, 318, 319, 993, 994, 320, 321, 995,
	996, 322, 448, 842, 323, 843, 449, 324, 325, 326,
	327, 328, 329, 330, 997, 331, 450, 332, 451, 333,
	998, 334, 335, 336, 337, 338, 452, 339, 340, 999,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 1000, 353, 844, 1001, 354, 355, 356,
	453, 357, 0, 361, 362, 363, 364, 365, 366, 367,
	1002, 373, 374, 368, 370, 371, 372, 369, 375, 376,
	1003, 377, 358, 359, 378, 845, 379, 454, 380, 381,
	1004, 390, 382, 383, 384, 360, 385, 388, 389, 386,
	1005, 387, 455, 1006, 391, 392, 1007, 393, 394, 395,
	396, 397, 398, 399, 400, 1008, 456, 457, 401, 1009,
	1010, 402, 403, 458, 459, 1011, 404, 405, 406, 407,
	1012, 1013, 408, 409, 410, 412, 1014, 413, 1015, 411,
	414, 415, 416, 460, 461, 1016, 1017, 417, 462, 1018,
	1019, 1020, 1021, 418, 419, 463, 420, 421, 422, 934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1775, 213, 214, 215, 216, 939,
	217, 940, 941, 942, 943, 423, 944, 945, 946, 947,
	218, 219, 220, 424, 425, 221, 426, 222, 223, 427,
	948, 224, 225, 226, 227, 228, 229, 949, 950, 428,
	429, 430, 951, 230, 431, 952, 898, 953, 231, 232,
	233, 234, 235, 0, 237, 238, 239, 236, 954, 240,
	0, 241, 242, 955, 830, 243, 244, 245, 956, 957,
	959, 958, 960, 961, 962, 246, 247, 474, 248, 249,
	250, 432, 433, 963, 251, 964, 252, 965, 253, 966,
	967, 254, 255, 968, 256, 257, 969, 0, 970, 434,
	261, 258, 259, 262, 263, 260, 264, 435, 436, 971,
	831, 972, 0, 0, 0, 0, 265, 266, 437, 267,
	268, 0, 269, 973, 270, 974, 975, 832, 271, 976,
	272, 438, 977, 439, 978, 273, 274, 275, 276, 277,
	278, 440, 441, 834, 979, 280, 0, 0, 0, 980,
	279, 281, 288, 981, 833, 282, 442, 284, 283, 285,
	286, 287, 443, 982, 444, 983, 289, 835, 836, 290,
	291, 292, 837, 293, 294, 0, 0, 295, 296, 297,
	984, 299, 298, 985, 445, 838, 300, 301, 839, 986,
	302, 303, 987, 988, 304, 0, 305, 900, 899, 306,
	307, 309, 310, 308, 840, 311, 312, 314, 313, 989,
	990, 841, 991, 446, 315, 447, 316, 317, 992, 318,
	319, 993, 994, 320, 321, 995, 996, 322, 448, 842,
	323, 843, 449, 324, 325, 326, 327, 328, 329, 330,
	997, 331, 450, 332, 451, 333, 998, 334, 335, 336,
	337, 338, 452, 339, 340, 999, 341, 342, 343, 344,
	345, 0, 347, 348, 346, 349, 350, 351, 352, 1000,
	353, 844, 1001, 354, 355, 356, 453, 357, 0, 361,
	362, 363, 364, 365, 366, 367, 1002, 373, 374, 368,
	370, 371, 372, 369, 375, 376, 1003, 377, 358, 359,
	378, 845, 379, 454, 380, 381, 1004, 390, 382, 383,
	384, 360, 385, 388, 389, 386, 1005, 387, 455, 1006,
	391, 392, 1007, 393, 394, 395, 396, 397, 398, 399,
	400, 1008, 456, 457, 401, 1009, 1010, 402, 403, 458,
	459, 1011, 404, 405, 406, 407, 1012, 1013, 408, 409,
	410, 412, 1014, 413, 1015, 411, 414, 415, 416, 460,
	461, 1016, 1017, 417, 462, 1018, 1019, 1020, 1021, 418,
	419, 463, 420, 421, 422, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 213, 214, 215, 216, 939, 217, 940, 941, 942,
	943, 423, 944, 945, 946, 947, 218, 219, 220, 424,
	425, 221, 426, 222, 223, 427, 948, 224, 225, 226,
	227, 228, 229, 949, 950, 428, 429, 430, 951, 230,
	431, 952, 898, 953, 231, 232, 233, 234, 235, 0,
	237, 238, 239, 236, 954, 240, 0, 241, 242, 955,
	830, 243, 244, 245, 956, 957, 959, 958, 960, 961,
	962, 246, 247, 474, 248, 249, 250, 432, 433, 963,
	251, 964, 252, 965, 253, 966, 967, 254, 255, 968,
	256, 257, 969, 0, 970, 434, 261, 258, 259, 262,
	263, 260, 264, 435, 436, 971, 831, 972, 0, 0,
	0, 0, 265, 266, 437, 267, 268, 0, 269, 973,
	270, 974, 975, 832, 271, 976, 272, 438, 977, 439,
	978, 273, 274, 275, 276, 277, 278, 440, 441, 834,
	979, 280, 0, 0, 0, 980, 279, 281, 288, 981,
	833, 282, 442, 284, 283, 285, 286, 287, 443, 982,
	444, 983, 289, 835, 836, 290, 291, 292, 837, 293,
	294, 0, 0, 295, 296, 297, 984, 299, 298, 985,
	445, 838, 300, 301, 839, 986, 302, 303, 987, 988,
	304, 0, 305, 900, 899, 306, 307, 309, 310, 308,
	840, 311, 312, 314, 313, 989, 990, 841, 991, 446,
	315, 447, 316, 317, 992, 318, 319, 993, 994, 320,
	321, 995, 996, 322, 448, 842, 323, 843, 449, 324,
	325, 326, 327, 328, 329, 330, 997, 331, 450, 332,
	451, 333, 998, 334, 335, 336, 337, 338, 452, 339,
	340, 999, 341, 342, 343, 344, 345, 0, 347, 348,
	346, 349, 350, 351, 352, 1000, 353, 844, 1001, 354,
	355, 356, 453, 357, 0, 361, 362, 363, 364, 365,
	366, 367, 1002, 373, 374, 368, 370, 371, 372, 369,
	375, 376, 1003, 377, 358, 359, 378, 845, 379, 454,
	380, 381, 1004, 390, 382, 383, 384, 360, 385, 388,
	389, 386, 1005, 387, 455, 1006, 391, 392, 1007, 393,
	394, 395, 396, 397, 398, 399, 400, 1008, 456, 457,
	401, 1009, 1010, 402, 403, 458, 459, 1011, 404, 405,
	406, 407, 1012, 1013, 408, 409, 410, 412, 1014, 413,
	1015, 411, 414, 415, 416, 460, 461, 1016, 1017, 417,
	462, 1018, 1019, 1020, 1021, 418, 419, 463, 420, 421,
	422, 1782, 0, 749, 737, 738, 735, 736, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 1779, 217, 0, 0, 0, 0, 784,
	729, 0, 0, 0, 218, 219, 220, 424, 803, 769,
	804, 757, 790, 805, 0, 224, 759, 758, 227, 228,
	229, 732, 783, 806, 807, 430, 0, 230, 788, 0,
	774, 0, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 0, 240, 0, 241, 242, 0, 830, 243,
	244, 245, 777, 775, 776, 780, 0, 778, 779, 246,
	247, 474, 248, 791, 250, 808, 809, 715, 251, 0,
	252, 0, 253, 1780, 0, 792, 255, 0, 256, 257,
	0, 0, 0, 720, 261, 258, 259, 262, 263, 260,
	264, 810, 811, 744, 831, 0, 0, 0, 0, 0,
	265, 266, 812, 793, 794, 0, 269, 0, 270, 0,
	0, 832, 271, 0, 272, 813, 0, 439, 0, 273,
	274, 275, 276, 277, 278, 785, 787, 834, 0, 768,
	0, 0, 0, 0, 279, 281, 288, 0, 833, 282,
	814, 772, 795, 796, 797, 798, 815, 0, 773, 0,
	289, 835, 836, 290, 291, 292, 837, 799, 800, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 816, 838,
	300, 301, 839, 0, 302, 303, 0, 0, 304, 0,
	305, 717, 716, 306, 307, 309, 761, 308, 840, 311,
	312, 314, 313, 712, 0, 841, 745, 786, 315, 817,
	316, 317, 0, 770, 771, 0, 0, 320, 321, 0,
	0, 322, 448, 842, 323, 843, 818, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 819, 332, 451, 333,
	0, 334, 335, 336, 337, 338, 820, 339, 340, 0,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 0, 353, 844, 0, 354, 355, 356,
	721, 357, 0, 361, 362, 363, 364, 365, 366, 367,
	0, 373, 374, 762, 763, 764, 765, 369, 375, 376,
	781, 377, 358, 359, 378, 845, 379, 821, 766, 381,
	0, 390, 382, 383, 384, 360, 385, 388, 801, 386,
	0, 387, 822, 0, 391, 392, 0, 393, 394, 395,
	396, 397, 398, 760, 400, 0, 823, 824, 802, 0,
	0, 402, 403, 825, 826, 743, 404, 405, 406, 407,
	0, 0, 408, 409, 410, 412, 782, 413, 0, 767,
	414, 415, 416, 460, 827, 1778, 0, 417, 462, 0,
	0, 0, 0, 418, 419, 463, 420, 421, 422, 713,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 709, 710, 1781, 0, 0, 0, 0, 0,
	0, 722, 1776, 0, 0, 0, 697, 725, 749, 737,
	738, 735, 736, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 250,
	808, 809, 715, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 717, 716, 306, 307,
	309, 761, 308, 840, 311, 312, 314, 313, 712, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 721, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 168, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 170, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 1109, 827,
	0, 0, 417, 462, 0, 0, 0, 162, 418, 419,
	463, 420, 421, 422, 713, 163, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 710, 749,
	737, 738, 735, 736, 726, 0, 1316, 0, 0, 0,
	0, 0, 725, 0, 0, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 784, 729, 0, 0, 0,
	218, 219, 220, 424, 803, 769, 804, 757, 790, 805,
	0, 224, 759, 758, 227, 228, 229, 732, 783, 806,
	807, 430, 0, 230, 788, 0, 774, 0, 231, 232,
	233, 234, 235, 0, 237, 238, 239, 236, 0, 240,
	0, 241, 242, 0, 830, 243, 244, 245, 777, 775,
	776, 780, 0, 778, 779, 246, 247, 474, 248, 791,
	250, 808, 809, 715, 251, 0, 252, 0, 253, 0,
	0, 792, 255, 0, 256, 257, 0, 0, 0, 720,
	261, 258, 259, 262, 263, 260, 264, 810, 811, 744,
	831, 0, 0, 0, 0, 0, 265, 266, 812, 793,
	794, 0, 269, 0, 270, 0, 0, 832, 271, 0,
	272, 813, 0, 439, 0, 273, 274, 275, 276, 277,
	278, 785, 787, 834, 0, 768, 0, 0, 0, 0,
	279, 281, 288, 0, 833, 282, 814, 772, 795, 796,
	797, 798, 815, 0, 773, 0, 289, 835, 836, 290,
	291, 292, 837, 799, 800, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 816, 838, 300, 301, 839, 0,
	302, 303, 0, 0, 304, 0, 305, 717, 716, 306,
	307, 309, 761, 308, 840, 311, 312, 314, 313, 712,
	0, 841, 745, 786, 315, 817, 316, 317, 0, 770,
	771, 0, 0, 320, 321, 0, 0, 322, 448, 842,
	323, 843, 818, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 819, 332, 451, 333, 0, 334, 335, 336,
	337, 338, 820, 339, 340, 0, 341, 342, 343, 344,
	345, 0, 347, 348, 346, 349, 350, 351, 352, 0,
	353, 844, 0, 354, 355, 356, 721, 357, 0, 361,
	362, 363, 364, 365, 366, 367, 168, 373, 374, 762,
	763, 764, 765, 369, 375, 376, 781, 377, 358, 359,
	378, 845, 379, 821, 766, 381, 0, 390, 382, 383,
	384, 360, 385, 388, 801, 386, 0, 387, 822, 0,
	391, 392, 170, 393, 394, 395, 396, 397, 398, 760,
	400, 0, 823, 824, 802, 0, 0, 402, 403, 825,
	826, 743, 404, 405, 406, 407, 0, 0, 408, 409,
	410, 412, 782, 413, 0, 767, 414, 415, 416, 1109,
	827, 0, 0, 417, 462, 0, 0, 0, 162, 418,
	419, 463, 420, 421, 422, 713, 163, 0, 0, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 709, 710,
	749, 737, 738, 735, 736, 726, 0, 1316, 0, 0,
	0, 0, 0, 725, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 784, 729, 0, 0,
	0, 218, 219, 220, 424, 803, 769, 804, 757, 790,
	805, 1849, 224, 759, 758, 227, 228, 229, 732, 783,
	806, 807, 430, 0, 230, 788, 0, 774, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 830, 243, 244, 245, 777,
	775, 776, 780, 0, 778, 779, 246, 247, 474, 248,
	791, 250, 808, 809, 715, 251, 0, 252, 0, 253,
	0, 0, 792, 255, 0, 256, 257, 0, 0, 0,
	720, 261, 258, 259, 262, 263, 260, 264, 810, 811,
	744, 831, 0, 0, 0, 0, 0, 265, 266, 812,
	793, 794, 0, 269, 0, 270, 0, 1854, 832, 271,
	0, 272, 813, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 785, 787, 834, 0, 768, 0, 0, 0,
	0, 279, 281, 288, 0, 833, 282, 814, 772, 795,
	796, 797, 798, 815, 0, 773, 0, 289, 835, 836,
	290, 291, 292, 837, 799, 800, 0, 0, 295, 296,
	297, 0, 299, 298, 1850, 816, 838, 300, 301, 839,
	0, 302, 303, 0, 0, 304, 0, 305, 717, 716,
	306, 307, 309, 761, 308, 840, 311, 312, 314, 313,
	712, 0, 841, 745, 786, 315, 817, 316, 317, 0,
	770, 771, 0, 0, 320, 321, 0, 0, 322, 448,
	842, 323, 843, 818, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 819, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 820, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 844, 0, 354, 355, 356, 721, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	762, 763, 764, 765, 369, 375, 376, 781, 377, 358,
	359, 378, 845, 379, 821, 766, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 801, 386, 0, 387, 822,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	760, 400, 0, 823, 824, 802, 0, 1851, 402, 403,
	825, 826, 743, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 782, 413, 0, 767, 414, 415, 416,
	460, 827, 0, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 713, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 709,
	710, 749, 737, 738, 735, 736, 726, 0, 722, 0,
	0, 0, 0, 0, 725, 0, 0, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 784, 729, 0,
	0, 0, 218, 219, 220, 424, 803, 769, 804, 757,
	790, 805, 0, 224, 759, 758, 227, 228, 229, 732,
	783, 806, 807, 430, 0, 230, 788, 0, 774, 0,
	231, 232, 233, 234, 235, 0, 237, 238, 239, 236,
	0, 240, 0, 241, 242, 0, 830, 243, 244, 245,
	777, 775, 776, 780, 0, 778, 779, 246, 247, 474,
	248, 791, 250, 808, 809, 715, 251, 0, 252, 0,
	253, 0, 0, 792, 255, 0, 256, 257, 0, 0,
	0, 720, 261, 258, 259, 262, 263, 260, 264, 810,
	811, 744, 831, 0, 0, 0, 0, 0, 265, 266,
	812, 793, 794, 0, 269, 0, 270, 0, 0, 832,
	271, 0, 272, 813, 0, 439, 0, 273, 274, 275,
	276, 277, 278, 785, 787, 834, 0, 768, 0, 0,
	0, 0, 279, 281, 288, 0, 833, 282, 814, 772,
	795, 796, 797, 798, 815, 0, 773, 0, 289, 835,
	836, 290, 291, 292, 837, 799, 800, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 816, 838, 300, 301,
	839, 0, 302, 303, 0, 0, 304, 0, 305, 717,
	716, 306, 307, 309, 761, 308, 840, 311, 312, 314,
	313, 712, 2602, 841, 745, 786, 315, 817, 316, 317,
	0, 770, 771, 0, 0, 320, 321, 0, 0, 322,
	448, 842, 323, 843, 818, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 819, 332, 451, 333, 0, 334,
	335, 336, 337, 338, 820, 339, 340, 0, 341, 342,
	343, 344, 345, 0, 347, 348, 346, 349, 350, 351,
	352, 0, 353, 844, 0, 354, 355, 356, 721, 357,
	0, 361, 362, 363, 364, 365, 366, 367, 0, 373,
	374, 762, 763, 764, 765, 369, 375, 376, 781, 377,
	358, 359, 378, 845, 379, 821, 766, 381, 0, 390,
	382, 383, 384, 360, 385, 388, 801, 386, 0, 387,
	822, 0, 391, 392, 0, 393, 394, 395, 396, 397,
	398, 760, 400, 0, 823, 824, 802, 0, 0, 402,
	403, 825, 826, 743, 404, 405, 406, 407, 0, 0,
	408, 409, 410, 412, 782, 413, 0, 767, 414, 415,
	416, 460, 827, 0, 0, 417, 462, 0, 0, 0,
	0, 418, 419, 463, 420, 421, 422, 713, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	709, 710, 1377, 749, 737, 738, 735, 736, 726, 722,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 784,
	729, 0, 0, 0, 218, 219, 220, 424, 803, 769,
	804, 757, 790, 805, 0, 224, 759, 758, 227, 228,
	229, 732, 783, 806, 807, 430, 0, 230, 788, 0,
	774, 0, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 0, 240, 0, 241, 242, 0, 830, 243,
	244, 245, 777, 775, 776, 780, 0, 778, 779, 246,
	247, 474, 248, 791, 250, 808, 809, 715, 251, 0,
	252, 0, 253, 0, 0, 792, 255, 0, 256, 257,
	0, 0, 0, 720, 261, 258, 259, 262, 263, 260,
	264, 810, 811, 744, 831, 0, 0, 0, 0, 0,
	265, 266, 812, 793, 794, 0, 269, 0, 270, 0,
	0, 832, 271, 0, 272, 813, 0, 439, 0, 273,
	274, 275, 276, 277, 278, 785, 787, 834, 0, 768,
	0, 0, 0, 1680, 279, 281, 288, 0, 833, 282,
	814, 772, 795, 796, 797, 798, 815, 0, 773, 0,
	289, 835, 836, 290, 291, 292, 837, 799, 800, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 816, 838,
	300, 301, 839, 0, 302, 303, 0, 0, 304, 0,
	305, 717, 716, 306, 307, 309, 761, 308, 840, 311,
	312, 314, 313, 712, 0, 841, 745, 786, 315, 817,
	316, 317, 0, 770, 771, 0, 0, 320, 321, 0,
	0, 322, 448, 842, 323, 843, 818, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 819, 332, 451, 333,
	1679, 334, 335, 336, 337, 338, 820, 339, 340, 0,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 0, 353, 844, 0, 354, 355, 356,
	721, 357, 0, 361, 362, 363, 364, 365, 366, 367,
	0, 373, 374, 762, 763, 764, 765, 369, 375, 376,
	781, 377, 358, 359, 378, 845, 379, 821, 766, 381,
	0, 390, 382, 383, 384, 360, 385, 388, 801, 386,
	0, 387, 822, 0, 391, 392, 0, 393, 394, 395,
	396, 397, 398, 760, 400, 0, 823, 824, 802, 0,
	0, 402, 403, 825, 826, 743, 404, 405, 406, 407,
	0, 0, 408, 409, 410, 412, 782, 413, 0, 767,
	414, 415, 416, 460, 827, 0, 0, 417, 462, 0,
	0, 0, 0, 418, 419, 463, 420, 421, 422, 713,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 709, 710, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 705, 725, 749, 737,
	738, 735, 736, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 250,
	808, 809, 715, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 717, 716, 306, 307,
	309, 761, 308, 840, 311, 312, 314, 313, 712, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	707, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 721, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 460, 827,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 713, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 710, 749,
	737, 738, 735, 736, 726, 0, 722, 0, 0, 0,
	0, 0, 725, 0, 0, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 784, 729, 0, 0, 0,
	218, 219, 220, 424, 803, 769, 804, 757, 790, 805,
	0, 224, 759, 758, 227, 228, 229, 732, 783, 806,
	807, 430, 0, 230, 788, 0, 774, 0, 231, 232,
	233, 234, 235, 0, 237, 238, 239, 236, 0, 240,
	0, 241, 242, 0, 830, 243, 244, 245, 777, 775,
	776, 780, 0, 778, 779, 246, 247, 474, 248, 791,
	250, 808, 809, 715, 251, 0, 252, 0, 253, 0,
	0, 792, 255, 0, 256, 257, 0, 0, 0, 720,
	261, 258, 259, 262, 263, 260, 264, 810, 811, 744,
	831, 0, 0, 0, 0, 0, 265, 266, 812, 793,
	794, 0, 269, 0, 270, 0, 0, 832, 271, 0,
	272, 813, 0, 439, 0, 273, 274, 275, 276, 277,
	278, 785, 787, 834, 0, 768, 0, 0, 0, 0,
	279, 281, 288, 0, 833, 282, 814, 772, 795, 796,
	797, 798, 815, 0, 773, 0, 289, 835, 836, 290,
	291, 292, 837, 799, 800, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 816, 838, 300, 301, 839, 0,
	302, 303, 0, 0, 304, 0, 305, 717, 716, 306,
	307, 309, 761, 308, 840, 311, 312, 314, 313, 712,
	0, 841, 745, 786, 315, 817, 316, 317, 0, 770,
	771, 0, 0, 320, 321, 0, 0, 322, 448, 842,
	323, 843, 818, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 819, 332, 451, 333, 0, 334, 335, 336,
	337, 338, 820, 339, 340, 0, 341, 342, 343, 344,
	345, 0, 347, 348, 346, 349, 350, 351, 352, 0,
	353, 844, 0, 354, 355, 356, 721, 357, 0, 361,
	362, 363, 364, 365, 366, 367, 0, 373, 374, 762,
	763, 764, 765, 369, 375, 376, 781, 377, 358, 359,
	378, 845, 379, 821, 766, 381, 0, 390, 382, 383,
	384, 360, 385, 388, 801, 386, 0, 387, 822, 0,
	391, 392, 0, 393, 394, 395, 396, 397, 398, 760,
	400, 0, 823, 824, 802, 0, 0, 402, 403, 825,
	826, 743, 404, 405, 406, 407, 0, 0, 408, 409,
	410, 412, 782, 413, 0, 767, 414, 415, 416, 460,
	827, 2436, 0, 417, 462, 0, 0, 0, 0, 418,
	419, 463, 420, 421, 422, 713, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 709, 710,
	749, 737, 738, 735, 736, 726, 0, 722, 0, 0,
	0, 0, 0, 725, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 784, 729, 0, 0,
	0, 218, 219, 220, 424, 803, 769, 804, 757, 790,
	805, 0, 224, 759, 758, 227, 228, 229, 732, 783,
	806, 807, 430, 0, 230, 788, 0, 774, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 830, 243, 244, 245, 777,
	775, 776, 780, 0, 778, 779, 246, 247, 474, 248,
	791, 250, 808, 809, 715, 251, 0, 252, 0, 253,
	0, 0, 792, 255, 0, 256, 257, 0, 0, 0,
	720, 261, 258, 259, 262, 263, 260, 264, 810, 811,
	744, 831, 0, 0, 0, 0, 0, 265, 266, 812,
	793, 794, 0, 269, 0, 270, 0, 0, 832, 271,
	0, 272, 813, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 785, 787, 834, 0, 768, 0, 0, 0,
	0, 279, 281, 288, 0, 833, 282, 814, 772, 795,
	796, 797, 798, 815, 0, 773, 0, 289, 835, 836,
	290, 291, 292, 837, 799, 800, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 816, 838, 300, 301, 839,
	0, 302, 303, 0, 0, 304, 0, 305, 717, 716,
	306, 307, 309, 761, 308, 840, 311, 312, 314, 313,
	712, 0, 841, 745, 786, 315, 817, 316, 317, 0,
	770, 771, 707, 0, 320, 321, 0, 0, 322, 448,
	842, 323, 843, 818, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 819, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 820, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 844, 0, 354, 355, 356, 721, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	762, 763, 764, 765, 369, 375, 376, 781, 377, 358,
	359, 378, 845, 379, 821, 766, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 801, 386, 0, 387, 822,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	760, 400, 0, 823, 824, 802, 0, 0, 402, 403,
	825, 826, 743, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 782, 413, 0, 767, 414, 415, 416,
	460, 827, 0, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 713, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 709,
	710, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 2248, 725, 749, 737, 738, 735, 736,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 784, 729, 0, 0, 0, 218, 219, 220, 424,
	803, 769, 804, 757, 790, 805, 0, 224, 759, 758,
	227, 228, 229, 732, 783, 806, 807, 430, 0, 230,
	788, 0, 774, 0, 231, 232, 233, 234, 235, 0,
	237, 238, 239, 236, 0, 240, 0, 241, 242, 0,
	830, 243, 244, 245, 777, 775, 776, 780, 0, 778,
	779, 246, 247, 474, 248, 791, 250, 808, 809, 715,
	251, 0, 252, 0, 253, 0, 0, 792, 255, 0,
	256, 257, 0, 0, 0, 720, 261, 258, 259, 262,
	263, 260, 264, 810, 811, 744, 831, 0, 0, 0,
	0, 0, 265, 266, 812, 793, 794, 0, 269, 0,
	270, 0, 0, 832, 271, 0, 272, 813, 0, 439,
	0, 273, 274, 275, 276, 277, 278, 785, 787, 834,
	0, 768, 0, 0, 0, 0, 279, 281, 288, 0,
	833, 282, 814, 772, 795, 796, 797, 798, 815, 0,
	773, 0, 289, 835, 836, 290, 291, 292, 837, 799,
	800, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	816, 838, 300, 301, 839, 0, 302, 303, 0, 0,
	304, 0, 305, 717, 716, 306, 307, 309, 761, 308,
	840, 311, 312, 314, 313, 712, 0, 841, 745, 786,
	315, 817, 316, 317, 0, 770, 771, 0, 0, 320,
	321, 0, 0, 322, 448, 842, 323, 843, 818, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 819, 332,
	451, 333, 0, 334, 335, 336, 337, 338, 820, 339,
	340, 0, 341, 342, 343, 344, 345, 0, 347, 348,
	346, 349, 350, 351, 352, 0, 353, 844, 0, 354,
	355, 356, 721, 357, 0, 361, 362, 363, 364, 365,
	366, 367, 0, 373, 374, 762, 763, 764, 765, 369,
	375, 376, 781, 377, 358, 359, 378, 845, 379, 821,
	766, 381, 0, 390, 382, 383, 384, 360, 385, 388,
	801, 386, 0, 387, 822, 0, 391, 392, 0, 393,
	394, 395, 396, 397, 398, 760, 400, 0, 823, 824,
	802, 0, 0, 402, 403, 825, 826, 743, 404, 405,
	406, 407, 0, 0, 408, 409, 410, 412, 782, 413,
	0, 767, 414, 415, 416, 460, 827, 0, 0, 417,
	462, 0, 0, 0, 0, 418, 419, 463, 420, 421,
	422, 713, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 709, 710, 749, 737, 738, 735,
	736, 726, 0, 722, 0, 0, 0, 0, 0, 725,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 784, 729, 0, 0, 0, 218, 219, 220,
	424, 803, 769, 804, 757, 790, 805, 0, 224, 759,
	758, 227, 228, 229, 732, 783, 806, 807, 430, 0,
	230, 788, 0, 774, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 830, 243, 244, 245, 777, 775, 776, 780, 0,
	778, 779, 246, 247, 474, 248, 791, 250, 808, 809,
	715, 251, 0, 252, 0, 253, 0, 0, 792, 255,
	0, 256, 257, 0, 0, 0, 720, 261, 258, 259,
	262, 263, 260, 264, 810, 811, 744, 831, 0, 0,
	0, 0, 0, 265, 266, 812, 793, 794, 0, 269,
	0, 270, 0, 0, 832, 271, 0, 272, 813, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 785, 787,
	834, 0, 768, 0, 0, 0, 0, 279, 281, 288,
	0, 833, 282, 814, 772, 795, 796, 797, 798, 815,
	0, 773, 0, 289, 835, 836, 290, 291, 292, 837,
	799, 800, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 816, 838, 300, 301, 839, 0, 302, 303, 0,
	0, 304, 0, 305, 717, 716, 306, 307, 309, 761,
	308, 840, 311, 312, 314, 313, 712, 0, 841, 745,
	786, 315, 817, 316, 317, 0, 770, 771, 0, 0,
	320, 321, 0, 0, 322, 448, 842, 323, 843, 818,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 819,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 820,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 844, 0,
	354, 355, 356, 721, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 762, 763, 764, 765,
	369, 375, 376, 781, 377, 358, 359, 378, 845, 379,
	821, 766, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 801, 386, 0, 387, 822, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 760, 400, 0, 823,
	824, 802, 0, 0, 402, 403, 825, 826, 743, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 782,
	413, 0, 767, 414, 415, 416, 460, 827, 0, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 713, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 0, 0, 709, 710, 1377, 749, 737,
	738, 735, 736, 726, 722, 0, 0, 0, 0, 0,
	725, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 250,
	808, 809, 715, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 1854, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 717, 716, 306, 307,
	309, 761, 308, 840, 311, 312, 314, 313, 712, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 721, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 460, 827,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 713, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 710, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 1888, 725, 749, 737, 738, 735, 736, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 784,
	729, 0, 0, 0, 218, 219, 220, 424, 803, 769,
	804, 757, 790, 805, 0, 224, 759, 758, 227, 228,
	229, 732, 783, 806, 807, 430, 0, 230, 788, 0,
	774, 0, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 0, 240, 0, 241, 242, 0, 830, 243,
	244, 245, 777, 775, 776, 780, 0, 778, 779, 246,
	247, 474, 248, 791, 250, 808, 809, 715, 251, 0,
	252, 0, 253, 0, 0, 792, 255, 0, 256, 257,
	0, 0, 0, 720, 261, 258, 259, 262, 263, 260,
	264, 810, 811, 744, 831, 0, 0, 0, 0, 0,
	265, 266, 812, 793, 794, 0, 269, 0, 270, 0,
	0, 832, 271, 0, 272, 813, 0, 439, 0, 273,
	274, 275, 276, 277, 278, 785, 787, 834, 0, 768,
	0, 0, 0, 0, 279, 281, 288, 0, 833, 282,
	814, 772, 795, 796, 797, 798, 815, 0, 773, 0,
	289, 835, 836, 290, 291, 292, 837, 799, 800, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 816, 838,
	300, 301, 839, 0, 302, 303, 0, 0, 304, 0,
	305, 717, 716, 306, 307, 309, 761, 308, 840, 311,
	312, 314, 313, 712, 0, 841, 745, 786, 315, 817,
	316, 317, 0, 770, 771, 0, 0, 320, 321, 0,
	0, 322, 448, 842, 323, 843, 818, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 819, 332, 451, 333,
	0, 334, 335, 336, 337, 338, 820, 339, 340, 0,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 0, 353, 844, 0, 354, 355, 356,
	721, 357, 0, 361, 362, 363, 364, 365, 366, 367,
	0, 373, 374, 762, 763, 764, 765, 369, 375, 376,
	781, 377, 358, 359, 378, 845, 379, 821, 766, 381,
	0, 390, 382, 383, 384, 360, 385, 388, 801, 386,
	0, 387, 822, 0, 391, 392, 0, 393, 394, 395,
	396, 397, 398, 760, 400, 0, 823, 824, 802, 0,
	0, 402, 403, 825, 826, 743, 404, 405, 406, 407,
	0, 0, 408, 409, 410, 412, 782, 413, 0, 767,
	414, 415, 416, 460, 827, 0, 0, 417, 462, 0,
	0, 0, 0, 418, 419, 463, 420, 421, 422, 713,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 709, 710, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 1842, 725, 749, 737,
	738, 735, 736, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 250,
	808, 809, 715, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 717, 716, 306, 307,
	309, 761, 308, 840, 311, 312, 314, 313, 712, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 721, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 460, 827,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 713, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 710, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 1830, 725, 749, 737, 738, 735, 736, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 784,
	729, 0, 0, 0, 218, 219, 220, 424, 803, 769,
	804, 757, 790, 805, 0, 224, 759, 758, 227, 228,
	229, 732, 783, 806, 807, 430, 0, 230, 788, 0,
	774, 0, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 0, 240, 0, 241, 242, 0, 830, 243,
	244, 245, 777, 775, 776, 780, 0, 778, 779, 246,
	247, 474, 248, 791, 250, 808, 809, 715, 251, 0,
	252, 0, 253, 0, 0, 792, 255, 0, 256, 257,
	0, 0, 0, 720, 261, 258, 259, 262, 263, 260,
	264, 810, 811, 744, 831, 0, 0, 0, 0, 0,
	265, 266, 812, 793, 794, 0, 269, 0, 270, 0,
	0, 832, 271, 0, 272, 813, 0, 439, 0, 273,
	274, 275, 276, 277, 278, 785, 787, 834, 0, 768,
	0, 0, 0, 0, 279, 281, 288, 0, 833, 282,
	814, 772, 795, 796, 797, 798, 815, 0, 773, 0,
	289, 835, 836, 290, 291, 292, 837, 799, 800, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 816, 838,
	300, 301, 839, 0, 302, 303, 0, 0, 304, 0,
	305, 717, 716, 306, 307, 309, 761, 308, 840, 311,
	312, 314, 313, 712, 0, 841, 745, 786, 315, 817,
	316, 317, 0, 770, 771, 0, 0, 320, 321, 0,
	0, 322, 448, 842, 323, 843, 818, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 819, 332, 451, 333,
	0, 334, 335, 336, 337, 338, 820, 339, 340, 0,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 0, 353, 844, 0, 354, 355, 356,
	721, 357, 0, 361, 362, 363, 364, 365, 366, 367,
	0, 373, 374, 762, 763, 764, 765, 369, 375, 376,
	781, 377, 358, 359, 378, 845, 379, 821, 766, 381,
	0, 390, 382, 383, 384, 360, 385, 388, 801, 386,
	0, 387, 822, 0, 391, 392, 0, 393, 394, 395,
	396, 397, 398, 760, 400, 0, 823, 824, 802, 0,
	0, 402, 403, 825, 826, 743, 404, 405, 406, 407,
	0, 0, 408, 409, 410, 412, 782, 413, 0, 767,
	414, 415, 416, 460, 827, 0, 0, 417, 462, 0,
	0, 0, 0, 418, 419, 463, 420, 421, 422, 713,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 709, 710, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 1828, 725, 749, 737,
	738, 735, 736, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 250,
	808, 809, 715, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 717, 716, 306, 307,
	309, 761, 308, 840, 311, 312, 314, 313, 712, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 721, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 460, 827,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 713, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 710, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 1826, 725, 749, 737, 738, 735, 736, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 784,
	729, 0, 0, 0, 218, 219, 220, 424, 803, 769,
	804, 757, 790, 805, 0, 224, 759, 758, 227, 228,
	229, 732, 783, 806, 807, 430, 0, 230, 788, 0,
	774, 0, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 0, 240, 0, 241, 242, 0, 830, 243,
	244, 245, 777, 775, 776, 780, 0, 778, 779, 246,
	247, 474, 248, 791, 250, 808, 809, 715, 251, 0,
	252, 0, 253, 0, 0, 792, 255, 0, 256, 257,
	0, 0, 0, 720, 261, 258, 259, 262, 263, 260,
	264, 810, 811, 744, 831, 0, 0, 0, 0, 0,
	265, 266, 812, 793, 794, 0, 269, 0, 270, 0,
	0, 832, 271, 0, 272, 813, 0, 439, 0, 273,
	274, 275, 276, 277, 278, 785, 787, 834, 0, 768,
	0, 0, 0, 0, 279, 281, 288, 0, 833, 282,
	814, 772, 795, 796, 797, 798, 815, 0, 773, 0,
	289, 835, 836, 290, 291, 292, 837, 799, 800, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 816, 838,
	300, 301, 839, 0, 302, 303, 0, 0, 304, 0,
	305, 717, 716, 306, 307, 309, 761, 308, 840, 311,
	312, 314, 313, 712, 0, 841, 745, 786, 315, 817,
	316, 317, 0, 770, 771, 0, 0, 320, 321, 0,
	0, 322, 448, 842, 323, 843, 818, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 819, 332, 451, 333,
	0, 334, 335, 336, 337, 338, 820, 339, 340, 0,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 0, 353, 844, 0, 354, 355, 356,
	721, 357, 0, 361, 362, 363, 364, 365, 366, 367,
	0, 373, 374, 762, 763, 764, 765, 369, 375, 376,
	781, 377, 358, 359, 378, 845, 379, 821, 766, 381,
	0, 390, 382, 383, 384, 360, 385, 388, 801, 386,
	0, 387, 822, 0, 391, 392, 0, 393, 394, 395,
	396, 397, 398, 760, 400, 0, 823, 824, 802, 0,
	0, 402, 403, 825, 826, 743, 404, 405, 406, 407,
	0, 0, 408, 409, 410, 412, 782, 413, 0, 767,
	414, 415, 416, 460, 827, 0, 0, 417, 462, 0,
	0, 0, 0, 418, 419, 463, 420, 421, 422, 713,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 709, 710, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 1823, 725, 1815, 737,
	738, 735, 736, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 1818,
	808, 809, 715, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 1819, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 717, 716, 1820, 1817,
	309, 761, 308, 840, 311, 312, 314, 313, 712, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 721, 357, 0, 361, 362,
	363, 364, 365, 366, 1821, 0, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 460, 827,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 1816, 422, 713, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 710, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 1812, 725, 1815, 737, 738, 735, 736, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 784,
	729, 0, 0, 0, 218, 219, 220, 424, 803, 769,
	804, 757, 790, 805, 0, 224, 759, 758, 227, 228,
	229, 732, 783, 806, 807, 430, 0, 230, 788, 0,
	774, 0, 231, 232, 233, 234, 235, 0, 237, 238,
	239, 236, 0, 240, 0, 241, 242, 0, 830, 243,
	244, 245, 777, 775, 776, 780, 0, 778, 779, 246,
	247, 474, 248, 791, 1818, 808, 809, 715, 251, 0,
	252, 0, 253, 0, 0, 792, 255, 0, 256, 257,
	0, 0, 0, 720, 261, 258, 259, 262, 263, 260,
	264, 810, 811, 744, 831, 0, 0, 0, 0, 0,
	265, 266, 812, 793, 794, 0, 269, 0, 270, 0,
	0, 832, 271, 0, 272, 813, 0, 439, 0, 273,
	274, 1819, 276, 277, 278, 785, 787, 834, 0, 768,
	0, 0, 0, 0, 279, 281, 288, 0, 833, 282,
	814, 772, 795, 796, 797, 798, 815, 0, 773, 0,
	289, 835, 836, 290, 291, 292, 837, 799, 800, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 816, 838,
	300, 301, 839, 0, 302, 303, 0, 0, 304, 0,
	305, 717, 716, 1820, 1817, 309, 761, 308, 840, 311,
	312, 314, 313, 712, 0, 841, 745, 786, 315, 817,
	316, 317, 0, 770, 771, 0, 0, 320, 321, 0,
	0, 322, 448, 842, 323, 843, 818, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 819, 332, 451, 333,
	0, 334, 335, 336, 337, 338, 820, 339, 340, 0,
	341, 342, 343, 344, 345, 0, 347, 348, 346, 349,
	350, 351, 352, 0, 353, 844, 0, 354, 355, 356,
	721, 357, 0, 361, 362, 363, 364, 365, 366, 1821,
	0, 373, 374, 762, 763, 764, 765, 369, 375, 376,
	781, 377, 358, 359, 378, 845, 379, 821, 766, 381,
	0, 390, 382, 383, 384, 360, 385, 388, 801, 386,
	0, 387, 822, 0, 391, 392, 0, 393, 394, 395,
	396, 397, 398, 760, 400, 0, 823, 824, 802, 0,
	0, 402, 403, 825, 826, 743, 404, 405, 406, 407,
	0, 0, 408, 409, 410, 412, 782, 413, 0, 767,
	414, 415, 416, 460, 827, 0, 0, 417, 462, 0,
	0, 0, 0, 418, 419, 463, 420, 1816, 422, 713,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 709, 710, 749, 737, 738, 735, 736, 726,
	0, 722, 0, 0, 0, 0, 0, 725, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	784, 729, 0, 0, 0, 218, 219, 220, 424, 803,
	769, 804, 757, 790, 805, 0, 224, 759, 758, 227,
	228, 229, 732, 783, 806, 807, 430, 0, 230, 788,
	0, 774, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 777, 775, 776, 780, 0, 778, 779,
	246, 247, 474, 248, 791, 250, 808, 809, 715, 251,
	0, 252, 0, 253, 0, 0, 792, 255, 0, 256,
	257, 0, 0, 0, 720, 261, 258, 259, 262, 263,
	260, 264, 810, 811, 744, 831, 0, 0, 0, 0,
	0, 265, 266, 812, 793, 794, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 813, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 785, 787, 834, 0,
	768, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 814, 772, 795, 796, 797, 798, 815, 0, 773,
	0, 289, 835, 836, 290, 291, 292, 837, 799, 800,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 816,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 717, 716, 306, 307, 309, 761, 308, 840,
	311, 312, 314, 313, 712, 0, 841, 745, 786, 315,
	817, 316, 317, 0, 770, 771, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 818, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 819, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 820, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 721, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 762, 763, 764, 765, 369, 375,
	376, 781, 377, 358, 359, 378, 845, 379, 821, 766,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 801,
	386, 0, 387, 822, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 760, 400, 0, 823, 824, 802,
	0, 0, 402, 403, 825, 826, 743, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 782, 413, 0,
	767, 414, 415, 416, 460, 827, 0, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	713, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 0, 0, 709, 710, 0, 0, 0, 0, 0,
	1321, 0, 722, 0, 0, 0, 0, 0, 725, 749,
	737, 738, 735, 736, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 1667,
	217, 0, 0, 0, 0, 784, 729, 0, 0, 0,
	218, 219, 220, 424, 803, 769, 804, 757, 790, 805,
	0, 224, 759, 758, 227, 228, 229, 732, 783, 806,
	807, 430, 0, 230, 788, 0, 774, 0, 231, 232,
	233, 234, 235, 0, 237, 238, 239, 236, 0, 240,
	0, 241, 242, 0, 830, 243, 244, 245, 777, 775,
	776, 780, 0, 778, 779, 246, 247, 474, 248, 791,
	250, 808, 809, 715, 251, 0, 252, 0, 253, 0,
	0, 792, 255, 0, 256, 257, 0, 0, 0, 720,
	261, 258, 259, 262, 263, 260, 264, 810, 811, 744,
	831, 0, 0, 0, 0, 0, 265, 266, 812, 793,
	794, 0, 269, 0, 270, 0, 0, 832, 271, 0,
	272, 813, 0, 439, 0, 273, 274, 275, 276, 277,
	278, 785, 787, 834, 0, 768, 0, 0, 0, 0,
	279, 281, 288, 0, 833, 282, 814, 772, 795, 796,
	797, 798, 815, 0, 773, 0, 289, 835, 836, 290,
	291, 292, 837, 799, 800, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 816, 838, 300, 301, 839, 0,
	302, 303, 0, 0, 304, 0, 305, 717, 716, 306,
	307, 309, 761, 308, 840, 311, 312, 314, 313, 712,
	0, 841, 745, 786, 315, 817, 316, 317, 0, 770,
	771, 0, 0, 320, 321, 0, 0, 322, 448, 842,
	323, 843, 818, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 819, 332, 451, 333, 0, 334, 335, 336,
	337, 338, 820, 339, 340, 0, 341, 342, 343, 344,
	345, 0, 347, 348, 346, 349, 350, 351, 352, 0,
	353, 844, 0, 354, 355, 356, 721, 357, 0, 361,
	362, 363, 364, 365, 366, 367, 0, 373, 374, 762,
	763, 764, 765, 369, 375, 376, 781, 377, 358, 359,
	378, 845, 379, 821, 766, 381, 0, 390, 382, 383,
	384, 360, 385, 388, 801, 386, 0, 387, 822, 0,
	391, 392, 0, 393, 394, 395, 396, 397, 398, 760,
	400, 0, 823, 824, 802, 0, 0, 402, 403, 825,
	826, 743, 404, 405, 406, 407, 0, 0, 408, 409,
	410, 412, 782, 413, 0, 767, 414, 415, 416, 460,
	827, 0, 0, 417, 462, 0, 0, 0, 0, 418,
	419, 463, 420, 421, 422, 713, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 709, 710,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 0, 1037, 725, 749, 737, 738, 735, 736, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	784, 729, 0, 0, 0, 218, 219, 220, 424, 803,
	769, 804, 757, 790, 805, 0, 224, 759, 758, 227,
	228, 229, 732, 783, 806, 807, 430, 0, 230, 788,
	0, 774, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 777, 775, 776, 780, 0, 778, 779,
	246, 247, 474, 248, 791, 250, 808, 809, 715, 251,
	0, 252, 0, 253, 0, 0, 792, 255, 0, 256,
	257, 0, 0, 0, 720, 261, 258, 259, 262, 263,
	260, 264, 810, 811, 744, 831, 0, 0, 0, 0,
	0, 265, 266, 812, 793, 794, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 813, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 1036, 787, 834, 0,
	768, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 814, 772, 795, 796, 797, 798, 815, 0, 773,
	0, 289, 835, 836, 290, 291, 292, 837, 799, 800,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 816,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 717, 716, 306, 307, 309, 761, 308, 840,
	311, 312, 314, 313, 712, 0, 841, 745, 786, 315,
	817, 316, 317, 0, 770, 771, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 818, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 819, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 820, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 721, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 762, 763, 764, 765, 369, 375,
	376, 781, 377, 358, 359, 378, 845, 379, 821, 766,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 801,
	386, 0, 387, 822, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 760, 400, 0, 823, 824, 802,
	0, 0, 402, 403, 825, 826, 743, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 782, 413, 0,
	767, 414, 415, 416, 460, 827, 0, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	713, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 0, 0, 709, 710, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 1034, 725, 749,
	737, 738, 735, 736, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 784, 729, 0, 0, 0,
	218, 219, 220, 424, 803, 769, 804, 757, 790, 805,
	0, 224, 759, 758, 227, 228, 229, 732, 783, 806,
	807, 430, 0, 230, 788, 0, 774, 0, 231, 232,
	233, 234, 235, 0, 237, 238, 239, 236, 0, 240,
	0, 241, 242, 0, 830, 243, 244, 245, 777, 775,
	776, 780, 0, 778, 779, 246, 247, 474, 248, 791,
	250, 808, 809, 715, 251, 0, 252, 0, 253, 0,
	0, 792, 255, 0, 256, 257, 0, 0, 0, 720,
	261, 258, 259, 262, 263, 260, 264, 810, 811, 744,
	831, 0, 0, 0, 0, 0, 265, 266, 812, 793,
	794, 0, 269, 0, 270, 0, 0, 832, 271, 0,
	272, 813, 0, 439, 0, 273, 274, 275, 276, 277,
	278, 1033, 787, 834, 0, 768, 0, 0, 0, 0,
	279, 281, 288, 0, 833, 282, 814, 772, 795, 796,
	797, 798, 815, 0, 773, 0, 289, 835, 836, 290,
	291, 292, 837, 799, 800, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 816, 838, 300, 301, 839, 0,
	302, 303, 0, 0, 304, 0, 305, 717, 716, 306,
	307, 309, 761, 308, 840, 311, 312, 314, 313, 712,
	0, 841, 745, 786, 315, 817, 316, 317, 0, 770,
	771, 0, 0, 320, 321, 0, 0, 322, 448, 842,
	323, 843, 818, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 819, 332, 451, 333, 0, 334, 335, 336,
	337, 338, 820, 339, 340, 0, 341, 342, 343, 344,
	345, 0, 347, 348, 346, 349, 350, 351, 352, 0,
	353, 844, 0, 354, 355, 356, 721, 357, 0, 361,
	362, 363, 364, 365, 366, 367, 0, 373, 374, 762,
	763, 764, 765, 369, 375, 376, 781, 377, 358, 359,
	378, 845, 379, 821, 766, 381, 0, 390, 382, 383,
	384, 360, 385, 388, 801, 386, 0, 387, 822, 0,
	391, 392, 0, 393, 394, 395, 396, 397, 398, 760,
	400, 0, 823, 824, 802, 0, 0, 402, 403, 825,
	826, 743, 404, 405, 406, 407, 0, 0, 408, 409,
	410, 412, 782, 413, 0, 767, 414, 415, 416, 460,
	827, 0, 0, 417, 462, 0, 0, 0, 0, 418,
	419, 463, 420, 421, 422, 713, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 709, 710,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 0, 1031, 725, 749, 737, 738, 735, 736, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	784, 729, 0, 0, 0, 218, 219, 220, 424, 803,
	769, 804, 757, 790, 805, 0, 224, 759, 758, 227,
	228, 229, 732, 783, 806, 807, 430, 0, 230, 788,
	0, 774, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 777, 775, 776, 780, 0, 778, 779,
	246, 247, 474, 248, 791, 250, 808, 809, 715, 251,
	0, 252, 0, 253, 0, 0, 792, 255, 0, 256,
	257, 0, 0, 0, 720, 261, 258, 259, 262, 263,
	260, 264, 810, 811, 744, 831, 0, 0, 0, 0,
	0, 265, 266, 812, 793, 794, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 813, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 785, 787, 834, 0,
	768, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 814, 772, 795, 796, 797, 798, 815, 0, 773,
	0, 289, 835, 836, 290, 291, 292, 837, 799, 800,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 816,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 717, 716, 306, 307, 309, 761, 308, 840,
	311, 312, 314, 313, 712, 0, 841, 745, 786, 315,
	817, 316, 317, 0, 770, 771, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 818, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 819, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 820, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 721, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 762, 763, 764, 765, 369, 375,
	376, 781, 377, 358, 359, 378, 845, 379, 821, 766,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 801,
	386, 0, 387, 822, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 760, 400, 0, 823, 824, 802,
	0, 0, 402, 403, 825, 826, 743, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 782, 413, 0,
	767, 414, 415, 416, 460, 827, 0, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	713, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 0, 0, 709, 710, 749, 737, 738, 735, 736,
	726, 0, 722, 0, 0, 0, 0, 0, 725, 0,
	0, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 784, 729, 0, 0, 0, 218, 219, 220, 424,
	803, 769, 804, 757, 790, 805, 0, 224, 759, 758,
	227, 228, 229, 732, 783, 806, 807, 430, 0, 230,
	788, 0, 774, 0, 231, 232, 233, 234, 235, 0,
	237, 238, 239, 236, 0, 240, 0, 241, 242, 0,
	830, 243, 244, 245, 777, 775, 776, 780, 0, 778,
	779, 246, 247, 474, 248, 791, 250, 808, 809, 715,
	251, 0, 252, 0, 253, 0, 0, 792, 255, 0,
	256, 257, 0, 0, 0, 720, 261, 258, 259, 262,
	263, 260, 264, 810, 811, 744, 831, 0, 0, 0,
	0, 0, 265, 266, 812, 793, 794, 0, 269, 0,
	270, 0, 0, 832, 271, 0, 272, 813, 0, 439,
	0, 273, 274, 275, 276, 277, 278, 785, 787, 834,
	0, 768, 0, 0, 0, 0, 279, 281, 288, 0,
	833, 282, 814, 772, 795, 796, 797, 798, 815, 0,
	773, 0, 289, 835, 836, 290, 291, 292, 837, 799,
	800, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	816, 838, 300, 301, 839, 0, 302, 303, 0, 0,
	304, 0, 305, 717, 716, 306, 307, 309, 761, 308,
	840, 311, 312, 314, 313, 712, 0, 841, 745, 786,
	315, 817, 316, 317, 0, 770, 771, 0, 0, 320,
	321, 0, 0, 322, 448, 842, 323, 843, 818, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 819, 332,
	451, 333, 0, 334, 335, 336, 337, 338, 820, 339,
	340, 0, 341, 342, 343, 344, 345, 0, 347, 348,
	346, 349, 350, 351, 352, 0, 353, 844, 0, 354,
	355, 356, 721, 357, 0, 361, 362, 363, 364, 365,
	366, 367, 0, 373, 374, 762, 763, 764, 765, 369,
	375, 376, 781, 377, 358, 359, 378, 845, 379, 821,
	766, 381, 0, 390, 382, 383, 384, 360, 385, 388,
	801, 386, 0, 387, 822, 0, 391, 392, 0, 393,
	394, 395, 396, 397, 398, 760, 400, 0, 823, 824,
	802, 0, 0, 402, 403, 825, 826, 743, 404, 405,
	406, 407, 0, 0, 408, 409, 410, 412, 782, 413,
	0, 767, 414, 415, 416, 460, 827, 0, 0, 417,
	462, 0, 0, 0, 0, 418, 419, 463, 420, 421,
	422, 713, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 709, 710, 749, 737, 738, 735,
	736, 726, 0, 722, 0, 0, 0, 0, 0, 725,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 784, 729, 0, 0, 0, 218, 219, 220,
	424, 803, 769, 804, 757, 790, 805, 0, 224, 759,
	758, 227, 228, 229, 732, 783, 806, 807, 430, 0,
	230, 788, 0, 774, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 830, 243, 244, 2989, 777, 775, 776, 780, 0,
	778, 779, 246, 247, 474, 248, 791, 250, 808, 809,
	715, 251, 0, 252, 0, 253, 0, 0, 792, 255,
	0, 256, 257, 0, 0, 0, 720, 261, 258, 259,
	262, 263, 260, 264, 810, 811, 744, 831, 0, 0,
	0, 0, 0, 265, 266, 812, 793, 794, 0, 269,
	0, 270, 0, 0, 832, 271, 0, 272, 813, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 785, 787,
	834, 0, 768, 0, 0, 0, 0, 279, 281, 288,
	0, 833, 282, 814, 772, 795, 796, 797, 798, 815,
	0, 773, 0, 289, 835, 836, 290, 291, 292, 837,
	799, 800, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 816, 838, 300, 301, 839, 0, 302, 303, 0,
	0, 304, 0, 305, 717, 716, 306, 307, 309, 761,
	308, 840, 311, 312, 314, 313, 712, 0, 841, 745,
	786, 315, 817, 316, 317, 0, 770, 771, 0, 0,
	320, 321, 0, 0, 322, 448, 842, 323, 843, 818,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 819,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 820,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 844, 0,
	354, 355, 356, 721, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 762, 763, 764, 765,
	369, 375, 376, 781, 377, 358, 359, 378, 845, 379,
	821, 766, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 801, 386, 0, 387, 822, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 760, 400, 0, 823,
	824, 802, 0, 0, 402, 403, 825, 826, 743, 404,
	405, 2988, 407, 0, 0, 408, 409, 410, 412, 782,
	413, 0, 767, 414, 415, 416, 460, 827, 0, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 713, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 0, 0, 709, 710, 749, 737, 738,
	735, 736, 726, 0, 722, 0, 0, 0, 0, 0,
	725, 0, 0, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 784, 729, 0, 0, 0, 218, 219,
	220, 2987, 803, 769, 804, 757, 790, 805, 0, 224,
	759, 758, 227, 228, 229, 732, 783, 806, 807, 430,
	0, 230, 788, 0, 774, 0, 231, 232, 233, 234,
	235, 0, 237, 238, 239, 236, 0, 240, 0, 241,
	242, 0, 830, 243, 244, 2989, 777, 775, 776, 780,
	0, 778, 779, 246, 247, 474, 248, 791, 250, 808,
	809, 715, 251, 0, 252, 0, 253, 0, 0, 792,
	255, 0, 256, 257, 0, 0, 0, 720, 261, 258,
	259, 262, 263, 260, 264, 810, 811, 744, 831, 0,
	0, 0, 0, 0, 265, 266, 812, 793, 794, 0,
	269, 0, 270, 0, 0, 832, 271, 0, 272, 813,
	0, 439, 0, 273, 274, 275, 276, 277, 278, 785,
	787, 834, 0, 768, 0, 0, 0, 0, 279, 281,
	288, 0, 833, 282, 814, 772, 795, 796, 797, 798,
	815, 0, 773, 0, 289, 835, 836, 290, 291, 292,
	837, 799, 800, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 816, 838, 300, 301, 839, 0, 302, 303,
	0, 0, 304, 0, 305, 717, 716, 306, 307, 309,
	761, 308, 840, 311, 312, 314, 313, 712, 0, 841,
	745, 786, 315, 817, 316, 317, 0, 770, 771, 0,
	0, 320, 321, 0, 0, 322, 448, 842, 323, 843,
	818, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	819, 332, 451, 333, 0, 334, 335, 336, 337, 338,
	820, 339, 340, 0, 341, 342, 343, 344, 345, 0,
	347, 348, 346, 349, 350, 351, 352, 0, 353, 844,
	0, 354, 355, 356, 721, 357, 0, 361, 362, 363,
	364, 365, 366, 367, 0, 373, 374, 762, 763, 764,
	765, 369, 375, 376, 781, 377, 358, 359, 378, 845,
	379, 821, 766, 381, 0, 390, 382, 383, 384, 360,
	385, 388, 801, 386, 0, 387, 822, 0, 391, 392,
	0, 393, 394, 395, 396, 397, 398, 760, 400, 0,
	823, 824, 802, 0, 0, 402, 403, 825, 826, 743,
	404, 405, 2988, 407, 0, 0, 408, 409, 410, 412,
	782, 413, 0, 767, 414, 415, 416, 460, 827, 0,
	0, 417, 462, 0, 0, 0, 0, 418, 419, 463,
	420, 421, 422, 713, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 709, 710, 749, 737,
	738, 735, 736, 726, 0, 722, 0, 0, 0, 0,
	0, 725, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 784, 729, 0, 0, 0, 218,
	219, 220, 424, 803, 769, 804, 757, 790, 805, 0,
	224, 759, 758, 227, 228, 229, 732, 783, 806, 807,
	430, 0, 230, 788, 0, 774, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 777, 775, 776,
	780, 0, 778, 779, 246, 247, 474, 248, 791, 250,
	808, 809, 0, 251, 0, 252, 0, 253, 0, 0,
	792, 255, 0, 256, 257, 0, 0, 0, 720, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 744, 831,
	0, 0, 0, 0, 0, 265, 266, 812, 793, 794,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	785, 787, 834, 0, 768, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 814, 772, 795, 796, 797,
	798, 815, 0, 773, 0, 289, 835, 836, 290, 291,
	292, 837, 799, 800, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 900, 899, 306, 307,
	309, 761, 308, 840, 311, 312, 314, 313, 0, 0,
	841, 745, 786, 315, 817, 316, 317, 0, 770, 771,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 820, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 1840, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 762, 763,
	764, 765, 369, 375, 376, 781, 377, 358, 359, 378,
	845, 379, 821, 766, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 801, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 760, 400,
	0, 823, 824, 802, 0, 0, 402, 403, 825, 826,
	743, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 782, 413, 0, 767, 414, 415, 416, 460, 827,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 749, 737, 738, 735, 736, 726,
	0, 0, 1838, 0, 0, 0, 0, 1836, 1837, 0,
	213, 214, 215, 216, 0, 217, 1839, 0, 0, 0,
	784, 729, 725, 0, 0, 218, 219, 220, 0, 803,
	769, 804, 757, 790, 805, 0, 224, 759, 758, 227,
	228, 229, 732, 783, 806, 807, 430, 0, 230, 788,
	0, 774, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 2989, 777, 775, 776, 780, 0, 778, 779,
	246, 247, 474, 248, 791, 250, 808, 809, 715, 251,
	0, 252, 0, 253, 0, 0, 792, 255, 0, 256,
	257, 0, 0, 0, 720, 261, 258, 259, 262, 263,
	260, 264, 810, 811, 744, 831, 0, 0, 0, 0,
	0, 265, 266, 812, 793, 794, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 813, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 785, 787, 0, 0,
	768, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 814, 772, 795, 796, 797, 798, 815, 0, 773,
	0, 289, 0, 0, 290, 291, 292, 837, 799, 800,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 816,
	838, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 717, 716, 306, 307, 309, 761, 308, 840,
	311, 312, 314, 313, 712, 0, 0, 745, 786, 315,
	817, 316, 317, 0, 770, 771, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 818, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 819, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 820, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 721, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 762, 763, 764, 765, 369, 375,
	376, 781, 377, 358, 359, 378, 0, 379, 821, 766,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 801,
	386, 0, 387, 822, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 760, 400, 0, 823, 824, 802,
	0, 0, 402, 403, 825, 826, 743, 404, 405, 2988,
	407, 0, 0, 408, 409, 410, 412, 782, 413, 0,
	767, 414, 415, 416, 460, 827, 0, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 697, 0, 896, 0,
	0, 0, 0, 709, 710, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 213, 214, 215, 216, 725, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 898, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 0, 892, 893,
	0, 0, 894, 895, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 0, 831,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 834, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 835, 836, 290, 291,
	292, 837, 293, 294, 0, 0, 295, 296, 297, 884,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 900, 899, 306, 307,
	309, 310, 308, 840, 311, 312, 314, 313, 0, 0,
	841, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 890, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 168, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	845, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 822, 0, 391,
	392, 170, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 825, 826,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 1109, 461,
	0, 0, 417, 462, 0, 0, 896, 162, 418, 419,
	463, 420, 421, 422, 0, 163, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 881, 0, 1405, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 898, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 830, 243, 244, 245, 0, 892, 893, 0, 0,
	894, 895, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 810, 811, 0, 831, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 832, 271, 0, 272, 813, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	834, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 833, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 835, 836, 290, 291, 292, 837,
	293, 294, 0, 0, 295, 296, 297, 884, 299, 298,
	0, 816, 838, 300, 301, 839, 0, 302, 303, 0,
	0, 304, 0, 305, 900, 899, 306, 307, 309, 310,
	308, 840, 311, 312, 314, 313, 0, 0, 841, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 890,
	320, 321, 0, 0, 322, 448, 842, 323, 843, 818,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 819,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 844, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 168, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 845, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 822, 0, 391, 392, 170,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 825, 826, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 1109, 461, 0, 0,
	417, 462, 0, 0, 896, 162, 418, 419, 463, 420,
	421, 422, 0, 163, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	784, 0, 881, 0, 1405, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 783, 428, 429, 430, 0, 230, 788,
	0, 774, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 777, 775, 776, 780, 0, 778, 779,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 810, 811, 0, 831, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 813, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 785, 787, 834, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 835, 836, 290, 291, 292, 837, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 816,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 900, 899, 306, 307, 309, 310, 308, 840,
	311, 312, 314, 313, 0, 0, 841, 0, 786, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 818, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 819, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 781, 377, 358, 359, 378, 845, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 822, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 825, 826, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 782, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	2220, 0, 896, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 2539, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 898,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 830, 243, 244,
	245, 0, 892, 893, 0, 0, 894, 895, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	810, 811, 0, 831, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	832, 271, 0, 272, 813, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 834, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 833, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	835, 836, 290, 291, 292, 837, 293, 294, 0, 0,
	295, 296, 297, 884, 299, 298, 0, 816, 838, 300,
	301, 839, 0, 302, 303, 0, 0, 304, 0, 305,
	900, 899, 306, 307, 309, 310, 308, 840, 311, 312,
	314, 313, 0, 0, 841, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 890, 320, 321, 0, 0,
	322, 448, 842, 323, 843, 818, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 819, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 844, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 845, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 822, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 825, 826, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 880, 0,
	896, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 881, 0,
	888, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 898, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 830, 243, 244, 245, 0,
	892, 893, 0, 0, 894, 895, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 810, 811,
	0, 831, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 832, 271,
	0, 272, 813, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 834, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 833, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 835, 836,
	290, 291, 292, 837, 293, 294, 0, 0, 295, 296,
	297, 884, 299, 298, 0, 816, 838, 300, 301, 839,
	0, 302, 303, 0, 0, 304, 0, 305, 900, 899,
	306, 307, 309, 310, 308, 840, 311, 312, 314, 313,
	0, 0, 841, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 890, 320, 321, 0, 0, 322, 448,
	842, 323, 843, 818, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 819, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 844, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 845, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 822,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	825, 826, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 0, 0, 896, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 881, 0, 888, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 898, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 0, 892, 893,
	0, 0, 894, 895, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 810, 811, 0, 831,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	813, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 834, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 835, 836, 290, 291,
	292, 837, 293, 294, 0, 0, 295, 296, 297, 884,
	299, 298, 0, 816, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 900, 899, 306, 307,
	309, 310, 308, 840, 311, 312, 314, 313, 0, 0,
	841, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 890, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 818, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 819, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	845, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 822, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 825, 826,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 1106, 0, 921, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 881, 0, 888, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 898, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 830, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 831, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 832, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	834, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 833, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 835, 836, 290, 291, 292, 837,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 838, 300, 301, 839, 0, 302, 303, 0,
	0, 304, 0, 305, 900, 899, 306, 307, 309, 310,
	308, 840, 311, 312, 314, 313, 0, 0, 841, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 842, 323, 843, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 844, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 168, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 845, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 170,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 1109, 461, 0, 0,
	417, 462, 0, 0, 896, 162, 418, 419, 463, 420,
	421, 422, 0, 163, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 135, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 898, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 0, 892, 893, 0, 0, 894, 895,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 810, 811, 0, 831, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 813, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 834, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 835, 836, 290, 291, 292, 837, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 816,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 900, 899, 306, 307, 309, 310, 308, 840,
	311, 312, 314, 313, 0, 0, 841, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 818, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 819, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 845, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 822, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 825, 826, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	697, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 1311, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 168,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 170, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 1109, 461, 0, 0, 417, 462, 0, 0,
	0, 162, 418, 419, 463, 420, 421, 422, 0, 163,
	749, 737, 738, 735, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	135, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 803, 769, 804, 757, 790,
	805, 0, 224, 759, 758, 227, 228, 229, 0, 0,
	806, 807, 430, 0, 230, 431, 0, 898, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 830, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	791, 250, 808, 809, 0, 251, 0, 252, 0, 253,
	0, 0, 792, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	744, 831, 0, 0, 0, 0, 0, 265, 266, 812,
	793, 794, 0, 269, 0, 270, 0, 0, 832, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 834, 0, 768, 0, 0, 0,
	0, 279, 281, 288, 0, 833, 282, 814, 772, 795,
	796, 797, 798, 815, 0, 773, 0, 289, 835, 836,
	290, 291, 292, 837, 799, 800, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 838, 300, 301, 839,
	0, 302, 303, 0, 0, 304, 0, 305, 900, 899,
	306, 307, 309, 761, 308, 840, 311, 312, 314, 313,
	0, 0, 841, 745, 446, 315, 817, 316, 317, 0,
	770, 771, 0, 0, 320, 321, 0, 0, 322, 448,
	842, 323, 843, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 820, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 844, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	762, 763, 764, 765, 369, 375, 376, 0, 377, 358,
	359, 378, 845, 379, 821, 766, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 801, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	760, 400, 0, 823, 824, 802, 0, 0, 402, 403,
	458, 459, 743, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 767, 414, 415, 416,
	460, 827, 210, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 0, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	2019, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 0, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 2451, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 1102, 0, 921, 920, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 1409, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 898, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 830, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 831, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 832, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 1101, 441,
	834, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 833, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 835, 836, 290, 291, 292, 837,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 838, 300, 301, 839, 0, 302, 303, 0,
	0, 304, 0, 305, 900, 899, 306, 307, 309, 310,
	308, 840, 311, 312, 314, 313, 0, 0, 841, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 842, 323, 843, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 844, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 845, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 1098, 0, 921, 920, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 898, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 831, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 1097, 441, 834, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 835, 836, 290, 291, 292, 837, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 900, 899, 306, 307, 309, 310, 308, 840,
	311, 312, 314, 313, 0, 0, 841, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 845, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	1059, 0, 921, 920, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 898,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 830, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 831, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	832, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 1058, 441, 834, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 833, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	835, 836, 290, 291, 292, 837, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 838, 300,
	301, 839, 0, 302, 303, 0, 0, 304, 0, 305,
	900, 899, 306, 307, 309, 310, 308, 840, 311, 312,
	314, 313, 0, 0, 841, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 842, 323, 843, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 844, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 845, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 0, 0,
	0, 0, 418, 419, 463, 420, 421, 422, 1056, 0,
	921, 920, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 898, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 830, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 831, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 832, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 1055, 441, 834, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 833, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 835, 836,
	290, 291, 292, 837, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 838, 300, 301, 839,
	0, 302, 303, 0, 0, 304, 0, 305, 900, 899,
	306, 307, 309, 310, 308, 840, 311, 312, 314, 313,
	0, 0, 841, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	842, 323, 843, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 844, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 845, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 914, 0, 921, 920,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 898, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 830, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 831,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 832, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	916, 441, 834, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 833, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 835, 836, 290, 291,
	292, 837, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 838, 300, 301, 839, 0, 302,
	303, 0, 0, 304, 0, 305, 900, 899, 306, 307,
	309, 310, 308, 840, 311, 312, 314, 313, 0, 0,
	841, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 842, 323,
	843, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	844, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	845, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	921, 920, 417, 462, 0, 918, 0, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 898, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 830, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 831, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 832, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 834, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 833, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 835, 836,
	290, 291, 292, 837, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 838, 300, 301, 839,
	0, 302, 303, 0, 0, 304, 0, 305, 900, 899,
	306, 307, 309, 310, 308, 840, 311, 312, 314, 313,
	0, 0, 841, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	842, 323, 843, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 844, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 845, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 921, 920, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 898,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 830, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 831, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	832, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 834, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 833, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	835, 836, 290, 291, 292, 837, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 838, 300,
	301, 839, 0, 302, 303, 0, 0, 304, 0, 305,
	900, 899, 306, 307, 309, 310, 308, 840, 311, 312,
	314, 313, 0, 0, 841, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 842, 323, 843, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 844, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 845, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 921, 0, 417, 462, 0, 0,
	0, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 898, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 830,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 831, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 832, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 834, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 833,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 835, 836, 290, 291, 292, 837, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	838, 300, 301, 839, 0, 302, 303, 0, 0, 304,
	0, 305, 900, 899, 306, 307, 309, 310, 308, 840,
	311, 312, 314, 313, 0, 0, 841, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 842, 323, 843, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 844, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 845, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 210, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 205, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 1634,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 204,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 569, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 209, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 205, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 204, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	202, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 209, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	205, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 204, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 210, 0, 417, 462, 0, 0,
	0, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 209, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 205, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 204, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 210, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 209, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 210, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 209, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 1915, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 1912, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 1989,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 1918, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 1987, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 1986, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 1917, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 1988, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	210, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 1915, 230, 431, 0, 0, 1909, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 1912,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 1918, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 1908, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 1917, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 1916, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 575, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 574, 556, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 559, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 560, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 561, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 555, 0, 210, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 556, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	559, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 560, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 561, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 210, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 559, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 560, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 561, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 1077, 0, 210, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 890,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 909, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 911, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 890, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	906, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 908, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 890, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 902, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 904, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 890, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 494, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 493, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 492, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	210, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 1895, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 210, 2386, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 210, 2386, 417, 462, 0, 0,
	0, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 2383,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 210, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 890,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 1656, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	1654, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 1652, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 210, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 1630, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 1590, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 1588, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 601, 0, 210, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 1151, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	602, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 598, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 597,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 1488, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 1487, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	601, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 1151, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 602, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 598, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 597, 457, 401, 0, 0,
	402, 1152, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 601, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 591, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 602, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 598, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 1127, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 597, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 1095, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	1094, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 1091, 0, 210, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 1090, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 1088, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 1087, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	1085, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 1084, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 1081, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 1080, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 210, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 1069, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 1067, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 1066, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 1061, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 1052, 0, 210, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 1051, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 1047, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	1043, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 1045, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 928, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 930, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 925, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	0, 0, 417, 462, 601, 0, 210, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	591, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 590, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	602, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 592, 357, 0, 361, 362, 598, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 593, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 597,
	457, 401, 0, 0, 402, 595, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 581, 0, 210, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 582, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 0, 0, 417, 462,
	577, 0, 210, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 440, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 0, 0, 417, 462, 567, 0,
	210, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 0, 0, 417, 462, 516, 0, 210, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 361, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	210, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 377, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 210, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 2277, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 210, 0, 417, 462, 0, 0,
	0, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 2275, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 339, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 210, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 2264, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 337, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 357, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 210, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 0, 0, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 218,
	219, 220, 424, 425, 221, 426, 222, 223, 427, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 428, 429,
	430, 0, 230, 431, 0, 0, 0, 231, 232, 233,
	234, 235, 0, 237, 238, 239, 236, 0, 240, 0,
	241, 242, 0, 0, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 474, 248, 249, 250,
	432, 433, 0, 251, 0, 252, 0, 253, 0, 0,
	254, 255, 0, 256, 257, 0, 0, 0, 434, 261,
	258, 259, 262, 263, 260, 264, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 437, 267, 268,
	0, 269, 0, 270, 0, 0, 0, 271, 0, 272,
	438, 0, 439, 0, 273, 274, 275, 276, 277, 278,
	440, 441, 0, 0, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 442, 284, 283, 285, 286,
	287, 443, 0, 444, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 445, 0, 300, 301, 0, 0, 302,
	303, 0, 0, 304, 0, 305, 0, 0, 306, 307,
	309, 310, 308, 0, 311, 312, 314, 313, 0, 0,
	0, 0, 446, 315, 447, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 448, 0, 323,
	0, 449, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 450, 332, 451, 333, 0, 334, 335, 336, 337,
	338, 452, 339, 340, 0, 341, 342, 343, 344, 345,
	0, 347, 348, 346, 349, 350, 351, 352, 0, 353,
	0, 0, 354, 355, 356, 453, 357, 0, 582, 362,
	363, 364, 365, 366, 367, 0, 373, 374, 368, 370,
	371, 372, 369, 375, 376, 0, 377, 358, 359, 378,
	0, 379, 454, 380, 381, 0, 390, 382, 383, 384,
	360, 385, 388, 389, 386, 0, 387, 455, 0, 391,
	392, 0, 393, 394, 395, 396, 397, 398, 399, 400,
	0, 456, 457, 401, 0, 0, 402, 403, 458, 459,
	0, 404, 405, 406, 407, 0, 0, 408, 409, 410,
	412, 0, 413, 0, 411, 414, 415, 416, 460, 461,
	210, 0, 417, 462, 0, 0, 0, 0, 418, 419,
	463, 420, 421, 422, 0, 0, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 423, 0, 1501, 0,
	0, 218, 219, 220, 424, 425, 221, 426, 222, 223,
	427, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	428, 429, 430, 0, 230, 431, 0, 0, 0, 231,
	232, 233, 234, 235, 0, 237, 238, 239, 236, 0,
	240, 0, 241, 242, 0, 0, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 474, 248,
	249, 250, 432, 433, 0, 251, 0, 252, 0, 253,
	0, 0, 254, 255, 0, 256, 257, 0, 0, 0,
	434, 261, 258, 259, 262, 263, 260, 264, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 437,
	267, 268, 0, 269, 0, 270, 0, 0, 0, 271,
	0, 272, 438, 0, 439, 0, 273, 274, 275, 276,
	277, 278, 440, 441, 0, 0, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 442, 284, 283,
	285, 286, 287, 443, 0, 444, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 445, 0, 300, 301, 0,
	0, 302, 303, 0, 0, 304, 0, 305, 0, 0,
	306, 307, 309, 310, 308, 0, 311, 312, 314, 313,
	0, 0, 0, 0, 446, 315, 447, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 448,
	0, 323, 0, 449, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 450, 332, 451, 333, 0, 334, 335,
	336, 337, 338, 452, 339, 340, 0, 341, 342, 343,
	344, 345, 0, 347, 348, 346, 349, 350, 351, 352,
	0, 353, 0, 0, 354, 355, 356, 453, 357, 0,
	361, 362, 363, 364, 365, 366, 367, 0, 373, 374,
	368, 370, 371, 372, 369, 375, 376, 0, 0, 358,
	359, 378, 0, 379, 454, 380, 381, 0, 390, 382,
	383, 384, 360, 385, 388, 389, 386, 0, 387, 455,
	0, 391, 392, 0, 393, 394, 395, 396, 397, 398,
	399, 400, 0, 456, 457, 401, 0, 0, 402, 403,
	458, 459, 0, 404, 405, 406, 407, 0, 0, 408,
	409, 410, 412, 0, 413, 0, 411, 414, 415, 416,
	460, 461, 210, 0, 417, 462, 0, 0, 0, 0,
	418, 419, 463, 420, 421, 422, 0, 0, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 218, 219, 220, 424, 425, 221, 426,
	222, 223, 427, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 428, 429, 430, 0, 230, 431, 0, 0,
	0, 231, 232, 233, 234, 235, 0, 237, 238, 239,
	236, 0, 240, 0, 241, 242, 0, 0, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	474, 248, 249, 250, 432, 433, 0, 251, 0, 252,
	0, 253, 0, 0, 254, 255, 0, 256, 257, 0,
	0, 0, 434, 261, 258, 259, 262, 263, 260, 264,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 437, 267, 268, 0, 269, 0, 270, 0, 0,
	0, 271, 0, 272, 438, 0, 439, 0, 273, 274,
	275, 276, 277, 278, 1492, 441, 0, 0, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 442,
	284, 283, 285, 286, 287, 443, 0, 444, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 445, 0, 300,
	301, 0, 0, 302, 303, 0, 0, 304, 0, 305,
	0, 0, 306, 307, 309, 310, 308, 0, 311, 312,
	314, 313, 0, 0, 0, 0, 446, 315, 447, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 448, 0, 323, 0, 449, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 450, 332, 451, 333, 0,
	334, 335, 336, 337, 338, 452, 339, 340, 0, 341,
	342, 343, 344, 345, 0, 347, 348, 346, 349, 350,
	351, 352, 0, 353, 0, 0, 354, 355, 356, 453,
	357, 0, 361, 362, 363, 364, 365, 366, 367, 0,
	373, 374, 368, 370, 371, 372, 369, 375, 376, 0,
	377, 358, 359, 378, 0, 379, 454, 380, 381, 0,
	390, 382, 383, 384, 360, 385, 388, 389, 386, 0,
	387, 455, 0, 391, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 456, 457, 401, 0, 0,
	402, 403, 458, 459, 0, 404, 405, 406, 407, 0,
	0, 408, 409, 410, 412, 0, 413, 0, 411, 414,
	415, 416, 460, 461, 210, 0, 417, 462, 0, 0,
	0, 0, 418, 419, 463, 420, 421, 422, 0, 0,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 218, 219, 220, 424, 425,
	221, 426, 222, 223, 427, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 428, 429, 430, 0, 230, 431,
	0, 0, 0, 231, 232, 233, 234, 235, 0, 237,
	238, 239, 236, 0, 240, 0, 241, 242, 0, 0,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 474, 248, 249, 250, 432, 433, 0, 251,
	0, 252, 0, 253, 0, 0, 254, 255, 0, 256,
	257, 0, 0, 0, 434, 261, 258, 259, 262, 263,
	260, 264, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 437, 267, 268, 0, 269, 0, 270,
	0, 0, 0, 271, 0, 272, 438, 0, 439, 0,
	273, 274, 275, 276, 277, 278, 440, 441, 0, 0,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 442, 284, 283, 285, 286, 287, 443, 0, 444,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 445,
	0, 300, 301, 0, 0, 302, 303, 0, 0, 304,
	0, 305, 0, 0, 306, 307, 309, 310, 308, 0,
	311, 312, 314, 313, 0, 0, 0, 0, 446, 315,
	447, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 448, 0, 323, 0, 449, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 450, 332, 451,
	333, 0, 334, 335, 336, 337, 338, 452, 863, 340,
	0, 341, 342, 343, 344, 345, 0, 347, 348, 346,
	349, 350, 351, 352, 0, 353, 0, 0, 354, 355,
	356, 453, 357, 0, 361, 362, 363, 364, 365, 366,
	367, 0, 373, 374, 368, 370, 371, 372, 369, 375,
	376, 0, 377, 358, 359, 378, 0, 379, 454, 380,
	381, 0, 390, 382, 383, 384, 360, 385, 388, 389,
	386, 0, 387, 455, 0, 391, 392, 0, 393, 394,
	395, 396, 397, 398, 399, 400, 0, 456, 457, 401,
	0, 0, 402, 403, 458, 459, 0, 404, 405, 406,
	407, 0, 0, 408, 409, 410, 412, 0, 413, 0,
	411, 414, 415, 416, 460, 461, 210, 0, 417, 462,
	0, 0, 0, 0, 418, 419, 463, 420, 421, 422,
	0, 0, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 218, 219, 220,
	424, 425, 221, 426, 222, 223, 427, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 428, 429, 430, 0,
	230, 431, 0, 0, 0, 231, 232, 233, 234, 235,
	0, 237, 238, 239, 236, 0, 240, 0, 241, 242,
	0, 0, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 474, 248, 249, 250, 432, 433,
	0, 251, 0, 252, 0, 253, 0, 0, 254, 255,
	0, 256, 257, 0, 0, 0, 434, 261, 258, 259,
	262, 263, 260, 264, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 437, 267, 268, 0, 269,
	0, 270, 0, 0, 0, 271, 0, 272, 438, 0,
	439, 0, 273, 274, 275, 276, 277, 278, 440, 441,
	0, 0, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 442, 284, 283, 285, 286, 287, 443,
	0, 444, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 445, 0, 300, 301, 0, 0, 302, 303, 0,
	0, 304, 0, 305, 0, 0, 306, 307, 309, 310,
	308, 0, 311, 312, 314, 313, 0, 0, 0, 0,
	446, 315, 447, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 448, 0, 323, 0, 449,
	324, 325, 326, 0, 328, 329, 330, 0, 331, 450,
	332, 451, 333, 0, 334, 335, 336, 0, 338, 452,
	339, 340, 0, 341, 342, 343, 344, 345, 0, 347,
	348, 346, 349, 350, 351, 352, 0, 353, 0, 0,
	354, 355, 356, 453, 0, 0, 361, 362, 363, 364,
	365, 366, 367, 0, 373, 374, 368, 370, 371, 372,
	369, 375, 376, 0, 377, 358, 359, 378, 0, 379,
	454, 380, 381, 0, 390, 382, 383, 384, 360, 385,
	388, 389, 386, 0, 387, 455, 0, 391, 392, 0,
	393, 394, 395, 396, 397, 398, 399, 400, 0, 456,
	457, 401, 0, 0, 402, 403, 458, 459, 0, 404,
	405, 406, 407, 0, 0, 408, 409, 410, 412, 0,
	413, 0, 411, 414, 415, 416, 460, 461, 0, 0,
	417, 462, 0, 0, 0, 0, 418, 419, 463, 420,
	421, 422, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 0, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 1284, 0,
	1270, 0, 0, 0, 0, 1251, 0, 1267, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1250, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1298, 0, 1278, 1279, 1280, 0, 1273, 1274, 1275,
	1276, 0, 0, 0, 0, 0, 1256, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 0, 1288, 1298,
	0, 1278, 1279, 1280, 0, 1286, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 0, 0, 0, 1296, 0,
	1265, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 1286, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 0, 0, 0, 0,
	0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291,
	1292, 1293, 0, 0, 0, 0, 1277, 0, 1289, 0,
	0, 1284, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 1297, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1250, 0, 0, 1289, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 2158,
	1273, 1274, 1275, 1276, 0, 0, 0, 0, 0, 1256,
	1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290, 0,
	1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 0,
	0, 1288, 1298, 0, 1278, 1279, 1280, 2157, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	1284, 0, 0, 1265, 1266, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1296,
	1270, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 1272, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289,
	1288, 1298, 0, 1278, 1279, 1280, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 1286, 1270, 0, 0, 0,
	0, 0, 1271, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 1285, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	2156, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 1288, 1298, 0, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 0,
	1294, 1295, 0, 0, 0, 1284, 0, 0, 1265, 1266,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 1296, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 1277, 0, 0, 0, 0, 2155,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 1272, 0, 1256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291,
	1292, 1293, 0, 0, 1289, 1288, 1298, 0, 1278, 1279,
	1280, 1284, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 0,
	1286, 1270, 0, 0, 0, 0, 0, 1271, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 1287, 0,
	0, 1262, 1263, 1269, 1268, 1264, 1290, 1285, 1261, 1259,
	1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0,
	0, 2948, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 1274, 1275, 1276, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 1289, 0, 1294, 1295, 0, 0, 0,
	1284, 0, 0, 1265, 1266, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1296,
	1270, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 1277,
	2888, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 1272, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289,
	1288, 1298, 0, 1278, 1279, 1280, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 1286, 1270, 0, 0, 0,
	0, 0, 1271, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 1285, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 0, 0, 2837, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 1288, 1298, 0, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 0,
	1294, 1295, 0, 0, 0, 1284, 0, 0, 1265, 1266,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 1296, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 1277, 2804, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 1272, 0, 1256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291,
	1292, 1293, 0, 0, 1289, 1288, 1298, 0, 1278, 1279,
	1280, 1284, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 0,
	1286, 1270, 0, 0, 0, 0, 0, 1271, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 1287, 0,
	0, 1262, 1263, 1269, 1268, 1264, 1290, 1285, 1261, 1259,
	1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0,
	0, 2798, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 1274, 1275, 1276, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 1289, 0, 1294, 1295, 0, 0, 0,
	1284, 0, 0, 1265, 1266, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1296,
	1270, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 1277,
	2792, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 1272, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289,
	1288, 1298, 0, 1278, 1279, 1280, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 1286, 1270, 0, 0, 0,
	0, 0, 1271, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 1285, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 0, 0, 2709, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 1288, 1298, 0, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 0,
	1294, 1295, 0, 0, 0, 1284, 0, 0, 1265, 1266,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 1296, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 1277, 2664, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 1272, 0, 1256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291,
	1292, 1293, 0, 0, 1289, 1288, 1298, 0, 1278, 1279,
	1280, 1284, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 0,
	1286, 1270, 0, 0, 0, 0, 0, 1271, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 1287, 0,
	0, 1262, 1263, 1269, 1268, 1264, 1290, 1285, 1261, 1259,
	1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0,
	0, 2663, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 1274, 1275, 1276, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 1289, 0, 1294, 1295, 0, 0, 0,
	1284, 0, 0, 1265, 1266, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1296,
	1270, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 1277,
	2635, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 1272, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289,
	1288, 1298, 0, 1278, 1279, 1280, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 1286, 1270, 0, 0, 0,
	0, 0, 1271, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 1285, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 0, 0, 2455, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 1288, 1298, 0, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 0,
	1294, 1295, 0, 0, 0, 1284, 0, 0, 1265, 1266,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 1296, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 1277, 2428, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 1272, 0, 1256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1289, 1288, 1298, 0, 1278, 1279,
	1280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 1287, 0,
	0, 1262, 1263, 1269, 1268, 1264, 1290, 1285, 1261, 1259,
	1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0,
	0, 1766, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 0, 1250, 0,
	0, 0, 0, 1289, 1284, 0, 1270, 0, 0, 0,
	0, 1251, 0, 1267, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 3030, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 1288, 1298, 2124, 1278,
	1279, 1280, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 0, 2204, 0, 0, 2203, 0, 0,
	1294, 1295, 0, 0, 0, 0, 0, 0, 1265, 1266,
	0, 0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280,
	0, 1286, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 0, 0, 0, 1296, 0, 1265, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 1286,
	0, 0, 0, 0, 0, 0, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3029, 0, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0, 0,
	0, 0, 1277, 0, 1289, 1284, 0, 0, 0, 0,
	2097, 0, 1251, 0, 0, 1297, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 1289, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 2098,
	0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259,
	1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 0, 0, 1256, 0, 0, 1287, 0, 0, 1262,
	1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 1288, 1298, 0, 1278, 1279,
	1280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1864, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 1284, 0, 0, 0,
	1863, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 0, 1250, 0,
	0, 0, 0, 1289, 1284, 0, 1270, 0, 0, 0,
	0, 1251, 0, 1267, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 1288, 1298, 0, 1278,
	1279, 1280, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 0, 0, 0, 0, 0, 1265, 1266,
	0, 0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280,
	0, 1286, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 0, 0, 0, 1296, 0, 1265, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 1286,
	0, 0, 0, 0, 0, 0, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 1285, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0, 0,
	0, 0, 1277, 0, 1289, 1284, 0, 0, 0, 0,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 1289, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 0,
	0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259,
	1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 0, 0, 1256, 0, 0, 1287, 0, 0, 1262,
	1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 1288, 1298, 0, 1278, 1279,
	1280, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 1284, 0, 0, 1265, 1266, 0,
	0, 1251, 0, 0, 1297, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 1296, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	1272, 0, 1256, 0, 0, 0, 0, 2213, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 1289, 1288, 1298, 0, 1278, 1279, 1280,
	1284, 0, 0, 0, 2208, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 0, 0, 2432, 0, 0, 1265, 1266, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1286,
	1270, 0, 0, 0, 0, 0, 1271, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 1285, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0, 0,
	0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293,
	0, 0, 1289, 0, 1294, 1295, 0, 0, 0, 1284,
	0, 0, 1265, 1266, 0, 0, 1251, 0, 0, 1297,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 1250, 0, 0, 0, 0, 0, 0, 1296, 1270,
	0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 0, 0, 1262,
	1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1274,
	1275, 1276, 0, 0, 0, 1272, 0, 1256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 1288,
	1298, 0, 1278, 1279, 1280, 1284, 0, 0, 0, 2154,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 0, 1294, 1295, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 1286, 1270, 0, 0, 0, 0,
	0, 1271, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 1285, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 0, 0, 2170, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 1275, 1276, 0, 0,
	0, 0, 0, 1256, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 1288, 1298, 0, 1278, 1279,
	1280, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 0, 1294,
	1295, 0, 0, 0, 1284, 0, 0, 1265, 1266, 0,
	0, 1251, 0, 0, 1297, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 1296, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	1272, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 1289, 1288, 1298, 0, 1278, 1279, 1280,
	1284, 0, 0, 0, 0, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 0, 0, 0, 0, 0, 1265, 1266, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1286,
	1270, 0, 0, 0, 0, 0, 1271, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 1285, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0, 0,
	0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293,
	0, 0, 1289, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 1251, 0, 0, 1297,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 1250, 0, 0, 0, 0, 0, 0, 1296, 1270,
	0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 0, 0, 1262,
	1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1274,
	1275, 1276, 0, 0, 0, 1272, 0, 1256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 1288,
	1298, 0, 1278, 1279, 1280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264,
	1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 143, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 45, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 1289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 53, 0, 0, 0, 57, 0,
	0, 0, 141, 0, 0, 0, 0, 58, 70, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 1551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1562, 1547, 1552, 1535,
	1572, 1571, 0, 0, 1537, 1536, 0, 0, 0, 0,
	0, 1580, 1579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1573, 0, 1569, 1568, 0, 0, 0, 0, 0,
	73, 136, 64, 1567, 65, 0, 66, 0, 0, 0,
	142, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
	1566, 1564, 1565, 81, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1546, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1555, 1550,
	1556, 1557, 1558, 1559, 1560, 0, 1554, 0, 112, 0,
	0, 0, 0, 0, 0, 1577, 1578, 137, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 1551, 0, 0, 0,
	0, 0, 163, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1570, 0, 0,
	0, 1548, 1549, 135, 0, 0, 4, 0, 0, 0,
	0, 1562, 1547, 1552, 1535, 1572, 1571, 0, 0, 1537,
	1536, 0, 0, 0, 0, 0, 1580, 1579, 0, 0,
	0, 0, 0, 0, 1563, 0, 0, 0, 1687, 1685,
	1686, 1689, 1688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1573, 0, 1569, 1568,
	0, 1540, 1541, 1542, 1543, 0, 0, 0, 1567, 0,
	0, 0, 0, 0, 0, 1561, 1544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1582, 0, 0, 0,
	0, 627, 0, 658, 0, 1566, 1564, 1565, 0, 0,
	0, 1538, 0, 0, 1574, 1575, 1576, 0, 0, 0,
	0, 0, 0, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 1546, 0, 0, 632, 0, 1545, 0, 0,
	0, 0, 1581, 1555, 1550, 1556, 1557, 1558, 1559, 1560,
	0, 1554, 0, 0, 0, 0, 0, 633, 0, 0,
	1577, 1578, 635, 0, 0, 0, 663, 0, 0, 0,
	0, 0, 641, 642, 0, 0, 0, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1539,
	0, 659, 636, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1570, 0, 0, 0, 1548, 1549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 657, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1563,
	0, 0, 0, 0, 637, 0, 0, 0, 0, 0,
	631, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 638, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 1541, 1542, 1543,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	1561, 1544, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 1582, 0, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 660, 0, 1574,
	1575, 1576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1545, 0, 0, 0, 0, 1581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 643, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 0, 0,
	0, 0, 0, 0, 0, 0, 650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 648,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 630, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 649, 0, 0,
	0, 656, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654,
}
var sqlPact = [...]int{

	55601, -1000, -16, -1000, -1000, -1000, 204, -1000, -1000, -1000,
	-1000, 202, 192, 191, -1000, 190, 189, 183, 182, 178,
	173, 172, 170, 167, 164, 163, -1000, -1000, 157, -1000,
	-1000, -1000, -1000, 156, 154, 153, -1000, 152, 1564, 30438,
	151, 150, 144, 1503, 47376, 1405, 143, 135, -1000, 131,
	1540, 34944, 1063, 2104, -1000, 130, 127, 1522, 47004, 3961,
	32682, 1276, 1836, 46626, 30060, 1829, 32304, 46248, -1000, -1000,
	1022, -1000, -1000, 45870, 126, 124, 123, 117, 113, -1000,
	110, 45492, 107, 104, 103, 101, 89, 85, 83, 82,
	81, 80, 79, 77, 76, 74, 68, 63, 60, 55,
	54, 53, -1000, 51, 50, 47, -1000, 56109, 46, 45,
	44, -1000, 1274, 43, 42, 41, 40, 39, -1000, -1000,
	38, 34, 33, 32, 31, 30, -1000, 105, 29, 26,
	25, 22, 21, -1000, 1118, 777, 2145, 12344, 1242, 1237,
	1211, 1157, 1247, 729, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49980, 47376, 19, -34, 18, -1000, 2332, 755,
	23226, 55601, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 34566, 34188, 33810, 28194, 45114, 44736, 9521,
	9521, 905, -1000, -18, 31182, 47376, -1000, -1000, 243, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19330, 18915,
	18500, 370, -1000, 242, -1000, 1259, -1000, -1000, -1000, -1000,
	44358, 43980, 2105, 43602, 27806, 27418, 43224, 1721, 1718, 42846,
	-1000, -1000, 42468, -1000, -1000, 2103, 1869, 1859, 33432, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42096, 41718,
	41340, 40962, 40584, 27030, 26642, 571, -1000, -1000, -1000, -1000,
	23982, -1000, -1000, -1000, -1000, -1000, 17, -1000, 16, 15,
	-1000, 14, 8, 2, 1, 0, -1, -2, -4, -1000,
	-5, -6, -1000, -7, -12, -1000, -13, -14, 2098, 1476,
	1794, 40206, 995, 1403, -26, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47376, -1000, 19731, -1000, 566, -1000, 1983, -1000,
	19731, -1000, 1397, 235, 1236, -1000, -1000, -1000, 1272, 991,
	-1000, -1000, 47376, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2546, 1334, 565, 39828, -1000, 1803, -1000, 667, 13146, -1000,
	876, -1000, 13146, 241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2292,
	1139, 2530, 6392, 1450, 2371, 2100, 2543, 1513, 2088, 2050,
	2002, 1997, 1992, 2542, 1071, 2541, 978, 823, 2540, 1989,
	1966, 2513, 1390, 815, 2539, 2538, 1982, 1937, -1000, -1000,
	-1000, -1000, 1037, -1000, -1000, -1000, -1000, 36432, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1118, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1693, 2302, 2302, 2302, 2400, 359, 353, -1000, 105, -1000,
	1561, -1000, 1330, -1000, -1000, -1000, 55076, -1000, -1000, 19731,
	19731, 19731, 19731, 19731, 1191, -1000, -1000, -1000, 590, -1000,
	563, 562, 10725, -1000, -1000, 2476, -1000, -1000, -1000, 363,
	-1000, -1000, 19731, -1000, 239, -1000, -1000, -1000, -1000, 561,
	2528, -1000, 762, -1000, -1000, -1000, 682, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2022, 494, 493, -1000, 490, 489,
	-1000, -1000, -1000, 551, 550, 549, 547, 545, 543, -1000,
	-1000, -1000, 1119, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 734, -1000, 734, 734, 470, 470,
	540, 539, 478, 537, -1000, -1000, 536, 470, 532, 530,
	-1000, -1000, 511, 648, 625, 500, 498, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1555, -1000, -1000, 1555,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 904, 48864, -1000,
	-1000, -1000, -20, 47376, -1000, 370, -20, -1000, -1000, 496,
	-1000, 13962, 13962, 13962, -1000, -1000, 1394, 19731, -1000, 2076,
	-1000, 3298, -215, 495, 24360, 623, 623, -1000, 22092, 597,
	26254, -1000, 494, 493, 490, 489, -1000, 225, -1000, -1000,
	-1000, -1000, -1000, 1668, 2200, 884, -1000, 1091, 2198, -1000,
	2948, 2178, 1089, -1000, -1000, 720, 2174, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1325, -1000, -1000, 1455,
	2171, -102, 2069, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1423, -1000, 28566, 31182, -18, -43, -1000, 9135,
	55076, -1000, 55076, 669, -1000, 55076, 662, -1000, 1936, 47376,
	9521, 47376, 47376, -1000, 488, 1532, 1388, -1000, -1000, 30810,
	2948, 1528, -1000, -1000, 686, 1524, -1000, -1000, 1520, -1000,
	370, -1000, -1000, 39450, 49608, 686, 1514, -1000, -1000, -1000,
	36432, -1000, 47376, -1000, 47376, -1000, 1029, -1000, 49236, 139,
	2170, -1000, -1000, 139, 2166, -1000, 139, 2163, -1000, 138,
	2161, -1000, -1000, 1347, 2142, -1000, -77, 2140, -1000, -1000,
	-77, 2138, -1000, -1000, 19731, -40, -1000, -1000, -1000, 755,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 39072, 30810, 47376,
	33054, 693, 55076, 2438, 55982, 28566, 55076, 30810, 47376, 2016,
	-1000, 38694, 38316, 2355, 660, -1000, -1000, 47376, -1000, 19731,
	-1000, 2436, 1760, -32, -1000, -1000, -1000, -1000, -1000, 1581,
	1702, 795, 1614, -1000, 13146, 13146, 2261, -1000, 221, 9521,
	-1000, -1000, 955, 1608, -1000, -1000, -1000, -1000, -1000, 37938,
	-1000, -1000, -1000, 1322, 47376, -1000, -1000, 29682, 1994, -1000,
	47376, -1000, 47376, -1000, 47376, -1000, 47376, -1000, 47376, -1000,
	-1000, -1000, -1000, -1000, 2172, 1188, 2015, -1000, 47376, -1000,
	47376, -1000, -1000, -1000, 1572, -1000, -1000, -1000, 37566, 37188,
	36810, -1000, -1000, 1111, 949, -1000, -1000, 140, -1000, -1000,
	1693, -1000, 1409, 1663, 18085, 1638, 19731, 105, -1000, -1000,
	105, 105, 11929, -1000, -1000, -1000, 47376, -1000, 55777, 55982,
	9521, 925, 19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731,
	19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731,
	19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731, 19731,
	19731, 19731, 19731, 19731, 19731, 19731, 19731, 1587, 19731, 903,
	19731, 19731, 19731, 19731, 2906, -1000, -1000, 1281, 389, 1285,
	-1000, 2493, 2493, 2493, 5842, 5842, 477, 590, -1000, 19731,
	-1000, 52, 19731, 353, 53088, -19, 10324, -1000, -1000, -1000,
	-1000, 17670, 727, 55076, 8749, 9909, -1000, 2500, 1026, 2036,
	1804, 487, 646, 645, 644, 634, 19731, 19731, 19731, 19731,
	19731, 19731, -1000, -1000, -1000, -1000, -1000, -1000, 2476, -1000,
	17269, 16854, -1000, 2498, 16439, 16024, -1000, 15609, 20934, 15194,
	921, 919, 890, 19731, 11126, -1000, -32, -1000, 48864, -1000,
	47376, -20, 2435, 19731, 234, -1000, 54038, -1000, 234, 234,
	484, -46, 55076, 1646, 1645, 23604, 1584, 1203, 1203, 1203,
	-1000, 483, 581, 623, 6800, 14779, 482, 623, 623, 106,
	35316, 1207, 35316, 231, 352, 21714, 2076, -1000, -1000, 47376,
	9521, -29, 1243, -1000, 31926, 2365, 2336, 2297, 1027, -1000,
	983, 2398, 36432, 2415, 52, 2337, 1917, 900, 36432, 2948,
	-1000, 55982, -1000, 1724, 2396, 1016, 1086, 1016, 1016, 1055,
	36432, 898, 1138, 28566, 2320, 888, -30, 2412, 52, 2317,
	1905, 885, -1000, -1000, 47376, 9521, 2311, 948, 617, -1000,
	47376, 220, -1000, 19731, 19731, 972, -47, 214, 1658, 1655,
	106, -1000, 31554, 2434, 2137, 47376, 882, -1000, 2948, 2136,
	-1000, 1136, -1000, 2113, 2109, 2431, 1381, 1512, -1000, -1000,
	-1000, 1368, 1509, 933, 2108, 723, 608, 2429, 608, 25498,
	-1000, 47376, -1000, 47376, -1000, -1000, 47376, -1000, 47376, -1000,
	47376, -1000, 47376, 47376, -1000, 47376, 28566, 28566, 28566, -48,
	3416, 29310, 880, -79, -1000, 764, 31554, 4167, -49, -1000,
	945, -1000, -1000, -1000, 381, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 734, 481, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 478, 1119, 470, 470,
	470, -1000, -1000, -1000, 648, 625, -1000, -1000, -1000, 734,
	734, -1000, -1000, -190, 1884, -43, 33054, 617, -1000, 617,
	-1000, 2012, -1000, 2333, 653, -65, 813, -32, -1000, 1555,
	-1000, 1045, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2521, -1000, 2505, -1000, -1000,
	2492, -21, -1000, -21, -1000, 9521, -1000, 47376, 2008, -1000,
	-1000, -1000, -1000, -1000, 47376, -1000, -1000, 47376, -1000, -1000,
	-1000, -1000, -1000, 3018, -1000, 2007, -1000, 3416, 213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47376, 47376, 47376,
	-1000, 36432, -1000, -1000, -1000, -1000, 55076, -1000, 400, -1000,
	-1000, 55076, 1059, 1666, -1000, 1666, -22, -1000, 53787, 1636,
	47376, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 655, 417, 417, 887, 887, 887, 887,
	2471, 5269, 428, 4893, 513, 513, 513, 513, 513, 513,
	513, 513, 526, 1443, 1443, 526, 526, 526, 526, 526,
	1443, 1443, 1443, 513, 513, 513, 5842, 55212, 564, 19731,
	19731, 872, 1264, 389, 564, 19731, 564, 564, 564, 564,
	-1000, 1591, -1000, -1000, -1000, -1000, 1875, 468, 20934, 20934,
	-1000, -1000, -1000, 10725, 19731, -1000, -1000, -1000, -1000, 465,
	19731, -1000, 53247, -235, 351, -150, -1000, 19731, 579, -61,
	-1000, 1003, -1000, 19731, 212, -1000, -1000, -37, 19731, 19731,
	19731, 350, -1000, 347, -1000, 867, -1000, 862, 860, 858,
	-1000, 463, 1194, 459, 458, 19731, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 54917, 51182, 51023, 50770, 50732, -66,
	-68, 346, -1000, 1871, -150, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 345, -1000, 343, -74, -1000, -80, -1000, 342,
	-1000, 54781, -150, 341, 5245, -1000, 20934, 20934, 20934, 10725,
	457, 340, -1000, 53536, -1000, 649, 647, 640, 54622, 14364,
	14364, 14364, 322, 54486, 19731, -150, -1000, -1000, 454, -81,
	723, 13962, 22848, 9521, -1000, 723, 723, 19731, -1000, 19731,
	23604, 23604, 1412, 1643, 23604, -1000, -1000, -1000, -1000, 35316,
	460, 623, 35316, -1000, 2476, 1619, -1000, 318, -1000, 13561,
	35316, 35316, 9521, -1000, -1000, 47376, 370, -1000, -1000, 623,
	311, 211, 1220, 47376, 47376, 47376, -1000, -1000, 1507, 48492,
	1501, 55982, 47376, -1000, -1000, 453, 451, 1633, 1616, 47376,
	47376, 48120, 47748, 47376, 1201, 19731, 1515, 1585, 52, -1000,
	639, 450, 47376, 1081, -1000, -1000, -1000, -1000, -1000, 47376,
	-1000, -1000, 2488, -1000, 1016, -1000, -1000, -1000, 1016, 2948,
	1077, 47376, 28566, 702, 638, 47376, 1131, 52, -1000, 632,
	449, 9521, 1189, -1000, 630, 47376, 1754, -1000, 1418, -1000,
	8363, 55076, 55076, -1000, -1000, 9521, 1689, 1689, 307, -23,
	-1000, -1000, -1000, -1000, -1000, -1000, 1712, 47376, 568, 47376,
	52, 47376, 201, 2531, 47376, 28566, 28566, 28566, 52, 47376,
	2107, 47376, 2106, 2213, 609, 47376, 1210, 19731, 1116, -1000,
	24738, 744, 47376, 1062, 145, -1000, -1000, -1000, 10, 47376,
	-1000, -1000, 139, 139, 139, -1000, 138, 1347, -1000, -77,
	-77, -1000, -1000, -1000, 47376, 2453, 28566, -82, -1000, 767,
	869, 848, -1000, 55982, -1000, 588, 845, -1000, 2486, 448,
	2476, -1000, 685, 36060, 47376, 132, -1000, 701, 1944, -1000,
	13146, 13146, -1000, 1555, -1000, -1000, 1083, -1000, 1108, -1000,
	-1000, -1000, -1000, 13146, -1000, -1000, 944, 1994, -43, -43,
	-1000, -1000, 771, -1000, 47376, -1000, -1000, -1000, -1000, 1059,
	-1000, 19731, -1000, -1000, -1000, 11929, -1000, -1000, -1000, 47376,
	-153, 19731, 564, 564, 19731, 20934, 20934, -1000, 564, -1000,
	-1000, -1000, -1000, -1000, 1862, 446, 19731, 55982, 4968, 4669,
	-83, 526, 19731, -24, -1000, 19731, -1000, 52952, -1000, -1000,
	584, 2211, -1000, 19731, 54327, 7977, 306, 12745, -1000, 54076,
	-54, -54, -1000, 2514, 1549, 1284, 1130, 1038, 2480, -1000,
	25876, 725, 1210, 52793, 55777, 55982, 19731, 19731, 19731, -1000,
	-1000, 2476, -1000, 19731, -1000, -1000, -1000, -1000, -1000, 1838,
	19731, -1000, 55777, 55982, 20934, 20934, 20934, 20934, 20934, 20934,
	20934, 20934, 20934, 20934, 20934, 20934, 20934, 20934, 20934, 20934,
	20934, 20934, 20934, 1592, 20934, 2491, 2491, 2491, -25, 19731,
	-1000, 1991, 1838, 19731, 19731, -1000, -1000, -1000, 55982, 305,
	304, 302, -1000, 19731, -150, 4167, -1000, 1788, -1000, -120,
	-1000, 2076, -1000, -1000, 1788, 1788, -88, 55076, -1000, 1412,
	-1000, 442, 19731, 23604, -1000, 578, -1000, -95, -1000, 35316,
	-1000, 577, -232, -1000, 613, -1000, 623, 300, -1000, -1000,
	-1000, 209, 370, -1000, 35316, -1000, 9521, -1000, -1000, 852,
	850, -1000, 2096, -1000, 1486, -1000, 748, -1000, 1106, 19731,
	22470, 439, 438, 1282, -1000, 2090, 1347, 2087, 1347, -1000,
	-1000, 676, -1000, 55076, 427, 426, -1000, -29, 1145, -1000,
	25126, 19731, -1000, 846, -1000, -1000, -1000, 2948, 844, -1000,
	-1000, 1135, 25126, -1000, -1000, -1000, 25126, 19731, -1000, -30,
	837, 25126, 2061, 685, 1828, 946, -1000, -1000, -1000, -1000,
	-1000, -1000, 1687, 31554, 47376, 425, 47376, 416, -1000, -1000,
	415, 47376, 617, 2948, -1000, 686, -1000, -1000, 754, 9521,
	408, 9521, 1590, 609, 28938, -1000, 686, 1663, 55076, -1000,
	1062, 11527, 2300, -96, -1000, 207, -1000, -1000, -1000, 723,
	25498, 23604, 19731, 2537, -98, -1000, -1000, -1000, -1000, -1000,
	-43, 1234, 2270, 2270, -1000, 2478, -1000, 575, 298, 2476,
	290, -1000, -31, 406, -1000, 612, 611, -43, 47376, -1000,
	1221, 9521, 47376, 47376, 9521, 47376, -1000, -1000, -32, -1000,
	-1000, -1000, -1000, 47376, -1000, -1000, -1000, -1000, 1255, 52657,
	-1000, 2303, 9521, 2487, 564, 694, 208, 19731, 55982, 55371,
	-103, 19731, 19731, -1000, 289, 19731, 574, 55076, -1000, -1000,
	-1000, 55076, 19731, 146, -1000, 2504, 19731, 288, 286, 285,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 284, -1000,
	-1000, 50352, -1000, 19731, 283, -1000, 282, 277, 344, 52498,
	52362, 273, 55076, 1991, 55076, -1000, -1000, 719, 719, 986,
	986, 986, 986, 2491, 533, 1296, 440, 857, 857, 857,
	1080, 1001, 1001, 857, 857, 857, 1826, 1604, 405, 3448,
	19731, 272, -1000, -1000, 55076, 55076, 267, -1000, -1000, -1000,
	-150, 265, 1766, 2395, -1000, 23604, 1766, 1766, -1000, -1000,
	47376, 55076, -1000, -215, -1000, 2476, -1000, -1000, 1619, -1000,
	7200, 35316, 623, 9521, -1000, -1000, 11, 47376, 47376, 47376,
	2084, -1000, 1657, -1000, 52203, -106, -1000, 2366, 2366, 19731,
	106, -1000, -1000, 403, 22470, 47376, -1000, 1644, 1704, 800,
	47376, -1000, 47376, -1000, -1000, 47376, 47376, 47376, 47376, 47376,
	-1000, 402, -108, 47376, 47376, 28566, -1000, -1000, -111, 9521,
	-1000, 2304, -1000, 28566, 851, 1131, 1731, -1000, 399, 22470,
	398, 47376, 31554, 2427, -1000, 685, -1000, -1000, 397, 1816,
	1365, 22470, 1340, 1595, 609, 28938, -1000, 933, 1062, -1000,
	-1000, -33, -1000, 441, 52, 47376, 2532, 1210, -1000, -39,
	55076, -1000, 610, -1000, 2250, -1000, 2248, 573, -1000, -1000,
	260, -1000, 35688, 35688, 28566, 28566, -43, 1543, -1000, -1000,
	1140, 1413, -1000, -1000, -1000, -1000, -1000, 2303, 19731, 19731,
	55371, -117, -1000, 564, 564, -1000, 52067, -1000, 55076, 7591,
	-1000, 54076, -1000, -1000, -1000, -1000, 1180, -1000, 51908, -1000,
	-1000, -1000, 19731, -1000, -1000, -1000, -1000, 20934, 1824, 396,
	55982, 51772, -1000, -1000, -1000, 695, 19731, 19731, 2076, 695,
	695, -119, 623, -1000, -1000, -1000, 2476, -1000, 35316, 11,
	9521, -1000, -1000, -1000, 47376, -1000, 47376, -1000, 9521, 47376,
	1807, 1458, -1000, -1000, 1600, 393, 20934, 47376, 680, -1000,
	1216, 22470, 2303, 9521, 2303, 51613, 9909, -122, -124, 1456,
	-1000, 1444, 19731, -1000, 55982, 1347, 1347, -130, -132, -1000,
	836, 834, 19731, 831, -1000, -1000, -1000, 827, -1000, 629,
	-77, 25126, -1000, -1000, 1147, 22470, -133, 22470, -135, 257,
	52, -1000, 22470, -1000, 47376, -138, 47376, -1000, 609, 28938,
	-1000, 2213, -1000, 2112, 47376, 2285, -1000, -1000, -1000, 1663,
	389, 387, 386, -1000, -1000, -1000, -143, -1000, -1000, -118,
	-1000, 643, 641, -1000, -1000, -1000, 9521, 943, -1000, 564,
	564, -1000, -1000, -1000, -1000, 251, 1210, 2388, -1000, 51477,
	4645, 20934, 55982, -149, -1000, -1000, 47376, 55076, -150, -1000,
	-1000, -1000, 35316, 461, -1000, -1000, 2077, -1000, -1000, -1000,
	47376, 1453, -1000, -1000, 19731, 3448, 385, 19731, -1000, 1687,
	383, -1000, -1000, -1000, -1000, -1000, -1000, 2366, -37, -1000,
	1102, -1000, -1000, 55076, 2360, -1000, -1000, 382, 380, 47376,
	47376, -54, 379, 378, 25126, -1000, 47376, -151, 1216, -154,
	-1000, 1687, -1000, -156, 754, -1000, 376, 28938, -1000, 1590,
	915, -157, 47376, 1062, -1000, 28566, 28566, -1000, 1543, -1000,
	47376, -1000, 47376, -1000, 47376, -1000, 1084, 19731, -1000, 4645,
	-159, -1000, -129, -1000, 2423, -1000, -1000, -1000, -1000, 2075,
	51318, 1554, 47376, 4930, 1131, 47376, 2303, 250, 47376, 751,
	9521, 1140, 1140, -1000, -1000, 248, 19731, 19731, -1000, 374,
	-1000, 1687, 1216, 1131, 1216, 373, 22470, -1000, 1595, 1023,
	-1000, 723, -1000, -1000, -162, -165, -1000, -167, -170, -1000,
	246, 20533, 20533, -150, -1000, 47376, 372, 2045, -1000, 1258,
	1320, 245, 778, -1000, -172, -1000, -1000, 370, -1000, 19731,
	-1000, -179, -1000, 742, -180, -1000, 739, 2504, -182, -185,
	47376, 1131, 1687, -1000, 1687, 22470, -187, -1000, 25498, -1000,
	685, 685, -1000, -1000, -1000, -1000, -1000, 21320, 1238, 1057,
	53498, -1000, -1000, -1000, 47376, -1000, 1339, 1316, 1070, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1554, 55076, -1000, 1140,
	1729, -1000, 1140, 1820, -1000, -1000, -188, -1000, 1131, 1131,
	-193, -1000, -164, -1000, -1000, 2444, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2230, -1000, 780, 1442, 1442, 1258, -1000,
	369, -1000, 368, 1326, -1000, -1000, 1216, -1000, 20132, -1000,
	2457, -1000, -1000, 1599, -1000, -1000, 19731, 19731, -1000, -1000,
	-1000, 1687, -1000, -1000, -1000, -1000, -201, -202, 1131, 1131,
	826, -1000, -1000, 366, 19731, -203, 1131, -1000,
}
var sqlPgo = [...]int{

	0, 3047, 3045, 1895, 3041, 2366, 3040, 3039, 3036, 3035,
	3027, 2364, 3026, 3024, 3023, 3021, 3019, 3016, 3009, 3002,
	2999, 2998, 2993, 2992, 2988, 2987, 2986, 2984, 2983, 2982,
	2981, 2978, 2353, 2970, 2351, 2964, 2962, 2961, 2960, 2958,
	2956, 2953, 2950, 29, 2949, 2947, 2942, 2941, 2328, 2939,
	2932, 2319, 2931, 2930, 2299, 2928, 2926, 2920, 2286, 2238,
	2919, 2915, 2215, 2914, 2912, 2205, 2910, 2183, 2907, 2905,
	2176, 2898, 95, 113, 2165, 2897, 2896, 2163, 2158, 2121,
	2895, 2111, 2892, 2891, 2074, 2056, 2890, 72, 2889, 2887,
	2886, 2884, 2028, 1948, 2882, 2878, 2875, 176, 2871, 1938,
	2869, 2866, 2865, 2862, 2861, 2859, 2858, 2856, 2855, 2854,
	2848, 2847, 2846, 2845, 2844, 2843, 2842, 2840, 2838, 2836,
	2835, 2834, 2833, 2830, 2829, 183, 121, 2828, 2827, 1929,
	1878, 2812, 2809, 48, 41, 19, 77, 133, 180, 4048,
	175, 2801, 2797, 2795, 2792, 2789, 2788, 37, 129, 125,
	126, 117, 2786, 207, 2783, 2782, 53, 43, 24, 22,
	85, 2778, 2777, 2768, 1605, 89, 2767, 2762, 171, 178,
	2761, 645, 42, 87, 76, 88, 50, 51, 2758, 118,
	10, 2754, 149, 62, 2751, 70, 35, 32, 3239, 108,
	47, 96, 179, 122, 508, 2741, 177, 78, 151, 2737,
	2732, 2729, 55, 141, 2, 13, 131, 12, 2725, 7,
	2724, 9, 2723, 2721, 2720, 2719, 15, 115, 105, 120,
	2718, 28, 84, 2717, 142, 2716, 166, 2715, 75, 1772,
	173, 5, 103, 2713, 80, 17, 79, 2712, 2711, 92,
	168, 2706, 30, 123, 83, 101, 192, 146, 91, 154,
	160, 2704, 2703, 2702, 158, 2701, 143, 124, 2698, 2696,
	112, 23, 2694, 49, 169, 33, 2693, 2692, 107, 2690,
	147, 2688, 2687, 181, 116, 134, 4, 54, 98, 8,
	167, 110, 57, 56, 2686, 3351, 1586, 1839, 66, 2685,
	104, 63, 39, 60, 102, 170, 34, 2682, 2681, 157,
	2679, 2674, 2668, 2667, 2664, 128, 2663, 2662, 2660, 94,
	150, 184, 2659, 106, 44, 152, 156, 132, 172, 127,
	2654, 139, 86, 153, 2652, 93, 2649, 135, 2644, 140,
	2642, 2637, 2636, 2635, 38, 2634, 2632, 2628, 69, 2621,
	109, 2618, 138, 137, 119, 97, 111, 162, 165, 2007,
	2617, 145, 31, 2616, 144, 25, 0, 3274, 2874, 2614,
	148, 90, 2612, 2604, 2602, 2600, 36, 11, 3, 6,
	16, 14, 27, 18, 71, 2594, 2593, 81, 99, 2592,
	182, 155, 2590, 2589, 2588, 46, 2587, 20, 2586, 21,
	2585, 2579, 26, 1, 2576, 2569, 174, 2562, 114, 2412,
	2561, 2555, 2552, 1984, 2550, 2549, 58, 130,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 149, 149, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 400, 400, 151, 151, 150,
	146, 146, 153, 153, 153, 155, 155, 152, 152, 145,
	145, 32, 32, 85, 85, 85, 136, 78, 78, 78,
	354, 354, 355, 355, 132, 132, 133, 133, 133, 133,
	134, 134, 135, 135, 135, 46, 34, 34, 34, 34,
	34, 34, 34, 35, 35, 36, 36, 36, 37, 37,
	37, 44, 44, 126, 126, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 58, 58, 56,
	59, 59, 60, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 68, 68, 68, 69, 69, 69,
	66, 66, 66, 64, 64, 64, 63, 63, 63, 67,
	67, 67, 65, 65, 65, 230, 230, 70, 70, 70,
	70, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 73, 73, 73,
	73, 73, 73, 73, 73, 324, 324, 71, 71, 297,
	297, 74, 74, 255, 255, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 86, 86, 86, 86, 396, 396,
	396, 399, 399, 224, 224, 168, 168, 168, 168, 81,
	81, 81, 81, 82, 82, 82, 83, 83, 131, 131,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	38, 38, 38, 39, 39, 40, 40, 41, 41, 42,
	42, 43, 43, 43, 43, 43, 93, 93, 93, 95,
	92, 92, 92, 94, 94, 94, 94, 96, 96, 97,
	97, 97, 97, 97, 97, 98, 98, 348, 348, 233,
	233, 346, 346, 347, 347, 200, 200, 200, 200, 200,
	201, 201, 201, 353, 353, 353, 353, 353, 353, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 115, 115,
	115, 125, 125, 125, 125, 125, 125, 125, 117, 117,
	117, 109, 109, 100, 100, 106, 106, 106, 106, 106,
	101, 101, 107, 107, 108, 108, 108, 110, 110, 110,
	110, 110, 110, 102, 102, 102, 102, 112, 112, 112,
	112, 111, 111, 121, 121, 121, 121, 121, 121, 121,
	312, 312, 116, 116, 116, 116, 119, 119, 119, 119,
	114, 114, 114, 118, 118, 122, 122, 122, 122, 103,
	103, 104, 104, 105, 105, 123, 123, 113, 113, 124,
	124, 124, 124, 124, 124, 124, 120, 120, 120, 397,
	397, 398, 398, 79, 79, 52, 52, 53, 53, 202,
	202, 203, 203, 278, 278, 278, 278, 204, 204, 154,
	154, 154, 207, 208, 208, 205, 205, 206, 206, 206,
	210, 210, 209, 212, 212, 211, 277, 364, 364, 365,
	365, 365, 365, 365, 365, 365, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 362, 362, 362, 363,
	360, 360, 361, 361, 361, 361, 401, 401, 276, 276,
	216, 216, 367, 367, 367, 367, 368, 368, 368, 368,
	368, 371, 370, 369, 369, 369, 369, 369, 308, 308,
	308, 57, 57, 57, 244, 244, 243, 243, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 128, 128, 54, 54, 54, 160, 160, 51, 51,
	51, 55, 55, 50, 50, 50, 50, 50, 261, 261,
	259, 259, 221, 221, 314, 314, 314, 172, 172, 147,
	147, 147, 20, 22, 22, 16, 16, 16, 16, 16,
	16, 29, 29, 30, 30, 26, 26, 260, 260, 262,
	262, 80, 80, 84, 84, 90, 90, 127, 127, 127,
	127, 127, 127, 127, 33, 33, 33, 33, 45, 45,
	45, 45, 88, 404, 404, 404, 89, 89, 403, 403,
	167, 167, 167, 167, 169, 169, 273, 273, 274, 274,
	405, 405, 275, 275, 275, 162, 161, 163, 163, 49,
	49, 49, 156, 156, 157, 157, 158, 158, 159, 159,
	406, 406, 77, 77, 77, 130, 130, 196, 196, 270,
	270, 270, 217, 217, 177, 177, 272, 272, 271, 271,
	271, 242, 242, 242, 129, 129, 227, 227, 235, 235,
	236, 236, 320, 320, 237, 87, 87, 139, 139, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 140, 140,
	140, 140, 140, 140, 140, 143, 143, 143, 143, 144,
	144, 144, 142, 142, 378, 378, 378, 380, 380, 381,
	377, 377, 379, 379, 402, 402, 246, 246, 246, 214,
	215, 213, 213, 219, 219, 218, 220, 220, 313, 313,
	313, 240, 240, 240, 240, 265, 265, 263, 263, 264,
	264, 266, 266, 267, 267, 267, 268, 268, 269, 269,
	239, 239, 293, 293, 141, 141, 141, 226, 226, 226,
	228, 228, 283, 283, 283, 284, 284, 282, 282, 282,
	282, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 394, 394, 394, 395, 395, 311,
	311, 316, 316, 316, 316, 316, 316, 309, 309, 310,
	310, 321, 322, 322, 249, 249, 249, 249, 247, 247,
	248, 248, 317, 317, 317, 317, 241, 241, 318, 318,
	318, 279, 279, 325, 325, 325, 340, 340, 225, 225,
	225, 335, 335, 326, 326, 326, 326, 326, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	329, 329, 329, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 339, 339, 339, 339, 339, 330, 330, 336, 337,
	331, 332, 338, 338, 338, 338, 342, 342, 333, 333,
	333, 333, 333, 333, 333, 334, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	257, 257, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 287, 287, 287, 287, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 372, 372, 372,
	372, 372, 372, 372, 372, 375, 375, 376, 376, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 382, 382, 383, 383, 385, 385, 386, 386, 387,
	388, 388, 388, 389, 390, 390, 384, 384, 391, 391,
	391, 392, 392, 393, 393, 393, 393, 393, 299, 299,
	300, 301, 307, 307, 307, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 170, 170, 170, 170, 170, 232, 232, 231, 231,
	296, 296, 294, 294, 298, 298, 250, 250, 341, 341,
	341, 341, 341, 341, 341, 251, 251, 251, 258, 252,
	252, 253, 253, 253, 253, 253, 290, 291, 254, 254,
	254, 292, 292, 302, 306, 306, 305, 304, 304, 303,
	303, 280, 280, 281, 281, 238, 238, 407, 407, 234,
	234, 319, 319, 319, 319, 198, 198, 229, 229, 197,
	197, 192, 192, 192, 192, 222, 222, 223, 223, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	343, 343, 343, 344, 345, 295, 187, 186, 174, 175,
	185, 184, 183, 173, 176, 180, 181, 182, 178, 179,
	190, 189, 188, 323, 193, 193, 194, 194, 194, 195,
	195, 195, 195, 171, 171, 191, 191, 191, 164, 164,
	164, 165, 165, 166, 166, 352, 352, 350, 350, 350,
	351, 351, 351, 351, 349, 349, 349, 349, 349, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 12, 12, 2,
	1, 1, 1, 3, 3, 0, 3, 1, 3, 1,
	1, 3, 2, 5, 0, 5, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 1, 7, 3, 8,
	8, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 5, 2, 3,
	0, 3, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 6, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 0,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 7, 3, 4, 3, 4, 3,
	4, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 5, 3, 1, 1, 3, 1, 0, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 415, -4, -32, -34, -46, -44,
	-47, -75, -59, -60, -61, -74, -70, -76, -77, -78,
	-79, -71, -85, -84, -86, -90, -38, -87, -80, -81,
	-91, -99, -127, -128, -129, -130, -5, -11, 25, 36,
	-35, -36, -37, 50, 76, 64, -54, -51, -48, -58,
	78, 99, -379, 103, -62, -65, -67, 107, 116, 121,
	144, 153, 253, 260, 281, 283, 285, 294, -40, -39,
	117, -137, -139, 279, -82, -83, -92, -93, -94, -95,
	-131, 312, -100, -101, -102, -103, -104, -105, -106, -107,
	-108, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, 315, -33, -45,
	-89, -88, 357, -6, -7, -8, -9, -10, -12, -22,
	-49, -50, -52, -53, -55, -57, -56, -378, -63, -64,
	-66, -68, -69, -140, -138, 412, 280, 366, 37, 324,
	65, 111, 289, 20, -14, -15, -18, -17, -19, -16,
	-23, -25, -27, -24, -26, -28, -29, -30, -31, -20,
	-21, -13, 383, 391, -143, -141, -142, -144, 301, 374,
	337, 416, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 2, 337, 377, 302, 367, 92, 164, 265,
	251, -396, 2, -229, 337, 92, -192, -191, -164, 405,
	4, -356, -358, 20, 21, 22, 23, 25, 35, 36,
	37, 40, 42, 43, 46, 47, 48, 49, 50, 51,
	58, 63, 64, 65, 66, 67, 72, 69, 70, 71,
	74, 76, 77, 80, 81, 82, 90, 91, 93, 94,
	95, 99, 101, 103, 106, 107, 109, 110, 116, 117,
	120, 115, 118, 119, 121, 131, 132, 134, 135, 137,
	139, 143, 145, 150, 151, 152, 153, 154, 155, 165,
	160, 166, 170, 173, 172, 174, 175, 176, 167, 181,
	184, 185, 186, 188, 189, 192, 193, 194, 197, 196,
	201, 202, 205, 206, 209, 211, 214, 215, 218, 216,
	217, 220, 221, 223, 222, 229, 231, 232, 234, 235,
	238, 239, 242, 245, 248, 249, 250, 251, 252, 253,
	254, 256, 258, 260, 262, 263, 264, 265, 266, 268,
	269, 271, 272, 273, 274, 275, 279, 277, 278, 280,
	281, 282, 283, 285, 288, 289, 290, 292, 313, 314,
	326, 294, 295, 296, 297, 298, 299, 300, 304, 308,
	305, 306, 307, 302, 303, 309, 310, 312, 315, 317,
	319, 320, 323, 324, 325, 327, 330, 332, 328, 329,
	322, 335, 336, 338, 339, 340, 341, 342, 343, 344,
	345, 349, 352, 353, 357, 358, 359, 360, 363, 364,
	365, 370, 366, 368, 371, 372, 373, 378, 384, 385,
	387, 388, 389, 30, 38, 39, 41, 44, 54, 55,
	56, 59, 96, 97, 114, 122, 123, 133, 146, 148,
	156, 157, 171, 177, 179, 199, 228, 230, 243, 247,
	257, 259, 267, 291, 318, 333, 347, 348, 354, 355,
	374, 375, 379, 386, 415, 415, 415, 2, 185, 264,
	309, -188, -191, -164, 92, 236, 415, 415, 415, 2,
	337, 325, 115, 302, 367, 287, 377, -259, 181, 92,
	362, -164, 260, 24, 2, 101, 170, 365, 364, 24,
	256, 303, 339, 341, 2, 415, 415, 2, 377, 302,
	337, 164, 92, 367, 287, -182, 2, -164, -73, 2,
	412, -72, -5, -48, -58, -62, -74, -70, -11, -32,
	-34, -54, -51, -59, -65, -67, -78, -77, -79, -81,
	-85, -84, -87, -92, -93, -99, -129, -130, 78, 25,
	107, 312, 117, -399, -224, 2, 24, -168, -164, 78,
	144, 301, 337, 2, 185, 2, -182, 2, -396, 2,
	185, 2, -399, -224, 23, 2, -164, 2, 298, 315,
	-169, 2, 294, -164, 415, 415, 415, 415, 415, 415,
	206, 58, 291, 309, -97, 353, -96, 347, 296, -98,
	-348, 2, 218, -164, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 2, -125, 309,
	325, 151, 36, 58, 24, 63, 93, 145, 164, 165,
	193, 73, 74, 263, 206, 186, -312, 119, 310, 338,
	297, 335, 353, 78, 368, 288, 342, 118, 4, 92,
	218, 311, 347, 67, 415, 415, 415, -402, 2, 337,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, -138, -140, -139, 415, 415, 415, 415, 415, -218,
	-219, 361, 178, 113, 241, -137, -139, 2, -378, -125,
	309, 2, 58, 24, -346, 2, -285, 236, -287, 403,
	404, 398, 224, 390, -299, 98, 213, 212, -289, -302,
	114, 291, 412, -195, -288, 418, 9, -375, -139, 31,
	-300, -301, 52, -193, -164, 7, 8, 5, 6, -171,
	-327, -295, -334, 356, 124, 227, -372, -373, -194, 4,
	-356, -350, -328, -337, -332, -333, -335, 42, 48, 47,
	344, 217, 304, 305, 306, 307, 319, 370, 160, 40,
	234, 235, 172, 179, 61, 84, 85, 83, 88, 89,
	86, 311, 367, 53, 30, 156, 228, 157, 59, -374,
	43, 94, 106, 134, 135, 173, 174, 175, 176, 188,
	189, 329, 349, 39, 41, 44, 54, 55, 96, 97,
	122, 123, 133, 146, 171, 177, 199, 230, 247, 257,
	267, 318, 333, 347, 348, 354, 355, 375, -357, -338,
	79, 125, 142, 169, 158, 182, 183, 187, 200, 203,
	219, 226, 244, 246, 286, 316, -403, 2, 353, 353,
	2, -403, 2, -403, 2, -167, 2, 353, 350, -404,
	353, 386, -380, 268, -381, -182, -380, 415, 415, 417,
	415, -213, -214, -215, 2, 24, 104, 412, 2, -315,
	2, 410, -317, -171, 195, -374, -139, -316, 412, -188,
	237, -194, 84, 85, 88, 89, 4, -164, 61, 213,
	212, -3, 2, -317, 156, -188, 2, -317, 156, 2,
	-189, 156, -317, -191, 2, -354, 156, -352, 9, -351,
	5, 4, -356, -358, -357, 2, -173, -164, 2, -197,
	156, -188, -185, -349, 4, -356, -358, -357, -359, 24,
	26, 27, 28, 29, 31, 32, 33, 34, 45, 52,
	53, 57, 60, 62, 73, 78, 83, 84, 86, 85,
	87, 88, 89, 98, 100, 102, 104, 105, 108, 111,
	113, 124, 126, 138, 140, 141, 144, 147, 149, 159,
	164, 168, 178, 180, 195, 198, 204, 207, 208, 224,
	225, 227, 233, 236, 237, 240, 241, 255, 261, 270,
	284, 287, 301, 311, 321, 331, 334, 337, 346, 350,
	351, 356, 361, 362, 367, 369, 376, 377, 380, 381,
	382, 383, -186, -349, 350, 417, -229, -222, -164, 414,
	-285, 2, -285, 156, 2, -285, 156, 2, -216, 412,
	414, 337, 62, 2, -188, 156, -178, 2, -164, 109,
	-189, 156, 2, -191, -354, 156, 2, -354, 156, 2,
	-190, 2, -188, 164, 164, -173, 156, 2, -164, 24,
	141, 2, 180, 2, 180, 2, -318, 2, -317, -230,
	156, 2, -188, -230, 156, 2, -230, 156, 2, -198,
	156, 2, -197, -173, 156, 2, -355, 156, 2, -354,
	-355, 156, 2, -255, 412, -324, 2, -323, -351, 374,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 309, 236, 350,
	417, -188, -285, -297, 412, 141, -285, 236, 141, 238,
	2, 92, 337, 389, 24, -164, 2, 313, 2, 412,
	-97, 56, 353, -274, 2, -275, -161, -162, -163, 184,
	262, 266, 389, -346, 350, 395, 141, -346, -233, 414,
	-125, 2, 138, 369, 2, 7, 2, -354, 2, 313,
	2, 263, 310, 58, 141, 2, 2, 236, -397, 2,
	141, 2, 141, 2, 141, 2, 141, 2, 141, 2,
	2, 263, 310, 2, 352, 194, 352, 2, 141, 2,
	141, 2, 5, 2, 184, 262, 326, 2, 337, 377,
	302, 2, 2, 141, 141, 389, 2, -241, -317, -218,
	-219, -240, -263, -264, 204, 126, 233, -246, 24, 104,
	-246, -246, 46, 413, 413, -125, 313, 2, 10, 11,
	60, 35, 403, 404, 405, 406, 136, 407, 408, 401,
	402, 400, 393, 394, 397, 190, 191, 75, 396, 395,
	68, 210, 293, 127, 128, 129, 130, 276, 161, 162,
	163, 13, 14, 15, 28, 240, 203, 390, 158, 316,
	398, 16, 17, 18, 182, 183, 226, 38, 159, -170,
	-199, -285, -285, -285, -285, -285, 246, -238, -280, 410,
	-139, 412, 412, -139, -285, -231, 412, -345, 7, -139,
	-294, 410, -303, -285, 414, 412, 5, 412, 5, -382,
	384, 138, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 259, -342, 378, -342, -342, -329, 412, -329,
	412, 412, -330, 412, 412, 412, -329, 412, 412, 412,
	385, 385, 391, 412, 412, -273, -274, -273, 350, -169,
	417, -380, -216, 412, -234, -319, -285, 405, -234, -234,
	236, -231, -285, 79, -249, 187, 219, 142, 200, 286,
	169, -345, -73, -282, 418, 412, -171, -374, -139, -164,
	-311, 391, -311, -139, -316, 412, -315, 405, -188, 412,
	414, -149, 277, -148, 22, 25, 107, 372, 120, -206,
	166, 251, 114, 322, 343, 117, 295, 277, 114, -243,
	-245, 32, 90, 221, 248, 49, 154, 212, 213, 324,
	114, 277, 383, 114, 117, 277, -151, 322, 343, 117,
	295, 277, -150, -206, 114, 418, 117, 231, -354, -192,
	417, -349, 405, 114, 114, 141, -222, -349, -188, -193,
	-164, -194, 412, -216, 224, 236, -396, -244, -243, 224,
	-160, -377, 383, 224, 224, -216, -175, 156, 2, -165,
	-164, -175, 156, -377, 224, -318, -196, -188, -196, 312,
	-182, 32, -153, 417, 51, 282, 114, -153, 114, -153,
	114, -153, 417, 114, -153, 114, 417, 114, 114, -231,
	413, 417, -396, -222, -168, 78, 412, 32, -296, -325,
	-326, -327, -336, -331, -334, 42, 48, 47, 344, 217,
	304, 305, 306, 307, 319, 370, 160, 40, 234, 235,
	172, 4, 41, -338, 179, 171, 173, 174, 175, 176,
	177, 318, 39, 267, 134, 135, 133, 106, 97, 96,
	230, 44, 43, 94, 347, 348, 349, 188, 189, 55,
	54, 375, 329, -355, -396, -222, 138, -173, 2, -188,
	2, 69, 70, 389, -348, -231, 32, -274, 2, -405,
	417, 202, -201, 209, 223, 150, 237, 387, -353, 5,
	4, -295, -308, 98, 206, -334, 8, 404, -343, 7,
	403, -347, -346, -347, 82, 414, -349, 337, 188, -348,
	24, 314, 2, -188, 287, -396, -398, 138, -188, -188,
	-188, -188, -188, 138, 2, 352, 2, 138, -164, -164,
	202, -188, 2, -190, 2, -189, 2, 337, 164, 337,
	-153, 417, -240, -264, -263, -266, -285, 24, -269, 132,
	220, -285, -287, -138, -138, -138, -220, -313, -285, 261,
	164, -348, -340, -325, -339, 272, 273, 271, 275, 274,
	-325, -187, -349, 347, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, 203,
	158, 316, 38, 159, -285, 350, -285, -285, -285, -285,
	216, 224, 227, 356, 124, 363, 104, 231, -407, 334,
	34, -292, -139, 412, -307, 29, 321, 24, -299, 291,
	412, -280, -285, -281, -232, -231, 413, 417, -232, -298,
	-294, -306, -305, 380, -349, 405, 413, -231, 376, 24,
	104, 405, 2, 7, -256, 388, 215, 95, 152, 214,
	-257, 300, -383, 131, 147, 412, 413, 2, 413, 2,
	413, 2, 413, 2, -285, -285, -285, -285, -285, -231,
	-345, -250, 2, -341, -231, 4, 388, 215, 95, 152,
	214, 300, -250, 2, 7, -231, 2, -231, 2, -251,
	2, -285, -231, -252, -286, -287, 403, 404, 398, 412,
	291, -253, 2, -285, -232, 347, 347, 347, -285, 45,
	198, 351, -254, -285, 141, -231, -169, -381, 32, -231,
	-226, 417, 141, 32, 4, -226, -226, 412, 413, 417,
	187, 187, -315, -249, 187, -247, 244, -247, -247, -394,
	412, 411, -311, -174, 410, 419, -349, -232, 2, 412,
	-311, -311, 414, -310, -309, 32, -182, 242, -310, 413,
	-188, -349, 417, 350, -260, 73, 62, -277, 156, 62,
	-360, -176, 73, -361, -164, 57, 362, 261, 140, -260,
	73, -260, 73, 73, 312, 325, 46, -317, 35, -87,
	71, 141, 350, -317, -245, -325, 90, 212, 213, 46,
	-344, -343, 404, -344, 46, -344, -344, -344, 383, -189,
	-317, 350, 252, -354, 71, 350, 417, 35, -87, 71,
	141, 350, -197, -174, 71, 337, -322, -321, 392, -164,
	414, -285, -285, 327, 413, 414, 182, 182, -202, -203,
	-164, -278, -277, -362, -363, -360, 181, 164, 362, 125,
	32, 114, -222, 350, 114, 252, 114, 114, 32, 236,
	224, 236, 224, -156, 340, 114, -279, 381, -270, -87,
	412, 98, 32, -270, -235, -236, -320, -237, -176, 412,
	-182, -188, -230, -230, -230, -197, -198, -173, -354, -355,
	-355, 413, -73, -323, 350, 383, 369, -203, -72, 25,
	78, 107, 413, 417, -225, 31, 410, -256, 412, -342,
	412, -135, -321, 383, 141, -224, -322, -322, 138, 70,
	395, 350, 413, 353, -275, -200, 266, 320, 278, 308,
	8, 7, 7, 417, -349, -188, 138, -223, -222, -222,
	309, -73, 138, -73, 414, -188, -197, -188, -317, -267,
	-343, 412, -268, 291, 292, 417, -147, 33, 102, 192,
	-188, 389, -285, -285, 350, -407, 334, -292, -285, 216,
	227, 356, 124, 363, 104, 231, 141, 412, -286, -286,
	-231, -285, 412, -231, 411, 421, 413, -285, 411, 411,
	417, -304, -305, 108, -285, 414, -219, 417, -218, -285,
	-231, -231, 413, 413, 350, 350, 350, 350, 412, -388,
	245, 412, 412, -285, 32, 417, 417, 417, 417, 413,
	413, 417, 413, 141, 413, 413, 413, 413, 413, -258,
	255, 413, 10, 11, 403, 404, 405, 406, 136, 407,
	408, 401, 402, 400, 393, 394, 395, 68, 210, 293,
	13, 14, 15, 182, 159, -286, -286, -286, -231, 412,
	413, -290, -291, 141, 138, 389, 389, 389, 32, -254,
	-254, -254, 413, 141, -231, 412, 413, -279, -319, -228,
	2, -315, -184, -349, -279, -279, -231, -285, -315, -315,
	-248, 369, 236, 187, -315, -309, 413, -395, -345, -311,
	-310, -345, -284, -283, 139, 222, 413, -232, 2, -310,
	-310, -349, -182, -216, -311, 413, 414, -148, -188, -176,
	-183, -164, 224, -277, 156, -155, 224, -325, -183, 412,
	412, 192, 192, -176, -183, 156, -176, 156, -183, -183,
	-400, 266, 232, -285, 205, 265, 225, -149, 277, -87,
	389, 412, -190, 277, -193, -344, -344, -243, 277, -189,
	-354, 383, 389, -173, -150, -87, 389, 412, -174, -151,
	277, 389, -188, -132, 155, 231, 405, -349, -126, 5,
	227, -126, 413, 417, 164, -175, 164, -181, -165, -87,
	-188, 141, 4, -189, -354, -354, -354, -87, -188, 114,
	-188, 114, -157, 110, -406, 395, -173, -219, -285, -242,
	-272, 284, 236, -217, -177, -176, 374, -182, -242, -227,
	417, 141, 395, 414, -217, -153, -153, -153, -153, -153,
	-222, 23, -354, 413, -325, 410, 411, 7, 7, 412,
	-345, -135, -134, 239, -133, -164, 5, -222, 141, -41,
	383, 265, 92, 337, 251, 164, -346, -346, -274, 360,
	66, 266, -346, 337, -398, 309, -73, -164, -268, -285,
	-313, -188, 418, -285, -285, -286, -286, 141, 412, -285,
	-296, 28, 28, 413, -232, 417, -281, -285, 413, -294,
	111, -285, 346, -349, 405, 413, 376, -219, -219, -219,
	5, 215, 152, 214, -257, 214, -257, -257, 7, -389,
	-179, 412, -164, 381, -218, 413, -340, -325, -285, -285,
	-285, -345, -285, -290, -285, -340, -325, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, 104, 224, 231, -286,
	417, -232, -291, -290, -285, -285, -325, 413, 413, 413,
	-231, -72, -239, 147, -322, 417, -239, -239, 413, -248,
	412, -285, -315, 411, 413, 417, -310, 411, 417, 420,
	395, -311, 413, 414, -216, -309, -349, 350, 350, 114,
	224, 371, -364, -361, -285, -221, -314, -176, -376, 412,
	-164, -372, -373, -171, 412, 412, -146, 107, 312, -262,
	114, -153, 114, -153, 387, 412, 412, 350, -260, 73,
	-288, -171, -231, 350, 350, 252, -288, -288, -231, 350,
	-288, 117, -135, 141, 336, -204, 167, -278, -165, 412,
	-175, 412, 412, -216, -188, -322, -244, -160, -261, 369,
	-174, 412, -174, -158, 197, -406, -352, -377, -265, -263,
	-242, -234, 225, 72, 413, 417, 414, -279, -236, -228,
	-285, 2, 413, 238, -136, 80, -136, 7, 411, 413,
	-345, 413, 417, 412, 395, 395, -222, 239, -185, -173,
	-188, -186, -197, -188, 237, 413, -147, -174, 28, 28,
	-285, -296, 413, -285, -285, 413, -285, 411, -285, 414,
	5, -285, 413, 413, 413, 413, -390, -164, -285, 413,
	413, 413, 417, 413, 413, 413, -291, 141, 104, 231,
	412, -285, 413, 413, 413, -293, 149, 46, -315, -293,
	-293, -222, -282, -345, -283, -174, 410, -310, -311, -349,
	414, -176, -183, -277, 114, -365, 73, -366, 60, 125,
	78, 224, 227, 362, 261, 57, 98, 270, 32, 413,
	413, 417, -172, 60, -172, -285, 412, -221, -222, 224,
	98, 224, 98, 91, 358, -176, -183, -222, -222, -188,
	-176, -183, 412, 413, -190, -189, -354, 413, -174, 71,
	-355, 347, -205, -206, 159, 412, -221, 412, -222, -202,
	32, -135, 412, 143, 236, -221, 236, -159, 196, -406,
	-352, -156, -242, -271, 412, 236, -87, -177, 2, -219,
	395, 91, 91, 411, 413, -133, -134, -354, -354, -42,
	-43, 164, 73, 254, -208, -207, 251, 231, -147, -285,
	-285, 413, 413, -349, 405, -219, -384, 251, 413, -285,
	-286, 141, 412, -296, 413, -385, 382, -285, -231, -385,
	-385, 413, -311, -345, -310, -277, -183, -187, -180, -164,
	125, 156, 227, 192, 412, -286, -188, 412, 2, -276,
	-401, 77, 332, -314, -147, -187, -147, 413, -231, 413,
	413, 227, 227, -285, -325, -153, -153, 413, 413, 350,
	350, -231, 350, 350, 389, -288, 249, -221, 413, -221,
	413, 413, -87, -221, -188, 413, -188, -406, -352, -157,
	105, -222, 73, -265, -292, 412, 412, 413, 417, 24,
	412, 24, 412, -186, 337, 413, -219, 46, 413, -286,
	-296, 413, -386, -387, -179, -310, 411, -366, -180, 224,
	-285, -166, 412, -285, -204, 412, -172, -219, 270, -152,
	60, 412, 412, -176, -183, -219, 412, 412, -288, -188,
	413, -276, 413, -204, 413, -261, 412, -352, -158, 364,
	225, 413, -183, -242, -355, -355, -43, -222, -222, -188,
	-391, 265, 292, -231, 413, 417, 32, 114, 413, -367,
	211, -164, 413, -205, -222, -147, 413, -188, -145, 369,
	-187, -210, -209, -207, -212, -211, -207, 413, -231, -231,
	412, -204, -276, -205, -276, 412, -221, -159, 312, -279,
	413, 413, 413, 413, 413, -392, -393, 38, 359, 82,
	-285, -392, -387, -389, 125, -368, -371, -370, 236, 142,
	250, 317, 413, 331, 379, 413, -216, -285, 413, 417,
	374, 413, 417, 374, 413, 413, -222, -205, -204, -204,
	-221, 413, -235, -135, -135, -393, 258, 137, 291, 258,
	137, -180, -370, 236, -371, 236, 364, 101, -367, -209,
	159, -211, 141, 413, -205, -205, 413, -279, 28, -369,
	221, 282, 51, 312, -369, -368, 412, 412, -154, 51,
	282, -276, -393, 21, 227, 98, -231, -231, -204, 413,
	413, -205, -205, 350, 412, -231, 413, -205,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	176, 178, 180, 0, 0, 0, 195, 197, 199, 200,
	-2, 0, 0, 0, 228, 229, 231, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	0, 825, -2, 0, 349, 351, 360, 362, 364, 366,
	367, 0, 429, 431, 433, 435, 437, 439, 441, 443,
	445, 447, 449, 451, 453, 455, 457, 459, 461, 463,
	465, 467, 469, 470, 472, 474, 476, -2, 737, 739,
	741, 743, -2, 60, 62, 64, 66, 68, 70, 85,
	203, 205, 207, 209, 212, 214, 216, 862, 234, 236,
	238, 240, 242, -2, 874, 0, 0, 0, -2, 0,
	-2, -2, -2, 755, 71, 72, 73, 74, 75, 76,
	91, 92, 93, 94, 95, 96, 78, 80, 81, 87,
	88, 90, 0, 0, 838, 840, 842, 844, -2, 0,
	0, -2, 7, 13, 15, 17, 20, 22, 24, 26,
	28, 30, 32, 34, 36, 38, 40, 44, 50, 52,
	54, 58, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 338, 0, 1484, 1367, 1371, 1425, 1374,
	1428, 1429, 1430, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 177, 179, 181, 182, 0, 0,
	0, 641, 1412, 1425, 1484, 0, 196, 198, 201, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 325, 1570, 327, 329, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 230, 232, 233, 0, 0,
	0, 0, 0, 0, 0, 324, 322, 1407, 267, 268,
	0, 307, 308, 309, 310, 311, 312, 314, 271, 273,
	275, 276, 278, 280, 282, 284, 286, 288, 290, 292,
	293, 295, 297, 298, 300, 302, 303, 305, 701, 0,
	0, 0, 0, 0, 342, 333, 341, 343, 345, 346,
	347, 348, 0, 159, 0, 574, 320, 318, 0, 155,
	0, 734, 0, 342, 1452, 337, 735, 736, 0, 0,
	731, 732, 1598, 765, 350, 352, 361, 363, 365, 368,
	-2, -2, 1690, -2, 391, -2, 399, 1693, 1600, 402,
	0, 404, -2, 407, 430, 432, 434, 436, 438, 440,
	442, 444, 446, 448, 450, 452, 454, 456, 458, 460,
	462, 464, 466, 468, 471, 473, 475, 477, 478, 0,
	0, 0, 0, 0, 482, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 481, 483,
	484, 485, 0, 530, 738, 740, 742, 0, 682, 864,
	61, 63, 65, 67, 69, 204, 206, 208, 210, 213,
	215, -2, 836, 837, 235, 237, 239, 241, 243, -2,
	0, 868, 868, 868, 0, 0, 837, 835, 0, 353,
	0, 355, 0, 482, 358, 359, 411, 412, 1072, 0,
	0, 0, 0, 0, 0, 1150, -2, -2, 1182, 1184,
	1671, 1690, 0, 1186, 1187, 0, 1189, 1191, 1192, 0,
	1195, 1196, 1350, 1419, 1414, 1379, 1380, 1381, 1382, 0,
	0, 1385, 0, 1387, 1388, 1389, 1252, 1206, -2, -2,
	-2, 1423, 988, 989, 990, 991, 992, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1701, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 0, 1660, 1677, 1683, 1678, 1668, 1224,
	-2, -2, 1491, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1672, 1673, -2, 1675, -2, -2, 1682, -2, 1686, 1687,
	-2, -2, 1692, -2, -2, 1695, 1696, -2, 1439, 1041,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1714, 1715, 1716, 1717, 1718, 1719, 767, 745, 758, 767,
	747, 748, 749, 750, 751, 756, 757, 760, 0, 752,
	753, 754, 854, 1576, 857, 641, 855, 839, 841, 0,
	843, 0, 0, 0, 848, 871, 869, 0, 905, 852,
	853, 863, 920, 0, 0, 940, 940, 931, 0, 962,
	0, 1424, 0, 0, 0, 0, -2, 1425, 1701, 1712,
	1713, 2, 77, 0, 1677, 962, 79, 0, 1677, 82,
	0, 1677, 0, -2, 86, 0, 1677, 160, 161, 1435,
	1436, 1440, 1441, 1442, 1443, 89, 0, 1403, 97, 0,
	1677, 1370, 0, 1400, 1444, 1445, 1446, 1447, 1448, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 0, 1397, 0, 0, 339, 340, 1375, 0,
	183, 184, 185, 1677, 187, 188, 1677, 190, 0, 0,
	0, 0, 0, 211, 641, 1677, 0, 218, 1408, 0,
	665, 1677, 663, 1411, -2, 1677, 685, 688, 1677, 690,
	641, 692, 1410, -2, 1432, 861, 1677, 781, 326, 328,
	0, 221, 0, 794, 0, 796, 0, 815, 968, 144,
	1677, 246, 265, 144, 1677, 249, 144, 1677, 252, 144,
	1677, 255, 1365, 144, 1677, 258, 259, 1677, 261, 162,
	262, 1677, 264, 321, 0, 0, -2, 315, 1413, -2,
	313, 272, 274, 277, 279, 281, 283, 285, 287, 289,
	291, 294, 296, 299, 301, 304, 306, -2, 0, 0,
	0, 0, 573, 0, 0, 0, 733, 0, 0, 0,
	372, 0, 0, 0, 0, 764, 369, 0, 388, 0,
	390, 1667, -2, -2, 394, 768, 772, 773, 774, 0,
	0, 0, 0, 401, 0, 0, 0, 405, 408, 0,
	479, 480, 0, 0, 490, 491, 492, 493, 494, 0,
	497, 519, 534, 0, 0, 501, 503, 0, 572, 506,
	0, 508, 0, 510, 0, 512, 0, 514, 0, 516,
	518, 520, 535, 522, 0, 0, 0, 533, 0, 539,
	0, 542, 543, 544, 0, 546, 547, 548, 0, 0,
	0, 556, 558, 0, 0, 486, 487, 144, 966, -2,
	0, 831, 883, 884, 0, 0, 0, 0, 866, 867,
	0, 0, 0, 827, 828, 354, 0, 357, 0, 0,
	0, 0, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1294,
	1291, 1292, 1295, 1296, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 1299, 1300, 0, 0, 1302, 0, 1304, 0,
	0, 0, 0, 0, 0, 1129, 1131, 1358, 0, 0,
	1301, 1077, 1078, 1079, 1114, 1115, 0, 1183, 1355, 1354,
	1185, 0, 1307, -2, 1308, 0, 0, 1188, 1394, 1193,
	1194, 1307, 0, 1349, 0, 0, 1384, 0, 1069, 1254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1025, 1039, 1046, 1043, 1042, 1027, 0, 1026,
	0, 0, 1024, 0, 0, 0, 1028, 0, 1330, -2,
	0, 0, 0, 0, 0, 744, -2, 746, 0, 762,
	0, 856, 0, 0, 909, 1359, 1363, 1364, 909, 909,
	0, 0, 1308, 0, 0, 0, 0, 959, 959, 959,
	957, 934, 0, 940, 0, -2, 0, 940, 940, 0,
	950, 0, 950, -2, 931, 0, 0, 963, 964, 0,
	0, 98, 728, 115, 0, 728, 728, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 83,
	666, 0, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	113, 0, 137, 139, 0, 0, 0, 0, 953, 1368,
	0, 1426, 1373, 0, 0, 0, 0, 1426, 0, 0,
	1414, 1415, 580, 0, 0, 0, 0, 661, 664, 0,
	683, 0, 860, 0, 0, 0, 0, 1677, 697, 1399,
	1431, 0, 1677, 783, 0, 972, 0, 797, 0, 0,
	969, 0, 244, 0, 142, 143, 0, 247, 0, 250,
	0, 253, 0, 0, 256, 0, 0, 0, 0, 0,
	863, 0, 0, 331, 344, 0, 0, 863, 0, 1310,
	980, 983, 984, 985, 1069, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1047, 1041, 1055, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1037, 0, 1012, 1012,
	1012, 1029, 1030, 1048, 1049, 1051, 1053, 981, 982, 1047,
	1047, 1044, 1045, 174, 0, 335, 0, 953, 374, 953,
	376, 0, 564, 0, 0, 0, 0, -2, 396, 0,
	770, 0, 775, 420, 421, 422, 777, 778, 400, 423,
	424, 425, 426, 427, 428, 0, 658, 0, 660, 1390,
	0, 397, 413, 398, 403, 0, 409, 0, 0, 495,
	496, 498, 499, 500, 1378, 569, 505, 0, 507, 509,
	511, 513, 515, 863, 524, 0, 526, 863, 537, 540,
	545, 549, 550, 551, 552, 553, 554, 0, 0, 0,
	681, 0, 834, 881, 882, 887, 891, 892, 895, 898,
	899, 889, 1072, 849, 850, 851, 875, 876, 711, 0,
	0, 356, 1073, 976, 977, 1031, 1032, 1033, 1034, 1035,
	1074, 1075, 1396, 0, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, -2, -2, -2, -2, -2, -2,
	-2, -2, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, -2, -2, -2, 1112, 1113, -2, 1303,
	1305, 0, 1358, 0, -2, 0, -2, -2, -2, -2,
	1126, 0, 1128, 1133, 1135, 1137, 0, 0, 0, 0,
	1357, 1147, 1341, 0, 0, 1282, 1283, 1284, 1132, 0,
	0, 1356, 1353, 0, 0, 1306, 1190, 0, 0, 0,
	1314, 1348, 1344, 0, 1416, 1422, 1197, 874, 0, 0,
	0, 0, 1204, 0, 1395, 1056, 1057, 1058, 1059, 1060,
	1061, 1070, 1262, 0, 0, 0, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 0, 0, 0, 0, 0, 0,
	0, 0, 1234, 0, 1317, -2, -2, -2, -2, -2,
	-2, -2, 0, 1236, 0, 0, 1248, 0, 1250, 0,
	1238, 1308, 1327, 0, 0, 1153, 0, 0, 0, 0,
	1690, 0, 1241, 1308, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 0, 1340, 761, 858, 0, 0,
	972, 0, 0, 0, 1362, 972, 972, 0, 904, 0,
	0, 0, 0, 0, 0, 954, 958, 955, 956, 0,
	0, 940, 950, 917, 0, 0, 1398, 0, 925, -2,
	950, 950, 0, 927, 949, 0, 641, 939, 929, -2,
	0, -2, 0, 0, 0, 0, 727, 117, 1677, 0,
	146, 0, 0, 631, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 667, 668, 670, 676, 678, 0,
	672, 1393, 0, 673, 0, 675, 677, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 1369, 0, 0, 165, 952, 0, 1376,
	0, 186, 189, 175, 640, 0, 0, 0, 0, 579,
	-2, 581, 583, 584, 585, 586, 1526, 1432, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 785, 791, 0, 874, 0, 813, 799,
	0, 0, 0, 813, 817, 818, 820, 821, 0, 0,
	970, 266, 144, 144, 144, 1366, 144, 144, 163, 260,
	263, 323, 269, 316, 0, 0, 0, 0, 317, 0,
	0, 0, 319, 0, 973, 975, 0, 986, 0, 1039,
	0, 153, 174, 0, 0, 0, 373, 378, 0, 565,
	0, 0, 389, 0, 769, 776, 0, 417, 0, 419,
	659, 1392, 1391, 0, 410, 488, 0, 572, 1377, 571,
	523, 527, 863, 529, 0, 566, 567, 568, 967, 0,
	893, 0, 890, 896, 897, 0, 878, 709, 710, 0,
	0, 0, -2, -2, 0, 0, 0, 1148, -2, 1127,
	1130, 1134, 1136, 1138, 0, 0, 0, 0, 0, 0,
	0, 1149, 1307, 0, 1351, 1354, -2, 1309, 1312, 1313,
	0, 0, 1345, 0, 0, 0, 0, 0, 873, 874,
	874, 874, 1203, 0, 0, 0, 0, 0, 0, 1205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1223,
	1010, 0, 1233, 0, 1235, 1036, 1247, 1249, 1237, 0,
	0, 1239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1156, 1157, 1158, 0, 1307,
	1240, 1333, 1334, 0, 0, 1050, 1052, 1054, 0, 0,
	0, 0, 1246, 0, 1339, 863, 906, 901, 1360, 953,
	908, 910, 1361, 1401, 901, 901, 0, 1309, 942, 0,
	944, 0, 0, 0, 946, 0, 935, 0, 937, 950,
	922, 0, 0, 915, 0, 914, 940, 0, 926, 928,
	930, 1416, 641, 948, 0, 965, 0, 116, 715, 0,
	0, 1402, 0, 119, 1677, 127, 0, 608, 0, 0,
	0, 0, 0, 730, 128, 1677, 144, 1677, 144, 129,
	132, 0, 136, 134, 0, 0, 599, 99, 728, 102,
	0, 0, 721, 0, 671, 674, 680, 84, 0, 723,
	713, 0, 0, 712, 138, 103, 0, 0, 725, 101,
	0, 0, 0, 174, 0, 0, 1372, 1427, 191, 193,
	194, 192, 588, 0, 1432, 0, 1432, 0, 1406, 577,
	641, 0, 953, 665, 686, -2, 689, 691, 699, 0,
	0, 0, 787, 791, 0, 790, 861, 886, 971, 792,
	813, 0, 0, 0, 802, 804, 801, 798, 795, 972,
	0, 0, 0, 0, 0, 245, 248, 251, 254, 257,
	330, 0, 0, 0, 1311, 0, 978, 0, 0, 0,
	0, 154, 172, 1558, 170, 167, 169, 334, 0, 375,
	0, 0, 0, 0, 0, 0, 386, 387, -2, 415,
	416, 418, 414, 0, 504, 525, 528, 536, 0, 0,
	877, 711, 0, 1076, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1342, 0, 0, 0, 1353, -2, 1315,
	1343, 1347, 0, 1417, 1421, 1198, 0, 0, 0, 0,
	1386, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 0, 1260,
	1261, 1265, 1409, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 1316, 1326, 1328, 1154, 1155, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, -2, -2, -2,
	1172, 1173, 1174, -2, -2, -2, 0, 0, 0, 1329,
	0, 0, 1331, 1332, 1336, 1337, 0, 1243, 1244, 1245,
	1338, 0, 903, 0, 907, 0, 903, 903, 870, 943,
	0, 961, 945, 920, 936, 0, 933, 918, 0, 919,
	0, 950, 940, 0, 947, 932, -2, 0, 0, 0,
	0, 145, 606, 630, 0, 0, 702, 708, 708, 0,
	1404, 1207, 1208, 0, 0, 0, 121, 0, 0, 0,
	0, 125, 0, 131, 135, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 107, 110, 0, 0,
	106, 0, 151, 0, 0, 596, 0, 582, 0, 0,
	0, 0, 580, 0, 217, 174, 662, 684, 0, 0,
	0, 0, 0, 789, 791, 0, 782, 783, 813, 885,
	793, 811, 812, 810, 0, 0, 0, 874, 819, 816,
	822, 823, 0, 332, 0, 156, 0, 0, 979, 987,
	0, 1040, 0, 0, 0, 0, 336, 0, 559, 560,
	594, 0, 563, 489, 888, 894, 879, 711, 0, 0,
	-2, 0, 1141, -2, -2, 1278, 1309, 1352, 1346, 0,
	1383, 874, 1199, 1201, 1202, 1071, 1267, 1264, 0, 1251,
	1218, 1219, 0, 1221, 1222, 1011, 1325, 0, 0, 0,
	0, 1309, 1280, 1242, 859, 1256, 0, 0, 911, 1256,
	1256, 0, 940, 938, 916, 912, 0, 923, 950, 1417,
	0, 717, 719, 118, 0, 607, 0, 610, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 0, 0, 632,
	639, 0, 711, 0, 711, 0, 0, 0, 0, 0,
	141, 0, 0, 729, 0, 144, 144, 0, 0, 716,
	0, 0, 0, 0, 722, 724, 714, 0, 726, 0,
	164, 0, 575, 595, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 698, 0, 0, 0, 779, 791, 0,
	784, 785, 220, 0, 0, 0, 800, 803, 805, 886,
	0, 0, 0, 974, 1038, 171, 0, 166, 168, 377,
	379, 0, 0, 385, 561, 593, 0, 0, 880, -2,
	-2, 1142, 1279, 1418, 1420, 0, 874, 0, 1253, 0,
	-2, 0, 0, 0, 1281, 845, 0, 902, 900, 846,
	847, 960, 950, 0, 924, 120, 0, 611, 612, 1405,
	614, 0, 616, 619, 0, 621, 1434, 0, 625, 588,
	0, 636, 637, 703, 704, 707, 705, 708, 874, 634,
	0, 122, 123, 140, 148, 124, 130, 0, 0, 0,
	0, 874, 0, 0, 0, 951, 0, 0, 639, 0,
	629, 588, 578, 0, 699, 695, 0, 0, 786, 787,
	0, 0, 0, 813, 824, 0, 0, 173, 0, 381,
	0, 383, 0, 592, 0, 1200, 1270, 0, 1220, -2,
	0, 1180, 1255, 1257, 0, 921, 913, 609, 613, 0,
	0, 645, 0, 0, 596, 0, 711, 0, 0, 150,
	0, 0, 0, 718, 720, 0, 0, 0, 109, 0,
	628, 588, 639, 596, 639, 0, 0, 788, 789, 0,
	807, 972, 809, 814, 0, 0, 380, 0, 0, 562,
	0, 0, 0, 1266, 1181, 0, 0, 0, 620, 650,
	0, 0, 0, 633, 0, 706, 1198, 641, 126, 0,
	147, 0, 600, 0, 0, 603, 0, 0, 0, 0,
	0, 596, 588, 576, 588, 0, 0, 780, 0, 808,
	174, 174, 382, 384, 1263, 1268, 1271, -2, 1643, 1481,
	0, 1269, 1258, 1259, 0, 622, 646, 647, 0, 642,
	643, 644, 1433, 623, 624, 638, 645, 149, 597, 0,
	0, 598, 0, 0, 112, 114, 0, 626, 596, 596,
	0, 696, 972, 157, 158, 0, 1273, 1274, 1275, 1276,
	1277, 615, 648, 0, 649, 0, 0, 0, 650, 601,
	0, 604, 0, 591, 627, 693, 639, 806, 0, 651,
	0, 654, 655, 0, 652, 635, 0, 0, 587, 589,
	590, 588, 1272, 653, 656, 657, 0, 0, 596, 596,
	0, 694, 602, 0, 0, 0, 596, 605,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 401, 3, 407, 402, 3,
	412, 413, 405, 403, 417, 404, 414, 406, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 421, 416,
	393, 395, 394, 397, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 410, 3, 411, 408, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 419, 400, 420, 398,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 396, 57736, 399, 57737, 409, 57738, 415, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1068
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1237
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1243
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1252
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1261
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1270
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1282
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1376
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return unimplemented(sqllex, "alter using")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1494
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.str = "CSV"
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1658
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1722
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1726
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.str = ""
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "CREATE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			// TODO(dan): This reuses the `AS OF SYSTEM TIME` syntax for convenience,
			// but it means something different here than SELECT and BACKUP. On the
			// other hand, RESTORE already stretches the definition a bit. Revisit.
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "DELETE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "DROP")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			return helpWith(sqllex, "DELETE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			return helpWith(sqllex, "INSERT")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{ /* SKIP DOC */
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "GRANT")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "RESET")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "RESET")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "USE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2281
		{ /* SKIP DOC */
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "USE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			return unimplemented(sqllex, "set local")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2456
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			return unimplemented(sqllex, "set from current")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = tree.Low
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = tree.Normal
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = tree.High
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2627
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			return helpWith(sqllex, "SHOW")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.str = "client_encoding"
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.str = "timezone"
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2735
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &tree.ShowRoleGrants{Roles: sqlDollar[5].union.nameList(), Grantees: sqlDollar[6].union.nameList()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &tree.ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2789
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2858
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2863
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2873
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = true
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = false
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2981
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2992
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3042
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3065
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3069
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = ""
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 602:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 605:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3431
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 626:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			return unimplemented(sqllex, "match full")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			return unimplemented(sqllex, "match partial")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			return unimplemented(sqllex, "match simple")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3570
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3661
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3669
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3688
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3692
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = nil
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = true
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = false
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = true
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = false
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3878
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3882
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = tree.Descending
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3933
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3935
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = true
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3990
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4016
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4079
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4090
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.str = ""
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.str = ""
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4151
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 779:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.str = ""
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.str = ""
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4259
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			return helpWith(sqllex, "INSERT")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4373
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4385
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 814:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4427
		{
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			return helpWith(sqllex, "SELECT")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			return helpWith(sqllex, "VALUES")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			return helpWith(sqllex, "TABLE")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			return helpWith(sqllex, "SELECT")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			return helpWith(sqllex, "TABLE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4707
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4731
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4738
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4742
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = true
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = false
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = false
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = true
		}
	case 870:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4772
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4819
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4843
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4958
		{
			return helpWith(sqllex, "VALUES")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4960
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4975
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5095
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5097
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5102
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5107
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = nil
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = true
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = false
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5253
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5327
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5341
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5349
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5398
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = nil
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5559
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5643
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5696
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = tree.Year
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = tree.Month
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = tree.Day
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = tree.Month
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = nil
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = tree.Second
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5799
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5834
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6128
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6339
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6362
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6366
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6374
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6389
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6390
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6403
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6414
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6430
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6431
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6435
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6441
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6503
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6505
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6508
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6510
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6513
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6515
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6518
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6520
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6523
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6528
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6530
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6533
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6542
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6543
		{
			return unimplemented(sqllex, "treat")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6553
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6561
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6564
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6566
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6569
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6574
		{
			return unimplemented(sqllex, "within group")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6575
		{
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6579
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6590
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6594
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6610
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6618
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6622
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6626
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6633
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6652
		{
			sqlVAL.str = ""
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6658
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6662
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6672
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6673
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6674
		{
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6677
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6678
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6684
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6685
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6686
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6687
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6688
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6699
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6703
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6709
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6715
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6721
		{
			sqlVAL.union.val = tree.Any
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6725
		{
			sqlVAL.union.val = tree.Some
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6729
		{
			sqlVAL.union.val = tree.All
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6734
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6735
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6736
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6737
		{
			sqlVAL.union.val = tree.Div
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6738
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6739
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6740
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6741
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6742
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6744
		{
			sqlVAL.union.val = tree.LT
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6745
		{
			sqlVAL.union.val = tree.GT
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6746
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6747
		{
			sqlVAL.union.val = tree.LE
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6748
		{
			sqlVAL.union.val = tree.GE
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6749
		{
			sqlVAL.union.val = tree.NE
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = tree.Like
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6754
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6755
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6756
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6768
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6774
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6784
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6794
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6798
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6804
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6814
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6818
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6840
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6844
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6848
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6854
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6861
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6865
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6882
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6886
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6890
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6894
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6898
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6904
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6910
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6916
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6920
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6924
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6930
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6934
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6945
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6952
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6962
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6968
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6972
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6979
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6985
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6989
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6996
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7002
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7011
		{
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7012
		{
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7016
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7026
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7035
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7039
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7043
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7051
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7061
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7071
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7078
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7100
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7104
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7108
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7114
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7124
		{
			sqlVAL.union.val = sqlDollar[1].union.nameList()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7128
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7135
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7139
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7143
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7147
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7150
		{
			return unimplemented(sqllex, "func const")
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7152
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7156
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7159
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7161
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7165
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7169
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7176
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7180
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7189
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7200
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7210
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7306
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7313
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7317
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7321
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7335
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7339
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7343
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7356
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7368
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7372
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7376
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7390
		{
			sqlVAL.str = ""
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7396
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7400
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
