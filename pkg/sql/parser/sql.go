// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:591
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9622

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1052,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 888,
	199, 888,
	214, 248,
	292, 248,
	300, 728,
	327, 248,
	336, 728,
	374, 728,
	398, 248,
	422, 728,
	-2, 0,
	-1, 74,
	214, 252,
	-2, 0,
	-1, 75,
	109, 1052,
	188, 1052,
	408, 1052,
	409, 1052,
	-2, 0,
	-1, 87,
	122, 1026,
	138, 1026,
	196, 1026,
	225, 1026,
	256, 1026,
	266, 1026,
	403, 1026,
	-2, 1010,
	-1, 117,
	128, 649,
	213, 649,
	294, 629,
	345, 629,
	391, 649,
	-2, 0,
	-1, 118,
	4, 1054,
	21, 1054,
	22, 1054,
	23, 1054,
	24, 1054,
	25, 1054,
	27, 1054,
	33, 1054,
	38, 1054,
	39, 1054,
	40, 1054,
	41, 1054,
	42, 1054,
	43, 1054,
	44, 1054,
	45, 1054,
	46, 1054,
	47, 1054,
	48, 1054,
	49, 1054,
	51, 1054,
	52, 1054,
	53, 1054,
	54, 1054,
	55, 1054,
	56, 1054,
	59, 1054,
	60, 1054,
	61, 1054,
	62, 1054,
	64, 1054,
	65, 1054,
	69, 1054,
	70, 1054,
	71, 1054,
	72, 1054,
	73, 1054,
	74, 1054,
	76, 1054,
	77, 1054,
	78, 1054,
	79, 1054,
	81, 1054,
	83, 1054,
	84, 1054,
	85, 1054,
	88, 1054,
	89, 1054,
	97, 1054,
	98, 1054,
	99, 1054,
	100, 1054,
	101, 1054,
	102, 1054,
	103, 1054,
	104, 1054,
	106, 1054,
	108, 1054,
	109, 1054,
	111, 1054,
	114, 1054,
	115, 1054,
	116, 1054,
	118, 1054,
	120, 1054,
	121, 1054,
	123, 1054,
	124, 1054,
	125, 1054,
	126, 1054,
	127, 1054,
	128, 1054,
	129, 1054,
	130, 1054,
	131, 1054,
	132, 1054,
	133, 1054,
	134, 1054,
	135, 1054,
	137, 1054,
	143, 1054,
	144, 1054,
	145, 1054,
	146, 1054,
	147, 1054,
	148, 1054,
	150, 1054,
	152, 1054,
	156, 1054,
	157, 1054,
	159, 1054,
	160, 1054,
	162, 1054,
	163, 1054,
	165, 1054,
	166, 1054,
	167, 1054,
	168, 1054,
	169, 1054,
	170, 1054,
	171, 1054,
	172, 1054,
	174, 1054,
	175, 1054,
	177, 1054,
	178, 1054,
	179, 1054,
	182, 1054,
	183, 1054,
	184, 1054,
	185, 1054,
	188, 1054,
	189, 1054,
	190, 1054,
	191, 1054,
	192, 1054,
	193, 1054,
	194, 1054,
	195, 1054,
	197, 1054,
	199, 1054,
	201, 1054,
	203, 1054,
	204, 1054,
	205, 1054,
	207, 1054,
	208, 1054,
	211, 1054,
	212, 1054,
	213, 1054,
	214, 1054,
	216, 1054,
	217, 1054,
	219, 1054,
	220, 1054,
	222, 1054,
	223, 1054,
	226, 1054,
	227, 1054,
	230, 1054,
	231, 1054,
	233, 1054,
	234, 1054,
	235, 1054,
	236, 1054,
	237, 1054,
	238, 1054,
	239, 1054,
	240, 1054,
	241, 1054,
	242, 1054,
	244, 1054,
	245, 1054,
	246, 1054,
	247, 1054,
	249, 1054,
	252, 1054,
	253, 1054,
	254, 1054,
	255, 1054,
	257, 1054,
	258, 1054,
	259, 1054,
	261, 1054,
	262, 1054,
	263, 1054,
	264, 1054,
	267, 1054,
	268, 1054,
	269, 1054,
	271, 1054,
	273, 1054,
	274, 1054,
	275, 1054,
	276, 1054,
	277, 1054,
	278, 1054,
	279, 1054,
	280, 1054,
	281, 1054,
	282, 1054,
	284, 1054,
	285, 1054,
	286, 1054,
	287, 1054,
	288, 1054,
	289, 1054,
	291, 1054,
	293, 1054,
	294, 1054,
	295, 1054,
	296, 1054,
	297, 1054,
	298, 1054,
	299, 1054,
	300, 1054,
	301, 1054,
	303, 1054,
	304, 1054,
	305, 1054,
	306, 1054,
	307, 1054,
	309, 1054,
	310, 1054,
	311, 1054,
	312, 1054,
	313, 1054,
	314, 1054,
	315, 1054,
	316, 1054,
	318, 1054,
	320, 1054,
	321, 1054,
	322, 1054,
	323, 1054,
	324, 1054,
	325, 1054,
	327, 1054,
	328, 1054,
	329, 1054,
	330, 1054,
	331, 1054,
	332, 1054,
	333, 1054,
	334, 1054,
	336, 1054,
	337, 1054,
	338, 1054,
	339, 1054,
	340, 1054,
	341, 1054,
	342, 1054,
	343, 1054,
	344, 1054,
	345, 1054,
	347, 1054,
	348, 1054,
	349, 1054,
	350, 1054,
	351, 1054,
	353, 1054,
	354, 1054,
	355, 1054,
	356, 1054,
	358, 1054,
	359, 1054,
	360, 1054,
	361, 1054,
	362, 1054,
	363, 1054,
	364, 1054,
	365, 1054,
	366, 1054,
	367, 1054,
	368, 1054,
	369, 1054,
	371, 1054,
	372, 1054,
	373, 1054,
	375, 1054,
	376, 1054,
	377, 1054,
	378, 1054,
	379, 1054,
	380, 1054,
	381, 1054,
	383, 1054,
	384, 1054,
	385, 1054,
	386, 1054,
	387, 1054,
	389, 1054,
	391, 1054,
	392, 1054,
	393, 1054,
	394, 1054,
	395, 1054,
	397, 1054,
	398, 1054,
	399, 1054,
	401, 1054,
	402, 1054,
	405, 1054,
	406, 1054,
	407, 1054,
	408, 1054,
	409, 1054,
	410, 1054,
	412, 1054,
	414, 1054,
	415, 1054,
	416, 1054,
	417, 1054,
	418, 1054,
	419, 1054,
	420, 1054,
	422, 1054,
	423, 1054,
	424, 1054,
	429, 1054,
	430, 1054,
	431, 1054,
	432, 1054,
	433, 1054,
	434, 1054,
	-2, 0,
	-1, 119,
	1, 941,
	203, 941,
	291, 941,
	298, 941,
	437, 941,
	460, 941,
	-2, 0,
	-1, 121,
	1, 941,
	460, 941,
	-2, 0,
	-1, 122,
	1, 941,
	460, 941,
	-2, 0,
	-1, 123,
	1, 945,
	460, 945,
	-2, 0,
	-1, 148,
	122, 1025,
	138, 1025,
	196, 1025,
	225, 1025,
	256, 1025,
	266, 1025,
	403, 1025,
	-2, 1019,
	-1, 181,
	4, 1061,
	5, 1061,
	6, 1061,
	7, 1061,
	8, 1061,
	9, 1061,
	10, 1061,
	21, 1061,
	22, 1061,
	23, 1061,
	24, 1061,
	25, 1061,
	27, 1061,
	33, 1061,
	34, 1061,
	38, 1061,
	39, 1061,
	40, 1061,
	41, 1061,
	42, 1061,
	43, 1061,
	44, 1061,
	45, 1061,
	46, 1061,
	47, 1061,
	48, 1061,
	49, 1061,
	51, 1061,
	52, 1061,
	53, 1061,
	54, 1061,
	55, 1061,
	56, 1061,
	57, 1061,
	58, 1061,
	59, 1061,
	60, 1061,
	61, 1061,
	62, 1061,
	64, 1061,
	65, 1061,
	67, 1061,
	69, 1061,
	70, 1061,
	71, 1061,
	72, 1061,
	73, 1061,
	74, 1061,
	76, 1061,
	77, 1061,
	78, 1061,
	79, 1061,
	81, 1061,
	83, 1061,
	84, 1061,
	85, 1061,
	87, 1061,
	88, 1061,
	89, 1061,
	90, 1061,
	91, 1061,
	92, 1061,
	93, 1061,
	94, 1061,
	95, 1061,
	96, 1061,
	97, 1061,
	98, 1061,
	99, 1061,
	100, 1061,
	101, 1061,
	102, 1061,
	103, 1061,
	104, 1061,
	105, 1061,
	106, 1061,
	108, 1061,
	109, 1061,
	111, 1061,
	114, 1061,
	115, 1061,
	116, 1061,
	118, 1061,
	120, 1061,
	121, 1061,
	123, 1061,
	124, 1061,
	125, 1061,
	126, 1061,
	127, 1061,
	128, 1061,
	129, 1061,
	130, 1061,
	131, 1061,
	132, 1061,
	133, 1061,
	134, 1061,
	135, 1061,
	136, 1061,
	137, 1061,
	143, 1061,
	144, 1061,
	145, 1061,
	146, 1061,
	147, 1061,
	148, 1061,
	150, 1061,
	152, 1061,
	155, 1061,
	156, 1061,
	157, 1061,
	159, 1061,
	160, 1061,
	162, 1061,
	163, 1061,
	165, 1061,
	166, 1061,
	167, 1061,
	168, 1061,
	169, 1061,
	170, 1061,
	171, 1061,
	172, 1061,
	173, 1061,
	174, 1061,
	175, 1061,
	177, 1061,
	178, 1061,
	179, 1061,
	182, 1061,
	183, 1061,
	184, 1061,
	185, 1061,
	187, 1061,
	188, 1061,
	189, 1061,
	190, 1061,
	191, 1061,
	192, 1061,
	193, 1061,
	194, 1061,
	195, 1061,
	197, 1061,
	199, 1061,
	200, 1061,
	201, 1061,
	202, 1061,
	203, 1061,
	204, 1061,
	205, 1061,
	206, 1061,
	207, 1061,
	208, 1061,
	211, 1061,
	212, 1061,
	213, 1061,
	214, 1061,
	216, 1061,
	217, 1061,
	219, 1061,
	220, 1061,
	221, 1061,
	222, 1061,
	223, 1061,
	224, 1061,
	226, 1061,
	227, 1061,
	230, 1061,
	231, 1061,
	233, 1061,
	234, 1061,
	235, 1061,
	236, 1061,
	237, 1061,
	238, 1061,
	239, 1061,
	240, 1061,
	241, 1061,
	242, 1061,
	243, 1061,
	244, 1061,
	245, 1061,
	246, 1061,
	247, 1061,
	248, 1061,
	249, 1061,
	250, 1061,
	251, 1061,
	252, 1061,
	253, 1061,
	254, 1061,
	255, 1061,
	257, 1061,
	258, 1061,
	259, 1061,
	262, 1061,
	263, 1061,
	264, 1061,
	267, 1061,
	268, 1061,
	269, 1061,
	270, 1061,
	271, 1061,
	272, 1061,
	273, 1061,
	274, 1061,
	275, 1061,
	276, 1061,
	277, 1061,
	278, 1061,
	279, 1061,
	280, 1061,
	281, 1061,
	282, 1061,
	284, 1061,
	285, 1061,
	286, 1061,
	287, 1061,
	288, 1061,
	289, 1061,
	291, 1061,
	293, 1061,
	294, 1061,
	295, 1061,
	296, 1061,
	297, 1061,
	298, 1061,
	299, 1061,
	300, 1061,
	301, 1061,
	303, 1061,
	304, 1061,
	305, 1061,
	306, 1061,
	307, 1061,
	309, 1061,
	310, 1061,
	311, 1061,
	312, 1061,
	313, 1061,
	314, 1061,
	315, 1061,
	316, 1061,
	318, 1061,
	319, 1061,
	320, 1061,
	321, 1061,
	322, 1061,
	323, 1061,
	324, 1061,
	325, 1061,
	327, 1061,
	328, 1061,
	329, 1061,
	330, 1061,
	331, 1061,
	332, 1061,
	333, 1061,
	334, 1061,
	336, 1061,
	337, 1061,
	338, 1061,
	339, 1061,
	340, 1061,
	341, 1061,
	342, 1061,
	343, 1061,
	344, 1061,
	345, 1061,
	346, 1061,
	347, 1061,
	348, 1061,
	349, 1061,
	350, 1061,
	351, 1061,
	352, 1061,
	353, 1061,
	354, 1061,
	355, 1061,
	356, 1061,
	358, 1061,
	359, 1061,
	360, 1061,
	361, 1061,
	362, 1061,
	363, 1061,
	364, 1061,
	365, 1061,
	366, 1061,
	367, 1061,
	368, 1061,
	369, 1061,
	371, 1061,
	372, 1061,
	373, 1061,
	375, 1061,
	376, 1061,
	377, 1061,
	378, 1061,
	379, 1061,
	380, 1061,
	381, 1061,
	383, 1061,
	384, 1061,
	385, 1061,
	386, 1061,
	387, 1061,
	389, 1061,
	391, 1061,
	392, 1061,
	393, 1061,
	394, 1061,
	395, 1061,
	396, 1061,
	397, 1061,
	398, 1061,
	399, 1061,
	401, 1061,
	402, 1061,
	404, 1061,
	405, 1061,
	406, 1061,
	407, 1061,
	408, 1061,
	409, 1061,
	410, 1061,
	411, 1061,
	412, 1061,
	414, 1061,
	415, 1061,
	416, 1061,
	417, 1061,
	418, 1061,
	419, 1061,
	420, 1061,
	422, 1061,
	423, 1061,
	424, 1061,
	429, 1061,
	430, 1061,
	431, 1061,
	432, 1061,
	433, 1061,
	434, 1061,
	435, 1061,
	443, 1061,
	448, 1061,
	449, 1061,
	450, 1061,
	457, 1061,
	461, 1061,
	-2, 0,
	-1, 554,
	154, 1734,
	388, 1734,
	440, 1734,
	459, 1734,
	-2, 0,
	-1, 555,
	154, 1812,
	388, 1812,
	440, 1812,
	459, 1812,
	-2, 0,
	-1, 556,
	154, 1723,
	388, 1723,
	440, 1723,
	459, 1723,
	-2, 0,
	-1, 558,
	154, 1901,
	388, 1901,
	440, 1901,
	459, 1901,
	-2, 0,
	-1, 560,
	154, 1930,
	388, 1930,
	440, 1930,
	459, 1930,
	-2, 0,
	-1, 567,
	154, 1822,
	388, 1822,
	440, 1822,
	459, 1822,
	-2, 501,
	-1, 584,
	459, 1681,
	462, 1681,
	-2, 697,
	-1, 585,
	459, 1683,
	462, 1683,
	-2, 698,
	-1, 586,
	459, 1682,
	462, 1682,
	-2, 699,
	-1, 587,
	462, 1628,
	-2, 700,
	-1, 734,
	294, 630,
	345, 630,
	-2, 0,
	-1, 735,
	294, 629,
	345, 629,
	-2, 581,
	-1, 738,
	1, 659,
	456, 659,
	458, 659,
	460, 659,
	-2, 0,
	-1, 739,
	1, 696,
	151, 696,
	456, 696,
	458, 696,
	460, 696,
	-2, 0,
	-1, 747,
	1, 633,
	456, 633,
	458, 633,
	460, 633,
	-2, 0,
	-1, 750,
	1, 659,
	456, 659,
	458, 659,
	460, 659,
	-2, 0,
	-1, 751,
	1, 661,
	456, 661,
	458, 661,
	460, 661,
	-2, 0,
	-1, 752,
	1, 664,
	456, 664,
	458, 664,
	460, 664,
	-2, 0,
	-1, 756,
	1, 678,
	456, 678,
	458, 678,
	460, 678,
	-2, 0,
	-1, 757,
	1, 680,
	456, 680,
	458, 680,
	460, 680,
	-2, 0,
	-1, 800,
	138, 1063,
	225, 1063,
	256, 1063,
	-2, 1019,
	-1, 815,
	138, 1062,
	225, 1062,
	256, 1062,
	-2, 1019,
	-1, 839,
	459, 1680,
	-2, 509,
	-1, 868,
	457, 1672,
	-2, 1663,
	-1, 874,
	5, 1197,
	-2, 1714,
	-1, 875,
	5, 1198,
	-2, 1718,
	-1, 876,
	5, 1199,
	-2, 1717,
	-1, 877,
	5, 1200,
	-2, 1927,
	-1, 878,
	5, 1201,
	-2, 1824,
	-1, 879,
	5, 1202,
	-2, 1893,
	-1, 880,
	5, 1203,
	-2, 1895,
	-1, 881,
	5, 1204,
	-2, 1907,
	-1, 882,
	5, 1205,
	-2, 1896,
	-1, 883,
	5, 1206,
	-2, 1897,
	-1, 884,
	5, 1207,
	-2, 1713,
	-1, 885,
	5, 1208,
	-2, 1943,
	-1, 886,
	5, 1209,
	-2, 1787,
	-1, 887,
	5, 1210,
	-2, 1832,
	-1, 888,
	5, 1211,
	-2, 1834,
	-1, 889,
	5, 1212,
	-2, 1791,
	-1, 890,
	5, 1213,
	457, 1690,
	-2, 1681,
	-1, 891,
	5, 1269,
	457, 1269,
	-2, 1978,
	-1, 896,
	457, 1691,
	-2, 1682,
	-1, 898,
	5, 1217,
	-2, 1976,
	-1, 899,
	5, 1218,
	-2, 1977,
	-1, 900,
	5, 1219,
	-2, 1790,
	-1, 901,
	5, 1220,
	-2, 1989,
	-1, 902,
	5, 1221,
	-2, 1792,
	-1, 903,
	5, 1222,
	-2, 1793,
	-1, 904,
	5, 1223,
	-2, 1794,
	-1, 905,
	5, 1224,
	-2, 1958,
	-1, 906,
	5, 1225,
	-2, 1987,
	-1, 907,
	5, 1226,
	-2, 1770,
	-1, 908,
	5, 1227,
	-2, 1771,
	-1, 909,
	5, 1241,
	-2, 1970,
	-1, 911,
	5, 1216,
	-2, 1966,
	-1, 912,
	5, 1216,
	-2, 1965,
	-1, 913,
	5, 1216,
	-2, 1982,
	-1, 914,
	5, 1233,
	-2, 1960,
	-1, 915,
	5, 1234,
	-2, 1715,
	-1, 916,
	5, 1244,
	-2, 1959,
	-1, 917,
	5, 1246,
	-2, 1998,
	-1, 919,
	5, 1257,
	-2, 1744,
	-1, 920,
	5, 1268,
	-2, 1991,
	-1, 921,
	5, 1260,
	-2, 1992,
	-1, 922,
	5, 1268,
	-2, 1993,
	-1, 923,
	5, 1264,
	-2, 1994,
	-1, 924,
	5, 1184,
	-2, 1800,
	-1, 925,
	5, 1185,
	-2, 1801,
	-1, 926,
	459, 1678,
	-2, 1662,
	-1, 927,
	457, 2018,
	-2, 1679,
	-1, 947,
	5, 1252,
	-2, 1917,
	-1, 964,
	5, 1251,
	-2, 1999,
	-1, 974,
	5, 1253,
	423, 1253,
	-2, 1961,
	-1, 975,
	5, 1254,
	423, 1254,
	-2, 1962,
	-1, 1011,
	457, 1690,
	-2, 1681,
	-1, 1039,
	154, 1930,
	388, 1930,
	440, 1930,
	459, 1930,
	-2, 0,
	-1, 1042,
	1, 487,
	460, 487,
	-2, 953,
	-1, 1162,
	309, 1659,
	450, 1659,
	-2, 1658,
	-1, 1185,
	461, 1659,
	-2, 1660,
	-1, 1220,
	300, 728,
	422, 728,
	-2, 247,
	-1, 1240,
	280, 1050,
	-2, 861,
	-1, 1249,
	260, 1685,
	-2, 0,
	-1, 1313,
	1, 362,
	456, 362,
	458, 362,
	460, 362,
	-2, 1024,
	-1, 1316,
	4, 1997,
	11, 1997,
	12, 1997,
	14, 1997,
	15, 1997,
	16, 1997,
	17, 1997,
	18, 1997,
	19, 1997,
	21, 1997,
	22, 1997,
	23, 1997,
	24, 1997,
	25, 1997,
	27, 1997,
	30, 1997,
	31, 1997,
	33, 1997,
	35, 1997,
	38, 1997,
	39, 1997,
	40, 1997,
	41, 1997,
	42, 1997,
	43, 1997,
	44, 1997,
	45, 1997,
	46, 1997,
	47, 1997,
	48, 1997,
	49, 1997,
	51, 1997,
	52, 1997,
	53, 1997,
	54, 1997,
	55, 1997,
	56, 1997,
	59, 1997,
	60, 1997,
	61, 1997,
	62, 1997,
	64, 1997,
	65, 1997,
	66, 1997,
	69, 1997,
	70, 1997,
	71, 1997,
	72, 1997,
	73, 1997,
	74, 1997,
	75, 1997,
	76, 1997,
	77, 1997,
	78, 1997,
	79, 1997,
	81, 1997,
	82, 1997,
	83, 1997,
	84, 1997,
	85, 1997,
	87, 1997,
	88, 1997,
	89, 1997,
	97, 1997,
	98, 1997,
	99, 1997,
	100, 1997,
	101, 1997,
	102, 1997,
	103, 1997,
	104, 1997,
	106, 1997,
	108, 1997,
	109, 1997,
	111, 1997,
	114, 1997,
	115, 1997,
	116, 1997,
	118, 1997,
	120, 1997,
	121, 1997,
	123, 1997,
	124, 1997,
	125, 1997,
	126, 1997,
	127, 1997,
	128, 1997,
	129, 1997,
	130, 1997,
	131, 1997,
	132, 1997,
	133, 1997,
	134, 1997,
	135, 1997,
	139, 1997,
	140, 1997,
	141, 1997,
	142, 1997,
	143, 1997,
	144, 1997,
	145, 1997,
	146, 1997,
	147, 1997,
	148, 1997,
	149, 1997,
	150, 1997,
	152, 1997,
	155, 1997,
	156, 1997,
	157, 1997,
	159, 1997,
	160, 1997,
	162, 1997,
	163, 1997,
	165, 1997,
	166, 1997,
	167, 1997,
	168, 1997,
	169, 1997,
	170, 1997,
	171, 1997,
	172, 1997,
	173, 1997,
	174, 1997,
	175, 1997,
	176, 1997,
	177, 1997,
	178, 1997,
	179, 1997,
	180, 1997,
	181, 1997,
	183, 1997,
	184, 1997,
	185, 1997,
	187, 1997,
	188, 1997,
	189, 1997,
	190, 1997,
	191, 1997,
	192, 1997,
	193, 1997,
	194, 1997,
	195, 1997,
	197, 1997,
	199, 1997,
	200, 1997,
	201, 1997,
	202, 1997,
	203, 1997,
	204, 1997,
	205, 1997,
	206, 1997,
	207, 1997,
	208, 1997,
	209, 1997,
	210, 1997,
	211, 1997,
	212, 1997,
	213, 1997,
	214, 1997,
	216, 1997,
	217, 1997,
	219, 1997,
	220, 1997,
	221, 1997,
	222, 1997,
	223, 1997,
	224, 1997,
	226, 1997,
	227, 1997,
	230, 1997,
	231, 1997,
	232, 1997,
	233, 1997,
	234, 1997,
	235, 1997,
	236, 1997,
	237, 1997,
	238, 1997,
	239, 1997,
	240, 1997,
	241, 1997,
	242, 1997,
	243, 1997,
	244, 1997,
	245, 1997,
	246, 1997,
	247, 1997,
	250, 1997,
	252, 1997,
	253, 1997,
	254, 1997,
	255, 1997,
	257, 1997,
	258, 1997,
	259, 1997,
	262, 1997,
	263, 1997,
	264, 1997,
	265, 1997,
	267, 1997,
	268, 1997,
	269, 1997,
	271, 1997,
	273, 1997,
	274, 1997,
	275, 1997,
	276, 1997,
	277, 1997,
	278, 1997,
	279, 1997,
	280, 1997,
	281, 1997,
	282, 1997,
	284, 1997,
	285, 1997,
	286, 1997,
	287, 1997,
	288, 1997,
	289, 1997,
	291, 1997,
	293, 1997,
	294, 1997,
	295, 1997,
	296, 1997,
	297, 1997,
	298, 1997,
	299, 1997,
	300, 1997,
	301, 1997,
	303, 1997,
	304, 1997,
	305, 1997,
	306, 1997,
	307, 1997,
	308, 1997,
	309, 1997,
	310, 1997,
	311, 1997,
	312, 1997,
	313, 1997,
	314, 1997,
	315, 1997,
	316, 1997,
	318, 1997,
	319, 1997,
	320, 1997,
	321, 1997,
	322, 1997,
	323, 1997,
	324, 1997,
	325, 1997,
	326, 1997,
	327, 1997,
	328, 1997,
	329, 1997,
	330, 1997,
	331, 1997,
	332, 1997,
	333, 1997,
	334, 1997,
	336, 1997,
	337, 1997,
	338, 1997,
	339, 1997,
	340, 1997,
	341, 1997,
	342, 1997,
	343, 1997,
	344, 1997,
	345, 1997,
	347, 1997,
	348, 1997,
	349, 1997,
	350, 1997,
	351, 1997,
	352, 1997,
	353, 1997,
	354, 1997,
	355, 1997,
	356, 1997,
	358, 1997,
	359, 1997,
	360, 1997,
	361, 1997,
	362, 1997,
	363, 1997,
	364, 1997,
	365, 1997,
	366, 1997,
	367, 1997,
	368, 1997,
	369, 1997,
	371, 1997,
	372, 1997,
	373, 1997,
	375, 1997,
	376, 1997,
	377, 1997,
	378, 1997,
	379, 1997,
	380, 1997,
	381, 1997,
	383, 1997,
	384, 1997,
	385, 1997,
	386, 1997,
	387, 1997,
	389, 1997,
	391, 1997,
	392, 1997,
	393, 1997,
	394, 1997,
	395, 1997,
	397, 1997,
	398, 1997,
	399, 1997,
	401, 1997,
	402, 1997,
	405, 1997,
	406, 1997,
	407, 1997,
	408, 1997,
	409, 1997,
	410, 1997,
	412, 1997,
	414, 1997,
	415, 1997,
	416, 1997,
	417, 1997,
	418, 1997,
	419, 1997,
	420, 1997,
	422, 1997,
	423, 1997,
	424, 1997,
	429, 1997,
	430, 1997,
	431, 1997,
	432, 1997,
	433, 1997,
	434, 1997,
	435, 1997,
	436, 1997,
	438, 1997,
	439, 1997,
	440, 1997,
	441, 1997,
	442, 1997,
	443, 1997,
	445, 1997,
	446, 1997,
	447, 1997,
	448, 1997,
	449, 1997,
	450, 1997,
	451, 1997,
	452, 1997,
	453, 1997,
	455, 1997,
	458, 1997,
	459, 1997,
	461, 1997,
	462, 1997,
	-2, 0,
	-1, 1319,
	154, 1901,
	388, 1901,
	440, 1901,
	459, 1901,
	-2, 0,
	-1, 1348,
	294, 630,
	345, 630,
	-2, 0,
	-1, 1371,
	1, 625,
	456, 625,
	458, 625,
	460, 625,
	-2, 0,
	-1, 1372,
	1, 650,
	456, 650,
	458, 650,
	460, 650,
	-2, 0,
	-1, 1373,
	1, 632,
	456, 632,
	458, 632,
	460, 632,
	-2, 0,
	-1, 1375,
	1, 636,
	456, 636,
	458, 636,
	460, 636,
	-2, 0,
	-1, 1400,
	1, 1950,
	456, 1950,
	458, 1950,
	459, 1950,
	460, 1950,
	-2, 676,
	-1, 1401,
	1, 1899,
	456, 1899,
	458, 1899,
	459, 1899,
	460, 1899,
	-2, 677,
	-1, 1414,
	1, 948,
	460, 948,
	-2, 953,
	-1, 1419,
	138, 1062,
	225, 1062,
	256, 1062,
	-2, 1019,
	-1, 1515,
	122, 1026,
	138, 1026,
	196, 1026,
	225, 1026,
	256, 1026,
	266, 1026,
	403, 1026,
	-2, 1425,
	-1, 1568,
	458, 1563,
	-2, 0,
	-1, 1610,
	122, 1026,
	138, 1026,
	196, 1026,
	225, 1026,
	256, 1026,
	266, 1026,
	403, 1026,
	-2, 1134,
	-1, 1664,
	457, 1256,
	-2, 1244,
	-1, 1703,
	1, 489,
	460, 489,
	-2, 953,
	-1, 1900,
	1, 627,
	456, 627,
	458, 627,
	460, 627,
	-2, 0,
	-1, 1901,
	1, 652,
	456, 652,
	458, 652,
	460, 652,
	-2, 0,
	-1, 1985,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1305,
	-1, 1986,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1306,
	-1, 1987,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1307,
	-1, 1988,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1308,
	-1, 1989,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1309,
	-1, 1990,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1310,
	-1, 1991,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1311,
	-1, 1992,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1312,
	-1, 2004,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1324,
	-1, 2005,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1325,
	-1, 2006,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1326,
	-1, 2009,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1331,
	-1, 2015,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1335,
	-1, 2017,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1343,
	-1, 2018,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1344,
	-1, 2019,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1345,
	-1, 2020,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1346,
	-1, 2114,
	5, 1213,
	154, 1574,
	457, 1690,
	-2, 1681,
	-1, 2115,
	154, 1575,
	-2, 1954,
	-1, 2116,
	154, 1576,
	-2, 1821,
	-1, 2117,
	154, 1577,
	-2, 1745,
	-1, 2118,
	154, 1578,
	-2, 1781,
	-1, 2119,
	154, 1579,
	-2, 1819,
	-1, 2120,
	154, 1580,
	-2, 1892,
	-1, 2196,
	1, 1135,
	2, 1135,
	87, 1135,
	122, 1135,
	138, 1135,
	151, 1135,
	155, 1135,
	161, 1135,
	164, 1135,
	187, 1135,
	196, 1135,
	206, 1135,
	221, 1135,
	225, 1135,
	243, 1135,
	256, 1135,
	260, 1135,
	266, 1135,
	317, 1135,
	319, 1135,
	403, 1135,
	413, 1135,
	426, 1135,
	427, 1135,
	428, 1135,
	437, 1135,
	456, 1135,
	458, 1135,
	460, 1135,
	462, 1135,
	-2, 1134,
	-1, 2201,
	457, 1664,
	-2, 1676,
	-1, 2222,
	457, 1255,
	-2, 1245,
	-1, 2460,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1333,
	-1, 2461,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1337,
	-1, 2467,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1339,
	-1, 2647,
	203, 953,
	291, 953,
	298, 953,
	437, 953,
	-2, 486,
	-1, 2739,
	280, 1050,
	-2, 861,
	-1, 2819,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1341,
	-1, 2826,
	200, 0,
	202, 0,
	250, 0,
	-2, 1360,
	-1, 2889,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1389,
	-1, 2890,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1390,
	-1, 2891,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1391,
	-1, 2895,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1395,
	-1, 2896,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1396,
	-1, 2897,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1397,
	-1, 2940,
	457, 1665,
	-2, 1677,
	-1, 3028,
	459, 2100,
	-2, 996,
	-1, 3074,
	200, 0,
	202, 0,
	250, 0,
	-2, 1361,
	-1, 3077,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1364,
	-1, 3078,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1366,
	-1, 3234,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1365,
	-1, 3235,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1367,
	-1, 3245,
	200, 0,
	-2, 1398,
	-1, 3349,
	200, 0,
	-2, 1399,
	-1, 3465,
	43, 0,
	173, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1957,
}

const sqlPrivate = 57344

const sqlLast = 73672

var sqlAct = [...]int{

	896, 3464, 3559, 3301, 3275, 3474, 3278, 3549, 2353, 3178,
	2145, 2726, 3434, 3443, 3431, 3418, 3476, 3060, 3512, 3475,
	3264, 2960, 2362, 3353, 3308, 3463, 2857, 2354, 3202, 2187,
	1972, 1305, 1012, 3019, 1048, 3014, 3225, 3313, 3136, 213,
	2032, 213, 213, 825, 213, 213, 213, 213, 213, 2748,
	2664, 213, 1430, 2188, 1166, 3024, 3001, 2251, 1634, 586,
	2755, 2722, 1751, 2961, 3249, 2394, 2750, 1301, 2325, 565,
	2350, 2327, 1513, 1605, 2453, 2623, 2330, 213, 816, 1067,
	2396, 586, 1159, 2609, 2569, 2596, 3059, 1004, 1355, 2309,
	1603, 1834, 2393, 2404, 2385, 2585, 1577, 2387, 1876, 2363,
	1826, 682, 1837, 1827, 2253, 2189, 2912, 2310, 2083, 1969,
	1541, 1523, 3108, 824, 141, 2568, 1760, 2488, 3354, 1965,
	2045, 2063, 1178, 1635, 1789, 1785, 2449, 2191, 2403, 1055,
	2285, 1175, 892, 1778, 2328, 1738, 2163, 1736, 1578, 1414,
	3302, 2628, 2075, 2724, 2286, 32, 2029, 1168, 1298, 1855,
	813, 1314, 1288, 2356, 2142, 1191, 1823, 4, 1234, 829,
	2057, 1308, 207, 587, 1044, 533, 996, 2243, 519, 588,
	999, 86, 541, 2397, 2171, 1536, 213, 213, 2153, 978,
	1613, 206, 2046, 1587, 2110, 1504, 148, 1429, 149, 141,
	549, 582, 1431, 1822, 1312, 559, 1843, 1264, 658, 1750,
	627, 852, 1188, 536, 1001, 37, 36, 1413, 1435, 729,
	34, 544, 25, 23, 976, 21, 745, 2929, 1246, 2930,
	1857, 591, 2484, 1877, 3589, 1443, 1444, 2355, 2162, 1857,
	3580, 1857, 1052, 677, 2162, 3579, 820, 3558, 3541, 2162,
	594, 1794, 3150, 591, 3539, 1474, 3498, 2765, 3150, 3496,
	3499, 205, 1446, 2162, 1443, 1444, 3494, 2409, 2645, 1052,
	2162, 3491, 594, 2764, 3488, 3492, 3485, 815, 3489, 3461,
	1794, 3460, 692, 1794, 1474, 1794, 820, 2155, 3459, 3456,
	1445, 1446, 1869, 1869, 2915, 1029, 1024, 1443, 1444, 1465,
	1476, 1477, 1478, 1486, 1487, 1488, 3455, 3413, 3403, 2503,
	1869, 2215, 3150, 979, 979, 2504, 1479, 1474, 3402, 1445,
	2162, 3396, 3150, 3390, 1446, 1794, 3388, 3150, 1465, 1492,
	3150, 3414, 821, 3351, 2541, 2542, 853, 2215, 801, 3334,
	800, 3337, 3331, 1794, 3292, 3070, 3150, 3291, 1794, 3284,
	3283, 1794, 1445, 1794, 3150, 3255, 3236, 1869, 3223, 1794,
	2215, 1465, 1869, 1468, 1469, 1470, 1471, 808, 1462, 2915,
	1025, 3214, 3175, 1451, 993, 2777, 2162, 3167, 3149, 3076,
	1209, 2162, 3150, 2215, 3036, 1374, 3030, 2999, 2793, 2211,
	2793, 3000, 1468, 1469, 1470, 1471, 2935, 2154, 3168, 2925,
	2936, 980, 1451, 2926, 1473, 1475, 2918, 2850, 2838, 2792,
	2162, 1794, 2162, 2793, 1794, 2784, 1203, 2717, 1514, 2785,
	2582, 1869, 2785, 1794, 2162, 1468, 1469, 1470, 1471, 982,
	2300, 983, 2580, 1473, 1475, 1451, 2162, 2579, 2242, 2533,
	1709, 2162, 2162, 2162, 1443, 1444, 2777, 2337, 2452, 2516,
	1486, 1487, 1488, 2517, 2505, 1793, 1466, 2240, 2162, 1483,
	1443, 1444, 1493, 1573, 1474, 2383, 1473, 1475, 1187, 1873,
	2228, 1446, 2547, 2214, 2162, 2209, 1492, 2215, 1729, 2162,
	2203, 1357, 2487, 2182, 1794, 1466, 1489, 1446, 1490, 1858,
	2060, 1197, 1604, 2161, 2986, 1460, 1461, 2162, 1858, 1445,
	1858, 2814, 2541, 2542, 1788, 2559, 2560, 2561, 1465, 1872,
	1481, 3125, 2432, 1873, 2766, 1445, 2181, 2180, 1466, 2179,
	2178, 3072, 984, 981, 807, 806, 805, 804, 181, 803,
	2541, 2542, 1472, 2767, 213, 799, 1491, 798, 797, 823,
	796, 75, 795, 794, 793, 792, 791, 1208, 790, 789,
	1467, 1480, 788, 787, 727, 2557, 2061, 726, 725, 724,
	723, 1472, 213, 1514, 722, 2764, 2556, 183, 721, 213,
	720, 719, 1468, 1469, 1470, 1471, 1025, 718, 717, 1467,
	716, 715, 1451, 1202, 714, 213, 1070, 213, 213, 1171,
	213, 1070, 213, 3087, 1472, 2154, 713, 712, 1451, 711,
	213, 213, 710, 1025, 709, 708, 1483, 707, 706, 1493,
	705, 182, 1467, 1473, 1475, 1068, 704, 1054, 703, 702,
	1179, 1059, 701, 691, 690, 213, 2062, 2059, 649, 648,
	607, 606, 605, 597, 2101, 596, 1865, 595, 1484, 213,
	2547, 1171, 1171, 213, 213, 1856, 213, 1944, 572, 2558,
	150, 571, 570, 2343, 569, 553, 203, 1481, 213, 1181,
	202, 201, 200, 199, 211, 1466, 213, 198, 2547, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 197, 196,
	213, 213, 213, 213, 213, 1171, 1171, 1443, 1444, 195,
	1171, 2562, 213, 1171, 213, 213, 194, 2305, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 1474, 213, 193,
	1042, 192, 191, 181, 1446, 190, 189, 1309, 181, 188,
	187, 1482, 2064, 2557, 1457, 1458, 1464, 1463, 1459, 1485,
	186, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	185, 1472, 1445, 184, 1171, 181, 2933, 2794, 3095, 181,
	1164, 1063, 183, 1156, 1161, 2626, 1196, 183, 1201, 1467,
	1207, 117, 591, 1190, 1037, 2510, 213, 2499, 2315, 1189,
	2551, 2543, 2544, 2545, 2546, 2548, 2549, 1251, 2204, 213,
	1544, 594, 2099, 1544, 183, 1484, 1543, 2359, 183, 1543,
	1606, 2195, 1879, 2097, 213, 1734, 182, 2095, 1620, 2093,
	1530, 182, 1240, 1243, 141, 1193, 175, 1547, 1376, 1329,
	1542, 175, 1442, 181, 176, 1302, 839, 2558, 1525, 176,
	1061, 2058, 2541, 2542, 181, 1451, 1014, 3481, 182, 2344,
	3462, 3384, 182, 1292, 1295, 150, 3210, 1315, 175, 1162,
	150, 3340, 175, 1185, 1325, 2220, 176, 3344, 1317, 1384,
	176, 1328, 183, 3338, 1321, 3215, 1473, 1475, 3274, 3129,
	1878, 821, 1248, 183, 2272, 3107, 3106, 150, 1482, 3094,
	3093, 150, 181, 181, 3092, 3091, 1485, 3085, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 3084, 3083, 1420,
	2998, 2788, 2949, 2948, 1247, 1247, 182, 1447, 1448, 1449,
	1450, 1452, 1453, 1375, 2946, 1341, 175, 182, 1466, 2541,
	2542, 183, 183, 2939, 176, 2909, 2908, 175, 1730, 2287,
	2907, 2834, 2830, 2621, 2576, 176, 2567, 2448, 1419, 2553,
	2554, 2555, 2540, 2537, 1185, 150, 2552, 2550, 2551, 2543,
	2544, 2545, 2546, 2548, 2549, 1412, 150, 1525, 2536, 1526,
	1334, 1524, 992, 2534, 2523, 182, 182, 2522, 2521, 2518,
	2547, 1418, 1349, 2515, 2493, 175, 175, 2543, 2544, 2545,
	2546, 2548, 2549, 176, 176, 2492, 1428, 1512, 2485, 2384,
	181, 2196, 2541, 2542, 1417, 2559, 2560, 2561, 213, 2068,
	2342, 1799, 1415, 1442, 150, 150, 3356, 1441, 3587, 3557,
	1797, 3071, 1467, 1831, 3556, 3497, 1013, 2859, 2541, 2542,
	3451, 3449, 1584, 2602, 213, 3381, 3378, 181, 3375, 183,
	3374, 801, 1575, 800, 213, 1070, 213, 213, 213, 1421,
	3373, 1443, 1444, 3209, 586, 213, 213, 1438, 1439, 586,
	213, 1629, 821, 1546, 3369, 213, 2556, 2547, 3363, 3335,
	3330, 1171, 3329, 2035, 1623, 3270, 183, 1701, 1446, 3247,
	3220, 3219, 3200, 182, 3197, 3191, 3124, 3105, 3050, 3047,
	2976, 2975, 1070, 175, 2964, 2963, 2921, 2825, 1594, 2795,
	2041, 176, 2778, 868, 2742, 1614, 1445, 2711, 2689, 2639,
	2100, 2667, 2666, 1581, 1582, 2641, 2581, 2514, 1538, 1539,
	182, 1735, 150, 2513, 2498, 1706, 2476, 1443, 1444, 1732,
	175, 2324, 1548, 1545, 1700, 979, 1537, 1534, 176, 141,
	2547, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	2557, 2224, 2223, 3196, 1446, 2199, 2176, 2160, 2091, 2358,
	1508, 1619, 1576, 1572, 1571, 1570, 2547, 1569, 1568, 1567,
	1566, 1599, 1565, 1564, 1562, 1561, 1560, 1624, 1559, 1558,
	1626, 1557, 1445, 1880, 1556, 1555, 2667, 1554, 1553, 1451,
	1552, 2562, 1551, 1550, 1527, 1509, 1507, 1502, 1036, 1622,
	1027, 1611, 821, 1020, 3126, 3080, 2945, 2928, 2924, 1703,
	1631, 2502, 2217, 2177, 3259, 1698, 591, 1171, 213, 3128,
	2944, 591, 1574, 2557, 1070, 2541, 2542, 1526, 1728, 2637,
	1505, 1602, 1601, 1608, 1744, 594, 1600, 1729, 1598, 1597,
	594, 1596, 1729, 1615, 2558, 1630, 1058, 3376, 839, 2557,
	1697, 1729, 839, 1795, 1056, 3314, 2692, 1052, 2098, 1632,
	1154, 2751, 3213, 213, 213, 1154, 3169, 2931, 1775, 2096,
	213, 1777, 1755, 2094, 1782, 2092, 2780, 2779, 1606, 3009,
	213, 2545, 2546, 2548, 2549, 1721, 1410, 1010, 1052, 213,
	1544, 213, 3341, 213, 2289, 2520, 1543, 213, 1057, 1704,
	1715, 2519, 2458, 1052, 3339, 2274, 1053, 1049, 785, 213,
	1443, 1444, 2974, 1532, 1720, 1719, 1356, 2558, 1729, 1726,
	1348, 2728, 1877, 2727, 1759, 3309, 1043, 1357, 1828, 2990,
	1474, 2978, 2800, 3273, 2705, 1773, 3250, 1446, 3560, 2355,
	2861, 2508, 2076, 2558, 1557, 1385, 1815, 786, 3482, 1171,
	213, 1171, 1786, 1557, 213, 2222, 1563, 1171, 1540, 2720,
	1171, 213, 1819, 213, 213, 1445, 2543, 2544, 2545, 2546,
	2548, 2549, 1224, 1171, 1171, 1171, 3493, 213, 1790, 3490,
	591, 1190, 213, 835, 1641, 1840, 2760, 1189, 1849, 2956,
	3428, 586, 213, 1338, 213, 1050, 213, 3015, 213, 594,
	213, 3528, 1051, 2391, 3395, 3483, 1443, 1444, 3527, 2445,
	1725, 1781, 2255, 2649, 213, 1723, 644, 213, 2128, 213,
	1792, 3160, 1212, 1427, 1847, 781, 1474, 991, 213, 2553,
	2554, 2555, 1382, 1446, 2229, 1222, 2552, 2550, 2551, 2543,
	2544, 2545, 2546, 2548, 2549, 1832, 1896, 213, 1451, 1511,
	1809, 1808, 819, 213, 3584, 1882, 3300, 1425, 3294, 779,
	2992, 1445, 2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548,
	2549, 1716, 1860, 777, 819, 1862, 1070, 775, 1864, 1473,
	1475, 1884, 1867, 766, 772, 2988, 1842, 895, 1058, 1845,
	1449, 1450, 1452, 1453, 1887, 645, 1315, 1383, 2987, 2953,
	1049, 2952, 2258, 814, 1932, 1973, 1223, 1667, 2497, 1930,
	2496, 918, 1875, 2246, 1953, 1818, 851, 1381, 1790, 2495,
	821, 1885, 1948, 1752, 2494, 2244, 818, 1049, 2060, 2462,
	2307, 1466, 2299, 1058, 1893, 1894, 1895, 1724, 2296, 2277,
	1057, 1052, 1336, 1874, 1451, 1037, 2210, 2016, 818, 2047,
	2048, 1416, 1748, 591, 1886, 1186, 2651, 2638, 2691, 2087,
	2086, 1070, 1426, 3394, 1974, 2351, 2801, 2047, 2073, 1453,
	3231, 2246, 594, 1753, 1754, 1473, 1475, 1257, 2027, 1256,
	1942, 2276, 1912, 2244, 1255, 1057, 1254, 1331, 1050, 3544,
	2077, 1943, 1891, 1941, 2061, 1051, 820, 1970, 1971, 1276,
	1946, 1749, 2025, 2109, 213, 2113, 2113, 2126, 769, 2047,
	1951, 1235, 2146, 2148, 894, 1050, 2236, 2152, 820, 1950,
	1424, 2202, 1051, 2265, 1960, 1467, 850, 1466, 1018, 3453,
	2435, 3280, 2264, 2218, 1218, 1070, 213, 1945, 1947, 2257,
	1846, 2844, 3479, 1423, 1615, 213, 2031, 1233, 213, 2076,
	2031, 1070, 801, 1952, 1961, 801, 801, 1962, 1963, 1900,
	2200, 3545, 2293, 3156, 2062, 2059, 1899, 2549, 2072, 2803,
	2802, 1007, 1371, 2429, 2064, 2208, 1940, 1730, 2287, 3564,
	2201, 2085, 1730, 2287, 1332, 1232, 2089, 2090, 2966, 1905,
	1350, 1730, 2287, 3517, 1017, 1380, 3411, 2039, 2197, 1154,
	3527, 1347, 2757, 2037, 1220, 531, 2021, 2183, 699, 821,
	1901, 2193, 2194, 2438, 2022, 647, 646, 2023, 1409, 2043,
	2028, 1467, 821, 1372, 2184, 1015, 821, 1035, 2758, 526,
	213, 979, 3574, 817, 1052, 2541, 2542, 2064, 1171, 2070,
	839, 573, 1357, 2648, 2702, 3547, 1154, 1447, 1448, 1449,
	1450, 1452, 1453, 2256, 2167, 817, 1746, 2129, 1730, 1727,
	2064, 1052, 3230, 1739, 3480, 1070, 3370, 1740, 2450, 2451,
	213, 1357, 1906, 2275, 2697, 676, 1395, 141, 213, 1772,
	2121, 2137, 1857, 2150, 1235, 2757, 1757, 2714, 2650, 213,
	2158, 2159, 1706, 3187, 2241, 2635, 2173, 2174, 1006, 2168,
	1641, 1641, 213, 2169, 1337, 1171, 3154, 1535, 1755, 2437,
	1008, 783, 1755, 1611, 821, 782, 2841, 2989, 213, 1070,
	2013, 2212, 1171, 2679, 213, 213, 3534, 2434, 2339, 3409,
	1546, 3552, 2219, 2977, 2297, 2247, 1807, 639, 579, 1746,
	3478, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 773,
	213, 3061, 213, 2312, 2311, 213, 1741, 3516, 3410, 2058,
	2227, 1761, 2024, 773, 3241, 3439, 2678, 774, 1939, 1743,
	213, 2026, 1739, 2547, 773, 1275, 1740, 213, 1154, 213,
	1765, 213, 2067, 3546, 2294, 2308, 2842, 213, 1538, 1539,
	213, 2245, 213, 1931, 213, 2226, 213, 213, 1929, 213,
	1171, 1171, 1171, 2230, 1171, 2436, 2279, 638, 213, 213,
	1217, 213, 213, 3380, 3281, 2280, 1501, 2512, 2192, 2967,
	2172, 581, 213, 1762, 1745, 3155, 2271, 2288, 2290, 2291,
	2292, 3565, 2379, 2380, 2366, 213, 213, 213, 2259, 2261,
	213, 820, 213, 2250, 2267, 213, 3188, 213, 2408, 213,
	2011, 3195, 2311, 2014, 2311, 2278, 2557, 2304, 3056, 1333,
	1335, 2348, 761, 2375, 1904, 1741, 2298, 2941, 2295, 2405,
	213, 213, 213, 213, 2317, 213, 2319, 1392, 1743, 2464,
	770, 700, 2064, 2030, 812, 1030, 591, 1190, 527, 1422,
	2232, 3575, 598, 2313, 3515, 3477, 3147, 2322, 3064, 213,
	1016, 2010, 2234, 1766, 2421, 594, 2368, 2334, 1746, 3227,
	2390, 2338, 2407, 1898, 2410, 2411, 141, 575, 1746, 2357,
	3550, 2357, 2418, 3526, 3144, 2412, 1586, 2413, 2038, 2361,
	2377, 3524, 1739, 1745, 2235, 580, 1740, 1359, 2440, 1784,
	528, 1858, 2372, 1776, 2373, 2376, 2374, 1346, 2233, 2685,
	2558, 1315, 2433, 1162, 2392, 2382, 637, 762, 636, 1783,
	2381, 2378, 1767, 1768, 2681, 1393, 3145, 2420, 3319, 1185,
	3199, 1763, 2746, 1034, 2346, 577, 2424, 1821, 2425, 529,
	2426, 530, 1583, 1028, 1586, 2465, 640, 2683, 1779, 1023,
	3551, 518, 2490, 2491, 1590, 2422, 2898, 2423, 213, 3003,
	1764, 2427, 1010, 2441, 1010, 3062, 1434, 2500, 1756, 1753,
	1754, 3226, 1717, 574, 2629, 1433, 3286, 3103, 1641, 1501,
	3569, 1627, 3553, 3285, 3268, 1741, 1593, 1746, 2444, 2012,
	1154, 2447, 3159, 3360, 2682, 2955, 1394, 1780, 1743, 3158,
	2747, 2443, 1714, 2662, 2658, 1588, 2347, 1185, 1185, 2329,
	578, 2326, 1590, 1841, 1830, 1829, 1742, 2486, 2654, 1803,
	1591, 576, 1957, 3382, 2840, 3419, 2164, 1936, 1710, 3020,
	2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 3203, 2323,
	1278, 1433, 1589, 3307, 1593, 2578, 1769, 1070, 1185, 3305,
	2463, 3269, 2583, 1745, 599, 600, 2669, 2590, 2591, 2598,
	763, 2592, 1432, 1588, 2668, 2456, 213, 1712, 2923, 3140,
	1949, 3228, 3141, 1892, 213, 1154, 2589, 2281, 1591, 2129,
	2129, 213, 1185, 1713, 213, 213, 1070, 2595, 2594, 696,
	1373, 2166, 2899, 1434, 689, 1070, 2165, 821, 2900, 2207,
	1589, 213, 2206, 1249, 1517, 2205, 2336, 2507, 1522, 818,
	1770, 3143, 3365, 2501, 2616, 2619, 213, 1263, 1592, 3104,
	1250, 1958, 2473, 3146, 2627, 1742, 3568, 2606, 1432, 2541,
	2542, 3276, 3179, 2789, 213, 213, 213, 2617, 2618, 2604,
	213, 2605, 3157, 213, 602, 601, 2471, 1746, 2607, 1154,
	213, 213, 213, 213, 213, 1360, 1261, 1839, 3531, 698,
	2620, 2646, 2716, 3303, 764, 1154, 213, 213, 213, 2625,
	3383, 2601, 3109, 2913, 2652, 213, 1592, 2624, 1737, 3422,
	2129, 2129, 2129, 2584, 2573, 2574, 2575, 213, 1171, 1590,
	213, 2655, 2656, 2556, 603, 604, 2599, 3366, 1070, 2081,
	3533, 2671, 765, 2675, 2676, 2659, 1070, 2670, 2615, 2673,
	3277, 213, 2597, 3495, 213, 213, 2282, 2283, 1407, 1389,
	2630, 1593, 2642, 2643, 213, 3142, 2587, 1171, 213, 2636,
	1171, 1171, 1171, 1387, 2694, 2627, 3377, 213, 2631, 2632,
	2170, 2600, 3266, 213, 2696, 3423, 2571, 3246, 1370, 213,
	2468, 213, 3102, 2731, 2994, 1591, 2633, 1368, 213, 2647,
	2570, 2469, 2824, 3367, 2474, 2663, 2611, 2547, 2653, 2703,
	1366, 2644, 2725, 1744, 3267, 1364, 1362, 1354, 2798, 1154,
	761, 1171, 1171, 1352, 1259, 1742, 2535, 2712, 2475, 213,
	213, 694, 695, 213, 2690, 2684, 687, 688, 1744, 2333,
	1171, 2306, 812, 2273, 2686, 2687, 2405, 2698, 2688, 2225,
	2699, 1928, 2762, 1262, 2700, 2405, 2707, 926, 1621, 2701,
	1618, 2706, 2753, 213, 2735, 1070, 213, 213, 1070, 213,
	1408, 1786, 2713, 1154, 1326, 2279, 814, 2708, 2709, 1786,
	2612, 2710, 2431, 2430, 2415, 1938, 1007, 213, 1007, 2704,
	2557, 1909, 1260, 1592, 1179, 697, 209, 1068, 521, 522,
	1699, 537, 521, 537, 547, 552, 1549, 2080, 568, 1330,
	1406, 1388, 1239, 2776, 2752, 762, 209, 2759, 2761, 3473,
	3174, 2787, 2610, 3166, 3416, 1386, 2768, 141, 2736, 3133,
	1070, 2738, 2739, 2740, 686, 2791, 2809, 2796, 209, 1666,
	1369, 1070, 2614, 213, 1638, 771, 2470, 2808, 3018, 1367,
	2972, 2970, 2770, 2771, 2772, 2472, 2773, 2774, 1185, 2849,
	821, 2954, 1365, 2745, 2797, 2827, 2730, 1363, 1361, 1353,
	2855, 2775, 1641, 2852, 2729, 1351, 1258, 2352, 1818, 2341,
	2340, 2320, 2782, 2783, 2558, 1871, 1870, 2805, 1868, 1866,
	1863, 1861, 1859, 1850, 1800, 1798, 1787, 2806, 2836, 2837,
	1927, 1790, 2812, 2810, 1774, 1771, 1758, 1747, 1641, 3513,
	2749, 3323, 1436, 1006, 988, 1006, 2613, 2454, 2910, 1628,
	3528, 3445, 3222, 3217, 3216, 1008, 2406, 1008, 1733, 1214,
	2246, 2246, 2246, 521, 521, 2832, 213, 3325, 989, 2263,
	3029, 209, 2244, 2262, 2260, 1755, 2851, 2843, 2845, 2846,
	2311, 213, 1902, 2129, 2129, 1907, 2863, 1070, 763, 2864,
	3372, 2858, 2862, 2865, 1926, 2867, 1925, 776, 778, 1404,
	1405, 3346, 3110, 2284, 1443, 1444, 213, 2266, 2932, 1970,
	2868, 2877, 1440, 2902, 2875, 532, 2940, 1707, 2301, 2927,
	2303, 2455, 1010, 2268, 3415, 1970, 2878, 3385, 1437, 1443,
	1444, 1446, 2302, 2552, 2550, 2551, 2543, 2544, 2545, 2546,
	2548, 2549, 3007, 3002, 2938, 2903, 1010, 2360, 2151, 1702,
	1185, 1633, 213, 2914, 990, 141, 2906, 2916, 2917, 1445,
	2979, 543, 3548, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
	2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
	2129, 2129, 2991, 2129, 1445, 2270, 2934, 2634, 3567, 213,
	213, 213, 764, 2541, 2542, 1443, 1444, 2269, 3387, 2911,
	2238, 2237, 1340, 1514, 2084, 2943, 1070, 213, 1339, 2847,
	2947, 1171, 2238, 2640, 2239, 2088, 2984, 2985, 2082, 2055,
	1391, 2983, 3081, 1390, 2942, 213, 2839, 3010, 1512, 2958,
	765, 1510, 3031, 3576, 3357, 2919, 2920, 3260, 213, 213,
	1171, 1171, 1171, 3258, 213, 213, 213, 3190, 3127, 213,
	213, 3053, 3046, 213, 213, 3035, 1171, 3013, 2997, 2996,
	2995, 2950, 213, 1641, 2969, 3022, 3025, 3011, 2769, 2743,
	2741, 1154, 2417, 3006, 2993, 1070, 3021, 3026, 2279, 2416,
	2370, 2345, 2366, 2971, 2321, 2973, 2042, 3054, 1924, 1923,
	1922, 1921, 1853, 1852, 1851, 3016, 1833, 1811, 1810, 1806,
	3012, 1805, 3079, 1804, 1802, 1801, 1403, 1402, 1287, 2663,
	1154, 2405, 1641, 1641, 3027, 2040, 3023, 1286, 1285, 1154,
	213, 3033, 1284, 1283, 3032, 1282, 1281, 1280, 1641, 1641,
	1279, 1277, 1272, 3038, 1517, 3037, 1271, 1270, 3045, 1269,
	3048, 3042, 839, 1268, 3075, 3043, 3044, 3052, 3066, 1231,
	1230, 1229, 3049, 3058, 3051, 839, 3063, 1228, 1227, 1641,
	1226, 1225, 1219, 1213, 3067, 1211, 1210, 1033, 1032, 963,
	873, 1708, 784, 631, 768, 3279, 1397, 73, 1221, 618,
	67, 2133, 213, 2968, 3427, 1666, 1666, 2677, 1908, 1358,
	1638, 1638, 1070, 1910, 1070, 810, 2603, 761, 2175, 3408,
	3088, 3039, 3040, 3041, 3055, 2511, 2587, 3352, 3240, 2079,
	1531, 1021, 69, 213, 213, 213, 861, 946, 3186, 812,
	3101, 3185, 1154, 3122, 3134, 213, 2957, 2395, 3183, 3182,
	1154, 213, 828, 213, 1073, 1718, 213, 213, 213, 1031,
	867, 1731, 1818, 2221, 2112, 3152, 568, 1070, 213, 213,
	1171, 1637, 870, 1070, 1639, 1171, 872, 811, 871, 3118,
	1640, 213, 209, 1533, 209, 209, 3114, 1176, 869, 209,
	3130, 3131, 3123, 3119, 1636, 3117, 213, 209, 1192, 1070,
	3132, 3120, 1171, 3162, 2624, 2335, 3177, 2364, 3161, 3112,
	3113, 1266, 762, 749, 1722, 2036, 2074, 3151, 2506, 1528,
	841, 863, 1216, 2071, 1026, 840, 1007, 2608, 2756, 2937,
	3208, 213, 1641, 1956, 2446, 634, 1238, 2538, 3180, 2056,
	209, 209, 1070, 1176, 3171, 1019, 2134, 2127, 2123, 3218,
	1007, 3172, 1411, 1503, 3192, 209, 3205, 3115, 3193, 2365,
	1060, 3181, 3176, 1274, 844, 3207, 2034, 3204, 1070, 1154,
	1519, 1068, 1154, 2480, 3206, 2763, 3111, 209, 209, 209,
	209, 1176, 2622, 2216, 3116, 3442, 1964, 1820, 3201, 568,
	3212, 209, 209, 987, 986, 985, 3433, 3238, 3430, 2723,
	3153, 3252, 1711, 2231, 1495, 686, 1070, 2732, 857, 1184,
	2588, 3163, 3164, 2790, 213, 1236, 213, 3371, 1070, 213,
	1494, 3229, 3232, 780, 3362, 1047, 1046, 213, 3189, 1045,
	2661, 3173, 1641, 3194, 1154, 3238, 3573, 2965, 180, 177,
	179, 3237, 178, 2981, 3248, 1154, 2715, 1973, 3263, 213,
	90, 35, 16, 1006, 116, 763, 3211, 3253, 3254, 115,
	114, 113, 112, 209, 111, 1008, 3262, 110, 213, 109,
	108, 3256, 213, 107, 3257, 106, 209, 1006, 105, 3261,
	213, 104, 103, 102, 3311, 1171, 3221, 101, 3306, 1008,
	213, 552, 100, 3297, 3282, 99, 98, 97, 96, 3316,
	95, 94, 3318, 93, 92, 91, 564, 561, 49, 1010,
	3315, 213, 213, 3298, 48, 89, 88, 3304, 3295, 15,
	1818, 3332, 3333, 1666, 1010, 33, 13, 53, 1638, 2725,
	54, 213, 12, 3310, 3327, 1883, 3322, 213, 28, 3321,
	29, 79, 2129, 78, 27, 3025, 14, 213, 3326, 26,
	3320, 24, 10, 1010, 8, 7, 30, 809, 1595, 764,
	11, 1154, 146, 145, 3288, 72, 144, 3359, 3368, 71,
	143, 142, 70, 22, 9, 138, 3312, 3008, 66, 3343,
	140, 3358, 139, 63, 137, 2129, 3350, 136, 64, 135,
	3355, 3289, 3290, 3379, 3328, 134, 65, 765, 133, 3345,
	213, 1171, 3336, 20, 5, 52, 213, 6, 3224, 2799,
	1171, 1171, 83, 84, 31, 61, 1171, 60, 3401, 59,
	213, 19, 213, 51, 18, 170, 169, 3315, 168, 167,
	3386, 162, 161, 3389, 166, 164, 3393, 3412, 1627, 163,
	165, 3399, 3400, 160, 213, 3324, 132, 3404, 172, 171,
	213, 213, 3424, 1070, 3405, 3392, 3397, 174, 158, 154,
	153, 213, 213, 2133, 2133, 157, 3436, 3398, 159, 3440,
	156, 3432, 3435, 155, 3446, 3448, 152, 3450, 173, 131,
	1154, 130, 1973, 3429, 56, 521, 2129, 129, 128, 3458,
	127, 3457, 126, 125, 55, 213, 17, 2, 2477, 2478,
	3437, 1, 3452, 0, 3454, 0, 209, 0, 209, 3484,
	0, 209, 1641, 0, 0, 0, 3469, 3470, 3471, 3444,
	0, 1192, 3472, 1176, 209, 0, 0, 0, 0, 0,
	3500, 209, 1192, 537, 213, 0, 209, 1192, 3502, 3486,
	3504, 3509, 568, 0, 0, 0, 0, 3514, 3510, 1154,
	0, 3503, 3501, 3505, 213, 0, 3506, 0, 0, 0,
	0, 0, 0, 1185, 2133, 2133, 2133, 1641, 3520, 3521,
	0, 0, 3523, 1585, 3522, 3406, 3525, 3407, 213, 0,
	213, 0, 3529, 0, 3530, 3532, 3538, 3432, 3540, 0,
	3435, 2366, 3537, 3536, 3543, 3542, 0, 0, 0, 2564,
	2565, 2566, 0, 0, 0, 3425, 0, 0, 0, 0,
	0, 3447, 0, 0, 0, 3555, 3554, 0, 0, 0,
	0, 0, 0, 3562, 0, 0, 3561, 0, 3563, 0,
	3566, 0, 0, 0, 3507, 3508, 0, 3444, 3511, 0,
	3570, 0, 0, 0, 0, 0, 0, 3571, 3572, 0,
	0, 3577, 0, 3578, 1641, 0, 0, 0, 0, 0,
	0, 3581, 3582, 3583, 3585, 3586, 1154, 0, 1154, 0,
	0, 0, 0, 3590, 0, 0, 0, 0, 3588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1007, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1154, 0, 0, 0, 827, 0, 1154, 0, 0,
	0, 0, 0, 3535, 0, 0, 0, 1007, 0, 0,
	209, 209, 0, 0, 0, 0, 0, 209, 1010, 1010,
	0, 1443, 1444, 1154, 0, 0, 0, 1838, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 209, 0,
	209, 1474, 0, 0, 521, 0, 0, 1666, 1446, 0,
	0, 0, 1638, 0, 0, 0, 1854, 2541, 2542, 0,
	2559, 2560, 2561, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 57, 0, 1666, 0, 1465, 0, 0, 1638, 0,
	1006, 0, 1154, 0, 0, 58, 0, 568, 0, 0,
	0, 686, 1008, 0, 0, 1006, 0, 0, 209, 62,
	1176, 209, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 2556, 0, 0, 568, 0, 0, 0, 0, 209,
	1154, 2823, 0, 0, 1006, 0, 0, 0, 209, 209,
	68, 209, 1154, 209, 0, 209, 1008, 209, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 1933, 0, 0, 1934, 0, 1935, 2133, 2133, 0,
	74, 0, 0, 0, 839, 209, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 75, 82, 0, 0, 1010,
	1473, 1475, 0, 0, 552, 2547, 0, 0, 0, 0,
	568, 0, 2820, 2821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2563, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 1466, 0, 0, 0, 2562, 2133, 2133, 2133,
	2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133,
	2133, 2133, 2133, 2133, 2133, 2133, 0, 2133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 2557, 0,
	0, 0, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886,
	2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896,
	2897, 0, 2901, 0, 0, 0, 0, 0, 1666, 0,
	0, 0, 0, 1638, 0, 0, 2213, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 1467, 0, 0, 1010,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	0, 521, 0, 0, 0, 0, 0, 1666, 1666, 0,
	1010, 0, 1638, 1638, 0, 0, 209, 147, 80, 0,
	81, 0, 2558, 1666, 1666, 0, 0, 1154, 1638, 1638,
	0, 839, 0, 521, 0, 0, 0, 0, 0, 181,
	209, 0, 521, 0, 0, 209, 0, 0, 0, 3147,
	0, 681, 1007, 1007, 1666, 117, 0, 827, 0, 1638,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3144, 183, 0,
	3137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1194, 3135, 1198, 0, 1204, 0, 0,
	3139, 118, 0, 0, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 151, 0, 0, 0, 0, 3145,
	0, 0, 182, 0, 0, 0, 0, 537, 0, 0,
	0, 0, 175, 0, 2553, 2554, 2555, 0, 0, 0,
	176, 2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549,
	0, 3138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 2254, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 1006,
	1006, 1324, 0, 0, 0, 0, 209, 0, 1327, 0,
	0, 1008, 1008, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 1666, 0, 0,
	0, 0, 1638, 0, 0, 209, 0, 0, 0, 0,
	0, 209, 2314, 1007, 0, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0,
	0, 0, 1377, 0, 0, 0, 0, 209, 1474, 1192,
	0, 0, 209, 0, 0, 1446, 0, 0, 0, 0,
	1492, 0, 3140, 0, 0, 3141, 0, 1838, 0, 0,
	0, 0, 0, 0, 2254, 0, 521, 0, 2369, 0,
	0, 0, 0, 1445, 209, 0, 0, 209, 0, 209,
	0, 209, 1465, 209, 209, 0, 1176, 0, 0, 1462,
	0, 0, 0, 0, 3143, 2388, 686, 1666, 2254, 2254,
	0, 0, 1638, 0, 0, 0, 3146, 0, 0, 209,
	0, 0, 0, 0, 1496, 1497, 1498, 1499, 1500, 0,
	0, 0, 209, 1176, 209, 0, 0, 1192, 0, 1192,
	0, 0, 1176, 0, 1176, 0, 1176, 0, 0, 0,
	1006, 0, 0, 0, 1516, 0, 1468, 1469, 1470, 1471,
	1529, 0, 1008, 0, 0, 0, 1451, 209, 209, 1176,
	209, 0, 209, 1007, 0, 0, 0, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1493, 1007, 0, 209, 1473, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 3142, 1490,
	0, 0, 0, 0, 0, 0, 1460, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 124, 0, 0, 0, 2133, 0, 57, 0,
	0, 0, 0, 1065, 0, 0, 0, 1491, 0, 0,
	1183, 0, 58, 119, 0, 0, 0, 0, 0, 1579,
	1579, 1579, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 3245, 0, 0, 0, 1192, 0, 0, 0, 2133,
	1006, 39, 121, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 1008, 0, 0, 38, 0, 68, 0, 0,
	1008, 1006, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 1008, 3271, 0, 1267, 41, 0, 0,
	0, 0, 42, 1467, 0, 0, 0, 74, 0, 827,
	122, 0, 0, 0, 0, 0, 40, 85, 1291, 1291,
	1291, 1183, 75, 82, 0, 0, 0, 0, 0, 1484,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 1666, 0, 43,
	0, 0, 1638, 0, 0, 0, 0, 0, 209, 0,
	2133, 0, 0, 521, 0, 0, 76, 0, 0, 0,
	0, 521, 0, 0, 0, 0, 0, 0, 521, 0,
	0, 521, 521, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 3349, 0, 0, 1192, 0,
	0, 0, 1666, 0, 1396, 0, 0, 1638, 0, 0,
	0, 0, 1482, 1192, 0, 1457, 1458, 1464, 1463, 1459,
	1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 2254, 2254, 209, 0, 1443, 1444, 2254, 0, 0,
	2665, 0, 0, 0, 0, 0, 0, 2254, 2665, 2254,
	2665, 2665, 0, 0, 0, 1474, 2541, 2542, 0, 2559,
	2560, 2561, 1446, 209, 209, 209, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 2829, 0, 0, 0, 0,
	44, 0, 0, 0, 209, 0, 0, 1176, 0, 1666,
	1445, 0, 0, 0, 1638, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 147, 80, 0, 81, 2719, 45,
	0, 2721, 2254, 123, 0, 0, 0, 0, 0, 46,
	2556, 209, 0, 0, 0, 209, 181, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 50, 0,
	1176, 0, 117, 0, 0, 0, 2254, 0, 521, 0,
	0, 120, 0, 0, 0, 2254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 1838, 118, 0,
	1838, 0, 0, 0, 2547, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 1473, 1475, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	2804, 0, 0, 1176, 209, 0, 209, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 2562, 0, 0, 150, 0,
	0, 3, 1616, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 1625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2557, 0, 0,
	0, 0, 0, 0, 0, 0, 1955, 0, 1959, 0,
	0, 0, 0, 0, 1966, 0, 0, 0, 0, 0,
	2860, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 0, 2015, 0, 2017,
	2018, 2019, 2020, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 2044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2558, 0, 0, 1516, 0, 0, 0, 2069, 0,
	0, 0, 209, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 0, 0, 0, 0,
	2125, 0, 2136, 2138, 2143, 0, 0, 0, 0, 0,
	0, 0, 0, 1192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 568,
	0, 1813, 0, 2553, 2554, 2555, 0, 0, 1825, 0,
	2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 0,
	0, 0, 0, 0, 0, 0, 678, 1267, 0, 1844,
	0, 1844, 0, 0, 0, 0, 3004, 209, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 680, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 2254, 209, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 2388, 2388, 0, 0, 0,
	0, 686, 686, 2254, 0, 0, 1838, 1838, 0, 1825,
	686, 2254, 1889, 0, 0, 0, 0, 0, 0, 209,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1913, 0, 1915, 0, 1917, 0, 1919, 0, 1920, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 75, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1937, 3089, 0, 0,
	0, 2316, 0, 2318, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 0, 2541, 2542, 0,
	2559, 2560, 2561, 209, 0, 0, 0, 0, 0, 1192,
	0, 209, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 209, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	2254, 2254, 2254, 0, 0, 2541, 2542, 0, 2559, 2560,
	2561, 0, 1192, 0, 0, 0, 0, 0, 2254, 0,
	2665, 2556, 0, 1192, 1192, 209, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 209, 209, 0, 0, 0,
	2428, 0, 0, 0, 0, 77, 0, 0, 2254, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 3198, 0, 0, 0, 0, 0, 2556,
	0, 0, 210, 0, 0, 0, 0, 147, 80, 0,
	81, 0, 0, 1483, 0, 0, 1493, 0, 0, 0,
	1473, 1475, 210, 0, 0, 2547, 0, 0, 1192, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 681, 1490, 0, 210, 117, 0, 0, 0, 1460,
	1461, 0, 0, 0, 2460, 2461, 2198, 0, 0, 0,
	2467, 0, 0, 0, 1481, 0, 0, 0, 183, 0,
	0, 0, 1466, 2547, 0, 0, 2562, 0, 0, 2481,
	2482, 0, 0, 0, 0, 2069, 0, 0, 0, 0,
	1491, 118, 0, 0, 2489, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 151, 1480, 0, 0, 2557, 0,
	0, 2254, 182, 2665, 58, 0, 3265, 0, 0, 0,
	2509, 0, 175, 0, 209, 0, 0, 0, 62, 0,
	176, 0, 0, 0, 0, 2524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 0, 1472, 0,
	0, 679, 0, 0, 0, 0, 2557, 0, 0, 68,
	0, 0, 0, 0, 0, 3265, 1467, 0, 0, 2254,
	0, 893, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 2143, 2143, 2143, 0, 1192, 0, 74,
	0, 0, 1484, 0, 0, 0, 0, 0, 1579, 85,
	0, 0, 2558, 0, 75, 82, 2593, 0, 209, 209,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1183, 0, 2860, 0,
	592, 0, 0, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3265, 0, 0, 0, 76, 0,
	2558, 0, 592, 0, 0, 0, 0, 0, 2332, 0,
	0, 0, 0, 1825, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 827, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 2371, 2483, 209, 1291, 0,
	1291, 0, 1291, 2665, 1183, 1183, 0, 0, 0, 2680,
	0, 0, 0, 0, 2553, 2554, 2555, 1192, 0, 1192,
	0, 2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549,
	2414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3420, 0, 2419, 0, 1183, 0, 1192, 209, 0,
	0, 0, 0, 0, 77, 1009, 0, 0, 209, 2254,
	0, 0, 2553, 2554, 2555, 0, 0, 0, 0, 2552,
	2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 2439, 1183,
	0, 2442, 0, 0, 0, 0, 147, 80, 0, 81,
	0, 0, 2860, 0, 0, 0, 0, 0, 0, 2754,
	0, 0, 0, 0, 0, 0, 0, 2457, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 2254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 3265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 1192, 0, 2254, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 182, 2811, 0, 0, 0, 1966, 0, 0, 0,
	0, 175, 2815, 2816, 0, 0, 2819, 0, 0, 176,
	2822, 0, 0, 0, 0, 0, 0, 0, 0, 2826,
	0, 0, 0, 0, 0, 0, 0, 0, 2833, 0,
	150, 2593, 0, 0, 0, 0, 0, 0, 210, 1075,
	210, 210, 1075, 0, 1075, 210, 0, 0, 0, 0,
	0, 0, 2853, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2869, 2870, 0, 2871, 2872, 2873, 0, 0, 2874,
	0, 0, 0, 2876, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 1075, 210, 210, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0,
	0, 210, 0, 0, 2904, 2905, 0, 0, 0, 1479,
	1474, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 1492, 210, 210, 210, 210, 0, 1075, 1075,
	0, 0, 2922, 1075, 0, 0, 1075, 210, 210, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2657, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 2951, 0, 1075, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	2959, 2962, 0, 0, 2693, 2695, 2332, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 210, 68, 2980, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 208, 208,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 592, 1483, 74, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 2733, 85, 0, 0, 2737, 0, 75, 82,
	0, 0, 0, 0, 0, 2744, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 1579, 0, 0, 208, 208, 0, 0, 0, 0,
	3034, 0, 0, 1481, 0, 0, 0, 0, 0, 208,
	0, 1466, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2786, 0, 1491,
	0, 208, 208, 208, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 208, 208, 0, 0, 0,
	0, 3068, 3069, 0, 0, 0, 0, 3073, 3074, 0,
	0, 0, 3077, 3078, 0, 2807, 0, 1183, 0, 3082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2813, 0, 1472, 3086, 0,
	0, 0, 0, 0, 0, 3090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 80, 0, 81, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	210, 210, 181, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 210, 0, 681, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 1075, 0, 0, 2962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 1482, 1075, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 118, 0, 0, 3097, 0, 0,
	0, 3096, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 214, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 2962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3233, 3234, 3235, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3243,
	3244, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	1075, 210, 0, 3251, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3005, 0,
	1609, 0, 1009, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3017, 0, 0, 208, 1609,
	0, 0, 0, 0, 2962, 592, 210, 210, 0, 0,
	592, 0, 3287, 210, 0, 0, 0, 0, 0, 0,
	3293, 0, 0, 827, 0, 0, 0, 0, 3299, 0,
	0, 0, 210, 0, 210, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3057, 2962, 0, 0, 2962, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0,
	0, 0, 0, 2962, 2962, 0, 0, 1479, 1474, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	1492, 0, 1075, 0, 1075, 0, 0, 0, 0, 0,
	1075, 0, 0, 1075, 210, 0, 0, 210, 0, 0,
	0, 0, 0, 1445, 0, 0, 1075, 1075, 1075, 0,
	0, 0, 1465, 0, 3361, 210, 0, 3364, 0, 1462,
	0, 0, 0, 0, 210, 210, 0, 210, 0, 210,
	0, 210, 0, 210, 0, 2541, 2542, 0, 2559, 2560,
	2561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2828, 0, 0, 0, 0, 592,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2556,
	0, 0, 0, 0, 208, 208, 0, 0, 0, 1075,
	1483, 208, 0, 1493, 0, 0, 3165, 1473, 1475, 0,
	827, 0, 0, 0, 0, 0, 2332, 0, 0, 0,
	208, 0, 208, 0, 208, 0, 0, 1489, 0, 1490,
	0, 0, 0, 0, 1443, 1444, 1460, 1461, 0, 0,
	0, 0, 0, 3468, 3468, 3468, 0, 0, 0, 0,
	0, 1481, 0, 0, 1474, 0, 0, 897, 0, 1466,
	0, 1446, 3487, 2547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 2962, 1075, 2962, 0, 0, 0, 1445,
	0, 0, 208, 0, 0, 208, 0, 0, 1465, 3468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 2562, 0, 0, 0, 0, 0,
	0, 0, 592, 208, 0, 208, 0, 208, 0, 208,
	0, 208, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 2818, 0, 2557, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1075, 208,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 210, 1451, 0, 1075, 3272, 0, 0, 0, 1484,
	0, 0, 3468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3317, 0,
	1071, 0, 0, 1172, 0, 1071, 0, 0, 0, 0,
	2558, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 3342,
	1183, 1075, 1482, 0, 0, 1457, 1458, 1464, 1463, 1459,
	1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 0, 0, 0, 0, 1172, 1172, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 862, 87, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 1075, 1172,
	1172, 1472, 0, 0, 1172, 0, 0, 1172, 0, 0,
	0, 210, 1075, 0, 0, 1075, 0, 210, 3391, 1467,
	1009, 0, 2553, 2554, 2555, 0, 0, 0, 0, 2552,
	2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 0, 0,
	0, 0, 0, 210, 1009, 1443, 1444, 0, 210, 208,
	0, 0, 87, 0, 0, 0, 0, 0, 1172, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 3426,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 3441,
	210, 0, 0, 210, 0, 210, 0, 210, 0, 210,
	210, 0, 0, 1075, 1075, 1075, 0, 1075, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 210, 0, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 210, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 2817, 0, 0, 0, 0,
	997, 0, 0, 210, 210, 0, 210, 0, 210, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 208,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	208, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 1475, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 208, 0, 208, 0, 208, 0, 208, 208, 0,
	0, 0, 0, 1072, 0, 0, 1173, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 208, 1071,
	0, 0, 1472, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 1173, 1173,
	1467, 0, 0, 0, 0, 1172, 0, 0, 0, 0,
	0, 208, 208, 0, 208, 0, 208, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 1173, 1173, 0, 0, 0, 1173, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 1173, 0, 0, 0, 1446, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 210,
	210, 210, 1465, 0, 0, 0, 0, 0, 210, 0,
	0, 1172, 0, 0, 0, 0, 0, 0, 1071, 0,
	210, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 2466, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	1075, 210, 0, 1075, 1075, 1075, 1468, 1469, 1470, 1471,
	210, 0, 0, 0, 0, 0, 1451, 87, 0, 87,
	0, 87, 0, 0, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1009, 0, 0, 0, 0, 1473, 1475, 0,
	0, 0, 0, 0, 1075, 1075, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 1443, 1444, 0, 0,
	0, 1609, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1172, 0, 1172, 1474, 0, 0, 0,
	0, 1172, 0, 1446, 1172, 0, 822, 87, 1075, 1466,
	210, 1075, 210, 0, 0, 87, 0, 1172, 1172, 1172,
	0, 0, 87, 0, 0, 0, 0, 208, 0, 0,
	210, 1445, 0, 0, 0, 585, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 208, 208, 208,
	0, 0, 0, 0, 1479, 1474, 1609, 0, 0, 0,
	0, 0, 1446, 1075, 87, 0, 0, 1492, 208, 0,
	0, 0, 0, 0, 1075, 1472, 2459, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 1467, 1468, 1469, 1470, 1471, 0, 1465,
	0, 0, 0, 0, 1451, 208, 1462, 0, 1173, 208,
	1071, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 1473, 1475, 0, 0, 0,
	0, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	208, 0, 0, 1451, 0, 0, 0, 1515, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 1466, 0, 0,
	1075, 0, 0, 0, 0, 1071, 0, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 208, 0,
	208, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 0, 0, 0, 1489, 0, 1490, 0, 208, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 1173, 0, 1466, 0, 0, 0,
	0, 1072, 0, 1472, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 1071, 0, 0, 0, 1480,
	0, 0, 0, 210, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	210, 0, 87, 0, 1075, 1607, 0, 1610, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 1075, 1075, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 210, 1009, 1009, 0, 0,
	0, 0, 1172, 0, 0, 0, 1484, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 1173, 0, 1173, 0,
	0, 0, 0, 0, 1173, 0, 0, 1173, 0, 1071,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	1173, 1173, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 1172, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 0, 2529, 0, 0, 0, 2530, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 0, 1075, 0, 0,
	0, 208, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1172, 1172, 1172, 1009, 1172, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 210, 210, 1075, 0, 0, 1075, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 1479, 1474, 0, 0,
	0, 0, 0, 0, 1446, 822, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 1072, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1009, 1072, 1075,
	0, 0, 0, 0, 0, 1009, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 1609, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 208,
	0, 0, 802, 0, 0, 802, 802, 0, 0, 208,
	208, 0, 0, 210, 0, 0, 0, 0, 1075, 1483,
	0, 0, 1493, 0, 0, 1173, 1473, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 1489, 0, 1490, 0,
	0, 0, 1072, 0, 0, 1460, 1461, 0, 0, 0,
	2033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 1071, 0, 0, 822, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 1515, 1173, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 1173,
	1071, 1480, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 1075, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 1472, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 668, 1610,
	0, 0, 0, 0, 210, 0, 1075, 1173, 1173, 1173,
	0, 1173, 0, 0, 210, 0, 0, 0, 1484, 0,
	87, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1172, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 1071, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 0, 0, 0, 0, 0, 0,
	0, 1172, 208, 208, 1172, 1172, 1172, 0, 0, 653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485,
	654, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 0, 0, 0, 2065, 1172, 1172, 0, 2066, 655,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 1172, 0, 0, 0, 0, 656,
	0, 0, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 87, 1071,
	0, 0, 1071, 0, 0, 0, 1443, 1444, 672, 1476,
	1477, 1478, 1486, 1487, 1488, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 1492, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	87, 1445, 87, 0, 1071, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 1071, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 660,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 87, 0, 1451, 0, 675, 0, 0, 0,
	0, 0, 0, 661, 0, 0, 662, 0, 0, 0,
	0, 0, 670, 1072, 0, 0, 0, 0, 1483, 663,
	0, 1493, 1072, 0, 0, 1473, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 1489, 0, 1490, 0, 664,
	671, 0, 0, 0, 1460, 1461, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	667, 0, 0, 0, 0, 666, 0, 1466, 0, 0,
	0, 2033, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 669, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 1472, 1173, 0, 0, 1173, 1173, 1173,
	1071, 0, 1479, 1474, 0, 1172, 0, 0, 0, 0,
	1446, 1467, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1172, 1172, 1172, 1484, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 1173, 1173,
	1172, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 1173, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 0,
	1482, 1451, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	0, 0, 0, 0, 0, 1483, 0, 2831, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 1489, 0, 1490, 87, 87, 0, 0, 87,
	0, 1460, 1461, 0, 0, 0, 1071, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 87, 87,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 1071, 0, 0, 1172, 0, 0, 1071, 0, 1172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 1172, 0, 0, 0,
	1472, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 1479, 1474, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 1071, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1072, 0, 0, 0, 1482, 1173, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 2532, 0, 0, 1173, 1173, 1173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1173, 0, 1468, 1469, 1470, 1471, 1172,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 1483,
	0, 0, 1493, 0, 0, 0, 1473, 1475, 0, 0,
	0, 997, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	1481, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 1172, 0, 0, 0, 0,
	0, 1480, 0, 0, 1172, 1172, 1445, 0, 0, 1072,
	1172, 1072, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 1472, 0, 0, 1071, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 1467, 1492, 1072, 0, 0, 1173, 0, 0,
	1072, 0, 1173, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 1445, 0, 1484, 1451,
	0, 0, 997, 0, 0, 1465, 1072, 0, 0, 1173,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 1481, 1072, 0, 0, 0, 1451,
	0, 1482, 1466, 0, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	1491, 0, 0, 1483, 0, 0, 1493, 0, 2531, 0,
	1473, 1475, 0, 1072, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 1481, 0, 0, 0, 1472, 0,
	997, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1173, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 87,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 0, 1173, 0,
	0, 0, 2528, 0, 0, 0, 0, 1173, 1173, 0,
	0, 0, 0, 1173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 2527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	2033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 87, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 2185, 0, 0, 0,
	0, 0, 0, 0, 2186, 218, 219, 220, 221, 222,
	1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082,
	1083, 1084, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1085, 232, 233, 234, 235, 236,
	237, 1086, 1087, 238, 477, 478, 479, 1088, 239, 480,
	1089, 1074, 1090, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1091, 250, 0, 251, 252, 253,
	1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098,
	1099, 256, 257, 258, 259, 260, 261, 481, 482, 1100,
	262, 1101, 264, 263, 1102, 265, 1103, 1104, 266, 267,
	268, 1105, 269, 1106, 270, 271, 1107, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1108, 215, 1109, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1110, 289, 1111, 1112, 949,
	290, 291, 1113, 292, 487, 1114, 488, 293, 1115, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1116, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1117, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1118, 494, 1119, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1120,
	323, 322, 1121, 324, 496, 955, 325, 326, 956, 1122,
	327, 328, 1123, 1124, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1125, 217, 958, 1126, 497, 498, 346, 347,
	1127, 348, 349, 350, 1128, 1129, 352, 353, 354, 1130,
	1131, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1132, 366, 367,
	501, 368, 502, 369, 1133, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1134, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1135, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1136,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1137, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1138, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1139, 436, 437, 435, 1140, 438,
	439, 440, 441, 442, 277, 443, 1141, 444, 507, 508,
	509, 510, 1142, 451, 1143, 445, 446, 511, 447, 512,
	1144, 448, 449, 450, 0, 452, 453, 1145, 1146, 454,
	455, 456, 457, 458, 460, 1147, 461, 1148, 459, 462,
	463, 464, 513, 514, 515, 1149, 466, 465, 516, 1150,
	1151, 1152, 1153, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3121,
	218, 219, 220, 221, 222, 1076, 223, 1077, 1078, 1079,
	0, 1080, 472, 1081, 1082, 1083, 1084, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 1085,
	232, 233, 234, 235, 236, 237, 1086, 1087, 238, 477,
	478, 479, 1088, 239, 480, 1089, 1074, 1090, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 1091,
	250, 0, 251, 252, 253, 1092, 948, 254, 255, 1093,
	1094, 1096, 1095, 1097, 1098, 1099, 256, 257, 258, 259,
	260, 261, 481, 482, 1100, 262, 1101, 264, 263, 1102,
	265, 1103, 1104, 266, 267, 268, 1105, 269, 1106, 270,
	271, 1107, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 1108, 215, 1109, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	1110, 289, 1111, 1112, 949, 290, 291, 1113, 292, 487,
	1114, 488, 293, 1115, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 1116, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 1117, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 1118, 494, 1119, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 1120, 323, 322, 1121, 324, 496,
	955, 325, 326, 956, 1122, 327, 328, 1123, 1124, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 1125, 217, 958,
	1126, 497, 498, 346, 347, 1127, 348, 349, 350, 1128,
	1129, 352, 353, 354, 1130, 1131, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 1132, 366, 367, 501, 368, 502, 369, 1133,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 1134, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 1135, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 1136, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 1137, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 1138, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 1139,
	436, 437, 435, 1140, 438, 439, 440, 441, 442, 277,
	443, 1141, 444, 507, 508, 509, 510, 1142, 451, 1143,
	445, 446, 511, 447, 512, 1144, 448, 449, 450, 0,
	452, 453, 1145, 1146, 454, 455, 456, 457, 458, 460,
	1147, 461, 1148, 459, 462, 463, 464, 513, 514, 515,
	1149, 466, 465, 516, 1150, 1151, 1152, 1153, 467, 468,
	517, 469, 470, 471, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3239,
	0, 218, 219, 220, 221, 222, 1076, 223, 1077, 1078,
	1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	1085, 232, 233, 234, 235, 236, 237, 1086, 1087, 238,
	477, 478, 479, 1088, 239, 480, 1089, 1074, 1090, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1091, 250, 0, 251, 252, 253, 1092, 948, 254, 255,
	1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257, 258,
	259, 260, 261, 481, 482, 1100, 262, 1101, 264, 263,
	1102, 265, 1103, 1104, 266, 267, 268, 1105, 269, 1106,
	270, 271, 1107, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 1108, 215, 1109, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 1110, 289, 1111, 1112, 949, 290, 291, 1113, 292,
	487, 1114, 488, 293, 1115, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 1116, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1117, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 1118, 494, 1119, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 1120, 323, 322, 1121, 324,
	496, 955, 325, 326, 956, 1122, 327, 328, 1123, 1124,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 1125, 217,
	958, 1126, 497, 498, 346, 347, 1127, 348, 349, 350,
	1128, 1129, 352, 353, 354, 1130, 1131, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 1132, 366, 367, 501, 368, 502, 369,
	1133, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 1134, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 1135, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 1136, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 1137, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 1138, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	1139, 436, 437, 435, 1140, 438, 439, 440, 441, 442,
	277, 443, 1141, 444, 507, 508, 509, 510, 1142, 451,
	1143, 445, 446, 511, 447, 512, 1144, 448, 449, 450,
	0, 452, 453, 1145, 1146, 454, 455, 456, 457, 458,
	460, 1147, 461, 1148, 459, 462, 463, 464, 513, 514,
	515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153, 467,
	468, 517, 469, 470, 471, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3170, 0, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2856, 0, 218, 219, 220, 221, 222, 1076, 223,
	1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 1085, 232, 233, 234, 235, 236, 237, 1086,
	1087, 238, 477, 478, 479, 1088, 239, 480, 1089, 1074,
	1090, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1091, 250, 0, 251, 252, 253, 1092, 948,
	254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256,
	257, 258, 259, 260, 261, 481, 482, 1100, 262, 1101,
	264, 263, 1102, 265, 1103, 1104, 266, 267, 268, 1105,
	269, 1106, 270, 271, 1107, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 1108, 215,
	1109, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 1110, 289, 1111, 1112, 949, 290, 291,
	1113, 292, 487, 1114, 488, 293, 1115, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 1116, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1117, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 1118, 494,
	1119, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 1120, 323, 322,
	1121, 324, 496, 955, 325, 326, 956, 1122, 327, 328,
	1123, 1124, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	1125, 217, 958, 1126, 497, 498, 346, 347, 1127, 348,
	349, 350, 1128, 1129, 352, 353, 354, 1130, 1131, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 1132, 366, 367, 501, 368,
	502, 369, 1133, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 1134, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 1135,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 1136, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 1137, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 1138,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 1139, 436, 437, 435, 1140, 438, 439, 440,
	441, 442, 277, 443, 1141, 444, 507, 508, 509, 510,
	1142, 451, 1143, 445, 446, 511, 447, 512, 1144, 448,
	449, 450, 0, 452, 453, 1145, 1146, 454, 455, 456,
	457, 458, 460, 1147, 461, 1148, 459, 462, 463, 464,
	513, 514, 515, 1149, 466, 465, 516, 1150, 1151, 1152,
	1153, 467, 468, 517, 469, 470, 471, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2848, 0, 218, 219, 220, 221, 222, 1076,
	223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083,
	1084, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 1085, 232, 233, 234, 235, 236, 237,
	1086, 1087, 238, 477, 478, 479, 1088, 239, 480, 1089,
	1074, 1090, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1091, 250, 0, 251, 252, 253, 1092,
	948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099,
	256, 257, 258, 259, 260, 261, 481, 482, 1100, 262,
	1101, 264, 263, 1102, 265, 1103, 1104, 266, 267, 268,
	1105, 269, 1106, 270, 271, 1107, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 1108,
	215, 1109, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 1110, 289, 1111, 1112, 949, 290,
	291, 1113, 292, 487, 1114, 488, 293, 1115, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 1116,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1117,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 1118,
	494, 1119, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 1120, 323,
	322, 1121, 324, 496, 955, 325, 326, 956, 1122, 327,
	328, 1123, 1124, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 1125, 217, 958, 1126, 497, 498, 346, 347, 1127,
	348, 349, 350, 1128, 1129, 352, 353, 354, 1130, 1131,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 1132, 366, 367, 501,
	368, 502, 369, 1133, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 1134, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	1135, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 1136, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 1137,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	1138, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 1139, 436, 437, 435, 1140, 438, 439,
	440, 441, 442, 277, 443, 1141, 444, 507, 508, 509,
	510, 1142, 451, 1143, 445, 446, 511, 447, 512, 1144,
	448, 449, 450, 0, 452, 453, 1145, 1146, 454, 455,
	456, 457, 458, 460, 1147, 461, 1148, 459, 462, 463,
	464, 513, 514, 515, 1149, 466, 465, 516, 1150, 1151,
	1152, 1153, 467, 468, 517, 469, 470, 471, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2718, 0, 218, 219, 220, 221, 222,
	1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082,
	1083, 1084, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1085, 232, 233, 234, 235, 236,
	237, 1086, 1087, 238, 477, 478, 479, 1088, 239, 480,
	1089, 1074, 1090, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1091, 250, 0, 251, 252, 253,
	1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098,
	1099, 256, 257, 258, 259, 260, 261, 481, 482, 1100,
	262, 1101, 264, 263, 1102, 265, 1103, 1104, 266, 267,
	268, 1105, 269, 1106, 270, 271, 1107, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1108, 215, 1109, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1110, 289, 1111, 1112, 949,
	290, 291, 1113, 292, 487, 1114, 488, 293, 1115, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1116, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1117, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1118, 494, 1119, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1120,
	323, 322, 1121, 324, 496, 955, 325, 326, 956, 1122,
	327, 328, 1123, 1124, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1125, 217, 958, 1126, 497, 498, 346, 347,
	1127, 348, 349, 350, 1128, 1129, 352, 353, 354, 1130,
	1131, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1132, 366, 367,
	501, 368, 502, 369, 1133, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1134, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1135, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1136,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1137, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1138, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1139, 436, 437, 435, 1140, 438,
	439, 440, 441, 442, 277, 443, 1141, 444, 507, 508,
	509, 510, 1142, 451, 1143, 445, 446, 511, 447, 512,
	1144, 448, 449, 450, 0, 452, 453, 1145, 1146, 454,
	455, 456, 457, 458, 460, 1147, 461, 1148, 459, 462,
	463, 464, 513, 514, 515, 1149, 466, 465, 516, 1150,
	1151, 1152, 1153, 467, 468, 517, 469, 470, 471, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2078, 0, 218, 219, 220, 221,
	222, 1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081,
	1082, 1083, 1084, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 1085, 232, 233, 234, 235,
	236, 237, 1086, 1087, 238, 477, 478, 479, 1088, 239,
	480, 1089, 1074, 1090, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1091, 250, 0, 251, 252,
	253, 1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097,
	1098, 1099, 256, 257, 258, 259, 260, 261, 481, 482,
	1100, 262, 1101, 264, 263, 1102, 265, 1103, 1104, 266,
	267, 268, 1105, 269, 1106, 270, 271, 1107, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 1108, 215, 1109, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 1110, 289, 1111, 1112,
	949, 290, 291, 1113, 292, 487, 1114, 488, 293, 1115,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 1116, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1117, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 1118, 494, 1119, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	1120, 323, 322, 1121, 324, 496, 955, 325, 326, 956,
	1122, 327, 328, 1123, 1124, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 1125, 217, 958, 1126, 497, 498, 346,
	347, 1127, 348, 349, 350, 1128, 1129, 352, 353, 354,
	1130, 1131, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 1132, 366,
	367, 501, 368, 502, 369, 1133, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 1134, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 1135, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	1136, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 1137, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 1138, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 1139, 436, 437, 435, 1140,
	438, 439, 440, 441, 442, 277, 443, 1141, 444, 507,
	508, 509, 510, 1142, 451, 1143, 445, 446, 511, 447,
	512, 1144, 448, 449, 450, 0, 452, 453, 1145, 1146,
	454, 455, 456, 457, 458, 460, 1147, 461, 1148, 459,
	462, 463, 464, 513, 514, 515, 1149, 466, 465, 516,
	1150, 1151, 1152, 1153, 467, 468, 517, 469, 470, 471,
	1177, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1796, 0, 0, 0, 218,
	219, 220, 221, 222, 1076, 223, 1077, 1078, 1079, 0,
	1080, 472, 1081, 1082, 1083, 1084, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 1085, 232,
	233, 234, 235, 236, 237, 1086, 1087, 238, 477, 478,
	479, 1088, 239, 480, 1089, 1074, 1090, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 1091, 250,
	0, 251, 252, 253, 1092, 948, 254, 255, 1093, 1094,
	1096, 1095, 1097, 1098, 1099, 256, 257, 258, 259, 260,
	261, 481, 482, 1100, 262, 1101, 264, 263, 1102, 265,
	1103, 1104, 266, 267, 268, 1105, 269, 1106, 270, 271,
	1107, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 1108, 215, 1109, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 1110,
	289, 1111, 1112, 949, 290, 291, 1113, 292, 487, 1114,
	488, 293, 1115, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 1116, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 1117, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 1118, 494, 1119, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 1120, 323, 322, 1121, 324, 496, 955,
	325, 326, 956, 1122, 327, 328, 1123, 1124, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 1125, 217, 958, 1126,
	497, 498, 346, 347, 1127, 348, 349, 350, 1128, 1129,
	352, 353, 354, 1130, 1131, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 1132, 366, 367, 501, 368, 502, 369, 1133, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	1134, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 1135, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 1136, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 1137, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 1138, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 1139, 436,
	437, 435, 1140, 438, 439, 440, 441, 442, 277, 443,
	1141, 444, 507, 508, 509, 510, 1142, 451, 1143, 445,
	446, 511, 447, 512, 1144, 448, 449, 450, 0, 452,
	453, 1145, 1146, 454, 455, 456, 457, 458, 460, 1147,
	461, 1148, 459, 462, 463, 464, 513, 514, 515, 1149,
	466, 465, 516, 1150, 1151, 1152, 1153, 467, 468, 517,
	469, 470, 471, 1066, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 1076, 223,
	1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 1085, 232, 233, 234, 235, 236, 237, 1086,
	1087, 238, 477, 478, 479, 1088, 239, 480, 1089, 1074,
	1090, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1091, 250, 0, 251, 252, 253, 1092, 948,
	254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256,
	257, 258, 259, 260, 261, 481, 482, 1100, 262, 1101,
	264, 263, 1102, 265, 1103, 1104, 266, 267, 268, 1105,
	269, 1106, 270, 271, 1107, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 1108, 215,
	1109, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 1110, 289, 1111, 1112, 949, 290, 291,
	1113, 292, 487, 1114, 488, 293, 1115, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 1116, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1117, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 1118, 494,
	1119, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 1120, 323, 322,
	1121, 324, 496, 955, 325, 326, 956, 1122, 327, 328,
	1123, 1124, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	1125, 217, 958, 1126, 497, 498, 346, 347, 1127, 348,
	349, 350, 1128, 1129, 352, 353, 354, 1130, 1131, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 1132, 366, 367, 501, 368,
	502, 369, 1133, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 1134, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 1135,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 1136, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 1137, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 1138,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 1139, 436, 437, 435, 1140, 438, 439, 440,
	441, 442, 277, 443, 1141, 444, 507, 508, 509, 510,
	1142, 451, 1143, 445, 446, 511, 447, 512, 1144, 448,
	449, 450, 0, 452, 453, 1145, 1146, 454, 455, 456,
	457, 458, 460, 1147, 461, 1148, 459, 462, 463, 464,
	513, 514, 515, 1149, 466, 465, 516, 1150, 1151, 1152,
	1153, 467, 468, 517, 469, 470, 471, 2054, 0, 890,
	847, 848, 849, 845, 846, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 2051, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 2052, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 2050, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 2053, 0, 0, 0, 0,
	0, 0, 860, 2049, 0, 823, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 181, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 183, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 1316, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 175, 467, 468, 517, 469, 470, 471, 834, 176,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	1520, 1518, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 181, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 183, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 1316, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 175, 467, 468,
	517, 469, 470, 471, 834, 176, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 1520, 2479, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	181, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 183,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 1316, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 175, 467, 468, 517, 469, 470, 471,
	834, 176, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 890, 847, 848, 849, 845,
	846, 859, 1520, 1518, 0, 0, 858, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 2139, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 2144, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 2140,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 2141, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 1379, 858, 890, 847, 848, 849, 845, 846, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 1378, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 826,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 838, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 860, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 3438, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 838, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 3296, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 838,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 860, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 3028, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 1580, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 0, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 2835, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 1968, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 1967,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 860, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 838, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 890, 847, 848, 849, 845,
	846, 859, 860, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 1580, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 0, 858, 890, 847, 848, 849, 845, 846, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 2144, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 860, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 860, 1518, 0, 2149, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 2147, 858, 890, 847, 848, 849, 845,
	846, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 2135, 858, 890, 847, 848, 849, 845, 846, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 2124,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 2122, 858, 2114,
	847, 848, 849, 845, 846, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 2117, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 2118, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 2119, 2116, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 2120,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 2115, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 2111, 858, 2114, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 2117, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 2118, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 2119, 2116, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 2120, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 2115, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 1526, 0, 860, 0, 0, 0,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 1954, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 1206, 858, 890,
	847, 848, 849, 845, 846, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 1205, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 1200, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 1199, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 1195, 858, 890, 847, 848, 849, 845,
	846, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 890, 847, 848, 849, 845, 846, 859, 860, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 860, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 3467, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 3466, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 3465, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 3467, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	3466, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 860, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 0, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	890, 847, 848, 849, 845, 846, 859, 0, 2132, 0,
	0, 0, 0, 2130, 2131, 0, 0, 218, 219, 220,
	221, 222, 860, 223, 0, 0, 858, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 0,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 3467, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 0,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 0, 942, 0, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 0, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 0, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 3466, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 823,
	0, 1011, 0, 0, 830, 831, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 0, 858, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 938, 238, 477, 478, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 488,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 998, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 0, 217, 958, 0, 943,
	498, 346, 347, 0, 348, 349, 350, 0, 1003, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 504, 1005, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 181, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 969, 0, 436, 437,
	435, 183, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	970, 447, 971, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 459, 462, 463, 464, 1316, 514, 515, 0, 466,
	465, 516, 1011, 0, 0, 175, 467, 468, 517, 469,
	470, 471, 0, 176, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 995, 0, 1612, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 938, 238, 477, 478,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	488, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 998, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 217, 958, 0,
	943, 498, 346, 347, 0, 348, 349, 350, 0, 1003,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 1005, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 181, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 969, 0, 436,
	437, 435, 183, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 970, 447, 971, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 459, 462, 463, 464, 1316, 514, 515, 0,
	466, 465, 516, 2586, 0, 1011, 175, 467, 468, 517,
	469, 470, 471, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 995, 939, 1612, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 938,
	238, 477, 478, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 488, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 998, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	217, 958, 0, 943, 498, 346, 347, 0, 348, 349,
	350, 0, 1003, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 1005, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 970, 447, 971, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 994, 0, 1011, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 995, 939, 1000, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 938, 238, 477, 478, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 488, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 998,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 217, 958, 0, 943, 498, 346, 347,
	0, 348, 349, 350, 0, 1003, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 1005,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 970, 447, 971,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1011,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 995,
	0, 1000, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 938, 238, 477, 478, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 488, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	998, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 217, 958, 0, 943, 498, 346,
	347, 0, 348, 349, 350, 0, 1003, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	1005, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 970, 447,
	971, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1011, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	995, 0, 1000, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 938, 238, 477, 478, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 488, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 217, 958, 0, 943, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 1005, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 970,
	447, 971, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 823, 0, 1170, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 1507, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 181, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 183, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 1316, 514, 515,
	0, 466, 465, 516, 1313, 0, 1170, 175, 467, 468,
	517, 469, 470, 471, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 150, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 181, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 183, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	1316, 514, 515, 0, 466, 465, 516, 0, 0, 0,
	175, 467, 468, 517, 469, 470, 471, 0, 176, 0,
	0, 0, 0, 1170, 1169, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 1170, 1169, 0, 0, 0, 0,
	1167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 1791, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 1074, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 0,
	958, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 1170, 1169, 0, 0, 0,
	0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 2781, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 1074, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	0, 958, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1011, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 0, 0, 1320, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	938, 238, 477, 478, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 488, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 217, 958, 0, 943, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 970, 447, 971, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 823, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	181, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 183,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 1316, 514, 515, 0, 466, 465, 516,
	212, 0, 0, 175, 467, 468, 517, 469, 470, 471,
	0, 176, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 150, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 212, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 1617, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 212, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 2734, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 212, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 2367, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 212, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 2859, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 693, 0, 584, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 1881, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 590, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 589, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 0, 583,
	0, 584, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 593, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 590, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 589, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 584, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 593, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 590, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 1911, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 589, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 584, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 593, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 590, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 589, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 212, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 593,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 1345, 0, 1170, 1169, 0,
	0, 0, 0, 1167, 0, 0, 0, 0, 0, 0,
	593, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1074, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 1344, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	1343, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 1342, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 1311, 0,
	1170, 1169, 0, 0, 0, 0, 1167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 1074, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1310, 490, 491, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 0, 958, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 1307, 0, 1170, 1169, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1306, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 1245, 0, 1170, 1169, 0, 0,
	0, 0, 1167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1244, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 1242, 0, 1170,
	1169, 0, 0, 0, 0, 1167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 1074, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1241, 490, 491, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 0, 958, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	1163, 0, 1170, 1169, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1165, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 1170, 1169, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1170, 1169, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 1074, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 1705, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 0,
	958, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1170, 1169, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 1074, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	0, 958, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 1170, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 2255, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 2252, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 2402, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 2258, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 2399, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 2401, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 2398,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 2257, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 2400,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 2255, 239, 480, 0, 0,
	2249, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 2252, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 2258, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 2248, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 2257, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 2256, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1398, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 1401, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 1399,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 1400, 465, 516,
	1158, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1160, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 1003,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1155, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1157, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 1003, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1062, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1064, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 1003, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 546,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 545, 222, 535, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 538, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 539, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 540, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 534, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 535, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 538, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 539, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 540, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 1003, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 2331, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1890, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 1824, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1817, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1816, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1812, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1814, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1300, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1299, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1297, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1296, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1294, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1293, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1290, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1289, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1265, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1180, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1182, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 538, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 539, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 540, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 1918, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 1916, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 1914, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 685, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	684, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 683, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 2402, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 3184,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 525, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 524, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 523, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 2190, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 212, 2389, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 2982, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 212, 2389, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 2386, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 1897, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1888, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 566, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	1040, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 1038, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 567, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 563, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 1041, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 562, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1836, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1835, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 566,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 556, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 567,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 563, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 1319, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 562, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 1304, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 1303,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1253, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1252, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1237, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1174, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 566, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 1040, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 1038, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 567, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 563, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 1041, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 562, 508, 509, 510,
	0, 451, 0, 445, 1039, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 1022, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 566, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 556, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 554, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 555,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 567, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 557, 397, 0, 398,
	402, 403, 563, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 558, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 562, 508, 509, 510,
	0, 451, 0, 445, 560, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 550, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 551, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	548, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 542, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 520, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 2674, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 2672, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 2660, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 2349, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 551, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 1848, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	0, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 1273,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1215, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 977, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 0, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 0,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 0, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 0, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 1479, 1474, 0, 0, 0, 0, 1462, 0, 1446,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1493, 0, 0, 0, 1473, 1475, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1493, 0, 1481,
	0, 1473, 1475, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 1490, 0, 1491, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 0, 0, 1484, 0, 1472,
	0, 0, 0, 0, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 1467, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 1484, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 2526, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 0, 1451, 0, 1482, 0, 0, 1457,
	1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 0, 0, 0, 1483, 0,
	0, 1493, 0, 2066, 0, 1473, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 1479,
	1474, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 1492, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 1479,
	1474, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 1467, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 1445, 0, 1484, 1451, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 1481, 0, 0, 0, 0, 1451, 0,
	1482, 1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491,
	0, 0, 1483, 3421, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 1481, 0, 0, 0, 1472, 0, 0,
	0, 1466, 0, 1479, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 1467, 1492, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 1445,
	0, 1484, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 1484, 1451, 0, 1482, 0, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 0, 0, 1483, 3417, 0, 1493,
	0, 0, 0, 1473, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 1490, 0, 0, 0, 0,
	0, 0, 1460, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 1482, 1466, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 1491, 0, 0, 0, 3348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	1445, 0, 0, 0, 0, 1484, 0, 0, 0, 1465,
	1479, 1474, 0, 0, 0, 0, 1462, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 1482, 0,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 1483, 0, 0,
	1493, 3347, 0, 0, 1473, 1475, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 1481, 0,
	1473, 1475, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 1491, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 0, 0, 0, 0, 0, 1484, 0, 1472, 0,
	0, 1479, 1474, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 1492, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 1484, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 0, 3242, 0, 0, 0, 0, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1483, 0, 0, 1493, 3148, 0,
	0, 1473, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 1490, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 1481, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 1492, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 1467, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 1445, 0, 1484, 1451, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1493, 0, 0, 0, 1473, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 1481,
	0, 0, 0, 0, 1451, 0, 1482, 1466, 0, 1457,
	1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 1491, 0, 0, 1483, 3100,
	0, 1493, 0, 0, 0, 1473, 1475, 0, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481,
	0, 0, 0, 1472, 0, 0, 0, 1466, 0, 1479,
	1474, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 1467, 1492, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 1445, 0, 1484, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 0, 0, 1484, 1451, 0,
	1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	0, 0, 1483, 3099, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	1482, 1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491,
	0, 0, 0, 3098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 1445, 0, 0, 0,
	0, 1484, 0, 0, 0, 1465, 1479, 1474, 0, 0,
	0, 0, 1462, 0, 1446, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1482, 0, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 1483, 0, 0, 1493, 3065, 0, 0,
	1473, 1475, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 0, 1451, 3519, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 1493, 0, 1481, 0, 1473, 1475, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	1491, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 3518, 0, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0,
	0, 0, 1484, 0, 1472, 0, 0, 1479, 1474, 0,
	0, 0, 0, 2454, 0, 1446, 0, 0, 0, 0,
	1492, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1484, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 2455, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 0, 2866, 0,
	0, 0, 0, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	1483, 0, 0, 1493, 0, 0, 0, 1473, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 1490,
	0, 0, 0, 0, 0, 0, 1460, 1461, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 1481, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 1479, 1474, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 1492, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 2157, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 1479, 1474, 0, 0, 0, 2156, 0, 0, 1446,
	0, 0, 0, 1467, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 0, 0, 1445, 0, 1484,
	1451, 0, 2571, 0, 0, 2570, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1493, 0, 0,
	0, 1473, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 1490, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 1481, 0, 0, 0, 0,
	1451, 0, 1482, 1466, 0, 1457, 1458, 1464, 1463, 1459,
	1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 1491, 0, 0, 1483, 0, 0, 1493, 0, 0,
	0, 1473, 1475, 0, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 1490, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 1481, 0, 0, 0, 1472,
	0, 0, 0, 1466, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 1467, 1492, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 1445, 0, 1484, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 1479, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 1492, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 1445,
	0, 0, 0, 1484, 1451, 0, 1482, 0, 1465, 1457,
	1458, 1464, 1463, 1459, 1485, 1462, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 0, 0, 0, 1483, 0,
	0, 1493, 0, 0, 0, 1473, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 1481,
	0, 0, 1451, 0, 0, 0, 1482, 1466, 0, 1457,
	1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 1491, 1483, 0, 0, 1493,
	0, 0, 0, 1473, 1475, 0, 0, 0, 0, 0,
	1480, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 1490, 0, 0, 0, 0,
	0, 0, 1460, 1461, 0, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0, 0,
	0, 0, 0, 1472, 0, 1466, 0, 1479, 1474, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	1492, 1467, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 1445, 0, 0, 0, 1484, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 1479, 1474, 0,
	0, 0, 2572, 0, 0, 1446, 0, 0, 0, 1467,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 0, 0, 1445, 0, 1484, 1451, 0, 0, 0,
	1482, 2577, 1465, 1457, 1458, 1464, 1463, 1459, 1485, 1462,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	1483, 0, 0, 1493, 0, 2854, 0, 1473, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 1490,
	0, 0, 0, 0, 0, 0, 1460, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 1481, 0, 0, 0, 0, 1451, 0, 1482, 1466,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0, 0,
	1483, 0, 0, 1493, 0, 0, 0, 1473, 1475, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 1490,
	0, 0, 0, 0, 0, 0, 1460, 1461, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 1481, 0, 0, 0, 1472, 0, 0, 0, 1466,
	0, 1479, 1474, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 1467, 1492, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 0, 0, 0, 0, 1445, 0, 1484,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 1479,
	1474, 0, 0, 0, 2525, 0, 0, 1446, 0, 0,
	0, 0, 1492, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 1445, 0, 0, 0, 1484,
	1451, 0, 1482, 0, 1465, 1457, 1458, 1464, 1463, 1459,
	1485, 1462, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 0, 0, 0, 1483, 0, 0, 1493, 0, 0,
	0, 1473, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 1490, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 1481, 0, 0, 1451, 0,
	0, 0, 1482, 1466, 0, 1457, 1458, 1464, 1463, 1459,
	1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 1491, 1483, 0, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 2539, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 1481, 0, 0, 0, 0, 0, 1472,
	0, 1466, 0, 1479, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 1492, 1467, 0, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 1445,
	0, 0, 0, 1484, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 1467, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 1445,
	0, 1484, 1451, 0, 0, 0, 1482, 0, 1465, 1457,
	1458, 1464, 1463, 1459, 1485, 1462, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 0, 1483, 0, 0, 1493,
	0, 0, 0, 1473, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 1490, 0, 0, 0, 0,
	0, 0, 1460, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 1481, 0, 0,
	0, 0, 1451, 0, 1482, 1466, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 1491, 0, 0, 1483, 0, 0, 1493,
	0, 0, 0, 1473, 1475, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1663, 0, 1460, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 1472, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	1675, 1657, 1664, 1647, 1685, 1684, 0, 0, 1649, 1648,
	0, 0, 0, 0, 0, 0, 1695, 1696, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1686, 0, 1682,
	1681, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1680, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1679, 1677, 1678, 1484, 0, 0, 1482, 0,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 1659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1668, 1662, 1670, 1672, 1673,
	1674, 1669, 0, 1667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1691, 1692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 1482, 761,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 1651, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 1683,
	0, 735, 0, 1660, 0, 1661, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 608, 0, 736, 1676, 0, 0, 767, 1644,
	1642, 1643, 1646, 1645, 0, 743, 744, 0, 0, 0,
	0, 755, 0, 0, 0, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 1652, 1653, 1655, 1656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 629,
	1671, 1654, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 1694, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 0, 0, 612, 0, 0, 0, 1650, 0, 0,
	1687, 1688, 1689, 1690, 739, 0, 0, 0, 0, 635,
	0, 0, 732, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 740, 741, 0,
	1658, 0, 0, 0, 0, 1665, 1693, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 0, 748,
	747, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 615, 0, 0, 616, 639, 0, 0,
	0, 642, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 638, 0, 0,
	0, 0, 759, 0, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 617, 751, 0, 0, 0,
	0, 0, 752, 0, 0, 620, 0, 0, 0, 730,
	0, 764, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 765,
	641, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	622, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 0, 0, 0, 756, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 624, 0, 0, 637, 0, 636, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 632,
	0, 0, 0, 0, 643, 0, 640, 0, 0, 0,
	0, 630,
}
var sqlPact = [...]int{

	4431, -1000, -1000, -1000, -1000, -1000, -1000, 273, 270, 260,
	250, 249, 246, 245, 242, -1000, -1000, -1000, 241, -1000,
	-1000, 239, -1000, 226, 219, 209, 208, -1000, 197, 193,
	192, -1000, -1000, -1000, -1000, 191, 190, 186, 52451, 1801,
	63814, 55382, 1673, 46970, 63391, 46547, 62968, 62545, 185, -1000,
	62122, 184, 182, 181, -1000, -1000, 178, 1709, 38047, 167,
	165, 163, 1960, 162, 161, -1000, 160, -1000, 73260, 1277,
	-1000, 159, 158, -1000, 8776, 5144, 54542, 2202, 154, 153,
	37623, 2197, 2267, -1000, -1000, 1619, -1000, -1000, 152, 149,
	148, 146, 140, 138, 137, 135, 134, -1000, 132, 129,
	127, 126, 114, 111, 110, 108, 107, 101, 100, 98,
	94, 90, 89, 88, 87, 84, -1000, 73195, 1576, 1452,
	1445, 1441, 1427, 1393, 886, 83, 82, 79, 78, 76,
	75, 74, -1000, -1000, 73, 72, 70, 68, -1000, 67,
	65, 183, 59, 57, 56, 55, 54, 2933, 2295, 1300,
	527, 18277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 67984, 64231, 53, -41, 52,
	-1000, 2582, 940, 31264, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 539, -1000, -1000, -1000, 357, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1596, 716,
	-1000, -1000, -1000, 61699, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1799, -102, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 713, -1000, 1793, 131, 1692, -1000, -1000, -1000, -1000,
	-1000, 64231, -1000, -1000, 2906, 2905, 1695, 711, 61282, -1000,
	1294, -1000, 842, 20965, -1000, 1070, -1000, 20965, 351, -1000,
	-1000, -1000, -1000, -1000, 46124, 14701, 45701, 45278, 41908, 60859,
	14268, 52034, 1137, -1000, -1000, -1000, -1000, -1000, -4, 39310,
	64231, -1000, 336, -1000, -1000, -1000, -1000, -1000, -1000, 27341,
	479, 26883, 404, 26425, 368, -1000, -1000, -1000, -1000, 2904,
	2903, 998, 2901, 2516, 67567, 1506, 2900, 1363, 1078, 920,
	2899, 2898, 2896, 2895, 2889, 2888, 2887, 1281, 60436, 2331,
	41475, 41042, 52451, 52451, 2031, 60013, -1000, -1000, 1178, 1171,
	-1000, -1000, -1000, -1000, 2392, 2264, 2225, 51611, -1000, -1000,
	2881, 2877, 2875, 2874, 2870, 67150, 1471, 2869, 1936, 2868,
	2865, 2864, 2863, 2861, 2860, 2856, 2855, 2846, -1000, 51188,
	50765, 50342, 49919, 59590, 40609, 40176, -1000, -1000, -1000, 32952,
	6097, 59167, 34251, 52451, 52451, -1000, -1000, 27787, 528, -1000,
	-1000, -1000, 2290, -1000, 27787, 528, -1000, 64231, -1000, 2328,
	1555, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1928, 1361, 2740, 39743, 1669, 1226, 2391, 2385, 1284, 2005,
	2384, 2383, 2378, 2365, 2356, 1348, 1995, 373, 17819, 1274,
	1313, 2341, 2327, 2758, 1744, 44855, 2845, 2844, 2563, 2326,
	2286, -1000, -1000, -1000, -1000, 1254, -1000, -1000, 47387, -1000,
	-1000, 1074, -1000, -1000, 1074, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1133, 66316, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2386,
	-1000, 1611, -1000, -1000, 1182, 2295, 1947, 2556, 2556, 2556,
	2601, 529, 525, -1000, 183, -1000, -1000, 72683, -1000, -1000,
	27787, 27787, 27787, 27787, 27787, 1614, -1000, 710, -1000, -1000,
	745, -1000, 709, 673, -1000, -1000, -1000, -1000, -1000, -1000,
	708, 2766, -1000, 962, -1000, -1000, -1000, -1000, 2735, -1000,
	16915, -1000, -1000, -1000, 484, 707, 27787, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 331, 854, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 650,
	1489, 649, 649, 649, -1000, -1000, 905, -1000, -1000, -1000,
	343, 646, 340, 645, -1000, -1000, -1000, -1000, 2325, 706,
	705, -1000, 703, 701, 700, -1000, -1000, -1000, 698, 697,
	694, 692, 691, 689, 688, 687, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 903, -1000, 686, 685, 683, 682, 681,
	680, 678, 677, 676, -1000, -1000, -9, 64231, -1000, 539,
	-9, -1000, -1000, 675, -1000, 21411, 21411, 21411, -1000, -1000,
	1792, 27787, -1000, 1967, -1000, 400, 21, 812, 32106, -1000,
	30418, 812, 763, 35516, -1000, 2276, -1000, -1000, 674, 329,
	-1000, -1000, 2274, 64231, 15132, 64231, 52451, 52451, -1000, 2478,
	27787, -1000, -1000, 38889, 64231, 52868, 2656, 72966, 38889, 64231,
	2319, -1000, -1000, -1000, 64231, -1000, 27787, -1000, 2654, 1267,
	42760, 2618, -32, -1000, -1000, -1000, -1000, -1000, -1000, 1915,
	1946, 1009, 1828, 1280, -1000, 20965, 2509, -1000, -1000, -1000,
	326, 15132, -1000, 1979, 2453, 1164, -1000, 1824, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1447, 2452, -1000, 1796,
	2451, 1440, -1000, -1000, 877, 2450, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1704, -1000, -1000, 2537, -1000,
	-1000, 1700, 2442, 33, -1000, -1000, 33389, 39310, -17, -1000,
	-1000, -58, -1000, 13835, 72683, -1000, -1000, -1000, 72683, 866,
	-1000, -1000, 2441, -1000, 72683, 857, -1000, -1000, 2440, -1000,
	-1000, -1000, 2843, -1000, 2842, 1881, 2841, 2839, 2837, -1000,
	1650, 1453, 2836, -1000, 2835, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49496, 49073, 910, -1000, 1787, -1000, -1000, 48650,
	870, 1877, -1000, -1000, 1876, -1000, 958, -1000, 2834, 58744,
	2085, 870, 1875, -1000, -1000, -1000, -1000, -1000, 52451, -1000,
	52451, -1000, 52451, -1000, 1263, -1000, 66733, 21, -1000, -1000,
	-1000, -1000, -1000, 2439, 2832, 2831, 2830, -1000, 64231, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 173, 2438,
	-1000, -1000, 173, 2437, -1000, 173, 2436, -1000, 164, 2435,
	-1000, -1000, 1696, 2434, -1000, -115, 2432, -1000, -1000, -115,
	2431, -1000, 41, -1000, -1000, -1000, 940, -1000, 32529, 58321,
	42339, 864, 696, 37200, 72683, -1000, 33389, 72683, -1000, 42339,
	48650, -1000, 57898, 48233, -1000, -1000, 1188, 1976, -1000, -1000,
	-1000, -1000, 42339, 42339, 42339, -1000, 57475, -1000, 1634, 1335,
	2545, 52451, -1000, 1560, -1000, -1000, -1000, 2555, 2310, -1000,
	38468, 54119, -1000, 53702, -1000, 53285, -1000, 52451, -1000, 52451,
	-1000, 2829, 2828, 2827, -1000, 2826, 2562, 72683, 2560, -1000,
	2419, 1477, 1472, 64231, -1000, -1000, 64231, -1000, 64231, -1000,
	-1000, -1000, 1914, -1000, -1000, -1000, -1000, 52451, -1000, -1000,
	-1000, -1000, -1000, -1000, 2304, -1000, 1464, -1000, 1176, -1000,
	-1000, 175, -1000, -1000, -32, -1000, 66316, -1000, -1000, 2295,
	1947, -1000, 64231, -1000, -1000, 1969, -1000, 1239, -1000, 2295,
	1820, 2013, 25967, 1987, 27787, 183, -1000, -1000, 183, 183,
	20519, -1000, -1000, 72966, 72966, 15132, 1150, 27787, 27787, 27787,
	27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787,
	27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787,
	27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787, 27787,
	27787, 27787, 1747, 27787, 1129, 27787, 27787, 27787, 27787, 1436,
	-1000, -1000, 1583, 586, 1641, -1000, 2724, 2724, 2724, 4217,
	4217, 613, 2824, 745, -1000, 27787, -1000, 528, 27787, 15565,
	-1000, 2751, 1396, -1000, -1000, 525, 8446, 1817, -1000, 521,
	16023, -1000, -1000, -1000, 16915, 673, 25509, 27787, 887, 72683,
	13404, 2333, 2148, -1000, 2750, -1000, -1000, 2736, -1000, -1000,
	-1000, -1000, 2736, 1146, 1145, 2747, -1000, 2736, 2736, 671,
	787, 785, 781, 770, 622, 27787, 27787, 27787, 27787, 27787,
	27787, 27787, 27787, -1000, 25063, 24605, 24147, 29125, 23689, 27787,
	17361, 23231, 22773, 64231, -9, 2653, 27787, 123, -1000, 71631,
	-1000, 123, 123, 670, 25, 72683, 1971, 1971, 31685, 2144,
	1620, 1620, 1620, -1000, 669, 727, 50, 49, 47, -1000,
	-1000, 46, 13, 812, 10371, 55799, 1621, 812, 812, 322,
	344, 513, 29997, 1967, 55799, -1000, -1000, 52451, 668, 15565,
	15132, 1228, 12, 309, 2015, 2012, 2009, -1000, 1320, 7,
	1128, -49, -1000, 3704, 5, -1000, 1148, -1000, -1000, -1000,
	-1000, 378, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 902, 665, 664, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 650,
	1489, 649, 649, 649, -1000, -1000, -1000, 343, 646, 340,
	645, -1000, -1000, -1000, -1000, -1000, -1000, 2265, -58, 52868,
	828, 2, 1012, -32, -1000, -1000, -1000, 42760, 1074, -1000,
	1662, -1000, -1000, -1000, -1000, -1000, -1000, 1214, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2763, -1000, 2732, -1000, -1000,
	2746, -15, -1000, -1000, 15132, -1000, -34, 1473, -1000, 44432,
	2534, 2533, 2529, 1255, -1000, 1232, 2596, 47387, 2625, 2699,
	635, -1000, 2259, -1000, -1000, 841, 1369, 1121, 47387, 1796,
	-1000, 72966, -1000, 2090, 2592, 1199, 1213, 1199, 1199, 1204,
	-1000, 47387, 1120, 1524, 42339, -1000, 1114, -1000, -42, 2620,
	2634, 468, -1000, 2257, 1112, -1000, -1000, 52451, 15132, 790,
	-1000, 42339, -17, 39310, 64231, 299, -1000, 27787, 528, 27787,
	528, -1000, -1000, 2427, -1000, -1000, -1000, 2822, 1454, 1935,
	-1000, -1000, -1000, 644, 1873, 1796, 1871, -1000, -1000, 47810,
	2255, 64231, 2018, -25, 52451, -1000, -1000, 1518, -1000, 2426,
	2425, 523, 2819, -1000, 1784, 1868, -1000, -1000, -1000, 65899,
	1158, 2423, 883, 672, 2652, 672, 36358, -1000, 64231, -1000,
	64231, -1000, -1000, -1000, 2818, -1000, 52451, -1000, -1000, 52451,
	-1000, 52451, -1000, 52451, -1000, 52451, 52451, -1000, 64231, 42339,
	42339, 42339, 5523, 43598, -3, 511, -1000, 57058, 64231, 960,
	44015, 64231, 2498, -205, -1000, 864, 864, 790, -1000, 790,
	-1000, 52451, 2303, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2817, 2810, -1000, 869, 52451, 64231, 52451, -1000, -1000, 64231,
	-1000, 64231, -1000, -1000, 64231, -1000, 64231, -1000, 64231, -1000,
	-1000, -1000, -1000, -1000, -1000, 528, 27787, 1299, -1000, 2302,
	-1000, 2301, -1000, 43, -1000, -1000, -1000, -1000, 1501, 52451,
	52451, 64231, 52451, -1000, 47387, -1000, -1000, 2295, -1000, 971,
	-1000, -1000, -1000, -1000, -1000, 72683, 460, -1000, -1000, 72683,
	1414, 2023, -1000, 2023, -24, -1000, 71347, 1964, 52451, -1000,
	-1000, -1000, -1000, -1000, 838, 1010, 1010, 1086, 1086, 1086,
	1086, 2633, 4664, 1269, 1365, 423, 423, 423, 423, 423,
	423, 423, 423, 666, 439, 439, 666, 666, 666, 666,
	666, 439, 439, 439, 423, 423, 423, 4217, 6687, 7805,
	27787, 27787, 1111, 1579, 586, 7617, 27787, 243, 243, 243,
	243, -1000, 2120, -1000, -1000, -1000, -1000, 2244, 639, 29125,
	29125, -1000, -1000, -1000, -1000, 16469, 27787, -1000, -1000, -1000,
	-1000, 22315, -1000, -1000, 5290, -243, 510, -152, 10, -1000,
	27787, 27787, 27787, 507, -1000, 496, -1000, -1000, 1106, -1000,
	1101, 1092, 1090, -1000, 637, 298, 27787, 64231, -1000, 68871,
	725, -157, -1000, -14, 1194, -1000, 27787, 296, -1000, 1616,
	636, 630, 495, -19, -1000, 491, 837, 831, 490, 489,
	486, 27787, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 72479, 68825, 9860, 9780, 7874, 9576, 9232, -29,
	485, -1000, 2242, -152, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 480, -1000, 465, -1000, 72401, -152, 464, 3696, -1000,
	29125, 29125, 29125, -1000, 458, -1000, 71551, -1000, 72197, 21869,
	21869, 21869, 456, 72117, 27787, -152, -31, -1000, -36, -1000,
	-1000, 629, -48, 883, 21411, 30841, 15132, -1000, 883, 883,
	27787, -1000, 27787, 1992, -1000, -1000, -1000, 1991, 1909, 1971,
	31685, -1000, -1000, -1000, -1000, 55799, 545, 812, -1000, -1000,
	-1000, -1000, -1000, 55799, -1000, 2735, 2340, -1000, -1000, -1000,
	64231, 539, -1000, 55799, 55799, 15132, 812, -1000, 455, 34672,
	10, 286, -1000, -1000, 15132, 2079, 2079, 2079, -1000, -1000,
	64231, 2703, -1000, 1481, -1000, 72966, -1000, 744, 1071, -1000,
	2745, 628, -1000, 2736, 2736, 64231, 104, 20965, -1000, 1074,
	-1000, -1000, 1311, -1000, 1460, -1000, 1142, -1000, -1000, -1000,
	20965, -1000, 1819, 64231, 64231, 52451, -1000, -1000, 1866, 65482,
	1865, 72966, 64231, -1000, -1000, 625, 624, 1963, 1955, 64231,
	64231, 65065, 64648, 64231, 1538, 27787, 1808, 1710, 528, 528,
	-1000, -1000, 528, 621, 1115, 52451, 52451, 52451, 1435, -1000,
	-1000, -1000, -1000, -1000, 52451, -1000, -1000, 2744, -1000, 1199,
	-1000, -1000, -1000, 1199, 1796, 1405, 52451, 42339, 876, 64231,
	1531, 528, 528, -1000, -1000, 528, 620, 15132, 1448, -1000,
	2094, -1000, -51, -1000, -1000, 12973, 72683, -1000, 72683, -1000,
	64231, -1000, 907, 64231, 44015, 863, 2420, -1000, 1796, 2412,
	539, -1000, -1000, 35937, -58, 864, 42339, 52451, -25, 42339,
	42339, 42339, 2808, 617, 2807, -1000, 52451, 2409, 1782, 1862,
	2462, 791, 64231, 1645, -1000, 27787, 1438, -1000, 35095, 938,
	64231, 1355, 93, -1000, -1000, -1000, 64, 64231, -1000, 2806,
	-1000, -1000, 173, 173, 173, -1000, 164, 1696, -1000, -115,
	-115, -1000, -1000, 5523, 864, -26, 615, -1000, 807, 806,
	33820, 42339, -53, -1000, -1000, -1000, -1000, -1000, 52451, 64231,
	699, 2061, 64231, -59, -1000, 278, 612, -1000, 864, 33389,
	2234, -1000, -1000, 874, -1000, 1162, -1000, -1000, -1000, -1000,
	-1000, -1000, -58, -58, -1000, -1000, -1000, -1000, 72683, -1000,
	1296, 1295, 64231, -1000, 15132, 64231, 52451, 15132, 52451, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1414, -1000, 27787, -1000,
	-1000, -1000, 20519, -1000, -1000, -1000, 52451, 30, 27787, 27787,
	7224, 6883, 27787, 29125, 29125, -1000, 27787, 3660, -1000, -1000,
	-1000, -1000, -1000, 2218, 610, 27787, 72966, 6774, 4685, -1000,
	454, 8945, 666, -1000, 27787, -1000, 453, 20073, -1000, 71835,
	-30, -60, -1000, 2761, 1895, 1618, 1373, 1310, 2741, 12542,
	-152, -61, -1000, -1000, 742, -1000, 2424, -1000, 27787, 71913,
	12111, -1000, 36779, 884, 1645, -1000, -1000, 2736, 830, -1000,
	-1000, -1000, 830, -1000, 71020, 72966, 72966, 27787, 27787, -1000,
	27787, 27787, 27787, -1000, -1000, 27787, -1000, -1000, 2216, 27787,
	-1000, 72966, 72966, 29125, 29125, 29125, 29125, 29125, 29125, 29125,
	29125, 29125, 29125, 29125, 29125, 29125, 29125, 29125, 29125, 29125,
	29125, 29125, 1954, 29125, 2722, 2722, 2722, -1000, 2205, 2216,
	27787, 27787, 72966, 452, 448, 447, -1000, 27787, -152, -1000,
	-1000, 5523, -1000, 2122, -1000, -178, -1000, 1967, -1000, -1000,
	2122, 2122, -62, 72683, 31685, 31685, -1000, 609, 27787, 1972,
	-1000, 722, -1000, -69, -1000, 55799, -1000, 721, -245, -1000,
	797, -1000, -1000, -1000, -1000, 539, -1000, -1000, -1000, 277,
	55799, -1000, -72, -1000, 2649, 445, 15132, -1000, -1000, -1000,
	-1000, -1000, -1000, -58, 1674, 2759, -1000, 2737, 735, 720,
	436, 2736, 425, 424, -58, 64231, -1000, -32, -1000, -1000,
	-1000, 27787, -1000, -1000, 2532, 1083, 1081, -1000, 2407, -1000,
	1857, -1000, 944, -1000, 1319, -1000, 27787, 27787, 608, 607,
	1542, 2802, 2397, 1696, 2396, 1696, -1000, -1000, 850, -1000,
	72683, 604, 603, -1000, -34, 1415, 873, -1000, -1000, 27787,
	27787, 56637, -1000, 2537, 2537, 23, -1000, 1080, -1000, -1000,
	-1000, 1796, 1067, -1000, -1000, 1507, -1000, -1000, 871, -1000,
	-1000, 27787, -1000, -42, 1042, 864, 2210, -1000, -1000, 2798,
	2797, 2796, 422, -81, -50, 72966, 2648, 1811, 64231, 52451,
	52451, 2647, 821, -1000, 2735, -1000, -1000, -1000, -1000, 870,
	-1000, -1000, 2795, -1000, 954, 15132, 52451, 2394, 1922, 791,
	43181, -1000, 870, 2013, 72683, -1000, 1355, 19615, 2531, -82,
	-1000, -1000, -1000, 883, 36358, 31685, 27787, 2793, -84, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56220, 56220, 42339,
	42339, 42339, 864, 64231, 64231, 44015, 2790, 602, 64231, 64231,
	601, -1000, 64231, 64231, 2789, 42339, -1000, -1000, 528, -1000,
	1664, 52451, -1000, -1000, 869, -1000, -1000, 1543, 1821, 1543,
	1707, 70739, -1000, 2551, 15132, 2658, 243, 27787, 27787, 214,
	961, 481, 243, 27787, 27787, 72966, 72763, -89, 27787, 27787,
	-1000, 27787, 719, 72683, 2757, 27787, 420, 419, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 409, -1000, -1000,
	-1000, -1000, -1000, 72683, 27787, 124, -1000, -1000, -1000, 68401,
	-1000, 27787, 407, 406, -1000, -1000, -1000, 402, 401, 276,
	6039, 70535, 70455, 70251, 72683, 2205, 72683, -1000, -1000, 801,
	801, 1184, 1184, 1184, 1184, 2722, 313, 888, 1694, 2228,
	2228, 2228, 987, 509, 509, 2228, 2228, 2228, 2208, 1975,
	600, 5326, -1000, -1000, 72683, 72683, 398, -1000, -1000, -1000,
	-152, 397, 2118, 2591, -1000, 31685, 2118, 2118, -1000, -1000,
	1909, 64231, 72683, 31685, 21, -1000, 2735, -1000, -1000, 2340,
	-1000, 10814, -1000, 15132, -1000, -1000, 34672, -1000, 599, -1000,
	42, -1000, -1000, 718, 2786, 734, -1000, 391, -1000, -1000,
	-58, 72683, 64231, 64231, 64231, 2375, -1000, 4014, -1000, 69970,
	-90, -1000, 71347, 27787, 64231, -1000, 1528, 2004, 992, -1000,
	64231, -1000, 64231, -1000, -1000, 64231, 64231, 52451, 2363, -91,
	72683, -74, -1000, 796, -1000, -1000, 11680, 52451, 52451, 42339,
	2360, -96, 15132, -1000, 42339, -1000, -1000, -1000, 2057, -1000,
	54959, 1626, 528, -1000, 2785, 598, 1796, 528, -1000, 1657,
	-1000, 667, -1000, -1000, 597, 64231, 1780, 595, 15132, 1932,
	791, 43181, -1000, 1158, 1355, -1000, -1000, -75, -1000, 566,
	528, 1645, -1000, -103, 72683, -1000, 792, -1000, -97, -1000,
	-1000, 387, -1000, 2496, 2495, -1000, -1000, 27787, 594, 593,
	64231, 2494, -1000, -1000, -110, -1000, 1899, -1000, -1000, -1000,
	-1000, 15132, 1358, -1000, -1000, -1000, -1000, 2551, 243, 243,
	27787, 27787, 27787, 243, 72763, -112, -1000, 243, 243, -152,
	-1000, -1000, 71835, -1000, -1000, -1000, 72683, 11249, 1556, -1000,
	69924, -1000, -1000, -1000, -1000, 27787, 27787, -1000, -1000, -1000,
	-1000, -1000, 29125, 2203, 592, 72966, -1000, -1000, 879, 27787,
	27787, 1967, 879, 879, -1000, -113, -1000, 812, -1000, -1000,
	-1000, 2735, 42, -1000, 2781, 15132, 729, -1000, 2775, -1000,
	-1000, -1000, -1000, 64231, -1000, 64231, -1000, 15132, 64231, 2215,
	1843, -1000, -1000, 1950, 588, 29125, 52451, 846, 2134, 1516,
	27787, -1000, -118, -119, 1842, -1000, -1000, 1835, 27787, -1000,
	72966, 1696, 1696, -121, -124, -1000, 27787, 1040, 64231, 19169,
	2537, -1000, -1000, -1000, 27787, 1038, -1000, -115, 1531, 2097,
	-1000, -1000, -1000, -1000, 1948, -1000, -1000, 64231, 1942, 867,
	-1000, 44015, 863, -1000, -1000, 836, -1000, 27787, -1000, 52451,
	27787, 1778, -1000, 791, 43181, -1000, 2462, -1000, 2468, 64231,
	2527, -1000, 2013, 586, -1000, 864, 585, 583, -126, 27787,
	27787, -129, 582, 864, -131, -1000, 817, 805, -1000, -1000,
	52451, 52451, -1000, 243, 243, 243, -1000, 379, -1000, -1000,
	1645, 2590, -1000, 69643, 69439, 5374, 29125, 72966, -135, -1000,
	64231, 72683, -152, -1000, -1000, -1000, 55799, 530, -1000, 2772,
	-1000, -1000, 1931, -1000, -1000, -1000, 64231, 1855, -1000, -1000,
	27787, 5326, 581, 27787, -1000, -1000, 2036, 2199, 2057, 577,
	-1000, -1000, -1000, -1000, 1434, -1000, -1000, 72683, 2564, -1000,
	-1000, 563, 553, 72683, 551, 777, 2192, -1000, -1000, 72683,
	549, 863, -1000, 1607, 1626, 548, -1000, -1000, -1000, 2035,
	363, 2632, 836, -1000, 2729, -1000, -142, 954, -145, 52451,
	43181, -1000, 1922, 1125, -147, 64231, 1355, -1000, -1000, 42339,
	42339, 1516, -150, -160, -1000, 42339, -1000, 1899, -1000, 64231,
	-1000, 64231, -1000, -1000, -1000, 1503, 27787, -1000, -1000, 5374,
	-161, -1000, -141, -1000, 2629, -1000, -1000, -1000, -1000, -1000,
	2370, 69359, 1902, 64231, 69155, 2181, -1000, -1000, 1531, 64231,
	52451, 947, 15132, 1543, 1543, 27787, 18723, 1559, 27787, -1000,
	52451, 64231, -1000, 2493, 2057, 528, -1000, -1000, 1516, 544,
	1516, 543, -1000, 1932, 1252, -1000, 883, -1000, -1000, -162,
	-179, 2057, 1516, -1000, -180, -1000, -187, -189, 362, 28679,
	28679, 28679, -152, -1000, 64231, 540, 2352, -1000, 1705, 1457,
	359, 951, -1000, -1000, 2134, -192, 539, -1000, 27787, -1000,
	-194, -1000, 931, -197, -1000, 928, -202, -1000, 2169, -1000,
	-209, 538, -212, -1000, -1000, -1000, 1531, 867, 2057, 27787,
	2057, 27787, -1000, 36358, -1000, 864, 864, 1531, 2057, 864,
	-1000, -1000, -1000, 2456, -1000, 29556, 1677, 1339, 71066, 2456,
	2456, -1000, -1000, 64231, -1000, 1741, 1733, 1262, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1902, 72683, -1000, 1543,
	2092, -1000, 1543, 2156, -1000, 1520, -1000, 64231, -1000, 64231,
	863, -1000, 1531, -214, 1531, -220, -199, -1000, -1000, -1000,
	1531, -1000, -1000, 1470, 2672, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2481, -1000, 970, 1745, 1745, 1705,
	-1000, 537, -1000, 532, -1000, -221, -1000, -1000, 882, 1516,
	882, 1516, -1000, -1000, 1325, -1000, -1000, 1633, 28233, -1000,
	2706, -1000, -1000, 1985, -1000, 2134, 27787, 27787, 1646, -1000,
	2771, 2057, -1000, 2057, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -223, -228, -1000, -1000, -1000, -1000, 1531, 1531, 1531,
	1036, 882, 882, -1000, 531, -1000, -1000, 27787, -234, 1531,
	-1000,
}
var sqlPgo = [...]int{

	0, 3421, 3417, 3416, 3414, 3413, 3412, 3410, 3408, 3407,
	3404, 3401, 3399, 3398, 3396, 3393, 3390, 3388, 3385, 3380,
	3379, 3378, 3377, 3369, 3368, 3366, 3363, 3360, 3359, 3355,
	3354, 3352, 3351, 3349, 3348, 3346, 3345, 3344, 3343, 3341,
	3339, 3337, 3335, 3334, 3333, 3332, 3329, 3328, 36, 3327,
	3325, 3324, 3323, 3318, 3316, 3315, 3309, 3308, 3307, 3304,
	3303, 3302, 3300, 3298, 3297, 3296, 37, 3295, 215, 3294,
	3293, 3292, 3291, 3290, 3289, 3286, 3285, 3283, 3282, 213,
	3280, 157, 3278, 3276, 3275, 3274, 3272, 212, 3271, 3269,
	3266, 3264, 3263, 3261, 3260, 3258, 124, 3255, 3252, 145,
	3250, 3247, 3246, 3245, 3239, 3236, 3235, 3234, 3228, 3227,
	195, 3226, 210, 3225, 3224, 3223, 3221, 3220, 3218, 3217,
	3216, 3215, 3212, 3207, 3203, 3202, 3201, 3198, 3195, 3193,
	3190, 3189, 3187, 3184, 3182, 3181, 3180, 3179, 3174, 209,
	141, 3172, 3171, 206, 205, 3170, 3166, 97, 94, 98,
	3163, 101, 171, 188, 7166, 186, 3162, 3160, 3159, 150,
	3158, 3157, 74, 135, 137, 125, 133, 149, 3156, 3150,
	70, 49, 33, 28, 100, 3149, 3146, 3145, 2427, 102,
	3144, 3143, 203, 190, 3140, 1596, 3137, 131, 89, 91,
	57, 93, 3135, 118, 20, 3133, 127, 50, 3130, 122,
	79, 30, 5621, 3888, 3129, 82, 218, 76, 251, 181,
	162, 169, 163, 132, 1073, 3128, 196, 3127, 67, 148,
	3124, 3123, 3122, 61, 143, 68, 3119, 9, 3, 140,
	17, 86, 14, 3118, 12, 3116, 3115, 3114, 3113, 32,
	128, 3107, 117, 78, 3106, 21, 3105, 155, 165, 3103,
	178, 95, 3102, 3095, 202, 156, 152, 10, 182, 3093,
	3090, 3086, 3084, 3080, 96, 22, 99, 3079, 3073, 106,
	187, 3072, 60, 134, 71, 116, 208, 88, 174, 85,
	183, 136, 184, 3068, 3067, 3066, 154, 3065, 3059, 121,
	160, 3057, 3055, 216, 35, 52, 192, 55, 3054, 126,
	3053, 153, 3050, 3049, 3048, 207, 139, 164, 6, 65,
	92, 27, 8, 185, 120, 90, 83, 3047, 3493, 1388,
	159, 3045, 115, 84, 40, 112, 111, 201, 58, 3044,
	3043, 1353, 3041, 3040, 3039, 3038, 142, 3036, 3035, 3034,
	105, 53, 73, 3033, 119, 63, 13, 180, 204, 75,
	170, 166, 197, 3031, 138, 3027, 34, 107, 3025, 151,
	194, 123, 3014, 1486, 110, 3008, 175, 3003, 3000, 2998,
	2996, 326, 2994, 2992, 1481, 2991, 109, 2984, 2983, 144,
	108, 130, 72, 43, 2981, 69, 29, 2980, 147, 54,
	2975, 161, 31, 0, 6917, 5413, 6514, 2974, 654, 2972,
	173, 104, 2969, 2968, 2967, 80, 2966, 56, 2964, 2961,
	38, 2958, 15, 5, 7, 16, 19, 1584, 1457, 2957,
	2956, 87, 103, 113, 2952, 214, 179, 2950, 2949, 2948,
	64, 2947, 23, 2945, 26, 2940, 2939, 25, 1, 18,
	2938, 2936, 191, 2933, 193, 2929, 2928, 2655, 2927, 199,
	62, 2924, 129, 167, 2923, 2920, 2919, 2918, 198, 2917,
	200, 2916, 11, 24, 4, 2915, 2914, 2913, 158, 2,
	2515, 2912, 2911, 66, 2910, 2909, 146,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 449,
	449, 19, 31, 20, 32, 13, 450, 450, 450, 450,
	24, 21, 33, 22, 22, 22, 150, 150, 150, 150,
	18, 18, 27, 27, 164, 164, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 448, 448, 166,
	166, 165, 161, 161, 451, 451, 167, 167, 167, 169,
	169, 37, 37, 95, 95, 95, 96, 96, 97, 97,
	151, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	83, 83, 391, 391, 392, 392, 146, 146, 147, 147,
	147, 147, 148, 148, 149, 149, 149, 51, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 49, 49, 49, 49, 140, 140, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 456, 456, 457,
	457, 458, 458, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 63, 63,
	241, 241, 217, 217, 64, 64, 64, 65, 65, 66,
	66, 53, 53, 444, 444, 255, 255, 358, 358, 68,
	68, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 77, 77, 77, 78, 78, 78,
	75, 75, 75, 73, 73, 73, 72, 72, 72, 76,
	76, 76, 74, 74, 74, 256, 256, 79, 79, 79,
	79, 79, 79, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 360, 360,
	80, 80, 80, 329, 329, 84, 84, 84, 287, 287,
	85, 85, 85, 85, 85, 86, 86, 86, 86, 98,
	98, 98, 98, 447, 447, 248, 248, 182, 182, 182,
	182, 91, 91, 91, 91, 92, 92, 92, 93, 93,
	145, 145, 104, 104, 104, 104, 104, 103, 103, 103,
	103, 103, 103, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 47, 47, 48, 48, 48, 48, 48, 106,
	106, 452, 452, 108, 105, 105, 105, 107, 107, 107,
	107, 109, 110, 110, 110, 110, 110, 110, 110, 110,
	111, 111, 385, 385, 263, 263, 383, 383, 399, 399,
	384, 384, 221, 221, 221, 221, 221, 222, 222, 222,
	390, 390, 390, 390, 390, 390, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 130, 130, 130,
	139, 139, 139, 139, 139, 139, 139, 132, 132, 132,
	121, 121, 113, 113, 113, 113, 113, 117, 117, 117,
	117, 117, 114, 114, 123, 123, 123, 123, 118, 118,
	120, 120, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 115, 115, 115, 115, 125, 125, 125, 125, 293,
	293, 293, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 135, 135, 135, 135, 135, 135, 343, 343,
	131, 131, 131, 131, 134, 134, 134, 134, 277, 277,
	128, 128, 128, 129, 129, 129, 133, 133, 136, 136,
	136, 136, 116, 116, 116, 461, 461, 461, 137, 137,
	127, 127, 138, 138, 138, 138, 138, 138, 138, 138,
	126, 126, 126, 126, 119, 445, 445, 442, 442, 442,
	442, 442, 442, 442, 443, 443, 446, 446, 89, 89,
	89, 58, 58, 462, 462, 462, 59, 59, 463, 463,
	463, 460, 460, 460, 460, 460, 460, 460, 460, 223,
	223, 224, 224, 310, 310, 310, 310, 310, 227, 227,
	168, 168, 168, 230, 231, 231, 228, 228, 229, 229,
	229, 233, 233, 232, 235, 235, 234, 309, 406, 406,
	408, 408, 408, 408, 408, 408, 408, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 404, 404, 404,
	405, 400, 400, 401, 401, 401, 401, 225, 225, 226,
	226, 226, 226, 402, 403, 246, 246, 346, 407, 407,
	409, 409, 411, 464, 464, 464, 464, 464, 464, 465,
	465, 308, 308, 239, 239, 412, 412, 412, 412, 413,
	413, 413, 413, 413, 416, 415, 414, 414, 414, 414,
	414, 339, 339, 339, 62, 62, 62, 274, 274, 273,
	273, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 142, 142, 60, 60, 60,
	174, 174, 57, 57, 57, 467, 467, 61, 61, 61,
	468, 468, 67, 67, 67, 67, 67, 67, 56, 56,
	56, 56, 56, 469, 469, 294, 294, 292, 292, 245,
	245, 345, 186, 186, 162, 162, 162, 23, 25, 25,
	17, 17, 34, 34, 35, 35, 30, 30, 453, 453,
	454, 454, 90, 90, 94, 94, 94, 102, 102, 141,
	141, 141, 141, 141, 141, 141, 38, 38, 38, 38,
	50, 50, 50, 50, 100, 471, 471, 471, 101, 101,
	470, 470, 181, 181, 181, 181, 183, 183, 305, 305,
	306, 306, 472, 472, 307, 307, 307, 307, 176, 175,
	177, 177, 55, 55, 55, 170, 170, 171, 171, 172,
	172, 173, 173, 473, 473, 87, 87, 87, 144, 144,
	216, 216, 301, 301, 301, 240, 240, 191, 191, 304,
	304, 302, 302, 302, 302, 272, 272, 272, 143, 143,
	253, 253, 265, 265, 266, 266, 355, 355, 267, 99,
	99, 154, 154, 152, 152, 152, 152, 152, 152, 159,
	159, 159, 159, 159, 153, 153, 153, 155, 155, 155,
	155, 155, 155, 155, 158, 158, 158, 158, 160, 160,
	160, 157, 157, 423, 423, 423, 425, 425, 426, 422,
	422, 424, 424, 466, 466, 276, 276, 276, 237, 238,
	236, 236, 243, 243, 242, 244, 244, 344, 344, 344,
	270, 270, 270, 270, 297, 297, 295, 295, 295, 296,
	296, 298, 298, 298, 299, 299, 300, 300, 269, 269,
	325, 325, 156, 156, 156, 250, 250, 250, 251, 251,
	316, 316, 316, 316, 316, 316, 317, 317, 315, 315,
	315, 315, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 348, 348, 252, 252, 349, 303, 303, 440, 440,
	440, 441, 441, 342, 342, 350, 350, 350, 350, 350,
	350, 340, 340, 341, 341, 356, 357, 357, 280, 280,
	280, 280, 278, 278, 281, 281, 281, 281, 279, 279,
	351, 351, 351, 351, 271, 271, 352, 352, 352, 353,
	311, 312, 312, 361, 361, 361, 361, 361, 376, 249,
	249, 249, 249, 249, 474, 474, 362, 362, 362, 362,
	362, 362, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 366, 366, 366, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 375, 375, 375, 375, 375,
	367, 367, 372, 372, 373, 373, 373, 368, 369, 374,
	374, 374, 374, 475, 475, 378, 378, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 364, 364, 364, 371,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 288, 288, 289, 289, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 320, 320, 320, 320, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 417, 417, 417, 417, 417, 417, 417, 417, 420,
	420, 421, 421, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 427, 427, 428, 428, 430, 430, 431, 431,
	432, 433, 433, 433, 434, 435, 435, 429, 429, 436,
	436, 436, 436, 437, 437, 438, 438, 438, 438, 438,
	439, 439, 439, 439, 439, 331, 331, 332, 332, 338,
	338, 338, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 184, 184,
	184, 184, 184, 261, 261, 259, 259, 259, 262, 262,
	260, 260, 258, 258, 257, 257, 328, 328, 326, 326,
	330, 330, 282, 282, 377, 377, 377, 377, 377, 377,
	377, 283, 283, 283, 291, 284, 284, 285, 285, 285,
	285, 285, 322, 323, 286, 286, 286, 324, 324, 333,
	337, 337, 336, 335, 335, 334, 334, 313, 313, 314,
	314, 268, 268, 476, 476, 264, 264, 354, 354, 354,
	354, 219, 219, 254, 254, 218, 218, 211, 211, 212,
	212, 212, 212, 247, 247, 379, 379, 379, 380, 381,
	382, 327, 201, 200, 188, 189, 199, 198, 197, 187,
	190, 194, 195, 196, 192, 193, 207, 206, 205, 203,
	204, 359, 213, 213, 214, 214, 214, 215, 215, 215,
	215, 185, 185, 208, 208, 209, 210, 210, 202, 202,
	202, 178, 178, 178, 179, 179, 180, 180, 389, 389,
	387, 387, 387, 388, 388, 388, 388, 386, 386, 386,
	386, 386, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 395,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 398,
	398,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 3, 1, 3,
	1, 6, 4, 9, 7, 12, 12, 12, 9, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 3, 1, 0, 1, 2, 2,
	1, 6, 5, 1, 2, 1, 3, 2, 0, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 3, 3, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 4, 3, 4, 4, 3,
	4, 4, 5, 3, 5, 5, 5, 3, 3, 3,
	4, 3, 4, 3, 5, 4, 5, 3, 4, 5,
	3, 4, 3, 4, 3, 3, 4, 4, 5, 0,
	1, 1, 3, 2, 4, 3, 3, 5, 4, 3,
	5, 3, 5, 4, 6, 4, 6, 4, 1, 0,
	3, 4, 4, 5, 7, 5, 3, 3, 2, 0,
	4, 2, 3, 4, 2, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 7, 9, 3, 4,
	5, 5, 5, 3, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 1, 1, 8, 7, 5,
	0, 1, 6, 7, 6, 5, 3, 4, 14, 17,
	14, 17, 4, 0, 2, 2, 0, 1, 0, 1,
	3, 2, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	2, 4, 2, 3, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 2, 5, 2,
	3, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 3, 4, 1, 5, 3, 4,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 1, 2,
	4, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 460, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 84, 70,
	125, 106, 111, 158, 289, 318, 328, 312, -107, -108,
	347, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -455, 86, -424,
	-71, -74, -76, -459, 116, 131, 175, 281, -92, -93,
	314, 316, 132, -45, -44, 126, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 351, 397, 42,
	360, 71, 119, 322, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -423, -72, -73, -75, -77, -78, 313, -155, -153,
	457, 410, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 428, 436, -158, -156, -157,
	-160, 335, 418, 374, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, -203, -208, -209, -210, -202, -178,
	-395, -398, 4, -393, -396, 137, 182, 249, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	47, 48, 51, 52, 53, 54, 55, 56, 59, 64,
	69, 70, 71, 72, 73, 74, 79, 76, 77, 78,
	81, 83, 84, 85, 88, 89, 97, 98, 99, 100,
	101, 102, 106, 109, 108, 111, 114, 115, 116, 118,
	120, 121, 123, 125, 126, 129, 127, 380, 128, 130,
	131, 132, 133, 143, 144, 145, 147, 148, 150, 152,
	156, 157, 159, 163, 165, 166, 167, 168, 174, 175,
	177, 178, 183, 179, 184, 188, 191, 190, 192, 193,
	194, 185, 199, 203, 204, 205, 207, 208, 211, 212,
	213, 214, 217, 216, 219, 222, 223, 226, 227, 230,
	231, 233, 234, 237, 235, 238, 236, 239, 242, 240,
	241, 244, 245, 247, 246, 172, 254, 255, 257, 258,
	259, 275, 262, 263, 264, 267, 268, 271, 274, 276,
	277, 278, 279, 280, 281, 282, 284, 285, 287, 289,
	291, 293, 294, 295, 296, 297, 298, 300, 301, 303,
	304, 305, 306, 307, 312, 309, 310, 311, 313, 314,
	315, 316, 318, 320, 321, 322, 323, 325, 327, 348,
	349, 362, 328, 329, 330, 331, 332, 333, 334, 338,
	342, 339, 340, 341, 343, 336, 337, 344, 345, 347,
	350, 351, 353, 355, 356, 359, 360, 361, 363, 366,
	367, 368, 364, 365, 358, 373, 371, 372, 375, 376,
	377, 378, 379, 381, 383, 391, 392, 394, 397, 398,
	399, 389, 401, 402, 405, 406, 407, 408, 409, 414,
	410, 412, 415, 416, 417, 423, 422, 429, 430, 432,
	433, 434, 33, 43, 44, 46, 49, 60, 61, 62,
	65, 103, 104, 124, 134, 135, 146, 160, 162, 169,
	170, 171, 189, 195, 197, 201, 220, 252, 253, 269,
	273, 286, 288, 299, 324, 354, 369, 384, 385, 386,
	387, 393, 395, 418, 419, 420, 424, 431, 260, -196,
	2, -178, -178, 289, 26, 2, 26, 285, 337, 376,
	378, 2, -447, -248, 2, 26, -182, -178, 86, 158,
	335, -196, 2, -447, -248, 24, 2, -178, 2, -183,
	2, 328, -178, 460, 81, 227, 64, 324, 344, -110,
	392, -109, 384, 330, -111, -385, 2, 242, -178, 460,
	460, 460, 460, 2, 374, 278, 422, 336, 411, 99,
	296, 182, -442, 2, 4, -396, -393, -212, -211, 374,
	99, -210, -202, 450, -209, 460, 460, 460, 2, 204,
	205, 295, 294, 344, 345, 460, 460, 460, 2, 25,
	58, 80, 83, 105, 133, 153, 156, 265, -456, 234,
	275, 293, 330, 343, 373, 381, 394, -460, 361, 59,
	411, -467, 399, 114, -292, 99, 378, 376, 227, 157,
	406, 320, 161, 404, 109, 188, 409, 408, 460, 460,
	25, 58, 67, 83, 114, 133, 153, 156, -458, 275,
	293, 327, 330, 343, 373, 381, 399, 394, 2, 422,
	336, 374, 182, 99, 411, 320, 292, -81, 2, 457,
	29, 347, -151, 374, 198, 2, -178, 204, 205, 2,
	460, 460, -442, 2, 204, 205, 2, 198, 2, 59,
	332, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 2, -139,
	344, 361, 167, 41, 64, 26, 69, 279, 100, 159,
	182, 183, 212, 80, 81, -293, 40, 205, 204, -343,
	375, 331, 337, 371, 392, 86, 412, 321, 434, 297,
	127, 4, 99, 242, 346, 384, 227, 73, -466, 2,
	374, -470, 2, 392, 392, 2, -470, 2, -470, 2,
	-181, 2, 392, 388, -471, 392, 431, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	-153, -155, -154, 460, 460, 460, 460, 460, -139, 344,
	2, 64, 26, -159, 151, -242, -243, 403, 196, 122,
	266, -152, -154, 2, -423, -383, 2, -318, -399, -320,
	448, 449, 443, 248, 435, -331, 105, 404, 260, -398,
	-321, -333, 124, 324, -262, 8, 9, 5, 6, 7,
	-185, -363, -327, -371, 396, 136, 251, -215, 461, 10,
	457, -420, -154, -332, 34, 162, 57, -387, -214, -365,
	-373, -369, -370, -474, 47, 53, 52, 381, 241, 338,
	339, 355, 340, 341, 45, 414, 179, 257, 259, 190,
	4, 197, -213, -202, -417, -418, -393, -394, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 46, 419, -374, 101,
	384, 385, 386, 387, 207, 208, -178, -395, 67, 91,
	92, 90, 95, 94, 96, 93, 346, 411, 58, 33,
	169, 170, 201, 252, 171, 65, -419, 365, 87, 155,
	187, 173, 200, 202, 206, 221, 224, 243, 250, 270,
	272, 319, 352, -475, 420, 134, 135, 273, 286, 369,
	393, 395, 160, 220, 60, 61, -425, 300, -426, -196,
	-425, 460, 460, 462, 460, -236, -237, -238, 2, 26,
	112, 457, 2, -347, 2, 455, -351, -154, 215, -350,
	457, -348, -203, 261, -421, 325, -417, -418, -185, -202,
	-214, 4, -239, 457, 459, 99, 374, 68, 2, -287,
	457, -178, 26, 260, 388, 462, -329, 457, 260, 154,
	263, -178, 2, 2, 348, 2, 457, -110, 62, 392,
	39, 344, -306, 2, -307, -175, -176, -177, -356, 203,
	291, 298, 437, 434, -383, -452, 154, 440, 388, -383,
	-263, 459, 2, -351, 169, -203, 2, -200, -386, 4,
	-393, -396, -394, -397, 67, -395, 26, 28, 29, 30,
	32, 34, 35, 36, 37, 50, 57, 58, 63, 66,
	68, 80, 86, 90, 91, 93, 92, 94, 95, 96,
	105, 107, 110, 112, 113, 117, 119, 122, 136, 138,
	151, 153, 154, 158, 161, 164, 176, 186, 196, 198,
	215, 218, 225, 228, 229, 248, 251, 256, 260, 261,
	265, 266, 283, 290, 302, 317, 335, 346, 357, 370,
	374, 382, 388, 390, 396, 403, 404, 411, 413, 421,
	425, 426, 427, 428, -398, 2, -351, 169, 2, -205,
	169, -351, -208, 2, -391, 169, -389, 10, -388, 5,
	4, -393, -396, -394, 2, -187, -178, 2, -199, -386,
	2, -218, 169, -203, -204, -208, 388, 462, -254, -211,
	-212, -247, -178, 459, -318, 2, -99, 2, -318, 169,
	2, -99, 169, 2, -318, 169, 2, -99, 169, 2,
	2, 2, 394, 2, 83, 169, -178, 374, 98, 2,
	311, -457, 327, 398, 422, 2, 2, 2, 2, 2,
	2, 2, 374, 336, -468, 300, -192, 2, -178, 151,
	-391, 169, 2, -391, 169, 2, -206, -208, -206, 182,
	199, -187, 169, 2, 378, 376, 378, 376, 154, 2,
	198, 2, 198, 2, -352, 2, -353, -203, 2, 2,
	2, 2, 2, 169, -178, 374, 98, 2, 214, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -256, 169,
	2, -203, -256, 169, 2, -256, 169, 2, -219, 169,
	2, -218, -187, 169, 2, -392, 169, 2, -391, -392,
	169, 2, -360, 2, -359, -388, 418, -81, 457, 344,
	457, -391, -203, -203, -318, -99, 154, -318, -99, -151,
	151, 2, 99, 374, -139, 2, 151, 413, 2, 8,
	2, -391, 331, 297, 143, 2, 348, 2, 64, -293,
	434, 154, 2, 154, 2, -277, 2, 428, -445, 2,
	260, 154, 2, 154, 2, 154, 2, 154, 2, 154,
	2, 294, 345, 205, 2, -99, 425, -318, 425, 2,
	391, 213, 128, 154, -277, 2, 154, 2, 154, 2,
	5, 2, 203, 291, 362, 2, -203, -461, 2, 374,
	422, 336, 2, 2, 76, 77, 154, 2, 154, 434,
	2, -271, -351, -305, -306, -305, 388, -183, -159, -242,
	-243, -139, 348, 2, 408, 245, 350, 211, -159, -270,
	-295, -296, 225, 138, 256, -276, 26, 112, -276, -276,
	51, 458, 458, 11, 12, 66, 38, 448, 449, 450,
	451, 149, 452, 453, 446, 447, 445, 438, 439, 442,
	209, 210, 82, 441, 440, 75, 232, 326, 139, 140,
	141, 142, 308, 180, 31, 181, 14, 15, 16, 30,
	265, 224, 435, 173, 352, 443, 17, 18, 19, 200,
	202, 250, 43, 176, -184, -220, -318, -318, -318, -318,
	-318, 272, 457, -268, -313, 455, -154, 457, 457, 457,
	5, 457, 5, -382, 8, -154, -318, -331, 458, -260,
	457, -154, -331, -326, 457, 324, 455, 457, -334, -318,
	459, -427, 429, -367, 457, 288, -366, 457, -366, -366,
	423, -364, 457, 436, 430, 457, -364, 457, 457, 151,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 423, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 462, -425, -239, 457, -264, -354, -318,
	450, -264, -264, 260, -257, -318, 87, -280, 206, 243,
	155, 221, 319, 187, -382, -82, -68, -79, -87, -99,
	-112, -143, -144, -315, 461, -342, 436, -154, -348, -202,
	-154, -350, 457, -347, -342, 450, -203, 457, 154, 457,
	459, 154, -247, -386, -187, -203, -213, -214, 111, -257,
	-442, -247, -182, 35, -328, -361, -362, -375, -363, -372,
	-368, -371, 304, 305, 303, 307, 306, 47, 53, 52,
	381, 241, 338, 339, 355, 340, 341, 45, 414, 179,
	257, 259, 190, 4, 46, 419, -374, 197, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 101, 384, 385, 386,
	387, 207, 208, 420, 365, 60, 61, -442, -247, 151,
	-385, -257, 35, -306, 2, 105, -389, 39, -472, 462,
	223, -222, 231, 247, 166, 261, 432, 254, -390, 5,
	4, -327, -339, 105, 227, -371, 9, 449, -379, 8,
	448, -384, -383, 89, 459, -386, -164, 309, -163, 23,
	27, 116, 416, 129, -229, 184, 278, 124, 358, 407,
	-449, -450, 329, 379, 380, 78, 254, 309, 124, -273,
	-275, 35, 97, 245, 274, 54, 177, 236, 237, 360,
	424, 124, 309, 428, 124, -450, 309, -450, -166, 358,
	407, -449, -450, 329, 309, -165, -229, 124, 461, -96,
	-391, 457, -254, 462, 462, -386, 450, 124, 124, 124,
	124, 2, 2, 248, 2, 2, 2, 156, -460, -458,
	2, 2, 2, -203, 169, -205, 169, 2, -208, 422,
	-241, 260, -444, -255, 374, -203, -174, -422, 428, 248,
	248, 35, 457, 2, -189, 169, 2, -179, -178, 182,
	-422, 248, -352, -216, -203, -216, 347, -196, 35, -315,
	124, 2, 2, 2, -178, -167, 462, 56, 315, 124,
	-167, 124, -167, 124, -167, 462, 124, -167, 124, 462,
	124, 124, 458, 462, -360, -391, -149, 428, 154, 86,
	457, 457, -151, -97, -96, -391, -444, -187, 2, -203,
	2, 374, 207, -391, -391, -391, -385, 26, 349, 2,
	294, 345, 77, -203, 374, 99, 182, 70, -446, 151,
	-443, 320, -442, -203, 99, -203, 99, -203, 99, -203,
	-203, 2, 2, 2, 2, 74, 74, 151, 2, 391,
	2, 391, 2, -178, -178, -178, 223, -203, 151, 374,
	182, 99, 374, -167, 462, -183, -159, -270, -385, 211,
	350, -159, -296, -295, 26, -318, -300, 145, 244, -318,
	-320, -153, -153, -153, -244, -344, -318, 290, 182, -376,
	-361, -361, -201, -386, 384, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	224, 173, 352, 43, 176, -318, 388, -318, -318, -318,
	-318, 240, 248, 251, 396, 136, 405, 112, 254, -476,
	370, 37, -324, -154, -261, 457, -338, 32, 357, 26,
	-331, 457, 2, -313, -318, -314, -258, -257, -257, 458,
	421, 26, 112, 450, 2, 8, -288, -290, 433, 239,
	102, 168, 238, -289, 334, 458, 462, 35, 458, -318,
	-258, -330, -326, -257, -337, -336, 425, -386, 450, -428,
	144, 161, 8, -380, 8, -380, 384, 384, 8, -380,
	-380, 457, 458, 2, 458, 2, 458, 2, 458, 2,
	458, 2, -318, -318, -318, -318, -318, -318, -318, -257,
	-282, 2, -377, -257, 4, 433, 239, 102, 168, 238,
	334, -282, 2, -283, 2, -318, -257, -284, -319, -320,
	448, 449, 443, -331, -285, 2, -318, -258, -318, 50,
	218, 390, -286, -318, 154, -257, -257, 2, -257, 2,
	-426, 35, -257, -250, 462, 154, 35, 4, -250, -250,
	457, 458, 462, -281, 165, 235, 230, -281, -347, -280,
	206, -278, 270, -278, -278, -440, 457, 456, 460, 460,
	460, 460, 460, -342, -188, 455, 463, -386, -341, -340,
	35, -196, 267, -342, -342, 459, 458, -341, -203, 457,
	-257, -386, 363, 458, 459, 200, 200, 200, 325, 458,
	388, 428, -81, 262, 458, 462, -249, 34, 455, -290,
	457, -378, 423, 457, 457, 154, -248, -452, 458, 392,
	-307, -221, 298, 356, 310, 342, 372, 9, 8, 8,
	462, -386, 462, -453, 80, 388, 68, -309, 169, 68,
	-400, -190, 80, -401, -178, 63, 404, 290, 153, -453,
	80, -453, 80, 80, 347, 361, 51, -351, 38, 38,
	26, -99, 219, 154, 434, 374, 182, 388, -351, -275,
	-361, 97, 236, 237, 51, -381, -379, 449, -381, 51,
	-381, -381, -381, 428, -205, -351, 388, 280, -391, 388,
	462, 38, 38, 26, -99, 219, 154, 388, -218, -188,
	-357, -356, -392, -211, -178, 459, -318, -99, -318, -99,
	124, 2, -468, 214, 457, -225, 248, -274, -273, 248,
	-207, 2, -203, 154, -247, -358, 198, 462, -255, 280,
	124, 124, 457, 120, 296, 2, 260, 248, -189, 169,
	-170, 377, 124, -312, -311, 426, -301, -99, 457, 105,
	35, -301, -265, -266, -355, -267, -190, 457, -196, -178,
	2, -203, -256, -256, -256, -218, -219, -187, -391, -392,
	-392, -81, -359, 458, 458, -148, 264, -147, -178, 5,
	-151, 413, -224, -310, -309, -404, -405, -400, 224, 182,
	404, 199, 137, -240, -191, -190, 98, -149, -356, 462,
	-149, -149, -357, -357, -203, 151, 2, 2, -277, -203,
	-187, -218, -247, -247, -187, -187, -187, -99, -318, 344,
	151, 151, 459, -277, 296, 99, 374, 278, 182, -203,
	-218, -187, -203, -351, -159, 408, -298, -379, 457, -299,
	324, 325, 462, -162, 36, 110, 211, -203, 434, 121,
	-318, -318, 388, -476, 370, -324, 121, -318, 240, 251,
	396, 136, 405, 112, 254, 154, 457, -319, -319, 458,
	-259, -318, -318, 456, 465, 458, -243, 462, -242, -318,
	-257, -257, 458, 458, 388, 388, 388, 388, 457, 459,
	-257, -247, 456, 456, 462, 458, -335, -336, 117, -318,
	459, -433, 271, 457, 457, 458, 458, 462, 458, 434,
	434, 458, 458, 458, -318, 35, 462, 462, 462, 458,
	462, 462, 462, 458, 458, 154, 458, 458, -291, 283,
	458, 11, 12, 448, 449, 450, 451, 149, 452, 453,
	446, 447, 445, 438, 439, 440, 75, 232, 326, 14,
	15, 16, 200, 176, -319, -319, -319, 458, -322, -323,
	154, 151, 35, -286, -286, -286, 458, 154, -257, 458,
	458, 457, 458, -312, -354, -251, 2, -347, -198, -386,
	-312, -312, -257, -318, 206, 206, -279, 413, 260, -281,
	-347, -340, 458, -441, -382, -342, -341, -382, -317, -316,
	152, 36, 110, 246, 172, -196, -239, -341, -341, -386,
	-342, 458, -252, -349, -421, -243, 459, -386, -140, 5,
	251, -140, -140, -247, 24, 284, -361, 455, 456, 8,
	8, 457, -380, -380, -247, 154, -383, -306, 402, 72,
	298, 384, -383, -163, 309, -190, -190, -203, 248, -309,
	169, -169, 248, -361, -197, -178, 457, 457, 211, 211,
	-190, -197, 169, -190, 169, -197, -197, -448, 298, 255,
	-318, 226, 296, 249, -164, 309, -99, -99, -99, 457,
	-452, 413, 111, -203, -218, -203, -207, 309, -213, -381,
	-381, -273, 309, -205, -391, 428, -187, -165, -99, -99,
	-99, 457, -188, -166, 309, -146, 178, 458, 450, -178,
	422, -178, -223, -226, -224, -190, -462, 430, 428, 124,
	124, -239, -217, -203, 455, -149, -391, -203, -391, -391,
	-391, 2, 457, 2, -203, 124, 260, 248, -171, 118,
	-473, 440, -187, -243, -318, -272, -304, 317, 260, -240,
	418, -196, -272, -253, 462, 154, 440, 459, -240, 2,
	-167, -167, -167, -167, -167, -81, -149, 462, 457, 440,
	440, 457, -391, -391, 458, 462, -203, -189, 182, 182,
	-195, -179, 458, 462, 459, 457, -149, -96, 154, -46,
	428, 374, 344, 344, -178, -199, -187, -203, -200, -218,
	-299, -318, -344, -203, 461, -318, -318, 121, 121, -318,
	-319, -319, -318, 121, 154, 457, -318, -328, 30, 30,
	458, 462, -314, -318, 458, 421, -243, -243, 458, 5,
	239, 168, 238, -289, 238, -289, -289, 8, 450, -386,
	458, -326, 119, -318, 382, -386, 450, -434, -193, 457,
	-178, 426, -242, -380, -364, -364, 458, -376, -361, -318,
	-318, -318, -318, -318, -318, -322, -318, -376, -361, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, 112, 248,
	254, -319, -323, -322, -318, -318, -361, 458, 458, 458,
	-257, -81, -269, 161, -357, 462, -269, -269, 458, -347,
	-347, 457, -318, 206, 456, 458, 462, -341, 456, 462,
	464, 440, -239, 459, -340, 458, 462, -303, 35, 458,
	-386, 263, 5, 8, 455, 456, 458, -380, 458, 458,
	-247, -318, 388, 388, 124, 248, 415, -406, -401, -318,
	-245, -345, -318, 457, 457, -161, 116, 347, -454, 2,
	124, -167, 124, -167, 432, 457, 457, 388, 428, -257,
	-318, -150, 105, -385, -450, -450, 461, 388, 388, 280,
	428, -257, 388, -149, 154, 2, 2, 2, 458, 458,
	462, -407, 35, 258, -178, -203, -205, 35, -64, 428,
	-356, -382, -174, 2, -294, 413, -188, -203, 124, -172,
	217, -473, -389, -422, -297, -295, -272, -264, 249, 79,
	458, -312, -266, -251, -318, 2, 458, -147, -148, -391,
	-391, -391, -149, -151, -151, -310, 2, 457, -189, -179,
	457, -151, -191, 2, -392, -99, 264, -203, -277, -231,
	-230, 278, 254, -231, 261, 458, -162, -188, -318, -318,
	121, 30, 30, -318, -318, -328, 458, -318, -318, -257,
	456, 5, -318, 458, 458, 458, -318, 459, -435, -178,
	-318, 458, 458, 458, 458, 462, 462, 458, 458, 458,
	458, -323, 154, 112, 254, 457, 458, 458, -325, 164,
	51, -347, -325, -325, -279, -247, -347, -315, -382, -316,
	-188, 455, -386, -349, 457, 459, 456, 2, 455, 458,
	-190, -190, -309, 124, -408, 80, -410, 66, 137, 86,
	248, 251, 404, 290, 63, 105, 302, 35, 458, 458,
	462, -162, -245, -247, 248, 367, 105, 248, 105, 98,
	399, -190, -197, -247, -247, -203, 130, 458, 462, 440,
	450, -207, -205, -391, 130, 458, -188, -392, -227, 185,
	-190, -405, -402, -403, 290, -409, -411, 137, 290, -99,
	2, 457, -225, -274, -99, 264, 456, 457, -178, 260,
	457, -188, -173, 216, -473, -389, -170, -272, -302, 457,
	260, -99, -243, 440, 458, 458, 98, 98, -245, 457,
	457, -247, 98, 458, -47, -48, 182, 80, 282, -200,
	374, 182, -162, -318, -318, -318, 458, -243, -386, 450,
	-429, 278, 458, -318, -318, -319, 154, 457, -328, -430,
	427, -318, -257, -430, -430, 458, -342, -382, 2, 455,
	2, -309, -197, -201, -194, -178, 137, 169, 251, 211,
	457, -319, -203, 457, 2, -464, 107, 186, -308, -465,
	85, 368, -345, 458, 458, 251, 251, -318, -361, -167,
	-167, 458, 458, -318, 388, -385, 84, -383, -450, -318,
	388, -228, -229, 176, -407, 211, -194, 211, -463, 428,
	-223, -462, -65, -66, 389, -356, -245, -203, -245, 260,
	-473, -389, -171, 113, -247, 80, -297, -324, -149, 457,
	457, 458, -245, -245, 458, 457, -149, 462, 26, 457,
	26, 457, -203, -218, 458, -243, 51, 458, 458, -319,
	-328, 458, -431, -432, -193, -341, 456, 2, -410, -194,
	248, -318, -180, 457, -318, 186, 108, 174, -227, 457,
	302, -186, 66, 457, 457, 457, 440, 154, 457, -462,
	276, 457, 98, 245, 458, 35, -66, 9, 458, -294,
	458, -203, -389, -172, 408, 249, 458, -197, -272, -392,
	-392, -308, 458, 458, -392, -48, -247, -247, -436, 296,
	325, 163, -257, 458, 462, 35, 124, 458, -412, 233,
	-178, 458, 108, 174, -228, -247, -203, -451, 413, -201,
	-233, -232, -230, -235, -234, -230, -257, -383, 84, 276,
	-257, -203, -246, -346, -190, 98, -227, -99, -308, 457,
	-308, 457, -173, 347, -311, 458, 458, -227, -308, 458,
	458, 458, 458, -437, -438, 43, 401, 89, -318, -437,
	-437, -432, -434, 137, -413, -416, -415, 260, 353, 155,
	277, 458, 367, 424, -464, 458, -239, -318, 458, 462,
	418, 458, 462, 418, 458, 154, 458, 457, 458, 462,
	-228, -463, -227, -245, -227, -245, -265, -149, -149, -228,
	-227, -149, -439, 123, -438, 287, 150, 324, 287, 150,
	-439, -439, -194, -415, 260, -416, 260, 408, 109, -412,
	-232, 176, -234, 154, 276, -247, -346, -462, -228, 458,
	-228, 458, -312, -228, 89, 161, 383, 245, 30, -414,
	245, 315, 56, 347, -414, -413, 457, 457, 458, -469,
	426, -308, -469, -308, 324, 268, -438, 22, 251, 105,
	-464, -257, -257, -168, 56, 315, 2, -227, -227, 458,
	458, -228, -228, -228, 388, -469, -469, 457, -257, 458,
	-228,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 363, 364, 366,
	367, 368, 370, 371, 373, 375, 377, 379, 380, 382,
	384, 386, 387, 388, 389, 390, 392, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 454,
	0, 919, 921, 923, 925, 25, 26, 0, 0, 188,
	190, 192, 0, 217, 219, 221, 222, 224, -2, 0,
	317, 318, 320, 322, -2, -2, 0, 0, 441, 443,
	0, 0, 0, 463, 464, 0, 1009, -2, 457, 459,
	461, 526, 528, 530, 532, 534, 536, 538, 539, 541,
	543, 545, 547, 549, 551, 553, 555, 557, 559, 561,
	563, 565, 567, 569, 571, 573, 575, -2, -2, -2,
	0, -2, -2, -2, 937, 29, 31, 33, 35, 37,
	39, 41, 61, 273, 274, 276, 278, 280, 283, 284,
	286, 1051, 324, 326, 328, 330, 332, 0, -2, 1063,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1027, 1029, 1031,
	1033, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 365, 369, 372, 374, 376, 378, 381, 383,
	385, 391, 393, 395, 814, 1659, 1673, 1674, 1675, 1678,
	1679, 1680, 1681, 1682, 1683, 2019, 2099, 2100, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 0, 419,
	417, 1653, 420, 1853, 422, 424, 311, 312, 313, 314,
	315, 316, 0, 434, 428, 433, 435, 437, 438, 439,
	440, 414, 412, 0, 434, 1705, 432, 917, 918, 912,
	913, 1886, 947, 453, -2, -2, -2, 1988, -2, 485,
	-2, 492, 1991, 1888, 497, 0, 499, -2, 502, 920,
	922, 924, 27, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, -2, -2, -2, -2, 0, 0,
	1742, 1629, 1675, 1632, 1627, 189, 191, 193, 194, 0,
	0, 0, 0, 0, 0, 218, 220, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 722, 0, 0,
	727, 865, 866, 887, 0, 0, 0, 0, 319, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 0, 0, 0, 0, 0, 251, 357, 358, 0,
	1052, 0, 0, 0, 0, 169, 160, 0, 0, 710,
	442, 444, 0, 155, 0, 0, 916, 0, 171, 0,
	0, 458, 460, 462, 527, 529, 531, 533, 535, 537,
	540, 542, 544, 546, 548, 550, 552, 554, 556, 558,
	560, 562, 564, 566, 568, 570, 572, 574, 576, 577,
	0, 0, 0, 0, -2, -2, 0, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 580, 582, 583, 584, 0, 631, 648, 0, 856,
	1053, 949, 927, 940, 949, 929, 930, 931, 932, 933,
	938, 939, 942, 0, 934, 935, 936, 30, 32, 34,
	36, 38, 40, 42, 275, 277, 279, 281, 285, 287,
	-2, 1025, 1026, 325, 327, 329, 331, 333, 445, 0,
	447, 0, 581, 1013, 0, -2, 0, 1057, 1057, 1057,
	0, 0, 1026, 1024, 0, 450, 451, 506, 507, 1287,
	0, 0, 0, 0, 0, 1527, 1371, 0, 508, -2,
	1402, 1404, 1967, 1988, 1526, 1406, 1407, 1408, 1409, 1410,
	0, 0, 1413, 0, 1415, 1416, 1417, 1418, 0, 1420,
	0, 1424, 1425, 1426, 0, 1972, 1606, 1671, -2, 1192,
	1193, 1194, 1195, 1196, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1667, 0, 1493, 1440, -2, 1692, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1751, -2, -2, -2, -2, -2, -2, -2, 1248, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2002, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 0, 1956,
	1973, 1974, 1979, 1981, 1975, 1964, 1463, -2, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 1249, -2, 1968, 1969, 1984, 1985, 1990,
	1995, 1996, 1971, 1980, -2, -2, 1043, 1861, 1046, 814,
	1044, 1028, 1030, 0, 1032, 0, 0, 0, 1037, 1060,
	1058, 0, 1093, 1041, 1042, 1052, 1111, 1134, 0, 1116,
	0, 1134, 1160, 0, 1121, 1881, 1441, 1442, 0, 1675,
	1672, -2, 0, 0, 0, 0, 0, 0, 214, 415,
	0, 421, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 455, 456, 0, 480, 0, 484, 1963, -2,
	1710, 1901, -2, 488, 950, 954, 955, 956, 957, 0,
	0, 0, 0, 0, 494, 0, 0, 481, 482, 500,
	503, 0, 51, 0, 1973, 1160, 53, 0, 1643, 1697,
	1698, 1699, 1700, 1701, 2002, 2018, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 55, 0, 1973, 58, 0,
	1973, 0, -2, 62, 0, 1973, 172, 173, 1688, 1689,
	1693, 1694, 1695, 1696, 65, 0, 1649, 67, 0, 1646,
	76, 0, 1973, 0, 1626, -2, 0, 0, 702, 1623,
	1628, 703, 1633, 0, 195, 196, 197, 198, 199, 1973,
	201, 202, 0, 204, 205, 1973, 207, 208, 0, 210,
	226, 227, 0, 229, 0, 1973, 0, 0, 0, 235,
	-2, 252, 0, 249, 0, 239, 240, 242, 243, 244,
	245, 246, 0, 0, 0, 871, 291, 289, 1654, 0,
	-2, 1973, 859, 862, 1973, 864, 876, 1657, 0, -2,
	0, 1050, 1973, 964, 723, 724, 725, 726, 0, 310,
	0, 977, 0, 979, 0, 999, 1166, 1111, 253, 254,
	255, 256, 257, 1973, 0, 0, 0, 262, 0, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 148, 1973,
	336, 355, 148, 1973, 339, 148, 1973, 342, 148, 1973,
	345, 1621, 148, 1973, 348, 349, 1973, 351, 174, 352,
	1973, 354, 0, -2, 408, 1661, -2, 360, 0, -2,
	0, 186, 0, 0, 708, 709, 0, 914, 915, 0,
	0, 465, 0, 0, 578, 579, 0, 0, 589, 590,
	591, 592, 1889, 1859, 1767, 596, 0, 599, -2, 0,
	0, 0, 603, 0, 607, 608, 609, 0, 707, 611,
	0, 0, 613, 0, 617, 0, 620, 0, 622, 0,
	624, -2, -2, -2, 635, -2, 0, 639, 0, 641,
	0, 0, 0, 0, 656, 657, 0, 662, 0, 665,
	666, 667, 0, 669, 670, 671, 672, 0, 674, 675,
	-2, -2, 679, 681, 0, 688, 0, 693, 0, 585,
	586, 148, 1164, 926, -2, 928, 0, 944, 1016, -2,
	0, 446, 0, 449, 1020, 0, 1022, 0, 1014, 1019,
	1072, 1073, 0, 0, 0, 0, 1055, 1056, 0, 0,
	0, 1011, 1012, 0, 0, 0, 0, 1532, 1533, 1534,
	1535, 1536, 1537, 1540, 1541, 1538, 1539, 1542, 1543, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1545, 1546, 1547, 0,
	0, 1549, 0, 1551, 0, 0, 0, 0, 0, 0,
	1350, 1352, 1614, 0, 0, 1548, 1292, 1293, 1294, 1329,
	1330, 0, 0, 1403, 1611, 1610, 1405, 0, 1563, 0,
	1412, 0, 1284, 1419, 1640, -2, 0, 1527, 1558, 0,
	0, 1427, 1428, 1429, 0, 0, 1563, 0, 0, 1605,
	0, 1495, 0, 1228, 0, 1229, 1230, 0, 1231, 1232,
	1245, 1258, 0, 0, 0, 0, 1262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1250, 0, 0, 0, 1586, -2, 0,
	0, 0, 0, 0, 1045, 0, 0, 1097, 1615, 1619,
	1620, 1097, 1097, 0, 0, 1564, 1157, 1157, 0, 0,
	1153, 1153, 1153, 1151, 1128, 0, 396, 398, 400, 402,
	403, 404, 406, 1134, 0, 1144, 0, 1134, 1134, 0,
	-2, 1116, 0, 0, 1144, 1161, 1162, 0, 0, 0,
	0, 0, 0, 1676, 0, 0, 0, 1663, 0, 0,
	0, 426, 436, 1052, 0, 1566, 1183, 1177, 1186, 1187,
	1188, 1189, 1235, 1236, 1237, 1238, 1239, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, -2, 1246, 1248, 1269, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1241,
	0, 1216, 1216, 1216, 1233, 1234, 1257, 1268, 1260, 1268,
	1264, 1184, 1185, 1251, 1252, 1253, 1254, 0, 430, 0,
	0, 0, 0, -2, 490, 495, 496, 0, 0, 952,
	0, 958, 517, 518, 519, 960, 961, 0, 493, 520,
	521, 522, 523, 524, 525, 0, 831, 0, 833, 1635,
	0, 491, 510, 498, 0, 504, 77, 909, 114, 0,
	909, 909, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 101, 110, 89, 90, 0, 0, 0, 0, 59,
	839, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	854, 0, 0, 0, 0, 100, 0, 95, 79, 0,
	0, 0, 102, 112, 0, 139, 141, 0, 0, 1147,
	156, 0, 701, 0, 0, 1676, 1631, 0, 0, 0,
	0, 228, 230, 0, 232, 233, 234, 0, 870, 0,
	241, 238, 282, 788, 1973, 838, 1973, 836, 1658, 0,
	0, 0, 308, 303, 0, 305, 857, 0, 1049, 0,
	0, 0, 0, 877, 0, 1973, 882, 1645, 1684, 1685,
	966, 0, 1172, 0, 980, 0, 0, 1167, 0, 1169,
	0, 259, 260, 261, 0, 334, 0, 146, 147, 0,
	337, 0, 340, 0, 343, 0, 0, 346, 0, 0,
	0, 0, 1052, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 186, 158, 186, 186, 1147, 467, 1147,
	469, 0, 0, 593, 594, 595, 597, 598, 600, 601,
	-2, -2, 689, 659, 0, 0, 0, 658, 610, 0,
	695, 1877, 705, 612, 1742, 615, 1742, 618, 1742, 621,
	623, 626, 651, 634, 638, 0, 0, 0, 643, 0,
	645, 0, 647, 659, 660, 663, 668, 673, 0, 0,
	0, 0, 0, 855, 0, 943, 1017, 1019, 448, 0,
	1023, 1015, 1070, 1071, 1076, 1077, 1083, 1086, 1087, 1079,
	1287, 1038, 1039, 1040, 1064, 1065, 896, 0, 2099, 1288,
	1178, 1289, 1290, 1642, 0, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, -2, -2, -2, -2, -2,
	-2, -2, -2, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, -2, -2, -2, 1327, 1328, -2,
	1550, 1552, 0, 1614, 0, -2, 0, -2, -2, -2,
	-2, 1347, 0, 1349, 1354, 1356, 1358, 0, 0, 0,
	0, 1613, 1368, 1597, 1598, 0, 0, 1529, 1530, 1531,
	1353, 0, 1372, 1612, 1609, 0, 0, 1562, 1063, 1431,
	0, 0, 0, 0, 1438, 0, 1641, 1283, 1270, 1271,
	1272, 1273, 1274, 1275, 1285, 1423, 1560, 0, 1559, 0,
	0, 0, 1570, 0, 1604, 1600, 0, 1664, 1670, 1503,
	0, 0, 0, 0, 1638, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 1573, -2, -2, -2, -2, -2, -2,
	-2, 0, 1477, 0, 1479, 1564, 1583, 0, 0, 1373,
	0, 0, 0, 1527, 0, 1482, 1564, 1591, 0, 0,
	0, 0, 0, 1564, 0, 1596, 0, 1489, 0, 1491,
	1047, 0, 0, 1172, 0, 0, 0, 1618, 1172, 1172,
	0, 1092, 0, 0, 1154, 1155, 1156, 0, 0, 1157,
	0, 1148, 1152, 1149, 1150, 0, 0, 1134, 397, 399,
	401, 405, 407, 1144, 1108, 0, 0, 1644, 1114, 1143,
	0, 814, 1133, 1144, 1144, 0, -2, 1118, 0, 0,
	1063, -2, 187, 813, 0, 0, 0, 0, 416, 418,
	0, 0, 410, 0, 413, 0, 1173, 1176, 0, 1190,
	0, 0, -2, 0, 0, 0, 0, 0, 483, 0,
	951, 959, 0, 514, 0, 516, 0, 832, 1637, 1636,
	0, 505, 0, 0, 0, 0, 908, 118, 1973, 0,
	150, 0, 0, 782, 1650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 91, 0, 0, 0, 0, 0, 0, 0, 840,
	841, 843, 849, 851, 0, 845, 1639, 0, 846, 0,
	848, 850, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 92, 0, 0, 0, 0, 1625,
	177, 1146, 0, 1624, 1634, 0, 200, 203, 206, 209,
	0, 236, 0, 0, 730, 713, 0, 834, 837, 0,
	814, 869, 1656, 0, 290, 186, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 1973,
	968, 974, 0, 1063, 1171, 0, 997, 982, 0, 0,
	0, 997, 1001, 1002, 1004, 1005, 0, 0, 1168, 0,
	263, 356, 148, 148, 148, 1622, 148, 148, 175, 350,
	353, 359, 409, 1052, 186, 184, 1838, 182, 179, 181,
	0, 0, 0, 731, 733, 734, 735, 736, 0, 1685,
	0, 1796, 1685, 0, 985, 987, 0, 153, 186, 0,
	0, 302, 466, 471, 587, 0, 628, 653, 602, 604,
	605, 606, 706, 704, 614, 616, 619, 637, 640, 642,
	0, 0, 0, 655, 0, 0, 0, 0, 0, 690,
	691, 692, 694, 1165, 1018, 1021, 0, 1081, 0, 1080,
	1084, 1085, 0, 1067, 894, 895, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1369, 0, -2, 1348, 1351,
	1355, 1357, 1359, 0, 0, 0, 0, 0, 0, 1553,
	0, 1555, 1370, 1607, 1610, 1525, 0, 0, 1062, 1063,
	1063, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	1561, 0, 1568, 1569, 0, 1430, 0, 1601, 0, 0,
	0, 1439, 0, 0, 0, 1240, 1214, 0, 1268, 1266,
	1267, 1261, 1268, 1265, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 1462, 1474, 0, 1476, 1478, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1376, 1377, 1378, 1481, 1589, 1590,
	0, 0, 0, 0, 0, 0, 1487, 0, 1595, 1488,
	1490, 1052, 1094, 1089, 1616, 1147, 1096, 1098, 1617, 1647,
	1089, 1089, 0, 1565, 0, 0, 1138, 0, 0, 0,
	1140, 0, 1129, 0, 1131, 1144, 1113, 0, 0, 1106,
	0, 1102, 1103, 1104, 1105, 814, 1142, 1115, 1119, 1664,
	0, 1163, 0, 1123, 1126, 0, 0, 1677, 211, 215,
	216, 212, 213, 425, 0, 0, 1567, 0, 1179, 0,
	0, 0, 0, 0, 429, 0, 479, -2, 512, 513,
	515, 0, 511, 115, 909, 0, 0, 900, 0, 120,
	1973, 129, 0, 759, 0, 1648, 0, 0, 0, 0,
	911, 0, 1973, 148, 1973, 148, 131, 134, 0, 138,
	136, 0, 0, 750, 78, 909, 81, 85, 93, 0,
	0, 0, 99, 0, 0, 0, 902, 0, 844, 847,
	853, 60, 0, 904, 898, 0, 897, 140, 83, 87,
	94, 0, 906, 80, 0, 186, 0, 157, 1630, 0,
	0, 0, 0, 0, 729, 799, 0, 0, 0, 0,
	0, 0, 296, 292, 0, 301, 307, 306, 860, -2,
	863, 872, 0, 874, 886, 0, 0, 0, 970, 974,
	0, 973, 1050, 1075, 1170, 975, 997, 0, 0, 0,
	984, 981, 978, 1172, 0, 0, 0, 0, 0, 258,
	335, 338, 341, 344, 347, 361, 161, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 1685, 1685,
	0, 1652, 0, 0, 0, 0, 154, 159, 0, 468,
	0, 0, 644, 646, 659, 682, 683, 745, 0, 745,
	0, 0, 1066, 896, 0, 1291, 1332, 0, 0, -2,
	0, 0, 1336, 0, 0, 0, -2, 0, 0, 0,
	1554, 1556, 0, 1609, 1432, 0, 0, 0, 1436, 1414,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 0, 1421, 1422,
	1528, 1571, 1599, 1603, 0, 1665, 1669, 1501, 1502, 1506,
	1655, 0, 0, 0, 1259, 1263, 1443, 0, 0, 0,
	0, 0, 0, 0, 1572, 1582, 1584, 1374, 1375, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, -2,
	-2, -2, 1392, 1393, 1394, -2, -2, -2, 0, 0,
	0, 1585, 1587, 1588, 1592, 1593, 0, 1484, 1485, 1486,
	1594, 0, 1091, 0, 1095, 0, 1091, 1091, 1059, 1136,
	0, 0, 1159, 0, 1111, 1130, 0, 1120, 1109, 0,
	1110, 0, 1141, 0, 1117, 1122, 0, 1125, 0, 1432,
	-2, 427, 411, 0, 0, 1181, 1191, 0, 1243, 1247,
	431, 1145, 0, 0, 0, 0, 149, 757, 781, 0,
	0, 889, 896, 0, 0, 122, 0, 0, 0, 130,
	0, 127, 0, 133, 137, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 231, 868, 237, 739, 787,
	0, 789, 0, 714, 0, 788, 838, 0, 288, 0,
	295, 0, 858, 873, 0, 0, 0, 0, 0, 972,
	974, 0, 965, 966, 997, 1074, 976, 995, -2, 994,
	0, 1063, 1003, 1000, 1006, 1007, 0, 183, 0, 178,
	180, 0, 164, 0, 0, 732, 737, 0, 0, 0,
	0, 0, 986, 988, 0, 170, 0, 588, 654, 684,
	744, 0, 0, 686, 1078, 1082, 1068, 896, 1334, 1338,
	0, 0, 0, 1340, -2, 0, 1362, -2, -2, 1557,
	1608, 1411, 1063, 1433, 1435, 1286, 1602, 0, 1508, 1505,
	0, 1492, 1215, 1453, 1454, 0, 0, 1457, 1459, 1460,
	1461, 1581, 0, 0, 0, 0, 1483, 1048, 1497, 0,
	0, 1099, 1497, 1497, 1137, 0, 1139, 1134, 1132, 1107,
	1100, 0, 1665, 1124, 0, 0, 1174, 1180, 0, 1242,
	116, 117, 119, 0, 758, 0, 761, 0, 0, 0,
	0, 768, 769, 0, 0, 0, 0, 0, 803, 812,
	0, 891, 0, 0, 0, 124, 143, 0, 0, 910,
	0, 148, 148, 0, 0, 901, 0, 0, 0, 0,
	0, 903, 905, 899, 0, 0, 907, 176, 747, 0,
	799, 791, 792, 793, 0, 798, 800, 0, 0, 718,
	715, 730, 713, 835, 867, 0, 293, 0, 885, 0,
	0, 0, 962, 974, 0, 967, 968, 309, 0, 0,
	0, 983, 1075, 0, 185, 186, 0, 0, 0, 0,
	0, 0, 0, 186, 470, 472, 0, 0, 478, 743,
	0, 0, 1069, 1342, -2, -2, 1363, 0, 1666, 1668,
	1063, 0, 1494, 0, 0, -2, 0, 0, 0, 1034,
	0, 1090, 1088, 1035, 1036, 1158, 1144, 0, 1127, 0,
	1182, 121, 0, 762, 763, 1651, 765, 0, 767, 770,
	0, 772, 1687, 0, 776, 783, 804, 0, 739, 0,
	809, 810, 890, 785, 0, 123, 125, 142, 893, 126,
	132, 0, 0, 82, 0, 0, 1736, 107, 105, 84,
	0, 713, 746, 0, 790, 0, 801, 802, 716, 0,
	0, 0, 294, 297, 0, 300, 0, 886, 0, 0,
	0, 969, 970, 0, 0, 0, 997, 1008, 163, 0,
	0, 812, 0, 0, 780, 0, 168, 0, 474, 0,
	476, 0, 685, 687, 1434, 1512, 0, 1455, 1456, -2,
	0, 1400, 1496, 1498, 0, 1112, 1101, 1175, 760, 764,
	0, 0, 818, 0, 0, 0, 807, 808, 747, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 719, 0, 739, 0, 298, 299, 812, 0,
	812, 0, 971, 972, 0, 990, 991, 993, 998, 0,
	0, 739, 812, 779, 0, 473, 0, 0, 0, 0,
	0, 0, 1507, 1401, 0, 0, 0, 771, 823, 0,
	0, 0, 805, 806, 803, 0, 814, 128, 0, 892,
	0, 751, 0, 0, 754, 0, 0, 108, 1736, 106,
	0, 0, 0, 795, 797, 720, 747, 718, 739, 0,
	739, 0, 963, 0, 992, 186, 186, 747, 739, 186,
	475, 477, 1504, 1524, 1513, -2, 1936, 1739, 0, 1524,
	1524, 1499, 1500, 0, 773, 819, 820, 0, 815, 816,
	817, 1686, 774, 775, 784, 811, 818, 144, 748, 0,
	0, 749, 0, 0, 111, 0, 113, 0, 794, 0,
	713, 717, 747, 0, 747, 0, 1172, 165, 166, 777,
	747, 167, 1509, 0, 0, 1515, 1516, 1517, 1518, 1519,
	1510, 1511, 766, 821, 0, 822, 0, 0, 0, 823,
	752, 0, 755, 0, 109, 0, 796, 712, 883, 812,
	883, 812, 989, 778, 0, 1521, 1522, 0, 0, 824,
	0, 827, 828, 0, 825, 803, 0, 0, 742, 878,
	0, 739, 880, 739, 1520, 1523, 1514, 826, 829, 830,
	786, 0, 0, 738, 740, 741, 884, 747, 747, 747,
	0, 883, 883, 753, 0, 879, 881, 0, 0, 747,
	756,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 446, 3, 452, 447, 3,
	457, 458, 450, 448, 462, 449, 459, 451, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 465, 3,
	438, 440, 439, 442, 461, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 455, 3, 456, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 463, 445, 464, 443,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 441, 57781, 444, 57782, 454, 57783, 460, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1073
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1093
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1112
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1165
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1215
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1219
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1230
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1261
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1293
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1297
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1301
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1307
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1311
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1317
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1326
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1341
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1347
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1355
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1365
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1369
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1379
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1390
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1397
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1409
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1416
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1424
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1429
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1433
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1452
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1463
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1473
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1483
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1492
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1505
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1509
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1523
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1528
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1539
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1549
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1580
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1585
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1619
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1648
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1688
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1711
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1719
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1723
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1733
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1744
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1748
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1754
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1784
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1787
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1817
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1821
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1831
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1878
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1887
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1893
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1898
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1903
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1908
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1913
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1917
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1933
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1936
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1940
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1944
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1952
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1972
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1984
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2000
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2004
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = nil
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2014
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2027
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2028
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2029
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2030
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2072
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2082
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2086
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2099
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2118
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2122
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2129
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2133
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2137
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2158
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2163
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2175
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2176
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2178
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2179
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "create cast")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2196
		{
			return unimplemented(sqllex, "create operator")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return unimplemented(sqllex, "create publication")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2198
		{
			return unimplemented(sqllex, "create rule")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			return unimplemented(sqllex, "create server")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2202
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2207
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2210
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2211
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2214
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2215
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "drop server")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2241
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2244
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2246
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2247
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2248
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2275
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2307
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2313
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2317
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2328
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2340
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2348
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2356
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2391
		{

			sqlVAL.union.val = nil
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2415
		{
			return helpWith(sqllex, "DELETE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2422
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2425
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2427
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2428
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2429
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2438
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2439
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2440
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2441
		{
			return helpWith(sqllex, "DROP")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2471
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2475
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2501
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2532
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2539
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2569
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2573
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2578
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2606
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2621
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2625
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2628
		{
			return helpWith(sqllex, "DELETE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2630
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2631
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "INSERT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2633
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2635
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2636
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2637
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2645
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "DELETE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "INSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2656
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2660
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2665
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2687
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2699
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2703
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2720
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2732
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2746
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2754
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2758
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2761
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2781
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2785
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2792
		{
			return helpWith(sqllex, "GRANT")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2812
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2823
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2832
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2860
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2861
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2876
		{
			return helpWith(sqllex, "RESET")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2887
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2901
		{
			return helpWith(sqllex, "USE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2906
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2907
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			return helpWith(sqllex, "USE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2930
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2966
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3080
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3085
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3088
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3092
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3111
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3118
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3123
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3128
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3133
		{
			return unimplemented(sqllex, "set from current")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3142
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3147
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3154
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3164
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3222
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = tree.Low
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = tree.Normal
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3236
		{
			sqlVAL.union.val = tree.High
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3247
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3251
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3255
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3264
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3277
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3280
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3282
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3284
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3285
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3287
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3290
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3293
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3297
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3301
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3310
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3323
		{
			sqlVAL.str = "client_encoding"
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.str = "timezone"
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3345
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3360
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3368
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3376
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3391
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3399
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3423
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3425
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3428
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3436
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3451
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3455
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3458
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3466
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3469
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3490
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3498
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3501
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3507
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3514
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3520
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3523
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3550
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3552
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3555
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3559
		{
			sqlVAL.union.val = true
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = true
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3563
		{
			sqlVAL.union.val = false
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3581
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3627
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3631
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = true
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = false
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3643
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3646
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3651
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3659
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3669
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3679
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3682
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = true
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = false
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3693
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3697
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3700
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3714
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3721
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3725
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3733
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3738
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3747
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3755
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3759
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3763
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3776
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3779
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3794
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3802
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3810
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3832
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3836
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3847
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3852
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3859
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3863
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3870
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3875
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3995
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3999
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4003
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4042
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4046
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4051
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4064
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4075
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4087
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4099
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4135
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4147
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4160
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4161
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4162
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4166
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4177
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4189
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4190
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4191
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4205
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4206
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4207
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4208
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4209
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4210
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4211
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4212
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4223
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4242
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4246
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4262
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4267
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4272
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.str = ""
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4292
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4338
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4362
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4377
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4449
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4463
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4518
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4529
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4546
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4556
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4570
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4574
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4580
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4590
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4605
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4655
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4665
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4670
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4671
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4672
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4673
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4674
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4675
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4692
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4734
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4738
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4809
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4834
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4839
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4843
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4847
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4857
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4858
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4859
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4864
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4866
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4869
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4871
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4872
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4874
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4876
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4887
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4902
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4906
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4910
		{
			sqlVAL.union.val = nil
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4927
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4932
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4933
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4941
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4949
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4950
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4953
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4954
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4960
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4962
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4964
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4966
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4968
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4970
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4986
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5000
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5015
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5029
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5043
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5046
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5047
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5051
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5066
		{
			sqlVAL.union.val = false
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.union.val = true
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5076
		{
			sqlVAL.union.val = false
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5082
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5095
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.str = ""
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.union.val = tree.Descending
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5142
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5148
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5156
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5162
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5170
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5176
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5194
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5197
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5198
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5209
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5228
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5231
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5242
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5246
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5247
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5248
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5264
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5267
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5285
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5290
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5299
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5300
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5301
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5309
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5316
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5319
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5320
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.str = ""
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5328
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5336
		{
			sqlVAL.str = ""
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5356
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5366
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5379
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5381
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5385
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5394
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5398
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5416
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 962:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5450
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5464
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.str = ""
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5493
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5494
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5513
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5520
		{
			return helpWith(sqllex, "INSERT")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5538
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5542
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5551
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5566
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5596
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5600
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5613
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5614
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5622
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5627
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5631
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 998:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5648
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5660
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5666
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5672
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5692
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5696
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5745
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5749
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5768
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = tree.ForNone
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5791
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5792
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5798
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5833
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5834
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5835
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5896
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5900
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5909
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5940
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5952
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5956
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5960
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5982
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5983
		{
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = nil
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5996
		{
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5997
		{
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = true
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = false
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = false
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6015
		{
			sqlVAL.union.val = true
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6026
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6027
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6057
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6061
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6066
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6081
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6110
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6141
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6155
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6156
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6159
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6160
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6191
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6210
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6213
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6215
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6230
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6248
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6252
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6257
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6262
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6273
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6280
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6285
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6300
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6304
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6312
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6343
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6357
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6392
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6403
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6449
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6455
		{
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6457
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = nil
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6476
		{
			sqlVAL.union.val = true
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = false
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.str = tree.AstFull
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6560
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6564
		{
			sqlVAL.str = tree.AstRight
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.str = tree.AstInner
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6574
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6575
		{
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.str = tree.AstHash
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.str = ""
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6637
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6642
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6660
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6666
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6674
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6703
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6716
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6724
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6725
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6747
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6749
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6757
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6769
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6770
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6799
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = types.String
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = types.Name
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6811
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6828
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = types.INet
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = types.Oid
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6860
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6891
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6899
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = nil
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = types.Int2
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = types.Int2
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6930
		{
			sqlVAL.union.val = types.Int4
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.union.val = types.Int
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = types.Int
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = types.Int
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = types.Float4
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = types.Float4
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = types.Float
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = types.Float
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6966
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6974
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6982
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = types.Bool
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6994
		{
			sqlVAL.union.val = types.Bool
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = types.RegType
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7023
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = types.Float
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7042
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7048
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7070
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = types.String
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = true
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = false
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = types.Date
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7119
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7124
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7132
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7134
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7142
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7158
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = true
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = false
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = false
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = types.Interval
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = tree.Year
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = tree.Month
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = tree.Day
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Month
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = nil
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = tree.Second
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7245
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7292
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7393
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7536
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7602
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7624
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7736
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7818
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7823
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7832
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7838
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7842
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7846
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7850
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7859
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7898
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7909
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7910
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7925
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7936
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7980
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8048
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8053
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8058
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8060
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8063
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8068
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8073
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8078
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8083
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8092
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8093
		{
			return unimplemented(sqllex, "treat")
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8114
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8119
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8124
		{
			return unimplemented(sqllex, "within group")
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8125
		{
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.str = ""
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8249
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8262
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8330
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8359
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = tree.Any
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = tree.Some
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = tree.All
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = tree.Div
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = tree.LT
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = tree.GT
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.LE
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.GE
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.NE
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = tree.Like
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8443
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8551
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8593
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8597
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8605
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8676
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8710
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8719
		{
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8720
		{
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8734
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8747
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8751
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8792
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8800
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8823
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8832
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8840
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8850
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8866
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8875
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8886
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8895
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8903
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9000
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9011
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9015
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9068
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9081
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9088
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9113
		{
			sqlVAL.str = ""
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9123
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
