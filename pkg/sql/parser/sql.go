// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9126

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 972,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	177, 811,
	194, 811,
	208, 231,
	284, 231,
	292, 667,
	319, 231,
	328, 667,
	365, 667,
	389, 231,
	412, 667,
	-2, 0,
	-1, 75,
	208, 235,
	-2, 0,
	-1, 76,
	105, 972,
	183, 972,
	398, 972,
	399, 972,
	-2, 0,
	-1, 87,
	118, 946,
	132, 946,
	191, 946,
	219, 946,
	250, 946,
	260, 946,
	394, 946,
	-2, 933,
	-1, 116,
	123, 588,
	207, 588,
	382, 588,
	-2, 0,
	-1, 117,
	4, 974,
	21, 974,
	22, 974,
	23, 974,
	24, 974,
	25, 974,
	27, 974,
	32, 974,
	37, 974,
	38, 974,
	39, 974,
	40, 974,
	41, 974,
	42, 974,
	43, 974,
	44, 974,
	45, 974,
	46, 974,
	48, 974,
	49, 974,
	50, 974,
	51, 974,
	52, 974,
	53, 974,
	56, 974,
	57, 974,
	58, 974,
	59, 974,
	61, 974,
	62, 974,
	66, 974,
	67, 974,
	68, 974,
	69, 974,
	70, 974,
	72, 974,
	73, 974,
	74, 974,
	75, 974,
	77, 974,
	79, 974,
	80, 974,
	81, 974,
	84, 974,
	85, 974,
	93, 974,
	94, 974,
	95, 974,
	96, 974,
	97, 974,
	98, 974,
	99, 974,
	100, 974,
	102, 974,
	104, 974,
	105, 974,
	107, 974,
	110, 974,
	111, 974,
	112, 974,
	114, 974,
	116, 974,
	117, 974,
	119, 974,
	120, 974,
	121, 974,
	122, 974,
	123, 974,
	124, 974,
	125, 974,
	126, 974,
	127, 974,
	128, 974,
	129, 974,
	131, 974,
	137, 974,
	138, 974,
	139, 974,
	140, 974,
	141, 974,
	142, 974,
	144, 974,
	146, 974,
	150, 974,
	151, 974,
	153, 974,
	154, 974,
	156, 974,
	157, 974,
	159, 974,
	160, 974,
	161, 974,
	162, 974,
	163, 974,
	164, 974,
	165, 974,
	166, 974,
	167, 974,
	168, 974,
	169, 974,
	172, 974,
	173, 974,
	177, 974,
	178, 974,
	179, 974,
	180, 974,
	183, 974,
	184, 974,
	185, 974,
	186, 974,
	187, 974,
	188, 974,
	189, 974,
	190, 974,
	192, 974,
	194, 974,
	197, 974,
	198, 974,
	199, 974,
	201, 974,
	202, 974,
	205, 974,
	206, 974,
	207, 974,
	208, 974,
	210, 974,
	211, 974,
	213, 974,
	214, 974,
	216, 974,
	217, 974,
	220, 974,
	221, 974,
	224, 974,
	225, 974,
	227, 974,
	228, 974,
	229, 974,
	230, 974,
	231, 974,
	232, 974,
	233, 974,
	234, 974,
	235, 974,
	236, 974,
	238, 974,
	239, 974,
	240, 974,
	241, 974,
	243, 974,
	246, 974,
	247, 974,
	248, 974,
	249, 974,
	251, 974,
	252, 974,
	253, 974,
	255, 974,
	256, 974,
	257, 974,
	258, 974,
	261, 974,
	262, 974,
	264, 974,
	266, 974,
	267, 974,
	268, 974,
	269, 974,
	270, 974,
	271, 974,
	272, 974,
	273, 974,
	274, 974,
	276, 974,
	277, 974,
	278, 974,
	279, 974,
	280, 974,
	281, 974,
	283, 974,
	285, 974,
	286, 974,
	287, 974,
	288, 974,
	289, 974,
	290, 974,
	291, 974,
	292, 974,
	293, 974,
	295, 974,
	296, 974,
	297, 974,
	298, 974,
	299, 974,
	301, 974,
	302, 974,
	303, 974,
	304, 974,
	305, 974,
	306, 974,
	307, 974,
	308, 974,
	310, 974,
	312, 974,
	313, 974,
	314, 974,
	315, 974,
	316, 974,
	317, 974,
	319, 974,
	320, 974,
	321, 974,
	322, 974,
	323, 974,
	324, 974,
	325, 974,
	326, 974,
	328, 974,
	329, 974,
	330, 974,
	331, 974,
	332, 974,
	333, 974,
	334, 974,
	335, 974,
	336, 974,
	337, 974,
	339, 974,
	340, 974,
	341, 974,
	342, 974,
	344, 974,
	345, 974,
	346, 974,
	347, 974,
	349, 974,
	350, 974,
	351, 974,
	352, 974,
	353, 974,
	354, 974,
	355, 974,
	356, 974,
	357, 974,
	358, 974,
	359, 974,
	360, 974,
	362, 974,
	363, 974,
	364, 974,
	366, 974,
	367, 974,
	368, 974,
	369, 974,
	370, 974,
	371, 974,
	372, 974,
	373, 974,
	374, 974,
	376, 974,
	377, 974,
	378, 974,
	379, 974,
	382, 974,
	383, 974,
	384, 974,
	385, 974,
	386, 974,
	388, 974,
	389, 974,
	390, 974,
	392, 974,
	393, 974,
	396, 974,
	397, 974,
	398, 974,
	399, 974,
	400, 974,
	402, 974,
	404, 974,
	405, 974,
	406, 974,
	407, 974,
	408, 974,
	409, 974,
	410, 974,
	412, 974,
	413, 974,
	414, 974,
	419, 974,
	420, 974,
	421, 974,
	422, 974,
	423, 974,
	424, 974,
	-2, 0,
	-1, 118,
	1, 864,
	197, 864,
	283, 864,
	290, 864,
	427, 864,
	450, 864,
	-2, 0,
	-1, 120,
	1, 864,
	450, 864,
	-2, 0,
	-1, 121,
	1, 864,
	450, 864,
	-2, 0,
	-1, 122,
	1, 868,
	450, 868,
	-2, 0,
	-1, 146,
	118, 945,
	132, 945,
	191, 945,
	219, 945,
	250, 945,
	260, 945,
	394, 945,
	-2, 942,
	-1, 176,
	4, 981,
	5, 981,
	6, 981,
	7, 981,
	8, 981,
	9, 981,
	10, 981,
	21, 981,
	22, 981,
	23, 981,
	24, 981,
	25, 981,
	27, 981,
	32, 981,
	33, 981,
	37, 981,
	38, 981,
	39, 981,
	40, 981,
	41, 981,
	42, 981,
	43, 981,
	44, 981,
	45, 981,
	46, 981,
	48, 981,
	49, 981,
	50, 981,
	51, 981,
	52, 981,
	53, 981,
	54, 981,
	55, 981,
	56, 981,
	57, 981,
	58, 981,
	59, 981,
	61, 981,
	62, 981,
	64, 981,
	66, 981,
	67, 981,
	68, 981,
	69, 981,
	70, 981,
	72, 981,
	73, 981,
	74, 981,
	75, 981,
	77, 981,
	79, 981,
	80, 981,
	81, 981,
	83, 981,
	84, 981,
	85, 981,
	86, 981,
	87, 981,
	88, 981,
	89, 981,
	90, 981,
	91, 981,
	92, 981,
	93, 981,
	94, 981,
	95, 981,
	96, 981,
	97, 981,
	98, 981,
	99, 981,
	100, 981,
	101, 981,
	102, 981,
	104, 981,
	105, 981,
	107, 981,
	110, 981,
	111, 981,
	112, 981,
	114, 981,
	116, 981,
	117, 981,
	119, 981,
	120, 981,
	121, 981,
	122, 981,
	123, 981,
	124, 981,
	125, 981,
	126, 981,
	127, 981,
	128, 981,
	129, 981,
	130, 981,
	131, 981,
	137, 981,
	138, 981,
	139, 981,
	140, 981,
	141, 981,
	142, 981,
	144, 981,
	146, 981,
	149, 981,
	150, 981,
	151, 981,
	153, 981,
	154, 981,
	156, 981,
	157, 981,
	159, 981,
	160, 981,
	161, 981,
	162, 981,
	163, 981,
	164, 981,
	165, 981,
	166, 981,
	167, 981,
	168, 981,
	169, 981,
	170, 981,
	172, 981,
	173, 981,
	177, 981,
	178, 981,
	179, 981,
	180, 981,
	182, 981,
	183, 981,
	184, 981,
	185, 981,
	186, 981,
	187, 981,
	188, 981,
	189, 981,
	190, 981,
	192, 981,
	194, 981,
	195, 981,
	196, 981,
	197, 981,
	198, 981,
	199, 981,
	200, 981,
	201, 981,
	202, 981,
	205, 981,
	206, 981,
	207, 981,
	208, 981,
	210, 981,
	211, 981,
	213, 981,
	214, 981,
	215, 981,
	216, 981,
	217, 981,
	218, 981,
	220, 981,
	221, 981,
	224, 981,
	225, 981,
	227, 981,
	228, 981,
	229, 981,
	230, 981,
	231, 981,
	232, 981,
	233, 981,
	234, 981,
	235, 981,
	236, 981,
	237, 981,
	238, 981,
	239, 981,
	240, 981,
	241, 981,
	242, 981,
	243, 981,
	244, 981,
	245, 981,
	246, 981,
	247, 981,
	248, 981,
	249, 981,
	251, 981,
	252, 981,
	253, 981,
	256, 981,
	257, 981,
	258, 981,
	261, 981,
	262, 981,
	263, 981,
	264, 981,
	265, 981,
	266, 981,
	267, 981,
	268, 981,
	269, 981,
	270, 981,
	271, 981,
	272, 981,
	273, 981,
	274, 981,
	276, 981,
	277, 981,
	278, 981,
	279, 981,
	280, 981,
	281, 981,
	283, 981,
	285, 981,
	286, 981,
	287, 981,
	288, 981,
	289, 981,
	290, 981,
	291, 981,
	292, 981,
	293, 981,
	295, 981,
	296, 981,
	297, 981,
	298, 981,
	299, 981,
	301, 981,
	302, 981,
	303, 981,
	304, 981,
	305, 981,
	306, 981,
	307, 981,
	308, 981,
	310, 981,
	311, 981,
	312, 981,
	313, 981,
	314, 981,
	315, 981,
	316, 981,
	317, 981,
	319, 981,
	320, 981,
	321, 981,
	322, 981,
	323, 981,
	324, 981,
	325, 981,
	326, 981,
	328, 981,
	329, 981,
	330, 981,
	331, 981,
	332, 981,
	333, 981,
	334, 981,
	335, 981,
	336, 981,
	337, 981,
	338, 981,
	339, 981,
	340, 981,
	341, 981,
	342, 981,
	343, 981,
	344, 981,
	345, 981,
	346, 981,
	347, 981,
	349, 981,
	350, 981,
	351, 981,
	352, 981,
	353, 981,
	354, 981,
	355, 981,
	356, 981,
	357, 981,
	358, 981,
	359, 981,
	360, 981,
	362, 981,
	363, 981,
	364, 981,
	366, 981,
	367, 981,
	368, 981,
	369, 981,
	370, 981,
	371, 981,
	372, 981,
	373, 981,
	374, 981,
	376, 981,
	377, 981,
	378, 981,
	379, 981,
	382, 981,
	383, 981,
	384, 981,
	385, 981,
	386, 981,
	387, 981,
	388, 981,
	389, 981,
	390, 981,
	392, 981,
	393, 981,
	395, 981,
	396, 981,
	397, 981,
	398, 981,
	399, 981,
	400, 981,
	401, 981,
	402, 981,
	404, 981,
	405, 981,
	406, 981,
	407, 981,
	408, 981,
	409, 981,
	410, 981,
	412, 981,
	413, 981,
	414, 981,
	419, 981,
	420, 981,
	421, 981,
	422, 981,
	423, 981,
	424, 981,
	425, 981,
	433, 981,
	438, 981,
	439, 981,
	440, 981,
	447, 981,
	452, 981,
	-2, 0,
	-1, 541,
	148, 1644,
	380, 1644,
	430, 1644,
	449, 1644,
	-2, 0,
	-1, 542,
	148, 1721,
	380, 1721,
	430, 1721,
	449, 1721,
	-2, 0,
	-1, 543,
	148, 1634,
	380, 1634,
	430, 1634,
	449, 1634,
	-2, 0,
	-1, 545,
	148, 1807,
	380, 1807,
	430, 1807,
	449, 1807,
	-2, 0,
	-1, 547,
	148, 1835,
	380, 1835,
	430, 1835,
	449, 1835,
	-2, 0,
	-1, 554,
	148, 1731,
	380, 1731,
	430, 1731,
	449, 1731,
	-2, 461,
	-1, 571,
	449, 1594,
	451, 1594,
	-2, 636,
	-1, 572,
	449, 1596,
	451, 1596,
	-2, 637,
	-1, 573,
	449, 1595,
	451, 1595,
	-2, 638,
	-1, 574,
	451, 1542,
	-2, 639,
	-1, 720,
	1, 561,
	446, 561,
	448, 561,
	450, 561,
	-2, 0,
	-1, 721,
	1, 635,
	145, 635,
	446, 635,
	448, 635,
	450, 635,
	-2, 0,
	-1, 727,
	1, 575,
	446, 575,
	448, 575,
	450, 575,
	-2, 0,
	-1, 729,
	1, 579,
	446, 579,
	448, 579,
	450, 579,
	-2, 0,
	-1, 731,
	1, 589,
	446, 589,
	448, 589,
	450, 589,
	-2, 0,
	-1, 732,
	1, 598,
	446, 598,
	448, 598,
	450, 598,
	-2, 0,
	-1, 733,
	1, 600,
	446, 600,
	448, 600,
	450, 600,
	-2, 0,
	-1, 734,
	1, 603,
	446, 603,
	448, 603,
	450, 603,
	-2, 0,
	-1, 738,
	1, 617,
	446, 617,
	448, 617,
	450, 617,
	-2, 0,
	-1, 739,
	1, 619,
	446, 619,
	448, 619,
	450, 619,
	-2, 0,
	-1, 782,
	132, 985,
	219, 985,
	250, 985,
	-2, 942,
	-1, 797,
	132, 984,
	219, 984,
	250, 984,
	-2, 942,
	-1, 821,
	449, 1593,
	-2, 469,
	-1, 850,
	447, 1585,
	-2, 1576,
	-1, 856,
	5, 1116,
	-2, 1625,
	-1, 857,
	5, 1117,
	-2, 1629,
	-1, 858,
	5, 1118,
	-2, 1628,
	-1, 859,
	5, 1119,
	-2, 1833,
	-1, 860,
	5, 1120,
	-2, 1733,
	-1, 861,
	5, 1121,
	-2, 1799,
	-1, 862,
	5, 1122,
	-2, 1801,
	-1, 863,
	5, 1123,
	-2, 1812,
	-1, 864,
	5, 1124,
	-2, 1802,
	-1, 865,
	5, 1125,
	-2, 1803,
	-1, 866,
	5, 1126,
	-2, 1624,
	-1, 867,
	5, 1127,
	-2, 1846,
	-1, 868,
	5, 1128,
	-2, 1696,
	-1, 869,
	5, 1129,
	-2, 1740,
	-1, 870,
	5, 1130,
	-2, 1742,
	-1, 871,
	5, 1131,
	-2, 1700,
	-1, 872,
	5, 1132,
	447, 1603,
	-2, 1594,
	-1, 873,
	5, 1188,
	447, 1188,
	-2, 1881,
	-1, 878,
	447, 1604,
	-2, 1595,
	-1, 880,
	5, 1136,
	-2, 1879,
	-1, 881,
	5, 1137,
	-2, 1880,
	-1, 882,
	5, 1138,
	-2, 1699,
	-1, 883,
	5, 1139,
	-2, 1892,
	-1, 884,
	5, 1140,
	-2, 1701,
	-1, 885,
	5, 1141,
	-2, 1702,
	-1, 886,
	5, 1142,
	-2, 1703,
	-1, 887,
	5, 1143,
	-2, 1861,
	-1, 888,
	5, 1144,
	-2, 1890,
	-1, 889,
	5, 1145,
	-2, 1679,
	-1, 890,
	5, 1146,
	-2, 1680,
	-1, 891,
	5, 1160,
	-2, 1873,
	-1, 893,
	5, 1135,
	-2, 1869,
	-1, 894,
	5, 1135,
	-2, 1868,
	-1, 895,
	5, 1135,
	-2, 1885,
	-1, 896,
	5, 1152,
	-2, 1863,
	-1, 897,
	5, 1153,
	-2, 1626,
	-1, 898,
	5, 1163,
	-2, 1862,
	-1, 899,
	5, 1165,
	-2, 1901,
	-1, 901,
	5, 1176,
	-2, 1654,
	-1, 902,
	5, 1187,
	-2, 1894,
	-1, 903,
	5, 1179,
	-2, 1895,
	-1, 904,
	5, 1187,
	-2, 1896,
	-1, 905,
	5, 1183,
	-2, 1897,
	-1, 906,
	5, 1103,
	-2, 1709,
	-1, 907,
	5, 1104,
	-2, 1710,
	-1, 908,
	449, 1591,
	-2, 1575,
	-1, 909,
	447, 1921,
	-2, 1592,
	-1, 929,
	5, 1171,
	-2, 1822,
	-1, 946,
	5, 1170,
	-2, 1902,
	-1, 956,
	5, 1172,
	413, 1172,
	-2, 1864,
	-1, 957,
	5, 1173,
	413, 1173,
	-2, 1865,
	-1, 993,
	447, 1603,
	-2, 1594,
	-1, 1022,
	148, 1835,
	380, 1835,
	430, 1835,
	449, 1835,
	-2, 0,
	-1, 1023,
	1, 449,
	450, 449,
	-2, 876,
	-1, 1143,
	301, 1572,
	440, 1572,
	-2, 1571,
	-1, 1166,
	452, 1572,
	-2, 1573,
	-1, 1201,
	292, 667,
	412, 667,
	-2, 230,
	-1, 1221,
	272, 970,
	-2, 784,
	-1, 1230,
	254, 1598,
	-2, 0,
	-1, 1294,
	1, 338,
	446, 338,
	448, 338,
	450, 338,
	-2, 944,
	-1, 1297,
	4, 1900,
	11, 1900,
	12, 1900,
	14, 1900,
	15, 1900,
	16, 1900,
	17, 1900,
	18, 1900,
	19, 1900,
	21, 1900,
	22, 1900,
	23, 1900,
	24, 1900,
	25, 1900,
	27, 1900,
	30, 1900,
	32, 1900,
	34, 1900,
	37, 1900,
	38, 1900,
	39, 1900,
	40, 1900,
	41, 1900,
	42, 1900,
	43, 1900,
	44, 1900,
	45, 1900,
	46, 1900,
	48, 1900,
	49, 1900,
	50, 1900,
	51, 1900,
	52, 1900,
	53, 1900,
	56, 1900,
	57, 1900,
	58, 1900,
	59, 1900,
	61, 1900,
	62, 1900,
	63, 1900,
	66, 1900,
	67, 1900,
	68, 1900,
	69, 1900,
	70, 1900,
	71, 1900,
	72, 1900,
	73, 1900,
	74, 1900,
	75, 1900,
	77, 1900,
	78, 1900,
	79, 1900,
	80, 1900,
	81, 1900,
	83, 1900,
	84, 1900,
	85, 1900,
	93, 1900,
	94, 1900,
	95, 1900,
	96, 1900,
	97, 1900,
	98, 1900,
	99, 1900,
	100, 1900,
	102, 1900,
	104, 1900,
	105, 1900,
	107, 1900,
	110, 1900,
	111, 1900,
	112, 1900,
	114, 1900,
	116, 1900,
	117, 1900,
	119, 1900,
	120, 1900,
	121, 1900,
	122, 1900,
	123, 1900,
	124, 1900,
	125, 1900,
	126, 1900,
	127, 1900,
	128, 1900,
	129, 1900,
	133, 1900,
	134, 1900,
	135, 1900,
	136, 1900,
	137, 1900,
	138, 1900,
	139, 1900,
	140, 1900,
	141, 1900,
	142, 1900,
	143, 1900,
	144, 1900,
	146, 1900,
	149, 1900,
	150, 1900,
	151, 1900,
	153, 1900,
	154, 1900,
	156, 1900,
	157, 1900,
	159, 1900,
	160, 1900,
	161, 1900,
	162, 1900,
	163, 1900,
	164, 1900,
	165, 1900,
	166, 1900,
	167, 1900,
	168, 1900,
	169, 1900,
	170, 1900,
	171, 1900,
	172, 1900,
	173, 1900,
	174, 1900,
	175, 1900,
	176, 1900,
	178, 1900,
	179, 1900,
	180, 1900,
	182, 1900,
	183, 1900,
	184, 1900,
	185, 1900,
	186, 1900,
	187, 1900,
	188, 1900,
	189, 1900,
	190, 1900,
	192, 1900,
	194, 1900,
	195, 1900,
	196, 1900,
	197, 1900,
	198, 1900,
	199, 1900,
	200, 1900,
	201, 1900,
	202, 1900,
	203, 1900,
	204, 1900,
	205, 1900,
	206, 1900,
	207, 1900,
	208, 1900,
	210, 1900,
	211, 1900,
	213, 1900,
	214, 1900,
	215, 1900,
	216, 1900,
	217, 1900,
	218, 1900,
	220, 1900,
	221, 1900,
	224, 1900,
	225, 1900,
	226, 1900,
	227, 1900,
	228, 1900,
	229, 1900,
	230, 1900,
	231, 1900,
	232, 1900,
	233, 1900,
	234, 1900,
	235, 1900,
	236, 1900,
	237, 1900,
	238, 1900,
	239, 1900,
	240, 1900,
	241, 1900,
	244, 1900,
	246, 1900,
	247, 1900,
	248, 1900,
	249, 1900,
	251, 1900,
	252, 1900,
	253, 1900,
	256, 1900,
	257, 1900,
	258, 1900,
	259, 1900,
	261, 1900,
	262, 1900,
	264, 1900,
	266, 1900,
	267, 1900,
	268, 1900,
	269, 1900,
	270, 1900,
	271, 1900,
	272, 1900,
	273, 1900,
	274, 1900,
	276, 1900,
	277, 1900,
	278, 1900,
	279, 1900,
	280, 1900,
	281, 1900,
	283, 1900,
	285, 1900,
	286, 1900,
	287, 1900,
	288, 1900,
	289, 1900,
	290, 1900,
	291, 1900,
	292, 1900,
	293, 1900,
	295, 1900,
	296, 1900,
	297, 1900,
	298, 1900,
	299, 1900,
	300, 1900,
	301, 1900,
	302, 1900,
	303, 1900,
	304, 1900,
	305, 1900,
	306, 1900,
	307, 1900,
	308, 1900,
	310, 1900,
	311, 1900,
	312, 1900,
	313, 1900,
	314, 1900,
	315, 1900,
	316, 1900,
	317, 1900,
	318, 1900,
	319, 1900,
	320, 1900,
	321, 1900,
	322, 1900,
	323, 1900,
	324, 1900,
	325, 1900,
	326, 1900,
	328, 1900,
	329, 1900,
	330, 1900,
	331, 1900,
	332, 1900,
	333, 1900,
	334, 1900,
	335, 1900,
	336, 1900,
	337, 1900,
	339, 1900,
	340, 1900,
	341, 1900,
	342, 1900,
	343, 1900,
	344, 1900,
	345, 1900,
	346, 1900,
	347, 1900,
	349, 1900,
	350, 1900,
	351, 1900,
	352, 1900,
	353, 1900,
	354, 1900,
	355, 1900,
	356, 1900,
	357, 1900,
	358, 1900,
	359, 1900,
	360, 1900,
	362, 1900,
	363, 1900,
	364, 1900,
	366, 1900,
	367, 1900,
	368, 1900,
	369, 1900,
	370, 1900,
	371, 1900,
	372, 1900,
	373, 1900,
	374, 1900,
	376, 1900,
	377, 1900,
	378, 1900,
	379, 1900,
	382, 1900,
	383, 1900,
	384, 1900,
	385, 1900,
	386, 1900,
	388, 1900,
	389, 1900,
	390, 1900,
	392, 1900,
	393, 1900,
	396, 1900,
	397, 1900,
	398, 1900,
	399, 1900,
	400, 1900,
	402, 1900,
	404, 1900,
	405, 1900,
	406, 1900,
	407, 1900,
	408, 1900,
	409, 1900,
	410, 1900,
	412, 1900,
	413, 1900,
	414, 1900,
	419, 1900,
	420, 1900,
	421, 1900,
	422, 1900,
	423, 1900,
	424, 1900,
	425, 1900,
	426, 1900,
	428, 1900,
	429, 1900,
	430, 1900,
	431, 1900,
	432, 1900,
	433, 1900,
	435, 1900,
	436, 1900,
	437, 1900,
	438, 1900,
	439, 1900,
	440, 1900,
	441, 1900,
	442, 1900,
	443, 1900,
	445, 1900,
	448, 1900,
	449, 1900,
	451, 1900,
	452, 1900,
	-2, 0,
	-1, 1300,
	148, 1807,
	380, 1807,
	430, 1807,
	449, 1807,
	-2, 0,
	-1, 1372,
	1, 1853,
	446, 1853,
	448, 1853,
	449, 1853,
	450, 1853,
	-2, 615,
	-1, 1373,
	1, 1805,
	446, 1805,
	448, 1805,
	449, 1805,
	450, 1805,
	-2, 616,
	-1, 1386,
	1, 871,
	450, 871,
	-2, 876,
	-1, 1391,
	132, 984,
	219, 984,
	250, 984,
	-2, 942,
	-1, 1484,
	118, 946,
	132, 946,
	191, 946,
	219, 946,
	250, 946,
	260, 946,
	394, 946,
	-2, 1344,
	-1, 1537,
	448, 1477,
	-2, 0,
	-1, 1572,
	118, 946,
	132, 946,
	191, 946,
	219, 946,
	250, 946,
	260, 946,
	394, 946,
	-2, 1056,
	-1, 1627,
	447, 1175,
	-2, 1163,
	-1, 1666,
	1, 451,
	450, 451,
	-2, 876,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1224,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1225,
	-1, 1922,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1226,
	-1, 1923,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1227,
	-1, 1924,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1228,
	-1, 1925,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1229,
	-1, 1926,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1230,
	-1, 1927,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1231,
	-1, 1939,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1243,
	-1, 1940,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1244,
	-1, 1941,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1245,
	-1, 1944,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1250,
	-1, 1950,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1254,
	-1, 1952,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1262,
	-1, 1953,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1263,
	-1, 1954,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1264,
	-1, 1955,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1265,
	-1, 2048,
	5, 1132,
	148, 1488,
	447, 1603,
	-2, 1594,
	-1, 2049,
	148, 1489,
	-2, 1857,
	-1, 2050,
	148, 1490,
	-2, 1730,
	-1, 2051,
	148, 1491,
	-2, 1655,
	-1, 2052,
	148, 1492,
	-2, 1690,
	-1, 2053,
	148, 1493,
	-2, 1728,
	-1, 2054,
	148, 1494,
	-2, 1798,
	-1, 2125,
	1, 1057,
	83, 1057,
	118, 1057,
	132, 1057,
	145, 1057,
	149, 1057,
	155, 1057,
	158, 1057,
	182, 1057,
	191, 1057,
	200, 1057,
	215, 1057,
	219, 1057,
	237, 1057,
	250, 1057,
	254, 1057,
	260, 1057,
	309, 1057,
	311, 1057,
	394, 1057,
	403, 1057,
	416, 1057,
	417, 1057,
	418, 1057,
	427, 1057,
	446, 1057,
	448, 1057,
	450, 1057,
	451, 1057,
	-2, 1056,
	-1, 2130,
	447, 1577,
	-2, 1589,
	-1, 2152,
	447, 1174,
	-2, 1164,
	-1, 2365,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1252,
	-1, 2366,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1256,
	-1, 2372,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1258,
	-1, 2552,
	197, 876,
	283, 876,
	290, 876,
	427, 876,
	-2, 448,
	-1, 2624,
	448, 1547,
	451, 1547,
	-2, 1563,
	-1, 2638,
	272, 970,
	-2, 784,
	-1, 2715,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1260,
	-1, 2722,
	195, 0,
	196, 0,
	244, 0,
	-2, 1279,
	-1, 2785,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1308,
	-1, 2786,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1309,
	-1, 2787,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1310,
	-1, 2791,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1314,
	-1, 2792,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1315,
	-1, 2793,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1316,
	-1, 2835,
	447, 1578,
	-2, 1590,
	-1, 2914,
	449, 2003,
	-2, 919,
	-1, 2956,
	195, 0,
	196, 0,
	244, 0,
	-2, 1280,
	-1, 2959,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1283,
	-1, 2960,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1285,
	-1, 3101,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1284,
	-1, 3102,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1286,
	-1, 3112,
	195, 0,
	-2, 1317,
	-1, 3200,
	195, 0,
	-2, 1318,
	-1, 3307,
	40, 0,
	170, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1860,
}

const sqlPrivate = 57344

const sqlLast = 69613

var sqlAct = [...]int{

	878, 3140, 3143, 3306, 3316, 3163, 3379, 2277, 3389, 3278,
	3056, 3280, 2625, 2079, 3264, 3277, 3317, 3129, 3318, 3166,
	1832, 2286, 2753, 994, 3204, 2278, 2181, 3070, 1907, 3305,
	2905, 2900, 2855, 1286, 2117, 1597, 3093, 807, 3017, 208,
	1147, 208, 208, 1967, 2647, 208, 208, 208, 208, 208,
	1399, 2655, 208, 2569, 2393, 2910, 2622, 2649, 1567, 552,
	573, 798, 2274, 1048, 2856, 2660, 3116, 2391, 2251, 1140,
	2514, 2254, 2501, 2318, 986, 2527, 1355, 1565, 208, 1790,
	2474, 877, 573, 1793, 2309, 2991, 669, 1584, 1598, 2311,
	2317, 2358, 2490, 1782, 2287, 1029, 1546, 2118, 2235, 1783,
	2113, 2808, 2183, 2473, 1710, 1719, 1510, 1492, 3205, 1904,
	1980, 1900, 1998, 2354, 2659, 1159, 86, 1737, 1036, 2120,
	1743, 835, 1289, 806, 139, 1156, 874, 4, 1698, 1386,
	1696, 2252, 3164, 2098, 1547, 2010, 2532, 1964, 1282, 2076,
	795, 200, 2623, 1149, 2213, 1279, 1779, 2280, 1215, 1269,
	1295, 2173, 1811, 1992, 2321, 574, 520, 981, 978, 2087,
	504, 2105, 1025, 960, 1505, 528, 575, 1556, 2044, 202,
	850, 208, 208, 1473, 1981, 1400, 146, 1398, 1778, 201,
	536, 147, 569, 546, 1799, 1293, 614, 1245, 900, 645,
	32, 1169, 834, 523, 1709, 958, 1385, 712, 1227, 983,
	139, 1404, 797, 531, 664, 2824, 2389, 1813, 2825, 1813,
	1833, 2230, 2200, 1566, 1813, 3417, 2116, 3408, 2096, 1033,
	2096, 1575, 1412, 1413, 3407, 2710, 1746, 2096, 2283, 578,
	3388, 2279, 3375, 1750, 3373, 3031, 2096, 3031, 3338, 581,
	802, 2096, 176, 1825, 3336, 1995, 1007, 2096, 1415, 2212,
	1190, 578, 3333, 3330, 3327, 3334, 3331, 1750, 3260, 3303,
	989, 581, 1750, 1033, 678, 803, 2666, 3302, 3299, 3298,
	1750, 1825, 1825, 3259, 1414, 3250, 2145, 3189, 3031, 802,
	178, 3249, 1434, 3243, 3031, 3237, 1750, 2811, 3031, 1825,
	961, 961, 1184, 3235, 3202, 3188, 3031, 2145, 1750, 3185,
	3157, 3156, 3031, 1750, 1750, 3149, 2667, 3148, 1750, 1996,
	3031, 3122, 2550, 2408, 1750, 1178, 783, 1008, 2409, 3103,
	805, 782, 2145, 177, 3084, 176, 176, 2679, 2952, 3053,
	2811, 817, 2096, 170, 3047, 3030, 2958, 2096, 3031, 2145,
	2088, 171, 3048, 790, 1437, 1438, 1439, 1440, 2924, 992,
	2916, 2917, 2830, 2917, 1420, 2831, 2820, 2814, 2746, 2821,
	2096, 1750, 148, 178, 178, 2686, 2487, 962, 2687, 2096,
	2485, 2484, 2438, 2096, 2096, 2096, 2141, 2089, 2421, 1997,
	1994, 2422, 1012, 1750, 1482, 1442, 1443, 1444, 2410, 2307,
	2158, 2096, 1829, 2096, 2687, 2144, 1412, 1413, 2145, 2138,
	975, 2132, 2096, 2227, 1750, 2095, 177, 177, 2096, 1750,
	1828, 964, 965, 1829, 2172, 1189, 170, 170, 1669, 2679,
	2261, 2357, 1415, 1749, 171, 171, 1412, 1413, 2170, 1542,
	1168, 2096, 1455, 1456, 1457, 1357, 966, 1435, 963, 1412,
	1413, 2668, 789, 788, 1689, 148, 148, 787, 1414, 3008,
	1412, 1413, 1415, 786, 176, 1461, 176, 1183, 785, 781,
	2669, 1814, 780, 1814, 779, 1415, 2339, 2970, 1814, 2918,
	2392, 778, 777, 1999, 1412, 1413, 1415, 776, 1414, 775,
	774, 773, 772, 771, 770, 710, 1434, 709, 708, 876,
	707, 1414, 178, 706, 178, 705, 704, 703, 702, 701,
	1415, 700, 1414, 699, 698, 697, 696, 695, 694, 208,
	693, 1441, 692, 691, 690, 689, 688, 687, 208, 686,
	685, 677, 676, 636, 635, 594, 1414, 593, 1420, 1436,
	592, 584, 583, 582, 1434, 177, 559, 177, 558, 208,
	557, 556, 540, 198, 197, 170, 208, 196, 1437, 1438,
	1439, 1440, 195, 171, 194, 193, 192, 191, 1420, 1442,
	1443, 1444, 208, 1051, 208, 208, 1152, 208, 1051, 208,
	1993, 1420, 190, 189, 2282, 176, 148, 208, 208, 2828,
	2719, 188, 1420, 187, 186, 1452, 1462, 185, 1035, 1442,
	1443, 1444, 1040, 184, 2150, 183, 1437, 1438, 1439, 1440,
	182, 181, 208, 180, 1005, 1821, 1420, 1812, 2530, 2666,
	179, 1435, 1880, 178, 2415, 1008, 208, 176, 1152, 1152,
	208, 208, 2404, 208, 2267, 2446, 2447, 1483, 2239, 2133,
	2124, 1694, 2035, 1450, 2033, 208, 2031, 1442, 1443, 1444,
	176, 1435, 1568, 208, 2029, 176, 1425, 1423, 1424, 1416,
	1417, 1418, 1419, 1421, 1422, 178, 177, 208, 208, 208,
	208, 208, 1152, 1152, 1411, 1172, 170, 1152, 988, 208,
	1152, 208, 2027, 1513, 171, 1513, 1582, 1023, 178, 1512,
	2088, 1512, 1499, 178, 1835, 1008, 1494, 1174, 1145, 1435,
	1042, 996, 3323, 3304, 3233, 148, 1290, 3195, 177, 3192,
	1516, 3139, 1511, 1436, 3190, 3085, 1143, 1162, 170, 3010,
	1166, 2990, 2989, 2977, 3078, 1441, 171, 1152, 2976, 2975,
	1044, 177, 1137, 1142, 2974, 2968, 177, 2967, 2966, 1020,
	2965, 170, 1171, 1436, 2446, 2447, 170, 148, 208, 171,
	1221, 1224, 2889, 1170, 171, 2844, 578, 2843, 1232, 2841,
	1834, 2834, 208, 2805, 2804, 2803, 581, 2452, 1453, 2730,
	148, 1228, 1228, 1441, 2726, 148, 2690, 208, 2525, 2481,
	2472, 2445, 2442, 2441, 2439, 2428, 2427, 2426, 1177, 1049,
	1182, 1436, 1188, 803, 1160, 2423, 1283, 2420, 2398, 2397,
	2390, 139, 1302, 2308, 2461, 1298, 2268, 2125, 2003, 1411,
	1494, 1166, 974, 1755, 1787, 1753, 1410, 1273, 1276, 1481,
	1296, 3415, 3387, 3386, 3339, 1495, 1483, 1493, 995, 1229,
	1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 2755,
	3294, 3292, 2544, 3228, 3225, 58, 3224, 1391, 3223, 1320,
	1451, 3219, 3213, 3184, 1392, 3183, 59, 1970, 1454, 3135,
	1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 3114,
	63, 3090, 2147, 3089, 3068, 1305, 2452, 3065, 1418, 1419,
	1421, 1422, 1308, 3060, 1690, 2214, 3007, 1416, 1417, 1418,
	1419, 1421, 1422, 2353, 2988, 2938, 1495, 2935, 1412, 1413,
	69, 2871, 2870, 2859, 2858, 2816, 2721, 2680, 1425, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 1422, 3077, 2641, 2612,
	1384, 1313, 2593, 2572, 1415, 2571, 2546, 2486, 2419, 2418,
	75, 2403, 2381, 1390, 2248, 1517, 1514, 1506, 1503, 85,
	2154, 1976, 2153, 76, 2128, 2110, 2094, 2025, 1397, 1477,
	1414, 1581, 1545, 1541, 2446, 2447, 1540, 1389, 1539, 2462,
	1538, 1537, 1536, 1535, 1387, 2266, 1534, 1533, 1531, 803,
	208, 1530, 1529, 1528, 1527, 1526, 1525, 1524, 1523, 1522,
	2446, 2447, 77, 1521, 1520, 1519, 1496, 1478, 1412, 1413,
	1476, 1471, 1019, 783, 1010, 1544, 208, 1553, 782, 1393,
	2446, 2447, 1002, 1412, 1413, 3207, 208, 1051, 208, 208,
	208, 3064, 1407, 1408, 1415, 3009, 1152, 573, 208, 208,
	2962, 1515, 573, 208, 2840, 2823, 1591, 2819, 208, 1415,
	1420, 2407, 2111, 2542, 1680, 1679, 1474, 1577, 1689, 1686,
	1414, 2596, 1689, 1664, 2446, 2447, 2572, 1689, 1039, 1037,
	3226, 2463, 1576, 1051, 1033, 1414, 2650, 1689, 3083, 1836,
	3049, 1442, 1443, 1444, 2450, 2451, 2453, 2454, 2826, 1507,
	1508, 1667, 989, 2682, 989, 1550, 1551, 2507, 2681, 1513,
	1024, 1568, 1382, 2869, 1692, 1512, 2452, 1663, 2034, 961,
	2032, 78, 2030, 1328, 2425, 2424, 811, 2216, 1038, 2363,
	2028, 2202, 1034, 1501, 1833, 1594, 1675, 1356, 768, 803,
	1661, 139, 2452, 1435, 1030, 1564, 2627, 3167, 2626, 1357,
	1420, 1784, 2696, 145, 81, 2607, 82, 3117, 2026, 1732,
	3193, 1683, 2452, 1586, 2062, 3191, 1588, 3390, 1592, 2279,
	2757, 1526, 1604, 1526, 2011, 176, 769, 2152, 2413, 1532,
	1573, 1442, 1443, 1444, 1509, 3324, 3138, 668, 2620, 1775,
	116, 992, 1666, 992, 1995, 1543, 1685, 1205, 2457, 2455,
	2456, 2448, 2449, 2450, 2451, 2453, 2454, 3335, 1152, 208,
	1589, 3332, 2662, 178, 1486, 1051, 578, 1704, 1491, 1688,
	1570, 578, 2851, 3274, 2901, 2462, 581, 2315, 3362, 1593,
	1031, 581, 3242, 1435, 1660, 1436, 117, 1032, 1193, 1629,
	1714, 3325, 1595, 1317, 3363, 2462, 2554, 3041, 149, 2185,
	764, 1203, 1630, 1585, 208, 208, 177, 1788, 1996, 2159,
	3412, 208, 1763, 626, 3162, 3158, 170, 1681, 631, 1868,
	2883, 208, 1866, 762, 171, 801, 760, 560, 801, 833,
	208, 1684, 208, 1354, 208, 2880, 2879, 973, 208, 2446,
	2447, 1480, 2464, 2465, 2466, 148, 1030, 758, 2848, 1695,
	208, 1734, 796, 1676, 1736, 1030, 2847, 1740, 2954, 755,
	2543, 1039, 1718, 2402, 2148, 2401, 2400, 2463, 2399, 2367,
	2232, 1204, 1352, 2176, 1771, 1436, 2226, 3098, 1997, 1994,
	1747, 2223, 2204, 625, 2174, 1744, 2188, 2463, 2140, 1951,
	1152, 208, 1152, 1388, 1039, 1167, 632, 1152, 800, 2461,
	208, 800, 208, 208, 1424, 1416, 1417, 1418, 1419, 1421,
	1422, 1038, 1152, 1152, 1171, 208, 1805, 2595, 2556, 2021,
	566, 208, 1796, 2176, 1033, 1170, 573, 208, 578, 208,
	1837, 208, 1031, 208, 2174, 208, 1315, 3241, 581, 1032,
	2020, 1031, 1909, 2342, 1038, 208, 1774, 1739, 1032, 208,
	1748, 208, 1563, 1238, 743, 1237, 1351, 1803, 2275, 1257,
	208, 2448, 2449, 2450, 2451, 2453, 2454, 802, 1310, 752,
	802, 2452, 1999, 1236, 1847, 1235, 794, 1199, 1764, 208,
	1877, 1751, 1765, 2697, 2166, 208, 2456, 2448, 2449, 2450,
	2451, 2453, 2454, 1423, 1424, 1416, 1417, 1418, 1419, 1421,
	1422, 2203, 568, 1878, 1216, 1051, 803, 2448, 2449, 2450,
	2451, 2453, 2454, 1843, 1831, 1422, 1816, 1798, 1801, 1818,
	1966, 2187, 1820, 2467, 2131, 2345, 1823, 1839, 2195, 624,
	2011, 623, 2220, 1296, 1845, 1846, 1329, 1711, 1850, 1699,
	1214, 1887, 1966, 1700, 1884, 744, 1395, 1018, 1690, 1687,
	3145, 2699, 1690, 2214, 2462, 2861, 2454, 1690, 2214, 627,
	988, 1311, 988, 3296, 2194, 1708, 1347, 1690, 2214, 1993,
	1802, 1962, 2378, 2698, 1020, 1830, 1033, 1213, 1838, 2336,
	2737, 1982, 1983, 2740, 1381, 1033, 3037, 3362, 1712, 1713,
	1051, 1905, 1906, 1960, 2376, 578, 562, 1999, 2137, 1982,
	2008, 799, 3321, 1357, 799, 581, 1714, 2658, 1857, 1974,
	1367, 634, 633, 567, 1972, 832, 3354, 1348, 1555, 2344,
	2553, 2657, 1882, 2604, 1604, 1604, 1879, 1714, 1701, 1885,
	683, 1350, 1201, 208, 2186, 2043, 2341, 2047, 2047, 2060,
	1703, 1982, 2355, 2356, 2080, 2082, 2463, 2446, 2447, 2086,
	2738, 2599, 663, 564, 2555, 3257, 1577, 1051, 208, 1881,
	1883, 1731, 2657, 1716, 3220, 1886, 1216, 208, 1876, 1325,
	208, 783, 3402, 1051, 783, 783, 1896, 1999, 766, 1897,
	1898, 765, 1000, 803, 1559, 2129, 745, 1813, 2872, 1504,
	561, 1629, 1629, 2007, 1316, 1705, 803, 1956, 2373, 1867,
	803, 2126, 1865, 2139, 756, 1957, 2584, 756, 1958, 2374,
	2540, 1963, 2379, 2343, 2112, 2446, 2447, 1562, 2122, 2123,
	3353, 1908, 1706, 3322, 2881, 1706, 565, 3035, 757, 989,
	1256, 2263, 2224, 2944, 3369, 1557, 1978, 563, 2175, 2586,
	756, 3108, 3285, 3230, 1999, 999, 989, 2583, 1198, 2002,
	1560, 1470, 961, 208, 516, 2615, 2458, 2459, 2460, 1314,
	2005, 743, 2588, 2457, 2455, 2456, 2448, 2449, 2450, 2451,
	2453, 2454, 1558, 2417, 2106, 997, 585, 3095, 511, 2452,
	802, 803, 2862, 794, 2121, 1051, 3255, 1706, 746, 2503,
	208, 2939, 2946, 2055, 990, 2837, 2084, 3320, 208, 1013,
	2092, 2093, 2071, 1706, 3319, 1364, 2012, 2587, 208, 1948,
	139, 3361, 2107, 2108, 2142, 3256, 2103, 2590, 992, 3359,
	3173, 208, 1573, 3067, 1152, 2645, 747, 2270, 3146, 1777,
	2162, 1312, 753, 1742, 1334, 992, 208, 1051, 3382, 1552,
	208, 208, 2164, 3036, 1011, 2369, 1561, 2452, 2149, 1515,
	1959, 2375, 744, 1741, 1735, 3352, 1006, 503, 2891, 1961,
	2377, 1403, 2462, 2177, 2945, 1402, 208, 1965, 208, 2102,
	1715, 208, 2157, 2986, 2165, 1699, 2794, 1849, 3094, 1700,
	1677, 1738, 3151, 2249, 1394, 1017, 208, 2163, 2533, 2130,
	2221, 1365, 1975, 208, 3150, 208, 3133, 208, 684, 2207,
	1507, 1508, 3210, 208, 1712, 1713, 208, 3397, 208, 2156,
	208, 1486, 208, 208, 2206, 208, 1152, 1152, 1152, 2290,
	1152, 2160, 1702, 2850, 208, 208, 3403, 208, 2646, 2567,
	2462, 1973, 1604, 2236, 208, 2563, 2271, 2234, 2502, 1946,
	1949, 1814, 2189, 2191, 2180, 208, 2225, 208, 2327, 2329,
	2303, 2304, 1401, 1326, 2463, 2258, 2197, 3231, 2067, 3028,
	2253, 1366, 1143, 2250, 1701, 2272, 2205, 208, 208, 208,
	1797, 208, 586, 587, 2233, 3096, 1703, 1166, 1786, 2222,
	1470, 2018, 1785, 1403, 1759, 3025, 2019, 1945, 1892, 2736,
	2199, 2023, 2024, 745, 208, 1171, 1873, 2208, 1555, 1629,
	3265, 2171, 2906, 2246, 1327, 1670, 2237, 1324, 3040, 578,
	2795, 2314, 1402, 2987, 2292, 3039, 2796, 2262, 3071, 581,
	2229, 2247, 2463, 2328, 3380, 2236, 3026, 2236, 2330, 512,
	2331, 1705, 2334, 2099, 2335, 2241, 2340, 2243, 2302, 2285,
	2301, 1259, 139, 3134, 2574, 998, 2305, 2516, 2573, 2361,
	2299, 3396, 1844, 1166, 1166, 2296, 1559, 2297, 2300, 2298,
	589, 588, 2818, 1296, 1559, 2215, 2217, 2218, 2219, 2316,
	2306, 2457, 2455, 2456, 2448, 2449, 2450, 2451, 2453, 2454,
	2281, 513, 2281, 2370, 1674, 2500, 1335, 1893, 2097, 1562,
	2395, 2396, 3381, 208, 2136, 746, 2135, 1562, 2101, 1401,
	2134, 1244, 3232, 2100, 2260, 2405, 2347, 2104, 1242, 1166,
	590, 591, 1947, 682, 2350, 1557, 1699, 800, 2517, 514,
	1700, 515, 1560, 1706, 3383, 675, 2352, 3215, 2534, 2349,
	1560, 1230, 3057, 747, 2209, 2210, 2691, 988, 3141, 1795,
	2455, 2456, 2448, 2449, 2450, 2451, 2453, 2454, 1231, 1672,
	518, 3366, 1558, 2559, 988, 3165, 3038, 3131, 2515, 2617,
	2992, 3268, 3216, 2809, 2016, 1673, 1379, 3021, 3368, 3337,
	3022, 3227, 3113, 1361, 2476, 2985, 2368, 803, 2885, 1359,
	2406, 1051, 2483, 1864, 2475, 2488, 1345, 2720, 2537, 2440,
	2495, 2496, 2380, 3132, 2257, 2231, 1343, 2201, 2497, 1341,
	208, 1339, 2155, 208, 1583, 1701, 2015, 3024, 1580, 1380,
	208, 1306, 796, 208, 208, 1051, 3142, 1703, 1561, 3027,
	3269, 3217, 2338, 1337, 1051, 1331, 1561, 2337, 1240, 2333,
	1875, 208, 1854, 1662, 2520, 2412, 1518, 2511, 3315, 1309,
	1220, 3262, 2748, 3014, 2904, 2867, 208, 2521, 2522, 2865,
	2849, 2644, 2518, 2629, 2628, 754, 2276, 2265, 1702, 2264,
	2510, 989, 2244, 1827, 208, 208, 208, 2648, 1826, 989,
	208, 1824, 1705, 208, 2524, 1822, 989, 1819, 1817, 1815,
	208, 208, 208, 208, 208, 2551, 1806, 2529, 1756, 1754,
	2560, 2561, 1243, 2528, 208, 208, 3177, 2506, 2557, 1241,
	989, 1745, 208, 2478, 2479, 2480, 2575, 1733, 2578, 680,
	681, 1730, 1378, 2489, 208, 1152, 1405, 208, 2538, 1360,
	3023, 673, 674, 1051, 2541, 1358, 1863, 2504, 1717, 2519,
	1051, 1707, 1344, 2549, 2576, 208, 2580, 2581, 208, 208,
	1601, 517, 1342, 2564, 2359, 1340, 1590, 1338, 208, 3363,
	992, 1152, 208, 3288, 1152, 1152, 1152, 1604, 992, 3087,
	2568, 208, 2535, 2536, 1706, 992, 2598, 208, 2630, 1336,
	2634, 1330, 3086, 208, 1239, 208, 759, 761, 970, 2552,
	1693, 1195, 208, 2605, 3179, 2176, 2067, 2067, 2193, 992,
	2915, 2558, 2176, 1604, 1697, 1704, 2174, 2494, 1406, 2661,
	1714, 2492, 971, 2192, 1851, 1152, 1152, 1870, 2661, 2499,
	2176, 2594, 3222, 208, 208, 2360, 2505, 208, 2589, 2678,
	1704, 2190, 2653, 2613, 1629, 1376, 1377, 2664, 2600, 2652,
	208, 2523, 1051, 208, 208, 1051, 208, 2606, 2609, 2694,
	2531, 2614, 2608, 2603, 3197, 1412, 1413, 2993, 2206, 2211,
	1744, 2196, 208, 1412, 1413, 1774, 1744, 1409, 2228, 2198,
	1629, 3261, 3234, 519, 2895, 2890, 2833, 2284, 3378, 2085,
	1665, 1415, 1589, 2635, 1596, 2539, 2637, 2638, 2639, 2591,
	3395, 2592, 2446, 2447, 972, 1483, 2067, 2067, 2067, 803,
	1412, 1413, 2651, 2689, 2663, 1051, 2670, 1414, 2704, 1702,
	2693, 2168, 2167, 2839, 2743, 1414, 1051, 2723, 208, 2610,
	530, 2611, 1319, 2168, 2545, 2169, 2022, 2017, 1318, 1990,
	1363, 139, 2963, 1362, 908, 2677, 2838, 2684, 2685, 2735,
	1554, 1481, 1479, 3404, 3125, 3081, 3059, 2934, 2923, 2672,
	2673, 2674, 2899, 2675, 2676, 2888, 2531, 2701, 2887, 2886,
	2864, 2671, 2732, 2733, 2734, 2706, 2601, 2642, 2702, 2708,
	2602, 2640, 2294, 204, 2758, 506, 507, 2269, 2245, 524,
	506, 524, 534, 539, 2705, 1977, 555, 1166, 1809, 1808,
	1895, 1807, 1789, 1767, 204, 2509, 2806, 1766, 1762, 2512,
	2728, 1761, 1760, 1604, 1758, 1757, 990, 1396, 990, 1375,
	1374, 208, 672, 2739, 2741, 2742, 204, 2747, 1353, 1905,
	2764, 1349, 1346, 1332, 1268, 208, 2754, 1267, 1266, 1265,
	2760, 1051, 1264, 1263, 2761, 1905, 2774, 1262, 2547, 2548,
	2763, 1261, 1260, 2827, 1258, 2822, 1253, 2771, 1252, 1251,
	1250, 208, 1604, 1604, 2798, 1249, 2773, 1212, 1160, 1211,
	1210, 1049, 1209, 1208, 1207, 1206, 2802, 1200, 1604, 1604,
	1629, 1194, 1192, 1191, 1016, 1015, 945, 855, 2799, 988,
	1668, 767, 989, 618, 751, 3144, 2236, 988, 1369, 2810,
	809, 74, 1202, 605, 988, 68, 208, 2812, 2813, 1604,
	2863, 792, 3273, 743, 741, 506, 506, 2873, 2582, 1853,
	139, 1333, 1855, 204, 2807, 2508, 2109, 3254, 988, 1629,
	1629, 2745, 2829, 2063, 2971, 794, 2882, 2416, 208, 208,
	208, 3203, 2751, 3107, 2014, 1629, 1629, 2884, 2845, 1500,
	70, 843, 928, 3015, 2852, 1051, 208, 2320, 2319, 810,
	1152, 1054, 1601, 1601, 1678, 2877, 849, 1691, 2151, 2046,
	793, 1600, 852, 1602, 854, 853, 1629, 208, 1603, 1502,
	851, 992, 2853, 2919, 1599, 2259, 2288, 1247, 730, 1682,
	208, 208, 1152, 1152, 1152, 1971, 208, 208, 208, 2009,
	2908, 208, 208, 2290, 744, 2411, 1497, 823, 208, 2894,
	2067, 2067, 2878, 2911, 845, 2930, 2907, 2006, 2912, 2206,
	1009, 1051, 822, 2943, 1412, 1413, 2513, 2656, 2832, 3076,
	1891, 2351, 2815, 1888, 621, 2443, 1991, 2236, 2836, 1001,
	2896, 2866, 2898, 2868, 2068, 2061, 2057, 1383, 1472, 2289,
	1415, 2961, 1041, 826, 1969, 2902, 1488, 2835, 2385, 989,
	2526, 2909, 2665, 2146, 2913, 1899, 208, 2957, 1776, 969,
	2921, 2920, 968, 967, 3279, 2926, 1414, 3276, 2942, 2925,
	2936, 1774, 2931, 2932, 1671, 2937, 2161, 2941, 2933, 1464,
	2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
	2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2631,
	2067, 2948, 839, 1165, 2927, 2928, 2929, 2759, 2493, 2692,
	1217, 2949, 3221, 1463, 763, 3212, 1028, 208, 1027, 1026,
	2566, 3401, 2860, 175, 172, 174, 173, 1051, 2875, 1051,
	2616, 90, 37, 36, 35, 745, 17, 115, 992, 114,
	113, 112, 111, 1604, 110, 109, 1420, 108, 208, 208,
	208, 107, 2984, 106, 105, 104, 103, 102, 101, 100,
	208, 99, 98, 97, 96, 95, 208, 94, 208, 93,
	92, 208, 208, 208, 3011, 3012, 91, 1442, 1443, 1444,
	208, 208, 1152, 34, 1051, 551, 1152, 548, 2997, 2492,
	50, 3033, 3042, 989, 49, 3002, 89, 3000, 2995, 2996,
	989, 88, 208, 16, 2998, 1051, 2528, 3006, 1152, 33,
	1629, 14, 54, 989, 55, 13, 29, 3061, 208, 3055,
	30, 3043, 80, 3013, 79, 28, 15, 3003, 27, 1435,
	25, 2842, 26, 11, 8, 791, 7, 746, 10, 208,
	12, 24, 144, 1003, 2661, 1051, 143, 3034, 3073, 3032,
	3051, 3050, 672, 73, 142, 72, 141, 140, 3044, 3045,
	1601, 71, 3075, 3062, 3072, 23, 9, 22, 3088, 136,
	67, 1051, 3074, 1014, 2653, 747, 138, 137, 64, 135,
	555, 3082, 992, 3080, 3054, 134, 65, 133, 132, 992,
	988, 809, 66, 131, 21, 809, 204, 5, 204, 204,
	53, 1157, 992, 204, 3052, 3069, 6, 3119, 3097, 1051,
	3092, 204, 1173, 2695, 83, 208, 84, 208, 2897, 1051,
	208, 1436, 1774, 31, 3115, 62, 3091, 1175, 208, 1179,
	61, 1185, 3104, 2994, 60, 20, 1197, 52, 19, 166,
	2999, 3099, 165, 164, 163, 3005, 159, 3128, 158, 208,
	1219, 2063, 2063, 162, 204, 204, 160, 1157, 161, 3123,
	157, 208, 3120, 3121, 130, 168, 167, 155, 208, 204,
	3127, 152, 151, 1152, 3169, 154, 156, 1255, 208, 153,
	150, 3058, 169, 990, 129, 57, 3063, 3161, 3126, 2382,
	2383, 204, 204, 204, 204, 1157, 3147, 128, 3170, 208,
	990, 3172, 127, 555, 126, 204, 3182, 3079, 3159, 125,
	1604, 124, 56, 3175, 1304, 18, 2, 3168, 208, 3176,
	1, 1307, 3186, 3187, 208, 0, 0, 3181, 0, 3174,
	3153, 0, 208, 2911, 0, 0, 0, 0, 3180, 0,
	0, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0, 3209,
	3201, 2063, 2063, 2063, 3218, 0, 0, 988, 3206, 0,
	0, 1049, 2653, 1604, 0, 3178, 3208, 0, 0, 3196,
	0, 0, 204, 0, 208, 1152, 3229, 1629, 0, 0,
	208, 0, 0, 0, 1152, 1152, 204, 3105, 3248, 2469,
	2470, 2471, 208, 0, 208, 3154, 3155, 0, 0, 0,
	0, 539, 0, 3236, 0, 0, 3001, 3240, 0, 0,
	0, 3258, 0, 0, 208, 3239, 0, 3246, 3247, 0,
	208, 208, 0, 1051, 3270, 3105, 3251, 0, 0, 0,
	1629, 208, 3245, 3244, 3281, 1908, 1604, 0, 3291, 3282,
	3293, 0, 3286, 0, 3289, 0, 0, 0, 0, 0,
	0, 3275, 3301, 1465, 1466, 1467, 1468, 1469, 0, 3300,
	0, 208, 0, 0, 3283, 0, 0, 0, 3295, 3297,
	0, 0, 3326, 0, 0, 0, 0, 0, 0, 3252,
	0, 3253, 0, 1485, 3314, 3313, 3311, 3312, 0, 1498,
	0, 0, 0, 0, 0, 3340, 3328, 208, 0, 0,
	0, 988, 3342, 1629, 3344, 0, 3349, 3271, 988, 0,
	3341, 3351, 3350, 0, 0, 0, 208, 2067, 3346, 3347,
	3348, 988, 0, 2290, 0, 3343, 0, 3345, 0, 0,
	0, 0, 0, 3357, 0, 3360, 3358, 0, 0, 0,
	208, 0, 0, 3364, 3281, 0, 3367, 3365, 3372, 0,
	3374, 0, 0, 3371, 3376, 0, 3377, 0, 2067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3385,
	3384, 0, 0, 0, 0, 0, 3391, 0, 3393, 0,
	0, 0, 3394, 3392, 0, 1601, 0, 3398, 0, 3124,
	0, 0, 0, 0, 506, 0, 0, 0, 0, 0,
	3399, 3400, 3405, 0, 3406, 0, 0, 0, 1548, 1548,
	1548, 3409, 3410, 3411, 0, 204, 0, 204, 3413, 3414,
	204, 1601, 0, 3418, 0, 3290, 58, 3370, 0, 3416,
	1173, 1720, 1157, 204, 0, 0, 0, 59, 0, 1908,
	0, 204, 1173, 524, 0, 2067, 204, 1173, 1724, 0,
	0, 63, 555, 0, 0, 2063, 2063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	1721, 0, 0, 2716, 2717, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2063, 2063, 2063, 2063, 2063,
	2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
	2063, 2063, 2063, 2063, 0, 2063, 0, 0, 0, 0,
	0, 0, 1725, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
	2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791,
	2792, 2793, 0, 2797, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2446, 2447, 990, 2464, 2465, 2466, 0,
	0, 1601, 0, 990, 0, 0, 0, 1726, 1727, 0,
	990, 0, 2953, 0, 0, 0, 1722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 204,
	0, 0, 0, 0, 990, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 1723, 1794, 0, 0, 0, 0,
	1601, 1601, 78, 2461, 204, 0, 204, 0, 204, 0,
	0, 0, 506, 0, 0, 0, 1601, 1601, 0, 0,
	0, 0, 0, 0, 1810, 3028, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 81, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1601, 0, 0,
	0, 3025, 0, 0, 3018, 0, 176, 0, 0, 0,
	665, 0, 0, 0, 0, 555, 0, 3016, 668, 0,
	0, 116, 0, 3020, 204, 2452, 1157, 204, 1728, 0,
	0, 0, 0, 0, 0, 58, 0, 667, 0, 555,
	0, 0, 3026, 0, 178, 204, 59, 0, 0, 0,
	204, 204, 0, 204, 0, 204, 0, 204, 0, 204,
	63, 0, 0, 0, 0, 0, 0, 117, 0, 1869,
	0, 0, 3019, 1871, 0, 1872, 0, 2467, 0, 149,
	0, 0, 0, 0, 204, 0, 0, 177, 0, 0,
	69, 1729, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 539, 0, 171, 0, 0, 2462, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 1889, 0, 1894, 0, 148, 0, 0, 85,
	1901, 0, 0, 76, 0, 0, 0, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 77, 1950, 0, 1952, 1953, 1954, 1955, 0,
	0, 0, 0, 3021, 0, 0, 3022, 0, 0, 0,
	0, 0, 0, 0, 0, 1979, 0, 0, 0, 0,
	2463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 2004, 0, 0, 0, 0, 0,
	0, 0, 0, 3024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3027, 0, 0, 0, 0,
	0, 1601, 0, 0, 0, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 0, 0, 0, 0, 2059, 506, 2070, 2072,
	2077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 58, 0, 0, 0, 0, 0,
	0, 78, 506, 0, 0, 59, 0, 0, 0, 204,
	0, 506, 0, 0, 204, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	2458, 2459, 2460, 145, 81, 0, 82, 2457, 2455, 2456,
	2448, 2449, 2450, 2451, 2453, 2454, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 176, 3023, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 668, 0, 0,
	116, 0, 2063, 59, 0, 0, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 63, 85, 0,
	0, 0, 76, 178, 0, 0, 0, 524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3112, 0, 0, 2063, 0, 0, 117, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 77, 0, 0, 2184, 0, 177, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 170, 75, 0, 0,
	0, 3136, 204, 0, 171, 0, 85, 0, 0, 0,
	76, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	204, 0, 0, 0, 204, 2238, 0, 0, 0, 0,
	0, 0, 0, 990, 2240, 0, 2242, 0, 0, 77,
	2063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 1173, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 2143, 0, 0, 0, 0, 1601, 0,
	1794, 0, 0, 0, 0, 0, 0, 2184, 3200, 506,
	78, 2293, 0, 0, 0, 0, 0, 204, 0, 0,
	204, 0, 204, 0, 204, 0, 204, 204, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 0, 2312, 672,
	0, 2184, 145, 81, 0, 82, 0, 0, 204, 0,
	0, 1601, 0, 0, 0, 0, 0, 0, 0, 1173,
	0, 1173, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 668, 0, 78, 116,
	0, 204, 204, 204, 0, 204, 1412, 1413, 0, 1445,
	1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 1448, 0, 990, 204, 0,
	145, 81, 1415, 82, 990, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1601, 117, 0, 990, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 149, 1414, 0,
	0, 0, 0, 0, 668, 177, 1434, 116, 0, 0,
	0, 0, 0, 1431, 0, 170, 2365, 2366, 0, 0,
	0, 0, 2372, 171, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2386, 2387, 0, 148, 0, 0, 2004, 0, 0,
	0, 0, 0, 117, 0, 0, 2394, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 1173, 1437, 1438,
	1439, 1440, 0, 177, 0, 0, 0, 0, 1420, 0,
	0, 0, 2414, 170, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 2429, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1462, 0, 0, 1442,
	1443, 1444, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 0, 0, 0, 0, 0, 0, 1429, 1430,
	0, 0, 0, 0, 2077, 2077, 2077, 0, 0, 0,
	0, 0, 0, 1450, 204, 0, 0, 0, 0, 1548,
	0, 1435, 204, 0, 0, 0, 0, 2498, 0, 204,
	0, 0, 0, 0, 506, 0, 0, 506, 0, 1460,
	0, 0, 0, 0, 506, 0, 0, 506, 506, 0,
	0, 0, 0, 204, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 909, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 2184, 2184,
	204, 809, 0, 205, 2184, 0, 0, 2570, 0, 0,
	0, 0, 0, 1436, 2184, 2570, 2184, 2570, 2570, 0,
	0, 0, 0, 0, 205, 0, 2585, 0, 204, 204,
	0, 2446, 2447, 0, 2464, 2465, 2466, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 204, 0,
	2725, 1157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2619,
	0, 0, 2621, 2624, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 204, 0, 0, 0,
	0, 2461, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 1157, 0, 0, 0, 0, 0, 2184, 0, 506,
	2654, 0, 0, 0, 0, 0, 2184, 0, 0, 0,
	1451, 0, 0, 1426, 1427, 1433, 1432, 1428, 1454, 0,
	1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 0,
	0, 0, 0, 2980, 0, 0, 2979, 204, 1794, 0,
	0, 1794, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2452, 2700, 0, 0, 1157, 204, 0,
	204, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 2707, 0, 204, 0, 1901, 0,
	0, 0, 0, 0, 2711, 2712, 0, 0, 2715, 0,
	0, 0, 2718, 1415, 0, 0, 0, 0, 0, 0,
	0, 2722, 0, 0, 0, 2467, 0, 0, 0, 0,
	2729, 0, 0, 2498, 0, 0, 0, 0, 0, 1414,
	875, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 2756, 0, 2749, 0, 2462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2765, 2766, 0, 2767, 2768, 2769, 203,
	0, 2770, 0, 0, 0, 2772, 0, 0, 0, 0,
	0, 0, 0, 2714, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	1438, 1439, 1440, 0, 1412, 1413, 2800, 2801, 0, 1420,
	0, 0, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	1415, 0, 0, 0, 2817, 506, 0, 0, 2463, 0,
	1442, 1443, 1444, 0, 0, 0, 0, 0, 0, 506,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2846, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2854, 2857, 0, 0, 0, 0, 0, 991,
	2713, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 0, 0, 0, 0, 2874, 1437, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2458, 2459,
	2460, 0, 2892, 204, 204, 2457, 2455, 2456, 2448, 2449,
	2450, 2451, 2453, 2454, 0, 0, 1441, 1442, 1443, 1444,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1548, 0,
	0, 2184, 204, 0, 0, 0, 0, 0, 0, 2922,
	0, 0, 0, 0, 2312, 2312, 0, 0, 0, 0,
	672, 672, 2184, 0, 0, 1794, 1794, 0, 0, 1435,
	0, 0, 204, 0, 0, 0, 205, 1056, 205, 205,
	1056, 0, 1056, 205, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 2950, 2951, 0, 0, 0, 206,
	2955, 2956, 0, 0, 0, 2959, 2960, 0, 0, 0,
	0, 0, 2964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2972, 2969, 1056, 1056, 205, 205, 0, 0, 2973, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 205,
	209, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 205, 205, 0, 1056, 1056, 0, 0,
	0, 1056, 0, 0, 1056, 205, 204, 0, 0, 0,
	0, 1173, 0, 204, 0, 0, 2446, 2447, 0, 2464,
	2465, 2466, 0, 0, 0, 0, 204, 0, 0, 0,
	572, 0, 0, 0, 0, 2724, 0, 0, 0, 0,
	0, 0, 2184, 2184, 2184, 0, 0, 0, 0, 0,
	0, 1056, 572, 0, 1173, 0, 0, 0, 0, 2857,
	2184, 0, 2570, 0, 0, 1173, 1173, 204, 0, 821,
	0, 0, 205, 0, 204, 204, 2461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3066, 0, 1425, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0, 0,
	0, 0, 2184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1173, 0, 0, 2857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2452, 0,
	0, 0, 0, 3100, 3101, 3102, 0, 0, 0, 0,
	0, 0, 203, 0, 203, 203, 0, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 3110,
	3111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3118, 0, 0, 0, 0, 0, 0,
	2467, 0, 0, 0, 0, 0, 0, 0, 0, 2184,
	0, 2570, 0, 0, 3130, 0, 0, 0, 0, 0,
	203, 203, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 2462, 2857, 0, 0, 203, 0, 0, 0, 0,
	3152, 0, 0, 555, 0, 0, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 2624, 0, 203, 203, 203,
	203, 0, 204, 0, 0, 0, 2857, 0, 0, 2857,
	0, 203, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2857, 2857, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2756, 0, 0, 0, 0, 0, 506, 0,
	205, 0, 0, 2463, 0, 0, 3130, 0, 0, 0,
	0, 1056, 0, 205, 205, 0, 3211, 0, 203, 3214,
	1056, 205, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 2446, 2447, 0, 2464,
	2465, 2466, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 2570, 0, 0, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 1173, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 0, 0, 0, 0, 3266, 0,
	0, 0, 0, 0, 1173, 204, 2461, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 1415, 809, 0, 0,
	0, 0, 0, 2458, 2459, 2460, 0, 0, 0, 0,
	2457, 2455, 2456, 2448, 2449, 2450, 2451, 2453, 2454, 0,
	0, 0, 1414, 0, 0, 2756, 3310, 3310, 3310, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 821, 3329, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 1135, 2452, 0,
	0, 2184, 0, 2857, 0, 2857, 0, 0, 0, 0,
	0, 0, 1056, 205, 0, 0, 2371, 0, 3310, 1056,
	3130, 0, 0, 0, 0, 0, 2468, 0, 0, 0,
	0, 0, 1437, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1420, 1052, 1173, 0, 1153, 0, 1052, 0,
	2467, 0, 0, 0, 0, 0, 0, 0, 205, 205,
	0, 0, 844, 87, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 1444, 0, 0, 0, 0,
	0, 2462, 0, 0, 205, 0, 205, 0, 205, 3310,
	0, 1571, 0, 991, 0, 0, 203, 0, 1153, 1153,
	2446, 2447, 0, 2464, 2465, 2466, 0, 0, 0, 203,
	1571, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 579, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 1153, 1153, 1056, 0, 1056, 1153, 0, 0,
	1153, 1056, 0, 0, 205, 0, 0, 205, 0, 0,
	2461, 0, 0, 0, 0, 0, 1056, 1056, 0, 0,
	0, 0, 0, 2463, 0, 205, 123, 0, 0, 0,
	205, 205, 58, 205, 0, 205, 0, 205, 0, 205,
	0, 0, 0, 59, 118, 0, 0, 1153, 0, 1441,
	0, 0, 784, 0, 0, 0, 0, 63, 0, 0,
	0, 804, 0, 0, 205, 0, 0, 1436, 0, 0,
	0, 0, 39, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 2452, 0, 0, 38, 0, 69, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 41, 0, 1056,
	0, 0, 42, 0, 0, 0, 0, 75, 0, 0,
	121, 0, 0, 0, 0, 40, 85, 0, 1415, 579,
	76, 43, 0, 2458, 2459, 2460, 0, 0, 0, 0,
	2457, 2455, 2456, 2448, 2449, 2450, 2451, 2453, 2454, 0,
	0, 0, 0, 0, 1414, 0, 0, 44, 0, 0,
	0, 0, 1434, 0, 0, 2462, 0, 0, 0, 77,
	0, 0, 0, 0, 203, 203, 0, 0, 0, 0,
	0, 203, 0, 0, 1425, 1423, 1424, 1416, 1417, 1418,
	1419, 1421, 1422, 0, 1056, 0, 0, 0, 0, 0,
	203, 0, 203, 0, 203, 0, 0, 0, 2364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2463, 0, 879,
	0, 1056, 0, 0, 0, 1442, 1443, 1444, 0, 0,
	203, 0, 0, 203, 205, 0, 1135, 1056, 78, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 579, 203, 0, 203,
	0, 203, 0, 203, 0, 203, 0, 0, 0, 48,
	145, 81, 0, 82, 0, 46, 821, 1435, 0, 122,
	0, 0, 1135, 0, 0, 47, 0, 1052, 0, 0,
	203, 0, 176, 0, 0, 0, 1153, 572, 0, 0,
	0, 0, 572, 0, 51, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2458, 2459, 2460,
	178, 0, 0, 1052, 2457, 2455, 2456, 2448, 2449, 2450,
	2451, 2453, 2454, 0, 0, 0, 0, 0, 0, 1056,
	0, 1441, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 149, 0, 0, 0, 1436,
	0, 0, 205, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 205, 0, 0, 1056, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 1056, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 1135, 3, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, 0,
	87, 0, 87, 0, 87, 1052, 0, 205, 0, 0,
	205, 0, 205, 0, 205, 0, 205, 205, 991, 0,
	1056, 1056, 1056, 0, 1056, 0, 1425, 1423, 1424, 1416,
	1417, 1418, 1419, 1421, 1422, 991, 0, 0, 205, 0,
	203, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2446, 2447, 0, 2464, 2465, 2466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 205, 0, 205, 0, 0, 0, 804,
	87, 0, 199, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 205, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	1153, 0, 1153, 0, 0, 0, 0, 1153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1153, 1153, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 572, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 2452, 0, 0, 0,
	0, 203, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 1437, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 1420, 203, 1475, 2467, 0,
	0, 203, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 1442, 1443, 1444, 2462,
	0, 0, 0, 203, 0, 0, 203, 0, 203, 1135,
	203, 0, 203, 203, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 1056,
	0, 0, 1053, 0, 0, 1154, 0, 1053, 1056, 0,
	1052, 0, 0, 0, 0, 0, 0, 203, 203, 203,
	0, 203, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2463, 1135, 0, 203, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 1154, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 1441, 1569, 0, 1572, 0, 1052, 205, 205,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	1436, 0, 0, 1052, 0, 0, 0, 0, 205, 1056,
	0, 1154, 1154, 0, 0, 0, 1154, 1056, 0, 1154,
	0, 0, 0, 0, 1056, 0, 0, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 1056, 205, 0, 1056, 1056,
	1056, 0, 0, 1415, 0, 205, 1461, 0, 0, 0,
	0, 2458, 2459, 2460, 1135, 0, 1154, 0, 2457, 2455,
	2456, 2448, 2449, 2450, 2451, 2453, 2454, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 1056,
	1056, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 1052, 1135, 1425, 1423, 1424,
	1416, 1417, 1418, 1419, 1421, 1422, 1056, 0, 205, 1056,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 205, 0, 991, 1437,
	1438, 1439, 1440, 0, 1153, 991, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1571,
	0, 0, 0, 0, 0, 0, 1452, 1462, 0, 1056,
	1442, 1443, 1444, 0, 0, 1046, 0, 0, 0, 0,
	1056, 0, 1164, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 1153, 1153, 1153, 0,
	1153, 0, 0, 0, 203, 203, 0, 0, 0, 0,
	1460, 0, 1571, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 1272, 1272, 1164, 0, 0, 0, 0, 0, 0,
	0, 0, 804, 0, 1303, 0, 0, 0, 203, 0,
	0, 0, 203, 0, 0, 1056, 1441, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1368, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 203, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 784, 0, 0,
	784, 784, 203, 205, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	205, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	1135, 0, 0, 0, 0, 1968, 1056, 1056, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 804,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 1135, 1056, 1484, 0, 0, 0,
	0, 0, 0, 1135, 0, 0, 0, 0, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 991, 0, 0, 1052, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 1135,
	0, 1056, 0, 1056, 0, 0, 0, 0, 0, 1578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1153, 595, 0, 0, 1154,
	0, 1154, 0, 1052, 0, 0, 1154, 205, 0, 0,
	1052, 0, 0, 0, 205, 205, 1056, 0, 1056, 596,
	1056, 1154, 1154, 0, 0, 0, 0, 0, 0, 203,
	203, 1153, 0, 0, 1153, 1153, 1153, 0, 0, 1056,
	0, 0, 1056, 0, 0, 0, 203, 0, 0, 597,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1135, 87, 0, 1135, 0, 0, 0, 991, 0,
	598, 0, 0, 599, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 1153, 1153, 0, 0, 622,
	0, 0, 87, 0, 0, 600, 0, 0, 203, 0,
	0, 0, 0, 0, 620, 1056, 0, 87, 0, 87,
	0, 0, 1052, 0, 1053, 1052, 0, 0, 0, 0,
	0, 601, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 602, 0, 1056, 603, 626, 0, 0, 0, 629,
	0, 0, 87, 1056, 87, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1769, 0, 1053,
	0, 0, 205, 0, 1781, 0, 0, 1056, 0, 0,
	0, 0, 991, 0, 0, 625, 0, 0, 0, 991,
	0, 0, 606, 1248, 0, 1800, 0, 1800, 0, 0,
	0, 0, 1571, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1135, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 0, 0, 0, 1053, 0, 0, 0,
	0, 0, 0, 203, 655, 0, 0, 0, 0, 608,
	203, 203, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1781, 0, 0, 1841, 637, 0, 0,
	0, 1052, 1968, 0, 0, 0, 628, 0, 205, 1056,
	0, 0, 0, 0, 1852, 0, 609, 0, 1056, 1056,
	1858, 0, 1859, 1484, 1860, 0, 1861, 638, 1862, 610,
	0, 0, 0, 0, 0, 0, 639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 0, 0, 0,
	0, 640, 0, 1874, 0, 205, 0, 1056, 611, 0,
	0, 624, 0, 623, 1135, 205, 0, 660, 612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 641, 0, 619, 0, 0, 0, 0, 630,
	0, 627, 0, 0, 1053, 617, 0, 0, 0, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 643,
	1153, 0, 644, 0, 0, 0, 0, 0, 203, 0,
	1135, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 1053, 0, 0, 659,
	979, 0, 1153, 1153, 1153, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1154, 1154, 1154, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 0, 0, 0, 0, 0, 1135, 0, 1135, 0,
	0, 87, 0, 87, 0, 0, 663, 647, 0, 0,
	0, 0, 0, 2127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 87, 0, 87, 662, 0, 0, 0, 0, 0,
	0, 648, 0, 0, 649, 0, 0, 1052, 0, 1052,
	657, 0, 0, 1135, 0, 0, 0, 650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 804, 651, 658, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 0, 1153, 0, 1052, 0, 1153, 654, 0, 0,
	87, 0, 653, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 661, 0, 1052, 0, 0, 1153, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 0,
	1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1135, 1164,
	0, 0, 0, 0, 0, 0, 0, 0, 1135, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2256,
	0, 0, 0, 0, 1781, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	1053, 0, 0, 0, 0, 0, 2295, 0, 0, 1272,
	0, 1272, 0, 1272, 0, 1164, 1164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 2332, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 1153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	2346, 1164, 2348, 1412, 1413, 0, 1445, 1446, 1447, 1455,
	1456, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 2362, 0, 1415,
	87, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 1434, 1154, 0, 0, 0, 0, 0,
	1431, 0, 1053, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 1135, 0, 0, 1153, 821, 0, 0, 0,
	0, 0, 0, 0, 1153, 1153, 0, 0, 0, 0,
	1154, 0, 0, 1154, 1154, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 1438, 1439, 1440, 0,
	0, 0, 0, 1052, 0, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1154, 1154, 0, 0, 0, 0,
	979, 0, 1452, 1462, 0, 0, 1442, 1443, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 1053, 0, 0, 1458, 1459, 0,
	0, 0, 0, 0, 0, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 2562,
	0, 0, 0, 0, 979, 0, 0, 0, 0, 0,
	1436, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2597, 2256, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2632, 0, 87, 0, 2636, 0, 0, 87, 0,
	0, 0, 0, 0, 2643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423, 1424,
	1416, 1417, 1418, 1419, 1421, 1422, 0, 0, 0, 0,
	2434, 0, 0, 2435, 0, 0, 2688, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 2703, 0, 1164,
	0, 0, 0, 1415, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 1053, 2709, 0, 0, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 1154, 1154, 1154, 0, 1412, 1413, 0, 1445, 1446,
	1447, 1455, 1456, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	1053, 1415, 0, 0, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	1438, 1439, 1440, 0, 0, 0, 1968, 1414, 0, 1420,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1462, 0, 0,
	1442, 1443, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 0, 0, 1437, 1438, 1439,
	1440, 0, 0, 0, 1450, 0, 0, 1420, 0, 0,
	0, 0, 1435, 0, 0, 0, 1053, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 1452, 1462, 0, 0, 1442, 1443,
	1444, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 0, 0, 0, 0, 0, 0, 1429, 1430, 0,
	0, 1154, 0, 1053, 0, 1154, 0, 87, 0, 0,
	0, 0, 1450, 0, 0, 0, 1441, 0, 0, 0,
	1435, 0, 0, 0, 1053, 0, 0, 1154, 0, 0,
	0, 0, 2893, 0, 1436, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2903,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 2940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 1638, 1620, 1627, 1610, 1648, 1647,
	0, 0, 1612, 1611, 0, 0, 0, 0, 1053, 0,
	1658, 1659, 0, 0, 0, 0, 0, 1453, 1053, 0,
	0, 1451, 0, 0, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	0, 0, 0, 0, 2000, 0, 0, 2001, 0, 0,
	1649, 0, 1645, 1644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1643, 0, 0, 0, 0, 0,
	0, 0, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1642, 1640, 1641, 0, 0, 0, 1451,
	0, 0, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425,
	1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0,
	0, 0, 0, 0, 0, 2978, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1631, 1625, 1633,
	1635, 1636, 1637, 1632, 0, 1630, 0, 0, 0, 0,
	0, 0, 0, 0, 1654, 1655, 3046, 0, 0, 0,
	0, 0, 0, 2256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1154, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 1154, 0, 0, 0, 1614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1646, 0, 0, 0, 1623, 0, 1624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1639, 0, 0, 0, 1607, 1605,
	1606, 1609, 1608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1615, 1616, 1618, 1619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1634, 1617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1657,
	0, 3137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1613, 0, 1650,
	1651, 1652, 1653, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3171, 0, 0, 0, 0, 0, 1621, 0, 0,
	0, 0, 1628, 1656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3238, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 3272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3287, 213, 214, 215, 216, 217,
	1057, 218, 1058, 1059, 1060, 1061, 457, 1062, 1063, 1064,
	1065, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 1066, 225, 226, 227, 228, 229, 230, 1067, 1068,
	231, 462, 463, 464, 1069, 232, 465, 1070, 1055, 1071,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	1072, 242, 0, 243, 244, 245, 1073, 930, 246, 247,
	1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250,
	251, 252, 253, 466, 467, 1081, 254, 1082, 256, 255,
	1083, 257, 1084, 1085, 258, 259, 260, 1086, 261, 1087,
	262, 263, 1088, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 1089, 210, 1090, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 1091,
	280, 1092, 1093, 931, 281, 282, 1094, 283, 472, 1095,
	473, 284, 1096, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 933, 1097, 480, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 477, 298,
	297, 299, 300, 301, 478, 1099, 479, 1100, 303, 934,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 1101, 314, 313, 1102, 315, 481, 937,
	316, 317, 938, 1103, 318, 319, 1104, 1105, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 1106, 212, 940, 1107,
	482, 483, 336, 337, 1108, 338, 339, 340, 1109, 1110,
	342, 343, 344, 1111, 1112, 345, 484, 941, 346, 942,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 1113,
	354, 355, 486, 356, 487, 357, 1114, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 1115, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 1116, 380, 943, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 1117, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 1118, 407, 387, 388, 408, 944, 409, 490,
	410, 411, 1119, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 1120, 423, 424, 422, 1121,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 1122,
	492, 493, 494, 495, 1123, 1124, 432, 433, 496, 434,
	497, 1125, 435, 436, 437, 0, 438, 439, 1126, 1127,
	440, 441, 442, 443, 445, 1128, 446, 1129, 444, 447,
	448, 449, 498, 499, 500, 1130, 451, 450, 501, 1131,
	1132, 1133, 1134, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1050, 0, 0, 0, 0, 0, 0, 0, 2114,
	0, 0, 0, 0, 0, 0, 0, 2115, 213, 214,
	215, 216, 217, 1057, 218, 1058, 1059, 1060, 1061, 457,
	1062, 1063, 1064, 1065, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 1066, 225, 226, 227, 228, 229,
	230, 1067, 1068, 231, 462, 463, 464, 1069, 232, 465,
	1070, 1055, 1071, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1072, 242, 0, 243, 244, 245, 1073,
	930, 246, 247, 1074, 1075, 1077, 1076, 1078, 1079, 1080,
	248, 249, 250, 251, 252, 253, 466, 467, 1081, 254,
	1082, 256, 255, 1083, 257, 1084, 1085, 258, 259, 260,
	1086, 261, 1087, 262, 263, 1088, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 1089, 210, 1090,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 1091, 280, 1092, 1093, 931, 281, 282, 1094,
	283, 472, 1095, 473, 284, 1096, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 933, 1097, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 1098, 932,
	296, 477, 298, 297, 299, 300, 301, 478, 1099, 479,
	1100, 303, 934, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 1101, 314, 313, 1102,
	315, 481, 937, 316, 317, 938, 1103, 318, 319, 1104,
	1105, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 1106,
	212, 940, 1107, 482, 483, 336, 337, 1108, 338, 339,
	340, 1109, 1110, 342, 343, 344, 1111, 1112, 345, 484,
	941, 346, 942, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 1113, 354, 355, 486, 356, 487, 357, 1114,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 1115, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 1116, 380, 943, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 1117, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 1118, 407, 387, 388, 408,
	944, 409, 490, 410, 411, 1119, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 1120, 423,
	424, 422, 1121, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 1122, 492, 493, 494, 495, 1123, 1124, 432,
	433, 496, 434, 497, 1125, 435, 436, 437, 0, 438,
	439, 1126, 1127, 440, 441, 442, 443, 445, 1128, 446,
	1129, 444, 447, 448, 449, 498, 499, 500, 1130, 451,
	450, 501, 1131, 1132, 1133, 1134, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3004, 213, 214, 215, 216, 217, 1057, 218,
	1058, 1059, 1060, 1061, 457, 1062, 1063, 1064, 1065, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 1066,
	225, 226, 227, 228, 229, 230, 1067, 1068, 231, 462,
	463, 464, 1069, 232, 465, 1070, 1055, 1071, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 1072, 242,
	0, 243, 244, 245, 1073, 930, 246, 247, 1074, 1075,
	1077, 1076, 1078, 1079, 1080, 248, 249, 250, 251, 252,
	253, 466, 467, 1081, 254, 1082, 256, 255, 1083, 257,
	1084, 1085, 258, 259, 260, 1086, 261, 1087, 262, 263,
	1088, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 1089, 210, 1090, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 1091, 280, 1092,
	1093, 931, 281, 282, 1094, 283, 472, 1095, 473, 284,
	1096, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 933, 1097, 480, 294, 0, 0, 0, 211,
	293, 295, 302, 1098, 932, 296, 477, 298, 297, 299,
	300, 301, 478, 1099, 479, 1100, 303, 934, 935, 304,
	305, 306, 936, 307, 308, 0, 0, 309, 310, 311,
	312, 1101, 314, 313, 1102, 315, 481, 937, 316, 317,
	938, 1103, 318, 319, 1104, 1105, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 939,
	332, 333, 335, 334, 1106, 212, 940, 1107, 482, 483,
	336, 337, 1108, 338, 339, 340, 1109, 1110, 342, 343,
	344, 1111, 1112, 345, 484, 941, 346, 942, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 1113, 354, 355,
	486, 356, 487, 357, 1114, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 1115, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 1116, 380, 943, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 1117,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	1118, 407, 387, 388, 408, 944, 409, 490, 410, 411,
	1119, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 1120, 423, 424, 422, 1121, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 1122, 492, 493,
	494, 495, 1123, 1124, 432, 433, 496, 434, 497, 1125,
	435, 436, 437, 0, 438, 439, 1126, 1127, 440, 441,
	442, 443, 445, 1128, 446, 1129, 444, 447, 448, 449,
	498, 499, 500, 1130, 451, 450, 501, 1131, 1132, 1133,
	1134, 452, 453, 502, 454, 455, 456, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3106, 0, 213, 214, 215, 216, 217, 1057,
	218, 1058, 1059, 1060, 1061, 457, 1062, 1063, 1064, 1065,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	1066, 225, 226, 227, 228, 229, 230, 1067, 1068, 231,
	462, 463, 464, 1069, 232, 465, 1070, 1055, 1071, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1072,
	242, 0, 243, 244, 245, 1073, 930, 246, 247, 1074,
	1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250, 251,
	252, 253, 466, 467, 1081, 254, 1082, 256, 255, 1083,
	257, 1084, 1085, 258, 259, 260, 1086, 261, 1087, 262,
	263, 1088, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 1089, 210, 1090, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 1091, 280,
	1092, 1093, 931, 281, 282, 1094, 283, 472, 1095, 473,
	284, 1096, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 933, 1097, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 1098, 932, 296, 477, 298, 297,
	299, 300, 301, 478, 1099, 479, 1100, 303, 934, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 1101, 314, 313, 1102, 315, 481, 937, 316,
	317, 938, 1103, 318, 319, 1104, 1105, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 1106, 212, 940, 1107, 482,
	483, 336, 337, 1108, 338, 339, 340, 1109, 1110, 342,
	343, 344, 1111, 1112, 345, 484, 941, 346, 942, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 1113, 354,
	355, 486, 356, 487, 357, 1114, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 1115, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 1116, 380, 943, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	1117, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 1118, 407, 387, 388, 408, 944, 409, 490, 410,
	411, 1119, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 1120, 423, 424, 422, 1121, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 1122, 492,
	493, 494, 495, 1123, 1124, 432, 433, 496, 434, 497,
	1125, 435, 436, 437, 0, 438, 439, 1126, 1127, 440,
	441, 442, 443, 445, 1128, 446, 1129, 444, 447, 448,
	449, 498, 499, 500, 1130, 451, 450, 501, 1131, 1132,
	1133, 1134, 452, 453, 502, 454, 455, 456, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2752, 0, 213, 214, 215, 216, 217,
	1057, 218, 1058, 1059, 1060, 1061, 457, 1062, 1063, 1064,
	1065, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 1066, 225, 226, 227, 228, 229, 230, 1067, 1068,
	231, 462, 463, 464, 1069, 232, 465, 1070, 1055, 1071,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	1072, 242, 0, 243, 244, 245, 1073, 930, 246, 247,
	1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250,
	251, 252, 253, 466, 467, 1081, 254, 1082, 256, 255,
	1083, 257, 1084, 1085, 258, 259, 260, 1086, 261, 1087,
	262, 263, 1088, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 1089, 210, 1090, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 1091,
	280, 1092, 1093, 931, 281, 282, 1094, 283, 472, 1095,
	473, 284, 1096, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 933, 1097, 480, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 477, 298,
	297, 299, 300, 301, 478, 1099, 479, 1100, 303, 934,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 1101, 314, 313, 1102, 315, 481, 937,
	316, 317, 938, 1103, 318, 319, 1104, 1105, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 1106, 212, 940, 1107,
	482, 483, 336, 337, 1108, 338, 339, 340, 1109, 1110,
	342, 343, 344, 1111, 1112, 345, 484, 941, 346, 942,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 1113,
	354, 355, 486, 356, 487, 357, 1114, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 1115, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 1116, 380, 943, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 1117, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 1118, 407, 387, 388, 408, 944, 409, 490,
	410, 411, 1119, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 1120, 423, 424, 422, 1121,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 1122,
	492, 493, 494, 495, 1123, 1124, 432, 433, 496, 434,
	497, 1125, 435, 436, 437, 0, 438, 439, 1126, 1127,
	440, 441, 442, 443, 445, 1128, 446, 1129, 444, 447,
	448, 449, 498, 499, 500, 1130, 451, 450, 501, 1131,
	1132, 1133, 1134, 452, 453, 502, 454, 455, 456, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2744, 0, 213, 214, 215, 216,
	217, 1057, 218, 1058, 1059, 1060, 1061, 457, 1062, 1063,
	1064, 1065, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 1066, 225, 226, 227, 228, 229, 230, 1067,
	1068, 231, 462, 463, 464, 1069, 232, 465, 1070, 1055,
	1071, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1072, 242, 0, 243, 244, 245, 1073, 930, 246,
	247, 1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249,
	250, 251, 252, 253, 466, 467, 1081, 254, 1082, 256,
	255, 1083, 257, 1084, 1085, 258, 259, 260, 1086, 261,
	1087, 262, 263, 1088, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 1089, 210, 1090, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	1091, 280, 1092, 1093, 931, 281, 282, 1094, 283, 472,
	1095, 473, 284, 1096, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 933, 1097, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 1098, 932, 296, 477,
	298, 297, 299, 300, 301, 478, 1099, 479, 1100, 303,
	934, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 1101, 314, 313, 1102, 315, 481,
	937, 316, 317, 938, 1103, 318, 319, 1104, 1105, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 1106, 212, 940,
	1107, 482, 483, 336, 337, 1108, 338, 339, 340, 1109,
	1110, 342, 343, 344, 1111, 1112, 345, 484, 941, 346,
	942, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	1113, 354, 355, 486, 356, 487, 357, 1114, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 1115,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 1116, 380, 943, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 1117, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 1118, 407, 387, 388, 408, 944, 409,
	490, 410, 411, 1119, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 1120, 423, 424, 422,
	1121, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	1122, 492, 493, 494, 495, 1123, 1124, 432, 433, 496,
	434, 497, 1125, 435, 436, 437, 0, 438, 439, 1126,
	1127, 440, 441, 442, 443, 445, 1128, 446, 1129, 444,
	447, 448, 449, 498, 499, 500, 1130, 451, 450, 501,
	1131, 1132, 1133, 1134, 452, 453, 502, 454, 455, 456,
	1050, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2618, 0, 213, 214, 215,
	216, 217, 1057, 218, 1058, 1059, 1060, 1061, 457, 1062,
	1063, 1064, 1065, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 1066, 225, 226, 227, 228, 229, 230,
	1067, 1068, 231, 462, 463, 464, 1069, 232, 465, 1070,
	1055, 1071, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 1072, 242, 0, 243, 244, 245, 1073, 930,
	246, 247, 1074, 1075, 1077, 1076, 1078, 1079, 1080, 248,
	249, 250, 251, 252, 253, 466, 467, 1081, 254, 1082,
	256, 255, 1083, 257, 1084, 1085, 258, 259, 260, 1086,
	261, 1087, 262, 263, 1088, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 1089, 210, 1090, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 1091, 280, 1092, 1093, 931, 281, 282, 1094, 283,
	472, 1095, 473, 284, 1096, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 933, 1097, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 1098, 932, 296,
	477, 298, 297, 299, 300, 301, 478, 1099, 479, 1100,
	303, 934, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 1101, 314, 313, 1102, 315,
	481, 937, 316, 317, 938, 1103, 318, 319, 1104, 1105,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 1106, 212,
	940, 1107, 482, 483, 336, 337, 1108, 338, 339, 340,
	1109, 1110, 342, 343, 344, 1111, 1112, 345, 484, 941,
	346, 942, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 1113, 354, 355, 486, 356, 487, 357, 1114, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	1115, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 1116, 380, 943, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 1117, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 1118, 407, 387, 388, 408, 944,
	409, 490, 410, 411, 1119, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 1120, 423, 424,
	422, 1121, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 1122, 492, 493, 494, 495, 1123, 1124, 432, 433,
	496, 434, 497, 1125, 435, 436, 437, 0, 438, 439,
	1126, 1127, 440, 441, 442, 443, 445, 1128, 446, 1129,
	444, 447, 448, 449, 498, 499, 500, 1130, 451, 450,
	501, 1131, 1132, 1133, 1134, 452, 453, 502, 454, 455,
	456, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2013, 0, 213, 214,
	215, 216, 217, 1057, 218, 1058, 1059, 1060, 1061, 457,
	1062, 1063, 1064, 1065, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 1066, 225, 226, 227, 228, 229,
	230, 1067, 1068, 231, 462, 463, 464, 1069, 232, 465,
	1070, 1055, 1071, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1072, 242, 0, 243, 244, 245, 1073,
	930, 246, 247, 1074, 1075, 1077, 1076, 1078, 1079, 1080,
	248, 249, 250, 251, 252, 253, 466, 467, 1081, 254,
	1082, 256, 255, 1083, 257, 1084, 1085, 258, 259, 260,
	1086, 261, 1087, 262, 263, 1088, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 1089, 210, 1090,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 1091, 280, 1092, 1093, 931, 281, 282, 1094,
	283, 472, 1095, 473, 284, 1096, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 933, 1097, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 1098, 932,
	296, 477, 298, 297, 299, 300, 301, 478, 1099, 479,
	1100, 303, 934, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 1101, 314, 313, 1102,
	315, 481, 937, 316, 317, 938, 1103, 318, 319, 1104,
	1105, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 1106,
	212, 940, 1107, 482, 483, 336, 337, 1108, 338, 339,
	340, 1109, 1110, 342, 343, 344, 1111, 1112, 345, 484,
	941, 346, 942, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 1113, 354, 355, 486, 356, 487, 357, 1114,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 1115, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 1116, 380, 943, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 1117, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 1118, 407, 387, 388, 408,
	944, 409, 490, 410, 411, 1119, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 1120, 423,
	424, 422, 1121, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 1122, 492, 493, 494, 495, 1123, 1124, 432,
	433, 496, 434, 497, 1125, 435, 436, 437, 0, 438,
	439, 1126, 1127, 440, 441, 442, 443, 445, 1128, 446,
	1129, 444, 447, 448, 449, 498, 499, 500, 1130, 451,
	450, 501, 1131, 1132, 1133, 1134, 452, 453, 502, 454,
	455, 456, 1158, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1752, 0, 0,
	0, 213, 214, 215, 216, 217, 1057, 218, 1058, 1059,
	1060, 1061, 457, 1062, 1063, 1064, 1065, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 1066, 225, 226,
	227, 228, 229, 230, 1067, 1068, 231, 462, 463, 464,
	1069, 232, 465, 1070, 1055, 1071, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 1072, 242, 0, 243,
	244, 245, 1073, 930, 246, 247, 1074, 1075, 1077, 1076,
	1078, 1079, 1080, 248, 249, 250, 251, 252, 253, 466,
	467, 1081, 254, 1082, 256, 255, 1083, 257, 1084, 1085,
	258, 259, 260, 1086, 261, 1087, 262, 263, 1088, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	1089, 210, 1090, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 1091, 280, 1092, 1093, 931,
	281, 282, 1094, 283, 472, 1095, 473, 284, 1096, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	933, 1097, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 1098, 932, 296, 477, 298, 297, 299, 300, 301,
	478, 1099, 479, 1100, 303, 934, 935, 304, 305, 306,
	936, 307, 308, 0, 0, 309, 310, 311, 312, 1101,
	314, 313, 1102, 315, 481, 937, 316, 317, 938, 1103,
	318, 319, 1104, 1105, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 939, 332, 333,
	335, 334, 1106, 212, 940, 1107, 482, 483, 336, 337,
	1108, 338, 339, 340, 1109, 1110, 342, 343, 344, 1111,
	1112, 345, 484, 941, 346, 942, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 1113, 354, 355, 486, 356,
	487, 357, 1114, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 1115, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 1116,
	380, 943, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 1117, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 1118, 407,
	387, 388, 408, 944, 409, 490, 410, 411, 1119, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 1120, 423, 424, 422, 1121, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 1122, 492, 493, 494, 495,
	1123, 1124, 432, 433, 496, 434, 497, 1125, 435, 436,
	437, 0, 438, 439, 1126, 1127, 440, 441, 442, 443,
	445, 1128, 446, 1129, 444, 447, 448, 449, 498, 499,
	500, 1130, 451, 450, 501, 1131, 1132, 1133, 1134, 452,
	453, 502, 454, 455, 456, 1047, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 1057,
	218, 1058, 1059, 1060, 1061, 457, 1062, 1063, 1064, 1065,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	1066, 225, 226, 227, 228, 229, 230, 1067, 1068, 231,
	462, 463, 464, 1069, 232, 465, 1070, 1055, 1071, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1072,
	242, 0, 243, 244, 245, 1073, 930, 246, 247, 1074,
	1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250, 251,
	252, 253, 466, 467, 1081, 254, 1082, 256, 255, 1083,
	257, 1084, 1085, 258, 259, 260, 1086, 261, 1087, 262,
	263, 1088, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 1089, 210, 1090, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 1091, 280,
	1092, 1093, 931, 281, 282, 1094, 283, 472, 1095, 473,
	284, 1096, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 933, 1097, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 1098, 932, 296, 477, 298, 297,
	299, 300, 301, 478, 1099, 479, 1100, 303, 934, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 1101, 314, 313, 1102, 315, 481, 937, 316,
	317, 938, 1103, 318, 319, 1104, 1105, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 1106, 212, 940, 1107, 482,
	483, 336, 337, 1108, 338, 339, 340, 1109, 1110, 342,
	343, 344, 1111, 1112, 345, 484, 941, 346, 942, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 1113, 354,
	355, 486, 356, 487, 357, 1114, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 1115, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 1116, 380, 943, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	1117, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 1118, 407, 387, 388, 408, 944, 409, 490, 410,
	411, 1119, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 1120, 423, 424, 422, 1121, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 1122, 492,
	493, 494, 495, 1123, 1124, 432, 433, 496, 434, 497,
	1125, 435, 436, 437, 0, 438, 439, 1126, 1127, 440,
	441, 442, 443, 445, 1128, 446, 1129, 444, 447, 448,
	449, 498, 499, 500, 1130, 451, 450, 501, 1131, 1132,
	1133, 1134, 452, 453, 502, 454, 455, 456, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	1057, 218, 1058, 1059, 1060, 1061, 457, 1062, 1063, 1064,
	1065, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 1066, 225, 226, 227, 228, 229, 230, 1067, 1068,
	231, 462, 463, 464, 1069, 232, 465, 1070, 1055, 1071,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	1072, 242, 0, 243, 244, 245, 1073, 930, 246, 247,
	1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250,
	251, 252, 253, 466, 467, 1081, 254, 1082, 256, 255,
	1083, 257, 1084, 1085, 258, 259, 260, 1086, 261, 1087,
	262, 263, 1088, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 1089, 210, 1090, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 1091,
	280, 1092, 1093, 931, 281, 282, 1094, 283, 472, 1095,
	473, 284, 1096, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 933, 1097, 480, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 477, 298,
	297, 299, 300, 301, 478, 1099, 479, 1100, 303, 934,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 1101, 314, 313, 1102, 315, 481, 937,
	316, 317, 938, 1103, 318, 319, 1104, 1105, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 1106, 212, 940, 1107,
	482, 483, 336, 337, 1108, 338, 339, 340, 1109, 1110,
	342, 343, 344, 1111, 1112, 345, 484, 941, 346, 942,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 1113,
	354, 355, 486, 356, 487, 357, 1114, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 1115, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 1116, 380, 943, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 1117, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 1118, 407, 387, 388, 408, 944, 409, 490,
	410, 411, 1119, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 1120, 423, 424, 422, 1121,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 1122,
	492, 493, 494, 495, 1123, 1124, 432, 433, 496, 434,
	497, 1125, 435, 436, 437, 0, 438, 439, 1126, 1127,
	440, 441, 442, 443, 445, 1128, 446, 1129, 444, 447,
	448, 449, 498, 499, 500, 1130, 451, 450, 501, 1131,
	1132, 1133, 1134, 452, 453, 502, 454, 455, 456, 1989,
	0, 872, 829, 830, 831, 827, 828, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 1986, 218, 0, 0, 0, 0, 921,
	846, 0, 0, 0, 219, 220, 221, 458, 887, 866,
	898, 856, 897, 896, 0, 225, 858, 857, 228, 229,
	230, 848, 920, 231, 956, 957, 464, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 901, 253, 894, 893, 818, 254,
	0, 256, 255, 0, 257, 1987, 0, 258, 892, 260,
	0, 261, 0, 262, 263, 0, 824, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 837, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 891, 889, 890,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 954, 0, 847, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 922, 923, 926, 933, 0, 924,
	868, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 880, 871, 882, 884, 885, 886, 881, 0, 873,
	0, 303, 934, 935, 304, 305, 306, 936, 906, 907,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 860, 329, 939, 332, 333, 335, 334, 815,
	212, 940, 838, 925, 895, 336, 337, 0, 869, 339,
	870, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 888, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 825, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 861, 862, 864,
	865, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 883, 863, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 929, 416, 417, 418, 951, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 859, 0, 902, 903, 904, 905, 0, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 438,
	439, 0, 819, 440, 441, 442, 443, 445, 919, 446,
	0, 867, 447, 448, 449, 498, 899, 946, 1985, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 1988, 0, 0,
	0, 0, 0, 0, 842, 1984, 0, 0, 805, 840,
	872, 829, 830, 831, 827, 828, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 458, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 464, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 922, 923, 926, 933, 0, 924, 868,
	0, 0, 0, 211, 293, 295, 302, 0, 932, 296,
	880, 871, 882, 884, 885, 886, 881, 0, 873, 0,
	303, 934, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 0, 432, 433,
	952, 434, 953, 836, 435, 436, 437, 0, 438, 439,
	0, 819, 440, 441, 442, 443, 445, 919, 446, 0,
	867, 447, 448, 449, 1297, 899, 946, 0, 451, 450,
	501, 0, 0, 0, 170, 452, 453, 502, 454, 455,
	456, 816, 171, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 812, 813, 872, 829, 830, 831,
	827, 828, 841, 1489, 1487, 0, 0, 0, 840, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 921, 846, 0, 0, 0, 219,
	220, 221, 458, 887, 866, 898, 856, 897, 896, 0,
	225, 858, 857, 228, 229, 230, 848, 920, 231, 956,
	957, 464, 0, 232, 927, 0, 910, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 913, 911,
	912, 917, 915, 914, 916, 248, 249, 250, 251, 901,
	253, 894, 893, 818, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 892, 260, 0, 261, 0, 262, 263,
	0, 824, 264, 265, 267, 270, 266, 271, 272, 273,
	947, 948, 837, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 891, 889, 890, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 954, 0, 847, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 922,
	923, 926, 933, 0, 924, 868, 0, 0, 0, 211,
	293, 295, 302, 0, 932, 296, 880, 871, 882, 884,
	885, 886, 881, 0, 873, 0, 303, 934, 935, 304,
	305, 306, 936, 906, 907, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 955, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 860, 329, 939,
	332, 333, 335, 334, 815, 212, 940, 838, 925, 895,
	336, 337, 0, 869, 339, 870, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 941, 346, 942, 949, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	950, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 888, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 825, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 176,
	403, 404, 861, 862, 864, 865, 398, 402, 405, 406,
	918, 407, 387, 388, 408, 944, 409, 883, 863, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 929, 416,
	417, 418, 951, 0, 423, 424, 422, 178, 425, 426,
	427, 428, 429, 268, 430, 269, 859, 0, 902, 903,
	904, 905, 0, 0, 432, 433, 952, 434, 953, 836,
	435, 436, 437, 0, 438, 439, 0, 819, 440, 441,
	442, 443, 445, 919, 446, 0, 867, 447, 448, 449,
	1297, 899, 946, 0, 451, 450, 501, 0, 0, 0,
	170, 452, 453, 502, 454, 455, 456, 816, 171, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	812, 813, 872, 829, 830, 831, 827, 828, 841, 1489,
	2384, 0, 0, 0, 840, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	921, 846, 0, 0, 0, 219, 220, 221, 458, 887,
	866, 898, 856, 897, 896, 0, 225, 858, 857, 228,
	229, 230, 848, 920, 231, 956, 957, 464, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 901, 253, 894, 893, 818,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 892,
	260, 0, 261, 0, 262, 263, 0, 824, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 837, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 891, 889,
	890, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 847, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 922, 923, 926, 933, 0,
	924, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 935, 304, 305, 306, 936, 906,
	907, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 860, 329, 939, 332, 333, 335, 334,
	815, 212, 940, 838, 925, 895, 336, 337, 0, 869,
	339, 870, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 888,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 825, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 176, 403, 404, 861, 862,
	864, 865, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 883, 863, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 929, 416, 417, 418, 951, 0,
	423, 424, 422, 178, 425, 426, 427, 428, 429, 268,
	430, 269, 859, 0, 902, 903, 904, 905, 0, 0,
	432, 433, 952, 434, 953, 836, 435, 436, 437, 0,
	438, 439, 0, 819, 440, 441, 442, 443, 445, 919,
	446, 0, 867, 447, 448, 449, 1297, 899, 946, 0,
	451, 450, 501, 0, 0, 0, 170, 452, 453, 502,
	454, 455, 456, 816, 171, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 812, 813, 872, 829,
	830, 831, 827, 828, 841, 1489, 1487, 0, 0, 0,
	840, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 921, 846, 0, 0,
	0, 219, 220, 221, 458, 887, 866, 898, 856, 897,
	896, 2073, 225, 858, 857, 228, 229, 230, 848, 920,
	231, 956, 957, 464, 0, 232, 927, 0, 910, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 247,
	913, 911, 912, 917, 915, 914, 916, 248, 249, 250,
	251, 901, 253, 894, 893, 818, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 892, 260, 0, 261, 0,
	262, 263, 0, 824, 264, 265, 267, 270, 266, 271,
	272, 273, 947, 948, 837, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 891, 889, 890, 0, 279, 0,
	280, 0, 2078, 931, 281, 282, 0, 283, 954, 0,
	847, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 922, 923, 926, 933, 0, 924, 868, 0, 0,
	0, 211, 293, 295, 302, 0, 932, 296, 880, 871,
	882, 884, 885, 886, 881, 0, 873, 0, 303, 934,
	935, 304, 305, 306, 936, 906, 907, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 2074, 315, 955, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 860,
	329, 939, 332, 333, 335, 334, 815, 212, 940, 838,
	925, 895, 336, 337, 0, 869, 339, 870, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 941, 346, 942,
	949, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 950, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 888, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	825, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 861, 862, 864, 865, 398, 402,
	405, 406, 918, 407, 387, 388, 408, 944, 409, 883,
	863, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	929, 416, 417, 418, 951, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 859, 0,
	902, 903, 904, 905, 0, 2075, 432, 433, 952, 434,
	953, 836, 435, 436, 437, 0, 438, 439, 0, 819,
	440, 441, 442, 443, 445, 919, 446, 0, 867, 447,
	448, 449, 498, 899, 946, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 816,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 812, 813, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 808, 840, 872, 829, 830,
	831, 827, 828, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 921, 846, 0, 0, 0,
	219, 220, 221, 458, 887, 866, 898, 856, 897, 896,
	0, 225, 858, 857, 228, 229, 230, 848, 920, 231,
	956, 957, 464, 0, 232, 927, 0, 910, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 913,
	911, 912, 917, 915, 914, 916, 248, 249, 250, 251,
	901, 253, 894, 893, 818, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 892, 260, 0, 261, 0, 262,
	263, 0, 824, 264, 265, 267, 270, 266, 271, 272,
	273, 947, 948, 837, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 891, 889, 890, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 954, 0, 847,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	922, 923, 926, 933, 0, 924, 868, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 880, 871, 882,
	884, 885, 886, 881, 0, 873, 0, 303, 934, 935,
	304, 305, 306, 936, 906, 907, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 955, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 860, 329,
	939, 332, 333, 335, 334, 815, 212, 940, 838, 925,
	895, 336, 337, 0, 869, 339, 870, 820, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 949,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 950, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 888, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 825,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 861, 862, 864, 865, 398, 402, 405,
	406, 918, 407, 387, 388, 408, 944, 409, 883, 863,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 929,
	416, 417, 418, 951, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 859, 0, 902,
	903, 904, 905, 0, 0, 432, 433, 952, 434, 953,
	836, 435, 436, 437, 0, 438, 439, 0, 819, 440,
	441, 442, 443, 445, 919, 446, 0, 867, 447, 448,
	449, 498, 899, 946, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 816, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 812, 813, 872, 829, 830, 831, 827, 828, 841,
	842, 0, 0, 0, 0, 840, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 458,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 464, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 3284,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 922, 923, 926, 933,
	0, 924, 868, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 880, 871, 882, 884, 885, 886, 881,
	0, 873, 0, 303, 934, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 820, 0, 342, 343, 344, 0, 0,
	345, 484, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	0, 432, 433, 952, 434, 953, 836, 435, 436, 437,
	0, 438, 439, 0, 819, 440, 441, 442, 443, 445,
	919, 446, 0, 867, 447, 448, 449, 498, 899, 946,
	0, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 816, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 812, 813, 872,
	829, 830, 831, 827, 828, 841, 842, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 921, 846, 0,
	0, 0, 219, 220, 221, 458, 887, 866, 898, 856,
	897, 896, 0, 225, 858, 857, 228, 229, 230, 848,
	920, 231, 956, 957, 464, 0, 232, 927, 0, 910,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 3160, 245, 0, 930, 246,
	247, 913, 911, 912, 917, 915, 914, 916, 248, 249,
	250, 251, 901, 253, 894, 893, 818, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 892, 260, 0, 261,
	0, 262, 263, 0, 824, 264, 265, 267, 270, 266,
	271, 272, 273, 947, 948, 837, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 891, 889, 890, 0, 279,
	0, 280, 0, 0, 931, 281, 282, 0, 283, 954,
	0, 847, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 922, 923, 926, 933, 0, 924, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 935, 304, 305, 306, 936, 906, 907, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 955,
	937, 316, 317, 938, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	860, 329, 939, 332, 333, 335, 334, 815, 212, 940,
	838, 925, 895, 336, 337, 0, 869, 339, 870, 820,
	0, 342, 343, 344, 0, 0, 345, 484, 941, 346,
	942, 949, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 950, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 888, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 943, 381, 382, 383,
	384, 825, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 861, 862, 864, 865, 398,
	402, 405, 406, 918, 407, 387, 388, 408, 944, 409,
	883, 863, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 929, 416, 417, 418, 951, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 859,
	0, 902, 903, 904, 905, 0, 0, 432, 433, 952,
	434, 953, 836, 435, 436, 437, 0, 438, 439, 0,
	819, 440, 441, 442, 443, 445, 919, 446, 0, 867,
	447, 448, 449, 498, 899, 946, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	816, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 0, 0, 812, 813, 872, 829, 830, 831, 827,
	828, 841, 842, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 846, 0, 0, 0, 219, 220,
	221, 458, 887, 866, 898, 856, 897, 896, 0, 225,
	858, 857, 228, 229, 230, 848, 920, 231, 956, 957,
	464, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 901, 253,
	894, 893, 818, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 892, 260, 0, 261, 0, 262, 263, 0,
	824, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 837, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 891, 889, 890, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 847, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 922, 923,
	926, 933, 0, 924, 868, 0, 0, 0, 211, 293,
	295, 302, 0, 932, 296, 880, 871, 882, 884, 885,
	886, 881, 0, 873, 0, 303, 934, 935, 304, 305,
	306, 936, 906, 907, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 860, 329, 939, 332,
	333, 335, 334, 815, 2914, 940, 838, 925, 895, 336,
	337, 0, 869, 339, 870, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 888, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 825, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 861, 862, 864, 865, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 883, 863, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 929, 416, 417,
	418, 951, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 859, 0, 902, 903, 904,
	905, 0, 0, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 438, 439, 0, 819, 440, 441, 442,
	443, 445, 919, 446, 0, 867, 447, 448, 449, 498,
	899, 946, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 1549, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 840, 872, 829, 830, 831, 827, 828,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 846, 0, 0, 0, 219, 220, 221,
	458, 887, 866, 898, 856, 897, 896, 0, 225, 858,
	857, 228, 229, 230, 848, 920, 231, 956, 957, 464,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 901, 253, 894,
	893, 818, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 892, 260, 0, 261, 0, 262, 263, 0, 824,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	837, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	891, 889, 890, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 954, 0, 847, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 922, 923, 926,
	933, 0, 924, 868, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 880, 871, 882, 884, 885, 886,
	881, 0, 873, 0, 303, 934, 935, 304, 305, 306,
	936, 906, 907, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 860, 329, 939, 332, 333,
	335, 334, 815, 212, 940, 838, 925, 895, 336, 337,
	0, 869, 339, 870, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 888, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 825, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	861, 862, 864, 865, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 883, 863, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 929, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 859, 0, 902, 903, 904, 905,
	0, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 438, 439, 0, 819, 440, 441, 442, 443,
	445, 919, 446, 0, 867, 447, 448, 449, 498, 899,
	946, 2731, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	872, 829, 830, 831, 827, 828, 841, 842, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 458, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 464, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 922, 923, 926, 933, 0, 924, 868,
	0, 0, 0, 1903, 293, 295, 302, 0, 932, 296,
	880, 871, 882, 884, 885, 886, 881, 0, 873, 0,
	303, 934, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 487, 357, 1902, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 0, 432, 433,
	952, 434, 953, 836, 435, 436, 437, 0, 438, 439,
	0, 819, 440, 441, 442, 443, 445, 919, 446, 0,
	867, 447, 448, 449, 498, 899, 946, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 816, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 812, 813, 872, 829, 830, 831,
	827, 828, 841, 842, 0, 0, 0, 0, 840, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 921, 846, 0, 0, 0, 219,
	220, 221, 458, 887, 866, 898, 856, 897, 896, 0,
	225, 858, 857, 228, 229, 230, 848, 920, 231, 956,
	957, 464, 0, 232, 927, 0, 910, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 913, 911,
	912, 917, 915, 914, 916, 248, 249, 250, 251, 901,
	253, 894, 893, 818, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 892, 260, 0, 261, 0, 262, 263,
	0, 824, 264, 265, 267, 270, 266, 271, 272, 273,
	947, 948, 837, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 891, 889, 890, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 954, 0, 847, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 922,
	923, 926, 933, 0, 924, 868, 0, 0, 0, 211,
	293, 295, 302, 0, 932, 296, 880, 871, 882, 884,
	885, 886, 881, 0, 873, 0, 303, 934, 935, 304,
	305, 306, 936, 906, 907, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 955, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 860, 329, 939,
	332, 333, 335, 334, 815, 212, 940, 838, 925, 895,
	336, 337, 0, 869, 339, 870, 820, 0, 342, 343,
	344, 0, 0, 345, 484, 941, 346, 942, 949, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	950, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 888, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 825, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 861, 862, 864, 865, 398, 402, 405, 406,
	918, 407, 387, 388, 408, 944, 409, 883, 863, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 929, 416,
	417, 418, 951, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 859, 0, 902, 903,
	904, 905, 0, 0, 432, 433, 952, 434, 953, 836,
	435, 436, 437, 0, 438, 439, 0, 819, 440, 441,
	442, 443, 445, 919, 446, 0, 867, 447, 448, 449,
	498, 899, 946, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 816, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	812, 813, 872, 829, 830, 831, 827, 828, 841, 842,
	0, 0, 0, 0, 840, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	921, 846, 0, 0, 0, 219, 220, 221, 458, 887,
	866, 898, 856, 897, 896, 0, 225, 858, 857, 228,
	229, 230, 848, 920, 231, 956, 957, 464, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 901, 253, 894, 893, 818,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 892,
	260, 0, 261, 0, 262, 263, 0, 824, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 837, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 891, 889,
	890, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 847, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 922, 923, 926, 933, 0,
	924, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 935, 304, 305, 306, 936, 906,
	907, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 860, 329, 939, 332, 333, 335, 334,
	815, 212, 940, 838, 925, 895, 336, 337, 0, 869,
	339, 870, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 888,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 825, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 861, 862,
	864, 865, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 883, 863, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 929, 416, 417, 418, 951, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 859, 0, 902, 903, 904, 905, 0, 0,
	432, 433, 952, 434, 953, 836, 435, 436, 437, 0,
	438, 439, 0, 819, 440, 441, 442, 443, 445, 919,
	446, 0, 867, 447, 448, 449, 498, 899, 946, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 816, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 812, 813, 1549, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	840, 872, 829, 830, 831, 827, 828, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 921,
	846, 0, 0, 0, 219, 220, 221, 458, 887, 866,
	898, 856, 897, 896, 0, 225, 858, 857, 228, 229,
	230, 848, 920, 231, 956, 957, 464, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 901, 253, 894, 893, 818, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 892, 260,
	0, 261, 0, 262, 263, 0, 824, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 837, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 891, 889, 890,
	0, 279, 0, 280, 0, 2078, 931, 281, 282, 0,
	283, 954, 0, 847, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 922, 923, 926, 933, 0, 924,
	868, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 880, 871, 882, 884, 885, 886, 881, 0, 873,
	0, 303, 934, 935, 304, 305, 306, 936, 906, 907,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 860, 329, 939, 332, 333, 335, 334, 815,
	212, 940, 838, 925, 895, 336, 337, 0, 869, 339,
	870, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 888, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 825, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 861, 862, 864,
	865, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 883, 863, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 929, 416, 417, 418, 951, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 859, 0, 902, 903, 904, 905, 0, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 438,
	439, 0, 819, 440, 441, 442, 443, 445, 919, 446,
	0, 867, 447, 448, 449, 498, 899, 946, 0, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 872, 829, 830,
	831, 827, 828, 841, 842, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 921, 846, 0, 0, 0,
	219, 220, 221, 458, 887, 866, 898, 856, 897, 896,
	0, 225, 858, 857, 228, 229, 230, 848, 920, 231,
	956, 957, 464, 0, 232, 927, 0, 910, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 913,
	911, 912, 917, 915, 914, 916, 248, 249, 250, 251,
	901, 253, 894, 893, 818, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 892, 260, 0, 261, 0, 262,
	263, 0, 824, 264, 265, 267, 270, 266, 271, 272,
	273, 947, 948, 837, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 891, 889, 890, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 954, 0, 847,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	922, 923, 926, 933, 0, 924, 868, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 880, 871, 882,
	884, 885, 886, 881, 0, 873, 0, 303, 934, 935,
	304, 305, 306, 936, 906, 907, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 955, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 860, 329,
	939, 332, 333, 335, 334, 815, 212, 940, 838, 925,
	895, 336, 337, 0, 869, 339, 870, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 949,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 950, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 888, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 825,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 861, 862, 864, 865, 398, 402, 405,
	406, 918, 407, 387, 388, 408, 944, 409, 883, 863,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 929,
	416, 417, 418, 951, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 859, 0, 902,
	903, 904, 905, 0, 0, 432, 433, 952, 434, 953,
	836, 435, 436, 437, 0, 438, 439, 0, 819, 440,
	441, 442, 443, 445, 919, 446, 0, 867, 447, 448,
	449, 498, 899, 946, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 816, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 812, 813, 0, 0, 0, 0, 0, 0, 0,
	842, 1487, 0, 0, 2083, 840, 872, 829, 830, 831,
	827, 828, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 921, 846, 0, 0, 0, 219,
	220, 221, 458, 887, 866, 898, 856, 897, 896, 0,
	225, 858, 857, 228, 229, 230, 848, 920, 231, 956,
	957, 464, 0, 232, 927, 0, 910, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 913, 911,
	912, 917, 915, 914, 916, 248, 249, 250, 251, 901,
	253, 894, 893, 818, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 892, 260, 0, 261, 0, 262, 263,
	0, 824, 264, 265, 267, 270, 266, 271, 272, 273,
	947, 948, 837, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 891, 889, 890, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 954, 0, 847, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 922,
	923, 926, 933, 0, 924, 868, 0, 0, 0, 211,
	293, 295, 302, 0, 932, 296, 880, 871, 882, 884,
	885, 886, 881, 0, 873, 0, 303, 934, 935, 304,
	305, 306, 936, 906, 907, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 955, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 860, 329, 939,
	332, 333, 335, 334, 815, 212, 940, 838, 925, 895,
	336, 337, 0, 869, 339, 870, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 941, 346, 942, 949, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	950, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 888, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 825, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 861, 862, 864, 865, 398, 402, 405, 406,
	918, 407, 387, 388, 408, 944, 409, 883, 863, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 929, 416,
	417, 418, 951, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 859, 0, 902, 903,
	904, 905, 0, 0, 432, 433, 952, 434, 953, 836,
	435, 436, 437, 0, 438, 439, 0, 819, 440, 441,
	442, 443, 445, 919, 446, 0, 867, 447, 448, 449,
	498, 899, 946, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 816, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	812, 813, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 2081, 840, 872, 829, 830, 831, 827,
	828, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 846, 0, 0, 0, 219, 220,
	221, 458, 887, 866, 898, 856, 897, 896, 0, 225,
	858, 857, 228, 229, 230, 848, 920, 231, 956, 957,
	464, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 901, 253,
	894, 893, 818, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 892, 260, 0, 261, 0, 262, 263, 0,
	824, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 837, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 891, 889, 890, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 847, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 922, 923,
	926, 933, 0, 924, 868, 0, 0, 0, 211, 293,
	295, 302, 0, 932, 296, 880, 871, 882, 884, 885,
	886, 881, 0, 873, 0, 303, 934, 935, 304, 305,
	306, 936, 906, 907, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 860, 329, 939, 332,
	333, 335, 334, 815, 212, 940, 838, 925, 895, 336,
	337, 0, 869, 339, 870, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 888, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 825, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 861, 862, 864, 865, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 883, 863, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 929, 416, 417,
	418, 951, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 859, 0, 902, 903, 904,
	905, 0, 0, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 438, 439, 0, 819, 440, 441, 442,
	443, 445, 919, 446, 0, 867, 447, 448, 449, 498,
	899, 946, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 2069, 840, 872, 829, 830, 831, 827, 828,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 846, 0, 0, 0, 219, 220, 221,
	458, 887, 866, 898, 856, 897, 896, 0, 225, 858,
	857, 228, 229, 230, 848, 920, 231, 956, 957, 464,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 901, 253, 894,
	893, 818, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 892, 260, 0, 261, 0, 262, 263, 0, 824,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	837, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	891, 889, 890, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 954, 0, 847, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 922, 923, 926,
	933, 0, 924, 868, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 880, 871, 882, 884, 885, 886,
	881, 0, 873, 0, 303, 934, 935, 304, 305, 306,
	936, 906, 907, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 860, 329, 939, 332, 333,
	335, 334, 815, 212, 940, 838, 925, 895, 336, 337,
	0, 869, 339, 870, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 888, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 825, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	861, 862, 864, 865, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 883, 863, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 929, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 859, 0, 902, 903, 904, 905,
	0, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 438, 439, 0, 819, 440, 441, 442, 443,
	445, 919, 446, 0, 867, 447, 448, 449, 498, 899,
	946, 0, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 2058, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 458,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 464, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 922, 923, 926, 933,
	0, 924, 868, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 880, 871, 882, 884, 885, 886, 881,
	0, 873, 0, 303, 934, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	0, 432, 433, 952, 434, 953, 836, 435, 436, 437,
	0, 438, 439, 0, 819, 440, 441, 442, 443, 445,
	919, 446, 0, 867, 447, 448, 449, 498, 899, 946,
	0, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 816, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 812, 813, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	2056, 840, 2048, 829, 830, 831, 827, 828, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	921, 846, 0, 0, 0, 219, 220, 221, 458, 887,
	866, 898, 856, 897, 896, 0, 225, 858, 857, 228,
	229, 230, 848, 920, 231, 956, 957, 464, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 901, 2051, 894, 893, 818,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 892,
	260, 0, 261, 0, 262, 263, 0, 824, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 837, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 891, 889,
	890, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 847, 284, 0, 285, 286, 287,
	2052, 289, 290, 291, 292, 922, 923, 926, 933, 0,
	924, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 935, 304, 305, 306, 936, 906,
	907, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	2053, 2050, 330, 860, 329, 939, 332, 333, 335, 334,
	815, 212, 940, 838, 925, 895, 336, 337, 0, 869,
	339, 870, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 888,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 825, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 2054, 0, 403, 404, 861, 862,
	864, 865, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 883, 863, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 929, 416, 417, 418, 951, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 859, 0, 902, 903, 904, 905, 0, 0,
	432, 433, 952, 434, 953, 836, 435, 436, 437, 0,
	438, 439, 0, 819, 440, 441, 442, 443, 445, 919,
	446, 0, 867, 447, 448, 449, 498, 899, 946, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 2049, 456, 816, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 812, 813, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 2045,
	840, 2048, 829, 830, 831, 827, 828, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 921,
	846, 0, 0, 0, 219, 220, 221, 458, 887, 866,
	898, 856, 897, 896, 0, 225, 858, 857, 228, 229,
	230, 848, 920, 231, 956, 957, 464, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 901, 2051, 894, 893, 818, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 892, 260,
	0, 261, 0, 262, 263, 0, 824, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 837, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 891, 889, 890,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 954, 0, 847, 284, 0, 285, 286, 287, 2052,
	289, 290, 291, 292, 922, 923, 926, 933, 0, 924,
	868, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 880, 871, 882, 884, 885, 886, 881, 0, 873,
	0, 303, 934, 935, 304, 305, 306, 936, 906, 907,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 2053,
	2050, 330, 860, 329, 939, 332, 333, 335, 334, 815,
	212, 940, 838, 925, 895, 336, 337, 0, 869, 339,
	870, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 888, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 825, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 2054, 0, 403, 404, 861, 862, 864,
	865, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 883, 863, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 929, 416, 417, 418, 951, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 859, 0, 902, 903, 904, 905, 0, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 438,
	439, 0, 819, 440, 441, 442, 443, 445, 919, 446,
	0, 867, 447, 448, 449, 498, 899, 946, 0, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	2049, 456, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 872, 829, 830,
	831, 827, 828, 841, 842, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 921, 846, 0, 0, 0,
	219, 220, 221, 458, 887, 866, 898, 856, 897, 896,
	0, 225, 858, 857, 228, 229, 230, 848, 920, 231,
	956, 957, 464, 0, 232, 927, 0, 910, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 913,
	911, 912, 917, 915, 914, 916, 248, 249, 250, 251,
	901, 253, 894, 893, 818, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 892, 260, 0, 261, 0, 262,
	263, 0, 824, 264, 265, 267, 270, 266, 271, 272,
	273, 947, 948, 837, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 891, 889, 890, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 954, 0, 847,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	922, 923, 926, 933, 0, 924, 868, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 880, 871, 882,
	884, 885, 886, 881, 0, 873, 0, 303, 934, 935,
	304, 305, 306, 936, 906, 907, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 955, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 860, 329,
	939, 332, 333, 335, 334, 815, 212, 940, 838, 925,
	895, 336, 337, 0, 869, 339, 870, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 949,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 950, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 888, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 825,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 861, 862, 864, 865, 398, 402, 405,
	406, 918, 407, 387, 388, 408, 944, 409, 883, 863,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 929,
	416, 417, 418, 951, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 859, 0, 902,
	903, 904, 905, 0, 0, 432, 433, 952, 434, 953,
	836, 435, 436, 437, 0, 438, 439, 0, 819, 440,
	441, 442, 443, 445, 919, 446, 0, 867, 447, 448,
	449, 498, 899, 946, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 816, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 812, 813, 0, 0, 0, 0, 0, 1495, 0,
	842, 0, 0, 0, 0, 840, 872, 829, 830, 831,
	827, 828, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 1890, 218,
	0, 0, 0, 0, 921, 846, 0, 0, 0, 219,
	220, 221, 458, 887, 866, 898, 856, 897, 896, 0,
	225, 858, 857, 228, 229, 230, 848, 920, 231, 956,
	957, 464, 0, 232, 927, 0, 910, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 913, 911,
	912, 917, 915, 914, 916, 248, 249, 250, 251, 901,
	253, 894, 893, 818, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 892, 260, 0, 261, 0, 262, 263,
	0, 824, 264, 265, 267, 270, 266, 271, 272, 273,
	947, 948, 837, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 891, 889, 890, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 954, 0, 847, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 922,
	923, 926, 933, 0, 924, 868, 0, 0, 0, 211,
	293, 295, 302, 0, 932, 296, 880, 871, 882, 884,
	885, 886, 881, 0, 873, 0, 303, 934, 935, 304,
	305, 306, 936, 906, 907, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 955, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 860, 329, 939,
	332, 333, 335, 334, 815, 212, 940, 838, 925, 895,
	336, 337, 0, 869, 339, 870, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 941, 346, 942, 949, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	950, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 888, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 825, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 861, 862, 864, 865, 398, 402, 405, 406,
	918, 407, 387, 388, 408, 944, 409, 883, 863, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 929, 416,
	417, 418, 951, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 859, 0, 902, 903,
	904, 905, 0, 0, 432, 433, 952, 434, 953, 836,
	435, 436, 437, 0, 438, 439, 0, 819, 440, 441,
	442, 443, 445, 919, 446, 0, 867, 447, 448, 449,
	498, 899, 946, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 816, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	812, 813, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 1187, 840, 872, 829, 830, 831, 827,
	828, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 846, 0, 0, 0, 219, 220,
	221, 458, 887, 866, 898, 856, 897, 896, 0, 225,
	858, 857, 228, 229, 230, 848, 920, 231, 956, 957,
	464, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 901, 253,
	894, 893, 818, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 892, 260, 0, 261, 0, 262, 263, 0,
	824, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 837, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 891, 889, 890, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 847, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1186, 923,
	926, 933, 0, 924, 868, 0, 0, 0, 211, 293,
	295, 302, 0, 932, 296, 880, 871, 882, 884, 885,
	886, 881, 0, 873, 0, 303, 934, 935, 304, 305,
	306, 936, 906, 907, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 860, 329, 939, 332,
	333, 335, 334, 815, 212, 940, 838, 925, 895, 336,
	337, 0, 869, 339, 870, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 888, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 825, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 861, 862, 864, 865, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 883, 863, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 929, 416, 417,
	418, 951, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 859, 0, 902, 903, 904,
	905, 0, 0, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 438, 439, 0, 819, 440, 441, 442,
	443, 445, 919, 446, 0, 867, 447, 448, 449, 498,
	899, 946, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 1181, 840, 872, 829, 830, 831, 827, 828,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 846, 0, 0, 0, 219, 220, 221,
	458, 887, 866, 898, 856, 897, 896, 0, 225, 858,
	857, 228, 229, 230, 848, 920, 231, 956, 957, 464,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 901, 253, 894,
	893, 818, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 892, 260, 0, 261, 0, 262, 263, 0, 824,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	837, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	891, 889, 890, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 954, 0, 847, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 1180, 923, 926,
	933, 0, 924, 868, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 880, 871, 882, 884, 885, 886,
	881, 0, 873, 0, 303, 934, 935, 304, 305, 306,
	936, 906, 907, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 860, 329, 939, 332, 333,
	335, 334, 815, 212, 940, 838, 925, 895, 336, 337,
	0, 869, 339, 870, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 888, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 825, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	861, 862, 864, 865, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 883, 863, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 929, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 859, 0, 902, 903, 904, 905,
	0, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 438, 439, 0, 819, 440, 441, 442, 443,
	445, 919, 446, 0, 867, 447, 448, 449, 498, 899,
	946, 0, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 1176, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 458,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 464, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 922, 923, 926, 933,
	0, 924, 868, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 880, 871, 882, 884, 885, 886, 881,
	0, 873, 0, 303, 934, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	0, 432, 433, 952, 434, 953, 836, 435, 436, 437,
	0, 438, 439, 0, 819, 440, 441, 442, 443, 445,
	919, 446, 0, 867, 447, 448, 449, 498, 899, 946,
	0, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 816, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 812, 813, 872,
	829, 830, 831, 827, 828, 841, 842, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 921, 846, 0,
	0, 0, 219, 220, 221, 458, 887, 866, 898, 856,
	897, 896, 0, 225, 858, 857, 228, 229, 230, 848,
	920, 231, 956, 957, 464, 0, 232, 927, 0, 910,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 930, 246,
	247, 913, 911, 912, 917, 915, 914, 916, 248, 249,
	250, 251, 901, 253, 894, 893, 818, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 892, 260, 0, 261,
	0, 262, 263, 0, 824, 264, 265, 267, 270, 266,
	271, 272, 273, 947, 948, 837, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 891, 889, 890, 0, 279,
	0, 280, 0, 0, 931, 281, 282, 0, 283, 954,
	0, 847, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 922, 923, 926, 933, 0, 924, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 935, 304, 305, 306, 936, 906, 907, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 955,
	937, 316, 317, 938, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	860, 329, 939, 332, 333, 335, 334, 815, 212, 940,
	838, 925, 895, 336, 337, 0, 869, 339, 870, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 941, 346,
	942, 949, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 950, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 888, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 943, 381, 382, 383,
	384, 825, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 861, 862, 864, 865, 398,
	402, 405, 406, 918, 407, 387, 388, 408, 944, 409,
	883, 863, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 929, 416, 417, 418, 951, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 859,
	0, 902, 903, 904, 905, 0, 0, 432, 433, 952,
	434, 953, 836, 435, 436, 437, 0, 438, 439, 0,
	819, 440, 441, 442, 443, 445, 919, 446, 0, 867,
	447, 448, 449, 498, 899, 946, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	816, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 0, 0, 812, 813, 872, 829, 830, 831, 827,
	828, 841, 842, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 846, 0, 0, 0, 219, 220,
	221, 458, 887, 866, 898, 856, 897, 896, 0, 225,
	858, 857, 228, 229, 230, 848, 920, 231, 956, 957,
	464, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 3309, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 901, 253,
	894, 893, 818, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 892, 260, 0, 261, 0, 262, 263, 0,
	824, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 837, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 891, 889, 890, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 847, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 922, 923,
	926, 933, 0, 924, 868, 0, 0, 0, 211, 293,
	295, 302, 0, 932, 296, 880, 871, 882, 884, 885,
	886, 881, 0, 873, 0, 303, 934, 935, 304, 305,
	306, 936, 906, 907, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 860, 329, 939, 332,
	333, 335, 334, 815, 212, 940, 838, 925, 895, 336,
	337, 0, 869, 339, 870, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 888, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 825, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 861, 862, 864, 865, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 883, 863, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 929, 416, 417,
	418, 951, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 859, 0, 902, 903, 904,
	905, 0, 0, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 3308, 439, 0, 819, 440, 441, 442,
	443, 445, 919, 446, 0, 867, 447, 448, 449, 498,
	899, 946, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 872, 829, 830, 831, 827, 828, 841, 842, 0,
	0, 0, 0, 840, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 921,
	846, 0, 0, 0, 219, 220, 221, 3307, 887, 866,
	898, 856, 897, 896, 0, 225, 858, 857, 228, 229,
	230, 848, 920, 231, 956, 957, 464, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 3309, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 901, 253, 894, 893, 818, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 892, 260,
	0, 261, 0, 262, 263, 0, 824, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 837, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 891, 889, 890,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 954, 0, 847, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 922, 923, 926, 933, 0, 924,
	868, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 880, 871, 882, 884, 885, 886, 881, 0, 873,
	0, 303, 934, 935, 304, 305, 306, 936, 906, 907,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 860, 329, 939, 332, 333, 335, 334, 815,
	212, 940, 838, 925, 895, 336, 337, 0, 869, 339,
	870, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 888, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 825, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 861, 862, 864,
	865, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 883, 863, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 929, 416, 417, 418, 951, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 859, 0, 902, 903, 904, 905, 0, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 3308,
	439, 0, 819, 440, 441, 442, 443, 445, 919, 446,
	0, 867, 447, 448, 449, 498, 899, 946, 0, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 872, 829, 830,
	831, 827, 828, 841, 842, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 921, 846, 0, 0, 0,
	219, 220, 221, 458, 887, 866, 898, 856, 897, 896,
	0, 225, 858, 857, 228, 229, 230, 848, 920, 231,
	956, 957, 464, 0, 232, 927, 0, 910, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 913,
	911, 912, 917, 915, 914, 916, 248, 249, 250, 251,
	901, 253, 894, 893, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 892, 260, 0, 261, 0, 262,
	263, 0, 824, 264, 265, 267, 270, 266, 271, 272,
	273, 947, 948, 837, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 891, 889, 890, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 954, 0, 847,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	922, 923, 926, 933, 0, 924, 868, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 880, 871, 882,
	884, 885, 886, 881, 0, 873, 0, 303, 934, 935,
	304, 305, 306, 936, 906, 907, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 955, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 860, 329,
	939, 332, 333, 335, 334, 0, 212, 940, 838, 925,
	895, 336, 337, 0, 869, 339, 870, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 949,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 950, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 888, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 825,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 861, 862, 864, 865, 398, 402, 405,
	406, 918, 407, 387, 388, 408, 944, 409, 883, 863,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 929,
	416, 417, 418, 951, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 859, 0, 902,
	903, 904, 905, 0, 0, 432, 433, 952, 434, 953,
	836, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 919, 446, 0, 867, 447, 448,
	449, 498, 899, 946, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 872, 829,
	830, 831, 827, 828, 841, 0, 2066, 0, 0, 0,
	0, 2064, 2065, 0, 0, 213, 214, 215, 216, 217,
	842, 218, 0, 0, 0, 840, 921, 846, 0, 0,
	0, 219, 220, 221, 0, 887, 866, 898, 856, 897,
	896, 0, 225, 858, 857, 228, 229, 230, 848, 920,
	231, 956, 957, 464, 0, 232, 927, 0, 910, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 3309,
	913, 911, 912, 917, 915, 914, 916, 248, 249, 250,
	251, 901, 253, 894, 893, 818, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 892, 260, 0, 261, 0,
	262, 263, 0, 824, 264, 265, 267, 270, 266, 271,
	272, 273, 947, 948, 837, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 891, 889, 890, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 954, 0,
	847, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 922, 923, 926, 0, 0, 924, 868, 0, 0,
	0, 211, 293, 295, 302, 0, 932, 296, 880, 871,
	882, 884, 885, 886, 881, 0, 873, 0, 303, 0,
	0, 304, 305, 306, 936, 906, 907, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 955, 937,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 860,
	329, 939, 332, 333, 335, 334, 815, 212, 0, 838,
	925, 895, 336, 337, 0, 869, 339, 870, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 941, 346, 942,
	949, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 950, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 888, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	825, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 861, 862, 864, 865, 398, 402,
	405, 406, 918, 407, 387, 388, 408, 0, 409, 883,
	863, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	929, 416, 417, 418, 951, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 859, 0,
	902, 903, 904, 905, 0, 0, 432, 433, 952, 434,
	953, 836, 435, 436, 437, 0, 3308, 439, 0, 819,
	440, 441, 442, 443, 445, 919, 446, 0, 867, 447,
	448, 449, 498, 899, 946, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	993, 0, 812, 813, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 840, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 920, 231, 462, 463, 464, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 922, 923, 926, 933, 0, 924, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 932, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 934, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 980, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 0, 212,
	940, 0, 925, 483, 336, 337, 0, 338, 339, 340,
	0, 985, 342, 343, 344, 0, 0, 345, 484, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 489, 987, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 951, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	952, 434, 953, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 919, 446, 0,
	444, 447, 448, 449, 1297, 499, 500, 0, 451, 450,
	501, 993, 0, 0, 170, 452, 453, 502, 454, 455,
	456, 0, 171, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 921,
	0, 977, 0, 1574, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 920, 231, 462, 463, 464, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 954, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 922, 923, 926, 933, 0, 924,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 934, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 980, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 0,
	212, 940, 0, 925, 483, 336, 337, 0, 338, 339,
	340, 0, 985, 342, 343, 344, 0, 0, 345, 484,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 489, 987, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 176, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 951, 0, 423,
	424, 422, 178, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 952, 434, 953, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 919, 446,
	0, 444, 447, 448, 449, 1297, 499, 500, 0, 451,
	450, 501, 0, 0, 0, 170, 452, 453, 502, 454,
	455, 456, 0, 171, 0, 0, 2491, 0, 993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 1574, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 920,
	231, 462, 463, 464, 0, 232, 927, 0, 910, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 247,
	913, 911, 912, 917, 915, 914, 916, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 947, 948, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 954, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 922, 923, 926, 933, 0, 924, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 932, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 934,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 980, 314, 313, 0, 315, 955, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 0, 212, 940, 0,
	925, 483, 336, 337, 0, 338, 339, 340, 0, 985,
	342, 343, 344, 0, 0, 345, 484, 941, 346, 942,
	949, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 950, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	489, 987, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 918, 407, 387, 388, 408, 944, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 951, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 952, 434,
	953, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 919, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 0,
	976, 0, 993, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 977,
	921, 982, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 920, 231, 462, 463, 464, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 922, 923, 926, 933, 0,
	924, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 934, 935, 304, 305, 306, 936, 307,
	308, 0, 0, 309, 310, 311, 312, 980, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 939, 332, 333, 335, 334,
	0, 212, 940, 0, 925, 483, 336, 337, 0, 338,
	339, 340, 0, 985, 342, 343, 344, 0, 0, 345,
	484, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 489, 987, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 951, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 952, 434, 953, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 919,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 993, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 0, 977, 0, 982, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 920, 231, 462, 463, 464, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 922, 923, 926, 933,
	0, 924, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 934, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 980, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 212, 940, 0, 925, 483, 336, 337, 0,
	338, 339, 340, 0, 985, 342, 343, 344, 0, 0,
	345, 484, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 489, 987, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 952, 434, 953, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	919, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 993, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 0, 977, 0, 982, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 920, 231, 462, 463, 464,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 954, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 922, 923, 926,
	933, 0, 924, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 934, 935, 304, 305, 306,
	936, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 939, 332, 333,
	335, 334, 0, 212, 940, 0, 925, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 489, 987, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 952, 434, 953, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 919, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 805, 0, 1151, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 1476, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 1055, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 933, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 932, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 934, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 0, 0, 940, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	176, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 944, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 178, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 1297, 499, 500, 0, 451, 450, 501, 1294, 0,
	1151, 170, 452, 453, 502, 454, 455, 456, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	148, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	1055, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 933, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 932, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 934, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 0, 0,
	940, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 941,
	346, 942, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 944,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 1297, 499, 500, 0, 451, 450,
	501, 0, 0, 0, 170, 452, 453, 502, 454, 455,
	456, 0, 171, 0, 0, 0, 0, 1151, 1150, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 1055, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 933, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 932, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 934, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 0, 0, 940, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 944, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 1151, 1150,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	2683, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 1055, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 933, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 932, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 934,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 0, 0, 940, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 941, 346, 942,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 944, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 993,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 921, 0, 0,
	0, 1301, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	920, 231, 462, 463, 464, 0, 232, 927, 0, 910,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 930, 246,
	247, 913, 911, 912, 917, 915, 914, 916, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 947, 948, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 931, 281, 282, 0, 283, 954,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 922, 923, 926, 933, 0, 924, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	934, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 955,
	937, 316, 317, 938, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 0, 212, 940,
	0, 925, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 941, 346,
	942, 949, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 950, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 943, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 918, 407, 387, 388, 408, 944, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 951, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 952,
	434, 953, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 919, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	805, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 176, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 178, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 1297, 499, 500, 0,
	451, 450, 501, 207, 0, 0, 170, 452, 453, 502,
	454, 455, 456, 0, 171, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 148, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 207, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 1579, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 207, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 2633, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 474, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 207, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 2291, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 679, 0, 571,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 2755,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	577, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	576, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	0, 570, 0, 571, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 580, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 577, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 576, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	571, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 580,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 577, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 1856, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 576, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 571, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 580, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 577, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 576, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 580, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 1323, 0, 1151, 1150, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	580, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 1055, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	1322, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 933, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 932, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 934, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 0, 0, 940, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 941, 346, 942, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 1321, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 944, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 1292, 0,
	1151, 1150, 0, 0, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	1055, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 1291, 475, 476, 933, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 932, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 934, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 0, 0,
	940, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 941,
	346, 942, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 944,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 1288, 0, 1151, 1150, 0, 0, 0, 0, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 1055, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 1287, 475, 476, 933,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 932, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 934, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 0, 940, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 941, 346, 942, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 944, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 1226, 0, 1151, 1150, 0, 0,
	0, 0, 1148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 1055, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 1225,
	475, 476, 933, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 932, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 934, 935, 304,
	305, 306, 936, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 939,
	332, 333, 335, 334, 0, 0, 940, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 941, 346, 942, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 944, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 1223, 0, 1151,
	1150, 0, 0, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 1055,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 930, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 931, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 1222, 475, 476, 933, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 932, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	934, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	937, 316, 317, 938, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 0, 0, 940,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 941, 346,
	942, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 943, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 944, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	1144, 0, 1151, 1150, 0, 0, 0, 0, 1148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 1055, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 1146, 475, 476, 933, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	932, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 934, 935, 304, 305, 306, 936, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 939, 332, 333, 335, 334,
	0, 0, 940, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 941, 346, 942, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 944, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 1151, 1150, 0, 0, 0, 0, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 1055, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 933,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 932, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 934, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 0, 940, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 941, 346, 942, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 944, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 1151, 1150, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 1055, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	933, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 932, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 934, 935, 304, 305, 306,
	936, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 939, 332, 333,
	335, 334, 0, 0, 940, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 941, 346, 942, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 944, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 1151, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 1055, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 933, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 932,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 934, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 0,
	0, 940, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	941, 346, 942, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	944, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 207, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 2185, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	2182, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 2326, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 2188, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 2323, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 2325, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 2322, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 0, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 2187, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 2324,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 207, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 2185, 232, 465, 0, 0, 2179, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 2182, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 2188, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 2178, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 2187, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 2186, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 1370, 0, 207, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 212, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 1373, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 1371,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 1372, 450, 501, 1139,
	0, 207, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 1141, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 985, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 1136, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 1138, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 985, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 1043, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	1045, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 985, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 533, 0,
	207, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	532, 217, 522, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 525, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 526, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 527, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 521, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 522, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 525, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 526, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 527, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 985, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 2255, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 1842, 0, 207, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 212, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 207, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 1780, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 1773, 0, 207, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 1772,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 212, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 1768, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 1770, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	1281, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 1280, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 212, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 1278, 0, 207, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1277, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 211, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 1275, 0, 207, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 1274, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 212, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 1271,
	0, 207, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 1270, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 1246, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 1161, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	1163, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 207, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 525,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 526,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 527, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 671, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 670, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 510, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 509,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 508, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 2119, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 207, 2313, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 474, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 207, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 2876,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 207, 2313, 0, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 2310, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 1848, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 1840, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 553, 0, 207, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 1021, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 554, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 550, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 549, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 1792, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 1791, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	553, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 543,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 554, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	550, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 1300, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 549, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 1285, 0, 207, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1284, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 1234, 0, 207, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 1233, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 0, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 1218,
	0, 207, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 1155, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 553, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 1021, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 554,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 550, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 549,
	493, 494, 495, 0, 0, 432, 1022, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 1004, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 553, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 543, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	541, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 542, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 554,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 544,
	385, 0, 386, 390, 391, 550, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 545,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 549,
	493, 494, 495, 0, 0, 432, 547, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 537, 0,
	207, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 538, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 535, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 529, 0, 207, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 505, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 207, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 207, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 2579, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 2577, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 207, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	2565, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 2273, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 207, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 538, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 207, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 1804, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 0, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 0, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 207, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1254, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 207, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 1196, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 207,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 959, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 207, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 0,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 0, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	0, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 0,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447, 1455,
	1456, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	1438, 1439, 1440, 0, 0, 1414, 0, 0, 0, 1420,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1462, 0, 0,
	1442, 1443, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 1437, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 1450, 1420, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 1452, 1462, 0, 0, 1442, 1443, 1444, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 1459, 0,
	0, 0, 0, 0, 0, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 1441, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447,
	1455, 1456, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 1453, 0, 0, 0, 0,
	1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	0, 0, 0, 0, 0, 0, 1414, 2727, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 1415, 1451, 0, 1461,
	1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423, 1424,
	1416, 1417, 1418, 1419, 1421, 1422, 1437, 1438, 1439, 1440,
	0, 0, 1414, 2437, 0, 0, 1420, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 1462, 0, 0, 1442, 1443, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	0, 0, 0, 0, 0, 0, 1429, 1430, 0, 0,
	0, 0, 1437, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 1450, 1420, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 1452,
	1462, 0, 0, 1442, 1443, 1444, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 0, 0, 0,
	0, 0, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 1441, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 1453, 0, 0, 0, 0, 1415, 1451, 0,
	1461, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0, 0,
	0, 0, 0, 1414, 2436, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 1415, 1451, 0, 1461, 1426, 1427, 1433,
	1432, 1428, 1454, 0, 1425, 1423, 1424, 1416, 1417, 1418,
	1419, 1421, 1422, 1437, 1438, 1439, 1440, 0, 0, 1414,
	2433, 0, 0, 1420, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1462, 0, 0, 1442, 1443, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 1459, 0, 0, 0,
	0, 0, 0, 1429, 1430, 0, 0, 0, 0, 1437,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 1450, 1420,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 1452, 1462, 0, 0,
	1442, 1443, 1444, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	1441, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1412, 1413,
	0, 1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 1453,
	0, 0, 0, 0, 1415, 1451, 0, 1461, 1426, 1427,
	1433, 1432, 1428, 1454, 0, 1425, 1423, 1424, 1416, 1417,
	1418, 1419, 1421, 1422, 0, 0, 0, 0, 0, 0,
	1414, 2432, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447,
	1455, 1456, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	1437, 1438, 1439, 1440, 0, 0, 1414, 2431, 0, 0,
	1420, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1462, 0,
	0, 1442, 1443, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 0, 0, 0, 0, 0, 0,
	1429, 1430, 0, 0, 0, 0, 1437, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 1450, 1420, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1452, 1462, 0, 0, 1442, 1443, 1444,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	0, 0, 0, 0, 0, 0, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 1441, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1412, 1413, 0, 1445, 1446,
	1447, 1455, 1456, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 1453, 0, 0, 0,
	0, 1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428,
	1454, 0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421,
	1422, 0, 0, 0, 0, 0, 0, 1414, 2001, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 1415, 1451, 0,
	1461, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 1422, 1437, 1438, 1439,
	1440, 3267, 0, 1414, 0, 0, 0, 1420, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1462, 0, 0, 1442, 1443,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 0, 0, 0, 0, 0, 0, 1429, 1430, 0,
	0, 0, 0, 1437, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 1450, 1420, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	1452, 1462, 0, 0, 1442, 1443, 1444, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 1459, 0, 0, 0,
	0, 0, 0, 1429, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 1441, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 1412, 1413, 0, 1445, 1446, 1447, 1455, 1456,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 1453, 0, 0, 0, 0, 1415, 1451,
	0, 1461, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425,
	1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0,
	0, 0, 3263, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 1415, 1451, 0, 1461, 1426, 1427,
	1433, 1432, 1428, 1454, 0, 1425, 1423, 1424, 1416, 1417,
	1418, 1419, 1421, 1422, 1437, 1438, 1439, 1440, 3199, 0,
	1414, 0, 0, 0, 1420, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 1462, 0, 0, 1442, 1443, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 0, 0,
	0, 0, 0, 0, 1429, 1430, 0, 0, 0, 0,
	1437, 1438, 1439, 1440, 0, 0, 0, 0, 0, 1450,
	1420, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1452, 1462, 0,
	0, 1442, 1443, 1444, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 0, 0, 0, 0, 0, 0,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 1441, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 1412,
	1413, 0, 1445, 1446, 1447, 1455, 1456, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	1453, 0, 0, 0, 0, 1415, 1451, 0, 1461, 1426,
	1427, 1433, 1432, 1428, 1454, 0, 1425, 1423, 1424, 1416,
	1417, 1418, 1419, 1421, 1422, 0, 0, 0, 0, 3198,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 1412, 1413, 0, 1445, 1446,
	1447, 1455, 1456, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428,
	1454, 0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421,
	1422, 1437, 1438, 1439, 1440, 3109, 0, 1414, 0, 0,
	0, 1420, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1462,
	0, 0, 1442, 1443, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 1459, 0, 0, 0, 0, 0,
	0, 1429, 1430, 0, 0, 0, 0, 1437, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 1450, 1420, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 1452, 1462, 0, 0, 1442, 1443,
	1444, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 0, 0, 0, 0, 0, 0, 1429, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 1441, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 1412, 1413, 0, 1445,
	1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 1453, 0, 0,
	0, 0, 1415, 1451, 0, 1461, 1426, 1427, 1433, 1432,
	1428, 1454, 0, 1425, 1423, 1424, 1416, 1417, 1418, 1419,
	1421, 1422, 0, 0, 0, 0, 3029, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 1445, 1446, 1447, 1455, 1456,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 1415, 1451,
	0, 1461, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425,
	1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 1437, 1438,
	1439, 1440, 2983, 0, 1414, 0, 0, 0, 1420, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1462, 0, 0, 1442,
	1443, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 0, 0, 0, 0, 0, 0, 1429, 1430,
	0, 0, 0, 0, 1437, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 1450, 1420, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1452, 1462, 0, 0, 1442, 1443, 1444, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 0, 0,
	0, 0, 0, 0, 1429, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 1441, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447, 1455,
	1456, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 1453, 0, 0, 0, 0, 1415,
	1451, 0, 1461, 1426, 1427, 1433, 1432, 1428, 1454, 0,
	1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 0,
	0, 0, 0, 2982, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 1412,
	1413, 0, 1445, 1446, 1447, 1455, 1456, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 1415, 1451, 0, 1461, 1426,
	1427, 1433, 1432, 1428, 1454, 0, 1425, 1423, 1424, 1416,
	1417, 1418, 1419, 1421, 1422, 1437, 1438, 1439, 1440, 2981,
	0, 1414, 0, 0, 0, 1420, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1462, 0, 0, 1442, 1443, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 1459, 0,
	0, 0, 0, 0, 0, 1429, 1430, 0, 0, 0,
	0, 1437, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	1450, 1420, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 1452, 1462,
	0, 0, 1442, 1443, 1444, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 1459, 0, 0, 0, 0, 0,
	0, 1429, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 1441, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 1453, 0, 0, 0, 0, 1415, 1451, 0, 1461,
	1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423, 1424,
	1416, 1417, 1418, 1419, 1421, 1422, 0, 0, 0, 0,
	2947, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 1445,
	1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 1415, 1451, 0, 1461, 1426, 1427, 1433, 1432,
	1428, 1454, 0, 1425, 1423, 1424, 1416, 1417, 1418, 1419,
	1421, 1422, 1437, 1438, 1439, 1440, 2762, 0, 1414, 0,
	0, 0, 1420, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	1462, 0, 0, 1442, 1443, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 0, 0, 0,
	0, 0, 1429, 1430, 0, 0, 0, 0, 1437, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 1450, 1420, 3356,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 1452, 1462, 0, 0, 1442,
	1443, 1444, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 0, 0, 0, 0, 0, 0, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 1441,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 1453, 0,
	0, 2359, 0, 1415, 1451, 0, 1461, 1426, 1427, 1433,
	1432, 1428, 1454, 0, 1425, 1423, 1424, 1416, 1417, 1418,
	1419, 1421, 1422, 0, 0, 2388, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2360, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 1426, 1427, 1433, 1432, 1428, 1454, 0,
	1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 1437,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 1445,
	1446, 1447, 1455, 1456, 1457, 0, 1452, 1462, 0, 0,
	1442, 1443, 1444, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 1461, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 1450, 0, 1434, 0, 0, 0,
	0, 0, 1435, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 1420, 0,
	2476, 0, 0, 2475, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1452, 1462, 0, 0, 1442,
	1443, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	1458, 1459, 0, 0, 0, 0, 0, 0, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2091, 0, 0, 1436, 0, 0, 0, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 1453, 0,
	2090, 0, 0, 1415, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447, 1455,
	1456, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 1415,
	1451, 0, 1461, 1426, 1427, 1433, 1432, 1428, 1454, 0,
	1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 1437,
	1438, 1439, 1440, 0, 0, 1414, 0, 0, 0, 1420,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1462, 0, 0,
	1442, 1443, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 1437, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 1450, 1420, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 1452, 1462, 0, 0, 1442, 1443, 1444, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 1459, 0,
	0, 0, 0, 0, 0, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 1441, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 802, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447,
	1455, 1456, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 1453, 0, 0, 0, 0,
	1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 1415, 1451, 0, 1461,
	1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423, 1424,
	1416, 1417, 1418, 1419, 1421, 1422, 1437, 1438, 1439, 1440,
	0, 0, 1414, 0, 0, 0, 1420, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 1462, 0, 0, 1442, 1443, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	0, 0, 0, 0, 0, 0, 1429, 1430, 0, 0,
	0, 0, 1437, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 1450, 1420, 0, 0, 0, 0, 2482, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 1452,
	1462, 0, 0, 1442, 1443, 1444, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 0, 0, 0,
	0, 0, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 1441, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2750, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 1453, 0, 2477, 0, 0, 1415, 1451, 0,
	1461, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 1415, 1451, 0, 1461, 1426, 1427, 1433,
	1432, 1428, 1454, 0, 1425, 1423, 1424, 1416, 1417, 1418,
	1419, 1421, 1422, 1437, 1438, 1439, 1440, 0, 0, 1414,
	0, 0, 0, 1420, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1462, 0, 0, 1442, 1443, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 1459, 0, 0, 0,
	0, 0, 0, 1429, 1430, 0, 0, 0, 0, 1437,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 1450, 1420,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 1452, 1462, 0, 0,
	1442, 1443, 1444, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	1441, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 2444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1412, 1413,
	0, 1445, 1446, 1447, 1455, 1456, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 1453,
	0, 2430, 0, 0, 1415, 1451, 0, 1461, 1426, 1427,
	1433, 1432, 1428, 1454, 0, 1425, 1423, 1424, 1416, 1417,
	1418, 1419, 1421, 1422, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 1445, 1446, 1447,
	1455, 1456, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428, 1454,
	0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422,
	1437, 1438, 1439, 1440, 0, 0, 1414, 0, 0, 0,
	1420, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1462, 0,
	0, 1442, 1443, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 0, 0, 0, 0, 0, 0,
	1429, 1430, 0, 0, 0, 0, 1437, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 1450, 1420, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1452, 1462, 0, 0, 1442, 1443, 1444,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	0, 0, 0, 0, 0, 0, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 1441, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1412, 1413, 0, 1445, 1446,
	1447, 1455, 1456, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 1453, 0, 0, 0,
	0, 1415, 1451, 0, 1461, 1426, 1427, 1433, 1432, 1428,
	1454, 0, 1425, 1423, 1424, 1416, 1417, 1418, 1419, 1421,
	1422, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 1412, 1413, 0, 1445, 1446, 1447, 1455, 1456, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1415, 1451, 0,
	1461, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425, 1423,
	1424, 1416, 1417, 1418, 1419, 1421, 1422, 1437, 1438, 1439,
	1440, 0, 0, 1414, 0, 0, 0, 1420, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1462, 0, 0, 1442, 1443,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 0, 0, 0, 0, 0, 0, 1429, 1430, 0,
	0, 0, 0, 1437, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 1450, 1420, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	1452, 1462, 0, 0, 1442, 1443, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 1441, 0, 1435, 0, 0, 0,
	711, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 719, 0, 0, 0, 748, 0,
	1441, 0, 0, 0, 725, 726, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 744, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 1451,
	742, 0, 1426, 1427, 1433, 1432, 1428, 1454, 0, 1425,
	1423, 1424, 1416, 1417, 1418, 1419, 1421, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 729, 1426, 1427,
	1433, 1432, 1428, 1454, 724, 1425, 1423, 1424, 1416, 1417,
	1418, 1419, 1421, 1422, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 713, 731, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 732, 0, 0, 0, 749, 750,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 740,
}
var sqlPact = [...]int{

	5885, -1000, -1000, -1000, -1000, -1000, -1000, 160, 153, 151,
	150, 145, 143, 137, 134, 133, -1000, -1000, -1000, 131,
	-1000, -1000, 123, -1000, 122, 107, 106, 105, -1000, 104,
	102, -1000, -1000, -1000, -1000, 97, 94, 93, 48650, 1513,
	58115, 49883, 1662, 2058, 43299, 57702, 42886, 57289, 56876, 92,
	-1000, 56463, 91, 90, 88, -1000, -1000, 86, 1235, 35009,
	83, 82, 81, 1684, 80, 77, -1000, 75, -1000, 7434,
	1123, -1000, 74, 73, -1000, 7712, 3728, 49470, 2033, 72,
	71, 34595, 2021, -1000, -1000, 1484, -1000, -1000, 70, 69,
	67, 66, 65, 64, 63, 62, 60, -1000, 58, 57,
	56, 55, 54, 53, 51, 49, 48, 47, 46, 45,
	43, 40, 38, 37, 35, -1000, 69188, 1377, 1267, 1255,
	1234, 1231, 1208, 715, 34, 33, 32, 31, 30, 29,
	-1000, -1000, 27, 22, 21, 14, -1000, 12, 9, 129,
	8, 3, -3, -7, -8, 2599, 1977, 1120, 318, 16493,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62185, 58522, -12, -39, -14, -1000, 2286, 800, 29218, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 371,
	-1000, -1000, -1000, 242, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1590, 545, -1000, -1000, -1000, 56050, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 58522, -1000, 1512,
	-134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 537, -1000,
	1500, 234, 1452, -1000, -1000, -1000, -1000, -1000, 58522, -1000,
	-1000, 2573, 2572, 1455, 535, 55643, -1000, 1068, -1000, 668,
	19122, -1000, 891, -1000, 19122, 241, -1000, -1000, -1000, -1000,
	-1000, 42473, 13443, 42060, 41647, 38768, 55230, 13020, 48243, 925,
	-1000, -1000, -1000, -1000, -1000, -21, 36230, 58522, -1000, 238,
	-1000, -1000, -1000, -1000, -1000, -1000, 25369, 313, 24920, 290,
	24471, 248, -1000, -1000, -1000, -1000, 2571, 2570, 813, 2569,
	2212, 61778, 1293, 2565, 1239, 892, 745, 2563, 2562, 2561,
	2560, 2558, 2557, 2555, 1122, 54817, 2005, 38345, 37922, 48650,
	48650, 1864, 54404, -1000, -1000, 1016, 996, -1000, -1000, -1000,
	-1000, 2136, 2016, 2009, 47830, -1000, -1000, 2553, 2548, 2547,
	2546, 2544, 61371, 1275, 2542, 1743, 2540, 2539, 2535, 2531,
	2530, 2527, 2526, 2525, 2522, -1000, 47417, 47004, 46591, 46178,
	53991, 37499, 37076, -1000, -1000, -1000, 30866, 4035, 53578, 31714,
	48650, -1000, -1000, 25805, -85, -1000, -1000, -1000, 1973, -1000,
	25805, -85, -1000, 2004, 1376, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1667, 1201, 2420, 36653, 1577, 1022, 2133,
	2521, 1742, 2131, 2109, 2107, 2104, 2094, 2520, 1190, 2519,
	1159, 2516, 1095, 2087, 2081, 2428, 1518, 41234, 2508, 2507,
	2263, 2074, 1971, -1000, -1000, -1000, -1000, 1070, -1000, -1000,
	-1000, 43706, -1000, -1000, 907, -1000, -1000, 907, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 923, 60557, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1360, -1000, 1454, -1000, -1000, 2505, 1977, 1643, 2200,
	2200, 2200, 2319, 358, 351, -1000, 129, -1000, -1000, 68573,
	-1000, -1000, 25805, 25805, 25805, 25805, 25805, 1396, -1000, 534,
	-1000, -1000, 581, -1000, 533, 492, -1000, -1000, -1000, -1000,
	-1000, -1000, 530, 2437, -1000, 804, -1000, -1000, -1000, -1000,
	2387, -1000, 15608, -1000, -1000, -1000, 370, 529, 25805, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 233, 674, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 481, 1319, 480, 480, 480, -1000, -1000, 731, -1000,
	-1000, -1000, 255, 479, 253, 478, -1000, -1000, -1000, -1000,
	2001, 528, 527, -1000, 526, 522, 521, -1000, -1000, -1000,
	520, 519, 518, 517, 516, 515, 514, 511, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 726, -1000, 510, 509, 506,
	505, 504, 503, 501, 499, 496, -1000, -1000, -22, 58522,
	-1000, 371, -22, -1000, -1000, 495, -1000, 19558, 19558, 19558,
	-1000, -1000, 1495, 25805, -1000, 1825, -1000, 808, -239, 645,
	30040, -1000, 28377, 645, 587, 32949, -1000, 1970, -1000, -1000,
	494, 227, -1000, -1000, 1966, 58522, 13864, 58522, 48650, 48650,
	-1000, 2149, 25805, -1000, -1000, 39189, 35823, 58522, 49057, 2350,
	9093, 35823, 58522, 1998, -1000, -1000, -1000, 58522, -1000, 25805,
	-1000, 2346, 1059, -33, -1000, -1000, -1000, -1000, -1000, -1000,
	1698, 1834, 841, 1542, 1020, -1000, 19122, 2205, -1000, -1000,
	-1000, 182, 13864, -1000, 2003, 2122, 1126, -1000, 1532, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1272, 2119, -1000,
	3397, 2102, 1270, -1000, -1000, 701, 2098, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1463, -1000, -1000, 2236,
	-1000, -1000, 1442, 2092, -226, -1000, -1000, 39189, 36230, -28,
	-1000, -1000, -68, -1000, 12597, 68573, -1000, -1000, -1000, 68573,
	686, -1000, -1000, 2080, -1000, 68573, 684, -1000, -1000, 2079,
	-1000, -1000, -1000, 2503, -1000, 2502, 1652, 2500, 2499, 2496,
	-1000, 1072, 1278, 2495, -1000, 2491, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45765, 45352, 737, -1000, 1485, -1000, -1000,
	44939, 693, 1650, -1000, -1000, 1646, -1000, 770, -1000, 2490,
	53165, 1872, 693, 1638, -1000, -1000, -1000, -1000, -1000, 48650,
	-1000, 48650, -1000, 48650, -1000, 1141, -1000, 60964, -239, -1000,
	-1000, -1000, -1000, -1000, 2077, 2489, 2487, 2486, -1000, 58522,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 156,
	2070, -1000, -1000, 156, 2069, -1000, 156, 2068, -1000, 154,
	2066, -1000, -1000, 1544, 2062, -1000, -162, 2059, -1000, -1000,
	-162, 2054, -1000, -38, -1000, -1000, -1000, 800, -1000, 30453,
	52752, 39189, 676, 602, 68573, -1000, 39189, 68573, -1000, 44939,
	-1000, 52339, 44532, -1000, -1000, 1058, 1761, -1000, -1000, -1000,
	-1000, 39189, 39189, -1000, 51926, -1000, -1000, -1000, 1446, 2241,
	48650, -1000, -1000, 1997, -1000, 35416, 48650, -1000, 48650, -1000,
	48650, -1000, 48650, -1000, 48650, -1000, -1000, -1000, -1000, -1000,
	2091, 1230, 1227, -1000, 58522, -1000, -1000, 2250, 58522, -1000,
	58522, -1000, -1000, -1000, 1689, -1000, -1000, -1000, -1000, 48650,
	-1000, -1000, -1000, -1000, -1000, -1000, 1995, -1000, 1213, -1000,
	1048, -1000, -1000, 161, -1000, -1000, -33, -1000, 60557, -1000,
	-1000, 1977, 1643, -1000, 58522, -1000, -1000, -1000, 1977, 1521,
	1790, 24022, 1759, 25805, 129, -1000, -1000, 129, 129, 18686,
	-1000, -1000, 9093, 9093, 13864, 976, 25805, 25805, 25805, 25805,
	25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805,
	25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805,
	25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805, 25805,
	25805, 1679, 25805, 919, 25805, 25805, 25805, 25805, 1373, -1000,
	-1000, 1416, 400, 1493, -1000, 2389, 2389, 2389, 6806, 6806,
	484, 2483, 581, -1000, 25805, -1000, -85, 25805, 14287, -1000,
	2421, 1056, -1000, -1000, 351, 8736, 1625, -1000, 350, 14736,
	-1000, -1000, -1000, 15608, 492, 23573, 25805, 719, 68573, 12176,
	1978, 1919, -1000, 2419, -1000, -1000, 2387, -1000, -1000, -1000,
	-1000, 2387, 974, 953, 2418, -1000, 2387, 2387, 490, 670,
	642, 634, 632, 630, 25805, 25805, 25805, 25805, 25805, 25805,
	25805, 25805, -1000, 23137, 22688, 22239, 27113, 21790, 25805, 16044,
	21341, 20892, 58522, -22, 2345, 25805, 229, -1000, 67336, -1000,
	229, 229, 489, -43, 68573, 1798, 1784, 29629, 1817, 1421,
	1421, 1421, -1000, 488, 576, 645, 9634, 50290, 1433, 645,
	645, 181, 216, 349, 27966, 1825, 50290, -1000, -1000, 48650,
	487, 14287, 13864, 1080, -47, 180, 1815, 1811, 1809, -1000,
	1191, -49, 676, 918, -42, -1000, 3967, -53, -1000, 829,
	-1000, -1000, -1000, -1000, 147, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 724, 485, 483,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 481, 1319, 480, 480, 480, -1000, -1000, -1000,
	255, 479, 253, 478, -1000, -1000, -1000, -1000, -1000, -1000,
	1964, -68, 49057, 658, -58, 836, -33, -1000, 907, -1000,
	1450, -1000, -1000, -1000, -1000, -1000, -1000, 1031, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2436, -1000, 2403, -1000, -1000,
	2417, -23, -1000, -1000, 13864, -1000, -37, 1268, -1000, 40821,
	2255, 2237, 2222, 1135, -1000, 1086, 2313, 43706, 2332, -1,
	-1000, 1959, -1000, -1000, 667, 1046, 912, 43706, 3397, -1000,
	9093, -1000, 1814, 2311, 1029, 1039, 1029, 1029, 1024, -1000,
	43706, 911, 1370, 39189, -1000, 906, -1000, -48, 2331, -2,
	-1000, 1957, 900, -1000, -1000, 48650, 13864, 617, -28, 36230,
	58522, 179, -1000, 25805, -85, 25805, -85, -1000, -1000, 2053,
	-1000, -1000, -1000, 2476, 1284, 1723, -1000, -1000, -1000, 477,
	1631, 3397, 1628, -1000, -1000, 44119, 1956, 58522, 1821, -31,
	48650, -1000, -1000, 1369, -1000, 2050, 2048, 508, 2475, -1000,
	1483, 1604, -1000, -1000, -1000, 60150, 1000, 2047, 713, 127,
	2343, 127, 33771, -1000, 58522, -1000, 58522, -1000, -1000, -1000,
	2470, -1000, 48650, -1000, -1000, 48650, -1000, 48650, -1000, 48650,
	-1000, 48650, 48650, -1000, 58522, 39189, 39189, 39189, 3399, 40007,
	-59, 345, -1000, 51519, 58522, 784, 40414, -208, 676, 617,
	-1000, 617, -1000, 48650, 1994, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 58522, -1000, 58522, -1000, -1000, -1000,
	-1000, -1000, -1000, 1153, -1000, 1992, -1000, 1987, -1000, 17,
	-1000, -1000, -1000, -1000, -1000, 1258, 48650, 48650, 48650, -1000,
	43706, -1000, -1000, 1977, -1000, -1000, -1000, -1000, -1000, 68573,
	-1000, 436, -1000, -1000, 68573, 1236, 1836, -1000, 1836, -30,
	-1000, 66876, 1754, 48650, -1000, -1000, -1000, -1000, -1000, 665,
	428, 428, 982, 982, 982, 982, 2344, 877, 2703, 967,
	415, 415, 415, 415, 415, 415, 415, 415, 385, 439,
	439, 385, 385, 385, 385, 385, 439, 439, 439, 415,
	415, 415, 6806, 68884, 5971, 25805, 25805, 899, 1394, 400,
	5629, 25805, 6472, 6472, 6472, 6472, -1000, 1374, -1000, -1000,
	-1000, -1000, 1954, 475, 27113, 27113, -1000, -1000, -1000, -1000,
	15172, 25805, -1000, -1000, -1000, -1000, 20443, -1000, -1000, 66489,
	-249, 342, -215, 19, -1000, 25805, 25805, 25805, 341, -1000,
	340, -1000, -1000, 898, -1000, 896, 895, 893, -1000, 474,
	173, 25805, 58522, -1000, 64167, 575, -133, -1000, -60, 1025,
	-1000, 25805, 165, -1000, 1419, 472, 471, 339, -70, 337,
	661, 660, 329, 328, 327, 25805, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 68497, 63856, 63780, 63469,
	8292, 63393, 63082, -76, 326, -1000, 1951, -215, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 325, -1000, 324, -1000, 68186,
	-215, 323, 5585, -1000, 27113, 27113, 27113, -1000, 322, -1000,
	67025, -1000, 68110, 20007, 20007, 20007, 321, 67799, 25805, -215,
	-77, -1000, -78, -1000, -1000, 470, -82, 713, 19558, 28804,
	13864, -1000, 713, 713, 25805, -1000, 25805, 29629, 1795, -1000,
	-1000, -1000, 1445, 1784, 29629, -1000, -1000, -1000, -1000, 50290,
	619, 645, 50290, -1000, 2387, 1922, -1000, -1000, -1000, 58522,
	371, -1000, 50290, 50290, 13864, 645, -1000, 320, 32125, 19,
	159, -1000, -1000, 13864, 1793, 1793, 1793, -1000, -1000, 1950,
	58522, 2361, -1000, 1344, -1000, 9093, -1000, 578, 824, -1000,
	2416, 469, -1000, 2387, 2387, 58522, 164, 19122, -1000, 907,
	-1000, -1000, 1137, -1000, 1274, -1000, 952, -1000, -1000, -1000,
	19122, -1000, 1762, 58522, 58522, 48650, -1000, -1000, 1603, 59743,
	1597, 9093, 58522, -1000, -1000, 468, 466, 1753, 1749, 58522,
	58522, 59336, 58929, 58522, 1367, 25805, 1429, 1426, -85, -1000,
	-85, 465, 924, 48650, 48650, 1260, -1000, -1000, -1000, -1000,
	-1000, 48650, -1000, -1000, 2415, -1000, 1029, -1000, -1000, -1000,
	1029, 3397, 1232, 48650, 39189, 697, 58522, 1361, -85, -1000,
	-85, 462, 13864, 1364, -1000, 1903, -1000, -1000, -1000, 11755,
	68573, -1000, 68573, -1000, 58522, -1000, 736, 58522, 40414, 688,
	2045, -1000, 3397, 2044, 371, -1000, -1000, 33360, -68, 676,
	39189, 48650, -31, 39189, 39189, 39189, 2469, 461, 2465, -1000,
	48650, 2042, 1481, 1596, 2063, 616, 58522, 1430, -1000, 25805,
	1263, -1000, 32538, 764, 58522, 1222, 158, -1000, -1000, -1000,
	11, 58522, -1000, 2459, -1000, -1000, 156, 156, 156, -1000,
	154, 1544, -1000, -162, -162, -1000, -1000, 3399, 676, -32,
	450, -1000, 638, 633, 31293, 39189, -83, -1000, -1000, -1000,
	-1000, -1000, 48650, 58522, 589, 1869, 58522, -1000, 676, -1000,
	-1000, 694, -1000, 1028, -68, -68, -1000, 1147, 1125, 58522,
	-1000, 13864, 58522, 48650, 13864, 48650, -1000, -1000, -1000, -1000,
	-1000, 1236, -1000, 25805, -1000, -1000, -1000, 18686, -1000, -1000,
	-1000, 48650, -227, 25805, 25805, 4903, 4776, 25805, 27113, 27113,
	-1000, 25805, 463, -1000, -1000, -1000, -1000, -1000, 1949, 449,
	25805, 9093, 5245, 4630, -1000, 316, 63006, 385, -1000, 25805,
	-1000, 311, 18250, -1000, 67412, -20, -20, -1000, 2434, 1666,
	1328, 1261, 1181, 2406, 11334, -215, -90, -1000, -1000, 441,
	-1000, 2037, -1000, 25805, 67723, 10913, -1000, 34182, 714, 1430,
	-1000, -1000, 2387, 649, -1000, -1000, -1000, 649, -1000, 66178,
	9093, 9093, 25805, 25805, -1000, 25805, 25805, 25805, -1000, -1000,
	25805, -1000, -1000, 1946, 25805, -1000, 9093, 9093, 27113, 27113,
	27113, 27113, 27113, 27113, 27113, 27113, 27113, 27113, 27113, 27113,
	27113, 27113, 27113, 27113, 27113, 27113, 27113, 1678, 27113, 2381,
	2381, 2381, -1000, 1939, 1946, 25805, 25805, 9093, 307, 306,
	305, -1000, 25805, -215, -1000, -1000, 3399, -1000, 1918, -1000,
	-164, -1000, 1825, -1000, -1000, 1918, 1918, -91, 68573, -1000,
	29629, -1000, 448, 25805, 1772, -1000, 571, -1000, -92, -1000,
	50290, -1000, 569, -246, -1000, 628, -1000, -1000, -1000, 371,
	-1000, -1000, -1000, 130, 50290, -1000, -96, -1000, 2342, 303,
	13864, -1000, -1000, -1000, -1000, -1000, -1000, -85, -68, 1448,
	2431, -1000, 2405, -1000, 568, 301, 2387, 299, 297, -68,
	58522, -1000, -33, -1000, -1000, -1000, 25805, -1000, -1000, 2230,
	886, 878, -1000, 2041, -1000, 1591, -1000, 777, -1000, 1149,
	-1000, 25805, 25805, 447, 446, 1353, 2458, 2040, 1544, 2036,
	1544, -1000, -1000, 651, -1000, 68573, 445, 444, -1000, -37,
	1218, -1000, -1000, 25805, 25805, 51108, -1000, 2236, -1000, 866,
	-1000, -1000, -1000, 3397, 865, -1000, -1000, 1362, -1000, -1000,
	-1000, -1000, 25805, -1000, -48, 850, 676, 1940, -1000, 2457,
	2456, 2453, 294, -57, -1000, 2341, 1516, 58522, 48650, 48650,
	2340, 617, -1000, 2387, -1000, -1000, -1000, -1000, 693, -1000,
	-1000, 2450, -1000, 781, 13864, 48650, 2035, 1701, 616, 39600,
	-1000, 693, 1790, -1000, 68573, -1000, 1222, 17801, 2225, -98,
	-1000, 20, -1000, -1000, -1000, 713, 33771, 29629, 25805, 2446,
	-100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50701,
	50701, 39189, 39189, 39189, 676, 58522, 58522, 40414, 2445, 440,
	58522, 58522, 438, -1000, -1000, -1000, 1443, 48650, -1000, -1000,
	691, -1000, -1000, 1372, 1526, -1000, 1447, 66102, -1000, 2219,
	13864, 2352, 6472, 25805, 25805, 211, 3602, 1238, 6472, 25805,
	25805, 9093, 68960, -112, 25805, 25805, -1000, 25805, 564, 68573,
	2427, 25805, 282, 280, 279, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 277, -1000, -1000, -1000, -1000, -1000, 68573,
	25805, 18, -1000, -1000, -1000, 62592, -1000, 25805, 276, 271,
	-1000, -1000, -1000, 270, 265, 8814, 4305, 65791, 65715, 65404,
	68573, 1939, 68573, -1000, -1000, 614, 614, 1023, 1023, 1023,
	1023, 2381, 959, 979, 1614, 723, 723, 723, 1546, 933,
	933, 723, 723, 723, 1937, 1675, 437, 6423, -1000, -1000,
	68573, 68573, 264, -1000, -1000, -1000, -215, 263, 1912, 2309,
	-1000, 29629, 1912, 1912, -1000, 1445, 58522, 68573, 29629, -239,
	-1000, 2387, -1000, -1000, 1922, -1000, 10067, -1000, 13864, -1000,
	-1000, 32125, -1000, 429, -1000, 0, -1000, -1000, -1000, 559,
	-1000, -1000, 261, -1000, -1000, -68, 68573, 58522, 58522, 58522,
	2034, -1000, 3661, -1000, 65328, -113, -1000, 66876, 25805, 58522,
	-1000, 1395, 1824, 817, -1000, 58522, -1000, 58522, -1000, -1000,
	58522, 58522, 48650, -114, 68573, -109, -1000, 620, -1000, 48650,
	48650, 39189, -119, 13864, -1000, 39189, -1000, -1000, -1000, 1862,
	-85, -1000, 2444, 426, 3397, -85, -1000, 555, -1000, -1000,
	420, 58522, 1479, 417, 13864, 1718, 616, 39600, -1000, 1000,
	1222, -1000, -1000, -111, -1000, 460, -85, 58522, 2443, 1430,
	-1000, -121, 68573, -1000, 618, -1000, -124, -1000, -1000, 257,
	-1000, 2188, 2175, -1000, -1000, 25805, 416, 414, 58522, 1611,
	-1000, -1000, -1000, -1000, 13864, 922, -1000, -1000, -1000, 2219,
	6472, 6472, 25805, 25805, 25805, 6472, 68960, -129, -1000, 6472,
	6472, -215, -1000, -1000, 67412, -1000, -1000, -1000, -1000, 68573,
	10492, 1380, -1000, 65017, -1000, -1000, -1000, -1000, 25805, 25805,
	-1000, -1000, -1000, -1000, -1000, 27113, 1934, 412, 9093, -1000,
	-1000, 700, 25805, 25805, 1825, 700, 700, -1000, -137, -1000,
	645, -1000, -1000, -1000, 2387, 0, -1000, 2442, 13864, -1000,
	-1000, -1000, -1000, -1000, 58522, -1000, 58522, -1000, 13864, 58522,
	1936, 1561, -1000, -1000, 1748, 402, 27113, 48650, 699, 1945,
	1379, 25805, -1000, -141, -143, 1559, -1000, -1000, 1547, 25805,
	-1000, 9093, 1544, 1544, -147, -148, -1000, 845, 58522, 17365,
	-1000, -1000, -1000, 844, -1000, -162, 1361, 1894, 689, -1000,
	40414, 688, -1000, -1000, -1000, 25805, -1000, 48650, 25805, 1476,
	-1000, 616, 39600, -1000, 2063, -1000, 2097, 58522, 2218, -1000,
	-1000, -1000, 1790, 400, -1000, 676, 398, 396, -149, 25805,
	25805, -153, -174, -1000, 678, 673, -1000, -1000, 48650, -1000,
	6472, 6472, 6472, -1000, 249, -1000, -1000, 1430, 2306, -1000,
	64941, 64630, 5819, 27113, 9093, -154, -1000, 58522, 68573, -215,
	-1000, -1000, -1000, 50290, 549, -1000, -1000, 1835, -1000, -1000,
	-1000, 58522, 1570, -1000, -1000, 25805, 6423, 395, 25805, -1000,
	-1000, 1856, 1968, 1862, 394, -1000, -1000, -1000, -1000, 1280,
	-1000, -1000, 68573, 2259, -1000, -1000, 391, 389, 387, 610,
	1933, -1000, 386, 688, -1000, 1384, -1000, 1773, 246, 2338,
	-155, 781, -163, 48650, 39600, -1000, 1701, 949, -165, 58522,
	1222, -1000, -1000, 39189, 39189, 1379, -167, -173, -1000, 1611,
	-1000, 58522, -1000, 58522, -1000, -1000, 1408, 25805, -1000, -1000,
	5819, -175, -1000, -193, -1000, 2337, -1000, -1000, -1000, -1000,
	2032, 64554, 1683, 58522, 64243, 1967, -1000, -1000, 1361, 58522,
	48650, 780, 13864, 1372, 1372, 25805, 16929, 1383, 25805, -1000,
	48650, -1000, 2169, 1862, -85, 1379, 384, 1379, 383, -1000,
	1718, 1134, -1000, 713, -1000, -1000, -179, -180, 1862, 1379,
	-1000, -1000, -181, -189, 245, 26677, 26677, 26677, -215, -1000,
	58522, 382, 2017, -1000, 1460, 1363, 244, 787, -1000, -1000,
	1945, -194, 371, -1000, 25805, -1000, -195, -1000, 763, -196,
	-1000, 759, -204, -1000, 1931, -1000, -210, 367, -1000, 1361,
	689, 1862, 25805, 1862, 25805, -1000, 33771, -1000, 676, 676,
	1361, 1862, -1000, -1000, -1000, -1000, -1000, 27534, 1486, 1210,
	66565, -1000, -1000, -1000, -1000, 58522, -1000, 1475, 1467, 1099,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1683, 68573,
	-1000, 1372, 1890, -1000, 1372, 1930, -1000, 1375, -1000, 58522,
	688, -1000, 1361, -214, 1361, -216, -185, -1000, -1000, -1000,
	1361, 2348, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2154,
	-1000, 790, 1695, 1695, 1460, -1000, 366, -1000, 365, -1000,
	-218, -1000, 711, 1379, 711, 1379, -1000, -1000, 26241, -1000,
	2368, -1000, -1000, 1716, -1000, 1945, 25805, 25805, 1529, -1000,
	2441, 1862, -1000, 1862, -1000, -1000, -1000, -1000, -1000, -224,
	-231, -1000, -1000, -1000, -1000, 1361, 1361, 1361, 840, 711,
	711, -1000, 364, -1000, -1000, 25805, -233, 1361, -1000,
}
var sqlPgo = [...]int{

	0, 3120, 3116, 3115, 3112, 3111, 3109, 3104, 3102, 3097,
	3085, 3084, 3082, 3080, 3079, 3076, 3075, 3072, 3071, 3067,
	3066, 3065, 3064, 3060, 3058, 3056, 3053, 3048, 3046, 3044,
	3043, 3042, 3039, 3038, 3037, 3035, 3034, 3030, 3025, 3023,
	3016, 3014, 3013, 3010, 36, 3006, 3000, 2997, 2994, 2993,
	2992, 2988, 2987, 2986, 2985, 2979, 2978, 2977, 2976, 2970,
	2969, 2967, 2966, 2965, 2961, 2957, 2956, 2955, 2954, 2953,
	2946, 2942, 2941, 2940, 127, 2938, 2936, 2934, 2933, 2932,
	2930, 2928, 2926, 2925, 2924, 2922, 2920, 2916, 2915, 190,
	2914, 2912, 2911, 2909, 2903, 2901, 2896, 2894, 2890, 2887,
	183, 2885, 2883, 2876, 2870, 2869, 2867, 2865, 2864, 2863,
	2862, 2861, 2859, 2858, 2857, 2856, 2855, 2854, 2853, 2851,
	2847, 2845, 2844, 2842, 2841, 2840, 2839, 2837, 197, 136,
	2836, 2834, 2833, 2832, 2831, 2830, 89, 84, 20, 2828,
	86, 116, 181, 5792, 176, 2826, 2825, 2824, 2823, 2822,
	91, 128, 130, 120, 117, 152, 2821, 2820, 62, 44,
	30, 27, 93, 2819, 2818, 2816, 2434, 83, 2815, 2814,
	193, 180, 2813, 1525, 2812, 125, 100, 79, 26, 65,
	2810, 108, 17, 2809, 119, 53, 2808, 115, 63, 28,
	4840, 6423, 2803, 69, 198, 71, 141, 179, 169, 166,
	155, 126, 170, 2802, 184, 2799, 138, 145, 2779, 2776,
	2774, 56, 142, 10, 5, 132, 9, 2768, 15, 2767,
	11, 2764, 2763, 2762, 2759, 23, 114, 2758, 54, 61,
	2755, 32, 87, 156, 2753, 159, 2752, 92, 2750, 191,
	146, 149, 13, 174, 2748, 2746, 2744, 2743, 2742, 96,
	21, 94, 2739, 2738, 101, 177, 2737, 51, 131, 68,
	105, 201, 76, 161, 72, 167, 133, 168, 2736, 2735,
	2734, 139, 2729, 2726, 112, 153, 2725, 2724, 31, 50,
	175, 55, 2723, 2721, 113, 2720, 147, 2719, 2718, 2717,
	196, 129, 162, 2, 73, 90, 25, 7, 173, 110,
	77, 70, 2716, 2440, 1124, 1086, 2712, 103, 80, 43,
	85, 107, 192, 35, 2710, 2707, 331, 2704, 2697, 2696,
	2695, 135, 2689, 2685, 2679, 97, 34, 58, 2678, 111,
	64, 221, 199, 75, 157, 158, 187, 2677, 134, 2676,
	95, 98, 2675, 150, 185, 88, 2674, 1239, 106, 2670,
	164, 2669, 2668, 2665, 2664, 121, 2663, 2662, 188, 2661,
	109, 2659, 2658, 144, 249, 384, 37, 2657, 59, 216,
	2656, 143, 40, 2654, 122, 33, 0, 6139, 4574, 5210,
	2651, 5159, 2649, 154, 102, 2648, 2647, 2644, 2643, 38,
	14, 4, 6, 18, 16, 489, 81, 2642, 2641, 74,
	99, 123, 2640, 195, 163, 2639, 2634, 2633, 66, 2631,
	24, 2627, 22, 2624, 2617, 29, 3, 2616, 2615, 182,
	2612, 178, 2611, 2609, 2373, 2608, 194, 2604, 104, 2602,
	118, 151, 2600, 2595, 2593, 2592, 189, 2591, 186, 2588,
	12, 19, 1, 2585, 2584, 2583, 148, 8, 2165, 2581,
	2580, 57, 140, 67, 2577, 2576, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	426, 426, 17, 27, 18, 28, 12, 428, 428, 428,
	428, 21, 19, 19, 29, 139, 139, 139, 139, 16,
	16, 24, 24, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 425, 425, 154, 154,
	153, 149, 149, 429, 429, 155, 155, 155, 157, 157,
	33, 33, 87, 87, 87, 140, 80, 80, 80, 80,
	80, 80, 80, 75, 75, 374, 374, 375, 375, 135,
	135, 136, 136, 136, 136, 137, 137, 138, 138, 138,
	47, 35, 35, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 45, 45, 45, 45, 129, 129,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	434, 434, 435, 435, 436, 436, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 59, 59, 227, 227, 205, 205, 49, 49, 421,
	421, 240, 240, 342, 342, 61, 61, 62, 62, 62,
	62, 62, 62, 63, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	70, 70, 70, 71, 71, 71, 68, 68, 68, 66,
	66, 66, 65, 65, 65, 69, 69, 69, 67, 67,
	67, 241, 241, 72, 72, 72, 72, 72, 72, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	344, 344, 73, 73, 73, 314, 314, 76, 76, 76,
	272, 272, 77, 77, 77, 77, 77, 78, 78, 78,
	78, 88, 88, 88, 88, 424, 424, 233, 233, 170,
	170, 170, 170, 83, 83, 83, 83, 84, 84, 84,
	85, 85, 134, 134, 94, 94, 94, 94, 94, 93,
	93, 93, 93, 93, 93, 39, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 44, 44, 44, 44,
	44, 96, 96, 430, 430, 98, 95, 95, 95, 97,
	97, 97, 97, 99, 100, 100, 100, 100, 100, 100,
	101, 101, 368, 368, 248, 248, 366, 366, 382, 382,
	367, 367, 209, 209, 209, 209, 209, 210, 210, 210,
	373, 373, 373, 373, 373, 373, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 119, 119, 119, 128, 128,
	128, 128, 128, 128, 128, 121, 121, 121, 111, 111,
	103, 103, 103, 103, 107, 107, 107, 107, 107, 104,
	104, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 105, 105, 105, 105, 114, 114, 114, 114, 113,
	113, 124, 124, 124, 124, 124, 124, 328, 328, 120,
	120, 120, 120, 123, 123, 123, 123, 262, 262, 117,
	117, 117, 118, 118, 118, 122, 122, 125, 125, 125,
	125, 106, 106, 106, 439, 439, 439, 126, 126, 116,
	116, 127, 127, 127, 127, 127, 127, 127, 115, 115,
	115, 427, 427, 109, 422, 422, 419, 419, 419, 419,
	419, 419, 419, 420, 420, 423, 423, 81, 81, 81,
	54, 54, 440, 440, 440, 55, 55, 441, 441, 441,
	438, 438, 438, 438, 438, 438, 438, 438, 211, 211,
	212, 212, 295, 295, 295, 295, 295, 213, 213, 156,
	156, 156, 216, 217, 217, 214, 214, 215, 215, 215,
	219, 219, 218, 221, 221, 220, 294, 387, 387, 388,
	388, 388, 388, 388, 388, 388, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 385, 385, 385, 386,
	383, 383, 384, 384, 384, 384, 442, 442, 442, 442,
	442, 442, 443, 443, 293, 293, 225, 225, 390, 390,
	390, 390, 391, 391, 391, 391, 391, 394, 393, 392,
	392, 392, 392, 392, 324, 324, 324, 58, 58, 58,
	259, 259, 258, 258, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 131, 131,
	56, 56, 56, 162, 162, 53, 53, 53, 445, 445,
	57, 57, 57, 446, 446, 60, 60, 60, 60, 60,
	60, 52, 52, 52, 52, 52, 447, 447, 278, 278,
	277, 277, 231, 231, 330, 174, 174, 150, 150, 150,
	20, 22, 22, 15, 15, 30, 30, 31, 31, 26,
	26, 431, 431, 432, 432, 82, 82, 86, 86, 86,
	92, 92, 130, 130, 130, 130, 130, 130, 130, 34,
	34, 34, 34, 46, 46, 46, 46, 90, 449, 449,
	449, 91, 91, 448, 448, 169, 169, 169, 169, 171,
	171, 290, 290, 291, 291, 450, 450, 292, 292, 292,
	292, 164, 163, 165, 165, 51, 51, 51, 158, 158,
	159, 159, 160, 160, 161, 161, 451, 451, 79, 79,
	79, 133, 133, 204, 204, 286, 286, 286, 226, 226,
	179, 179, 289, 289, 287, 287, 287, 287, 257, 257,
	257, 132, 132, 236, 236, 250, 250, 251, 251, 339,
	339, 252, 89, 89, 143, 143, 141, 141, 141, 141,
	141, 141, 452, 452, 142, 142, 142, 144, 144, 144,
	144, 144, 144, 144, 147, 147, 147, 147, 148, 148,
	148, 146, 146, 401, 401, 401, 403, 403, 404, 400,
	400, 402, 402, 444, 444, 261, 261, 261, 223, 224,
	222, 222, 453, 453, 229, 229, 228, 230, 230, 329,
	329, 329, 255, 255, 255, 255, 281, 281, 279, 279,
	280, 280, 282, 282, 283, 283, 283, 284, 284, 285,
	285, 254, 254, 310, 310, 145, 145, 145, 235, 235,
	235, 237, 237, 301, 301, 301, 301, 301, 302, 302,
	300, 300, 300, 300, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 332, 332, 238, 238, 333, 288, 288,
	417, 417, 417, 418, 418, 327, 327, 334, 334, 334,
	334, 334, 334, 325, 325, 326, 326, 340, 341, 341,
	265, 265, 265, 265, 263, 263, 266, 266, 266, 266,
	264, 264, 335, 335, 335, 335, 256, 256, 336, 336,
	336, 337, 296, 297, 297, 345, 345, 345, 345, 360,
	234, 234, 234, 454, 454, 346, 346, 346, 346, 346,
	346, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 350, 350, 350, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 359, 359, 359, 359, 359, 351,
	351, 356, 356, 357, 357, 357, 352, 353, 358, 358,
	358, 358, 455, 455, 362, 362, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 348, 348, 348, 355, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 273, 273, 274, 274, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 305, 305, 305, 305, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	395, 395, 395, 395, 395, 395, 395, 395, 398, 398,
	399, 399, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 405, 405, 406, 406, 408, 408, 409, 409, 410,
	411, 411, 411, 412, 413, 413, 407, 407, 414, 414,
	414, 414, 415, 415, 416, 416, 416, 416, 416, 316,
	316, 317, 317, 323, 323, 323, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 172, 172, 172, 172, 172, 246, 246, 244,
	244, 244, 247, 247, 245, 245, 243, 243, 242, 242,
	313, 313, 311, 311, 315, 315, 267, 267, 361, 361,
	361, 361, 361, 361, 361, 268, 268, 268, 276, 269,
	269, 270, 270, 270, 270, 270, 307, 308, 271, 271,
	271, 309, 309, 318, 322, 322, 321, 320, 320, 319,
	319, 298, 298, 299, 299, 253, 253, 456, 456, 249,
	249, 338, 338, 338, 338, 207, 207, 239, 239, 206,
	206, 199, 199, 200, 200, 200, 200, 232, 232, 363,
	363, 363, 364, 365, 312, 189, 188, 176, 177, 187,
	186, 185, 175, 178, 182, 183, 184, 180, 181, 195,
	194, 193, 191, 192, 343, 201, 201, 202, 202, 202,
	203, 203, 203, 203, 173, 173, 196, 196, 197, 198,
	198, 190, 190, 190, 166, 166, 166, 167, 167, 168,
	168, 372, 372, 370, 370, 370, 371, 371, 371, 371,
	369, 369, 369, 369, 369, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 378, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 381, 381,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 5, 5, 2, 5, 3,
	6, 4, 6, 5, 6, 6, 4, 8, 3, 4,
	3, 6, 4, 3, 1, 3, 2, 1, 1, 3,
	1, 3, 2, 2, 0, 1, 1, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 6, 4, 9, 7,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 6, 4, 1, 0, 2,
	3, 3, 3, 7, 5, 3, 3, 2, 0, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 6, 3, 4, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	10, 13, 0, 2, 3, 9, 12, 0, 2, 3,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 5, 8, 5, 11, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 2, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 2, 3, 4, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 1, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	2, 2, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 450, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -130, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -131, -132, -133, 80, 67,
	120, 102, 107, 126, 152, 281, 310, 320, 304, -97,
	-98, 339, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -433, 82,
	-402, -64, -67, -69, -437, 112, 125, 164, 273, -84,
	-85, 306, 308, -41, -40, 121, -141, -143, -95, -96,
	-134, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 342, 388, 39, 351,
	68, 115, 314, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -60, -57, -58, -401,
	-65, -66, -68, -70, -71, 305, -144, -142, 447, 400,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	418, 426, -147, -145, -146, -148, 327, 408, 365, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, -191,
	-196, -197, -198, -190, -166, -378, -381, 4, -376, -379,
	131, 177, 243, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 42, 44, 45, 48, 49, 50, 51, 52,
	53, 56, 61, 66, 67, 68, 69, 70, 75, 72,
	73, 74, 77, 79, 80, 81, 84, 85, 93, 94,
	95, 96, 97, 98, 102, 105, 104, 107, 110, 111,
	112, 114, 116, 117, 120, 121, 124, 122, 371, 373,
	123, 125, 126, 127, 137, 138, 139, 141, 142, 144,
	146, 150, 151, 153, 157, 159, 160, 161, 162, 163,
	164, 165, 166, 178, 173, 179, 183, 186, 185, 187,
	188, 189, 180, 194, 197, 198, 199, 201, 202, 205,
	206, 207, 208, 211, 210, 213, 216, 217, 220, 221,
	224, 225, 227, 228, 231, 229, 232, 230, 233, 236,
	234, 235, 238, 239, 241, 240, 248, 249, 251, 252,
	253, 268, 256, 257, 258, 261, 264, 267, 269, 270,
	271, 272, 273, 274, 276, 277, 279, 281, 283, 285,
	286, 287, 288, 289, 290, 292, 293, 295, 296, 297,
	298, 299, 304, 301, 302, 303, 305, 306, 307, 308,
	310, 312, 313, 314, 315, 317, 319, 340, 341, 353,
	320, 321, 322, 323, 324, 325, 326, 330, 334, 331,
	332, 333, 335, 328, 329, 336, 337, 339, 342, 344,
	346, 347, 350, 351, 352, 354, 357, 358, 359, 355,
	356, 349, 364, 362, 363, 366, 367, 368, 369, 370,
	372, 374, 382, 383, 385, 388, 389, 390, 392, 393,
	396, 397, 398, 399, 404, 400, 402, 405, 406, 407,
	413, 412, 419, 420, 422, 423, 424, 32, 40, 41,
	43, 46, 57, 58, 59, 62, 99, 100, 119, 128,
	129, 140, 154, 156, 167, 168, 169, 184, 190, 192,
	172, 214, 246, 247, 262, 266, 278, 280, 291, 316,
	345, 360, 376, 377, 378, 379, 384, 386, 408, 409,
	410, 414, 421, 254, -184, 2, -166, -166, 281, 26,
	2, 26, 277, 329, 367, 369, 2, 193, 2, -424,
	-233, 2, 26, -170, -166, 82, 152, 327, -184, 2,
	-424, -233, 24, 2, -166, 2, -171, 2, 320, -166,
	450, 77, 221, 61, 316, 336, -100, 383, -99, 376,
	322, -101, -368, 2, 236, -166, 450, 450, 450, 450,
	2, 365, 271, 412, 328, 401, 95, 288, 177, -419,
	2, 4, -379, -376, -200, -199, 365, 95, -198, -190,
	440, -197, 450, 450, 450, 2, 198, 199, 287, 286,
	336, 337, 450, 450, 450, 2, 25, 55, 76, 79,
	101, 127, 147, 150, 259, -434, 228, 268, 285, 322,
	335, 364, 374, 385, -438, 352, 56, 401, -445, 390,
	110, -277, 95, 369, 367, 221, 151, 397, 312, 155,
	395, 105, 183, 399, 398, 450, 450, 25, 55, 64,
	79, 110, 127, 147, 150, -436, 268, 285, 319, 322,
	335, 364, 374, 390, 385, 2, 412, 328, 365, 177,
	95, 401, 312, 284, -74, 2, 447, 29, 339, -140,
	365, 2, -166, 198, 199, 2, 450, 450, -419, 2,
	198, 199, 2, 56, 324, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 2, -128, 336, 352, 161, 38, 61, 26, 66,
	96, 153, 177, 178, 206, 76, 77, 286, 221, 199,
	-328, 337, 366, 323, 329, 362, 383, 82, 402, 313,
	424, -427, 122, 4, 95, 236, 338, 376, 70, 370,
	371, -444, 2, 365, -448, 2, 383, 383, 2, -448,
	2, -448, 2, -169, 2, 383, 380, -449, 383, 421,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, -142, -144, -143, 450, 450, 450, 450, 450,
	-128, 336, 2, 61, 26, -452, 145, -228, -229, 394,
	191, 118, 260, -141, -143, 2, -401, -366, 2, -303,
	-382, -305, 438, 439, 433, 242, 425, -316, 101, 395,
	254, -381, -306, -318, 119, 316, -247, 8, 9, 5,
	6, 7, -173, -347, -312, -355, 387, 130, 245, -203,
	452, 10, 447, -398, -143, -317, 33, 156, 54, -370,
	-202, -349, -357, -353, -354, -454, 44, 50, 49, 374,
	235, 330, 331, 346, 332, 333, 42, 404, 173, 251,
	253, 185, 4, 192, -201, -190, -395, -396, -376, -377,
	184, 190, 186, 345, 187, 188, 189, 41, 291, 141,
	142, 140, 111, 100, 99, 247, 46, 45, 43, 409,
	-358, 97, 376, 377, 378, 379, 201, 202, -166, -378,
	64, 87, 88, 86, 91, 90, 92, 89, 338, 401,
	55, 32, 167, 168, 172, 246, 169, 62, -397, 356,
	83, 149, 182, 170, 195, 196, 200, 215, 218, 237,
	244, 263, 265, 311, 343, -455, 410, 128, 129, 266,
	278, 360, 384, 386, 154, 214, 57, 58, -403, 292,
	-404, -184, -403, 450, 450, 451, 450, -222, -223, -224,
	2, 26, 108, 447, 2, -331, 2, 445, -335, -143,
	209, -334, 447, -332, -191, 255, -399, 317, -395, -396,
	-173, -190, -202, 4, -225, 447, 449, 95, 365, 65,
	2, -272, 447, -166, 26, -140, 254, 380, 451, -314,
	447, 254, 148, 257, -166, 2, 2, 340, 2, 447,
	-100, 59, 383, -291, 2, -292, -163, -164, -165, -340,
	197, 283, 290, 427, 424, -366, -430, 148, 430, 380,
	-366, -248, 449, 2, -335, 167, -191, 2, -188, -369,
	4, -376, -379, -377, -380, 64, -378, 26, 28, 29,
	30, 31, 33, 34, 35, 36, 47, 54, 55, 60,
	63, 65, 76, 82, 86, 87, 89, 88, 90, 91,
	92, 101, 103, 106, 108, 109, 113, 115, 118, 130,
	132, 145, 147, 148, 152, 155, 158, 171, 181, 191,
	193, 209, 212, 219, 222, 223, 242, 245, 250, 254,
	255, 259, 260, 275, 282, 294, 309, 327, 338, 348,
	361, 365, 375, 380, 381, 387, 394, 395, 401, 403,
	411, 415, 416, 417, 418, -381, 2, -335, 167, 2,
	-193, 167, -335, -196, 2, -374, 167, -372, 10, -371,
	5, 4, -376, -379, -377, 2, -175, -166, 2, -187,
	-369, 2, -206, 167, -191, -192, -196, 380, 451, -239,
	-199, -200, -232, -166, 449, -303, 2, -89, 2, -303,
	167, 2, -89, 167, 2, -303, 167, 2, -89, 167,
	2, 2, 2, 385, 2, 79, 167, -166, 365, 94,
	2, 303, -435, 319, 389, 412, 2, 2, 2, 2,
	2, 2, 2, 365, 328, -446, 292, -180, 2, -166,
	145, -374, 167, 2, -374, 167, 2, -194, -196, -194,
	177, 194, -175, 167, 2, 369, 367, 369, 367, 148,
	2, 193, 2, 193, 2, -336, 2, -337, -191, 2,
	2, 2, 2, 2, 167, -166, 365, 94, 2, 208,
	2, 2, 2, 2, 2, 2, 2, 2, 2, -241,
	167, 2, -191, -241, 167, 2, -241, 167, 2, -207,
	167, 2, -206, -175, 167, 2, -375, 167, 2, -374,
	-375, 167, 2, -344, 2, -343, -371, 408, -74, 447,
	336, 447, -374, -191, -303, -89, 148, -303, -89, 145,
	2, 95, 365, -128, 2, 145, 403, 2, 8, 2,
	-374, 289, 137, 2, 340, 2, 286, 337, 61, 424,
	148, 2, 2, -422, 2, 254, 148, 2, 148, 2,
	148, 2, 148, 2, 148, 2, 2, 286, 337, 2,
	382, 207, 123, 2, 148, -262, 2, 418, 148, 2,
	148, 2, 5, 2, 197, 283, 353, 2, -191, -439,
	2, 365, 412, 328, 2, 2, 72, 73, 148, 2,
	148, 424, 2, -256, -335, -290, -291, -290, 380, -171,
	-452, -228, -229, -128, 340, 2, 2, -452, -255, -279,
	-280, 219, 132, 250, -261, 26, 108, -261, -261, 48,
	448, 448, 11, 12, 63, 37, 438, 439, 440, 441,
	143, 442, 443, 436, 437, 435, 428, 429, 432, 203,
	204, 78, 431, 430, 71, 226, 318, 133, 134, 135,
	136, 300, 174, 175, 176, 14, 15, 16, 30, 259,
	218, 425, 170, 343, 433, 17, 18, 19, 195, 196,
	244, 40, 171, -172, -208, -303, -303, -303, -303, -303,
	265, 447, -253, -298, 445, -143, 447, 447, 447, 5,
	447, 5, -365, 8, -143, -303, -316, 448, -245, 447,
	-143, -316, -311, 447, 316, 445, 447, -319, -303, 449,
	-405, 419, -351, 447, 280, -350, 447, -350, -350, 413,
	-348, 447, 426, 420, 447, -348, 447, 447, 145, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 413, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 451, -403, -225, 447, -249, -338, -303, 440,
	-249, -249, 254, -242, -303, 83, -265, 200, 237, 149,
	215, 311, 182, -365, -74, -300, 452, -327, 426, -143,
	-332, -190, -143, -334, 447, -331, -327, 440, -191, 447,
	148, 447, 449, 148, -232, -369, -175, -191, -201, -202,
	107, -242, -374, -419, -232, -170, 34, -313, -345, -346,
	-359, -347, -356, -352, -355, 296, 297, 295, 299, 298,
	44, 50, 49, 374, 235, 330, 331, 346, 332, 333,
	42, 404, 173, 251, 253, 185, 4, 43, 409, -358,
	192, 184, 190, 186, 345, 187, 188, 189, 41, 291,
	141, 142, 140, 111, 100, 99, 247, 46, 45, 97,
	376, 377, 378, 379, 201, 202, 410, 356, 57, 58,
	-419, -232, 145, -368, -242, 34, -291, 2, -450, 451,
	217, -210, 225, 241, 160, 255, 422, 248, -373, 5,
	4, -312, -324, 101, 221, -355, 9, 439, -363, 8,
	438, -367, -366, 85, 449, -369, -152, 301, -151, 23,
	27, 112, 406, 124, -215, 179, 271, 119, 349, -426,
	-428, 321, 372, 373, 74, 248, 301, 119, -258, -260,
	34, 93, 239, 267, 51, 165, 230, 231, 351, 414,
	119, 301, 418, 119, -428, 301, -428, -154, 349, -426,
	-428, 321, 301, -153, -215, 119, 452, -374, -239, 451,
	451, -369, 440, 119, 119, 119, 119, 2, 2, 242,
	2, 2, 2, 150, -438, -436, 2, 2, 2, -191,
	167, -193, 167, 2, -196, 412, -227, 254, -421, -240,
	365, -191, -162, -400, 418, 242, 242, 34, 447, 2,
	-177, 167, 2, -167, -166, 177, -400, 242, -336, -204,
	-191, -204, 339, -184, 34, -300, 119, 2, 2, 2,
	-166, -155, 451, 53, 307, 119, -155, 119, -155, 119,
	-155, 451, 119, -155, 119, 451, 119, 119, 448, 451,
	-344, -374, -138, 418, 148, 82, 447, -375, -421, -175,
	2, -191, 2, 365, 201, -374, -374, -368, 26, 341,
	2, 73, -191, -423, 145, -420, 312, -419, -191, -191,
	-191, -191, -191, 145, 2, 382, 2, 382, 2, -166,
	67, -166, -166, 217, -191, 145, 365, 177, 365, -155,
	451, -171, -452, -255, -368, -452, -280, -279, -282, -303,
	26, -285, 139, 238, -303, -305, -142, -142, -142, -230,
	-329, -303, 282, 177, -360, -345, -345, -189, -369, 376,
	-303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
	-303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
	-303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
	-303, -303, -303, -303, -303, 218, 170, 343, 40, 171,
	-303, 380, -303, -303, -303, -303, 234, 242, 245, 387,
	130, 396, 108, 248, -456, 361, 36, -309, -143, -246,
	447, -323, 31, 348, 26, -316, 447, 2, -298, -303,
	-299, -243, -242, -242, 448, 411, 26, 108, 440, 2,
	8, -273, -275, 423, 233, 98, 162, 232, -274, 326,
	448, 451, 34, 448, -303, -243, -315, -311, -242, -322,
	-321, 415, -369, 440, -406, 138, 155, 8, -365, -365,
	376, 376, 8, -365, -365, 447, 448, 2, 448, 2,
	448, 2, 448, 2, 448, 2, -303, -303, -303, -303,
	-303, -303, -303, -242, -267, 2, -361, -242, 4, 423,
	233, 98, 162, 232, 326, -267, 2, -268, 2, -303,
	-242, -269, -304, -305, 438, 439, 433, -316, -270, 2,
	-303, -243, -303, 47, 212, 381, -271, -303, 148, -242,
	-242, 2, -242, 2, -404, 34, -242, -235, 451, 148,
	34, 4, -235, -235, 447, 448, 451, 200, -266, 159,
	229, 224, -331, -265, 200, -263, 263, -263, -263, -417,
	447, 446, -327, -176, 445, 453, -369, -326, -325, 34,
	-184, 261, -327, -327, 449, 448, -326, -191, 447, -242,
	-369, 354, 448, 449, 195, 195, 195, 317, 448, -138,
	380, 418, -74, 256, 448, 451, -234, 33, 445, -275,
	447, -362, 413, 447, 447, 148, -233, -430, 448, 383,
	-292, -209, 290, 347, 302, 334, 363, 9, 8, 8,
	451, -369, 451, -431, 76, 380, 65, -294, 167, 65,
	-383, -178, 76, -384, -166, 60, 395, 282, 147, -431,
	76, -431, 76, 76, 339, 352, 48, -335, 37, -89,
	213, 148, 424, 365, 380, -335, -260, -345, 93, 230,
	231, 48, -364, -363, 439, -364, 48, -364, -364, -364,
	418, -193, -335, 380, 272, -374, 380, 451, 37, -89,
	213, 148, 380, -206, -176, -341, -340, -199, -166, 449,
	-303, -89, -303, -89, 119, 2, -446, 208, 447, -225,
	242, -259, -258, 242, -195, 2, -191, 148, -232, -342,
	193, 451, -240, 272, 119, 119, 447, 116, 288, 2,
	254, 242, -177, 167, -158, 368, 119, -297, -296, 416,
	-286, -89, 447, 101, 34, -286, -250, -251, -339, -252,
	-178, 447, -184, -166, 2, -191, -241, -241, -241, -206,
	-207, -175, -374, -375, -375, -74, -343, 448, 448, -137,
	258, -136, -166, 5, -140, 403, -212, -295, -294, -385,
	-386, -383, 218, 177, 395, 194, 131, -138, -340, -138,
	-341, -341, -191, 145, -232, -232, 336, 145, 145, 449,
	-262, 288, 95, 365, 271, 177, -191, -206, -191, -335,
	-452, -283, -363, 447, -284, 316, 317, 451, -150, 35,
	106, 205, -191, 424, 117, -303, -303, 380, -456, 361,
	-309, 117, -303, 234, 245, 387, 130, 396, 108, 248,
	148, 447, -304, -304, 448, -244, -303, -303, 446, 455,
	448, -453, 451, -228, -303, -242, -242, 448, 448, 380,
	380, 380, 380, 447, 449, -242, -232, 446, 446, 451,
	448, -320, -321, 113, -303, 449, -411, 264, 447, 447,
	448, 448, 451, 448, 424, 424, 448, 448, 448, -303,
	34, 451, 451, 451, 448, 451, 451, 451, 448, 448,
	148, 448, 448, -276, 275, 448, 11, 12, 438, 439,
	440, 441, 143, 442, 443, 436, 437, 435, 428, 429,
	430, 71, 226, 318, 14, 15, 16, 195, 171, -304,
	-304, -304, 448, -307, -308, 148, 145, 34, -271, -271,
	-271, 448, 148, -242, 448, 448, 447, 448, -297, -338,
	-237, 2, -331, -186, -369, -297, -297, -242, -303, -331,
	200, -264, 403, 254, -266, -331, -325, 448, -418, -365,
	-327, -326, -365, -302, -301, 146, 35, 106, 240, -184,
	-225, -326, -326, -369, -327, 448, -238, -333, -399, -453,
	449, -369, -129, 5, 245, -129, -129, 148, -232, 24,
	276, -345, 445, 446, 8, 8, 447, -365, -365, -232,
	148, -366, -291, 393, 69, 290, 376, -366, -151, 301,
	-178, -178, -191, 242, -294, 167, -157, 242, -345, -185,
	-166, 447, 447, 205, 205, -178, -185, 167, -178, 167,
	-185, -185, -425, 290, 249, -303, 220, 288, 243, -152,
	301, -89, -89, 447, -430, 403, 107, -191, -195, 301,
	-201, -364, -364, -258, 301, -193, -374, 418, -175, -153,
	-89, -89, 447, -176, -154, 301, -135, 166, 440, -166,
	412, -166, -211, -212, -166, -440, 420, 418, 119, 119,
	-225, -205, -191, 445, -138, -374, -191, -374, -374, -374,
	2, 447, 2, -191, 119, 254, 242, -159, 114, -451,
	430, -175, -229, -228, -303, -257, -289, 309, 254, -226,
	-179, -178, 408, -184, -257, -236, 451, 148, 430, 449,
	-226, 2, -155, -155, -155, -155, -155, -74, -138, 451,
	447, 430, 430, 447, -374, -374, 448, 451, -191, -177,
	177, 177, -183, -167, -138, -42, 418, 365, 336, 336,
	-166, -187, -175, -191, -188, -206, -284, -303, -329, -191,
	452, -303, -303, 117, 117, -303, -304, -304, -303, 117,
	148, 447, -303, -313, 30, 30, 448, 451, -299, -303,
	448, 411, -453, -453, -453, 5, 233, 162, 232, -274,
	232, -274, -274, 8, 440, -369, 448, -311, 115, -303,
	375, -369, 440, -412, -181, 447, -166, 416, -228, -365,
	-348, -348, 448, -360, -345, -303, -303, -303, -303, -303,
	-303, -307, -303, -360, -345, -304, -304, -304, -304, -304,
	-304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
	-304, -304, -304, -304, 108, 242, 248, -304, -308, -307,
	-303, -303, -345, 448, 448, 448, -242, -74, -254, 155,
	-341, 451, -254, -254, 448, -331, 447, -303, 200, 446,
	448, 451, -326, 446, 451, 454, 430, -225, 449, -325,
	448, 451, -288, 34, 448, -369, -89, 257, 5, 8,
	446, 448, -365, 448, 448, -232, -303, 380, 380, 119,
	242, 405, -387, -384, -303, -231, -330, -303, 447, 447,
	-149, 112, 339, -432, 2, 119, -155, 119, -155, 422,
	447, 447, 380, -242, -303, -139, 101, -368, -428, 380,
	380, 272, -242, 380, -138, 148, 2, 2, 2, 448,
	34, 252, -166, -191, -193, 34, -341, -365, -162, 2,
	-278, 403, -176, -191, 119, -160, 211, -451, -372, -400,
	-281, -279, -257, -249, 243, 75, 448, 451, 449, -297,
	-251, -237, -303, 2, 448, -136, -137, -374, -374, -374,
	-138, -140, -140, -295, 2, 447, -177, -167, 447, 258,
	-191, -262, -217, -216, 271, 248, 255, 448, -150, -176,
	-303, -303, 117, 30, 30, -303, -303, -313, 448, -303,
	-303, -242, 446, 5, -303, 448, 448, 448, 448, -303,
	449, -413, -166, -303, 448, 448, 448, 448, 451, 451,
	448, 448, 448, 448, -308, 148, 108, 248, 447, 448,
	448, -310, 158, 48, -331, -310, -310, -264, -232, -331,
	-300, -365, -301, -176, 445, -369, -333, 447, 449, 446,
	448, -178, -178, -294, 119, -388, 76, -389, 63, 131,
	82, 242, 245, 395, 282, 60, 101, 294, 34, 448,
	448, 451, -150, -231, -232, 242, 358, 101, 242, 101,
	94, 390, -178, -185, -232, -232, -191, 448, 451, 430,
	-195, -193, -374, 448, -176, -375, -213, 180, -89, 2,
	447, -225, -259, -89, 446, 447, -166, 254, 447, -176,
	-161, 210, -451, -372, -158, -257, -287, 447, 254, -89,
	-179, 2, -229, 430, 448, 448, 94, 94, -231, 447,
	447, -232, -43, -44, 177, 76, 274, -188, 365, -150,
	-303, -303, -303, 448, -453, -369, 440, -407, 271, 448,
	-303, -303, -304, 148, 447, -313, -408, 417, -303, -242,
	-408, -408, 448, -327, -365, 2, -294, -185, -189, -182,
	-166, 131, 167, 245, 205, 447, -304, -191, 447, 2,
	-442, 103, 181, -293, -443, 81, 359, -330, 448, 448,
	245, 245, -303, -345, -155, -155, 448, 448, 380, -368,
	80, -366, 380, -214, -215, 171, -441, 418, -211, -440,
	-231, -191, -231, 254, -451, -372, -159, 109, -232, 76,
	-281, -309, -138, 447, 447, 448, -231, -231, 448, 451,
	26, 447, 26, 447, -191, 448, -229, 48, 448, 448,
	-304, -313, 448, -409, -410, -181, -326, 446, -389, -182,
	242, -303, -168, 447, -303, 181, 104, 163, -213, 447,
	294, -174, 63, 447, 447, 447, 430, 148, 447, -440,
	269, 94, 239, 448, 34, 448, -278, 448, -191, -372,
	-160, 398, 243, 448, -185, -257, -375, -375, -293, 448,
	448, -44, -232, -232, -414, 288, 317, 157, -242, 448,
	451, 34, 119, 448, -390, 227, -166, 448, 104, 163,
	-214, -232, -191, -429, 403, -189, -219, -218, -216, -221,
	-220, -216, -242, -366, 80, 269, -242, -191, 94, -213,
	-89, -293, 447, -293, 447, -161, 339, -296, 448, 448,
	-213, -293, 448, 448, 448, -415, -416, 40, 392, 85,
	-303, -415, -415, -410, -412, 131, -391, -394, -393, 254,
	344, 149, 270, 448, 358, 414, -442, 448, -225, -303,
	448, 451, 408, 448, 451, 408, 448, 148, 448, 447,
	-214, -441, -213, -231, -213, -231, -250, -138, -138, -214,
	-213, -416, 279, 144, 316, 279, 144, -182, -393, 254,
	-394, 254, 398, 105, -390, -218, 171, -220, 148, 269,
	-232, -440, -214, 448, -214, 448, -297, -214, 30, -392,
	239, 307, 53, 339, -392, -391, 447, 447, 448, -447,
	416, -293, -447, -293, -416, 22, 245, 101, -442, -242,
	-242, -156, 53, 307, 2, -213, -213, 448, 448, -214,
	-214, -214, 380, -447, -447, 447, -242, 448, -214,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 339, 340,
	342, 343, 344, 346, 347, 349, 351, 353, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	416, 0, 842, 844, 846, 848, 27, 28, 0, 0,
	171, 173, 175, 0, 200, 202, 204, 205, 207, -2,
	0, 293, 294, 296, 298, -2, -2, 0, 0, 403,
	405, 0, 0, 425, 426, 0, 932, -2, 419, 421,
	423, 486, 488, 490, 492, 494, 496, 498, 499, 501,
	503, 505, 507, 509, 511, 513, 515, 517, 519, 521,
	523, 525, 527, 529, 531, 533, -2, -2, -2, 0,
	-2, -2, -2, 860, 31, 33, 35, 37, 39, 41,
	59, 256, 257, 259, 261, 263, 266, 267, 269, 971,
	300, 302, 304, 306, 308, 0, -2, 985, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 947, 949, 951, 953, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 341, 345,
	348, 350, 352, 354, 357, 359, 365, 367, 369, 737,
	1572, 1586, 1587, 1588, 1591, 1592, 1593, 1594, 1595, 1596,
	1922, 2002, 2003, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
	1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 0, 381, 379, 1566, 382, 1759, 384,
	386, 287, 288, 289, 290, 291, 292, 0, 154, 0,
	396, 390, 395, 397, 399, 400, 401, 402, 376, 374,
	0, 396, 1618, 394, 840, 841, 835, 836, 1792, 870,
	415, -2, -2, -2, 1891, -2, 447, -2, 454, 1894,
	1794, 457, 0, 459, -2, 462, 843, 845, 847, 29,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, -2, -2, -2, -2, 0, 0, 1652, 1543, 1588,
	1546, 1541, 172, 174, 176, 177, 0, 0, 0, 0,
	0, 0, 201, 203, 206, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 661, 0, 0, 666, 788, 789,
	810, 0, 0, 0, 0, 295, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 234, 333, 334, 0, 972, 0, 0,
	0, 152, 145, 0, 0, 649, 404, 406, 0, 144,
	0, 0, 839, 0, 0, 420, 422, 424, 487, 489,
	491, 493, 495, 497, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 524, 526, 528, 530,
	532, 534, 535, 0, 0, 0, 0, 0, 539, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 538, 540, 541, 542, 0, 587, 631,
	632, 0, 779, 973, 872, 850, 863, 872, 852, 853,
	854, 855, 856, 861, 862, 865, 0, 857, 858, 859,
	32, 34, 36, 38, 40, 42, 258, 260, 262, 264,
	268, 270, -2, 945, 946, 301, 303, 305, 307, 309,
	407, 0, 409, 0, 539, 936, 0, -2, 0, 977,
	977, 977, 0, 0, 946, 944, 0, 412, 413, 466,
	467, 1206, 0, 0, 0, 0, 0, 1441, 1290, 0,
	468, -2, 1321, 1323, 1870, 1891, 1440, 1325, 1326, 1327,
	1328, 1329, 0, 0, 1332, 0, 1334, 1335, 1336, 1337,
	0, 1339, 0, 1343, 1344, 1345, 0, 1875, 1520, 1584,
	-2, 1111, 1112, 1113, 1114, 1115, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1580, 0, 1412, 1359, -2, 1605,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1661, -2, -2, -2, -2, -2, -2, -2,
	1167, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1905, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	0, 1859, 1876, 1877, 1882, 1884, 1878, 1867, 1382, -2,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1168, -2, 1871, 1872, 1887,
	1888, 1893, 1898, 1899, 1874, 1883, -2, -2, 963, 1767,
	966, 737, 964, 948, 950, 0, 952, 0, 0, 0,
	957, 980, 978, 0, 1016, 961, 962, 972, 1033, 1056,
	0, 1038, 0, 1056, 1082, 0, 1043, 1787, 1360, 1361,
	0, 1588, 1585, -2, 0, 0, 0, 0, 0, 0,
	197, 377, 0, 383, 385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 417, 418, 0, 442, 0,
	446, 1866, -2, -2, 450, 873, 877, 878, 879, 880,
	0, 0, 0, 0, 0, 456, 0, 0, 443, 444,
	460, 463, 0, 50, 0, 1876, 1082, 51, 0, 1556,
	1610, 1611, 1612, 1613, 1614, 1905, 1921, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 53, 0, 1876, 56,
	0, 1876, 0, -2, 60, 0, 1876, 155, 156, 1601,
	1602, 1606, 1607, 1608, 1609, 63, 0, 1562, 65, 0,
	1559, 73, 0, 1876, 0, 1540, -2, 0, 0, 641,
	1537, 1542, 642, 1547, 0, 178, 179, 180, 181, 182,
	1876, 184, 185, 0, 187, 188, 1876, 190, 191, 0,
	193, 209, 210, 0, 212, 0, 1876, 0, 0, 0,
	218, -2, 235, 0, 232, 0, 222, 223, 225, 226,
	227, 228, 229, 0, 0, 0, 794, 274, 272, 1567,
	0, -2, 1876, 782, 785, 1876, 787, 799, 1570, 0,
	-2, 0, 970, 1876, 887, 662, 663, 664, 665, 0,
	286, 0, 900, 0, 902, 0, 922, 1088, 1033, 236,
	237, 238, 239, 240, 1876, 0, 0, 0, 245, 0,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 137,
	1876, 312, 331, 137, 1876, 315, 137, 1876, 318, 137,
	1876, 321, 1535, 137, 1876, 324, 325, 1876, 327, 157,
	328, 1876, 330, 0, -2, 370, 1574, -2, 336, 0,
	-2, 0, 169, 0, 647, 648, 0, 837, 838, 0,
	427, 0, 0, 536, 537, 0, 0, 547, 548, 549,
	550, 1765, 1676, 553, 0, 556, 577, 591, 0, 0,
	0, 560, 562, 646, 564, 0, 0, 566, 0, 568,
	0, 570, 0, 572, 0, 574, 576, 578, 592, 580,
	0, 0, 0, 590, 0, 595, 596, 0, 0, 601,
	0, 604, 605, 606, 0, 608, 609, 610, 611, 0,
	613, 614, -2, -2, 618, 620, 0, 626, 0, 630,
	0, 543, 544, 137, 1086, 849, -2, 851, 0, 867,
	939, -2, 0, 408, 0, 411, 943, 937, 942, 994,
	995, 0, 0, 0, 0, 975, 976, 0, 0, 0,
	934, 935, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	1450, 1451, 1454, 1455, 1452, 1453, 1456, 1457, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 1461, 0, 0,
	1463, 0, 1465, 0, 0, 0, 0, 0, 0, 1269,
	1271, 1528, 0, 0, 1462, 1211, 1212, 1213, 1248, 1249,
	0, 0, 1322, 1525, 1524, 1324, 0, 1477, 0, 1331,
	0, 1203, 1338, 1553, -2, 0, 1441, 1472, 0, 0,
	1346, 1347, 1348, 0, 0, 1477, 0, 0, 1519, 0,
	1414, 0, 1147, 0, 1148, 1149, 0, 1150, 1151, 1164,
	1177, 0, 0, 0, 0, 1181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1169, 0, 0, 0, 1500, -2, 0, 0,
	0, 0, 0, 965, 0, 0, 1020, 1529, 1533, 1534,
	1020, 1020, 0, 0, 1478, 0, 1079, 0, 0, 1075,
	1075, 1075, 1073, 1050, 0, 1056, 0, 1066, 0, 1056,
	1056, 0, -2, 1038, 0, 0, 1066, 1083, 1084, 0,
	0, 0, 0, 0, 0, 1589, 0, 0, 0, 1576,
	0, 0, 169, 0, 388, 398, 972, 0, 1480, 1102,
	1098, 1105, 1106, 1107, 1108, 1154, 1155, 1156, 1157, 1158,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, -2, 1165, 1167,
	1188, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1160, 0, 1135, 1135, 1135, 1152, 1153, 1176,
	1187, 1179, 1187, 1183, 1103, 1104, 1170, 1171, 1172, 1173,
	0, 392, 0, 0, 0, 0, -2, 452, 0, 875,
	0, 881, 477, 478, 479, 883, 884, 0, 455, 480,
	481, 482, 483, 484, 485, 0, 754, 0, 756, 1549,
	0, 453, 470, 458, 0, 464, 74, 832, 103, 0,
	832, 832, 0, 0, 124, 0, 0, 0, 0, 0,
	92, 99, 80, 81, 0, 0, 0, 0, 57, 762,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 777,
	0, 0, 0, 0, 91, 0, 86, 76, 0, 0,
	94, 101, 0, 128, 130, 0, 0, 1069, 640, 0,
	0, 1589, 1545, 0, 0, 0, 0, 211, 213, 0,
	215, 216, 217, 0, 793, 0, 224, 221, 265, 737,
	1876, 761, 1876, 759, 1571, 0, 0, 0, 284, 279,
	0, 281, 780, 0, 969, 0, 0, 0, 0, 800,
	0, 1876, 805, 1558, 1597, 1598, 889, 0, 1094, 0,
	903, 0, 0, 1089, 0, 1091, 0, 242, 243, 244,
	0, 310, 0, 135, 136, 0, 313, 0, 316, 0,
	319, 0, 0, 322, 0, 0, 0, 0, 972, 0,
	0, 0, 147, 0, 0, 0, 0, 169, 169, 1069,
	429, 1069, 431, 0, 0, 551, 552, 554, 555, 557,
	558, 627, 559, 563, 0, 634, 1783, 644, 565, 567,
	569, 571, 573, 0, 582, 0, 584, 0, 586, 598,
	597, 599, 602, 607, 612, 0, 0, 0, 0, 778,
	0, 866, 940, 942, 410, 938, 992, 993, 998, 1002,
	1003, 1006, 1009, 1010, 1000, 1206, 958, 959, 960, 986,
	987, 819, 0, 2002, 1207, 1099, 1208, 1209, 1555, 0,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	-2, -2, -2, -2, -2, -2, -2, -2, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, -2,
	-2, -2, 1246, 1247, -2, 1464, 1466, 0, 1528, 0,
	-2, 0, -2, -2, -2, -2, 1266, 0, 1268, 1273,
	1275, 1277, 0, 0, 0, 0, 1527, 1287, 1511, 1512,
	0, 0, 1443, 1444, 1445, 1272, 0, 1291, 1526, 1523,
	0, 0, 1476, 983, 1350, 0, 0, 0, 0, 1357,
	0, 1554, 1202, 1189, 1190, 1191, 1192, 1193, 1194, 1204,
	1342, 1474, 0, 1473, 0, 0, 0, 1484, 0, 1518,
	1514, 0, 1577, 1583, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1394, 0, 1487, -2, -2,
	-2, -2, -2, -2, -2, 0, 1396, 0, 1398, 1478,
	1497, 0, 0, 1292, 0, 0, 0, 1441, 0, 1401,
	1478, 1505, 0, 0, 0, 0, 0, 1478, 0, 1510,
	0, 1408, 0, 1410, 967, 0, 0, 1094, 0, 0,
	0, 1532, 1094, 1094, 0, 1015, 0, 0, 0, 1076,
	1077, 1078, 0, 1079, 0, 1070, 1074, 1071, 1072, 0,
	0, 1056, 1066, 1030, 0, 0, 1557, 1036, 1065, 0,
	737, 1055, 1066, 1066, 0, -2, 1040, 0, 0, 983,
	-2, 170, 736, 0, 0, 0, 0, 378, 380, 0,
	0, 0, 372, 0, 375, 0, 1095, 1097, 0, 1109,
	0, 0, -2, 0, 0, 0, 0, 0, 445, 0,
	874, 882, 0, 474, 0, 476, 0, 755, 1551, 1550,
	0, 465, 0, 0, 0, 0, 831, 107, 1876, 0,
	139, 0, 0, 721, 1563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 763, 764, 766, 772,
	774, 0, 768, 1552, 0, 769, 0, 771, 773, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 1539, 160, 1068, 1538, 1548, 0,
	183, 186, 189, 192, 0, 219, 0, 0, 669, 652,
	0, 757, 760, 0, 737, 792, 1569, 0, 273, 169,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 798,
	0, 0, 0, 1876, 891, 897, 0, 985, 1093, 0,
	920, 905, 0, 0, 0, 920, 924, 925, 927, 928,
	0, 0, 1090, 0, 246, 332, 137, 137, 137, 1536,
	137, 137, 158, 326, 329, 335, 371, 972, 169, 167,
	1746, 165, 162, 164, 0, 0, 0, 670, 672, 673,
	674, 675, 0, 1598, 0, 1705, 1598, 142, 169, 278,
	428, 433, 545, 0, 645, 643, 581, 0, 0, 0,
	594, 0, 0, 0, 0, 0, 628, 629, 633, 1087,
	941, 0, 1004, 0, 1001, 1007, 1008, 0, 989, 817,
	818, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1288, 0, -2, 1267, 1270, 1274, 1276, 1278, 0, 0,
	0, 0, 0, 0, 1467, 0, 1469, 1289, 1521, 1524,
	1439, 0, 0, 982, 983, 983, 983, 1356, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 1482, 1483, 0,
	1349, 0, 1515, 0, 0, 0, 1358, 0, 0, 0,
	1159, 1133, 0, 1187, 1185, 1186, 1180, 1187, 1184, 0,
	0, 0, 0, 0, 1377, 0, 0, 0, 1381, 1393,
	0, 1395, 1397, 0, 0, 1399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	1296, 1297, 1400, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1406, 0, 1509, 1407, 1409, 972, 1017, 1012, 1530,
	1069, 1019, 1021, 1531, 1560, 1012, 1012, 0, 1479, 1058,
	0, 1060, 0, 0, 0, 1062, 0, 1051, 0, 1053,
	1066, 1035, 0, 0, 1028, 0, 1025, 1026, 1027, 737,
	1064, 1037, 1041, 1577, 0, 1085, 0, 1045, 1048, 0,
	0, 1590, 194, 198, 199, 195, 196, 0, 387, 0,
	0, 1481, 0, 1100, 0, 0, 0, 0, 0, 391,
	0, 441, -2, 472, 473, 475, 0, 471, 104, 832,
	0, 0, 823, 0, 109, 1876, 118, 0, 698, 0,
	1561, 0, 0, 0, 0, 834, 0, 1876, 137, 1876,
	137, 120, 123, 0, 127, 125, 0, 0, 689, 75,
	832, 78, 84, 0, 0, 0, 90, 0, 825, 0,
	767, 770, 776, 58, 0, 827, 821, 0, 820, 129,
	79, 85, 0, 829, 77, 0, 169, 0, 1544, 0,
	0, 0, 0, 668, -2, 0, 0, 0, 0, 0,
	0, 1069, 275, 0, 277, 283, 282, 783, -2, 786,
	795, 0, 797, 809, 0, 0, 0, 893, 897, 0,
	896, 970, 997, 984, 1092, 898, 920, 0, 0, 0,
	908, 910, 907, 904, 901, 1094, 0, 0, 0, 0,
	0, 241, 311, 314, 317, 320, 323, 337, 146, 0,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	1598, 1598, 0, 1565, 143, 430, 0, 0, 583, 585,
	598, 621, 622, 684, 0, 625, 0, 0, 988, 819,
	0, 1210, 1251, 0, 0, -2, 0, 0, 1255, 0,
	0, 0, -2, 0, 0, 0, 1468, 1470, 0, 1523,
	1351, 0, 0, 0, 0, 1333, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 0, 1340, 1341, 1442, 1485, 1513, 1517,
	0, 1578, 1582, 1420, 1421, 1425, 1568, 0, 0, 0,
	1178, 1182, 1362, 0, 0, 0, 0, 0, 0, 0,
	1486, 1496, 1498, 1293, 1294, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, -2, -2, -2, 1311, 1312,
	1313, -2, -2, -2, 0, 0, 0, 1499, 1501, 1502,
	1506, 1507, 0, 1403, 1404, 1405, 1508, 0, 1014, 0,
	1018, 0, 1014, 1014, 979, 0, 0, 1081, 0, 1033,
	1052, 0, 1042, 1031, 0, 1032, 0, 1063, 0, 1039,
	1044, 0, 1047, 0, 1351, -2, 153, 389, 373, 0,
	1101, 1110, 0, 1162, 1166, 393, 1067, 0, 0, 0,
	0, 138, 696, 720, 0, 0, 812, 819, 0, 0,
	111, 0, 0, 0, 119, 0, 116, 0, 122, 126,
	0, 0, 0, 0, 87, 88, 89, 0, 93, 0,
	0, 0, 0, 0, 140, 0, 214, 791, 220, 678,
	0, 653, 0, 737, 761, 0, 271, 0, 781, 796,
	0, 0, 0, 0, 0, 895, 897, 0, 888, 889,
	920, 996, 899, 918, -2, 917, 0, 0, 0, 985,
	926, 923, 929, 930, 0, 166, 0, 161, 163, 0,
	149, 0, 0, 671, 676, 0, 0, 0, 0, 0,
	546, 593, 623, 683, 0, 0, 999, 1005, 990, 819,
	1253, 1257, 0, 0, 0, 1259, -2, 0, 1281, -2,
	-2, 1471, 1522, 1330, 983, 1352, 1354, 1355, 1205, 1516,
	0, 1427, 1424, 0, 1411, 1134, 1372, 1373, 0, 0,
	1376, 1378, 1379, 1380, 1495, 0, 0, 0, 0, 1402,
	968, 1416, 0, 0, 1022, 1416, 1416, 1059, 0, 1061,
	1056, 1054, 1029, 1023, 0, 1578, 1046, 0, 0, 1096,
	1161, 105, 106, 108, 0, 697, 0, 700, 0, 0,
	0, 0, 707, 708, 0, 0, 0, 0, 0, 726,
	735, 0, 814, 0, 0, 0, 113, 132, 0, 0,
	833, 0, 137, 137, 0, 0, 824, 0, 0, 0,
	826, 828, 822, 0, 830, 159, 686, 0, 657, 654,
	669, 652, 758, 790, 276, 0, 808, 0, 0, 0,
	885, 897, 0, 890, 891, 285, 0, 0, 0, 906,
	909, 911, 997, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 432, 434, 0, 0, 440, 682, 0, 991,
	1261, -2, -2, 1282, 0, 1579, 1581, 985, 0, 1413,
	0, 0, -2, 0, 0, 0, 954, 0, 1013, 1011,
	955, 956, 1080, 1066, 0, 1049, 110, 0, 701, 702,
	1564, 704, 0, 706, 709, 0, 711, 1600, 0, 715,
	722, 727, 0, 678, 0, 732, 733, 813, 724, 0,
	112, 114, 131, 816, 115, 121, 0, 0, 0, 0,
	1646, 96, 0, 652, 685, 0, 655, 0, 0, 0,
	0, 809, 0, 0, 0, 892, 893, 0, 0, 0,
	920, 931, 148, 0, 0, 735, 0, 0, 719, 0,
	436, 0, 438, 0, 624, 1353, 1431, 0, 1374, 1375,
	-2, 0, 1319, 1415, 1417, 0, 1034, 1024, 699, 703,
	0, 0, 741, 0, 0, 0, 730, 731, 686, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 650,
	0, 658, 0, 678, 0, 735, 0, 735, 0, 894,
	895, 0, 913, 914, 916, 921, 0, 0, 678, 735,
	718, 435, 0, 0, 0, 0, 0, 0, 1426, 1320,
	0, 0, 0, 710, 746, 0, 0, 0, 728, 729,
	726, 0, 737, 117, 0, 815, 0, 690, 0, 0,
	693, 0, 0, 97, 1646, 95, 0, 0, 659, 686,
	657, 678, 0, 678, 0, 886, 0, 915, 169, 169,
	686, 678, 437, 439, 1423, 1428, 1432, -2, 1840, 1649,
	0, 1429, 1430, 1418, 1419, 0, 712, 742, 743, 0,
	738, 739, 740, 1599, 713, 714, 723, 734, 741, 133,
	687, 0, 0, 688, 0, 0, 100, 0, 102, 0,
	652, 656, 686, 0, 686, 0, 1094, 150, 151, 716,
	686, 0, 1434, 1435, 1436, 1437, 1438, 705, 744, 0,
	745, 0, 0, 0, 746, 691, 0, 694, 0, 98,
	0, 651, 806, 735, 806, 735, 912, 717, 0, 747,
	0, 750, 751, 0, 748, 726, 0, 0, 681, 801,
	0, 678, 803, 678, 1433, 749, 752, 753, 725, 0,
	0, 677, 679, 680, 807, 686, 686, 686, 0, 806,
	806, 692, 0, 802, 804, 0, 0, 686, 695,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 436, 3, 442, 437, 3,
	447, 448, 440, 438, 451, 439, 449, 441, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 455, 3,
	428, 430, 429, 432, 452, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 445, 3, 446, 443, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 453, 435, 454, 433,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 431, 57771, 434, 57772, 444, 57773, 450, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1038
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1043
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1049
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1051
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1052
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1053
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1054
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1059
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1159
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1164
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1230
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1234
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1239
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1246
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1256
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1263
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1273
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1296
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1303
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1311
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1316
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1320
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1331
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1339
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1348
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1360
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1370
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1374
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1388
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1393
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1404
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1410
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1421
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1441
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1465
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1468
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1499
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1506
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1509
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1516
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1539
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1546
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1554
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1559
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = nil
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1602
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1612
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1645
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1672
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1675
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1716
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1725
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1731
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1736
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1741
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1745
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1761
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1764
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1772
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1780
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1790
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1794
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1808
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1836
		{
			sqlVAL.union.val = nil
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1842
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1855
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1856
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1857
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1858
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1881
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1900
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1927
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1936
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1944
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1946
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1950
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1953
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1957
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1961
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1966
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1982
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1988
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1992
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2004
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2005
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2007
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2008
		{
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2009
		{
			return helpWith(sqllex, "CREATE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "create cast")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2015
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2016
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2019
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2022
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2023
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			return unimplemented(sqllex, "create operator")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2026
		{
			return unimplemented(sqllex, "create publication")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2027
		{
			return unimplemented(sqllex, "create rule")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2028
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2029
		{
			return unimplemented(sqllex, "create server")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2030
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2031
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2032
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2035
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2036
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2039
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2040
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2043
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2044
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "drop server")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2070
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2071
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2076
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2077
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2104
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2110
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2124
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2132
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2142
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2146
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2152
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2167
		{

			sqlVAL.union.val = nil
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2181
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2191
		{
			return helpWith(sqllex, "DELETE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2214
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2215
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2216
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2217
		{
			return helpWith(sqllex, "DROP")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2220
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2222
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2223
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2224
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2266
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2300
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2308
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2327
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2342
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2349
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2354
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2377
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2382
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2404
		{
			return helpWith(sqllex, "DELETE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2407
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "INSERT")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2415
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2420
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2421
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2422
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2448
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2456
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2464
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2481
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2493
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2519
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2546
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "GRANT")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2593
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2604
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "RESET")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2623
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2631
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2638
		{
			return helpWith(sqllex, "RESET")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2646
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2649
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2660
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "USE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2668
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2669
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2670
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2674
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			return helpWith(sqllex, "USE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2707
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2728
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2737
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2751
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2761
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2765
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2773
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2801
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2817
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2821
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2848
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2851
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2855
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2874
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2881
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2887
		{
			return unimplemented(sqllex, "set from current")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2896
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2901
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2976
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = tree.Low
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2986
		{
			sqlVAL.union.val = tree.Normal
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2990
		{
			sqlVAL.union.val = tree.High
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3001
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3005
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3051
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			return helpWith(sqllex, "SHOW")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3076
		{
			sqlVAL.str = "client_encoding"
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.str = "timezone"
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3094
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3099
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3104
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3115
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3132
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3139
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3147
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3154
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3164
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3168
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3171
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3173
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3184
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3212
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3228
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3232
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3234
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3240
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3244
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3252
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3256
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3258
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3270
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3273
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3279
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3289
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3301
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3306
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3309
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3311
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = true
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3319
		{
			sqlVAL.union.val = false
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3346
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3372
		{
			sqlVAL.union.val = true
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3373
		{
			sqlVAL.union.val = false
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3387
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3394
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3412
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3425
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3430
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3434
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3442
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3447
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3468
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3479
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3491
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3498
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3506
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3527
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3543
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3551
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3556
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3676
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3680
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3684
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3723
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3727
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3732
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3736
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3745
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3752
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3768
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3780
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3816
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3829
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3843
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3844
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3845
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3849
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3861
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3874
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3875
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3876
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3890
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3891
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3892
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3893
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3894
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3895
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3896
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3897
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3902
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3908
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3918
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3924
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3931
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3940
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3947
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3952
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3957
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3963
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.str = ""
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3977
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3983
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3997
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4003
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4033
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4044
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4107
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4111
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4123
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4127
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4131
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4141
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4145
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4156
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4166
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4178
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4200
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4211
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4228
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4238
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4250
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4251
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4252
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4253
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4254
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4255
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4272
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4276
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4331
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4349
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4355
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4363
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4371
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4389
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4414
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4419
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4423
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4427
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4434
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4438
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4439
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4442
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4444
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4446
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4449
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4452
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4456
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4467
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4482
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = nil
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4507
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4512
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4513
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4521
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4529
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4530
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4533
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4534
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4540
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4542
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4544
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4546
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4548
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4550
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4566
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4580
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4595
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4609
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4623
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4626
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4627
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4631
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = false
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = true
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = false
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4675
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4686
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4695
		{
			sqlVAL.union.val = tree.Descending
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4699
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4705
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4722
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4728
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4736
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4742
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4750
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4756
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4773
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4774
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4778
		{
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4789
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4811
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4819
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4822
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4826
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4827
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4828
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4844
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4847
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4852
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4865
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4867
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4870
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4874
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4879
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4880
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4881
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4889
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4899
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4900
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4904
		{
			sqlVAL.str = ""
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.str = ""
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4936
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4946
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4959
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4961
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4965
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4970
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4978
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4990
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5030
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5038
		{
			sqlVAL.str = ""
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.str = ""
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5054
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.str = ""
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.str = ""
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5073
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5093
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5100
		{
			return helpWith(sqllex, "INSERT")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5118
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5122
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5131
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5176
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5190
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5193
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5194
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5196
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5202
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 921:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5228
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5239
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5243
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5244
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5268
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5272
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5340
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5356
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5365
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5366
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5371
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5406
		{
			return helpWith(sqllex, "SELECT")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5407
		{
			return helpWith(sqllex, "VALUES")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5408
		{
			return helpWith(sqllex, "TABLE")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5469
		{
			return helpWith(sqllex, "SELECT")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5482
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5491
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5513
		{
			return helpWith(sqllex, "TABLE")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5525
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5529
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5533
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5555
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5556
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5560
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5564
		{
			sqlVAL.union.val = nil
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5569
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5570
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5574
		{
			sqlVAL.union.val = true
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.union.val = false
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5582
		{
			sqlVAL.union.val = false
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = true
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5594
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5599
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5600
		{
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5603
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5604
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5624
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5638
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5643
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5658
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5667
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5678
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5682
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5697
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5704
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5711
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5720
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5728
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5734
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5735
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5738
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5739
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5792
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5794
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5809
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5831
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5836
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5841
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5853
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5858
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5878
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = flags
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5917
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5931
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5948
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5958
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5962
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6000
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6006
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6008
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6011
		{
			sqlVAL.union.val = nil
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6012
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6017
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = true
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = false
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6067
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6071
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6077
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6107
		{
			sqlVAL.str = tree.AstFull
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.str = tree.AstRight
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.str = tree.AstInner
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6125
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6126
		{
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.str = tree.AstHash
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6151
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6155
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6159
		{
			sqlVAL.str = ""
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6188
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6193
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6211
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6217
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6225
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6242
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6254
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6268
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6277
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6301
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6321
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6322
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6339
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6347
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6351
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6355
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6363
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6399
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6403
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6407
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6442
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6446
		{
			sqlVAL.union.val = nil
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6457
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6489
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6493
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6497
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6501
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6505
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6553
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6559
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6574
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6580
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6586
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6608
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6621
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = true
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = false
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6658
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6663
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6670
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6671
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6673
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6681
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6697
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = true
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6707
		{
			sqlVAL.union.val = false
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = false
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6712
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = tree.Year
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = tree.Month
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = tree.Day
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = tree.Month
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6748
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6756
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6760
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6764
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6775
		{
			sqlVAL.union.val = nil
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
			sqlVAL.union.val = tree.Second
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6784
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6819
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6828
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6833
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6837
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6841
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6845
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6889
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6893
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6897
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7072
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7106
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7138
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7160
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7188
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7220
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7244
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7354
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7359
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7368
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7386
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7395
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7434
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7438
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7445
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7446
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7459
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7470
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7491
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7511
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7579
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7591
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7599
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7604
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7609
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7614
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7623
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7624
		{
			return unimplemented(sqllex, "treat")
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7645
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7650
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7655
		{
			return unimplemented(sqllex, "within group")
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7656
		{
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7691
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.str = ""
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7782
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7795
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7869
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = tree.Any
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = tree.Some
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = tree.All
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = tree.Div
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = tree.LT
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = tree.GT
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = tree.LE
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = tree.GE
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = tree.NE
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = tree.Like
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8229
		{
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8230
		{
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8302
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8310
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8376
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8387
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8398
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8408
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8576
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8600
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.str = ""
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8633
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8637
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
