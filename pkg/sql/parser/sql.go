// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7768

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	413, 55,
	-2, 853,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	163, 691,
	-2, 0,
	-1, 58,
	101, 853,
	167, 853,
	361, 853,
	362, 853,
	-2, 0,
	-1, 71,
	112, 827,
	124, 827,
	175, 827,
	201, 827,
	230, 827,
	238, 827,
	358, 827,
	-2, 816,
	-1, 106,
	191, 521,
	349, 521,
	-2, 0,
	-1, 111,
	4, 855,
	20, 855,
	21, 855,
	22, 855,
	23, 855,
	25, 855,
	30, 855,
	35, 855,
	36, 855,
	37, 855,
	38, 855,
	39, 855,
	40, 855,
	41, 855,
	42, 855,
	43, 855,
	44, 855,
	46, 855,
	47, 855,
	48, 855,
	49, 855,
	50, 855,
	51, 855,
	54, 855,
	55, 855,
	56, 855,
	58, 855,
	59, 855,
	63, 855,
	64, 855,
	65, 855,
	66, 855,
	67, 855,
	69, 855,
	70, 855,
	71, 855,
	72, 855,
	74, 855,
	76, 855,
	77, 855,
	80, 855,
	81, 855,
	82, 855,
	90, 855,
	91, 855,
	92, 855,
	93, 855,
	94, 855,
	95, 855,
	96, 855,
	97, 855,
	99, 855,
	101, 855,
	103, 855,
	106, 855,
	107, 855,
	109, 855,
	113, 855,
	114, 855,
	115, 855,
	116, 855,
	117, 855,
	118, 855,
	119, 855,
	120, 855,
	121, 855,
	129, 855,
	130, 855,
	131, 855,
	132, 855,
	133, 855,
	135, 855,
	137, 855,
	141, 855,
	143, 855,
	144, 855,
	146, 855,
	148, 855,
	149, 855,
	150, 855,
	151, 855,
	152, 855,
	153, 855,
	154, 855,
	155, 855,
	158, 855,
	162, 855,
	164, 855,
	167, 855,
	168, 855,
	169, 855,
	170, 855,
	171, 855,
	172, 855,
	173, 855,
	174, 855,
	176, 855,
	178, 855,
	181, 855,
	182, 855,
	183, 855,
	185, 855,
	186, 855,
	189, 855,
	190, 855,
	191, 855,
	193, 855,
	194, 855,
	196, 855,
	198, 855,
	199, 855,
	202, 855,
	203, 855,
	206, 855,
	208, 855,
	211, 855,
	212, 855,
	213, 855,
	214, 855,
	215, 855,
	217, 855,
	218, 855,
	219, 855,
	220, 855,
	225, 855,
	226, 855,
	227, 855,
	228, 855,
	229, 855,
	231, 855,
	232, 855,
	234, 855,
	235, 855,
	236, 855,
	239, 855,
	240, 855,
	242, 855,
	244, 855,
	245, 855,
	246, 855,
	247, 855,
	248, 855,
	249, 855,
	250, 855,
	251, 855,
	253, 855,
	254, 855,
	255, 855,
	256, 855,
	257, 855,
	259, 855,
	260, 855,
	261, 855,
	262, 855,
	263, 855,
	264, 855,
	265, 855,
	266, 855,
	268, 855,
	269, 855,
	270, 855,
	271, 855,
	272, 855,
	274, 855,
	275, 855,
	276, 855,
	277, 855,
	278, 855,
	279, 855,
	280, 855,
	282, 855,
	285, 855,
	286, 855,
	287, 855,
	288, 855,
	289, 855,
	291, 855,
	292, 855,
	293, 855,
	294, 855,
	295, 855,
	296, 855,
	297, 855,
	299, 855,
	300, 855,
	301, 855,
	302, 855,
	303, 855,
	304, 855,
	305, 855,
	306, 855,
	307, 855,
	309, 855,
	310, 855,
	311, 855,
	312, 855,
	314, 855,
	315, 855,
	316, 855,
	317, 855,
	319, 855,
	320, 855,
	321, 855,
	322, 855,
	323, 855,
	324, 855,
	325, 855,
	326, 855,
	327, 855,
	329, 855,
	330, 855,
	332, 855,
	333, 855,
	335, 855,
	336, 855,
	337, 855,
	338, 855,
	339, 855,
	340, 855,
	341, 855,
	342, 855,
	344, 855,
	345, 855,
	346, 855,
	349, 855,
	350, 855,
	351, 855,
	352, 855,
	354, 855,
	355, 855,
	356, 855,
	357, 855,
	360, 855,
	361, 855,
	362, 855,
	363, 855,
	365, 855,
	367, 855,
	368, 855,
	369, 855,
	370, 855,
	371, 855,
	372, 855,
	375, 855,
	381, 855,
	382, 855,
	384, 855,
	385, 855,
	386, 855,
	-2, 0,
	-1, 131,
	112, 826,
	124, 826,
	175, 826,
	201, 826,
	230, 826,
	238, 826,
	358, 826,
	-2, 819,
	-1, 136,
	1, 749,
	181, 749,
	259, 749,
	263, 749,
	412, 749,
	413, 749,
	-2, 0,
	-1, 138,
	1, 749,
	412, 749,
	413, 749,
	-2, 0,
	-1, 139,
	1, 749,
	412, 749,
	413, 749,
	-2, 0,
	-1, 140,
	1, 753,
	412, 753,
	413, 753,
	-2, 0,
	-1, 166,
	4, 862,
	5, 862,
	6, 862,
	7, 862,
	8, 862,
	9, 862,
	20, 862,
	21, 862,
	22, 862,
	23, 862,
	25, 862,
	30, 862,
	31, 862,
	35, 862,
	36, 862,
	37, 862,
	38, 862,
	39, 862,
	40, 862,
	41, 862,
	42, 862,
	43, 862,
	44, 862,
	46, 862,
	47, 862,
	48, 862,
	49, 862,
	50, 862,
	51, 862,
	52, 862,
	53, 862,
	54, 862,
	55, 862,
	56, 862,
	58, 862,
	59, 862,
	61, 862,
	63, 862,
	64, 862,
	65, 862,
	66, 862,
	67, 862,
	69, 862,
	70, 862,
	71, 862,
	72, 862,
	74, 862,
	76, 862,
	77, 862,
	79, 862,
	80, 862,
	81, 862,
	82, 862,
	83, 862,
	84, 862,
	85, 862,
	86, 862,
	88, 862,
	89, 862,
	90, 862,
	91, 862,
	92, 862,
	93, 862,
	94, 862,
	95, 862,
	96, 862,
	97, 862,
	98, 862,
	99, 862,
	101, 862,
	103, 862,
	106, 862,
	107, 862,
	109, 862,
	113, 862,
	114, 862,
	115, 862,
	116, 862,
	117, 862,
	118, 862,
	119, 862,
	120, 862,
	121, 862,
	122, 862,
	123, 862,
	129, 862,
	130, 862,
	131, 862,
	132, 862,
	133, 862,
	135, 862,
	137, 862,
	140, 862,
	141, 862,
	143, 862,
	144, 862,
	146, 862,
	148, 862,
	149, 862,
	150, 862,
	151, 862,
	152, 862,
	153, 862,
	154, 862,
	155, 862,
	156, 862,
	158, 862,
	162, 862,
	164, 862,
	166, 862,
	167, 862,
	168, 862,
	169, 862,
	170, 862,
	171, 862,
	172, 862,
	173, 862,
	174, 862,
	176, 862,
	178, 862,
	179, 862,
	180, 862,
	181, 862,
	182, 862,
	183, 862,
	184, 862,
	185, 862,
	186, 862,
	189, 862,
	190, 862,
	191, 862,
	193, 862,
	194, 862,
	196, 862,
	197, 862,
	198, 862,
	199, 862,
	200, 862,
	202, 862,
	203, 862,
	206, 862,
	208, 862,
	209, 862,
	210, 862,
	211, 862,
	212, 862,
	213, 862,
	214, 862,
	215, 862,
	216, 862,
	217, 862,
	218, 862,
	219, 862,
	220, 862,
	221, 862,
	223, 862,
	224, 862,
	225, 862,
	226, 862,
	227, 862,
	228, 862,
	229, 862,
	231, 862,
	232, 862,
	235, 862,
	236, 862,
	239, 862,
	240, 862,
	241, 862,
	242, 862,
	243, 862,
	244, 862,
	245, 862,
	246, 862,
	247, 862,
	248, 862,
	249, 862,
	250, 862,
	251, 862,
	253, 862,
	254, 862,
	255, 862,
	256, 862,
	257, 862,
	259, 862,
	260, 862,
	261, 862,
	262, 862,
	263, 862,
	264, 862,
	265, 862,
	266, 862,
	268, 862,
	269, 862,
	270, 862,
	271, 862,
	272, 862,
	274, 862,
	275, 862,
	276, 862,
	277, 862,
	278, 862,
	279, 862,
	280, 862,
	282, 862,
	283, 862,
	285, 862,
	286, 862,
	287, 862,
	288, 862,
	289, 862,
	291, 862,
	292, 862,
	293, 862,
	294, 862,
	295, 862,
	296, 862,
	297, 862,
	299, 862,
	300, 862,
	301, 862,
	302, 862,
	303, 862,
	304, 862,
	305, 862,
	306, 862,
	307, 862,
	308, 862,
	309, 862,
	310, 862,
	311, 862,
	312, 862,
	313, 862,
	314, 862,
	315, 862,
	316, 862,
	317, 862,
	319, 862,
	320, 862,
	321, 862,
	322, 862,
	323, 862,
	324, 862,
	325, 862,
	326, 862,
	327, 862,
	329, 862,
	330, 862,
	332, 862,
	333, 862,
	335, 862,
	336, 862,
	337, 862,
	338, 862,
	339, 862,
	340, 862,
	341, 862,
	342, 862,
	344, 862,
	345, 862,
	346, 862,
	349, 862,
	350, 862,
	351, 862,
	352, 862,
	353, 862,
	354, 862,
	355, 862,
	356, 862,
	357, 862,
	360, 862,
	361, 862,
	362, 862,
	363, 862,
	364, 862,
	365, 862,
	367, 862,
	368, 862,
	369, 862,
	370, 862,
	371, 862,
	372, 862,
	375, 862,
	381, 862,
	382, 862,
	384, 862,
	385, 862,
	386, 862,
	387, 862,
	395, 862,
	400, 862,
	401, 862,
	402, 862,
	409, 862,
	415, 862,
	-2, 0,
	-1, 169,
	1, 55,
	413, 55,
	-2, 853,
	-1, 580,
	139, 1523,
	347, 1523,
	392, 1523,
	411, 1523,
	-2, 0,
	-1, 581,
	139, 1452,
	347, 1452,
	392, 1452,
	411, 1452,
	-2, 0,
	-1, 583,
	139, 1595,
	347, 1595,
	392, 1595,
	411, 1595,
	-2, 0,
	-1, 585,
	139, 1623,
	347, 1623,
	392, 1623,
	411, 1623,
	-2, 0,
	-1, 592,
	139, 1528,
	347, 1528,
	392, 1528,
	411, 1528,
	-2, 397,
	-1, 626,
	1, 492,
	408, 492,
	410, 492,
	412, 492,
	413, 492,
	-2, 0,
	-1, 627,
	1, 560,
	136, 560,
	408, 560,
	410, 560,
	412, 560,
	413, 560,
	-2, 0,
	-1, 633,
	1, 507,
	408, 507,
	410, 507,
	412, 507,
	413, 507,
	-2, 0,
	-1, 635,
	1, 511,
	408, 511,
	410, 511,
	412, 511,
	413, 511,
	-2, 0,
	-1, 638,
	1, 522,
	408, 522,
	410, 522,
	412, 522,
	413, 522,
	-2, 0,
	-1, 639,
	1, 528,
	408, 528,
	410, 528,
	412, 528,
	413, 528,
	-2, 0,
	-1, 640,
	1, 531,
	408, 531,
	410, 531,
	412, 531,
	413, 531,
	-2, 0,
	-1, 644,
	1, 545,
	408, 545,
	410, 545,
	412, 545,
	413, 545,
	-2, 0,
	-1, 645,
	1, 547,
	408, 547,
	410, 547,
	412, 547,
	413, 547,
	-2, 0,
	-1, 671,
	124, 864,
	201, 864,
	230, 864,
	-2, 822,
	-1, 679,
	124, 863,
	201, 863,
	230, 863,
	-2, 820,
	-1, 706,
	409, 1693,
	-2, 1137,
	-1, 707,
	409, 1694,
	-2, 1138,
	-1, 738,
	409, 1410,
	-2, 1401,
	-1, 739,
	5, 995,
	409, 1423,
	-2, 1414,
	-1, 740,
	409, 1424,
	-2, 1415,
	-1, 747,
	5, 979,
	-2, 1444,
	-1, 748,
	5, 980,
	-2, 1448,
	-1, 749,
	5, 981,
	-2, 1447,
	-1, 750,
	5, 982,
	-2, 1619,
	-1, 751,
	5, 983,
	-2, 1530,
	-1, 752,
	5, 984,
	-2, 1588,
	-1, 753,
	5, 985,
	-2, 1590,
	-1, 754,
	5, 986,
	-2, 1591,
	-1, 755,
	5, 987,
	-2, 1592,
	-1, 756,
	5, 988,
	-2, 1600,
	-1, 757,
	5, 989,
	-2, 1631,
	-1, 758,
	5, 990,
	-2, 1501,
	-1, 759,
	5, 991,
	-2, 1443,
	-1, 760,
	5, 992,
	-2, 1538,
	-1, 761,
	5, 993,
	-2, 1539,
	-1, 762,
	5, 994,
	-2, 1504,
	-1, 763,
	5, 1041,
	409, 1041,
	-2, 1664,
	-1, 780,
	5, 1016,
	-2, 1445,
	-1, 781,
	5, 1034,
	-2, 1472,
	-1, 783,
	5, 1008,
	-2, 1488,
	-1, 784,
	5, 1009,
	-2, 1489,
	-1, 785,
	5, 1000,
	-2, 1503,
	-1, 786,
	5, 1001,
	-2, 1505,
	-1, 787,
	5, 1002,
	-2, 1506,
	-1, 788,
	5, 1003,
	-2, 1507,
	-1, 789,
	5, 967,
	-2, 1513,
	-1, 790,
	5, 968,
	-2, 1514,
	-1, 791,
	5, 1031,
	-2, 1609,
	-1, 792,
	5, 1039,
	-2, 1621,
	-1, 793,
	5, 1006,
	-2, 1645,
	-1, 794,
	5, 1033,
	-2, 1646,
	-1, 795,
	5, 1015,
	-2, 1647,
	-1, 796,
	5, 1033,
	-2, 1648,
	-1, 797,
	5, 1033,
	-2, 1649,
	-1, 798,
	5, 998,
	-2, 1652,
	-1, 799,
	5, 998,
	-2, 1653,
	-1, 802,
	5, 1023,
	-2, 1657,
	-1, 804,
	5, 999,
	-2, 1662,
	-1, 805,
	5, 1004,
	-2, 1663,
	-1, 807,
	5, 998,
	-2, 1667,
	-1, 810,
	5, 1007,
	-2, 1672,
	-1, 811,
	5, 1005,
	-2, 1674,
	-1, 813,
	5, 1035,
	-2, 1676,
	-1, 814,
	5, 1037,
	-2, 1677,
	-1, 817,
	5, 1030,
	-2, 1681,
	-1, 885,
	409, 1423,
	-2, 1414,
	-1, 902,
	274, 1398,
	402, 1398,
	-2, 1397,
	-1, 1040,
	249, 851,
	-2, 677,
	-1, 1049,
	233, 1418,
	-2, 0,
	-1, 1092,
	1, 261,
	408, 261,
	410, 261,
	412, 261,
	413, 261,
	-2, 825,
	-1, 1095,
	4, 1680,
	10, 1680,
	11, 1680,
	13, 1680,
	14, 1680,
	15, 1680,
	16, 1680,
	17, 1680,
	18, 1680,
	20, 1680,
	21, 1680,
	22, 1680,
	23, 1680,
	25, 1680,
	28, 1680,
	30, 1680,
	32, 1680,
	35, 1680,
	36, 1680,
	37, 1680,
	38, 1680,
	39, 1680,
	40, 1680,
	41, 1680,
	42, 1680,
	43, 1680,
	44, 1680,
	46, 1680,
	47, 1680,
	48, 1680,
	49, 1680,
	50, 1680,
	51, 1680,
	54, 1680,
	55, 1680,
	56, 1680,
	58, 1680,
	59, 1680,
	60, 1680,
	63, 1680,
	64, 1680,
	65, 1680,
	66, 1680,
	67, 1680,
	68, 1680,
	69, 1680,
	70, 1680,
	71, 1680,
	72, 1680,
	74, 1680,
	75, 1680,
	76, 1680,
	77, 1680,
	79, 1680,
	80, 1680,
	81, 1680,
	82, 1680,
	90, 1680,
	91, 1680,
	92, 1680,
	93, 1680,
	94, 1680,
	95, 1680,
	96, 1680,
	97, 1680,
	99, 1680,
	101, 1680,
	103, 1680,
	106, 1680,
	107, 1680,
	109, 1680,
	113, 1680,
	114, 1680,
	115, 1680,
	116, 1680,
	117, 1680,
	118, 1680,
	119, 1680,
	120, 1680,
	121, 1680,
	125, 1680,
	126, 1680,
	127, 1680,
	128, 1680,
	129, 1680,
	130, 1680,
	131, 1680,
	132, 1680,
	133, 1680,
	134, 1680,
	135, 1680,
	137, 1680,
	140, 1680,
	141, 1680,
	143, 1680,
	144, 1680,
	146, 1680,
	148, 1680,
	149, 1680,
	150, 1680,
	151, 1680,
	152, 1680,
	153, 1680,
	154, 1680,
	155, 1680,
	156, 1680,
	157, 1680,
	158, 1680,
	159, 1680,
	160, 1680,
	161, 1680,
	162, 1680,
	164, 1680,
	166, 1680,
	167, 1680,
	168, 1680,
	169, 1680,
	170, 1680,
	171, 1680,
	172, 1680,
	173, 1680,
	174, 1680,
	176, 1680,
	178, 1680,
	179, 1680,
	180, 1680,
	181, 1680,
	182, 1680,
	183, 1680,
	184, 1680,
	185, 1680,
	186, 1680,
	187, 1680,
	188, 1680,
	189, 1680,
	190, 1680,
	191, 1680,
	193, 1680,
	194, 1680,
	196, 1680,
	197, 1680,
	198, 1680,
	199, 1680,
	200, 1680,
	202, 1680,
	203, 1680,
	206, 1680,
	207, 1680,
	208, 1680,
	211, 1680,
	212, 1680,
	213, 1680,
	214, 1680,
	215, 1680,
	216, 1680,
	217, 1680,
	218, 1680,
	219, 1680,
	220, 1680,
	223, 1680,
	225, 1680,
	226, 1680,
	227, 1680,
	228, 1680,
	229, 1680,
	231, 1680,
	232, 1680,
	235, 1680,
	236, 1680,
	237, 1680,
	239, 1680,
	240, 1680,
	242, 1680,
	244, 1680,
	245, 1680,
	246, 1680,
	247, 1680,
	248, 1680,
	249, 1680,
	250, 1680,
	251, 1680,
	253, 1680,
	254, 1680,
	255, 1680,
	256, 1680,
	257, 1680,
	259, 1680,
	260, 1680,
	261, 1680,
	262, 1680,
	263, 1680,
	264, 1680,
	265, 1680,
	266, 1680,
	268, 1680,
	269, 1680,
	270, 1680,
	271, 1680,
	272, 1680,
	273, 1680,
	274, 1680,
	275, 1680,
	276, 1680,
	277, 1680,
	278, 1680,
	279, 1680,
	280, 1680,
	282, 1680,
	283, 1680,
	285, 1680,
	286, 1680,
	287, 1680,
	288, 1680,
	289, 1680,
	290, 1680,
	291, 1680,
	292, 1680,
	293, 1680,
	294, 1680,
	295, 1680,
	296, 1680,
	297, 1680,
	299, 1680,
	300, 1680,
	301, 1680,
	302, 1680,
	303, 1680,
	304, 1680,
	305, 1680,
	306, 1680,
	307, 1680,
	309, 1680,
	310, 1680,
	311, 1680,
	312, 1680,
	313, 1680,
	314, 1680,
	315, 1680,
	316, 1680,
	317, 1680,
	319, 1680,
	320, 1680,
	321, 1680,
	322, 1680,
	323, 1680,
	324, 1680,
	325, 1680,
	326, 1680,
	327, 1680,
	329, 1680,
	330, 1680,
	332, 1680,
	333, 1680,
	335, 1680,
	336, 1680,
	337, 1680,
	338, 1680,
	339, 1680,
	340, 1680,
	341, 1680,
	342, 1680,
	344, 1680,
	345, 1680,
	346, 1680,
	349, 1680,
	350, 1680,
	351, 1680,
	352, 1680,
	354, 1680,
	355, 1680,
	356, 1680,
	357, 1680,
	360, 1680,
	361, 1680,
	362, 1680,
	363, 1680,
	365, 1680,
	367, 1680,
	368, 1680,
	369, 1680,
	370, 1680,
	371, 1680,
	372, 1680,
	375, 1680,
	381, 1680,
	382, 1680,
	384, 1680,
	385, 1680,
	386, 1680,
	387, 1680,
	388, 1680,
	390, 1680,
	391, 1680,
	392, 1680,
	393, 1680,
	394, 1680,
	395, 1680,
	397, 1680,
	398, 1680,
	399, 1680,
	400, 1680,
	401, 1680,
	402, 1680,
	403, 1680,
	404, 1680,
	405, 1680,
	407, 1680,
	410, 1680,
	411, 1680,
	414, 1680,
	415, 1680,
	-2, 0,
	-1, 1113,
	139, 1595,
	347, 1595,
	392, 1595,
	411, 1595,
	-2, 0,
	-1, 1138,
	139, 1623,
	347, 1623,
	392, 1623,
	411, 1623,
	-2, 0,
	-1, 1139,
	181, 761,
	259, 761,
	263, 761,
	-2, 384,
	-1, 1214,
	124, 863,
	201, 863,
	230, 863,
	-2, 823,
	-1, 1298,
	112, 827,
	124, 827,
	175, 827,
	201, 827,
	230, 827,
	238, 827,
	358, 827,
	-2, 1178,
	-1, 1344,
	410, 1293,
	-2, 0,
	-1, 1351,
	181, 761,
	259, 761,
	263, 761,
	-2, 756,
	-1, 1380,
	410, 1293,
	-2, 0,
	-1, 1384,
	112, 827,
	124, 827,
	175, 827,
	201, 827,
	230, 827,
	238, 827,
	358, 827,
	-2, 926,
	-1, 1574,
	181, 761,
	259, 761,
	263, 761,
	-2, 386,
	-1, 1680,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1076,
	-1, 1681,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1077,
	-1, 1682,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1078,
	-1, 1683,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1079,
	-1, 1684,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1080,
	-1, 1685,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1081,
	-1, 1686,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1082,
	-1, 1687,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1083,
	-1, 1699,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1095,
	-1, 1700,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1096,
	-1, 1701,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1097,
	-1, 1704,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1102,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1104,
	-1, 1712,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1108,
	-1, 1713,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1109,
	-1, 1714,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1110,
	-1, 1715,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1111,
	-1, 1791,
	5, 995,
	139, 1304,
	409, 1423,
	-2, 1414,
	-1, 1792,
	139, 1305,
	-2, 1641,
	-1, 1793,
	139, 1306,
	-2, 1527,
	-1, 1794,
	139, 1307,
	-2, 1473,
	-1, 1795,
	139, 1308,
	-2, 1496,
	-1, 1796,
	139, 1309,
	-2, 1526,
	-1, 1797,
	139, 1310,
	-2, 1587,
	-1, 1871,
	1, 927,
	79, 927,
	112, 927,
	124, 927,
	140, 927,
	145, 927,
	147, 927,
	166, 927,
	175, 927,
	184, 927,
	197, 927,
	201, 927,
	216, 927,
	230, 927,
	233, 927,
	238, 927,
	281, 927,
	283, 927,
	358, 927,
	366, 927,
	378, 927,
	379, 927,
	389, 927,
	408, 927,
	410, 927,
	412, 927,
	413, 927,
	414, 927,
	-2, 926,
	-1, 1873,
	409, 1402,
	-2, 1412,
	-1, 1950,
	410, 1361,
	414, 1361,
	-2, 1390,
	-1, 2070,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1103,
	-1, 2071,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1105,
	-1, 2076,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1106,
	-1, 2094,
	243, 1264,
	-2, 1266,
	-1, 2297,
	249, 851,
	-2, 677,
	-1, 2360,
	181, 761,
	259, 761,
	263, 761,
	-2, 383,
	-1, 2375,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1107,
	-1, 2380,
	179, 0,
	180, 0,
	223, 0,
	-2, 1125,
	-1, 2389,
	243, 1265,
	-2, 1267,
	-1, 2438,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1155,
	-1, 2439,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1156,
	-1, 2440,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1157,
	-1, 2444,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1161,
	-1, 2445,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1162,
	-1, 2446,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1163,
	-1, 2485,
	409, 1403,
	-2, 1413,
	-1, 2599,
	179, 0,
	180, 0,
	223, 0,
	-2, 1126,
	-1, 2602,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1129,
	-1, 2603,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1131,
	-1, 2746,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1130,
	-1, 2747,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1132,
	-1, 2757,
	179, 0,
	-2, 1164,
	-1, 2845,
	179, 0,
	-2, 1165,
	-1, 2943,
	38, 0,
	156, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1644,
}

const sqlPrivate = 57344

const sqlLast = 55115

var sqlAct = [...]int{

	740, 2942, 2536, 2951, 2785, 1741, 3005, 2919, 2700, 1975,
	2921, 2918, 2905, 2952, 2774, 1983, 2953, 2020, 2410, 2941,
	1025, 2849, 2714, 1082, 2553, 2737, 2654, 737, 736, 1667,
	1013, 2064, 2548, 2304, 1505, 2223, 738, 2669, 1865, 1727,
	209, 2494, 2558, 2344, 209, 1972, 906, 2495, 1085, 1217,
	714, 209, 2311, 2346, 1506, 2306, 2316, 1948, 209, 1952,
	209, 2211, 1378, 209, 209, 2170, 209, 209, 1383, 2762,
	1046, 1078, 921, 209, 2574, 915, 680, 2187, 1359, 1984,
	899, 209, 1302, 2634, 1458, 1951, 1457, 1466, 1463, 1885,
	1410, 2463, 1454, 1859, 463, 1866, 2198, 1740, 1937, 1658,
	2106, 2169, 2496, 1739, 2850, 1305, 1653, 511, 1599, 2060,
	1766, 1876, 688, 125, 1612, 2280, 532, 27, 1868, 1351,
	508, 2315, 1426, 1432, 1394, 723, 1392, 1828, 1724, 872,
	1360, 1748, 1141, 1912, 205, 544, 1938, 1330, 1455, 1332,
	1760, 1949, 908, 1093, 1977, 1065, 1075, 1955, 876, 1836,
	1369, 1851, 1787, 570, 854, 1293, 1911, 704, 205, 1218,
	1216, 209, 209, 590, 731, 1598, 199, 2701, 547, 584,
	1473, 125, 1062, 204, 131, 618, 505, 852, 1444, 132,
	1350, 556, 2093, 1481, 2479, 70, 1222, 2480, 1481, 1379,
	1976, 2022, 209, 209, 209, 911, 209, 209, 924, 924,
	1939, 563, 1481, 209, 209, 880, 3032, 3026, 3025, 3002,
	1845, 1845, 1845, 2668, 2999, 2977, 2971, 2970, 1440, 2668,
	1845, 1845, 2350, 2967, 2964, 1493, 2322, 2968, 2965, 684,
	558, 2961, 2939, 679, 684, 1440, 1440, 1233, 1234, 2373,
	2323, 2938, 2937, 904, 694, 1440, 1493, 2936, 2900, 1233,
	1234, 1493, 2012, 1939, 2887, 1276, 1277, 1278, 1440, 2880,
	2878, 2876, 1236, 2668, 2668, 2668, 2847, 2833, 918, 2821,
	2012, 2582, 2816, 2668, 1236, 2294, 1440, 1282, 2466, 855,
	855, 2814, 125, 2097, 1435, 2668, 27, 1235, 902, 2098,
	2804, 2803, 2796, 729, 1440, 1440, 1440, 205, 1845, 1235,
	672, 2901, 698, 1115, 2795, 671, 1838, 1255, 2668, 2768,
	689, 2748, 2694, 1440, 2690, 2012, 1845, 1124, 1845, 685,
	2667, 892, 896, 901, 2668, 2601, 2572, 2564, 2475, 2012,
	2565, 2565, 2476, 2469, 2384, 2140, 2141, 1845, 1845, 856,
	2335, 2184, 2135, 2134, 2286, 1845, 1845, 1845, 2128, 2127,
	2031, 2011, 2129, 1845, 1845, 2012, 2004, 2834, 2000, 1943,
	1493, 1241, 1845, 1440, 1258, 1259, 1260, 1261, 1844, 1440,
	1116, 1497, 1845, 1241, 1763, 1498, 858, 2466, 859, 1837,
	1577, 687, 1018, 1980, 2582, 1927, 1263, 1264, 1265, 1479,
	1440, 1874, 2451, 2386, 2286, 1273, 1283, 2063, 1263, 1264,
	1265, 2042, 1355, 1743, 1862, 1845, 779, 1016, 169, 1112,
	2105, 1482, 2324, 1111, 166, 1110, 1482, 1109, 1108, 1107,
	1233, 1234, 1106, 1266, 1267, 1268, 1276, 1277, 1278, 1764,
	1482, 2325, 1303, 1105, 1256, 1104, 1103, 1102, 1269, 1271,
	1101, 1100, 1099, 1098, 1097, 1236, 1256, 1096, 1282, 860,
	168, 857, 678, 2140, 2141, 677, 676, 675, 674, 2146,
	670, 669, 873, 668, 667, 666, 665, 664, 663, 662,
	1235, 661, 209, 209, 209, 911, 911, 209, 1255, 660,
	209, 656, 655, 209, 654, 1252, 1387, 167, 616, 209,
	1765, 1762, 2140, 2141, 615, 1779, 614, 1116, 613, 209,
	209, 209, 209, 209, 911, 911, 612, 611, 610, 2008,
	609, 911, 1262, 1777, 608, 2322, 1596, 1257, 607, 606,
	39, 605, 604, 1040, 1043, 133, 603, 602, 1086, 1257,
	601, 600, 2156, 599, 42, 1258, 1259, 1260, 1261, 598,
	597, 596, 209, 595, 1241, 594, 1489, 579, 1775, 2647,
	1440, 1480, 1274, 209, 1036, 1051, 578, 577, 2140, 2141,
	576, 575, 2009, 1773, 574, 1637, 1273, 1283, 1039, 1263,
	1264, 1265, 496, 209, 495, 874, 1767, 2146, 1079, 2958,
	469, 1837, 468, 166, 209, 467, 458, 457, 166, 1279,
	1280, 2010, 1116, 189, 188, 187, 186, 1250, 1251, 542,
	185, 184, 922, 1014, 183, 182, 181, 180, 179, 178,
	1271, 177, 176, 175, 174, 2157, 2146, 1256, 1064, 168,
	173, 172, 171, 911, 168, 170, 1272, 1237, 1238, 1239,
	1240, 1242, 1243, 1281, 1275, 60, 1246, 1244, 1245, 1237,
	1238, 1239, 1240, 1242, 1243, 1069, 1072, 1270, 1947, 539,
	2156, 2608, 2566, 1094, 2535, 869, 167, 2219, 209, 2103,
	39, 167, 2052, 1944, 1761, 160, 1941, 1602, 1382, 1391,
	160, 1162, 1309, 161, 42, 1155, 1027, 166, 161, 1020,
	2940, 2923, 2146, 1262, 2912, 2841, 2837, 2835, 2017, 2722,
	1229, 2817, 2731, 2633, 1979, 1735, 685, 1149, 2632, 133,
	1257, 1153, 538, 2631, 2624, 1139, 2784, 2620, 2619, 2618,
	1233, 1234, 2614, 168, 2613, 1233, 1234, 2612, 1300, 2611,
	2604, 2581, 2579, 1274, 2150, 2142, 2143, 2144, 2145, 2147,
	2148, 540, 2460, 2157, 61, 1236, 2459, 2458, 57, 542,
	1236, 2396, 2289, 58, 2285, 2218, 2214, 2180, 1215, 2168,
	167, 2139, 2136, 1136, 2133, 2156, 2132, 2130, 2111, 160,
	1235, 134, 63, 2110, 64, 1235, 2094, 161, 1255, 1871,
	1229, 1313, 1214, 1228, 868, 60, 1306, 3030, 1296, 3013,
	3012, 1502, 166, 1026, 2412, 2931, 2926, 1213, 133, 2882,
	2873, 2872, 2868, 541, 2867, 1156, 106, 1272, 2861, 2858,
	1247, 1248, 1254, 1253, 1249, 1275, 2832, 1246, 1244, 1245,
	1237, 1238, 1239, 1240, 1242, 1243, 1736, 2831, 168, 2339,
	2140, 2141, 1729, 2780, 2621, 1258, 1259, 1260, 1261, 2759,
	2709, 1233, 1234, 2705, 1241, 2204, 2703, 2689, 2157, 1241,
	2151, 2149, 2150, 2142, 2143, 2144, 2145, 2147, 2148, 209,
	1233, 1234, 1306, 2673, 209, 167, 1236, 2629, 2583, 1263,
	1264, 1265, 2551, 672, 160, 2721, 1230, 2543, 671, 1225,
	1226, 2542, 161, 1366, 61, 1236, 1357, 2540, 2515, 2514,
	209, 1235, 2142, 2143, 2144, 2145, 2147, 2148, 819, 2504,
	2503, 1388, 2471, 133, 2379, 2341, 2269, 2253, 685, 2233,
	1235, 134, 63, 1778, 64, 2232, 2183, 1256, 2167, 1597,
	1913, 2120, 2119, 2116, 880, 2090, 2085, 1333, 2059, 1338,
	2852, 1776, 166, 2019, 1856, 1843, 1771, 1450, 1320, 1319,
	2366, 1318, 1328, 541, 1317, 1331, 106, 1380, 1358, 1334,
	1349, 1363, 1364, 1381, 2146, 1348, 1344, 1341, 2142, 2143,
	2144, 2145, 2147, 2148, 1376, 1241, 1774, 2730, 168, 1343,
	1342, 1340, 1339, 1336, 1233, 1234, 1335, 1326, 1325, 1324,
	2606, 1772, 855, 1262, 1241, 1587, 1586, 1323, 1596, 1593,
	1322, 1321, 1310, 1297, 125, 1296, 1135, 1120, 2233, 1236,
	1257, 1090, 1377, 2578, 2478, 167, 2474, 2096, 2014, 1263,
	1264, 1265, 1354, 1857, 160, 2337, 1294, 2307, 1152, 2727,
	2585, 2030, 161, 2584, 1235, 732, 911, 209, 2140, 2141,
	1352, 924, 2481, 1939, 1405, 1596, 1385, 209, 924, 209,
	209, 1356, 1763, 133, 1596, 1346, 1596, 1382, 1409, 1583,
	2810, 1347, 1211, 2273, 2268, 2264, 1130, 1256, 850, 2513,
	209, 209, 1451, 2252, 2175, 2174, 2029, 209, 2173, 209,
	1400, 209, 2069, 685, 1438, 209, 1449, 1462, 1570, 1590,
	1148, 2838, 2836, 1915, 1345, 1315, 2022, 1459, 2101, 2352,
	2763, 851, 2263, 2959, 1976, 2414, 1433, 1764, 1422, 1749,
	1329, 1810, 1205, 2969, 2966, 2318, 1496, 1246, 1244, 1245,
	1237, 1238, 1239, 1240, 1242, 1243, 2490, 1239, 1240, 1242,
	1243, 205, 1503, 2783, 209, 209, 209, 209, 2915, 2549,
	2005, 194, 911, 1395, 209, 209, 1396, 1203, 209, 209,
	1257, 2960, 2886, 2993, 209, 2992, 1470, 504, 2681, 1468,
	2362, 1572, 2032, 1190, 844, 1560, 1191, 1531, 1765, 1762,
	1622, 3029, 2698, 2809, 2808, 1447, 924, 846, 2806, 1973,
	2805, 2529, 2524, 2523, 842, 209, 475, 1204, 840, 1368,
	209, 873, 837, 209, 1591, 1312, 209, 2487, 209, 497,
	209, 867, 209, 1477, 209, 2486, 1064, 730, 1878, 1584,
	1439, 2115, 683, 2114, 209, 2113, 209, 2112, 2072, 2518,
	1878, 1406, 2003, 1564, 209, 209, 209, 1932, 1397, 205,
	1926, 1877, 2144, 2145, 2147, 2148, 1150, 503, 205, 1399,
	2338, 1237, 1238, 1239, 1240, 1242, 1243, 1922, 1403, 1472,
	1372, 1475, 209, 1903, 1767, 1711, 924, 1246, 1244, 1245,
	1237, 1238, 1239, 1240, 1242, 1243, 474, 1353, 1015, 1404,
	1823, 1822, 1821, 1126, 2840, 682, 1375, 1669, 1574, 1029,
	1936, 1151, 1635, 658, 553, 1604, 1634, 205, 1640, 502,
	1942, 2885, 2534, 1726, 1370, 1629, 569, 2934, 1896, 1887,
	1726, 1499, 1595, 1136, 874, 1501, 1631, 1373, 1659, 1666,
	1561, 1476, 2787, 1733, 1500, 485, 2035, 1571, 1731, 1608,
	1039, 1189, 568, 1562, 2984, 1232, 1371, 1300, 2037, 1767,
	924, 1388, 2313, 1588, 2864, 2506, 1753, 1600, 684, 569,
	1134, 2314, 1761, 2200, 2403, 2897, 2061, 2062, 1605, 2406,
	3015, 1186, 1785, 2260, 1481, 2255, 2140, 2141, 2038, 1611,
	501, 1790, 1790, 1127, 2082, 1801, 1803, 1749, 1808, 1401,
	2036, 1165, 2898, 1421, 209, 1831, 209, 1401, 1407, 1243,
	1890, 486, 2080, 2363, 1835, 2245, 1327, 1401, 1202, 2313,
	2525, 1597, 1594, 1374, 2015, 2250, 1638, 1639, 1187, 502,
	924, 1424, 209, 2272, 209, 2404, 1964, 1291, 1923, 2743,
	1429, 209, 924, 2992, 2155, 1657, 209, 672, 1919, 2244,
	672, 672, 1649, 209, 1744, 1650, 1651, 880, 1129, 209,
	2140, 2141, 1746, 2148, 2812, 1767, 1786, 494, 1597, 1913,
	2754, 209, 1870, 880, 911, 1441, 1210, 1597, 1913, 1597,
	1913, 2361, 1445, 1233, 1234, 209, 924, 1633, 681, 489,
	2118, 209, 1820, 1395, 1852, 2983, 1396, 1858, 1737, 1734,
	501, 209, 2955, 2077, 209, 1879, 2199, 1869, 1236, 1484,
	2146, 504, 1486, 684, 2078, 1488, 1906, 2587, 2083, 1491,
	1398, 1767, 1924, 2516, 855, 2593, 499, 209, 1863, 209,
	1889, 209, 685, 1235, 209, 1875, 209, 685, 209, 1798,
	209, 209, 838, 209, 911, 911, 911, 1621, 1883, 911,
	1905, 1920, 848, 479, 209, 847, 1933, 1832, 1891, 1893,
	1833, 500, 838, 1841, 1842, 902, 839, 2507, 1998, 1999,
	838, 1900, 1849, 1401, 1648, 1853, 1854, 2573, 1397, 1934,
	1722, 1028, 1898, 2156, 2146, 1385, 1125, 190, 1904, 1399,
	1425, 503, 1997, 1882, 2788, 1929, 1905, 1199, 1720, 1431,
	1921, 498, 2354, 1883, 1708, 488, 487, 1241, 3016, 2956,
	1603, 1994, 1482, 2954, 209, 2982, 2991, 1430, 1996, 2989,
	2074, 504, 685, 1914, 1916, 1917, 1918, 1725, 1575, 1987,
	3008, 1888, 1263, 1264, 1265, 1128, 499, 1732, 459, 478,
	1978, 2713, 1978, 2079, 1427, 659, 552, 1989, 2739, 195,
	2081, 1140, 1636, 924, 648, 209, 1883, 2156, 1607, 1166,
	125, 209, 2007, 1231, 209, 1428, 2157, 125, 2001, 2711,
	1982, 500, 1372, 2357, 693, 1200, 2957, 195, 1133, 1991,
	1256, 1992, 1962, 1993, 209, 209, 209, 1995, 209, 1716,
	1668, 1094, 2002, 1174, 1220, 2006, 1811, 1717, 1375, 1970,
	1718, 503, 2016, 1157, 1723, 648, 1167, 209, 2246, 1164,
	1968, 498, 1453, 2025, 873, 2026, 1850, 2018, 490, 1401,
	196, 1365, 1706, 1709, 1145, 693, 1123, 1114, 2248, 1373,
	873, 466, 1221, 2627, 2281, 1334, 2744, 1341, 2738, 1201,
	2157, 2277, 649, 2447, 1331, 475, 1437, 2021, 196, 2024,
	2798, 2797, 2778, 2402, 2855, 2489, 2054, 2229, 2356, 2033,
	473, 2225, 2680, 1257, 1750, 491, 1705, 3021, 2247, 2679,
	1971, 1219, 2353, 2151, 2149, 2150, 2142, 2143, 2144, 2145,
	2147, 2148, 125, 472, 1969, 2088, 125, 2677, 1471, 1461,
	2049, 1220, 2091, 649, 2051, 471, 2906, 3006, 1460, 2075,
	1221, 492, 1146, 493, 1456, 198, 1147, 1145, 1452, 1626,
	201, 2108, 2109, 2212, 1578, 1374, 2554, 2056, 460, 197,
	480, 1907, 2779, 2715, 1645, 474, 2740, 874, 2058, 1719,
	1145, 2235, 2234, 198, 2665, 476, 1721, 2067, 2201, 2046,
	1398, 1847, 2047, 874, 2355, 1582, 1873, 197, 2149, 2150,
	2142, 2143, 2144, 2145, 2147, 2148, 193, 2628, 3007, 2662,
	2448, 470, 1846, 561, 1946, 650, 1945, 2449, 1219, 2287,
	555, 2166, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 1707,
	2104, 1831, 1831, 1831, 193, 1146, 2182, 2073, 3009, 1147,
	924, 191, 2678, 3020, 682, 2213, 2185, 461, 3, 2194,
	2663, 2192, 2193, 1580, 1061, 1059, 209, 1848, 1146, 209,
	2676, 1646, 1147, 537, 35, 1050, 650, 1581, 209, 191,
	1049, 194, 2537, 2996, 1172, 880, 209, 209, 209, 2100,
	2702, 192, 209, 880, 880, 209, 2276, 880, 2635, 2216,
	1908, 1909, 209, 209, 209, 209, 209, 2208, 2776, 194,
	2464, 479, 1770, 2282, 209, 536, 34, 2710, 651, 192,
	2998, 209, 1196, 535, 31, 685, 534, 76, 533, 75,
	2231, 2758, 2626, 209, 911, 2533, 2207, 209, 2237, 2777,
	2241, 2242, 1194, 924, 1184, 530, 22, 209, 2230, 2206,
	2217, 2226, 924, 2209, 652, 924, 2171, 1449, 924, 2378,
	836, 2203, 2131, 2177, 2178, 2179, 531, 23, 209, 651,
	209, 2084, 209, 1017, 209, 911, 911, 911, 2186, 209,
	2023, 209, 2262, 2658, 2254, 209, 2659, 529, 29, 2222,
	209, 1182, 209, 1931, 1883, 1902, 2215, 478, 1180, 209,
	1178, 528, 20, 560, 2236, 652, 2239, 724, 1176, 2220,
	554, 685, 2265, 2261, 209, 1170, 911, 2043, 1057, 1530,
	2661, 1443, 1209, 2296, 2297, 2298, 2251, 1039, 890, 2664,
	1208, 1121, 2172, 209, 209, 2249, 2270, 1811, 1811, 1060,
	1058, 1613, 2050, 35, 2027, 2320, 2256, 206, 1620, 2343,
	1623, 464, 1400, 1563, 2295, 2267, 2288, 2291, 481, 1195,
	2308, 2266, 2309, 209, 2334, 507, 2271, 548, 1039, 2259,
	507, 206, 2283, 548, 566, 1316, 1400, 2336, 209, 1193,
	573, 1183, 2257, 526, 19, 34, 2258, 2292, 593, 1159,
	1769, 2950, 2317, 31, 2299, 2531, 76, 1436, 75, 841,
	843, 2317, 2391, 475, 2903, 1433, 1395, 527, 18, 1396,
	2319, 1433, 2342, 2651, 924, 22, 516, 15, 473, 2305,
	2326, 2660, 517, 16, 2511, 1811, 1811, 1811, 1181, 209,
	2381, 2509, 1530, 1530, 2488, 1179, 23, 1177, 525, 55,
	2303, 472, 873, 2301, 1974, 1175, 1511, 1966, 2358, 2359,
	873, 873, 1169, 471, 873, 1056, 1965, 29, 524, 54,
	1963, 2364, 2360, 1961, 1495, 1494, 515, 53, 507, 507,
	2365, 20, 1492, 125, 1592, 685, 886, 2369, 480, 1490,
	2371, 2367, 1619, 474, 523, 12, 1487, 1659, 2418, 1485,
	1483, 1397, 2332, 476, 2398, 2399, 2400, 2461, 2385, 464,
	464, 464, 1399, 916, 464, 1659, 2427, 2387, 514, 48,
	206, 1019, 2349, 1434, 2390, 1423, 1420, 691, 209, 648,
	521, 45, 2422, 1158, 1408, 1402, 2826, 2993, 209, 1223,
	924, 2415, 2417, 2411, 2405, 2407, 2408, 2729, 2728, 693,
	864, 2457, 1601, 522, 46, 2453, 2483, 2065, 880, 2424,
	2426, 513, 47, 19, 2191, 874, 2477, 520, 7, 1511,
	1511, 2575, 865, 874, 874, 1878, 2828, 874, 1895, 2522,
	1878, 2501, 2500, 692, 2563, 2452, 1894, 18, 519, 6,
	880, 1892, 2454, 2696, 1935, 2528, 15, 1930, 1925, 1901,
	1568, 1569, 16, 2482, 2467, 2468, 2465, 209, 209, 880,
	209, 2462, 2028, 2532, 2470, 209, 125, 649, 55, 1224,
	1530, 880, 924, 2519, 924, 880, 2066, 911, 1508, 2866,
	880, 518, 37, 2484, 2544, 2526, 1233, 1234, 54, 2527,
	2670, 2492, 1401, 209, 2530, 2189, 53, 1168, 543, 1233,
	1234, 2567, 866, 2196, 2197, 2843, 2636, 2202, 1910, 512,
	36, 1236, 1897, 1227, 12, 1928, 2279, 1899, 1393, 2279,
	1905, 209, 2284, 2556, 924, 209, 209, 924, 209, 2559,
	880, 2555, 2517, 2902, 2708, 2560, 1235, 1981, 48, 1967,
	1960, 1834, 2538, 1573, 924, 2539, 1811, 1811, 2541, 1235,
	45, 2327, 2328, 2329, 2547, 2330, 2331, 2591, 2546, 1883,
	1504, 3004, 2561, 2557, 562, 2550, 2333, 2552, 3019, 2140,
	2141, 2569, 2568, 46, 2595, 1233, 1234, 2040, 2039, 1303,
	2576, 47, 2577, 209, 2600, 2409, 2340, 7, 1161, 2040,
	650, 1508, 1508, 1160, 2580, 1987, 2588, 1511, 2041, 2592,
	2589, 1800, 1759, 1198, 2609, 2401, 1197, 1313, 6, 1311,
	2725, 2571, 1207, 1398, 1206, 1811, 1811, 1811, 1811, 1811,
	1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
	1811, 1811, 1811, 1811, 1192, 1811, 1188, 2596, 1185, 464,
	1035, 464, 209, 1171, 464, 1132, 1576, 916, 849, 657,
	1054, 37, 924, 209, 2786, 2243, 464, 209, 209, 209,
	2625, 1173, 2205, 1855, 2896, 873, 464, 464, 464, 464,
	916, 2615, 2117, 880, 2848, 209, 2753, 1768, 2394, 36,
	209, 690, 209, 651, 1314, 209, 209, 209, 209, 209,
	51, 2646, 2497, 2649, 209, 209, 911, 2502, 717, 2586,
	924, 2501, 2500, 2652, 911, 2671, 924, 2641, 2491, 593,
	880, 2643, 1954, 209, 209, 2674, 2520, 2683, 2650, 652,
	464, 2638, 2639, 1953, 2688, 927, 911, 2697, 2520, 2642,
	1585, 741, 2520, 1789, 1660, 743, 209, 2520, 2501, 2500,
	1131, 1509, 746, 745, 2693, 2644, 744, 880, 1510, 2501,
	2500, 593, 2704, 209, 209, 911, 911, 1337, 880, 2648,
	742, 1883, 1507, 2712, 2691, 1091, 1985, 636, 2742, 1508,
	1589, 2707, 2717, 2718, 1730, 2692, 1747, 2099, 874, 924,
	2716, 2719, 2682, 1307, 709, 721, 720, 873, 1745, 1039,
	2687, 1119, 2724, 2695, 2485, 708, 2210, 2733, 2745, 2510,
	2312, 2512, 2720, 2734, 2735, 1644, 2732, 2057, 1641, 2508,
	477, 2137, 2765, 1089, 2726, 1817, 1883, 1809, 924, 1805,
	2640, 1212, 209, 1292, 209, 464, 924, 209, 1986, 1154,
	2321, 2013, 2045, 1652, 2760, 209, 863, 862, 2317, 861,
	2920, 924, 2917, 2741, 1579, 2034, 1285, 713, 2190, 2794,
	2290, 2723, 1033, 2675, 1284, 2773, 845, 2752, 2473, 2772,
	2857, 1144, 1143, 2684, 2685, 2807, 2501, 2500, 1142, 2228,
	2791, 2790, 3014, 2792, 2865, 880, 2505, 2914, 2766, 2767,
	2769, 2771, 209, 165, 209, 162, 2789, 911, 164, 163,
	2275, 2706, 209, 79, 33, 32, 105, 104, 2770, 103,
	874, 2501, 2500, 2501, 2500, 880, 2800, 2501, 2500, 102,
	880, 101, 880, 100, 924, 2813, 880, 2815, 99, 2811,
	98, 2819, 2825, 97, 1883, 96, 95, 94, 922, 93,
	873, 1014, 92, 2824, 209, 91, 90, 2830, 89, 2829,
	209, 2823, 1530, 88, 2839, 87, 2559, 209, 86, 85,
	84, 83, 82, 81, 589, 586, 78, 77, 2860, 30,
	25, 2854, 109, 110, 2846, 24, 74, 2502, 73, 2853,
	28, 17, 11, 21, 130, 129, 209, 209, 2851, 128,
	2189, 127, 126, 209, 14, 13, 2086, 2087, 124, 2877,
	2879, 123, 122, 121, 911, 2818, 120, 119, 10, 209,
	2842, 2862, 911, 911, 2502, 8, 108, 209, 9, 209,
	2736, 209, 2870, 2351, 67, 2502, 573, 880, 68, 2899,
	2884, 507, 26, 2881, 41, 2890, 2891, 40, 107, 209,
	2892, 2874, 209, 156, 2888, 209, 155, 924, 154, 2909,
	2883, 2863, 153, 874, 150, 886, 2922, 464, 2924, 2925,
	2927, 152, 2889, 2928, 2871, 2930, 149, 151, 2929, 148,
	118, 158, 157, 146, 2911, 144, 2916, 2935, 145, 1511,
	2827, 1530, 209, 147, 2163, 2164, 2165, 2933, 2869, 143,
	2501, 2500, 142, 159, 117, 116, 115, 114, 2947, 880,
	113, 2949, 112, 2948, 2932, 5, 2, 209, 1, 1811,
	0, 2974, 0, 2975, 2962, 209, 2973, 0, 0, 0,
	2699, 0, 0, 0, 0, 2981, 1233, 1234, 1368, 0,
	2978, 209, 0, 2637, 2979, 2980, 0, 0, 0, 2501,
	2500, 0, 2502, 0, 0, 2987, 1811, 2990, 880, 2988,
	0, 1236, 0, 2976, 1530, 2994, 2922, 2995, 0, 2997,
	0, 0, 0, 3000, 3001, 0, 0, 0, 3003, 0,
	0, 0, 2520, 0, 0, 0, 1235, 2502, 3011, 2502,
	3010, 0, 0, 2502, 0, 0, 3018, 3017, 0, 1372,
	0, 1530, 1530, 2750, 206, 2893, 0, 2894, 3022, 3023,
	3024, 0, 0, 0, 1019, 0, 464, 1448, 1511, 1530,
	1530, 0, 0, 3027, 3028, 1375, 3031, 1987, 0, 0,
	2910, 3033, 0, 0, 0, 0, 0, 1467, 1467, 0,
	0, 0, 2750, 1370, 464, 0, 464, 0, 464, 0,
	1668, 1811, 507, 0, 0, 1530, 1373, 0, 0, 0,
	1241, 1508, 2801, 2802, 0, 1668, 0, 0, 2665, 0,
	0, 0, 0, 0, 0, 1371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1263, 1264, 1265, 0, 210,
	0, 1511, 0, 2662, 2520, 2972, 2655, 0, 0, 0,
	1411, 593, 206, 1019, 548, 0, 0, 0, 0, 2653,
	0, 206, 1019, 0, 2657, 916, 464, 1415, 0, 0,
	0, 593, 0, 0, 0, 0, 0, 0, 1511, 1511,
	0, 0, 0, 1256, 2663, 0, 0, 0, 1014, 0,
	0, 0, 1374, 0, 0, 0, 1511, 1511, 0, 0,
	0, 0, 593, 0, 0, 2376, 2377, 464, 1412, 2656,
	206, 0, 0, 464, 0, 464, 2502, 464, 0, 464,
	0, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1624, 1511, 1625, 0, 0, 0, 0, 0, 0,
	1508, 464, 464, 464, 0, 0, 2140, 2141, 0, 2158,
	2159, 2160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2598, 2502, 1257, 0, 0, 593,
	1416, 0, 0, 0, 2428, 2429, 2430, 2431, 2432, 2433,
	2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,
	2444, 2445, 2446, 0, 2450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2155, 0, 0, 2658, 1530, 0,
	2659, 1668, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	0, 0, 0, 0, 912, 0, 1413, 925, 925, 0,
	0, 0, 0, 0, 2661, 0, 0, 0, 0, 0,
	1508, 1508, 0, 2664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 1508, 1508,
	2146, 0, 0, 0, 1244, 1245, 1237, 1238, 1239, 1240,
	1242, 1243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 886, 2140,
	2141, 0, 2158, 2159, 2160, 2161, 0, 0, 0, 507,
	0, 507, 0, 0, 886, 0, 0, 2597, 464, 0,
	0, 0, 0, 1886, 0, 1511, 0, 0, 0, 1419,
	464, 0, 0, 2156, 0, 2660, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 818, 0, 0, 0, 0, 2155, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 0, 1940, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 1950, 0,
	0, 1019, 0, 0, 39, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 42, 0,
	0, 0, 0, 0, 1886, 0, 507, 0, 464, 0,
	0, 464, 0, 464, 0, 464, 2157, 464, 464, 0,
	916, 0, 0, 2146, 0, 0, 538, 0, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 540, 0, 0, 0, 0,
	0, 0, 57, 542, 0, 0, 0, 58, 2161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 0, 2156, 1508, 0, 60,
	1530, 0, 0, 0, 912, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2152, 2153, 2154, 0,
	0, 0, 0, 2151, 2149, 2150, 2142, 2143, 2144, 2145,
	2147, 2148, 464, 912, 912, 0, 0, 0, 1019, 0,
	912, 1019, 0, 0, 0, 0, 0, 913, 0, 0,
	926, 926, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277,
	1278, 464, 464, 464, 0, 464, 0, 0, 0, 0,
	1269, 0, 0, 0, 0, 1511, 0, 1236, 1530, 2157,
	1282, 0, 0, 0, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 1235, 0, 0, 0, 0, 0, 0, 0,
	1255, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 878, 0, 0, 0, 134, 63, 1511, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1367, 0, 0, 166, 0, 2757, 0,
	0, 0, 912, 0, 2048, 0, 0, 541, 0, 0,
	106, 0, 0, 0, 0, 462, 0, 1258, 1259, 1260,
	1261, 0, 0, 0, 0, 0, 1241, 0, 0, 2152,
	2153, 2154, 168, 0, 0, 2781, 2151, 2149, 2150, 2142,
	2143, 2144, 2145, 2147, 2148, 0, 0, 0, 1273, 1283,
	0, 1263, 1264, 1265, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 1279, 1280, 0, 0, 0, 0, 0, 160, 1250,
	1251, 0, 0, 0, 0, 0, 161, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 1508, 0, 1256,
	0, 0, 0, 1303, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 1281, 886, 0, 0, 0,
	0, 539, 0, 0, 886, 886, 0, 0, 886, 696,
	2845, 0, 39, 507, 0, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 507, 42, 0, 0, 1508,
	0, 0, 0, 464, 1886, 2224, 0, 0, 0, 1886,
	0, 0, 2224, 894, 0, 1262, 0, 0, 920, 1886,
	2224, 1886, 2224, 2224, 538, 0, 0, 913, 913, 0,
	0, 464, 1257, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 540, 916, 1274, 913, 913, 0, 0,
	57, 542, 0, 913, 464, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1467, 0, 464,
	0, 464, 0, 0, 0, 0, 464, 60, 464, 0,
	0, 0, 916, 0, 0, 0, 0, 1886, 0, 507,
	0, 0, 0, 0, 0, 0, 1886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	509, 1019, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246,
	1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 0, 0,
	2347, 1019, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 913, 0, 0, 42, 0,
	2368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 464, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 63, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 0, 0, 0, 0,
	0, 0, 57, 542, 166, 912, 2413, 58, 0, 539,
	925, 0, 0, 0, 0, 541, 0, 925, 106, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 0, 60,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1031, 0, 0, 2140, 2141, 1048, 2158,
	2159, 2160, 538, 0, 1021, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	1068, 1068, 1068, 920, 0, 0, 160, 0, 0, 886,
	0, 540, 0, 0, 161, 507, 0, 0, 57, 542,
	0, 0, 0, 58, 0, 507, 0, 0, 0, 0,
	0, 912, 0, 0, 2155, 133, 0, 0, 0, 0,
	0, 2499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1117, 60, 0, 0, 61, 0,
	2521, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 2521, 0, 0, 0, 2521, 0, 1118, 0,
	0, 2521, 0, 0, 1122, 134, 63, 0, 64, 0,
	0, 0, 0, 0, 1886, 1467, 0, 1467, 0, 0,
	2146, 0, 464, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 696, 541, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1886, 886, 0, 0, 0, 0, 0, 0, 0, 718,
	71, 0, 168, 0, 0, 925, 2140, 2141, 0, 2158,
	2159, 2160, 0, 0, 61, 0, 0, 0, 1019, 0,
	0, 0, 916, 464, 2383, 464, 0, 0, 0, 0,
	0, 0, 0, 2156, 0, 0, 0, 0, 0, 167,
	0, 134, 63, 0, 64, 0, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 71, 0,
	0, 0, 166, 0, 2155, 2140, 2141, 0, 2158, 2159,
	2160, 0, 0, 541, 0, 0, 106, 510, 0, 925,
	2616, 0, 0, 1286, 1287, 1288, 1289, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 0, 168, 0,
	0, 0, 0, 0, 0, 0, 1308, 0, 913, 0,
	0, 0, 0, 926, 0, 0, 2157, 0, 0, 0,
	926, 0, 0, 2155, 0, 673, 0, 0, 0, 0,
	2146, 0, 0, 686, 886, 167, 0, 0, 0, 1019,
	0, 0, 0, 0, 160, 0, 0, 0, 0, 925,
	507, 0, 161, 0, 1886, 2224, 1886, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 875, 71,
	0, 2499, 1019, 133, 0, 2161, 0, 1886, 0, 2224,
	0, 0, 1019, 1019, 464, 1886, 2224, 0, 0, 2146,
	0, 464, 464, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2156, 0, 925, 0, 0, 2499, 0,
	1019, 1950, 2162, 0, 913, 0, 2152, 2153, 2154, 2499,
	0, 0, 0, 2151, 2149, 2150, 2142, 2143, 2144, 2145,
	2147, 2148, 0, 1886, 2161, 0, 0, 0, 0, 0,
	0, 1389, 0, 0, 0, 1361, 1361, 1361, 926, 0,
	2347, 2347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2156, 912, 912, 912, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1886,
	0, 2224, 0, 0, 2775, 0, 0, 0, 926, 0,
	0, 0, 464, 0, 0, 0, 2499, 0, 0, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2521, 0, 0, 0,
	0, 2499, 925, 2499, 0, 0, 0, 2499, 0, 464,
	0, 464, 0, 0, 0, 0, 2152, 2153, 2154, 1019,
	1446, 0, 0, 2151, 2149, 2150, 2142, 2143, 2144, 2145,
	2147, 2148, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1474, 0, 1474, 2140, 2141, 0, 2158, 2159, 2160, 0,
	0, 2413, 0, 0, 0, 0, 0, 507, 0, 0,
	0, 2382, 0, 0, 2775, 2152, 2153, 2154, 0, 0,
	0, 0, 2151, 2149, 2150, 2142, 2143, 2144, 2145, 2147,
	2148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 1886, 2224, 0, 0, 0, 2521, 0,
	464, 2155, 0, 0, 926, 0, 0, 0, 0, 0,
	1566, 0, 0, 0, 0, 0, 2224, 0, 0, 0,
	0, 0, 0, 0, 1019, 0, 1019, 0, 464, 0,
	686, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2907, 0, 926, 1019,
	0, 1609, 464, 0, 696, 696, 0, 1614, 0, 1615,
	0, 1616, 0, 1617, 0, 1618, 0, 2146, 0, 0,
	2499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1627, 1048, 0, 0, 2413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913, 913, 913, 0,
	0, 913, 2161, 0, 1019, 0, 0, 0, 0, 2499,
	0, 0, 1886, 1642, 0, 1647, 0, 0, 0, 925,
	0, 1654, 0, 0, 0, 0, 0, 0, 2775, 0,
	2156, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 0, 1710, 0, 1712,
	1713, 1714, 1715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1738, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 673, 0,
	0, 0, 0, 912, 0, 926, 0, 0, 0, 0,
	0, 0, 925, 2157, 0, 1780, 1781, 1782, 1783, 1784,
	1295, 925, 1298, 0, 925, 0, 0, 925, 0, 1304,
	0, 0, 0, 0, 0, 0, 1807, 0, 1819, 0,
	0, 0, 1824, 1829, 912, 912, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 0, 0, 2152, 2153, 2154, 0, 0, 0, 0,
	2151, 2149, 2150, 2142, 2143, 2144, 2145, 2147, 2148, 0,
	0, 0, 0, 0, 0, 2140, 2141, 0, 2158, 2159,
	2160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1990, 0, 0, 1068, 0, 1068, 0, 1068,
	0, 920, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 925, 0, 0, 0, 1384, 0, 0,
	0, 0, 0, 2155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1233, 1234, 0,
	1266, 1267, 1268, 1276, 1277, 1278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 1282, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1235, 0, 2146,
	0, 0, 0, 0, 0, 1255, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 0, 2044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 2161, 2053, 920, 2055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 1259, 1260, 1261, 913, 0, 2068, 0,
	0, 1241, 2156, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 926, 0, 0,
	926, 0, 0, 1273, 1283, 0, 1263, 1264, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 913, 913, 913,
	0, 0, 0, 0, 0, 0, 1279, 1280, 0, 0,
	0, 925, 0, 925, 1250, 1251, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1271, 0, 2070,
	2071, 0, 0, 0, 1256, 2076, 0, 0, 913, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	1281, 0, 0, 0, 2089, 0, 0, 0, 0, 0,
	0, 0, 0, 925, 1270, 0, 925, 2095, 0, 0,
	0, 0, 0, 2102, 0, 0, 0, 0, 2107, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2121, 0, 0, 0, 0,
	1262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 1299,
	1274, 0, 0, 0, 0, 2152, 2153, 2154, 0, 1829,
	1829, 1829, 2151, 2149, 2150, 2142, 2143, 2144, 2145, 2147,
	2148, 1361, 673, 0, 0, 673, 673, 0, 0, 2195,
	0, 0, 0, 0, 0, 0, 0, 2221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 1247, 1248, 1254,
	1253, 1249, 1275, 1728, 1246, 1244, 1245, 1237, 1238, 1239,
	1240, 1242, 1243, 0, 0, 912, 686, 2908, 2274, 925,
	0, 1298, 0, 912, 0, 925, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2293, 0, 912, 0, 0, 0, 0,
	2300, 0, 2302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 912, 0, 0, 0, 0,
	2310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 0, 1384, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 926, 0, 0, 913,
	0, 0, 1233, 1234, 71, 1266, 1267, 1268, 1276, 1277,
	1278, 0, 0, 696, 696, 0, 0, 925, 0, 0,
	1269, 0, 0, 0, 0, 925, 696, 1236, 71, 2372,
	1282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	925, 0, 0, 2370, 0, 0, 926, 1654, 0, 926,
	0, 0, 1235, 2374, 0, 0, 2375, 0, 0, 0,
	1255, 0, 0, 0, 0, 0, 926, 1252, 2380, 0,
	0, 0, 0, 71, 0, 71, 0, 2388, 0, 0,
	0, 0, 0, 0, 0, 2392, 912, 0, 0, 2195,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 2419, 2420,
	2421, 0, 0, 925, 0, 2423, 0, 1258, 1259, 1260,
	1261, 0, 2425, 0, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1283,
	0, 1263, 1264, 1265, 0, 2455, 2456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 1280, 0, 926, 0, 0, 0, 0, 1250,
	1251, 0, 0, 0, 2472, 0, 0, 0, 0, 0,
	0, 0, 1271, 912, 0, 0, 0, 0, 0, 1256,
	0, 912, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 2493, 0, 913, 71,
	0, 0, 926, 71, 0, 0, 913, 0, 926, 1270,
	0, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 0, 0, 2545, 0, 0, 0,
	0, 0, 0, 0, 0, 1262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 913, 913, 0,
	0, 0, 1257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1361, 0, 0,
	0, 926, 0, 0, 0, 1274, 0, 0, 2570, 1728,
	0, 0, 0, 0, 0, 0, 0, 2590, 0, 920,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2599, 926, 0, 0, 2602, 2603, 0, 0,
	2605, 0, 0, 0, 0, 0, 0, 2607, 0, 1272,
	0, 2610, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246,
	1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 2617, 0,
	0, 0, 0, 0, 0, 0, 2126, 0, 0, 913,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1233, 1234, 0, 1266,
	1267, 1268, 1276, 1277, 1278, 2630, 926, 0, 875, 0,
	0, 0, 0, 0, 1269, 0, 875, 875, 0, 0,
	875, 1236, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1235, 0, 2686, 0,
	0, 0, 2672, 0, 1255, 1048, 0, 0, 0, 0,
	0, 1252, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 913, 913, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1258, 1259, 1260, 1261, 0, 0, 0, 0, 0,
	1241, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	71, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 1273, 1283, 0, 1263, 1264, 1265, 0, 686,
	0, 2746, 2747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 1280, 0, 0, 0,
	0, 0, 0, 1250, 1251, 2756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1271, 0, 0, 2764,
	0, 0, 0, 1256, 0, 0, 2782, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2820, 0, 2822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2856, 0, 0, 2859, 0, 0,
	0, 0, 0, 0, 2875, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 2895, 1272, 0, 0, 1247, 1248, 1254, 1253,
	1249, 1275, 0, 1246, 1244, 1245, 1237, 1238, 1239, 1240,
	1242, 1243, 0, 0, 0, 0, 2913, 0, 0, 0,
	2125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2946, 2946, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 2963,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 875, 228, 426, 0, 2946, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 2946, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 875, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 71, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	0, 412, 0, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1728, 211, 212,
	213, 214, 928, 215, 929, 930, 931, 932, 418, 933,
	934, 935, 936, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 937, 222, 223, 224, 225, 226, 227,
	938, 939, 423, 424, 425, 940, 228, 426, 941, 887,
	942, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 943, 238, 0, 239, 240, 944, 820, 241, 242,
	243, 945, 946, 948, 947, 949, 950, 951, 244, 245,
	465, 246, 247, 248, 427, 428, 952, 249, 953, 250,
	954, 251, 955, 956, 252, 253, 957, 254, 958, 0,
	959, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	960, 821, 961, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 962, 266, 963, 964, 822, 267,
	965, 268, 433, 966, 434, 967, 269, 270, 271, 272,
	273, 274, 435, 436, 824, 968, 276, 0, 0, 0,
	283, 969, 275, 970, 823, 277, 437, 279, 278, 280,
	281, 282, 438, 971, 439, 972, 284, 825, 826, 285,
	286, 287, 827, 288, 289, 0, 0, 290, 291, 292,
	973, 294, 293, 974, 440, 828, 295, 296, 829, 975,
	297, 298, 976, 977, 299, 0, 300, 889, 888, 301,
	302, 304, 305, 303, 830, 306, 307, 309, 308, 978,
	979, 831, 980, 441, 310, 442, 311, 312, 981, 313,
	314, 982, 983, 315, 316, 984, 985, 317, 443, 832,
	318, 833, 444, 319, 320, 321, 322, 323, 324, 325,
	986, 326, 445, 327, 446, 328, 987, 329, 330, 331,
	332, 333, 447, 334, 335, 988, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 989,
	348, 834, 990, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 991, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 992, 372, 353, 354,
	373, 835, 374, 449, 375, 376, 993, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 994, 382, 450, 995,
	386, 387, 996, 388, 389, 390, 391, 392, 393, 394,
	395, 997, 451, 452, 396, 998, 999, 397, 398, 453,
	454, 1000, 399, 400, 401, 402, 1001, 1002, 403, 404,
	405, 407, 1003, 408, 1004, 406, 409, 410, 411, 455,
	456, 1005, 1006, 412, 1007, 1008, 1009, 1010, 1011, 413,
	414, 1012, 415, 416, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 1860, 0, 0, 0, 0,
	0, 0, 0, 0, 1861, 211, 212, 213, 214, 928,
	215, 929, 930, 931, 932, 418, 933, 934, 935, 936,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	937, 222, 223, 224, 225, 226, 227, 938, 939, 423,
	424, 425, 940, 228, 426, 941, 887, 942, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 943, 238,
	0, 239, 240, 944, 820, 241, 242, 243, 945, 946,
	948, 947, 949, 950, 951, 244, 245, 465, 246, 247,
	248, 427, 428, 952, 249, 953, 250, 954, 251, 955,
	956, 252, 253, 957, 254, 958, 0, 959, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 960, 821, 961,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 962, 266, 963, 964, 822, 267, 965, 268, 433,
	966, 434, 967, 269, 270, 271, 272, 273, 274, 435,
	436, 824, 968, 276, 0, 0, 0, 283, 969, 275,
	970, 823, 277, 437, 279, 278, 280, 281, 282, 438,
	971, 439, 972, 284, 825, 826, 285, 286, 287, 827,
	288, 289, 0, 0, 290, 291, 292, 973, 294, 293,
	974, 440, 828, 295, 296, 829, 975, 297, 298, 976,
	977, 299, 0, 300, 889, 888, 301, 302, 304, 305,
	303, 830, 306, 307, 309, 308, 978, 979, 831, 980,
	441, 310, 442, 311, 312, 981, 313, 314, 982, 983,
	315, 316, 984, 985, 317, 443, 832, 318, 833, 444,
	319, 320, 321, 322, 323, 324, 325, 986, 326, 445,
	327, 446, 328, 987, 329, 330, 331, 332, 333, 447,
	334, 335, 988, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 989, 348, 834, 990,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 991, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 992, 372, 353, 354, 373, 835, 374,
	449, 375, 376, 993, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 994, 382, 450, 995, 386, 387, 996,
	388, 389, 390, 391, 392, 393, 394, 395, 997, 451,
	452, 396, 998, 999, 397, 398, 453, 454, 1000, 399,
	400, 401, 402, 1001, 1002, 403, 404, 405, 407, 1003,
	408, 1004, 406, 409, 410, 411, 455, 456, 1005, 1006,
	412, 1007, 1008, 1009, 1010, 1011, 413, 414, 1012, 415,
	416, 417, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2645, 211, 212, 213, 214, 928, 215, 929,
	930, 931, 932, 418, 933, 934, 935, 936, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 937, 222,
	223, 224, 225, 226, 227, 938, 939, 423, 424, 425,
	940, 228, 426, 941, 887, 942, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 943, 238, 0, 239,
	240, 944, 820, 241, 242, 243, 945, 946, 948, 947,
	949, 950, 951, 244, 245, 465, 246, 247, 248, 427,
	428, 952, 249, 953, 250, 954, 251, 955, 956, 252,
	253, 957, 254, 958, 0, 959, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 960, 821, 961, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 962,
	266, 963, 964, 822, 267, 965, 268, 433, 966, 434,
	967, 269, 270, 271, 272, 273, 274, 435, 436, 824,
	968, 276, 0, 0, 0, 283, 969, 275, 970, 823,
	277, 437, 279, 278, 280, 281, 282, 438, 971, 439,
	972, 284, 825, 826, 285, 286, 287, 827, 288, 289,
	0, 0, 290, 291, 292, 973, 294, 293, 974, 440,
	828, 295, 296, 829, 975, 297, 298, 976, 977, 299,
	0, 300, 889, 888, 301, 302, 304, 305, 303, 830,
	306, 307, 309, 308, 978, 979, 831, 980, 441, 310,
	442, 311, 312, 981, 313, 314, 982, 983, 315, 316,
	984, 985, 317, 443, 832, 318, 833, 444, 319, 320,
	321, 322, 323, 324, 325, 986, 326, 445, 327, 446,
	328, 987, 329, 330, 331, 332, 333, 447, 334, 335,
	988, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 989, 348, 834, 990, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 991, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 992, 372, 353, 354, 373, 835, 374, 449, 375,
	376, 993, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 994, 382, 450, 995, 386, 387, 996, 388, 389,
	390, 391, 392, 393, 394, 395, 997, 451, 452, 396,
	998, 999, 397, 398, 453, 454, 1000, 399, 400, 401,
	402, 1001, 1002, 403, 404, 405, 407, 1003, 408, 1004,
	406, 409, 410, 411, 455, 456, 1005, 1006, 412, 1007,
	1008, 1009, 1010, 1011, 413, 414, 1012, 415, 416, 417,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2751, 211, 212, 213, 214,
	928, 215, 929, 930, 931, 932, 418, 933, 934, 935,
	936, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 937, 222, 223, 224, 225, 226, 227, 938, 939,
	423, 424, 425, 940, 228, 426, 941, 887, 942, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 943,
	238, 0, 239, 240, 944, 820, 241, 242, 243, 945,
	946, 948, 947, 949, 950, 951, 244, 245, 465, 246,
	247, 248, 427, 428, 952, 249, 953, 250, 954, 251,
	955, 956, 252, 253, 957, 254, 958, 0, 959, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 960, 821,
	961, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 962, 266, 963, 964, 822, 267, 965, 268,
	433, 966, 434, 967, 269, 270, 271, 272, 273, 274,
	435, 436, 824, 968, 276, 0, 0, 0, 283, 969,
	275, 970, 823, 277, 437, 279, 278, 280, 281, 282,
	438, 971, 439, 972, 284, 825, 826, 285, 286, 287,
	827, 288, 289, 0, 0, 290, 291, 292, 973, 294,
	293, 974, 440, 828, 295, 296, 829, 975, 297, 298,
	976, 977, 299, 0, 300, 889, 888, 301, 302, 304,
	305, 303, 830, 306, 307, 309, 308, 978, 979, 831,
	980, 441, 310, 442, 311, 312, 981, 313, 314, 982,
	983, 315, 316, 984, 985, 317, 443, 832, 318, 833,
	444, 319, 320, 321, 322, 323, 324, 325, 986, 326,
	445, 327, 446, 328, 987, 329, 330, 331, 332, 333,
	447, 334, 335, 988, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 989, 348, 834,
	990, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 991, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 992, 372, 353, 354, 373, 835,
	374, 449, 375, 376, 993, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 994, 382, 450, 995, 386, 387,
	996, 388, 389, 390, 391, 392, 393, 394, 395, 997,
	451, 452, 396, 998, 999, 397, 398, 453, 454, 1000,
	399, 400, 401, 402, 1001, 1002, 403, 404, 405, 407,
	1003, 408, 1004, 406, 409, 410, 411, 455, 456, 1005,
	1006, 412, 1007, 1008, 1009, 1010, 1011, 413, 414, 1012,
	415, 416, 417, 923, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2395, 211,
	212, 213, 214, 928, 215, 929, 930, 931, 932, 418,
	933, 934, 935, 936, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 937, 222, 223, 224, 225, 226,
	227, 938, 939, 423, 424, 425, 940, 228, 426, 941,
	887, 942, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 943, 238, 0, 239, 240, 944, 820, 241,
	242, 243, 945, 946, 948, 947, 949, 950, 951, 244,
	245, 465, 246, 247, 248, 427, 428, 952, 249, 953,
	250, 954, 251, 955, 956, 252, 253, 957, 254, 958,
	0, 959, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 960, 821, 961, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 962, 266, 963, 964, 822,
	267, 965, 268, 433, 966, 434, 967, 269, 270, 271,
	272, 273, 274, 435, 436, 824, 968, 276, 0, 0,
	0, 283, 969, 275, 970, 823, 277, 437, 279, 278,
	280, 281, 282, 438, 971, 439, 972, 284, 825, 826,
	285, 286, 287, 827, 288, 289, 0, 0, 290, 291,
	292, 973, 294, 293, 974, 440, 828, 295, 296, 829,
	975, 297, 298, 976, 977, 299, 0, 300, 889, 888,
	301, 302, 304, 305, 303, 830, 306, 307, 309, 308,
	978, 979, 831, 980, 441, 310, 442, 311, 312, 981,
	313, 314, 982, 983, 315, 316, 984, 985, 317, 443,
	832, 318, 833, 444, 319, 320, 321, 322, 323, 324,
	325, 986, 326, 445, 327, 446, 328, 987, 329, 330,
	331, 332, 333, 447, 334, 335, 988, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	989, 348, 834, 990, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 991, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 992, 372, 353,
	354, 373, 835, 374, 449, 375, 376, 993, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 994, 382, 450,
	995, 386, 387, 996, 388, 389, 390, 391, 392, 393,
	394, 395, 997, 451, 452, 396, 998, 999, 397, 398,
	453, 454, 1000, 399, 400, 401, 402, 1001, 1002, 403,
	404, 405, 407, 1003, 408, 1004, 406, 409, 410, 411,
	455, 456, 1005, 1006, 412, 1007, 1008, 1009, 1010, 1011,
	413, 414, 1012, 415, 416, 417, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2278, 211, 212, 213, 214, 928, 215, 929, 930,
	931, 932, 418, 933, 934, 935, 936, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 937, 222, 223,
	224, 225, 226, 227, 938, 939, 423, 424, 425, 940,
	228, 426, 941, 887, 942, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 943, 238, 0, 239, 240,
	944, 820, 241, 242, 243, 945, 946, 948, 947, 949,
	950, 951, 244, 245, 465, 246, 247, 248, 427, 428,
	952, 249, 953, 250, 954, 251, 955, 956, 252, 253,
	957, 254, 958, 0, 959, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 960, 821, 961, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 962, 266,
	963, 964, 822, 267, 965, 268, 433, 966, 434, 967,
	269, 270, 271, 272, 273, 274, 435, 436, 824, 968,
	276, 0, 0, 0, 283, 969, 275, 970, 823, 277,
	437, 279, 278, 280, 281, 282, 438, 971, 439, 972,
	284, 825, 826, 285, 286, 287, 827, 288, 289, 0,
	0, 290, 291, 292, 973, 294, 293, 974, 440, 828,
	295, 296, 829, 975, 297, 298, 976, 977, 299, 0,
	300, 889, 888, 301, 302, 304, 305, 303, 830, 306,
	307, 309, 308, 978, 979, 831, 980, 441, 310, 442,
	311, 312, 981, 313, 314, 982, 983, 315, 316, 984,
	985, 317, 443, 832, 318, 833, 444, 319, 320, 321,
	322, 323, 324, 325, 986, 326, 445, 327, 446, 328,
	987, 329, 330, 331, 332, 333, 447, 334, 335, 988,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 989, 348, 834, 990, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	991, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	992, 372, 353, 354, 373, 835, 374, 449, 375, 376,
	993, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	994, 382, 450, 995, 386, 387, 996, 388, 389, 390,
	391, 392, 393, 394, 395, 997, 451, 452, 396, 998,
	999, 397, 398, 453, 454, 1000, 399, 400, 401, 402,
	1001, 1002, 403, 404, 405, 407, 1003, 408, 1004, 406,
	409, 410, 411, 455, 456, 1005, 1006, 412, 1007, 1008,
	1009, 1010, 1011, 413, 414, 1012, 415, 416, 417, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1751, 211, 212, 213, 214, 928,
	215, 929, 930, 931, 932, 418, 933, 934, 935, 936,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	937, 222, 223, 224, 225, 226, 227, 938, 939, 423,
	424, 425, 940, 228, 426, 941, 887, 942, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 943, 238,
	0, 239, 240, 944, 820, 241, 242, 243, 945, 946,
	948, 947, 949, 950, 951, 244, 245, 465, 246, 247,
	248, 427, 428, 952, 249, 953, 250, 954, 251, 955,
	956, 252, 253, 957, 254, 958, 0, 959, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 960, 821, 961,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 962, 266, 963, 964, 822, 267, 965, 268, 433,
	966, 434, 967, 269, 270, 271, 272, 273, 274, 435,
	436, 824, 968, 276, 0, 0, 0, 283, 969, 275,
	970, 823, 277, 437, 279, 278, 280, 281, 282, 438,
	971, 439, 972, 284, 825, 826, 285, 286, 287, 827,
	288, 289, 0, 0, 290, 291, 292, 973, 294, 293,
	974, 440, 828, 295, 296, 829, 975, 297, 298, 976,
	977, 299, 0, 300, 889, 888, 301, 302, 304, 305,
	303, 830, 306, 307, 309, 308, 978, 979, 831, 980,
	441, 310, 442, 311, 312, 981, 313, 314, 982, 983,
	315, 316, 984, 985, 317, 443, 832, 318, 833, 444,
	319, 320, 321, 322, 323, 324, 325, 986, 326, 445,
	327, 446, 328, 987, 329, 330, 331, 332, 333, 447,
	334, 335, 988, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 989, 348, 834, 990,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 991, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 992, 372, 353, 354, 373, 835, 374,
	449, 375, 376, 993, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 994, 382, 450, 995, 386, 387, 996,
	388, 389, 390, 391, 392, 393, 394, 395, 997, 451,
	452, 396, 998, 999, 397, 398, 453, 454, 1000, 399,
	400, 401, 402, 1001, 1002, 403, 404, 405, 407, 1003,
	408, 1004, 406, 409, 410, 411, 455, 456, 1005, 1006,
	412, 1007, 1008, 1009, 1010, 1011, 413, 414, 1012, 415,
	416, 417, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 211, 212,
	213, 214, 928, 215, 929, 930, 931, 932, 418, 933,
	934, 935, 936, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 937, 222, 223, 224, 225, 226, 227,
	938, 939, 423, 424, 425, 940, 228, 426, 941, 887,
	942, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 943, 238, 0, 239, 240, 944, 820, 241, 242,
	243, 945, 946, 948, 947, 949, 950, 951, 244, 245,
	465, 246, 247, 248, 427, 428, 952, 249, 953, 250,
	954, 251, 955, 956, 252, 253, 957, 254, 958, 0,
	959, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	960, 821, 961, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 962, 266, 963, 964, 822, 267,
	965, 268, 433, 966, 434, 967, 269, 270, 271, 272,
	273, 274, 435, 436, 824, 968, 276, 0, 0, 0,
	283, 969, 275, 970, 823, 277, 437, 279, 278, 280,
	281, 282, 438, 971, 439, 972, 284, 825, 826, 285,
	286, 287, 827, 288, 289, 0, 0, 290, 291, 292,
	973, 294, 293, 974, 440, 828, 295, 296, 829, 975,
	297, 298, 976, 977, 299, 0, 300, 889, 888, 301,
	302, 304, 305, 303, 830, 306, 307, 309, 308, 978,
	979, 831, 980, 441, 310, 442, 311, 312, 981, 313,
	314, 982, 983, 315, 316, 984, 985, 317, 443, 832,
	318, 833, 444, 319, 320, 321, 322, 323, 324, 325,
	986, 326, 445, 327, 446, 328, 987, 329, 330, 331,
	332, 333, 447, 334, 335, 988, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 989,
	348, 834, 990, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 991, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 992, 372, 353, 354,
	373, 835, 374, 449, 375, 376, 993, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 994, 382, 450, 995,
	386, 387, 996, 388, 389, 390, 391, 392, 393, 394,
	395, 997, 451, 452, 396, 998, 999, 397, 398, 453,
	454, 1000, 399, 400, 401, 402, 1001, 1002, 403, 404,
	405, 407, 1003, 408, 1004, 406, 409, 410, 411, 455,
	456, 1005, 1006, 412, 1007, 1008, 1009, 1010, 1011, 413,
	414, 1012, 415, 416, 417, 1758, 0, 739, 727, 728,
	725, 726, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 1755, 215, 0,
	0, 0, 0, 774, 719, 0, 0, 0, 216, 217,
	218, 419, 793, 759, 794, 747, 780, 795, 0, 222,
	749, 748, 225, 226, 227, 722, 773, 796, 797, 425,
	0, 228, 778, 0, 764, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 820, 241, 242, 243, 767, 765, 766, 770,
	0, 768, 769, 244, 245, 465, 246, 781, 248, 798,
	799, 705, 249, 0, 250, 0, 251, 1756, 0, 782,
	253, 0, 254, 0, 0, 0, 710, 255, 256, 258,
	259, 257, 260, 800, 801, 734, 821, 0, 0, 0,
	0, 0, 261, 262, 802, 783, 784, 0, 265, 0,
	266, 0, 0, 822, 267, 0, 268, 803, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 775, 777, 824,
	0, 758, 0, 0, 0, 283, 0, 275, 0, 823,
	277, 804, 762, 785, 786, 787, 788, 805, 0, 763,
	0, 284, 825, 826, 285, 286, 287, 827, 789, 790,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 806,
	828, 295, 296, 829, 0, 297, 298, 0, 0, 299,
	0, 300, 707, 706, 301, 302, 304, 751, 303, 830,
	306, 307, 309, 308, 702, 0, 831, 735, 776, 310,
	807, 311, 312, 0, 760, 761, 0, 0, 315, 316,
	0, 0, 317, 443, 832, 318, 833, 808, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 809, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 810, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 834, 0, 349, 350,
	351, 711, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 752, 753, 754, 755, 364, 370,
	371, 771, 372, 353, 354, 373, 835, 374, 811, 756,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 791,
	381, 0, 382, 812, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 750, 395, 0, 813, 814, 792,
	0, 0, 397, 398, 815, 816, 733, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 772, 408, 0,
	757, 409, 410, 411, 455, 817, 1754, 0, 412, 0,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	703, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 699, 700, 1757, 0, 0, 0, 0,
	0, 0, 712, 1752, 0, 0, 0, 687, 715, 739,
	727, 728, 725, 726, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 774, 719, 0, 0, 0,
	216, 217, 218, 419, 793, 759, 794, 747, 780, 795,
	0, 222, 749, 748, 225, 226, 227, 722, 773, 796,
	797, 425, 0, 228, 778, 0, 764, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 820, 241, 242, 243, 767, 765,
	766, 770, 0, 768, 769, 244, 245, 465, 246, 781,
	248, 798, 799, 705, 249, 0, 250, 0, 251, 0,
	0, 782, 253, 0, 254, 0, 0, 0, 710, 255,
	256, 258, 259, 257, 260, 800, 801, 734, 821, 0,
	0, 0, 0, 0, 261, 262, 802, 783, 784, 0,
	265, 0, 266, 0, 0, 822, 267, 0, 268, 803,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 775,
	777, 824, 0, 758, 0, 0, 0, 283, 0, 275,
	0, 823, 277, 804, 762, 785, 786, 787, 788, 805,
	0, 763, 0, 284, 825, 826, 285, 286, 287, 827,
	789, 790, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 806, 828, 295, 296, 829, 0, 297, 298, 0,
	0, 299, 0, 300, 707, 706, 301, 302, 304, 751,
	303, 830, 306, 307, 309, 308, 702, 0, 831, 735,
	776, 310, 807, 311, 312, 0, 760, 761, 0, 0,
	315, 316, 0, 0, 317, 443, 832, 318, 833, 808,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 809,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 810,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 834, 0,
	349, 350, 351, 711, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 166, 368, 369, 752, 753, 754, 755,
	364, 370, 371, 771, 372, 353, 354, 373, 835, 374,
	811, 756, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 791, 381, 0, 382, 812, 0, 386, 387, 168,
	388, 389, 390, 391, 392, 393, 750, 395, 0, 813,
	814, 792, 0, 0, 397, 398, 815, 816, 733, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 772,
	408, 0, 757, 409, 410, 411, 1095, 817, 0, 0,
	412, 0, 0, 0, 0, 160, 413, 414, 0, 415,
	416, 417, 703, 161, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 699, 700, 739, 727, 728,
	725, 726, 716, 0, 1301, 0, 0, 0, 0, 0,
	715, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 774, 719, 0, 0, 0, 216, 217,
	218, 419, 793, 759, 794, 747, 780, 795, 0, 222,
	749, 748, 225, 226, 227, 722, 773, 796, 797, 425,
	0, 228, 778, 0, 764, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 820, 241, 242, 243, 767, 765, 766, 770,
	0, 768, 769, 244, 245, 465, 246, 781, 248, 798,
	799, 705, 249, 0, 250, 0, 251, 0, 0, 782,
	253, 0, 254, 0, 0, 0, 710, 255, 256, 258,
	259, 257, 260, 800, 801, 734, 821, 0, 0, 0,
	0, 0, 261, 262, 802, 783, 784, 0, 265, 0,
	266, 0, 0, 822, 267, 0, 268, 803, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 775, 777, 824,
	0, 758, 0, 0, 0, 283, 0, 275, 0, 823,
	277, 804, 762, 785, 786, 787, 788, 805, 0, 763,
	0, 284, 825, 826, 285, 286, 287, 827, 789, 790,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 806,
	828, 295, 296, 829, 0, 297, 298, 0, 0, 299,
	0, 300, 707, 706, 301, 302, 304, 751, 303, 830,
	306, 307, 309, 308, 702, 0, 831, 735, 776, 310,
	807, 311, 312, 0, 760, 761, 0, 0, 315, 316,
	0, 0, 317, 443, 832, 318, 833, 808, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 809, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 810, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 834, 0, 349, 350,
	351, 711, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 166, 368, 369, 752, 753, 754, 755, 364, 370,
	371, 771, 372, 353, 354, 373, 835, 374, 811, 756,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 791,
	381, 0, 382, 812, 0, 386, 387, 168, 388, 389,
	390, 391, 392, 393, 750, 395, 0, 813, 814, 792,
	0, 0, 397, 398, 815, 816, 733, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 772, 408, 0,
	757, 409, 410, 411, 1095, 817, 0, 0, 412, 0,
	0, 0, 0, 160, 413, 414, 0, 415, 416, 417,
	703, 161, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 699, 700, 739, 727, 728, 725, 726,
	716, 0, 1301, 0, 0, 0, 0, 0, 715, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 774, 719, 0, 0, 0, 216, 217, 218, 419,
	793, 759, 794, 747, 780, 795, 1825, 222, 749, 748,
	225, 226, 227, 722, 773, 796, 797, 425, 0, 228,
	778, 0, 764, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	820, 241, 242, 243, 767, 765, 766, 770, 0, 768,
	769, 244, 245, 465, 246, 781, 248, 798, 799, 705,
	249, 0, 250, 0, 251, 0, 0, 782, 253, 0,
	254, 0, 0, 0, 710, 255, 256, 258, 259, 257,
	260, 800, 801, 734, 821, 0, 0, 0, 0, 0,
	261, 262, 802, 783, 784, 0, 265, 0, 266, 0,
	1830, 822, 267, 0, 268, 803, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 775, 777, 824, 0, 758,
	0, 0, 0, 283, 0, 275, 0, 823, 277, 804,
	762, 785, 786, 787, 788, 805, 0, 763, 0, 284,
	825, 826, 285, 286, 287, 827, 789, 790, 0, 0,
	290, 291, 292, 0, 294, 293, 1826, 806, 828, 295,
	296, 829, 0, 297, 298, 0, 0, 299, 0, 300,
	707, 706, 301, 302, 304, 751, 303, 830, 306, 307,
	309, 308, 702, 0, 831, 735, 776, 310, 807, 311,
	312, 0, 760, 761, 0, 0, 315, 316, 0, 0,
	317, 443, 832, 318, 833, 808, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 809, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 810, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 834, 0, 349, 350, 351, 711,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 752, 753, 754, 755, 364, 370, 371, 771,
	372, 353, 354, 373, 835, 374, 811, 756, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 791, 381, 0,
	382, 812, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 750, 395, 0, 813, 814, 792, 0, 1827,
	397, 398, 815, 816, 733, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 772, 408, 0, 757, 409,
	410, 411, 455, 817, 0, 0, 412, 0, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 703, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 699, 700, 739, 727, 728, 725, 726, 716, 0,
	712, 0, 0, 0, 0, 0, 715, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 774,
	719, 0, 0, 0, 216, 217, 218, 419, 793, 759,
	794, 747, 780, 795, 0, 222, 749, 748, 225, 226,
	227, 722, 773, 796, 797, 425, 0, 228, 778, 0,
	764, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 820, 241,
	242, 243, 767, 765, 766, 770, 0, 768, 769, 244,
	245, 465, 246, 781, 248, 798, 799, 705, 249, 0,
	250, 0, 251, 0, 0, 782, 253, 0, 254, 0,
	0, 0, 710, 255, 256, 258, 259, 257, 260, 800,
	801, 734, 821, 0, 0, 0, 0, 0, 261, 262,
	802, 783, 784, 0, 265, 0, 266, 0, 0, 822,
	267, 0, 268, 803, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 775, 777, 824, 0, 758, 0, 0,
	0, 283, 0, 275, 0, 823, 277, 804, 762, 785,
	786, 787, 788, 805, 0, 763, 0, 284, 825, 826,
	285, 286, 287, 827, 789, 790, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 806, 828, 295, 296, 829,
	0, 297, 298, 0, 0, 299, 0, 300, 707, 706,
	301, 302, 304, 751, 303, 830, 306, 307, 309, 308,
	702, 2562, 831, 735, 776, 310, 807, 311, 312, 0,
	760, 761, 0, 0, 315, 316, 0, 0, 317, 443,
	832, 318, 833, 808, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 809, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 810, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 834, 0, 349, 350, 351, 711, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	752, 753, 754, 755, 364, 370, 371, 771, 372, 353,
	354, 373, 835, 374, 811, 756, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 791, 381, 0, 382, 812,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	750, 395, 0, 813, 814, 792, 0, 0, 397, 398,
	815, 816, 733, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 772, 408, 0, 757, 409, 410, 411,
	455, 817, 0, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 703, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 699,
	700, 1362, 739, 727, 728, 725, 726, 716, 712, 0,
	0, 0, 0, 0, 715, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 774, 719,
	0, 0, 0, 216, 217, 218, 419, 793, 759, 794,
	747, 780, 795, 0, 222, 749, 748, 225, 226, 227,
	722, 773, 796, 797, 425, 0, 228, 778, 0, 764,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 820, 241, 242,
	243, 767, 765, 766, 770, 0, 768, 769, 244, 245,
	465, 246, 781, 248, 798, 799, 705, 249, 0, 250,
	0, 251, 0, 0, 782, 253, 0, 254, 0, 0,
	0, 710, 255, 256, 258, 259, 257, 260, 800, 801,
	734, 821, 0, 0, 0, 0, 0, 261, 262, 802,
	783, 784, 0, 265, 0, 266, 0, 0, 822, 267,
	0, 268, 803, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 775, 777, 824, 0, 758, 0, 0, 0,
	283, 1656, 275, 0, 823, 277, 804, 762, 785, 786,
	787, 788, 805, 0, 763, 0, 284, 825, 826, 285,
	286, 287, 827, 789, 790, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 806, 828, 295, 296, 829, 0,
	297, 298, 0, 0, 299, 0, 300, 707, 706, 301,
	302, 304, 751, 303, 830, 306, 307, 309, 308, 702,
	0, 831, 735, 776, 310, 807, 311, 312, 0, 760,
	761, 0, 0, 315, 316, 0, 0, 317, 443, 832,
	318, 833, 808, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 809, 327, 446, 328, 1655, 329, 330, 331,
	332, 333, 810, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 834, 0, 349, 350, 351, 711, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 752,
	753, 754, 755, 364, 370, 371, 771, 372, 353, 354,
	373, 835, 374, 811, 756, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 791, 381, 0, 382, 812, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 750,
	395, 0, 813, 814, 792, 0, 0, 397, 398, 815,
	816, 733, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 772, 408, 0, 757, 409, 410, 411, 455,
	817, 0, 0, 412, 0, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 703, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 0, 699, 700,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 695, 715, 739, 727, 728, 725, 726, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	774, 719, 0, 0, 0, 216, 217, 218, 419, 793,
	759, 794, 747, 780, 795, 0, 222, 749, 748, 225,
	226, 227, 722, 773, 796, 797, 425, 0, 228, 778,
	0, 764, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 820,
	241, 242, 243, 767, 765, 766, 770, 0, 768, 769,
	244, 245, 465, 246, 781, 248, 798, 799, 705, 249,
	0, 250, 0, 251, 0, 0, 782, 253, 0, 254,
	0, 0, 0, 710, 255, 256, 258, 259, 257, 260,
	800, 801, 734, 821, 0, 0, 0, 0, 0, 261,
	262, 802, 783, 784, 0, 265, 0, 266, 0, 0,
	822, 267, 0, 268, 803, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 775, 777, 824, 0, 758, 0,
	0, 0, 283, 0, 275, 0, 823, 277, 804, 762,
	785, 786, 787, 788, 805, 0, 763, 0, 284, 825,
	826, 285, 286, 287, 827, 789, 790, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 806, 828, 295, 296,
	829, 0, 297, 298, 0, 0, 299, 0, 300, 707,
	706, 301, 302, 304, 751, 303, 830, 306, 307, 309,
	308, 702, 0, 831, 735, 776, 310, 807, 311, 312,
	0, 760, 761, 697, 0, 315, 316, 0, 0, 317,
	443, 832, 318, 833, 808, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 809, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 810, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 834, 0, 349, 350, 351, 711, 352,
	0, 356, 357, 358, 359, 360, 361, 362, 0, 368,
	369, 752, 753, 754, 755, 364, 370, 371, 771, 372,
	353, 354, 373, 835, 374, 811, 756, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 791, 381, 0, 382,
	812, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 750, 395, 0, 813, 814, 792, 0, 0, 397,
	398, 815, 816, 733, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 772, 408, 0, 757, 409, 410,
	411, 455, 817, 0, 0, 412, 0, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 703, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	699, 700, 739, 727, 728, 725, 726, 716, 0, 712,
	0, 0, 0, 0, 0, 715, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 774, 719,
	0, 0, 0, 216, 217, 218, 419, 793, 759, 794,
	747, 780, 795, 0, 222, 749, 748, 225, 226, 227,
	722, 773, 796, 797, 425, 0, 228, 778, 0, 764,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 820, 241, 242,
	243, 767, 765, 766, 770, 0, 768, 769, 244, 245,
	465, 246, 781, 248, 798, 799, 705, 249, 0, 250,
	0, 251, 0, 0, 782, 253, 0, 254, 0, 0,
	0, 710, 255, 256, 258, 259, 257, 260, 800, 801,
	734, 821, 0, 0, 0, 0, 0, 261, 262, 802,
	783, 784, 0, 265, 0, 266, 0, 0, 822, 267,
	0, 268, 803, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 775, 777, 824, 0, 758, 0, 0, 0,
	283, 0, 275, 0, 823, 277, 804, 762, 785, 786,
	787, 788, 805, 0, 763, 0, 284, 825, 826, 285,
	286, 287, 827, 789, 790, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 806, 828, 295, 296, 829, 0,
	297, 298, 0, 0, 299, 0, 300, 707, 706, 301,
	302, 304, 751, 303, 830, 306, 307, 309, 308, 702,
	0, 831, 735, 776, 310, 807, 311, 312, 0, 760,
	761, 0, 0, 315, 316, 0, 0, 317, 443, 832,
	318, 833, 808, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 809, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 810, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 834, 0, 349, 350, 351, 711, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 752,
	753, 754, 755, 364, 370, 371, 771, 372, 353, 354,
	373, 835, 374, 811, 756, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 791, 381, 0, 382, 812, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 750,
	395, 0, 813, 814, 792, 0, 0, 397, 398, 815,
	816, 733, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 772, 408, 0, 757, 409, 410, 411, 455,
	817, 2397, 0, 412, 0, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 703, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 0, 699, 700,
	739, 727, 728, 725, 726, 716, 0, 712, 0, 0,
	0, 0, 0, 715, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 774, 719, 0, 0,
	0, 216, 217, 218, 419, 793, 759, 794, 747, 780,
	795, 0, 222, 749, 748, 225, 226, 227, 722, 773,
	796, 797, 425, 0, 228, 778, 0, 764, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 820, 241, 242, 243, 767,
	765, 766, 770, 0, 768, 769, 244, 245, 465, 246,
	781, 248, 798, 799, 705, 249, 0, 250, 0, 251,
	0, 0, 782, 253, 0, 254, 0, 0, 0, 710,
	255, 256, 258, 259, 257, 260, 800, 801, 734, 821,
	0, 0, 0, 0, 0, 261, 262, 802, 783, 784,
	0, 265, 0, 266, 0, 0, 822, 267, 0, 268,
	803, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	775, 777, 824, 0, 758, 0, 0, 0, 283, 0,
	275, 0, 823, 277, 804, 762, 785, 786, 787, 788,
	805, 0, 763, 0, 284, 825, 826, 285, 286, 287,
	827, 789, 790, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 806, 828, 295, 296, 829, 0, 297, 298,
	0, 0, 299, 0, 300, 707, 706, 301, 302, 304,
	751, 303, 830, 306, 307, 309, 308, 702, 0, 831,
	735, 776, 310, 807, 311, 312, 0, 760, 761, 697,
	0, 315, 316, 0, 0, 317, 443, 832, 318, 833,
	808, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	809, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	810, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 834,
	0, 349, 350, 351, 711, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 752, 753, 754,
	755, 364, 370, 371, 771, 372, 353, 354, 373, 835,
	374, 811, 756, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 791, 381, 0, 382, 812, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 750, 395, 0,
	813, 814, 792, 0, 0, 397, 398, 815, 816, 733,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	772, 408, 0, 757, 409, 410, 411, 455, 817, 0,
	0, 412, 0, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 703, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 0, 0, 699, 700, 739, 727,
	728, 725, 726, 716, 0, 712, 0, 0, 0, 0,
	0, 715, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 774, 719, 0, 0, 0, 216,
	217, 218, 419, 793, 759, 794, 747, 780, 795, 0,
	222, 749, 748, 225, 226, 227, 722, 773, 796, 797,
	425, 0, 228, 778, 0, 764, 0, 229, 230, 231,
	232, 233, 0, 235, 236, 237, 234, 0, 238, 0,
	239, 240, 0, 820, 241, 242, 243, 767, 765, 766,
	770, 0, 768, 769, 244, 245, 465, 246, 781, 248,
	798, 799, 705, 249, 0, 250, 0, 251, 0, 0,
	782, 253, 0, 254, 0, 0, 0, 710, 255, 256,
	258, 259, 257, 260, 800, 801, 734, 821, 0, 0,
	0, 0, 0, 261, 262, 802, 783, 784, 0, 265,
	0, 266, 0, 0, 822, 267, 0, 268, 803, 0,
	434, 0, 269, 270, 271, 272, 273, 274, 775, 777,
	824, 0, 758, 0, 0, 0, 283, 0, 275, 0,
	823, 277, 804, 762, 785, 786, 787, 788, 805, 0,
	763, 0, 284, 825, 826, 285, 286, 287, 827, 789,
	790, 0, 0, 290, 291, 292, 0, 294, 293, 0,
	806, 828, 295, 296, 829, 0, 297, 298, 0, 0,
	299, 0, 300, 707, 706, 301, 302, 304, 751, 303,
	830, 306, 307, 309, 308, 702, 0, 831, 735, 776,
	310, 807, 311, 312, 0, 760, 761, 0, 0, 315,
	316, 0, 0, 317, 443, 832, 318, 833, 808, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 809, 327,
	446, 328, 0, 329, 330, 331, 332, 333, 810, 334,
	335, 0, 336, 337, 338, 339, 340, 0, 342, 343,
	341, 344, 345, 346, 347, 0, 348, 834, 0, 349,
	350, 351, 711, 352, 0, 356, 357, 358, 359, 360,
	361, 362, 0, 368, 369, 752, 753, 754, 755, 364,
	370, 371, 771, 372, 353, 354, 373, 835, 374, 811,
	756, 376, 0, 385, 377, 378, 379, 355, 380, 383,
	791, 381, 0, 382, 812, 0, 386, 387, 0, 388,
	389, 390, 391, 392, 393, 750, 395, 0, 813, 814,
	792, 0, 0, 397, 398, 815, 816, 733, 399, 400,
	401, 402, 0, 0, 403, 404, 405, 407, 772, 408,
	0, 757, 409, 410, 411, 455, 817, 0, 0, 412,
	0, 0, 0, 0, 0, 413, 414, 0, 415, 416,
	417, 703, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 0, 699, 700, 1362, 739, 727, 728,
	725, 726, 716, 712, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 774, 719, 0, 0, 0, 216, 217,
	218, 419, 793, 759, 794, 747, 780, 795, 0, 222,
	749, 748, 225, 226, 227, 722, 773, 796, 797, 425,
	0, 228, 778, 0, 764, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 820, 241, 242, 243, 767, 765, 766, 770,
	0, 768, 769, 244, 245, 465, 246, 781, 248, 798,
	799, 705, 249, 0, 250, 0, 251, 0, 0, 782,
	253, 0, 254, 0, 0, 0, 710, 255, 256, 258,
	259, 257, 260, 800, 801, 734, 821, 0, 0, 0,
	0, 0, 261, 262, 802, 783, 784, 0, 265, 0,
	266, 0, 1830, 822, 267, 0, 268, 803, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 775, 777, 824,
	0, 758, 0, 0, 0, 283, 0, 275, 0, 823,
	277, 804, 762, 785, 786, 787, 788, 805, 0, 763,
	0, 284, 825, 826, 285, 286, 287, 827, 789, 790,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 806,
	828, 295, 296, 829, 0, 297, 298, 0, 0, 299,
	0, 300, 707, 706, 301, 302, 304, 751, 303, 830,
	306, 307, 309, 308, 702, 0, 831, 735, 776, 310,
	807, 311, 312, 0, 760, 761, 0, 0, 315, 316,
	0, 0, 317, 443, 832, 318, 833, 808, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 809, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 810, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 834, 0, 349, 350,
	351, 711, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 752, 753, 754, 755, 364, 370,
	371, 771, 372, 353, 354, 373, 835, 374, 811, 756,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 791,
	381, 0, 382, 812, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 750, 395, 0, 813, 814, 792,
	0, 0, 397, 398, 815, 816, 733, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 772, 408, 0,
	757, 409, 410, 411, 455, 817, 0, 0, 412, 0,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	703, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 699, 700, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 1864, 715, 739,
	727, 728, 725, 726, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 774, 719, 0, 0, 0,
	216, 217, 218, 419, 793, 759, 794, 747, 780, 795,
	0, 222, 749, 748, 225, 226, 227, 722, 773, 796,
	797, 425, 0, 228, 778, 0, 764, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 820, 241, 242, 243, 767, 765,
	766, 770, 0, 768, 769, 244, 245, 465, 246, 781,
	248, 798, 799, 705, 249, 0, 250, 0, 251, 0,
	0, 782, 253, 0, 254, 0, 0, 0, 710, 255,
	256, 258, 259, 257, 260, 800, 801, 734, 821, 0,
	0, 0, 0, 0, 261, 262, 802, 783, 784, 0,
	265, 0, 266, 0, 0, 822, 267, 0, 268, 803,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 775,
	777, 824, 0, 758, 0, 0, 0, 283, 0, 275,
	0, 823, 277, 804, 762, 785, 786, 787, 788, 805,
	0, 763, 0, 284, 825, 826, 285, 286, 287, 827,
	789, 790, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 806, 828, 295, 296, 829, 0, 297, 298, 0,
	0, 299, 0, 300, 707, 706, 301, 302, 304, 751,
	303, 830, 306, 307, 309, 308, 702, 0, 831, 735,
	776, 310, 807, 311, 312, 0, 760, 761, 0, 0,
	315, 316, 0, 0, 317, 443, 832, 318, 833, 808,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 809,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 810,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 834, 0,
	349, 350, 351, 711, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 752, 753, 754, 755,
	364, 370, 371, 771, 372, 353, 354, 373, 835, 374,
	811, 756, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 791, 381, 0, 382, 812, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 750, 395, 0, 813,
	814, 792, 0, 0, 397, 398, 815, 816, 733, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 772,
	408, 0, 757, 409, 410, 411, 455, 817, 0, 0,
	412, 0, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 703, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 699, 700, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 1818,
	715, 739, 727, 728, 725, 726, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 774, 719, 0,
	0, 0, 216, 217, 218, 419, 793, 759, 794, 747,
	780, 795, 0, 222, 749, 748, 225, 226, 227, 722,
	773, 796, 797, 425, 0, 228, 778, 0, 764, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	767, 765, 766, 770, 0, 768, 769, 244, 245, 465,
	246, 781, 248, 798, 799, 705, 249, 0, 250, 0,
	251, 0, 0, 782, 253, 0, 254, 0, 0, 0,
	710, 255, 256, 258, 259, 257, 260, 800, 801, 734,
	821, 0, 0, 0, 0, 0, 261, 262, 802, 783,
	784, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 775, 777, 824, 0, 758, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 804, 762, 785, 786, 787,
	788, 805, 0, 763, 0, 284, 825, 826, 285, 286,
	287, 827, 789, 790, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 707, 706, 301, 302,
	304, 751, 303, 830, 306, 307, 309, 308, 702, 0,
	831, 735, 776, 310, 807, 311, 312, 0, 760, 761,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 810, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 711, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 752, 753,
	754, 755, 364, 370, 371, 771, 372, 353, 354, 373,
	835, 374, 811, 756, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 791, 381, 0, 382, 812, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 750, 395,
	0, 813, 814, 792, 0, 0, 397, 398, 815, 816,
	733, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 772, 408, 0, 757, 409, 410, 411, 455, 817,
	0, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 703, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 0, 699, 700, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 1806, 715, 739, 727, 728, 725, 726, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 774,
	719, 0, 0, 0, 216, 217, 218, 419, 793, 759,
	794, 747, 780, 795, 0, 222, 749, 748, 225, 226,
	227, 722, 773, 796, 797, 425, 0, 228, 778, 0,
	764, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 820, 241,
	242, 243, 767, 765, 766, 770, 0, 768, 769, 244,
	245, 465, 246, 781, 248, 798, 799, 705, 249, 0,
	250, 0, 251, 0, 0, 782, 253, 0, 254, 0,
	0, 0, 710, 255, 256, 258, 259, 257, 260, 800,
	801, 734, 821, 0, 0, 0, 0, 0, 261, 262,
	802, 783, 784, 0, 265, 0, 266, 0, 0, 822,
	267, 0, 268, 803, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 775, 777, 824, 0, 758, 0, 0,
	0, 283, 0, 275, 0, 823, 277, 804, 762, 785,
	786, 787, 788, 805, 0, 763, 0, 284, 825, 826,
	285, 286, 287, 827, 789, 790, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 806, 828, 295, 296, 829,
	0, 297, 298, 0, 0, 299, 0, 300, 707, 706,
	301, 302, 304, 751, 303, 830, 306, 307, 309, 308,
	702, 0, 831, 735, 776, 310, 807, 311, 312, 0,
	760, 761, 0, 0, 315, 316, 0, 0, 317, 443,
	832, 318, 833, 808, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 809, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 810, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 834, 0, 349, 350, 351, 711, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	752, 753, 754, 755, 364, 370, 371, 771, 372, 353,
	354, 373, 835, 374, 811, 756, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 791, 381, 0, 382, 812,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	750, 395, 0, 813, 814, 792, 0, 0, 397, 398,
	815, 816, 733, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 772, 408, 0, 757, 409, 410, 411,
	455, 817, 0, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 703, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 699,
	700, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 1804, 715, 739, 727, 728, 725, 726,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 774, 719, 0, 0, 0, 216, 217, 218, 419,
	793, 759, 794, 747, 780, 795, 0, 222, 749, 748,
	225, 226, 227, 722, 773, 796, 797, 425, 0, 228,
	778, 0, 764, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	820, 241, 242, 243, 767, 765, 766, 770, 0, 768,
	769, 244, 245, 465, 246, 781, 248, 798, 799, 705,
	249, 0, 250, 0, 251, 0, 0, 782, 253, 0,
	254, 0, 0, 0, 710, 255, 256, 258, 259, 257,
	260, 800, 801, 734, 821, 0, 0, 0, 0, 0,
	261, 262, 802, 783, 784, 0, 265, 0, 266, 0,
	0, 822, 267, 0, 268, 803, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 775, 777, 824, 0, 758,
	0, 0, 0, 283, 0, 275, 0, 823, 277, 804,
	762, 785, 786, 787, 788, 805, 0, 763, 0, 284,
	825, 826, 285, 286, 287, 827, 789, 790, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 806, 828, 295,
	296, 829, 0, 297, 298, 0, 0, 299, 0, 300,
	707, 706, 301, 302, 304, 751, 303, 830, 306, 307,
	309, 308, 702, 0, 831, 735, 776, 310, 807, 311,
	312, 0, 760, 761, 0, 0, 315, 316, 0, 0,
	317, 443, 832, 318, 833, 808, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 809, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 810, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 834, 0, 349, 350, 351, 711,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 752, 753, 754, 755, 364, 370, 371, 771,
	372, 353, 354, 373, 835, 374, 811, 756, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 791, 381, 0,
	382, 812, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 750, 395, 0, 813, 814, 792, 0, 0,
	397, 398, 815, 816, 733, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 772, 408, 0, 757, 409,
	410, 411, 455, 817, 0, 0, 412, 0, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 703, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 699, 700, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 1802, 715, 739, 727, 728,
	725, 726, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 774, 719, 0, 0, 0, 216, 217,
	218, 419, 793, 759, 794, 747, 780, 795, 0, 222,
	749, 748, 225, 226, 227, 722, 773, 796, 797, 425,
	0, 228, 778, 0, 764, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 820, 241, 242, 243, 767, 765, 766, 770,
	0, 768, 769, 244, 245, 465, 246, 781, 248, 798,
	799, 705, 249, 0, 250, 0, 251, 0, 0, 782,
	253, 0, 254, 0, 0, 0, 710, 255, 256, 258,
	259, 257, 260, 800, 801, 734, 821, 0, 0, 0,
	0, 0, 261, 262, 802, 783, 784, 0, 265, 0,
	266, 0, 0, 822, 267, 0, 268, 803, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 775, 777, 824,
	0, 758, 0, 0, 0, 283, 0, 275, 0, 823,
	277, 804, 762, 785, 786, 787, 788, 805, 0, 763,
	0, 284, 825, 826, 285, 286, 287, 827, 789, 790,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 806,
	828, 295, 296, 829, 0, 297, 298, 0, 0, 299,
	0, 300, 707, 706, 301, 302, 304, 751, 303, 830,
	306, 307, 309, 308, 702, 0, 831, 735, 776, 310,
	807, 311, 312, 0, 760, 761, 0, 0, 315, 316,
	0, 0, 317, 443, 832, 318, 833, 808, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 809, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 810, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 834, 0, 349, 350,
	351, 711, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 752, 753, 754, 755, 364, 370,
	371, 771, 372, 353, 354, 373, 835, 374, 811, 756,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 791,
	381, 0, 382, 812, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 750, 395, 0, 813, 814, 792,
	0, 0, 397, 398, 815, 816, 733, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 772, 408, 0,
	757, 409, 410, 411, 455, 817, 0, 0, 412, 0,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	703, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 699, 700, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 1799, 715, 1791,
	727, 728, 725, 726, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 774, 719, 0, 0, 0,
	216, 217, 218, 419, 793, 759, 794, 747, 780, 795,
	0, 222, 749, 748, 225, 226, 227, 722, 773, 796,
	797, 425, 0, 228, 778, 0, 764, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 820, 241, 242, 243, 767, 765,
	766, 770, 0, 768, 769, 244, 245, 465, 246, 781,
	1794, 798, 799, 705, 249, 0, 250, 0, 251, 0,
	0, 782, 253, 0, 254, 0, 0, 0, 710, 255,
	256, 258, 259, 257, 260, 800, 801, 734, 821, 0,
	0, 0, 0, 0, 261, 262, 802, 783, 784, 0,
	265, 0, 266, 0, 0, 822, 267, 0, 268, 803,
	0, 434, 0, 269, 270, 1795, 272, 273, 274, 775,
	777, 824, 0, 758, 0, 0, 0, 283, 0, 275,
	0, 823, 277, 804, 762, 785, 786, 787, 788, 805,
	0, 763, 0, 284, 825, 826, 285, 286, 287, 827,
	789, 790, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 806, 828, 295, 296, 829, 0, 297, 298, 0,
	0, 299, 0, 300, 707, 706, 1796, 1793, 304, 751,
	303, 830, 306, 307, 309, 308, 702, 0, 831, 735,
	776, 310, 807, 311, 312, 0, 760, 761, 0, 0,
	315, 316, 0, 0, 317, 443, 832, 318, 833, 808,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 809,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 810,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 834, 0,
	349, 350, 351, 711, 352, 0, 356, 357, 358, 359,
	360, 361, 1797, 0, 368, 369, 752, 753, 754, 755,
	364, 370, 371, 771, 372, 353, 354, 373, 835, 374,
	811, 756, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 791, 381, 0, 382, 812, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 750, 395, 0, 813,
	814, 792, 0, 0, 397, 398, 815, 816, 733, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 772,
	408, 0, 757, 409, 410, 411, 455, 817, 0, 0,
	412, 0, 0, 0, 0, 0, 413, 414, 0, 415,
	1792, 417, 703, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 699, 700, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 1788,
	715, 1791, 727, 728, 725, 726, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 774, 719, 0,
	0, 0, 216, 217, 218, 419, 793, 759, 794, 747,
	780, 795, 0, 222, 749, 748, 225, 226, 227, 722,
	773, 796, 797, 425, 0, 228, 778, 0, 764, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	767, 765, 766, 770, 0, 768, 769, 244, 245, 465,
	246, 781, 1794, 798, 799, 705, 249, 0, 250, 0,
	251, 0, 0, 782, 253, 0, 254, 0, 0, 0,
	710, 255, 256, 258, 259, 257, 260, 800, 801, 734,
	821, 0, 0, 0, 0, 0, 261, 262, 802, 783,
	784, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 1795, 272, 273,
	274, 775, 777, 824, 0, 758, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 804, 762, 785, 786, 787,
	788, 805, 0, 763, 0, 284, 825, 826, 285, 286,
	287, 827, 789, 790, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 707, 706, 1796, 1793,
	304, 751, 303, 830, 306, 307, 309, 308, 702, 0,
	831, 735, 776, 310, 807, 311, 312, 0, 760, 761,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 810, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 711, 352, 0, 356, 357,
	358, 359, 360, 361, 1797, 0, 368, 369, 752, 753,
	754, 755, 364, 370, 371, 771, 372, 353, 354, 373,
	835, 374, 811, 756, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 791, 381, 0, 382, 812, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 750, 395,
	0, 813, 814, 792, 0, 0, 397, 398, 815, 816,
	733, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 772, 408, 0, 757, 409, 410, 411, 455, 817,
	0, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 1792, 417, 703, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 0, 699, 700, 739,
	727, 728, 725, 726, 716, 0, 712, 0, 0, 0,
	0, 0, 715, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 774, 719, 0, 0, 0,
	216, 217, 218, 419, 793, 759, 794, 747, 780, 795,
	0, 222, 749, 748, 225, 226, 227, 722, 773, 796,
	797, 425, 0, 228, 778, 0, 764, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 820, 241, 242, 243, 767, 765,
	766, 770, 0, 768, 769, 244, 245, 465, 246, 781,
	248, 798, 799, 705, 249, 0, 250, 0, 251, 0,
	0, 782, 253, 0, 254, 0, 0, 0, 710, 255,
	256, 258, 259, 257, 260, 800, 801, 734, 821, 0,
	0, 0, 0, 0, 261, 262, 802, 783, 784, 0,
	265, 0, 266, 0, 0, 822, 267, 0, 268, 803,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 775,
	777, 824, 0, 758, 0, 0, 0, 283, 0, 275,
	0, 823, 277, 804, 762, 785, 786, 787, 788, 805,
	0, 763, 0, 284, 825, 826, 285, 286, 287, 827,
	789, 790, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 806, 828, 295, 296, 829, 0, 297, 298, 0,
	0, 299, 0, 300, 707, 706, 301, 302, 304, 751,
	303, 830, 306, 307, 309, 308, 702, 0, 831, 735,
	776, 310, 807, 311, 312, 0, 760, 761, 0, 0,
	315, 316, 0, 0, 317, 443, 832, 318, 833, 808,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 809,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 810,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 834, 0,
	349, 350, 351, 711, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 752, 753, 754, 755,
	364, 370, 371, 771, 372, 353, 354, 373, 835, 374,
	811, 756, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 791, 381, 0, 382, 812, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 750, 395, 0, 813,
	814, 792, 0, 0, 397, 398, 815, 816, 733, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 772,
	408, 0, 757, 409, 410, 411, 455, 817, 0, 0,
	412, 0, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 703, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 699, 700, 0, 0, 0,
	0, 0, 1306, 0, 712, 0, 0, 0, 0, 0,
	715, 739, 727, 728, 725, 726, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 1643, 215, 0, 0, 0, 0, 774, 719, 0,
	0, 0, 216, 217, 218, 419, 793, 759, 794, 747,
	780, 795, 0, 222, 749, 748, 225, 226, 227, 722,
	773, 796, 797, 425, 0, 228, 778, 0, 764, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	767, 765, 766, 770, 0, 768, 769, 244, 245, 465,
	246, 781, 248, 798, 799, 705, 249, 0, 250, 0,
	251, 0, 0, 782, 253, 0, 254, 0, 0, 0,
	710, 255, 256, 258, 259, 257, 260, 800, 801, 734,
	821, 0, 0, 0, 0, 0, 261, 262, 802, 783,
	784, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 775, 777, 824, 0, 758, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 804, 762, 785, 786, 787,
	788, 805, 0, 763, 0, 284, 825, 826, 285, 286,
	287, 827, 789, 790, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 707, 706, 301, 302,
	304, 751, 303, 830, 306, 307, 309, 308, 702, 0,
	831, 735, 776, 310, 807, 311, 312, 0, 760, 761,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 810, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 711, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 752, 753,
	754, 755, 364, 370, 371, 771, 372, 353, 354, 373,
	835, 374, 811, 756, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 791, 381, 0, 382, 812, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 750, 395,
	0, 813, 814, 792, 0, 0, 397, 398, 815, 816,
	733, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 772, 408, 0, 757, 409, 410, 411, 455, 817,
	0, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 703, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 0, 699, 700, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 1024, 715, 739, 727, 728, 725, 726, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 774,
	719, 0, 0, 0, 216, 217, 218, 419, 793, 759,
	794, 747, 780, 795, 0, 222, 749, 748, 225, 226,
	227, 722, 773, 796, 797, 425, 0, 228, 778, 0,
	764, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 820, 241,
	242, 243, 767, 765, 766, 770, 0, 768, 769, 244,
	245, 465, 246, 781, 248, 798, 799, 705, 249, 0,
	250, 0, 251, 0, 0, 782, 253, 0, 254, 0,
	0, 0, 710, 255, 256, 258, 259, 257, 260, 800,
	801, 734, 821, 0, 0, 0, 0, 0, 261, 262,
	802, 783, 784, 0, 265, 0, 266, 0, 0, 822,
	267, 0, 268, 803, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 775, 777, 824, 0, 758, 0, 0,
	0, 283, 0, 275, 0, 823, 277, 804, 762, 785,
	786, 787, 788, 805, 0, 763, 0, 284, 825, 826,
	285, 286, 287, 827, 789, 790, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 806, 828, 295, 296, 829,
	0, 297, 298, 0, 0, 299, 0, 300, 707, 706,
	301, 302, 304, 751, 303, 830, 306, 307, 309, 308,
	702, 0, 831, 735, 776, 310, 807, 311, 312, 0,
	760, 761, 0, 0, 315, 316, 0, 0, 317, 443,
	832, 318, 833, 808, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 809, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 810, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 834, 0, 349, 350, 351, 711, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	752, 753, 754, 755, 364, 370, 371, 771, 372, 353,
	354, 373, 835, 374, 811, 756, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 791, 381, 0, 382, 812,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	750, 395, 0, 813, 814, 792, 0, 0, 397, 398,
	815, 816, 733, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 772, 408, 0, 757, 409, 410, 411,
	455, 817, 0, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 703, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 699,
	700, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 1022, 715, 739, 727, 728, 725, 726,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 774, 719, 0, 0, 0, 216, 217, 218, 419,
	793, 759, 794, 747, 780, 795, 0, 222, 749, 748,
	225, 226, 227, 722, 773, 796, 797, 425, 0, 228,
	778, 0, 764, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	820, 241, 242, 243, 767, 765, 766, 770, 0, 768,
	769, 244, 245, 465, 246, 781, 248, 798, 799, 705,
	249, 0, 250, 0, 251, 0, 0, 782, 253, 0,
	254, 0, 0, 0, 710, 255, 256, 258, 259, 257,
	260, 800, 801, 734, 821, 0, 0, 0, 0, 0,
	261, 262, 802, 783, 784, 0, 265, 0, 266, 0,
	0, 822, 267, 0, 268, 803, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 775, 777, 824, 0, 758,
	0, 0, 0, 283, 0, 275, 0, 823, 277, 804,
	762, 785, 786, 787, 788, 805, 0, 763, 0, 284,
	825, 826, 285, 286, 287, 827, 789, 790, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 806, 828, 295,
	296, 829, 0, 297, 298, 0, 0, 299, 0, 300,
	707, 706, 301, 302, 304, 751, 303, 830, 306, 307,
	309, 308, 702, 0, 831, 735, 776, 310, 807, 311,
	312, 0, 760, 761, 0, 0, 315, 316, 0, 0,
	317, 443, 832, 318, 833, 808, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 809, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 810, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 834, 0, 349, 350, 351, 711,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 752, 753, 754, 755, 364, 370, 371, 771,
	372, 353, 354, 373, 835, 374, 811, 756, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 791, 381, 0,
	382, 812, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 750, 395, 0, 813, 814, 792, 0, 0,
	397, 398, 815, 816, 733, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 772, 408, 0, 757, 409,
	410, 411, 455, 817, 0, 0, 412, 0, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 703, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 699, 700, 739, 727, 728, 725, 726, 716, 0,
	712, 0, 0, 0, 0, 0, 715, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 774,
	719, 0, 0, 0, 216, 217, 218, 419, 793, 759,
	794, 747, 780, 795, 0, 222, 749, 748, 225, 226,
	227, 722, 773, 796, 797, 425, 0, 228, 778, 0,
	764, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 820, 241,
	242, 243, 767, 765, 766, 770, 0, 768, 769, 244,
	245, 465, 246, 781, 248, 798, 799, 705, 249, 0,
	250, 0, 251, 0, 0, 782, 253, 0, 254, 0,
	0, 0, 710, 255, 256, 258, 259, 257, 260, 800,
	801, 734, 821, 0, 0, 0, 0, 0, 261, 262,
	802, 783, 784, 0, 265, 0, 266, 0, 0, 822,
	267, 0, 268, 803, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 775, 777, 824, 0, 758, 0, 0,
	0, 283, 0, 275, 0, 823, 277, 804, 762, 785,
	786, 787, 788, 805, 0, 763, 0, 284, 825, 826,
	285, 286, 287, 827, 789, 790, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 806, 828, 295, 296, 829,
	0, 297, 298, 0, 0, 299, 0, 300, 707, 706,
	301, 302, 304, 751, 303, 830, 306, 307, 309, 308,
	702, 0, 831, 735, 776, 310, 807, 311, 312, 0,
	760, 761, 0, 0, 315, 316, 0, 0, 317, 443,
	832, 318, 833, 808, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 809, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 810, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 834, 0, 349, 350, 351, 711, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	752, 753, 754, 755, 364, 370, 371, 771, 372, 353,
	354, 373, 835, 374, 811, 756, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 791, 381, 0, 382, 812,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	750, 395, 0, 813, 814, 792, 0, 0, 397, 398,
	815, 816, 733, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 772, 408, 0, 757, 409, 410, 411,
	455, 817, 0, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 703, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 699,
	700, 739, 727, 728, 725, 726, 716, 0, 712, 0,
	0, 0, 0, 0, 715, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 774, 719, 0,
	0, 0, 216, 217, 218, 419, 793, 759, 794, 747,
	780, 795, 0, 222, 749, 748, 225, 226, 227, 722,
	773, 796, 797, 425, 0, 228, 778, 0, 764, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 2945,
	767, 765, 766, 770, 0, 768, 769, 244, 245, 465,
	246, 781, 248, 798, 799, 705, 249, 0, 250, 0,
	251, 0, 0, 782, 253, 0, 254, 0, 0, 0,
	710, 255, 256, 258, 259, 257, 260, 800, 801, 734,
	821, 0, 0, 0, 0, 0, 261, 262, 802, 783,
	784, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 775, 777, 824, 0, 758, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 804, 762, 785, 786, 787,
	788, 805, 0, 763, 0, 284, 825, 826, 285, 286,
	287, 827, 789, 790, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 707, 706, 301, 302,
	304, 751, 303, 830, 306, 307, 309, 308, 702, 0,
	831, 735, 776, 310, 807, 311, 312, 0, 760, 761,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 810, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 711, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 752, 753,
	754, 755, 364, 370, 371, 771, 372, 353, 354, 373,
	835, 374, 811, 756, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 791, 381, 0, 382, 812, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 750, 395,
	0, 813, 814, 792, 0, 0, 397, 398, 815, 816,
	733, 399, 400, 2944, 402, 0, 0, 403, 404, 405,
	407, 772, 408, 0, 757, 409, 410, 411, 455, 817,
	0, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 703, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 0, 699, 700, 739,
	727, 728, 725, 726, 716, 0, 712, 0, 0, 0,
	0, 0, 715, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 774, 719, 0, 0, 0,
	216, 217, 218, 2943, 793, 759, 794, 747, 780, 795,
	0, 222, 749, 748, 225, 226, 227, 722, 773, 796,
	797, 425, 0, 228, 778, 0, 764, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 820, 241, 242, 2945, 767, 765,
	766, 770, 0, 768, 769, 244, 245, 465, 246, 781,
	248, 798, 799, 705, 249, 0, 250, 0, 251, 0,
	0, 782, 253, 0, 254, 0, 0, 0, 710, 255,
	256, 258, 259, 257, 260, 800, 801, 734, 821, 0,
	0, 0, 0, 0, 261, 262, 802, 783, 784, 0,
	265, 0, 266, 0, 0, 822, 267, 0, 268, 803,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 775,
	777, 824, 0, 758, 0, 0, 0, 283, 0, 275,
	0, 823, 277, 804, 762, 785, 786, 787, 788, 805,
	0, 763, 0, 284, 825, 826, 285, 286, 287, 827,
	789, 790, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 806, 828, 295, 296, 829, 0, 297, 298, 0,
	0, 299, 0, 300, 707, 706, 301, 302, 304, 751,
	303, 830, 306, 307, 309, 308, 702, 0, 831, 735,
	776, 310, 807, 311, 312, 0, 760, 761, 0, 0,
	315, 316, 0, 0, 317, 443, 832, 318, 833, 808,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 809,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 810,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 834, 0,
	349, 350, 351, 711, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 752, 753, 754, 755,
	364, 370, 371, 771, 372, 353, 354, 373, 835, 374,
	811, 756, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 791, 381, 0, 382, 812, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 750, 395, 0, 813,
	814, 792, 0, 0, 397, 398, 815, 816, 733, 399,
	400, 2944, 402, 0, 0, 403, 404, 405, 407, 772,
	408, 0, 757, 409, 410, 411, 455, 817, 0, 0,
	412, 0, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 703, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 699, 700, 739, 727, 728,
	725, 726, 716, 0, 712, 0, 0, 0, 0, 0,
	715, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 774, 719, 0, 0, 0, 216, 217,
	218, 419, 793, 759, 794, 747, 780, 795, 0, 222,
	749, 748, 225, 226, 227, 722, 773, 796, 797, 425,
	0, 228, 778, 0, 764, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 820, 241, 242, 243, 767, 765, 766, 770,
	0, 768, 769, 244, 245, 465, 246, 781, 248, 798,
	799, 0, 249, 0, 250, 0, 251, 0, 0, 782,
	253, 0, 254, 0, 0, 0, 710, 255, 256, 258,
	259, 257, 260, 800, 801, 734, 821, 0, 0, 0,
	0, 0, 261, 262, 802, 783, 784, 0, 265, 0,
	266, 0, 0, 822, 267, 0, 268, 803, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 775, 777, 824,
	0, 758, 0, 0, 0, 283, 0, 275, 0, 823,
	277, 804, 762, 785, 786, 787, 788, 805, 0, 763,
	0, 284, 825, 826, 285, 286, 287, 827, 789, 790,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 806,
	828, 295, 296, 829, 0, 297, 298, 0, 0, 299,
	0, 300, 889, 888, 301, 302, 304, 751, 303, 830,
	306, 307, 309, 308, 0, 0, 831, 735, 776, 310,
	807, 311, 312, 0, 760, 761, 0, 0, 315, 316,
	0, 0, 317, 443, 832, 318, 833, 808, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 809, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 810, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 834, 0, 349, 350,
	351, 1816, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 752, 753, 754, 755, 364, 370,
	371, 771, 372, 353, 354, 373, 835, 374, 811, 756,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 791,
	381, 0, 382, 812, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 750, 395, 0, 813, 814, 792,
	0, 0, 397, 398, 815, 816, 733, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 772, 408, 0,
	757, 409, 410, 411, 455, 817, 0, 0, 412, 0,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	739, 727, 728, 725, 726, 716, 0, 0, 1814, 0,
	0, 0, 0, 1812, 1813, 0, 211, 212, 213, 214,
	0, 215, 1815, 0, 0, 0, 774, 719, 715, 0,
	0, 216, 217, 218, 0, 793, 759, 794, 747, 780,
	795, 0, 222, 749, 748, 225, 226, 227, 722, 773,
	796, 797, 425, 0, 228, 778, 0, 764, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 820, 241, 242, 2945, 767,
	765, 766, 770, 0, 768, 769, 244, 245, 465, 246,
	781, 248, 798, 799, 705, 249, 0, 250, 0, 251,
	0, 0, 782, 253, 0, 254, 0, 0, 0, 710,
	255, 256, 258, 259, 257, 260, 800, 801, 734, 821,
	0, 0, 0, 0, 0, 261, 262, 802, 783, 784,
	0, 265, 0, 266, 0, 0, 822, 267, 0, 268,
	803, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	775, 777, 0, 0, 758, 0, 0, 0, 283, 0,
	275, 0, 823, 277, 804, 762, 785, 786, 787, 788,
	805, 0, 763, 0, 284, 0, 0, 285, 286, 287,
	827, 789, 790, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 806, 828, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 707, 706, 301, 302, 304,
	751, 303, 830, 306, 307, 309, 308, 702, 0, 0,
	735, 776, 310, 807, 311, 312, 0, 760, 761, 0,
	0, 315, 316, 0, 0, 317, 443, 832, 318, 833,
	808, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	809, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	810, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 834,
	0, 349, 350, 351, 711, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 752, 753, 754,
	755, 364, 370, 371, 771, 372, 353, 354, 373, 0,
	374, 811, 756, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 791, 381, 0, 382, 812, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 750, 395, 0,
	813, 814, 792, 0, 0, 397, 398, 815, 816, 733,
	399, 400, 2944, 402, 0, 0, 403, 404, 405, 407,
	772, 408, 0, 757, 409, 410, 411, 455, 817, 0,
	0, 412, 0, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 0, 687,
	0, 885, 0, 0, 0, 0, 699, 700, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 211, 212, 213,
	214, 715, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 887, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	0, 881, 882, 0, 0, 883, 884, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 800, 801, 0,
	821, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 824, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 825, 826, 285, 286,
	287, 827, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 889, 888, 301, 302,
	304, 305, 303, 830, 306, 307, 309, 308, 0, 0,
	831, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 879, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 166, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	835, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 812, 0, 386,
	387, 168, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 815, 816,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 1095, 456,
	0, 0, 412, 0, 0, 0, 885, 160, 413, 414,
	0, 415, 416, 417, 0, 161, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 871, 0, 1386, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 887, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 820, 241, 242, 243, 0, 881, 882, 0, 0,
	883, 884, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 800, 801, 0, 821, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 822, 267, 0, 268, 803, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 824, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 823, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 825, 826, 285, 286, 287, 827, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 806, 828,
	295, 296, 829, 0, 297, 298, 0, 0, 299, 0,
	300, 889, 888, 301, 302, 304, 305, 303, 830, 306,
	307, 309, 308, 0, 0, 831, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 879, 315, 316, 0,
	0, 317, 443, 832, 318, 833, 808, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 809, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 834, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	166, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 835, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 812, 0, 386, 387, 168, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 815, 816, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 1095, 456, 0, 0, 412, 0, 0,
	0, 885, 160, 413, 414, 0, 415, 416, 417, 0,
	161, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 774, 0, 871,
	0, 1386, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	773, 423, 424, 425, 0, 228, 778, 0, 764, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	767, 765, 766, 770, 0, 768, 769, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 800, 801, 0,
	821, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 775, 777, 824, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 825, 826, 285, 286,
	287, 827, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 889, 888, 301, 302,
	304, 305, 303, 830, 306, 307, 309, 308, 0, 0,
	831, 0, 776, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 771, 372, 353, 354, 373,
	835, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 812, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 815, 816,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 772, 408, 0, 406, 409, 410, 411, 455, 456,
	0, 0, 412, 0, 2188, 0, 885, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 2498, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 887, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 820, 241, 242, 243, 0, 881, 882, 0, 0,
	883, 884, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 800, 801, 0, 821, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 822, 267, 0, 268, 803, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 824, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 823, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 825, 826, 285, 286, 287, 827, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 806, 828,
	295, 296, 829, 0, 297, 298, 0, 0, 299, 0,
	300, 889, 888, 301, 302, 304, 305, 303, 830, 306,
	307, 309, 308, 0, 0, 831, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 879, 315, 316, 0,
	0, 317, 443, 832, 318, 833, 808, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 809, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 834, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 835, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 812, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 815, 816, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 0, 0, 412, 0, 870,
	0, 885, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 871,
	0, 877, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 887, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	0, 881, 882, 0, 0, 883, 884, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 800, 801, 0,
	821, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 803, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 824, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 825, 826, 285, 286,
	287, 827, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 806, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 889, 888, 301, 302,
	304, 305, 303, 830, 306, 307, 309, 308, 0, 0,
	831, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 879, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 808, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 809, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	835, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 812, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 815, 816,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	0, 0, 412, 0, 0, 0, 885, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 871, 0, 877, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 887, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 820, 241, 242, 243, 0, 881, 882, 0, 0,
	883, 884, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 800, 801, 0, 821, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 822, 267, 0, 268, 803, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 824, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 823, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 825, 826, 285, 286, 287, 827, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 806, 828,
	295, 296, 829, 0, 297, 298, 0, 0, 299, 0,
	300, 889, 888, 301, 302, 304, 305, 303, 830, 306,
	307, 309, 308, 0, 0, 831, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 879, 315, 316, 0,
	0, 317, 443, 832, 318, 833, 808, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 809, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 834, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 835, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 812, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 815, 816, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 0, 0, 412, 0, 1092,
	0, 910, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 871,
	0, 877, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 887, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	821, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 824, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 825, 826, 285, 286,
	287, 827, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 889, 888, 301, 302,
	304, 305, 303, 830, 306, 307, 309, 308, 0, 0,
	831, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 166, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	835, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 168, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 1095, 456,
	0, 0, 412, 0, 687, 0, 208, 160, 413, 414,
	0, 415, 416, 417, 0, 161, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 133, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 0, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 0, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 0, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 0, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 0,
	295, 296, 0, 0, 297, 298, 0, 0, 299, 0,
	300, 0, 0, 301, 302, 304, 305, 303, 0, 306,
	307, 309, 308, 0, 0, 0, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 0, 318, 0, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 0, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	166, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 0, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 168, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 1095, 456, 0, 0, 412, 0, 0,
	0, 0, 160, 413, 414, 0, 415, 416, 417, 0,
	161, 739, 727, 728, 725, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 133, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 793, 759, 794, 747,
	780, 795, 0, 222, 749, 748, 225, 226, 227, 0,
	0, 796, 797, 425, 0, 228, 426, 0, 887, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 820, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 781, 248, 798, 799, 0, 249, 0, 250, 0,
	251, 0, 0, 782, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 734,
	821, 0, 0, 0, 0, 0, 261, 262, 802, 783,
	784, 0, 265, 0, 266, 0, 0, 822, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 824, 0, 758, 0, 0, 0, 283,
	0, 275, 0, 823, 277, 804, 762, 785, 786, 787,
	788, 805, 0, 763, 0, 284, 825, 826, 285, 286,
	287, 827, 789, 790, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 828, 295, 296, 829, 0, 297,
	298, 0, 0, 299, 0, 300, 889, 888, 301, 302,
	304, 751, 303, 830, 306, 307, 309, 308, 0, 0,
	831, 735, 441, 310, 807, 311, 312, 0, 760, 761,
	0, 0, 315, 316, 0, 0, 317, 443, 832, 318,
	833, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 810, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	834, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 752, 753,
	754, 755, 364, 370, 371, 0, 372, 353, 354, 373,
	835, 374, 811, 756, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 791, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 750, 395,
	0, 813, 814, 792, 0, 0, 397, 398, 453, 454,
	733, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 757, 409, 410, 411, 455, 817,
	208, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	0, 412, 0, 0, 0, 208, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 2412, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 435, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 0, 0, 412, 0, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 1163, 0,
	910, 909, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	1390, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 887, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 820, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 821,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 822, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 824, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 823, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 825, 826, 285, 286, 287,
	827, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 828, 295, 296, 829, 0, 297, 298,
	0, 0, 299, 0, 300, 889, 888, 301, 302, 304,
	305, 303, 830, 306, 307, 309, 308, 0, 0, 831,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 832, 318, 833,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 834,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 835,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	0, 412, 1088, 0, 910, 909, 0, 413, 414, 907,
	415, 416, 417, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 425, 0, 228, 426,
	0, 887, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 820,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 465, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 821, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	822, 267, 0, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 1087, 436, 824, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 823, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 825,
	826, 285, 286, 287, 827, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 828, 295, 296,
	829, 0, 297, 298, 0, 0, 299, 0, 300, 889,
	888, 301, 302, 304, 305, 303, 830, 306, 307, 309,
	308, 0, 0, 831, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 832, 318, 833, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 834, 0, 349, 350, 351, 448, 352,
	0, 356, 357, 358, 359, 360, 361, 362, 0, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 835, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 451, 452, 396, 0, 0, 397,
	398, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 0, 0, 412, 1084, 0, 910, 909,
	0, 413, 414, 907, 415, 416, 417, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 216,
	217, 218, 419, 420, 219, 421, 220, 221, 422, 0,
	222, 223, 224, 225, 226, 227, 0, 0, 423, 424,
	425, 0, 228, 426, 0, 887, 0, 229, 230, 231,
	232, 233, 0, 235, 236, 237, 234, 0, 238, 0,
	239, 240, 0, 820, 241, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 244, 245, 465, 246, 247, 248,
	427, 428, 0, 249, 0, 250, 0, 251, 0, 0,
	252, 253, 0, 254, 0, 0, 0, 429, 255, 256,
	258, 259, 257, 260, 430, 431, 0, 821, 0, 0,
	0, 0, 0, 261, 262, 432, 263, 264, 0, 265,
	0, 266, 0, 0, 822, 267, 0, 268, 433, 0,
	434, 0, 269, 270, 271, 272, 273, 274, 1083, 436,
	824, 0, 276, 0, 0, 0, 283, 0, 275, 0,
	823, 277, 437, 279, 278, 280, 281, 282, 438, 0,
	439, 0, 284, 825, 826, 285, 286, 287, 827, 288,
	289, 0, 0, 290, 291, 292, 0, 294, 293, 0,
	440, 828, 295, 296, 829, 0, 297, 298, 0, 0,
	299, 0, 300, 889, 888, 301, 302, 304, 305, 303,
	830, 306, 307, 309, 308, 0, 0, 831, 0, 441,
	310, 442, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 0, 0, 317, 443, 832, 318, 833, 444, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 445, 327,
	446, 328, 0, 329, 330, 331, 332, 333, 447, 334,
	335, 0, 336, 337, 338, 339, 340, 0, 342, 343,
	341, 344, 345, 346, 347, 0, 348, 834, 0, 349,
	350, 351, 448, 352, 0, 356, 357, 358, 359, 360,
	361, 362, 0, 368, 369, 363, 365, 366, 367, 364,
	370, 371, 0, 372, 353, 354, 373, 835, 374, 449,
	375, 376, 0, 385, 377, 378, 379, 355, 380, 383,
	384, 381, 0, 382, 450, 0, 386, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 395, 0, 451, 452,
	396, 0, 0, 397, 398, 453, 454, 0, 399, 400,
	401, 402, 0, 0, 403, 404, 405, 407, 0, 408,
	0, 406, 409, 410, 411, 455, 456, 0, 0, 412,
	1045, 0, 910, 909, 0, 413, 414, 907, 415, 416,
	417, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 887,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 820, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 821, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 822, 267,
	0, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 1044, 436, 824, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 823, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 825, 826, 285,
	286, 287, 827, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 828, 295, 296, 829, 0,
	297, 298, 0, 0, 299, 0, 300, 889, 888, 301,
	302, 304, 305, 303, 830, 306, 307, 309, 308, 0,
	0, 831, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 832,
	318, 833, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 834, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 835, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 0, 0, 412, 1042, 0, 910, 909, 0, 413,
	414, 907, 415, 416, 417, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 887, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 820, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 821, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 822, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 1041, 436, 824, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 823, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 825, 826, 285, 286, 287, 827, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 828,
	295, 296, 829, 0, 297, 298, 0, 0, 299, 0,
	300, 889, 888, 301, 302, 304, 305, 303, 830, 306,
	307, 309, 308, 0, 0, 831, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 832, 318, 833, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 834, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 835, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 0, 0, 412, 903, 0,
	910, 909, 0, 413, 414, 907, 415, 416, 417, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 887, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 820, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 821,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 822, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	905, 436, 824, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 823, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 825, 826, 285, 286, 287,
	827, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 828, 295, 296, 829, 0, 297, 298,
	0, 0, 299, 0, 300, 889, 888, 301, 302, 304,
	305, 303, 830, 306, 307, 309, 308, 0, 0, 831,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 832, 318, 833,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 834,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 835,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 910,
	909, 412, 0, 0, 907, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	0, 222, 223, 224, 225, 226, 227, 0, 0, 423,
	424, 425, 0, 228, 426, 0, 887, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 820, 241, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 465, 246, 247,
	248, 427, 428, 0, 249, 0, 250, 0, 251, 0,
	0, 252, 253, 0, 254, 0, 0, 0, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 0, 821, 0,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 0, 266, 0, 0, 822, 267, 0, 268, 433,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 435,
	436, 824, 0, 276, 0, 0, 0, 283, 0, 275,
	0, 823, 277, 437, 279, 278, 280, 281, 282, 438,
	0, 439, 0, 284, 825, 826, 285, 286, 287, 827,
	288, 289, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 440, 828, 295, 296, 829, 0, 297, 298, 0,
	0, 299, 0, 300, 889, 888, 301, 302, 304, 305,
	303, 830, 306, 307, 309, 308, 0, 0, 831, 0,
	441, 310, 442, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 0, 0, 317, 443, 832, 318, 833, 444,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 445,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 447,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 834, 0,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 0, 372, 353, 354, 373, 835, 374,
	449, 375, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 0, 382, 450, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 395, 0, 451,
	452, 396, 0, 0, 397, 398, 453, 454, 0, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 0,
	408, 0, 406, 409, 410, 411, 455, 456, 910, 909,
	412, 0, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 216,
	217, 218, 419, 420, 219, 421, 220, 221, 422, 0,
	222, 223, 224, 225, 226, 227, 0, 0, 423, 424,
	425, 0, 228, 426, 0, 887, 0, 229, 230, 231,
	232, 233, 0, 235, 236, 237, 234, 0, 238, 0,
	239, 240, 0, 820, 241, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 244, 245, 465, 246, 247, 248,
	427, 428, 0, 249, 0, 250, 0, 251, 0, 0,
	252, 253, 0, 254, 0, 0, 0, 429, 255, 256,
	258, 259, 257, 260, 430, 431, 0, 821, 0, 0,
	0, 0, 0, 261, 262, 432, 263, 264, 0, 265,
	0, 266, 0, 0, 822, 267, 0, 268, 433, 0,
	434, 0, 269, 270, 271, 272, 273, 274, 435, 436,
	824, 0, 276, 0, 0, 0, 283, 0, 275, 0,
	823, 277, 437, 279, 278, 280, 281, 282, 438, 0,
	439, 0, 284, 825, 826, 285, 286, 287, 827, 288,
	289, 0, 0, 290, 291, 292, 0, 294, 293, 0,
	440, 828, 295, 296, 829, 0, 297, 298, 0, 0,
	299, 0, 300, 889, 888, 301, 302, 304, 305, 303,
	830, 306, 307, 309, 308, 0, 0, 831, 0, 441,
	310, 442, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 0, 0, 317, 443, 832, 318, 833, 444, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 445, 327,
	446, 328, 0, 329, 330, 331, 332, 333, 447, 334,
	335, 0, 336, 337, 338, 339, 340, 0, 342, 343,
	341, 344, 345, 346, 347, 0, 348, 834, 0, 349,
	350, 351, 448, 352, 0, 356, 357, 358, 359, 360,
	361, 362, 0, 368, 369, 363, 365, 366, 367, 364,
	370, 371, 0, 372, 353, 354, 373, 835, 374, 449,
	375, 376, 0, 385, 377, 378, 379, 355, 380, 383,
	384, 381, 0, 382, 450, 0, 386, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 395, 0, 451, 452,
	396, 0, 0, 397, 398, 453, 454, 0, 399, 400,
	401, 402, 0, 0, 403, 404, 405, 407, 0, 408,
	0, 406, 409, 410, 411, 455, 456, 910, 0, 412,
	0, 0, 0, 0, 0, 413, 414, 0, 415, 416,
	417, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 0, 222,
	223, 224, 225, 226, 227, 0, 0, 423, 424, 425,
	0, 228, 426, 0, 887, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 820, 241, 242, 243, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 465, 246, 247, 248, 427,
	428, 0, 249, 0, 250, 0, 251, 0, 0, 252,
	253, 0, 254, 0, 0, 0, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 0, 821, 0, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 0,
	266, 0, 0, 822, 267, 0, 268, 433, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 435, 436, 824,
	0, 276, 0, 0, 0, 283, 0, 275, 0, 823,
	277, 437, 279, 278, 280, 281, 282, 438, 0, 439,
	0, 284, 825, 826, 285, 286, 287, 827, 288, 289,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 440,
	828, 295, 296, 829, 0, 297, 298, 0, 0, 299,
	0, 300, 889, 888, 301, 302, 304, 305, 303, 830,
	306, 307, 309, 308, 0, 0, 831, 0, 441, 310,
	442, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	0, 0, 317, 443, 832, 318, 833, 444, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 445, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 447, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 834, 0, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 0, 372, 353, 354, 373, 835, 374, 449, 375,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 0, 382, 450, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 395, 0, 451, 452, 396,
	0, 0, 397, 398, 453, 454, 0, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 0, 408, 0,
	406, 409, 410, 411, 455, 456, 208, 0, 412, 0,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 0, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 203, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 0, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 0, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 0, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 0,
	295, 296, 0, 0, 297, 298, 0, 0, 299, 0,
	300, 0, 0, 301, 302, 304, 305, 303, 0, 306,
	307, 309, 308, 0, 0, 0, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 0, 318, 0, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 0, 1610, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 0, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 202, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 0, 0, 412, 559, 0,
	208, 0, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 207, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 203, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	202, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	0, 412, 200, 0, 208, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 207, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 425, 0, 228, 426,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 0,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 203, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	0, 267, 0, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 435, 436, 0, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 0, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 0, 295, 296,
	0, 0, 297, 298, 0, 0, 299, 0, 300, 0,
	0, 301, 302, 304, 305, 303, 0, 306, 307, 309,
	308, 0, 0, 0, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 0, 318, 0, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 0, 0, 349, 350, 351, 448, 352,
	0, 356, 357, 358, 359, 360, 361, 362, 0, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 0, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 202, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 451, 452, 396, 0, 0, 397,
	398, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 208, 0, 412, 0, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 418,
	0, 0, 207, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 203, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 0, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 372, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 202, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 208, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 418, 0,
	0, 207, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 0, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 0, 267,
	0, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 435, 436, 0, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 0, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 0, 295, 296, 0, 0,
	297, 298, 0, 0, 299, 0, 300, 0, 0, 301,
	302, 304, 305, 303, 0, 306, 307, 309, 308, 0,
	0, 0, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 0,
	318, 0, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 0, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 0, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 208, 0, 412, 0, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	207, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 1887, 228, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	1884, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	1959, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 1890, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 0, 0, 276, 0, 0, 0, 283,
	1957, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 1956, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	298, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 303, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 1889, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 1958, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	208, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 1887, 228, 426, 0, 0, 1881, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 1884,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 1890, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	1880, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 1889, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 1888, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	565, 412, 208, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 211, 212,
	213, 564, 546, 215, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 549, 0, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 0, 267,
	550, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 435, 436, 0, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 0, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 0, 295, 296, 0, 0,
	297, 298, 0, 0, 299, 0, 300, 0, 0, 301,
	302, 304, 305, 303, 0, 306, 307, 309, 308, 0,
	0, 0, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 0,
	318, 0, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 0, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 551, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 0, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 0, 545, 412, 208, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 546, 215, 0, 0, 0, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 425, 0, 228, 426,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 549, 0,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 465, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	0, 267, 550, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 435, 436, 0, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 0, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 0, 295, 296,
	0, 0, 297, 298, 0, 0, 299, 0, 300, 0,
	0, 301, 302, 304, 305, 303, 0, 306, 307, 309,
	308, 0, 0, 0, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 0, 318, 0, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 0, 0, 349, 350, 351, 448, 352,
	0, 356, 357, 358, 359, 360, 361, 362, 551, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 0, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 451, 452, 396, 0, 0, 397,
	398, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 208, 0, 412, 0, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 549, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 465, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 550, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 551, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 372, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 0, 1063, 412, 208, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 0, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 435, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 879, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 0, 898, 412, 208, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 0, 222,
	223, 224, 225, 226, 227, 0, 0, 423, 424, 425,
	0, 228, 426, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 0, 241, 242, 243, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 465, 246, 247, 248, 427,
	428, 0, 249, 0, 250, 0, 251, 0, 0, 252,
	253, 0, 254, 0, 0, 0, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 0,
	266, 0, 0, 0, 267, 0, 268, 433, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 900, 436, 0,
	0, 276, 0, 0, 0, 283, 0, 275, 0, 0,
	277, 437, 279, 278, 280, 281, 282, 438, 0, 439,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 440,
	0, 295, 296, 0, 0, 297, 298, 0, 0, 299,
	0, 300, 0, 0, 301, 302, 304, 305, 303, 0,
	306, 307, 309, 308, 0, 0, 0, 0, 441, 310,
	442, 311, 312, 0, 313, 314, 0, 879, 315, 316,
	0, 0, 317, 443, 0, 318, 0, 444, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 445, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 447, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 0, 0, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 0, 372, 353, 354, 373, 0, 374, 449, 375,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 0, 382, 450, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 395, 0, 451, 452, 396,
	0, 0, 397, 398, 453, 454, 0, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 0, 408, 0,
	406, 409, 410, 411, 455, 456, 0, 895, 412, 208,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	0, 222, 223, 224, 225, 226, 227, 0, 0, 423,
	424, 425, 0, 228, 426, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 0, 241, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 465, 246, 247,
	248, 427, 428, 0, 249, 0, 250, 0, 251, 0,
	0, 252, 253, 0, 254, 0, 0, 0, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 0, 266, 0, 0, 0, 267, 0, 268, 433,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 897,
	436, 0, 0, 276, 0, 0, 0, 283, 0, 275,
	0, 0, 277, 437, 279, 278, 280, 281, 282, 438,
	0, 439, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 440, 0, 295, 296, 0, 0, 297, 298, 0,
	0, 299, 0, 300, 0, 0, 301, 302, 304, 305,
	303, 0, 306, 307, 309, 308, 0, 0, 0, 0,
	441, 310, 442, 311, 312, 0, 313, 314, 0, 879,
	315, 316, 0, 0, 317, 443, 0, 318, 0, 444,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 445,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 447,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 0, 0,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 0, 372, 353, 354, 373, 0, 374,
	449, 375, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 0, 382, 450, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 395, 0, 451,
	452, 396, 0, 0, 397, 398, 453, 454, 0, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 0,
	408, 0, 406, 409, 410, 411, 455, 456, 0, 891,
	412, 208, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 893, 436, 0, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	298, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 303, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 879, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	0, 484, 412, 208, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 483, 215, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 465, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 0, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 482, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 372, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 208, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 418, 0,
	1867, 0, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 0, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 0, 267,
	0, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 435, 436, 0, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 0, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 0, 295, 296, 0, 0,
	297, 298, 0, 0, 299, 0, 300, 0, 0, 301,
	302, 304, 305, 303, 0, 306, 307, 309, 308, 0,
	0, 0, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 0,
	318, 0, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 0, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 0, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 208, 2348, 412, 0, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 0, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	298, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 303, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	208, 2348, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 2345, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 208,
	0, 412, 0, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	0, 222, 223, 224, 225, 226, 227, 0, 0, 423,
	424, 425, 0, 228, 426, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 0, 241, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 465, 246, 247,
	248, 427, 428, 0, 249, 0, 250, 0, 251, 0,
	0, 252, 253, 0, 254, 0, 0, 0, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 0, 266, 0, 0, 0, 267, 0, 268, 433,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 435,
	436, 0, 0, 276, 0, 0, 0, 283, 0, 275,
	0, 0, 277, 437, 279, 278, 280, 281, 282, 438,
	0, 439, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 440, 0, 295, 296, 0, 0, 297, 298, 0,
	0, 299, 0, 300, 0, 0, 301, 302, 304, 305,
	303, 0, 306, 307, 309, 308, 0, 0, 0, 0,
	441, 310, 442, 311, 312, 0, 313, 314, 0, 879,
	315, 316, 0, 0, 317, 443, 0, 318, 0, 444,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 445,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 447,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 0, 0,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 0, 372, 353, 354, 373, 0, 374,
	449, 375, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 0, 382, 450, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 395, 0, 451,
	452, 396, 0, 0, 397, 398, 453, 454, 0, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 0,
	408, 0, 406, 409, 410, 411, 455, 456, 0, 1632,
	412, 208, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 0, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	298, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 303, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	0, 1630, 412, 208, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 465, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 0, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 372, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 0, 1628, 412, 208, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 0, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 435, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 208, 0, 412, 0, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 0, 0,
	211, 212, 213, 214, 1606, 215, 0, 0, 0, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 425, 0, 228, 426,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 0,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 465, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	0, 267, 0, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 435, 436, 0, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 0, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 0, 295, 296,
	0, 0, 297, 298, 0, 0, 299, 0, 300, 0,
	0, 301, 302, 304, 305, 303, 0, 306, 307, 309,
	308, 0, 0, 0, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 0, 318, 0, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 0, 0, 349, 350, 351, 448, 352,
	0, 356, 357, 358, 359, 360, 361, 362, 0, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 0, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 451, 452, 396, 0, 0, 397,
	398, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 0, 1567, 412, 208, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 0, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 0, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 0, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 0, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 0,
	295, 296, 0, 0, 297, 298, 0, 0, 299, 0,
	300, 0, 0, 301, 302, 304, 305, 303, 0, 306,
	307, 309, 308, 0, 0, 0, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 0, 318, 0, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 0, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 0, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 0, 1565, 412, 208, 0,
	0, 0, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 216,
	217, 218, 419, 420, 219, 421, 220, 221, 422, 0,
	222, 223, 224, 225, 226, 227, 0, 0, 423, 424,
	425, 0, 228, 426, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 235, 236, 237, 234, 0, 238, 0,
	239, 240, 0, 0, 241, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 244, 245, 465, 246, 247, 248,
	427, 428, 0, 249, 0, 250, 0, 251, 0, 0,
	252, 253, 0, 254, 0, 0, 0, 429, 255, 256,
	258, 259, 257, 260, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 261, 262, 432, 263, 264, 0, 265,
	0, 266, 0, 0, 0, 267, 0, 268, 433, 0,
	434, 0, 269, 270, 271, 272, 273, 274, 435, 436,
	0, 0, 276, 0, 0, 0, 283, 0, 275, 0,
	0, 277, 437, 279, 278, 280, 281, 282, 438, 0,
	439, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	289, 0, 0, 290, 291, 292, 0, 294, 293, 0,
	440, 0, 295, 296, 0, 0, 297, 298, 0, 0,
	299, 0, 300, 0, 0, 301, 302, 304, 305, 303,
	0, 306, 307, 309, 308, 0, 0, 0, 0, 441,
	310, 442, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 0, 0, 317, 443, 0, 318, 0, 444, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 445, 327,
	446, 328, 0, 329, 330, 331, 332, 333, 447, 334,
	335, 0, 336, 337, 338, 339, 340, 0, 342, 343,
	341, 344, 345, 346, 347, 0, 348, 0, 0, 349,
	350, 351, 448, 352, 0, 356, 357, 358, 359, 360,
	361, 362, 0, 368, 369, 363, 365, 366, 367, 364,
	370, 371, 0, 372, 353, 354, 373, 0, 374, 449,
	375, 376, 0, 385, 377, 378, 379, 355, 380, 383,
	384, 381, 0, 382, 450, 0, 386, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 395, 0, 451, 452,
	396, 0, 0, 397, 398, 453, 454, 0, 399, 400,
	401, 402, 0, 0, 403, 404, 405, 407, 0, 408,
	0, 406, 409, 410, 411, 455, 456, 0, 591, 412,
	208, 0, 0, 0, 0, 413, 414, 0, 415, 416,
	417, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 1137, 0, 228, 426, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 592, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 588,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	587, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	1465, 412, 208, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 0, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 0, 267,
	0, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 1464, 436, 0, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 0, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 0, 295, 296, 0, 0,
	297, 298, 0, 0, 299, 0, 300, 0, 0, 301,
	302, 304, 305, 303, 0, 306, 307, 309, 308, 0,
	0, 0, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 0,
	318, 0, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 0, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 0, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 0, 591, 412, 208, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 1137, 0, 228, 426,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 0,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 465, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	0, 267, 0, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 435, 436, 0, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 0, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 0, 295, 296,
	0, 0, 297, 298, 0, 0, 299, 0, 300, 0,
	0, 301, 302, 304, 305, 592, 0, 306, 307, 309,
	308, 0, 0, 0, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 0, 318, 0, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 0, 0, 349, 350, 351, 448, 352,
	0, 356, 357, 588, 359, 360, 361, 362, 0, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 0, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 587, 452, 396, 0, 0, 397,
	1138, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 0, 591, 412, 208, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	581, 426, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 0, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 0, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 435, 436, 0, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 0, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 0,
	295, 296, 0, 0, 297, 298, 0, 0, 299, 0,
	300, 0, 0, 301, 302, 304, 305, 592, 0, 306,
	307, 309, 308, 0, 0, 0, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 0, 318, 0, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 0, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 588, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 1113, 371,
	0, 372, 353, 354, 373, 0, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 587, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 0, 1081, 412, 208, 0,
	0, 0, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 216,
	217, 218, 419, 420, 219, 421, 220, 221, 422, 0,
	222, 223, 224, 225, 226, 227, 0, 0, 423, 424,
	425, 0, 228, 426, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 235, 236, 237, 234, 0, 238, 0,
	239, 240, 0, 0, 241, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 244, 245, 465, 246, 247, 248,
	427, 428, 0, 249, 0, 250, 0, 251, 0, 0,
	252, 253, 0, 254, 0, 0, 0, 429, 255, 256,
	258, 259, 257, 260, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 261, 262, 432, 263, 264, 0, 265,
	0, 266, 0, 0, 0, 267, 0, 268, 433, 0,
	434, 0, 269, 270, 271, 272, 273, 274, 1080, 436,
	0, 0, 276, 0, 0, 0, 283, 0, 275, 0,
	0, 277, 437, 279, 278, 280, 281, 282, 438, 0,
	439, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	289, 0, 0, 290, 291, 292, 0, 294, 293, 0,
	440, 0, 295, 296, 0, 0, 297, 298, 0, 0,
	299, 0, 300, 0, 0, 301, 302, 304, 305, 303,
	0, 306, 307, 309, 308, 0, 0, 0, 0, 441,
	310, 442, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 0, 0, 317, 443, 0, 318, 0, 444, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 445, 327,
	446, 328, 0, 329, 330, 331, 332, 333, 447, 334,
	335, 0, 336, 337, 338, 339, 340, 0, 342, 343,
	341, 344, 345, 346, 347, 0, 348, 0, 0, 349,
	350, 351, 448, 352, 0, 356, 357, 358, 359, 360,
	361, 362, 0, 368, 369, 363, 365, 366, 367, 364,
	370, 371, 0, 372, 353, 354, 373, 0, 374, 449,
	375, 376, 0, 385, 377, 378, 379, 355, 380, 383,
	384, 381, 0, 382, 450, 0, 386, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 395, 0, 451, 452,
	396, 0, 0, 397, 398, 453, 454, 0, 399, 400,
	401, 402, 0, 0, 403, 404, 405, 407, 0, 408,
	0, 406, 409, 410, 411, 455, 456, 0, 1077, 412,
	208, 0, 0, 0, 0, 413, 414, 0, 415, 416,
	417, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	1076, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 332, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 352, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	1074, 412, 208, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 0, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 0, 267,
	0, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 1073, 436, 0, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 0, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 0, 295, 296, 0, 0,
	297, 298, 0, 0, 299, 0, 300, 0, 0, 301,
	302, 304, 305, 303, 0, 306, 307, 309, 308, 0,
	0, 0, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 0,
	318, 0, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 0, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 0, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 0, 1071, 412, 208, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 425, 0, 228, 426,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 0,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 465, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	0, 267, 0, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 1070, 436, 0, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 0, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 0, 295, 296,
	0, 0, 297, 298, 0, 0, 299, 0, 300, 0,
	0, 301, 302, 304, 305, 303, 0, 306, 307, 309,
	308, 0, 0, 0, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 0, 318, 0, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 0, 0, 349, 350, 351, 448, 352,
	0, 356, 357, 358, 359, 360, 361, 362, 0, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 0, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 451, 452, 396, 0, 0, 397,
	398, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 0, 1067, 412, 208, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 0, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 0, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 1066, 436, 0, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 0, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 0,
	295, 296, 0, 0, 297, 298, 0, 0, 299, 0,
	300, 0, 0, 301, 302, 304, 305, 303, 0, 306,
	307, 309, 308, 0, 0, 0, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 0, 318, 0, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 0, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 0, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 208, 0, 412, 0, 0,
	0, 0, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 211, 212, 213, 214, 1055, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 0, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 435, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 0, 1053, 412, 208, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 0, 222,
	223, 224, 225, 226, 227, 0, 0, 423, 424, 425,
	0, 228, 426, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 0, 241, 242, 243, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 465, 246, 247, 248, 427,
	428, 0, 249, 0, 250, 0, 251, 0, 0, 252,
	253, 0, 254, 0, 0, 0, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 0,
	266, 0, 0, 0, 267, 0, 268, 433, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 1052, 436, 0,
	0, 276, 0, 0, 0, 283, 0, 275, 0, 0,
	277, 437, 279, 278, 280, 281, 282, 438, 0, 439,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 440,
	0, 295, 296, 0, 0, 297, 298, 0, 0, 299,
	0, 300, 0, 0, 301, 302, 304, 305, 303, 0,
	306, 307, 309, 308, 0, 0, 0, 0, 441, 310,
	442, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	0, 0, 317, 443, 0, 318, 0, 444, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 445, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 447, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 0, 0, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 0, 372, 353, 354, 373, 0, 374, 449, 375,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 0, 382, 450, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 395, 0, 451, 452, 396,
	0, 0, 397, 398, 453, 454, 0, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 0, 408, 0,
	406, 409, 410, 411, 455, 456, 0, 1047, 412, 208,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	0, 222, 223, 224, 225, 226, 227, 0, 0, 423,
	424, 425, 0, 228, 426, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 0, 241, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 465, 246, 247,
	248, 427, 428, 0, 249, 0, 250, 0, 251, 0,
	0, 252, 253, 0, 254, 0, 0, 0, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 0, 266, 0, 0, 0, 267, 0, 268, 433,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 435,
	436, 0, 0, 276, 0, 0, 0, 283, 0, 275,
	0, 0, 277, 437, 279, 278, 280, 281, 282, 438,
	0, 439, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 440, 0, 295, 296, 0, 0, 297, 298, 0,
	0, 299, 0, 300, 0, 0, 301, 302, 304, 305,
	303, 0, 306, 307, 309, 308, 0, 0, 0, 0,
	441, 310, 442, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 0, 0, 317, 443, 0, 318, 0, 444,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 445,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 447,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 0, 0,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 0, 372, 353, 354, 373, 0, 374,
	449, 375, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 0, 382, 450, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 395, 0, 451,
	452, 396, 0, 0, 397, 398, 453, 454, 0, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 0,
	408, 0, 406, 409, 410, 411, 455, 456, 0, 1038,
	412, 208, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 1037, 436, 0, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	298, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 303, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	0, 1034, 412, 208, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 465, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 0, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 372, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 0, 1030, 412, 208, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 0, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 1032, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 0, 917, 412, 208, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 0, 222,
	223, 224, 225, 226, 227, 0, 0, 423, 424, 425,
	0, 228, 426, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 0, 241, 242, 243, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 465, 246, 247, 248, 427,
	428, 0, 249, 0, 250, 0, 251, 0, 0, 252,
	253, 0, 254, 0, 0, 0, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 0,
	266, 0, 0, 0, 267, 0, 268, 433, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 919, 436, 0,
	0, 276, 0, 0, 0, 283, 0, 275, 0, 0,
	277, 437, 279, 278, 280, 281, 282, 438, 0, 439,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 440,
	0, 295, 296, 0, 0, 297, 298, 0, 0, 299,
	0, 300, 0, 0, 301, 302, 304, 305, 303, 0,
	306, 307, 309, 308, 0, 0, 0, 0, 441, 310,
	442, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	0, 0, 317, 443, 0, 318, 0, 444, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 445, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 447, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 0, 0, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 0, 372, 353, 354, 373, 0, 374, 449, 375,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 0, 382, 450, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 395, 0, 451, 452, 396,
	0, 0, 397, 398, 453, 454, 0, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 0, 408, 0,
	406, 409, 410, 411, 455, 456, 0, 914, 412, 208,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	0, 222, 223, 224, 225, 226, 227, 0, 0, 423,
	424, 425, 0, 228, 426, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 0, 241, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 465, 246, 247,
	248, 427, 428, 0, 249, 0, 250, 0, 251, 0,
	0, 252, 253, 0, 254, 0, 0, 0, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 0, 266, 0, 0, 0, 267, 0, 268, 433,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 435,
	436, 0, 0, 276, 0, 0, 0, 283, 0, 275,
	0, 0, 277, 437, 279, 278, 280, 281, 282, 438,
	0, 439, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 440, 0, 295, 296, 0, 0, 297, 298, 0,
	0, 299, 0, 300, 0, 0, 301, 302, 304, 305,
	303, 0, 306, 307, 309, 308, 0, 0, 0, 0,
	441, 310, 442, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 0, 0, 317, 443, 0, 318, 0, 444,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 445,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 447,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 0, 0,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 0, 372, 353, 354, 373, 0, 374,
	449, 375, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 0, 382, 450, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 395, 0, 451,
	452, 396, 0, 0, 397, 398, 453, 454, 0, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 0,
	408, 0, 406, 409, 410, 411, 455, 456, 0, 591,
	412, 208, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 581, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 0, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	580, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 592, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 334, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 582, 352, 0, 356, 357,
	588, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 583, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 587, 452, 396, 0, 0, 397, 585, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	0, 571, 412, 208, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 465, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 0, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	572, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 372, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 0, 567, 412, 208, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 0, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 435, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 0, 557, 412, 208, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 0, 222,
	223, 224, 225, 226, 227, 0, 0, 423, 424, 425,
	0, 228, 426, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 0, 241, 242, 243, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 465, 246, 247, 248, 427,
	428, 0, 249, 0, 250, 0, 251, 0, 0, 252,
	253, 0, 254, 0, 0, 0, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 0,
	266, 0, 0, 0, 267, 0, 268, 433, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 435, 436, 0,
	0, 276, 0, 0, 0, 283, 0, 275, 0, 0,
	277, 437, 279, 278, 280, 281, 282, 438, 0, 439,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 440,
	0, 295, 296, 0, 0, 297, 298, 0, 0, 299,
	0, 300, 0, 0, 301, 302, 304, 305, 303, 0,
	306, 307, 309, 308, 0, 0, 0, 0, 441, 310,
	442, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	0, 0, 317, 443, 0, 318, 0, 444, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 445, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 447, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 0, 0, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 0, 372, 353, 354, 373, 0, 374, 449, 375,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 0, 382, 450, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 395, 0, 451, 452, 396,
	0, 0, 397, 398, 453, 454, 0, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 0, 408, 0,
	406, 409, 410, 411, 455, 456, 0, 506, 412, 208,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	216, 217, 218, 419, 420, 219, 421, 220, 221, 422,
	0, 222, 223, 224, 225, 226, 227, 0, 0, 423,
	424, 425, 0, 228, 426, 0, 0, 0, 229, 230,
	231, 232, 233, 0, 235, 236, 237, 234, 0, 238,
	0, 239, 240, 0, 0, 241, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 244, 245, 465, 246, 247,
	248, 427, 428, 0, 249, 0, 250, 0, 251, 0,
	0, 252, 253, 0, 254, 0, 0, 0, 429, 255,
	256, 258, 259, 257, 260, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 261, 262, 432, 263, 264, 0,
	265, 0, 266, 0, 0, 0, 267, 0, 268, 433,
	0, 434, 0, 269, 270, 271, 272, 273, 274, 435,
	436, 0, 0, 276, 0, 0, 0, 283, 0, 275,
	0, 0, 277, 437, 279, 278, 280, 281, 282, 438,
	0, 439, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 294, 293,
	0, 440, 0, 295, 296, 0, 0, 297, 298, 0,
	0, 299, 0, 300, 0, 0, 301, 302, 304, 305,
	303, 0, 306, 307, 309, 308, 0, 0, 0, 0,
	441, 310, 442, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 0, 0, 317, 443, 0, 318, 0, 444,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 445,
	327, 446, 328, 0, 329, 330, 331, 332, 333, 447,
	334, 335, 0, 336, 337, 338, 339, 340, 0, 342,
	343, 341, 344, 345, 346, 347, 0, 348, 0, 0,
	349, 350, 351, 448, 352, 0, 356, 357, 358, 359,
	360, 361, 362, 0, 368, 369, 363, 365, 366, 367,
	364, 370, 371, 0, 372, 353, 354, 373, 0, 374,
	449, 375, 376, 0, 385, 377, 378, 379, 355, 380,
	383, 384, 381, 0, 382, 450, 0, 386, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 395, 0, 451,
	452, 396, 0, 0, 397, 398, 453, 454, 0, 399,
	400, 401, 402, 0, 0, 403, 404, 405, 407, 0,
	408, 0, 406, 409, 410, 411, 455, 456, 208, 0,
	412, 0, 0, 0, 0, 0, 413, 414, 0, 415,
	416, 417, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 216,
	217, 218, 419, 420, 219, 421, 220, 221, 422, 0,
	222, 223, 224, 225, 226, 227, 0, 0, 423, 424,
	425, 0, 228, 426, 0, 0, 0, 229, 230, 231,
	232, 233, 0, 235, 236, 237, 234, 0, 238, 0,
	239, 240, 0, 0, 241, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 244, 245, 465, 246, 247, 248,
	427, 428, 0, 249, 0, 250, 0, 251, 0, 0,
	252, 253, 0, 254, 0, 0, 0, 429, 255, 256,
	258, 259, 257, 260, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 261, 262, 432, 263, 264, 0, 265,
	0, 266, 0, 0, 0, 267, 0, 268, 433, 0,
	434, 0, 269, 270, 271, 272, 273, 274, 435, 436,
	0, 0, 276, 0, 0, 0, 283, 0, 275, 0,
	0, 277, 437, 279, 278, 280, 281, 282, 438, 0,
	439, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	289, 0, 0, 290, 291, 292, 0, 294, 293, 0,
	440, 0, 295, 296, 0, 0, 297, 298, 0, 0,
	299, 0, 300, 0, 0, 301, 302, 304, 305, 303,
	0, 306, 307, 309, 308, 0, 0, 0, 0, 441,
	310, 442, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 0, 0, 317, 443, 0, 318, 0, 444, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 445, 327,
	446, 328, 0, 329, 330, 331, 332, 333, 447, 334,
	335, 0, 336, 337, 338, 339, 340, 0, 342, 343,
	341, 344, 345, 346, 347, 0, 348, 0, 0, 349,
	350, 351, 448, 352, 0, 356, 357, 358, 359, 360,
	361, 362, 0, 368, 369, 363, 365, 366, 367, 364,
	370, 371, 0, 372, 353, 354, 373, 0, 374, 449,
	375, 376, 0, 385, 377, 378, 379, 355, 380, 383,
	384, 381, 0, 382, 450, 0, 386, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 395, 0, 451, 452,
	396, 0, 0, 397, 398, 453, 454, 0, 399, 400,
	401, 402, 0, 0, 403, 404, 405, 407, 0, 408,
	0, 406, 409, 410, 411, 455, 456, 208, 0, 412,
	0, 0, 0, 0, 0, 413, 414, 0, 415, 416,
	417, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 216, 217,
	218, 419, 420, 219, 421, 220, 221, 422, 0, 222,
	223, 224, 225, 226, 227, 0, 0, 423, 424, 425,
	0, 228, 426, 0, 0, 0, 229, 230, 231, 232,
	233, 0, 235, 236, 237, 234, 0, 238, 0, 239,
	240, 0, 0, 241, 242, 243, 0, 0, 0, 0,
	0, 0, 0, 244, 245, 465, 246, 247, 248, 427,
	428, 0, 249, 0, 250, 0, 251, 0, 0, 252,
	253, 0, 254, 0, 0, 0, 429, 255, 256, 258,
	259, 257, 260, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 261, 262, 432, 263, 264, 0, 265, 0,
	266, 0, 0, 0, 267, 0, 268, 433, 0, 434,
	0, 269, 270, 271, 272, 273, 274, 2240, 436, 0,
	0, 276, 0, 0, 0, 283, 0, 275, 0, 0,
	277, 437, 279, 278, 280, 281, 282, 438, 0, 439,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 294, 293, 0, 440,
	0, 295, 296, 0, 0, 297, 298, 0, 0, 299,
	0, 300, 0, 0, 301, 302, 304, 305, 303, 0,
	306, 307, 309, 308, 0, 0, 0, 0, 441, 310,
	442, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	0, 0, 317, 443, 0, 318, 0, 444, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 445, 327, 446,
	328, 0, 329, 330, 331, 332, 333, 447, 334, 335,
	0, 336, 337, 338, 339, 340, 0, 342, 343, 341,
	344, 345, 346, 347, 0, 348, 0, 0, 349, 350,
	351, 448, 352, 0, 356, 357, 358, 359, 360, 361,
	362, 0, 368, 369, 363, 365, 366, 367, 364, 370,
	371, 0, 372, 353, 354, 373, 0, 374, 449, 375,
	376, 0, 385, 377, 378, 379, 355, 380, 383, 384,
	381, 0, 382, 450, 0, 386, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 395, 0, 451, 452, 396,
	0, 0, 397, 398, 453, 454, 0, 399, 400, 401,
	402, 0, 0, 403, 404, 405, 407, 0, 408, 0,
	406, 409, 410, 411, 455, 456, 208, 0, 412, 0,
	0, 0, 0, 0, 413, 414, 0, 415, 416, 417,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 216, 217, 218,
	419, 420, 219, 421, 220, 221, 422, 0, 222, 223,
	224, 225, 226, 227, 0, 0, 423, 424, 425, 0,
	228, 426, 0, 0, 0, 229, 230, 231, 232, 233,
	0, 235, 236, 237, 234, 0, 238, 0, 239, 240,
	0, 0, 241, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 244, 245, 465, 246, 247, 248, 427, 428,
	0, 249, 0, 250, 0, 251, 0, 0, 252, 253,
	0, 254, 0, 0, 0, 429, 255, 256, 258, 259,
	257, 260, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 432, 263, 264, 0, 265, 0, 266,
	0, 0, 0, 267, 0, 268, 433, 0, 434, 0,
	269, 270, 271, 272, 273, 274, 2238, 436, 0, 0,
	276, 0, 0, 0, 283, 0, 275, 0, 0, 277,
	437, 279, 278, 280, 281, 282, 438, 0, 439, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 289, 0,
	0, 290, 291, 292, 0, 294, 293, 0, 440, 0,
	295, 296, 0, 0, 297, 298, 0, 0, 299, 0,
	300, 0, 0, 301, 302, 304, 305, 303, 0, 306,
	307, 309, 308, 0, 0, 0, 0, 441, 310, 442,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 0,
	0, 317, 443, 0, 318, 0, 444, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 445, 327, 446, 328,
	0, 329, 330, 331, 332, 333, 447, 334, 335, 0,
	336, 337, 338, 339, 340, 0, 342, 343, 341, 344,
	345, 346, 347, 0, 348, 0, 0, 349, 350, 351,
	448, 352, 0, 356, 357, 358, 359, 360, 361, 362,
	0, 368, 369, 363, 365, 366, 367, 364, 370, 371,
	0, 372, 353, 354, 373, 0, 374, 449, 375, 376,
	0, 385, 377, 378, 379, 355, 380, 383, 384, 381,
	0, 382, 450, 0, 386, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 451, 452, 396, 0,
	0, 397, 398, 453, 454, 0, 399, 400, 401, 402,
	0, 0, 403, 404, 405, 407, 0, 408, 0, 406,
	409, 410, 411, 455, 456, 208, 0, 412, 0, 0,
	0, 0, 0, 413, 414, 0, 415, 416, 417, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 418, 0, 0, 0, 0, 216, 217, 218, 419,
	420, 219, 421, 220, 221, 422, 0, 222, 223, 224,
	225, 226, 227, 0, 0, 423, 424, 425, 0, 228,
	426, 0, 0, 0, 229, 230, 231, 232, 233, 0,
	235, 236, 237, 234, 0, 238, 0, 239, 240, 0,
	0, 241, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 244, 245, 465, 246, 247, 248, 427, 428, 0,
	249, 0, 250, 0, 251, 0, 0, 252, 253, 0,
	254, 0, 0, 0, 429, 255, 256, 258, 259, 257,
	260, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 432, 263, 264, 0, 265, 0, 266, 0,
	0, 0, 267, 0, 268, 433, 0, 434, 0, 269,
	270, 271, 272, 273, 274, 2227, 436, 0, 0, 276,
	0, 0, 0, 283, 0, 275, 0, 0, 277, 437,
	279, 278, 280, 281, 282, 438, 0, 439, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 294, 293, 0, 440, 0, 295,
	296, 0, 0, 297, 298, 0, 0, 299, 0, 300,
	0, 0, 301, 302, 304, 305, 303, 0, 306, 307,
	309, 308, 0, 0, 0, 0, 441, 310, 442, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 0, 0,
	317, 443, 0, 318, 0, 444, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 445, 327, 446, 328, 0,
	329, 330, 331, 332, 333, 447, 334, 335, 0, 336,
	337, 338, 339, 340, 0, 342, 343, 341, 344, 345,
	346, 347, 0, 348, 0, 0, 349, 350, 351, 448,
	352, 0, 356, 357, 358, 359, 360, 361, 362, 0,
	368, 369, 363, 365, 366, 367, 364, 370, 371, 0,
	372, 353, 354, 373, 0, 374, 449, 375, 376, 0,
	385, 377, 378, 379, 355, 380, 383, 384, 381, 0,
	382, 450, 0, 386, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 395, 0, 451, 452, 396, 0, 0,
	397, 398, 453, 454, 0, 399, 400, 401, 402, 0,
	0, 403, 404, 405, 407, 0, 408, 0, 406, 409,
	410, 411, 455, 456, 208, 0, 412, 0, 0, 0,
	0, 0, 413, 414, 0, 415, 416, 417, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	418, 0, 0, 0, 0, 216, 217, 218, 419, 420,
	219, 421, 220, 221, 422, 0, 222, 223, 224, 225,
	226, 227, 0, 0, 423, 424, 425, 0, 228, 426,
	0, 0, 0, 229, 230, 231, 232, 233, 0, 235,
	236, 237, 234, 0, 238, 0, 239, 240, 0, 0,
	241, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	244, 245, 465, 246, 247, 248, 427, 428, 0, 249,
	0, 250, 0, 251, 0, 0, 252, 253, 0, 254,
	0, 0, 0, 429, 255, 256, 258, 259, 257, 260,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 432, 263, 264, 0, 265, 0, 266, 0, 0,
	0, 267, 0, 268, 433, 0, 434, 0, 269, 270,
	271, 272, 273, 274, 435, 436, 0, 0, 276, 0,
	0, 0, 283, 0, 275, 0, 0, 277, 437, 279,
	278, 280, 281, 282, 438, 0, 439, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 289, 0, 0, 290,
	291, 292, 0, 294, 293, 0, 440, 0, 295, 296,
	0, 0, 297, 298, 0, 0, 299, 0, 300, 0,
	0, 301, 302, 304, 305, 303, 0, 306, 307, 309,
	308, 0, 0, 0, 0, 441, 310, 442, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 0, 0, 317,
	443, 0, 318, 0, 444, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 445, 327, 446, 328, 0, 329,
	330, 331, 332, 333, 447, 334, 335, 0, 336, 337,
	338, 339, 340, 0, 342, 343, 341, 344, 345, 346,
	347, 0, 348, 0, 0, 349, 350, 351, 448, 352,
	0, 572, 357, 358, 359, 360, 361, 362, 0, 368,
	369, 363, 365, 366, 367, 364, 370, 371, 0, 372,
	353, 354, 373, 0, 374, 449, 375, 376, 0, 385,
	377, 378, 379, 355, 380, 383, 384, 381, 0, 382,
	450, 0, 386, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 451, 452, 396, 0, 0, 397,
	398, 453, 454, 0, 399, 400, 401, 402, 0, 0,
	403, 404, 405, 407, 0, 408, 0, 406, 409, 410,
	411, 455, 456, 208, 0, 412, 0, 0, 0, 0,
	0, 413, 414, 0, 415, 416, 417, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 418,
	0, 1478, 0, 0, 216, 217, 218, 419, 420, 219,
	421, 220, 221, 422, 0, 222, 223, 224, 225, 226,
	227, 0, 0, 423, 424, 425, 0, 228, 426, 0,
	0, 0, 229, 230, 231, 232, 233, 0, 235, 236,
	237, 234, 0, 238, 0, 239, 240, 0, 0, 241,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 244,
	245, 465, 246, 247, 248, 427, 428, 0, 249, 0,
	250, 0, 251, 0, 0, 252, 253, 0, 254, 0,
	0, 0, 429, 255, 256, 258, 259, 257, 260, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	432, 263, 264, 0, 265, 0, 266, 0, 0, 0,
	267, 0, 268, 433, 0, 434, 0, 269, 270, 271,
	272, 273, 274, 435, 436, 0, 0, 276, 0, 0,
	0, 283, 0, 275, 0, 0, 277, 437, 279, 278,
	280, 281, 282, 438, 0, 439, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 294, 293, 0, 440, 0, 295, 296, 0,
	0, 297, 298, 0, 0, 299, 0, 300, 0, 0,
	301, 302, 304, 305, 303, 0, 306, 307, 309, 308,
	0, 0, 0, 0, 441, 310, 442, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 0, 0, 317, 443,
	0, 318, 0, 444, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 445, 327, 446, 328, 0, 329, 330,
	331, 332, 333, 447, 334, 335, 0, 336, 337, 338,
	339, 340, 0, 342, 343, 341, 344, 345, 346, 347,
	0, 348, 0, 0, 349, 350, 351, 448, 352, 0,
	356, 357, 358, 359, 360, 361, 362, 0, 368, 369,
	363, 365, 366, 367, 364, 370, 371, 0, 0, 353,
	354, 373, 0, 374, 449, 375, 376, 0, 385, 377,
	378, 379, 355, 380, 383, 384, 381, 0, 382, 450,
	0, 386, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 395, 0, 451, 452, 396, 0, 0, 397, 398,
	453, 454, 0, 399, 400, 401, 402, 0, 0, 403,
	404, 405, 407, 0, 408, 0, 406, 409, 410, 411,
	455, 456, 208, 0, 412, 0, 0, 0, 0, 0,
	413, 414, 0, 415, 416, 417, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 418, 0,
	0, 0, 0, 216, 217, 218, 419, 420, 219, 421,
	220, 221, 422, 0, 222, 223, 224, 225, 226, 227,
	0, 0, 423, 424, 425, 0, 228, 426, 0, 0,
	0, 229, 230, 231, 232, 233, 0, 235, 236, 237,
	234, 0, 238, 0, 239, 240, 0, 0, 241, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 245,
	465, 246, 247, 248, 427, 428, 0, 249, 0, 250,
	0, 251, 0, 0, 252, 253, 0, 254, 0, 0,
	0, 429, 255, 256, 258, 259, 257, 260, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 432,
	263, 264, 0, 265, 0, 266, 0, 0, 0, 267,
	0, 268, 433, 0, 434, 0, 269, 270, 271, 272,
	273, 274, 1469, 436, 0, 0, 276, 0, 0, 0,
	283, 0, 275, 0, 0, 277, 437, 279, 278, 280,
	281, 282, 438, 0, 439, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 289, 0, 0, 290, 291, 292,
	0, 294, 293, 0, 440, 0, 295, 296, 0, 0,
	297, 298, 0, 0, 299, 0, 300, 0, 0, 301,
	302, 304, 305, 303, 0, 306, 307, 309, 308, 0,
	0, 0, 0, 441, 310, 442, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 0, 0, 317, 443, 0,
	318, 0, 444, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 445, 327, 446, 328, 0, 329, 330, 331,
	332, 333, 447, 334, 335, 0, 336, 337, 338, 339,
	340, 0, 342, 343, 341, 344, 345, 346, 347, 0,
	348, 0, 0, 349, 350, 351, 448, 352, 0, 356,
	357, 358, 359, 360, 361, 362, 0, 368, 369, 363,
	365, 366, 367, 364, 370, 371, 0, 372, 353, 354,
	373, 0, 374, 449, 375, 376, 0, 385, 377, 378,
	379, 355, 380, 383, 384, 381, 0, 382, 450, 0,
	386, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	395, 0, 451, 452, 396, 0, 0, 397, 398, 453,
	454, 0, 399, 400, 401, 402, 0, 0, 403, 404,
	405, 407, 0, 408, 0, 406, 409, 410, 411, 455,
	456, 208, 0, 412, 0, 0, 0, 0, 0, 413,
	414, 0, 415, 416, 417, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 216, 217, 218, 419, 420, 219, 421, 220,
	221, 422, 0, 222, 223, 224, 225, 226, 227, 0,
	0, 423, 424, 425, 0, 228, 426, 0, 0, 0,
	229, 230, 231, 232, 233, 0, 235, 236, 237, 234,
	0, 238, 0, 239, 240, 0, 0, 241, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 244, 245, 465,
	246, 247, 248, 427, 428, 0, 249, 0, 250, 0,
	251, 0, 0, 252, 253, 0, 254, 0, 0, 0,
	429, 255, 256, 258, 259, 257, 260, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 261, 262, 432, 263,
	264, 0, 265, 0, 266, 0, 0, 0, 267, 0,
	268, 433, 0, 434, 0, 269, 270, 271, 272, 273,
	274, 435, 436, 0, 0, 276, 0, 0, 0, 283,
	0, 275, 0, 0, 277, 437, 279, 278, 280, 281,
	282, 438, 0, 439, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	294, 293, 0, 440, 0, 295, 296, 0, 0, 297,
	298, 0, 0, 299, 0, 300, 0, 0, 301, 302,
	304, 305, 303, 0, 306, 307, 309, 308, 0, 0,
	0, 0, 441, 310, 442, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 0, 0, 317, 443, 0, 318,
	0, 444, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 445, 327, 446, 328, 0, 329, 330, 331, 332,
	333, 447, 853, 335, 0, 336, 337, 338, 339, 340,
	0, 342, 343, 341, 344, 345, 346, 347, 0, 348,
	0, 0, 349, 350, 351, 448, 352, 0, 356, 357,
	358, 359, 360, 361, 362, 0, 368, 369, 363, 365,
	366, 367, 364, 370, 371, 0, 372, 353, 354, 373,
	0, 374, 449, 375, 376, 0, 385, 377, 378, 379,
	355, 380, 383, 384, 381, 0, 382, 450, 0, 386,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 395,
	0, 451, 452, 396, 0, 0, 397, 398, 453, 454,
	0, 399, 400, 401, 402, 0, 0, 403, 404, 405,
	407, 0, 408, 0, 406, 409, 410, 411, 455, 456,
	208, 0, 412, 0, 0, 0, 0, 0, 413, 414,
	0, 415, 416, 417, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 216, 217, 218, 419, 420, 219, 421, 220, 221,
	422, 0, 222, 223, 224, 225, 226, 227, 0, 0,
	423, 424, 425, 0, 228, 426, 0, 0, 0, 229,
	230, 231, 232, 233, 0, 235, 236, 237, 234, 0,
	238, 0, 239, 240, 0, 0, 241, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 244, 245, 465, 246,
	247, 248, 427, 428, 0, 249, 0, 250, 0, 251,
	0, 0, 252, 253, 0, 254, 0, 0, 0, 429,
	255, 256, 258, 259, 257, 260, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 432, 263, 264,
	0, 265, 0, 266, 0, 0, 0, 267, 0, 268,
	433, 0, 434, 0, 269, 270, 271, 272, 273, 274,
	435, 436, 0, 0, 276, 0, 0, 0, 283, 0,
	275, 0, 0, 277, 437, 279, 278, 280, 281, 282,
	438, 0, 439, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 289, 0, 0, 290, 291, 292, 0, 294,
	293, 0, 440, 0, 295, 296, 0, 0, 297, 298,
	0, 0, 299, 0, 300, 0, 0, 301, 302, 304,
	305, 303, 0, 306, 307, 309, 308, 0, 0, 0,
	0, 441, 310, 442, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 0, 0, 317, 443, 0, 318, 0,
	444, 319, 320, 321, 0, 323, 324, 325, 0, 326,
	445, 327, 446, 328, 0, 329, 330, 331, 0, 333,
	447, 334, 335, 0, 336, 337, 338, 339, 340, 0,
	342, 343, 341, 344, 345, 346, 347, 0, 348, 0,
	0, 349, 350, 351, 448, 0, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 368, 369, 363, 365, 366,
	367, 364, 370, 371, 0, 372, 353, 354, 373, 0,
	374, 449, 375, 376, 0, 385, 377, 378, 379, 355,
	380, 383, 384, 381, 0, 382, 450, 0, 386, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	451, 452, 396, 0, 0, 397, 398, 453, 454, 0,
	399, 400, 401, 402, 0, 0, 403, 404, 405, 407,
	0, 408, 0, 406, 409, 410, 411, 455, 456, 0,
	0, 412, 0, 0, 0, 0, 0, 413, 414, 0,
	415, 416, 417, 1233, 1234, 0, 1266, 1267, 1268, 1276,
	1277, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 0, 0, 0, 0, 0, 0, 1236, 0,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278,
	0, 0, 0, 1235, 0, 0, 0, 0, 0, 1269,
	0, 1255, 0, 0, 0, 0, 1236, 0, 1252, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 0, 0, 0, 0, 0, 1255,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 1259,
	1260, 1261, 0, 0, 0, 0, 0, 1241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1283, 0, 1263, 1264, 1265, 0, 1258, 1259, 1260, 1261,
	0, 0, 0, 0, 0, 1241, 0, 0, 0, 0,
	0, 0, 1279, 1280, 0, 0, 0, 0, 0, 0,
	1250, 1251, 0, 0, 0, 0, 0, 1273, 1283, 0,
	1263, 1264, 1265, 1271, 0, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 1280, 0, 0, 0, 0, 1281, 0, 1250, 1251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 1271, 0, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1262, 0, 1270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 0, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1257, 0, 0, 1233, 1234, 0, 1266, 1267, 1268,
	1276, 1277, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 1274, 0, 0, 0, 0, 1236,
	0, 0, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1235, 0, 0, 0, 0, 0,
	1272, 0, 1255, 1247, 1248, 1254, 1253, 1249, 1275, 1252,
	1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 0,
	0, 0, 0, 0, 0, 0, 0, 2124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244,
	1245, 1237, 1238, 1239, 1240, 1242, 1243, 0, 0, 1258,
	1259, 1260, 1261, 0, 0, 2123, 0, 0, 1241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1233,
	1234, 0, 1266, 1267, 1268, 1276, 1277, 1278, 0, 0,
	1273, 1283, 0, 1263, 1264, 1265, 0, 1269, 0, 0,
	0, 0, 0, 0, 1236, 0, 0, 1282, 0, 0,
	0, 0, 0, 1279, 1280, 0, 0, 0, 0, 0,
	0, 1250, 1251, 0, 0, 0, 0, 0, 0, 1235,
	0, 0, 0, 0, 1271, 0, 0, 1255, 0, 0,
	0, 1256, 0, 0, 1252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 1259, 1260, 1261, 0, 0,
	0, 0, 0, 1241, 0, 0, 0, 1262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1257, 1273, 1283, 0, 1263, 1264,
	1265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 1279, 1280,
	0, 0, 0, 0, 0, 0, 1250, 1251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 1256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 1247, 1248, 1254, 1253, 1249, 1275,
	0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243,
	0, 0, 1262, 0, 2904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1257,
	1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 0,
	0, 0, 1274, 0, 0, 1236, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 0,
	0, 0, 0, 0, 0, 1236, 1272, 0, 1282, 1247,
	1248, 1254, 1253, 1249, 1275, 0, 1246, 1244, 1245, 1237,
	1238, 1239, 1240, 1242, 1243, 1258, 1259, 1260, 1261, 2844,
	1235, 0, 0, 0, 1241, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 1283, 0, 1263,
	1264, 1265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	1280, 0, 0, 0, 0, 0, 0, 1250, 1251, 0,
	0, 0, 0, 0, 0, 1258, 1259, 1260, 1261, 0,
	1271, 0, 0, 0, 1241, 0, 0, 1256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1281, 0, 0, 1273, 1283, 0, 1263,
	1264, 1265, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	1280, 0, 0, 0, 0, 0, 0, 1250, 1251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 1262, 0, 0, 0, 1256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1257, 0, 0, 1281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1257, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	0, 0, 0, 1274, 0, 0, 1236, 1272, 0, 1282,
	1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244, 1245,
	1237, 1238, 1239, 1240, 1242, 1243, 0, 0, 0, 0,
	2793, 1235, 0, 0, 0, 0, 0, 0, 0, 1255,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	0, 0, 0, 0, 0, 0, 1236, 1272, 0, 1282,
	1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244, 1245,
	1237, 1238, 1239, 1240, 1242, 1243, 1258, 1259, 1260, 1261,
	2761, 1235, 0, 0, 0, 1241, 0, 0, 0, 1255,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 1283, 0,
	1263, 1264, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 1280, 0, 0, 0, 0, 0, 0, 1250, 1251,
	0, 0, 0, 0, 0, 0, 1258, 1259, 1260, 1261,
	0, 1271, 0, 0, 0, 1241, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 1273, 1283, 0,
	1263, 1264, 1265, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 1280, 0, 0, 0, 0, 0, 0, 1250, 1251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 1262, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1257, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1257, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 0, 0, 1274, 0, 0, 1236, 1272, 0,
	1282, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244,
	1245, 1237, 1238, 1239, 1240, 1242, 1243, 0, 0, 0,
	0, 2755, 1235, 0, 0, 0, 0, 0, 0, 0,
	1255, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 0, 0, 0, 0, 0, 1236, 1272, 0,
	1282, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244,
	1245, 1237, 1238, 1239, 1240, 1242, 1243, 1258, 1259, 1260,
	1261, 2749, 1235, 0, 0, 0, 1241, 0, 0, 0,
	1255, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1283,
	0, 1263, 1264, 1265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 1280, 0, 0, 0, 0, 0, 0, 1250,
	1251, 0, 0, 0, 0, 0, 0, 1258, 1259, 1260,
	1261, 0, 1271, 0, 0, 0, 1241, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 1273, 1283,
	0, 1263, 1264, 1265, 0, 0, 0, 0, 0, 1270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 1280, 0, 0, 0, 0, 0, 0, 1250,
	1251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 1262, 0, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1257, 0, 0, 1281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1270,
	0, 0, 0, 0, 0, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1257, 1233, 1234, 0, 1266, 1267, 1268, 1276,
	1277, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 0, 0, 0, 1274, 0, 0, 1236, 1272,
	0, 1282, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246,
	1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 0, 0,
	0, 0, 2666, 1235, 0, 0, 0, 0, 0, 0,
	0, 1255, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 1233, 1234, 0, 1266, 1267, 1268, 1276,
	1277, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 0, 0, 0, 0, 0, 0, 1236, 1272,
	0, 1282, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246,
	1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 1258, 1259,
	1260, 1261, 2623, 1235, 0, 0, 0, 1241, 0, 0,
	0, 1255, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1283, 0, 1263, 1264, 1265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 1280, 0, 0, 0, 0, 0, 0,
	1250, 1251, 0, 0, 0, 0, 0, 0, 1258, 1259,
	1260, 1261, 0, 1271, 0, 0, 0, 1241, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 1273,
	1283, 0, 1263, 1264, 1265, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 1280, 0, 0, 0, 0, 0, 0,
	1250, 1251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 1262, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 0, 0, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 1233, 1234, 0, 1266, 1267, 1268,
	1276, 1277, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 1274, 0, 0, 1236,
	1272, 0, 1282, 1247, 1248, 1254, 1253, 1249, 1275, 0,
	1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 0,
	0, 0, 0, 2622, 1235, 0, 0, 0, 0, 0,
	0, 0, 1255, 0, 0, 0, 0, 0, 0, 1252,
	0, 0, 0, 0, 1233, 1234, 0, 1266, 1267, 1268,
	1276, 1277, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 0, 0, 0, 1236,
	1272, 0, 1282, 1247, 1248, 1254, 1253, 1249, 1275, 0,
	1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 1258,
	1259, 1260, 1261, 2594, 1235, 0, 0, 0, 1241, 0,
	0, 0, 1255, 0, 0, 0, 0, 0, 0, 1252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 1283, 0, 1263, 1264, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 1280, 0, 0, 0, 0, 0,
	0, 1250, 1251, 0, 0, 0, 0, 0, 0, 1258,
	1259, 1260, 1261, 0, 1271, 0, 0, 0, 1241, 0,
	0, 1256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 0, 0,
	1273, 1283, 0, 1263, 1264, 1265, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 1280, 0, 0, 0, 0, 0,
	0, 1250, 1251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 0, 0, 1262, 0, 0,
	0, 1256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1257, 0, 0, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1257, 1233, 1234, 0, 1266, 1267,
	1268, 1276, 1277, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 0, 0, 0, 1274, 0, 0,
	1236, 1272, 0, 1282, 1247, 1248, 1254, 1253, 1249, 1275,
	0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243,
	0, 0, 0, 0, 2416, 1235, 0, 0, 0, 0,
	0, 0, 0, 1255, 0, 0, 0, 0, 0, 0,
	1252, 0, 0, 0, 0, 1233, 1234, 0, 1266, 1267,
	1268, 1276, 1277, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	1236, 1272, 0, 1282, 1247, 1248, 1254, 1253, 1249, 1275,
	0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243,
	1258, 1259, 1260, 1261, 2389, 1235, 0, 0, 0, 1241,
	0, 0, 0, 1255, 0, 0, 0, 0, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 1283, 0, 1263, 1264, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	0, 0, 1250, 1251, 0, 0, 0, 0, 0, 0,
	1258, 1259, 1260, 1261, 0, 1271, 0, 0, 0, 1241,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 1273, 1283, 0, 1263, 1264, 1265, 0, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	0, 0, 1250, 1251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 1262, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1257, 0, 0, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 1274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1274, 0,
	0, 0, 1272, 0, 0, 1247, 1248, 1254, 1253, 1249,
	1275, 0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242,
	1243, 0, 0, 0, 0, 1742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	0, 0, 0, 0, 0, 0, 1236, 0, 0, 1282,
	0, 0, 1272, 0, 0, 1247, 1248, 1254, 1253, 1249,
	1275, 0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242,
	1243, 1235, 0, 2092, 0, 0, 0, 1233, 1234, 1255,
	1266, 1267, 1268, 1276, 1277, 1278, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1235, 0, 0,
	0, 0, 0, 0, 0, 1255, 1258, 1259, 1260, 1261,
	0, 0, 1252, 0, 0, 1241, 2986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 1283, 0,
	1263, 1264, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 1280, 1258, 1259, 1260, 1261, 0, 0, 1250, 1251,
	0, 1241, 0, 2172, 0, 0, 2171, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 1273, 1283, 0, 1263, 1264, 1265, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 1280, 1270, 0,
	0, 0, 0, 0, 1250, 1251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2985, 1271, 0, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 0, 0, 0, 0, 0,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1257, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1274, 0, 0, 1233, 1234, 0,
	1266, 1267, 1268, 1276, 1277, 1278, 0, 0, 0, 0,
	1262, 0, 0, 0, 0, 1269, 0, 0, 0, 0,
	2065, 0, 1236, 0, 0, 1282, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1235, 0, 0,
	1274, 0, 0, 0, 0, 1255, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 0, 0, 0, 1272, 0,
	0, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244,
	1245, 1237, 1238, 1239, 1240, 1242, 1243, 0, 0, 2066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 1259, 1260, 1261, 0, 0, 0, 0,
	0, 1241, 0, 0, 1272, 0, 0, 1247, 1248, 1254,
	1253, 1249, 1275, 0, 1246, 1244, 1245, 1237, 1238, 1239,
	1240, 1242, 1243, 1273, 1283, 0, 1263, 1264, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 1280, 0, 0,
	0, 0, 0, 0, 1250, 1251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1840, 0, 0, 0, 0, 0, 1233, 1234, 0,
	1266, 1267, 1268, 1276, 1277, 1278, 0, 0, 0, 0,
	1262, 0, 0, 0, 0, 1269, 0, 0, 0, 1839,
	0, 0, 1236, 0, 0, 1282, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 1233, 1234, 0, 1266, 1267,
	1268, 1276, 1277, 1278, 0, 0, 0, 1235, 0, 0,
	1274, 0, 0, 1269, 0, 1255, 0, 0, 0, 0,
	1236, 0, 1252, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	0, 0, 0, 1255, 0, 0, 0, 0, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 1259, 1260, 1261, 0, 0, 0, 0,
	0, 1241, 0, 0, 1272, 0, 0, 1247, 1248, 1254,
	1253, 1249, 1275, 0, 1246, 1244, 1245, 1237, 1238, 1239,
	1240, 1242, 1243, 1273, 1283, 0, 1263, 1264, 1265, 0,
	1258, 1259, 1260, 1261, 0, 0, 0, 0, 0, 1241,
	0, 0, 0, 0, 0, 0, 1279, 1280, 0, 0,
	0, 0, 0, 0, 1250, 1251, 0, 0, 0, 0,
	0, 1273, 1283, 0, 1263, 1264, 1265, 1271, 0, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	1281, 0, 1250, 1251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 1271, 0, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1262, 0, 1270, 684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 1233, 1234, 0, 1266, 1267,
	1268, 1276, 1277, 1278, 0, 0, 0, 0, 1262, 0,
	1274, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	1236, 0, 0, 1282, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 1274, 0,
	0, 0, 0, 1255, 0, 0, 0, 0, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 1247, 1248, 1254,
	1253, 1249, 1275, 0, 1246, 1244, 1245, 1237, 1238, 1239,
	1240, 1242, 1243, 0, 0, 0, 0, 0, 0, 0,
	1258, 1259, 1260, 1261, 0, 0, 0, 0, 0, 1241,
	0, 0, 1272, 0, 0, 1247, 1248, 1254, 1253, 1249,
	1275, 0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242,
	1243, 1273, 1283, 0, 1263, 1264, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	0, 0, 1250, 1251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1233, 1234, 0, 1266, 1267,
	1268, 1276, 1277, 1278, 0, 0, 0, 0, 1262, 0,
	0, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	1236, 0, 0, 1282, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 1233, 1234, 0, 1266, 1267, 1268, 1276,
	1277, 1278, 0, 0, 0, 1235, 0, 0, 1274, 0,
	0, 1269, 0, 1255, 0, 2176, 0, 0, 1236, 0,
	1252, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2393, 0,
	0, 0, 0, 1235, 0, 0, 0, 0, 0, 0,
	0, 1255, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1258, 1259, 1260, 1261, 0, 0, 0, 0, 0, 1241,
	0, 0, 1272, 0, 2181, 1247, 1248, 1254, 1253, 1249,
	1275, 0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242,
	1243, 1273, 1283, 0, 1263, 1264, 1265, 0, 1258, 1259,
	1260, 1261, 0, 0, 0, 0, 0, 1241, 0, 0,
	0, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	0, 0, 1250, 1251, 0, 0, 0, 0, 0, 1273,
	1283, 0, 1263, 1264, 1265, 1271, 0, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 1280, 0, 0, 0, 0, 1281, 0,
	1250, 1251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1270, 1271, 0, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1262, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 1233, 1234, 0, 1266, 1267, 1268, 1276,
	1277, 1278, 0, 0, 0, 0, 1262, 0, 1274, 0,
	0, 1269, 0, 0, 0, 0, 0, 0, 1236, 0,
	0, 1282, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1235, 0, 0, 1274, 0, 0, 0,
	0, 1255, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 1247, 1248, 1254, 1253, 1249,
	1275, 0, 1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242,
	1243, 0, 0, 0, 0, 0, 0, 0, 1258, 1259,
	1260, 1261, 0, 0, 0, 0, 0, 1241, 0, 0,
	1272, 0, 0, 1247, 1248, 1254, 1253, 1249, 1275, 0,
	1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 1273,
	1283, 0, 1263, 1264, 1265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 1280, 0, 0, 0, 0, 0, 0,
	1250, 1251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2138, 0, 0, 0, 0,
	0, 0, 0, 1233, 1234, 0, 1266, 1267, 1268, 1276,
	1277, 1278, 0, 0, 0, 0, 1262, 0, 0, 0,
	0, 1269, 0, 0, 0, 2122, 0, 0, 1236, 0,
	0, 1282, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278,
	0, 0, 0, 1235, 0, 0, 1274, 0, 0, 1269,
	0, 1255, 0, 0, 0, 0, 1236, 0, 1252, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 0, 0, 0, 0, 0, 1255,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 1259,
	1260, 1261, 0, 0, 0, 0, 0, 1241, 0, 0,
	1272, 0, 0, 1247, 1248, 1254, 1253, 1249, 1275, 0,
	1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 1273,
	1283, 0, 1263, 1264, 1265, 0, 1258, 1259, 1260, 1261,
	0, 0, 0, 0, 0, 1241, 0, 0, 0, 0,
	0, 0, 1279, 1280, 0, 0, 0, 0, 0, 0,
	1250, 1251, 0, 0, 0, 0, 0, 1273, 1283, 0,
	1263, 1264, 1265, 1271, 0, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 1280, 0, 0, 0, 0, 1281, 0, 1250, 1251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 1271, 0, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1262, 0, 1270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 1233, 1234, 0, 1266, 1267, 1268, 1276, 1277, 1278,
	0, 0, 0, 0, 1262, 0, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1236, 0, 0, 1282,
	0, 1257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 1274, 0, 0, 0, 0, 1255,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 1247, 1248, 1254, 1253, 1249, 1275, 0,
	1246, 1244, 1245, 1237, 1238, 1239, 1240, 1242, 1243, 0,
	0, 0, 0, 0, 0, 0, 1258, 1259, 1260, 1261,
	0, 0, 0, 0, 0, 1241, 0, 0, 1272, 0,
	0, 1247, 1248, 1254, 1253, 1249, 1275, 0, 1246, 1244,
	1245, 1237, 1238, 1239, 1240, 1242, 1243, 1273, 1283, 0,
	1263, 1264, 1265, 0, 617, 0, 648, 0, 0, 1233,
	1234, 0, 1266, 1267, 1268, 1276, 1277, 1278, 0, 0,
	1279, 1280, 0, 0, 0, 0, 624, 0, 1250, 1251,
	0, 0, 0, 0, 1236, 0, 0, 1282, 622, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1235,
	623, 0, 0, 0, 1281, 625, 0, 1255, 0, 653,
	0, 0, 0, 0, 1252, 631, 632, 0, 0, 0,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 649, 626, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 0, 0, 0, 647, 637,
	0, 0, 0, 0, 1258, 1259, 1260, 1261, 0, 0,
	0, 1257, 0, 1241, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	0, 621, 0, 0, 1274, 1273, 1283, 0, 1263, 1264,
	1265, 0, 0, 0, 0, 628, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 635, 1250, 1251, 0, 0,
	0, 0, 630, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 634, 1256, 141, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 650, 0, 0,
	0, 0, 0, 39, 136, 0, 0, 0, 1272, 0,
	0, 1247, 1248, 1254, 1253, 1249, 1275, 42, 1246, 1244,
	1245, 1237, 1238, 1239, 1240, 1242, 1243, 0, 0, 0,
	0, 44, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 43, 0, 49, 0, 0, 0, 0,
	0, 0, 1262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 645, 0, 1257,
	52, 0, 0, 0, 56, 0, 640, 139, 0, 0,
	0, 57, 69, 0, 0, 0, 58, 0, 619, 638,
	651, 0, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 1528, 0, 0, 0, 59,
	0, 0, 0, 0, 641, 0, 0, 639, 60, 0,
	0, 646, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 0, 642, 0, 0, 0, 0, 0, 0, 0,
	1539, 1524, 1529, 1512, 1549, 1548, 0, 644, 1514, 1513,
	0, 0, 0, 0, 0, 1557, 1556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 1247,
	1248, 1254, 1253, 1249, 1275, 0, 1246, 1244, 1245, 1237,
	1238, 1239, 1240, 1242, 1243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 0, 1546, 1545, 0,
	0, 0, 0, 0, 0, 0, 0, 1544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 1543, 1541, 1542, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 134, 63, 0, 64, 0, 65,
	0, 0, 0, 140, 0, 0, 1528, 0, 66, 1523,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 1532,
	1527, 1533, 1534, 1535, 1536, 1537, 80, 1531, 0, 106,
	0, 0, 0, 0, 0, 0, 1554, 1555, 137, 0,
	0, 1539, 1524, 1529, 1512, 1549, 1548, 0, 0, 1514,
	1513, 168, 0, 0, 0, 0, 1557, 1556, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 1547, 0,
	135, 0, 1525, 1526, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 1550, 160, 1546, 1545,
	0, 0, 0, 0, 0, 161, 0, 0, 1544, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 1663,
	1661, 1662, 1665, 1664, 0, 0, 133, 0, 0, 4,
	0, 0, 0, 1543, 1541, 1542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 1518, 1519, 1520, 0, 0, 0, 0,
	1523, 0, 0, 0, 0, 0, 1538, 1521, 0, 0,
	1532, 1527, 1533, 1534, 1535, 1536, 1537, 1559, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 1554, 1555, 0,
	0, 0, 1515, 0, 0, 1551, 1552, 1553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 1522, 0,
	0, 0, 0, 1558, 0, 0, 0, 0, 0, 1547,
	0, 0, 0, 1525, 1526, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 1518, 1519, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1538, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 1551, 1552, 1553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 0, 0, 0, 1558,
}
var sqlPact = [...]int{

	54457, -1000, -5, -1000, -1000, -1000, 213, -1000, -1000, -1000,
	-1000, 210, 209, 208, -1000, 202, 201, 200, 199, 197,
	196, 195, 194, 193, 192, 189, -1000, -1000, 188, -1000,
	-1000, -1000, -1000, 184, 183, 182, -1000, 181, 1535, 29250,
	175, 174, 1586, 45954, 1448, 173, 170, -1000, 168, 1809,
	33699, 1194, 1415, -1000, 162, 160, 1177, 45585, 3998, 31470,
	1262, 1818, 45213, 28876, 1811, 31098, 44841, -1000, -1000, 1007,
	-1000, -1000, 44469, 152, 149, 148, 145, 144, -1000, 135,
	44097, 133, 131, 129, 128, 127, 121, 119, 118, 115,
	114, 110, 109, 107, 106, 102, 98, 96, 95, 94,
	86, -1000, 84, 82, 76, -1000, 54272, 72, 70, 69,
	-1000, 1261, 67, 59, 57, 56, 55, -1000, -1000, 54,
	53, 52, 51, 49, 48, 116, 46, 45, 44, 43,
	40, -1000, 1080, 379, 2205, 12540, 1170, 1166, 1162, 1142,
	1155, 698, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48537, 45954, 39, -36, 37, -1000, 2228, 772, 22517, 54457,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 33327, 32955, 32583, 27026, 43725, 43353, 9738, 9738, 901,
	-1000, -7, 29988, 45954, -1000, -1000, 268, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18651, 18239, 374, -1000, 265, -1000, 1197, -1000, -1000, -1000,
	-1000, 42981, 42609, 42237, 26652, 26278, 41865, 1707, 1702, 41493,
	-1000, -1000, 41121, -1000, -1000, 2006, 1853, 1852, 32211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40752, 40380,
	40008, 39636, 39264, 25904, 25530, 582, -1000, -1000, -1000, -1000,
	23267, -1000, -1000, -1000, -1000, -1000, 35, -1000, 32, 31,
	-1000, 30, 29, 28, 25, 24, 23, 21, 10, -1000,
	7, 6, -1000, 5, 3, -1000, 1, -3, 1411, 1507,
	1287, 38892, 964, 1444, -44, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45954, -1000, 19049, -1000, 578, -1000, 1882, -1000,
	19049, -1000, 1443, 178, 1301, -1000, -1000, -1000, 1251, 1022,
	-1000, -1000, 45954, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2473, 1318, 577, 38520, -1000, 1599, -1000, 684, 13336, -1000,
	869, -1000, 13336, 264, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1651,
	2077, 2416, 25156, 1349, 2269, 2003, 2471, 1641, 1996, 1988,
	1986, 1979, 1932, 2466, 1071, 2464, 952, 797, 2462, 1930,
	1910, 2431, 1366, 793, 2442, 2440, 1881, 1873, -1000, -1000,
	-1000, -1000, 1040, -1000, -1000, -1000, -1000, 35175, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1080, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1520, 2195, 2195, 2195, 2297, 363, 360, -1000, 116, -1000,
	1600, -1000, 1303, -1000, -1000, -1000, 53861, -1000, -1000, 19049,
	19049, 19049, 19049, 19049, 1144, -1000, -1000, -1000, 599, -1000,
	576, 574, 10933, -1000, -1000, 2402, -1000, -1000, -1000, 369,
	-1000, -1000, 19049, -1000, 261, -1000, -1000, -1000, -1000, 573,
	2434, -1000, 766, -1000, -1000, -1000, 694, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1929, 525, 522, -1000, 520, 519,
	-1000, -1000, -1000, 572, 571, 568, 560, 559, 558, -1000,
	-1000, -1000, 1110, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 715, -1000, 715, 715, 508, 508,
	557, 554, 510, 553, -1000, -1000, 552, 508, 551, 550,
	-1000, -1000, 537, 692, 653, 536, 531, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1493, -1000, -1000, 1493,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 900, 47430, -1000,
	-1000, -1000, -12, 45954, -1000, 374, -12, -1000, -1000, 529,
	-1000, 13734, 13734, 13734, -1000, -1000, 1438, 19049, -1000, 2869,
	-1000, 3816, -226, 528, 649, 649, -1000, 21392, 489, 24771,
	-1000, 525, 522, 520, 519, -1000, 258, -1000, -1000, -1000,
	-1000, -1000, 2074, 2102, 909, -1000, 1084, 2101, -1000, 3078,
	2093, 1079, -1000, -1000, 708, 2092, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1266, -1000, -1000, 1275, 2090,
	-131, 1972, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1468, -1000, 27395, 29988, -7, -45, -1000,
	9355, 53861, -1000, 53861, -1000, 1872, 45954, 9738, 45954, 45954,
	-1000, 518, 1537, 1429, -1000, -1000, 3078, 1533, -1000, -1000,
	697, 1527, -1000, -1000, 1518, -1000, 374, -1000, -1000, 38148,
	48168, 697, 1517, -1000, -1000, -1000, 35175, -1000, 45954, -1000,
	45954, -1000, 982, -1000, 47799, 137, 2067, -1000, -1000, 137,
	2066, -1000, 137, 2063, -1000, 132, 2056, -1000, -1000, 1283,
	2049, -1000, -54, 2042, -1000, -1000, -54, 2041, -1000, -1000,
	19049, -39, -1000, -1000, -1000, 772, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 37776, 29619, 45954, 31839, 703, 53861, 2358,
	54742, 27395, 53861, 29619, 45954, 1907, -1000, 37404, 37032, 2211,
	682, -1000, -1000, 45954, -1000, 19049, -1000, 2341, 1576, -34,
	-1000, -1000, -1000, -1000, -1000, 1565, 1647, 805, 971, -1000,
	13336, 13336, 2150, -1000, 256, 9738, -1000, -1000, 931, -1000,
	-1000, -1000, -1000, -1000, 36660, -1000, -1000, -1000, 1297, 45954,
	-1000, -1000, 28502, 1895, -1000, 45954, -1000, 45954, -1000, 45954,
	-1000, 45954, -1000, 45954, -1000, -1000, -1000, -1000, -1000, 2036,
	1148, 1904, -1000, 45954, -1000, 45954, -1000, -1000, -1000, 1560,
	-1000, -1000, -1000, 36291, 35919, 35547, -1000, -1000, 1103, 928,
	-1000, -1000, 151, -1000, -1000, 1520, -1000, 1452, 1617, 17827,
	1644, 19049, 116, -1000, -1000, 116, 116, 12128, -1000, -1000,
	-1000, 45954, -1000, 54591, 54742, 9738, 913, 19049, 19049, 19049,
	19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049,
	19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049,
	19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049, 19049,
	19049, 19049, 1516, 19049, 888, 19049, 19049, 19049, 19049, 1426,
	-1000, -1000, 1246, 413, 1269, -1000, 2395, 2395, 2395, 54111,
	54111, 407, 599, -1000, 19049, -1000, 290, 19049, 360, 51775,
	-11, 10535, -1000, -1000, -1000, -1000, 17415, 712, 53861, 8972,
	10123, -1000, 2425, 937, 1951, 1757, 517, 561, 546, 511,
	493, 19049, 19049, 19049, 19049, 19049, 19049, -1000, -1000, -1000,
	-1000, -1000, -1000, 2402, -1000, 17017, 16605, -1000, 2424, 16193,
	15781, -1000, 15369, 20243, 14957, 908, 907, 906, 19049, 11331,
	-1000, -34, -1000, 47430, -1000, 45954, -12, 2339, 19049, 167,
	-1000, 52747, -1000, 167, 167, 516, -42, 53861, 1628, 1607,
	22892, 1482, 1203, 1203, 1203, -1000, 515, 595, 649, 7038,
	14545, 34068, 1218, 34068, 280, 359, 21017, 2869, -1000, -1000,
	45954, 9738, -23, 1138, -1000, 30726, 2198, 2193, 2185, 969,
	-1000, 2296, 35175, 2312, 290, 2208, 1846, 886, 35175, 3078,
	-1000, 54742, -1000, 1681, 2292, 1029, 1027, 1029, 1029, 1018,
	35175, 880, 1139, 27395, 2207, 863, -29, 2310, 290, 2206,
	1844, 860, -1000, -1000, 45954, 9738, 2203, 926, 634, -1000,
	45954, 255, -1000, 946, -51, 252, 1637, 1635, 237, -1000,
	30357, 2338, 2040, 45954, -1000, 3078, 2037, -1000, 1137, -1000,
	2033, 2024, 2337, 1427, 1513, -1000, -1000, -1000, 1416, 1499,
	822, 2021, 706, 285, 2335, 285, 6596, -1000, 45954, -1000,
	45954, -1000, -1000, 45954, -1000, 45954, -1000, 45954, -1000, 45954,
	45954, -1000, 45954, 27395, 27395, 27395, -52, 4094, 28133, 855,
	-24, -1000, 754, 30357, 484, -59, -1000, 967, -1000, -1000,
	-1000, 279, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 715,
	514, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 510, 1110, 508, 508, 508, -1000, -1000,
	-1000, 692, 653, -1000, -1000, -1000, 715, 715, -1000, -1000,
	-189, 1831, -45, 31839, 634, -1000, 634, -1000, 1898, -1000,
	2222, 664, -60, 792, -34, -1000, 1493, -1000, 1033, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2432, -1000, 2400, -1000, -1000, 2421, -13, -1000,
	-13, -1000, 9738, -1000, 45954, -1000, -1000, -1000, -1000, -1000,
	45954, -1000, -1000, 45954, -1000, -1000, -1000, -1000, -1000, 3418,
	-1000, 1896, -1000, 4094, 251, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45954, 45954, 45954, -1000, 35175, -1000, -1000,
	-1000, -1000, 53861, -1000, 509, -1000, -1000, 53861, 1038, 1669,
	-1000, 1669, -17, -1000, 52497, 1598, 45954, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 676,
	705, 705, 954, 954, 954, 954, 2306, 1423, 227, 2936,
	239, 239, 239, 239, 239, 239, 239, 239, 840, 821,
	821, 840, 840, 840, 840, 840, 821, 821, 821, 239,
	239, 239, 54111, 3612, 700, 19049, 19049, 851, 1239, 413,
	700, 19049, 700, 700, 700, 700, -1000, 1240, -1000, -1000,
	-1000, -1000, 1822, 507, 20243, 20243, -1000, -1000, -1000, 10933,
	19049, -1000, -1000, -1000, -1000, 506, 19049, -1000, 51845, -236,
	356, -116, -1000, 19049, 589, -125, -1000, 970, -1000, 19049,
	248, -1000, -1000, -4, 19049, 19049, 19049, 353, -1000, 348,
	-1000, 850, -1000, 848, 846, 844, -1000, 504, 1198, 503,
	502, 19049, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	53823, 49321, 49283, 6146, 5722, -61, -62, 347, -1000, 1813,
	-116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346, -1000,
	344, -67, -1000, -68, -1000, 342, -1000, 53573, -116, 341,
	4385, -1000, 20243, 20243, 20243, 10933, 499, 339, -1000, 52247,
	-1000, 672, 669, 668, 53323, 14133, 14133, 14133, 337, 53285,
	19049, -116, -1000, -1000, 497, -69, 706, 13734, 22142, 9738,
	-1000, 706, 706, 19049, -1000, 19049, 22892, 22892, 1090, 1604,
	22892, -1000, -1000, -1000, -1000, 34068, 425, 649, 34068, -1000,
	2402, 1626, -1000, 336, -1000, -1000, -1000, 45954, 374, -1000,
	-1000, 649, 335, 246, 1421, 45954, 45954, 45954, -1000, -1000,
	1490, 47061, 1486, 54742, 45954, -1000, -1000, 496, 490, 1593,
	1592, 45954, 45954, 46692, 46323, 45954, 1136, 1456, 1101, 290,
	-1000, 667, 488, 45954, 1061, -1000, -1000, -1000, -1000, -1000,
	45954, -1000, -1000, 2412, -1000, 1029, -1000, -1000, -1000, 1029,
	3078, 1059, 45954, 27395, 702, 659, 45954, 1119, 290, -1000,
	658, 487, 9738, 1109, -1000, 657, 45954, 1733, -1000, 1463,
	-1000, 8589, -1000, -1000, 9738, 1679, 1679, 9738, 334, -20,
	-1000, -1000, -1000, -1000, -1000, -1000, 1656, 45954, 579, 45954,
	290, 45954, 136, 45954, 27395, 27395, 27395, 290, 45954, 2020,
	45954, 2017, 2000, 615, 45954, 1225, 19049, 1088, -1000, 23642,
	724, 45954, 1031, 101, -1000, -1000, -1000, 20, 45954, -1000,
	-1000, 137, 137, 137, -1000, 132, 1283, -1000, -54, -54,
	-1000, -1000, -1000, 45954, 2373, 27395, -70, -1000, 757, 882,
	853, -1000, 54742, -1000, 598, 812, -1000, 2409, 486, 2402,
	-1000, 696, 34806, 45954, 83, -1000, 699, 1460, -1000, 13336,
	13336, -1000, 1493, -1000, -1000, 1074, -1000, 1100, -1000, -1000,
	-1000, -1000, 13336, -1000, -1000, 1895, -45, -45, -1000, -1000,
	624, -1000, 45954, -1000, -1000, -1000, -1000, 1038, -1000, 19049,
	-1000, -1000, -1000, 12128, -1000, -1000, -1000, 45954, -176, 19049,
	700, 700, 19049, 20243, 20243, -1000, 700, -1000, -1000, -1000,
	-1000, -1000, 1810, 485, 19049, 54742, 4743, 4326, -76, 840,
	19049, -21, -1000, 19049, -1000, 51494, -1000, -1000, 445, 1982,
	-1000, 19049, 53035, 8206, 331, 12938, -1000, 52785, -9, -9,
	-1000, 2430, 1491, 1174, 1118, 1012, 2408, -1000, 24396, 707,
	1225, 51424, 54591, 54742, 19049, 19049, 19049, -1000, -1000, 2402,
	-1000, 19049, -1000, -1000, -1000, -1000, -1000, 1807, 19049, -1000,
	54591, 54742, 20243, 20243, 20243, 20243, 20243, 20243, 20243, 20243,
	20243, 20243, 20243, 20243, 20243, 20243, 20243, 20243, 20243, 20243,
	20243, 1589, 20243, 2389, 2389, 2389, -22, 19049, -1000, 1886,
	1807, 19049, 19049, -1000, -1000, -1000, 54742, 327, 326, 322,
	-1000, 19049, -116, 484, -1000, 1755, -1000, -136, -1000, 2869,
	-1000, -1000, 1755, 1755, -77, 53861, -1000, 1090, -1000, 483,
	19049, 22892, -1000, 588, -1000, -82, -1000, 34068, -1000, 586,
	-230, -1000, 630, -1000, 649, 374, -1000, 34068, -1000, 9738,
	-1000, -1000, 838, 830, -1000, 2011, -1000, 1484, -1000, 738,
	-1000, 1222, 19049, 21767, 481, 480, 1208, -1000, 2008, 1283,
	2001, 1283, -1000, -1000, 665, -1000, 470, 469, -1000, -23,
	1126, -1000, 24027, 19049, -1000, 816, -1000, -1000, -1000, 3078,
	815, -1000, -1000, 1121, 24027, -1000, -1000, -1000, 24027, 19049,
	-1000, -29, 814, 24027, 1970, 696, 1786, 939, -1000, -1000,
	-1000, -1000, -1000, -1000, 243, 1710, 30357, 45954, 468, 45954,
	462, -1000, -1000, 458, 45954, 3078, -1000, 697, -1000, -1000,
	753, 9738, 453, 9738, 1572, 615, 27764, -1000, 697, 1617,
	53861, -1000, 1031, 11729, 2192, -83, -1000, 241, -1000, -1000,
	-1000, 706, 6596, 22892, 19049, 2439, -84, -1000, -1000, -1000,
	-1000, -1000, -45, 1292, 2171, 2171, -1000, 2405, -1000, 585,
	312, 2402, 311, -1000, -30, 449, -1000, 621, 618, -45,
	45954, -1000, 1231, 9738, 45954, 45954, 9738, 45954, -1000, -1000,
	-34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1241,
	51143, -1000, 2204, 9738, 2319, 700, 3359, 3196, 19049, 54742,
	54269, -85, 19049, 19049, -1000, 310, 19049, 562, 53861, -1000,
	-1000, -1000, 53861, 19049, 240, -1000, 2429, 19049, 309, 307,
	304, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 302,
	-1000, -1000, 48906, -1000, 19049, 299, -1000, 298, 297, 410,
	51073, 50792, 294, 53861, 1886, 53861, -1000, -1000, 810, 810,
	1008, 1008, 1008, 1008, 2389, 325, 548, 1400, 1326, 1326,
	1326, 443, 482, 482, 1326, 1326, 1326, 1783, 1579, 448,
	5145, 19049, 293, -1000, -1000, 53861, 53861, 288, -1000, -1000,
	-1000, -116, 283, 1741, 2290, -1000, 22892, 1741, 1741, -1000,
	-1000, 45954, 53861, -1000, -226, -1000, 2402, -1000, -1000, 1626,
	-1000, 7435, 34068, -1000, -1000, 138, 45954, 45954, 45954, 1990,
	-1000, 3046, -1000, 50722, -90, -1000, 2260, 2260, 19049, 237,
	-1000, -1000, 444, 21767, 45954, -1000, 1639, 1621, 783, 45954,
	-1000, 45954, -1000, -1000, 45954, 45954, 45954, 45954, 45954, -1000,
	428, 237, -96, 45954, 45954, 27395, -1000, -1000, -98, 9738,
	-1000, 2202, -1000, 27395, 808, 9738, 1119, 1723, -1000, 427,
	21767, 424, 45954, 30357, 2332, -1000, -1000, -1000, 421, 1766,
	1386, 21767, 1358, 1580, 615, 27764, -1000, 822, 1031, -1000,
	-1000, -35, -1000, 456, 290, 45954, 2438, 1225, -1000, -37,
	53861, -1000, 617, -1000, 2137, -1000, 2136, 549, -1000, -1000,
	282, -1000, 34437, 34437, 27395, 27395, -45, 1525, -1000, -1000,
	1141, 1458, -1000, -1000, -1000, -1000, 2204, 19049, 19049, 54269,
	-99, -1000, 700, 700, -1000, 50441, -1000, 53861, 7823, -1000,
	52785, -1000, -1000, -1000, -1000, 1172, -1000, 50371, -1000, -1000,
	-1000, 19049, -1000, -1000, -1000, -1000, 20243, 1782, 420, 54742,
	50090, -1000, -1000, -1000, 701, 19049, 19049, 2869, 701, 701,
	-101, 649, -1000, -1000, -1000, 2402, -1000, 9738, -1000, -1000,
	-1000, 45954, -1000, 45954, -1000, 9738, 45954, 1775, 1478, -1000,
	-1000, 1583, 414, 20243, 45954, 704, -1000, 1215, 21767, 2204,
	9738, 2204, 50020, 10123, -106, -118, 1477, -1000, 1476, 19049,
	-1000, 54742, 1283, 1283, -119, -120, -1000, 813, 811, 19049,
	807, -1000, -1000, -1000, 806, -1000, 654, -54, 24027, 138,
	-1000, -1000, 1168, 21767, -129, 21767, -138, 281, 290, 21767,
	-1000, 45954, -141, 45954, -1000, 615, 27764, -1000, 2000, -1000,
	2111, 45954, 2183, -1000, -1000, -1000, 1617, 413, 408, 397,
	-1000, -1000, -1000, -143, -1000, -1000, -57, -1000, 663, 662,
	-1000, -1000, -1000, 9738, 920, -1000, 700, 700, -1000, -1000,
	-1000, -1000, 275, 1225, 2289, -1000, 49739, 4156, 20243, 54742,
	-144, -1000, -1000, 45954, 53861, -116, -1000, -1000, -1000, 34068,
	512, -1000, 1752, -1000, -1000, -1000, 45954, 1483, -1000, -1000,
	19049, 5145, 390, 19049, -1000, 1710, 389, -1000, -1000, -1000,
	-1000, -1000, -1000, 2260, -4, -1000, 1047, -1000, -1000, 53861,
	2249, -1000, -1000, 385, 383, 45954, 45954, -9, 382, 381,
	24027, -1000, 45954, -149, 1215, -150, -1000, 1710, -1000, -151,
	753, -1000, 380, 27764, -1000, 1572, 910, -156, 45954, 1031,
	-1000, 27395, 27395, -1000, 1525, -1000, 45954, -1000, 45954, -1000,
	45954, -1000, 1063, 19049, -1000, 4156, -162, -1000, -113, -1000,
	2331, -1000, -1000, -1000, -1000, 1981, 49604, 1538, 45954, 5217,
	1119, 45954, 2204, 274, 45954, 752, 9738, 1141, 1141, -1000,
	-1000, 271, 19049, 19049, -1000, 377, -1000, 1710, 1215, 1119,
	1215, 376, 21767, -1000, 1580, 968, -1000, 706, -1000, -1000,
	-163, -168, -1000, -169, -178, -1000, 270, 19845, 19845, -116,
	-1000, 45954, 375, 1958, -1000, 1330, 1312, 169, 755, -1000,
	-179, -1000, -1000, 374, -1000, 19049, -1000, -186, -1000, 723,
	-187, -1000, 722, 2429, -193, -194, 45954, 1119, 1710, -1000,
	1710, 21767, -195, -1000, 6596, -1000, 696, 696, -1000, -1000,
	-1000, -1000, -1000, 20626, 1310, 1016, 52191, -1000, -1000, -1000,
	45954, -1000, 1336, 1333, 1032, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1538, 53861, -1000, 1141, 1716, -1000, 1141, 1771,
	-1000, -1000, -196, -1000, 1119, 1119, -201, -1000, -188, -1000,
	-1000, 2363, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2116,
	-1000, 774, 1529, 1529, 1330, -1000, 371, -1000, 370, 1279,
	-1000, -1000, 1215, -1000, 19447, -1000, 2377, -1000, -1000, 1619,
	-1000, -1000, 19049, 19049, -1000, -1000, -1000, 1710, -1000, -1000,
	-1000, -1000, -202, -203, 1119, 1119, 804, -1000, -1000, 368,
	19049, -204, 1119, -1000,
}
var sqlPgo = [...]int{

	0, 2928, 2926, 1848, 2925, 2339, 2922, 2920, 2917, 2916,
	2915, 2311, 2914, 2913, 2912, 2909, 2903, 2898, 2895, 2893,
	2892, 2891, 2890, 2889, 2887, 2886, 2881, 2874, 2872, 2868,
	2866, 2863, 2268, 2858, 2247, 2857, 2854, 2852, 2848, 2844,
	2843, 2840, 25, 2838, 2836, 2835, 2828, 2241, 2827, 2826,
	2233, 2823, 2822, 2210, 2821, 2818, 2198, 2174, 2815, 2814,
	2156, 2812, 2811, 2148, 2809, 2128, 2805, 2804, 2112, 2803,
	107, 120, 2106, 2802, 2801, 2097, 2073, 1991, 2800, 1977,
	2798, 2796, 1956, 1935, 2795, 116, 2793, 2792, 2790, 2789,
	1918, 1916, 2787, 2786, 2785, 169, 2784, 1913, 2783, 2782,
	2781, 2780, 2779, 2778, 2775, 2773, 2768, 2766, 2765, 2762,
	2759, 2757, 2756, 2755, 2753, 2750, 2748, 2743, 2741, 2739,
	2729, 2727, 2726, 175, 115, 2725, 2724, 1905, 1863, 2723,
	2720, 53, 43, 17, 74, 185, 179, 4329, 174, 2719,
	2718, 2715, 2713, 2707, 2706, 31, 124, 126, 123, 122,
	2704, 389, 2702, 2699, 45, 33, 24, 22, 86, 2698,
	2692, 2691, 1997, 87, 2690, 2686, 168, 153, 2684, 293,
	37, 75, 93, 88, 102, 56, 2682, 104, 14, 2680,
	118, 35, 2678, 72, 30, 29, 3691, 80, 70, 94,
	173, 125, 36, 2677, 170, 71, 146, 2676, 2675, 2674,
	57, 141, 2, 8, 167, 7, 2673, 11, 2672, 10,
	2670, 2669, 2667, 2666, 20, 121, 100, 76, 2663, 41,
	178, 2662, 135, 2661, 149, 2660, 77, 1760, 145, 5,
	97, 2659, 78, 15, 79, 2658, 2653, 91, 160, 2651,
	52, 138, 92, 90, 186, 151, 96, 150, 152, 2649,
	2647, 2645, 127, 2643, 140, 110, 2641, 2640, 111, 32,
	2639, 49, 159, 42, 2638, 2637, 109, 2635, 144, 2632,
	2630, 180, 119, 132, 4, 59, 85, 9, 155, 103,
	62, 61, 2626, 3713, 1091, 302, 50, 2625, 101, 65,
	39, 83, 105, 164, 34, 2621, 2618, 157, 2616, 2615,
	2614, 2613, 2607, 131, 2606, 2604, 2600, 95, 38, 68,
	2597, 106, 47, 486, 148, 129, 172, 130, 2596, 136,
	98, 143, 2595, 54, 2592, 1187, 2590, 139, 2587, 2578,
	2576, 2573, 1015, 2572, 2571, 2565, 888, 2564, 99, 2563,
	137, 133, 156, 82, 108, 165, 163, 404, 2561, 142,
	46, 2560, 48, 23, 0, 3422, 3099, 2555, 147, 89,
	2553, 2542, 2538, 2533, 26, 12, 3, 6, 16, 13,
	28, 27, 406, 2528, 2522, 84, 112, 2520, 177, 154,
	2514, 2507, 2506, 69, 2504, 21, 2502, 18, 2501, 2494,
	19, 1, 2493, 2492, 166, 2491, 114, 2328, 2485, 2484,
	2479, 1950, 2478, 2476, 55, 128,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 147, 147, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 398, 398, 149, 149, 148, 144,
	144, 151, 151, 151, 153, 153, 150, 150, 143, 143,
	32, 32, 83, 83, 83, 134, 76, 76, 76, 352,
	352, 353, 353, 130, 130, 131, 131, 131, 131, 132,
	132, 133, 133, 133, 45, 34, 34, 34, 34, 34,
	35, 35, 36, 36, 43, 43, 124, 124, 46, 46,
	46, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 56,
	56, 57, 57, 58, 58, 58, 58, 58, 58, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 66, 66, 66, 67, 67,
	67, 64, 64, 64, 62, 62, 62, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 228, 228, 68, 68,
	68, 68, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 322, 322, 69, 69,
	295, 295, 72, 72, 253, 253, 73, 73, 73, 73,
	73, 74, 74, 74, 74, 84, 84, 84, 84, 394,
	394, 394, 397, 397, 222, 222, 166, 166, 166, 166,
	79, 79, 79, 79, 80, 80, 80, 81, 81, 129,
	129, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 42, 42, 91, 91, 91,
	93, 90, 90, 90, 92, 92, 92, 92, 94, 94,
	95, 95, 95, 95, 95, 95, 96, 96, 346, 346,
	231, 231, 344, 344, 345, 345, 198, 198, 198, 198,
	198, 199, 199, 199, 351, 351, 351, 351, 351, 351,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 113,
	113, 113, 123, 123, 123, 123, 123, 123, 123, 115,
	115, 107, 107, 98, 98, 104, 104, 104, 104, 104,
	99, 99, 105, 105, 106, 106, 106, 108, 108, 108,
	108, 108, 108, 100, 100, 100, 100, 110, 110, 110,
	110, 109, 109, 119, 119, 119, 119, 119, 119, 119,
	310, 310, 114, 114, 114, 114, 117, 117, 117, 117,
	112, 112, 112, 116, 116, 120, 120, 120, 120, 101,
	101, 102, 102, 103, 103, 121, 121, 111, 111, 122,
	122, 122, 122, 122, 122, 122, 118, 118, 118, 395,
	395, 396, 396, 77, 77, 51, 51, 52, 52, 200,
	200, 201, 201, 276, 276, 276, 276, 202, 202, 152,
	152, 152, 205, 206, 206, 203, 203, 204, 204, 204,
	208, 208, 207, 210, 210, 209, 275, 362, 362, 363,
	363, 363, 363, 363, 363, 363, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 360, 360, 360, 361,
	358, 358, 359, 359, 359, 359, 399, 399, 274, 274,
	214, 214, 365, 365, 365, 365, 366, 366, 366, 366,
	366, 369, 368, 367, 367, 367, 367, 367, 306, 306,
	306, 55, 55, 55, 242, 242, 241, 241, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 126, 126, 53, 53, 53, 158, 158, 50, 50,
	50, 54, 54, 49, 49, 49, 49, 49, 259, 259,
	257, 257, 219, 219, 312, 312, 312, 170, 170, 145,
	145, 145, 20, 22, 22, 16, 16, 16, 16, 16,
	16, 29, 29, 30, 30, 26, 26, 258, 258, 260,
	260, 78, 78, 82, 82, 88, 88, 125, 125, 125,
	125, 125, 125, 125, 33, 33, 33, 33, 44, 44,
	44, 44, 86, 402, 402, 402, 87, 87, 401, 401,
	165, 165, 165, 165, 167, 167, 271, 271, 272, 272,
	403, 403, 273, 273, 273, 160, 159, 161, 161, 48,
	48, 48, 154, 154, 155, 155, 156, 156, 157, 157,
	404, 404, 75, 75, 75, 128, 128, 194, 194, 268,
	268, 268, 215, 215, 175, 175, 270, 270, 269, 269,
	269, 240, 240, 240, 127, 127, 225, 225, 233, 233,
	234, 234, 318, 318, 235, 85, 85, 137, 137, 135,
	135, 135, 135, 135, 135, 136, 136, 136, 138, 138,
	138, 138, 138, 138, 138, 141, 141, 141, 141, 142,
	142, 142, 140, 140, 376, 376, 376, 378, 378, 379,
	375, 375, 377, 377, 400, 400, 244, 244, 244, 212,
	213, 211, 211, 217, 217, 216, 218, 218, 311, 311,
	311, 238, 238, 238, 238, 263, 263, 261, 261, 262,
	262, 264, 264, 265, 265, 265, 266, 266, 267, 267,
	237, 237, 291, 291, 139, 139, 139, 224, 224, 224,
	226, 226, 281, 281, 281, 282, 282, 280, 280, 280,
	280, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	392, 392, 392, 393, 393, 309, 309, 314, 314, 314,
	314, 314, 314, 307, 307, 308, 308, 319, 320, 320,
	247, 247, 247, 247, 245, 245, 246, 246, 315, 315,
	315, 315, 239, 239, 316, 316, 316, 277, 277, 323,
	323, 323, 338, 338, 223, 223, 223, 333, 333, 324,
	324, 324, 324, 324, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 327, 327, 327, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 337, 337, 337,
	337, 337, 328, 328, 334, 335, 329, 330, 336, 336,
	336, 336, 340, 340, 331, 331, 331, 331, 331, 331,
	331, 332, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 255, 255, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 285, 285,
	285, 285, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 370, 370, 370, 370, 370, 370, 370,
	370, 373, 373, 374, 374, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 380, 380, 381,
	381, 383, 383, 384, 384, 385, 386, 386, 386, 387,
	388, 388, 382, 382, 389, 389, 389, 390, 390, 391,
	391, 391, 391, 391, 297, 297, 298, 299, 305, 305,
	305, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 168, 168, 168,
	168, 168, 230, 230, 229, 229, 294, 294, 292, 292,
	296, 296, 248, 248, 339, 339, 339, 339, 339, 339,
	339, 249, 249, 249, 256, 250, 250, 251, 251, 251,
	251, 251, 288, 289, 252, 252, 252, 290, 290, 300,
	304, 304, 303, 302, 302, 301, 301, 278, 278, 279,
	279, 236, 236, 405, 405, 232, 232, 317, 317, 317,
	317, 196, 196, 227, 227, 195, 195, 190, 190, 190,
	190, 220, 220, 221, 221, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 341, 341, 341, 342,
	343, 293, 185, 184, 172, 173, 183, 182, 181, 171,
	174, 178, 179, 180, 176, 177, 188, 187, 186, 321,
	191, 191, 192, 192, 192, 193, 193, 193, 193, 169,
	169, 189, 189, 189, 162, 162, 162, 163, 163, 164,
	164, 350, 350, 348, 348, 348, 349, 349, 349, 349,
	347, 347, 347, 347, 347, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 2, 1, 1, 3, 1, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 5, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 1, 2, 1, 2, 7,
	3, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	3, 1, 1, 3, 5, 4, 6, 4, 3, 0,
	1, 3, 2, 4, 2, 4, 1, 6, 6, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	1, 3, 2, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	3, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 6, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 0,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 2, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 5, 3,
	1, 1, 3, 1, 0, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 412, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -125, -126, -127, -128, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -377, 103, -60, -63, -65, 107, 114, 119, 142,
	151, 250, 257, 278, 280, 282, 291, -39, -38, 115,
	-135, -137, 276, -80, -81, -90, -91, -92, -93, -129,
	309, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, 312, -33, -44, -87,
	-86, 354, -6, -7, -8, -9, -10, -12, -22, -48,
	-49, -51, -52, -54, -55, -376, -61, -62, -64, -66,
	-67, -138, -136, 409, 277, 363, 37, 321, 65, 110,
	286, 20, -14, -15, -18, -17, -19, -16, -23, -25,
	-27, -24, -26, -28, -29, -30, -31, -20, -21, -13,
	380, 388, -141, -139, -140, -142, 298, 371, 334, 413,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	2, 334, 374, 299, 364, 92, 163, 262, 248, -394,
	2, -227, 334, 92, -190, -189, -162, 402, 4, -354,
	-356, 20, 21, 22, 23, 25, 35, 36, 37, 40,
	42, 43, 46, 47, 48, 49, 50, 51, 58, 63,
	64, 65, 66, 67, 72, 69, 70, 71, 74, 76,
	77, 80, 81, 82, 90, 91, 93, 94, 95, 99,
	101, 103, 106, 107, 109, 114, 115, 118, 116, 117,
	119, 129, 130, 132, 133, 135, 137, 141, 143, 148,
	149, 150, 151, 152, 153, 164, 158, 167, 170, 169,
	171, 172, 173, 162, 178, 181, 182, 183, 185, 186,
	189, 190, 191, 194, 193, 198, 199, 202, 203, 206,
	208, 211, 212, 215, 213, 214, 217, 218, 220, 219,
	226, 228, 229, 231, 232, 235, 236, 239, 242, 245,
	246, 247, 248, 249, 250, 251, 253, 255, 257, 259,
	260, 261, 262, 263, 265, 266, 268, 269, 270, 271,
	272, 276, 274, 275, 277, 278, 279, 280, 282, 285,
	286, 287, 289, 310, 311, 323, 291, 292, 293, 294,
	295, 296, 297, 301, 305, 302, 303, 304, 299, 300,
	306, 307, 309, 312, 314, 316, 317, 320, 321, 322,
	324, 327, 329, 325, 326, 319, 332, 333, 335, 336,
	337, 338, 339, 340, 341, 342, 346, 349, 350, 354,
	355, 356, 357, 360, 361, 362, 367, 363, 365, 368,
	369, 370, 375, 381, 382, 384, 385, 386, 30, 38,
	39, 41, 44, 54, 55, 56, 59, 96, 97, 113,
	120, 121, 131, 144, 146, 154, 155, 168, 174, 176,
	196, 225, 227, 240, 244, 254, 256, 264, 288, 315,
	330, 344, 345, 351, 352, 371, 372, 412, 412, 2,
	182, 261, -186, -189, -162, 92, 233, 412, 412, 412,
	2, 334, 322, 299, 364, 284, 374, -257, 178, 92,
	359, -162, 257, 24, 2, 101, 167, 362, 361, 24,
	253, 300, 336, 338, 2, 412, 412, 2, 374, 299,
	334, 163, 92, 364, 284, -180, 2, -162, -71, 2,
	409, -70, -5, -47, -56, -60, -72, -68, -11, -32,
	-34, -53, -50, -57, -63, -65, -76, -75, -77, -79,
	-83, -82, -85, -90, -91, -97, -127, -128, 78, 25,
	107, 309, 115, -397, -222, 2, 24, -166, -162, 78,
	142, 298, 334, 2, 182, 2, -180, 2, -394, 2,
	182, 2, -397, -222, 23, 2, -162, 2, 295, 312,
	-167, 2, 291, -162, 412, 412, 412, 412, 412, 412,
	203, 58, 288, 306, -95, 350, -94, 344, 293, -96,
	-346, 2, 215, -162, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 2, -123, 306,
	322, 149, 36, 58, 24, 63, 93, 143, 163, 164,
	190, 73, 74, 260, 203, 183, -310, 117, 307, 335,
	294, 332, 350, 78, 365, 285, 339, 116, 4, 92,
	215, 308, 344, 67, 412, 412, 412, -400, 2, 334,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, -136, -138, -137, 412, 412, 412, 412, 412, -216,
	-217, 358, 175, 112, 238, -135, -137, 2, -376, -123,
	306, 2, 58, 24, -344, 2, -283, 233, -285, 400,
	401, 395, 221, 387, -297, 98, 210, 209, -287, -300,
	113, 288, 409, -193, -286, 415, 9, -373, -137, 31,
	-298, -299, 52, -191, -162, 7, 8, 5, 6, -169,
	-325, -293, -332, 353, 122, 224, -370, -371, -192, 4,
	-354, -348, -326, -335, -330, -331, -333, 42, 48, 47,
	341, 214, 301, 302, 303, 304, 316, 367, 158, 40,
	231, 232, 169, 176, 61, 84, 85, 83, 88, 89,
	86, 308, 364, 53, 30, 154, 225, 155, 59, -372,
	43, 94, 106, 132, 133, 170, 171, 172, 173, 185,
	186, 326, 346, 39, 41, 44, 54, 55, 96, 97,
	120, 121, 131, 144, 168, 174, 196, 227, 244, 254,
	264, 315, 330, 344, 345, 351, 352, 372, -355, -336,
	79, 123, 140, 166, 156, 179, 180, 184, 197, 200,
	216, 223, 241, 243, 283, 313, -401, 2, 350, 350,
	2, -401, 2, -401, 2, -165, 2, 350, 347, -402,
	350, 383, -378, 265, -379, -180, -378, 412, 412, 414,
	412, -211, -212, -213, 2, 24, 104, 409, 2, -313,
	2, 407, -315, -169, -372, -137, -314, 409, -186, 234,
	-192, 84, 85, 88, 89, 4, -162, 61, 210, 209,
	-3, 2, -315, 154, -186, 2, -315, 154, 2, -187,
	154, -315, -189, 2, -352, 154, -350, 9, -349, 5,
	4, -354, -356, -355, 2, -171, -162, 2, -195, 154,
	-186, -183, -347, 4, -354, -356, -355, -357, 24, 26,
	27, 28, 29, 31, 32, 33, 34, 45, 52, 53,
	57, 60, 62, 73, 78, 83, 84, 86, 85, 87,
	88, 89, 98, 100, 102, 104, 105, 108, 110, 112,
	122, 124, 136, 138, 139, 142, 145, 147, 157, 163,
	165, 175, 177, 192, 195, 201, 204, 205, 221, 222,
	224, 230, 233, 234, 237, 238, 252, 258, 267, 281,
	284, 298, 308, 318, 328, 331, 334, 343, 347, 348,
	353, 358, 359, 364, 366, 373, 374, 376, 377, 378,
	379, 380, 383, -184, -347, 347, 414, -227, -220, -162,
	411, -283, 2, -283, 2, -214, 409, 411, 334, 62,
	2, -186, 154, -176, 2, -162, -187, 154, 2, -189,
	-352, 154, 2, -352, 154, 2, -188, 2, -186, 163,
	163, -171, 154, 2, -162, 24, 139, 2, 177, 2,
	177, 2, -316, 2, -315, -228, 154, 2, -186, -228,
	154, 2, -228, 154, 2, -196, 154, 2, -195, -171,
	154, 2, -353, 154, 2, -352, -353, 154, 2, -253,
	409, -322, 2, -321, -349, 371, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 306, 233, 347, 414, -186, -283, -295,
	409, 139, -283, 233, 139, 235, 2, 92, 334, 386,
	24, -162, 2, 310, 2, 409, -95, 56, 350, -272,
	2, -273, -159, -160, -161, 181, 259, 263, 386, -344,
	347, 392, 139, -344, -231, 411, -123, 2, 136, 2,
	7, 2, -352, 2, 310, 2, 260, 307, 58, 139,
	2, 2, 233, -395, 2, 139, 2, 139, 2, 139,
	2, 139, 2, 139, 2, 2, 260, 307, 2, 349,
	191, 349, 2, 139, 2, 139, 2, 5, 2, 181,
	259, 323, 2, 334, 374, 299, 2, 2, 139, 139,
	386, 2, -239, -315, -216, -217, -238, -261, -262, 201,
	124, 230, -244, 24, 104, -244, -244, 46, 410, 410,
	-123, 310, 2, 10, 11, 60, 35, 400, 401, 402,
	403, 134, 404, 405, 398, 399, 397, 390, 391, 394,
	187, 188, 75, 393, 392, 68, 207, 290, 125, 126,
	127, 128, 273, 159, 160, 161, 13, 14, 15, 28,
	237, 200, 387, 156, 313, 395, 16, 17, 18, 179,
	180, 223, 38, 157, -168, -197, -283, -283, -283, -283,
	-283, 243, -236, -278, 407, -137, 409, 409, -137, -283,
	-229, 409, -343, 7, -137, -292, 407, -301, -283, 411,
	409, 5, 409, 5, -380, 381, 136, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 256, -340, 375,
	-340, -340, -327, 409, -327, 409, 409, -328, 409, 409,
	409, -327, 409, 409, 409, 382, 382, 388, 409, 409,
	-271, -272, -271, 347, -167, 414, -378, -214, 409, -232,
	-317, -283, 402, -232, -232, 233, -229, -283, 79, -247,
	184, 216, 140, 197, 283, 166, -343, -71, -280, 415,
	409, -309, 388, -309, -137, -314, 409, -313, 402, -186,
	409, 411, -147, 274, -146, 22, 25, 107, 369, 118,
	-204, 248, 113, 319, 340, 115, 292, 274, 113, -241,
	-243, 32, 90, 218, 245, 49, 152, 209, 210, 321,
	113, 274, 380, 113, 115, 274, -149, 319, 340, 115,
	292, 274, -148, -204, 113, 415, 115, 228, -352, -190,
	414, -347, 402, 139, -220, -347, -186, -191, -162, -192,
	409, -214, 221, 233, -242, -241, 221, -158, -375, 380,
	221, 221, -214, -173, 154, 2, -163, -162, -173, 154,
	-375, 221, -316, -194, -186, -194, 309, -180, 32, -151,
	414, 51, 279, 113, -151, 113, -151, 113, -151, 414,
	113, -151, 113, 414, 113, 113, -229, 410, 414, -394,
	-220, -166, 78, 409, 32, -294, -323, -324, -325, -334,
	-329, -332, 42, 48, 47, 341, 214, 301, 302, 303,
	304, 316, 367, 158, 40, 231, 232, 169, 4, 41,
	-336, 176, 168, 170, 171, 172, 173, 174, 315, 39,
	264, 132, 133, 131, 106, 97, 96, 227, 44, 43,
	94, 344, 345, 346, 185, 186, 55, 54, 372, 326,
	-353, -394, -220, 136, -171, 2, -186, 2, 69, 70,
	386, -346, -229, 32, -272, 2, -403, 414, 199, -199,
	206, 220, 148, 234, 384, -351, 5, 4, -293, -306,
	98, 203, -332, 8, 401, -341, 7, 400, -345, -344,
	-345, 82, 411, -347, 334, -346, 24, 311, 2, -186,
	284, -394, -396, 136, -186, -186, -186, -186, -186, 136,
	2, 349, 2, 136, -162, -162, 199, -186, 2, -188,
	2, -187, 2, 334, 163, 334, -151, 414, -238, -262,
	-261, -264, -283, 24, -267, 130, 217, -283, -285, -136,
	-136, -136, -218, -311, -283, 258, 163, -346, -338, -323,
	-337, 269, 270, 268, 272, 271, -323, -185, -347, 344,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, 200, 156, 313, 38, 157,
	-283, 347, -283, -283, -283, -283, 213, 221, 224, 353,
	122, 360, 104, 228, -405, 331, 34, -290, -137, 409,
	-305, 29, 318, 24, -297, 288, 409, -278, -283, -279,
	-230, -229, 410, 414, -230, -296, -292, -304, -303, 377,
	-347, 402, 410, -229, 373, 24, 104, 402, 2, 7,
	-254, 385, 212, 95, 150, 211, -255, 297, -381, 129,
	145, 409, 410, 2, 410, 2, 410, 2, 410, 2,
	-283, -283, -283, -283, -283, -229, -343, -248, 2, -339,
	-229, 4, 385, 212, 95, 150, 211, 297, -248, 2,
	7, -229, 2, -229, 2, -249, 2, -283, -229, -250,
	-284, -285, 400, 401, 395, 409, 288, -251, 2, -283,
	-230, 344, 344, 344, -283, 45, 195, 348, -252, -283,
	139, -229, -167, -379, 32, -229, -224, 414, 139, 32,
	4, -224, -224, 409, 410, 414, 184, 184, -313, -247,
	184, -245, 241, -245, -245, -392, 409, 408, -309, -172,
	407, 416, -347, -230, 2, -308, -307, 32, -180, 239,
	-308, 410, -186, -347, 414, 347, -258, 73, 62, -275,
	154, 62, -358, -174, 73, -359, -162, 57, 359, 258,
	138, -258, 73, -258, 73, 73, 309, 46, -315, 35,
	-85, 71, 139, 347, -315, -243, -323, 90, 209, 210,
	46, -342, -341, 401, -342, 46, -342, -342, -342, 380,
	-187, -315, 347, 249, -352, 71, 347, 414, 35, -85,
	71, 139, 347, -195, -172, 71, 334, -320, -319, 389,
	-162, 411, 324, 410, 411, 179, 179, 411, -200, -201,
	-162, -276, -275, -360, -361, -358, 178, 163, 359, 123,
	32, 113, -220, 113, 249, 113, 113, 32, 233, 221,
	233, 221, -154, 337, 113, -277, 378, -268, -85, 409,
	98, 32, -268, -233, -234, -318, -235, -174, 409, -180,
	-186, -228, -228, -228, -195, -196, -171, -352, -353, -353,
	410, -71, -321, 347, 380, 366, -201, -70, 25, 78,
	107, 410, 414, -223, 31, 407, -254, 409, -340, 409,
	-133, -319, 380, 139, -222, -320, -320, 136, 70, 392,
	347, 410, 350, -273, -198, 263, 317, 275, 305, 8,
	7, 7, 414, -347, -186, -221, -220, -220, 306, -71,
	136, -71, 411, -186, -195, -186, -315, -265, -341, 409,
	-266, 288, 289, 414, -145, 33, 102, 189, -186, 386,
	-283, -283, 347, -405, 331, -290, -283, 213, 224, 353,
	122, 360, 104, 228, 139, 409, -284, -284, -229, -283,
	409, -229, 408, 418, 410, -283, 408, 408, 414, -302,
	-303, 108, -283, 411, -217, 414, -216, -283, -229, -229,
	410, 410, 347, 347, 347, 347, 409, -386, 242, 409,
	409, -283, 32, 414, 414, 414, 414, 410, 410, 414,
	410, 139, 410, 410, 410, 410, 410, -256, 252, 410,
	10, 11, 400, 401, 402, 403, 134, 404, 405, 398,
	399, 397, 390, 391, 392, 68, 207, 290, 13, 14,
	15, 179, 157, -284, -284, -284, -229, 409, 410, -288,
	-289, 139, 136, 386, 386, 386, 32, -252, -252, -252,
	410, 139, -229, 409, 410, -277, -317, -226, 2, -313,
	-182, -347, -277, -277, -229, -283, -313, -313, -246, 366,
	233, 184, -313, -307, 410, -393, -343, -309, -308, -343,
	-282, -281, 137, 219, 410, -180, -214, -309, 410, 411,
	-146, -186, -174, -181, -162, 221, -275, 154, -153, 221,
	-323, -181, 409, 409, 189, 189, -174, -181, 154, -174,
	154, -181, -181, -398, 263, 229, 202, 262, 222, -147,
	274, -85, 386, 409, -188, 274, -191, -342, -342, -241,
	274, -187, -352, 380, 386, -171, -148, -85, 386, 409,
	-172, -149, 274, 386, -186, -130, 153, 228, 402, -347,
	-124, 5, 224, -124, -347, 410, 414, 163, -173, 163,
	-179, -163, -85, -186, 139, -187, -352, -352, -352, -85,
	-186, 113, -186, 113, -155, 109, -404, 392, -171, -217,
	-283, -240, -270, 281, 233, -215, -175, -174, 371, -180,
	-240, -225, 414, 139, 392, 411, -215, -151, -151, -151,
	-151, -151, -220, 23, -352, 410, -323, 407, 408, 7,
	7, 409, -343, -133, -132, 236, -131, -162, 5, -220,
	139, -40, 380, 262, 92, 334, 248, 163, -344, -344,
	-272, 357, 66, 263, -344, -396, 306, -71, -162, -266,
	-283, -311, -186, 415, -283, -283, -284, -284, 139, 409,
	-283, -294, 28, 28, 410, -230, 414, -279, -283, 410,
	-292, 110, -283, 343, -347, 402, 410, 373, -217, -217,
	-217, 5, 212, 150, 211, -255, 211, -255, -255, 7,
	-387, -177, 409, -162, 378, -216, 410, -338, -323, -283,
	-283, -283, -343, -283, -288, -283, -338, -323, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, 104, 221, 228,
	-284, 414, -230, -289, -288, -283, -283, -323, 410, 410,
	410, -229, -70, -237, 145, -320, 414, -237, -237, 410,
	-246, 409, -283, -313, 408, 410, 414, -308, 408, 414,
	417, 392, -309, -214, -307, -347, 347, 347, 113, 221,
	368, -362, -359, -283, -219, -312, -174, -374, 409, -162,
	-370, -371, -169, 409, 409, -144, 107, 309, -260, 113,
	-151, 113, -151, 384, 409, 409, 347, -258, 73, -286,
	-169, -162, -229, 347, 347, 249, -286, -286, -229, 347,
	-286, 115, -133, 139, 333, 411, -202, 162, -276, -163,
	409, -173, 409, 409, -214, -186, -242, -158, -259, 366,
	-172, 409, -172, -156, 194, -404, -350, -375, -263, -261,
	-240, -232, 222, 72, 410, 414, 411, -277, -234, -226,
	-283, 2, 410, 235, -134, 80, -134, 7, 408, 410,
	-343, 410, 414, 409, 392, 392, -220, 236, -183, -171,
	-186, -184, -195, 234, 410, -145, -172, 28, 28, -283,
	-294, 410, -283, -283, 410, -283, 408, -283, 411, 5,
	-283, 410, 410, 410, 410, -388, -162, -283, 410, 410,
	410, 414, 410, 410, 410, -289, 139, 104, 228, 409,
	-283, 410, 410, 410, -291, 147, 46, -313, -291, -291,
	-220, -280, -343, -281, -172, 407, -308, 411, -174, -181,
	-275, 113, -363, 73, -364, 60, 123, 78, 221, 224,
	359, 258, 57, 98, 267, 32, 410, 410, 414, -170,
	60, -170, -283, 409, -219, -220, 221, 98, 221, 98,
	91, 355, -174, -181, -220, -220, -186, -174, -181, 409,
	410, -188, -187, -352, 410, -172, 71, -353, 344, -347,
	-203, -204, 157, 409, -219, 409, -220, -200, 32, 409,
	141, 233, -219, 233, -157, 193, -404, -350, -154, -240,
	-269, 409, 233, -85, -175, 2, -217, 392, 91, 91,
	408, 410, -131, -132, -352, -352, -41, -42, 163, 73,
	251, -206, -205, 248, 228, -145, -283, -283, 410, 410,
	-347, 402, -217, -382, 248, 410, -283, -284, 139, 409,
	-294, 410, -383, 379, -283, -229, -383, -383, 410, -309,
	-343, -275, -181, -185, -178, -162, 123, 154, 224, 189,
	409, -284, -186, 409, 2, -274, -399, 77, 329, -312,
	-145, -185, -145, 410, -229, 410, 410, 224, 224, -283,
	-323, -151, -151, 410, 410, 347, 347, -229, 347, 347,
	386, -286, 246, -219, 410, -219, 410, 410, -85, -219,
	-186, 410, -186, -404, -350, -155, 105, -220, 73, -263,
	-290, 409, 409, 410, 414, 24, 409, 24, 409, -184,
	334, 410, -217, 46, 410, -284, -294, 410, -384, -385,
	-177, -308, 408, -364, -178, 221, -283, -164, 409, -283,
	-202, 409, -170, -217, 267, -150, 60, 409, 409, -174,
	-181, -217, 409, 409, -286, -186, 410, -274, 410, -202,
	410, -259, 409, -350, -156, 361, 222, 410, -181, -240,
	-353, -353, -42, -220, -220, -186, -389, 262, 289, -229,
	410, 414, 32, 113, 410, -365, 208, -162, 410, -203,
	-220, -145, 410, -186, -143, 366, -185, -208, -207, -205,
	-210, -209, -205, 410, -229, -229, 409, -202, -274, -203,
	-274, 409, -219, -157, 309, -277, 410, 410, 410, 410,
	410, -390, -391, 38, 356, 82, -283, -390, -385, -387,
	123, -366, -369, -368, 233, 140, 247, 314, 410, 328,
	376, 410, -214, -283, 410, 414, 371, 410, 414, 371,
	410, 410, -220, -203, -202, -202, -219, 410, -233, -133,
	-133, -391, 255, 135, 288, 255, 135, -178, -368, 233,
	-369, 233, 361, 101, -365, -207, 157, -209, 139, 410,
	-203, -203, 410, -277, 28, -367, 218, 279, 51, 309,
	-367, -366, 409, 409, -152, 51, 279, -274, -391, 21,
	224, 98, -229, -229, -202, 410, 410, -203, -203, 347,
	409, -229, 410, -203,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	175, 177, 0, 0, 0, 188, 190, 192, 193, -2,
	0, 0, 0, 219, 220, 222, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 361, 362, 0,
	815, -2, 0, 340, 342, 351, 353, 355, 357, 358,
	0, 420, 422, 424, 426, 428, 430, 432, 434, 436,
	438, 440, 442, 444, 446, 448, 450, 452, 454, 456,
	458, 460, 461, 463, 465, 467, -2, 727, 729, 731,
	733, -2, 60, 62, 64, 66, 68, 70, 85, 196,
	198, 200, 202, 205, 207, 852, 225, 227, 229, 231,
	233, -2, 864, 0, 0, 0, -2, 0, -2, -2,
	-2, 745, 71, 72, 73, 74, 75, 76, 91, 92,
	93, 94, 95, 96, 78, 80, 81, 87, 88, 90,
	0, 0, 828, 830, 832, 834, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 44, 50, 52, 54, 58,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 329, 0, 1470, 1353, 1357, 1411, 1360, 1414, 1415,
	1416, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 176, 178, 179,
	0, 0, 631, 1398, 1411, 1470, 0, 189, 191, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	690, 316, 1553, 318, 320, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 218, 221, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 315, 313, 1393, 258, 259,
	0, 298, 299, 300, 301, 302, 303, 305, 262, 264,
	266, 267, 269, 271, 273, 275, 277, 279, 281, 283,
	284, 286, 288, 289, 291, 293, 294, 296, 691, 0,
	0, 0, 0, 0, 333, 324, 332, 334, 336, 337,
	338, 339, 0, 158, 0, 564, 311, 309, 0, 154,
	0, 724, 0, 333, 1438, 328, 725, 726, 0, 0,
	721, 722, 1581, 755, 341, 343, 352, 354, 356, 359,
	-2, -2, 1673, -2, 382, -2, 390, 1676, 1583, 393,
	0, 395, -2, 398, 421, 423, 425, 427, 429, 431,
	433, 435, 437, 439, 441, 443, 445, 447, 449, 451,
	453, 455, 457, 459, 462, 464, 466, 468, 469, 0,
	0, 0, 0, 0, 473, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 472, 474,
	475, 476, 0, 520, 728, 730, 732, 0, 672, 854,
	61, 63, 65, 67, 69, 197, 199, 201, 203, 206,
	208, -2, 826, 827, 226, 228, 230, 232, 234, -2,
	0, 858, 858, 858, 0, 0, 827, 825, 0, 344,
	0, 346, 0, 473, 349, 350, 402, 403, 1058, 0,
	0, 0, 0, 0, 0, 1136, -2, -2, 1168, 1170,
	1654, 1673, 0, 1172, 1173, 0, 1175, 1177, 1178, 0,
	1181, 1182, 1336, 1405, 1400, 1365, 1366, 1367, 1368, 0,
	0, 1371, 0, 1373, 1374, 1375, 1238, 1192, -2, -2,
	-2, 1409, 974, 975, 976, 977, 978, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1682, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 0, 1643, 1660, 1666, 1661, 1651, 1210,
	-2, -2, 1477, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1655, 1656, -2, 1658, -2, -2, 1665, -2, 1669, 1670,
	-2, -2, 1675, -2, -2, 1678, 1679, -2, 1425, 1027,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1695, 1696, 1697, 1698, 1699, 1700, 757, 735, 748, 757,
	737, 738, 739, 740, 741, 746, 747, 750, 0, 742,
	743, 744, 844, 1559, 847, 631, 845, 829, 831, 0,
	833, 0, 0, 0, 838, 861, 859, 0, 895, 842,
	843, 853, 910, 0, 926, 926, 917, 0, 948, 0,
	1410, 0, 0, 0, 0, -2, 1411, 1682, 1693, 1694,
	2, 77, 0, 1660, 948, 79, 0, 1660, 82, 0,
	1660, 0, -2, 86, 0, 1660, 159, 160, 1421, 1422,
	1426, 1427, 1428, 1429, 89, 0, 1389, 97, 0, 1660,
	1356, 0, 1386, 1430, 1431, 1432, 1433, 1434, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 0, 1383, 0, 0, 330, 331, 1361,
	0, 180, 181, 182, 183, 0, 0, 0, 0, 0,
	204, 631, 1660, 0, 210, 1394, 655, 1660, 653, 1397,
	-2, 1660, 675, 678, 1660, 680, 631, 682, 1396, -2,
	1418, 851, 1660, 771, 317, 319, 0, 212, 0, 784,
	0, 786, 0, 805, 954, 143, 1660, 237, 256, 143,
	1660, 240, 143, 1660, 243, 143, 1660, 246, 1351, 143,
	1660, 249, 250, 1660, 252, 161, 253, 1660, 255, 312,
	0, 0, -2, 306, 1399, -2, 304, 263, 265, 268,
	270, 272, 274, 276, 278, 280, 282, 285, 287, 290,
	292, 295, 297, -2, 0, 0, 0, 0, 563, 0,
	0, 0, 723, 0, 0, 0, 363, 0, 0, 0,
	0, 754, 360, 0, 379, 0, 381, 1650, -2, -2,
	385, 758, 762, 763, 764, 0, 0, 0, 0, 392,
	0, 0, 0, 396, 399, 0, 470, 471, 0, 480,
	481, 482, 483, 484, 0, 487, 509, 524, 0, 0,
	491, 493, 0, 562, 496, 0, 498, 0, 500, 0,
	502, 0, 504, 0, 506, 508, 510, 525, 512, 0,
	0, 0, 523, 0, 529, 0, 532, 533, 534, 0,
	536, 537, 538, 0, 0, 0, 546, 548, 0, 0,
	477, 478, 143, 952, -2, 0, 821, 873, 874, 0,
	0, 0, 0, 856, 857, 0, 0, 0, 817, 818,
	345, 0, 348, 0, 0, 0, 0, 1271, 1272, 1273,
	1274, 1275, 1276, 1279, 1280, 1277, 1278, 1281, 1282, 0,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 1285, 1286, 0,
	0, 1288, 0, 1290, 0, 0, 0, 0, 0, 0,
	1115, 1117, 1344, 0, 0, 1287, 1063, 1064, 1065, 1100,
	1101, 0, 1169, 1341, 1340, 1171, 0, 1293, -2, 1294,
	0, 0, 1174, 1380, 1179, 1180, 1293, 0, 1335, 0,
	0, 1370, 0, 1055, 1240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 1025, 1032,
	1029, 1028, 1013, 0, 1012, 0, 0, 1010, 0, 0,
	0, 1014, 0, 1316, -2, 0, 0, 0, 0, 0,
	734, -2, 736, 0, 752, 0, 846, 0, 0, 899,
	1345, 1349, 1350, 899, 899, 0, 0, 1294, 0, 0,
	0, 0, 945, 945, 945, 943, 920, 0, 926, 0,
	-2, 936, 0, 936, -2, 917, 0, 0, 949, 950,
	0, 0, 98, 718, 115, 0, 718, 718, 0, 0,
	133, 0, 0, 0, 0, 0, 111, 0, 0, 83,
	656, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	113, 0, 136, 138, 0, 0, 0, 0, 939, 1354,
	0, 1412, 1359, 0, 0, 1412, 0, 0, 1400, 1401,
	570, 0, 0, 0, 651, 654, 0, 673, 0, 850,
	0, 0, 0, 0, 1660, 687, 1385, 1417, 0, 1660,
	773, 0, 958, 0, 787, 0, 0, 955, 0, 235,
	0, 141, 142, 0, 238, 0, 241, 0, 244, 0,
	0, 247, 0, 0, 0, 0, 0, 853, 0, 0,
	322, 335, 0, 0, 853, 0, 1296, 966, 969, 970,
	971, 1055, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 1033,
	1027, 1041, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1023, 0, 998, 998, 998, 1015, 1016,
	1034, 1035, 1037, 1039, 967, 968, 1033, 1033, 1030, 1031,
	173, 0, 326, 0, 939, 365, 939, 367, 0, 554,
	0, 0, 0, 0, -2, 387, 0, 760, 0, 765,
	411, 412, 413, 767, 768, 391, 414, 415, 416, 417,
	418, 419, 0, 648, 0, 650, 1376, 0, 388, 404,
	389, 394, 0, 400, 0, 485, 486, 488, 489, 490,
	1364, 559, 495, 0, 497, 499, 501, 503, 505, 853,
	514, 0, 516, 853, 527, 530, 535, 539, 540, 541,
	542, 543, 544, 0, 0, 0, 671, 0, 824, 871,
	872, 877, 881, 882, 885, 888, 889, 879, 1058, 839,
	840, 841, 865, 866, 701, 0, 0, 347, 1059, 962,
	963, 1017, 1018, 1019, 1020, 1021, 1060, 1061, 1382, 0,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	-2, -2, -2, -2, -2, -2, -2, -2, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, -2,
	-2, -2, 1098, 1099, -2, 1289, 1291, 0, 1344, 0,
	-2, 0, -2, -2, -2, -2, 1112, 0, 1114, 1119,
	1121, 1123, 0, 0, 0, 0, 1343, 1133, 1327, 0,
	0, 1268, 1269, 1270, 1118, 0, 0, 1342, 1339, 0,
	0, 1292, 1176, 0, 0, 0, 1300, 1334, 1330, 0,
	1402, 1408, 1183, 864, 0, 0, 0, 0, 1190, 0,
	1381, 1042, 1043, 1044, 1045, 1046, 1047, 1056, 1248, 0,
	0, 0, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	0, 0, 0, 0, 0, 0, 0, 0, 1220, 0,
	1303, -2, -2, -2, -2, -2, -2, -2, 0, 1222,
	0, 0, 1234, 0, 1236, 0, 1224, 1294, 1313, 0,
	0, 1139, 0, 0, 0, 0, 1673, 0, 1227, 1294,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	0, 1326, 751, 848, 0, 0, 958, 0, 0, 0,
	1348, 958, 958, 0, 894, 0, 0, 0, 0, 0,
	0, 940, 944, 941, 942, 0, 0, 926, 936, 907,
	0, 0, 1384, 0, 914, 915, 935, 0, 631, 925,
	916, -2, 0, -2, 0, 0, 0, 0, 717, 117,
	1660, 0, 145, 0, 0, 621, 1390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 657, 658, 660, 666, 668,
	0, 662, 1379, 0, 663, 0, 665, 667, 669, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 1355, 0, 0, 164, 938, 0,
	1362, 0, 174, 630, 0, 0, 0, 0, 0, 569,
	-2, 571, 573, 574, 575, 576, 1509, 1418, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 775, 781, 0, 864, 0, 803, 789, 0,
	0, 0, 803, 807, 808, 810, 811, 0, 0, 956,
	257, 143, 143, 143, 1352, 143, 143, 162, 251, 254,
	314, 260, 307, 0, 0, 0, 0, 308, 0, 0,
	0, 310, 0, 959, 961, 0, 972, 0, 1025, 0,
	152, 173, 0, 0, 0, 364, 369, 0, 555, 0,
	0, 380, 0, 759, 766, 0, 408, 0, 410, 649,
	1378, 1377, 0, 401, 479, 562, 1363, 561, 513, 517,
	853, 519, 0, 556, 557, 558, 953, 0, 883, 0,
	880, 886, 887, 0, 868, 699, 700, 0, 0, 0,
	-2, -2, 0, 0, 0, 1134, -2, 1113, 1116, 1120,
	1122, 1124, 0, 0, 0, 0, 0, 0, 0, 1135,
	1293, 0, 1337, 1340, -2, 1295, 1298, 1299, 0, 0,
	1331, 0, 0, 0, 0, 0, 863, 864, 864, 864,
	1189, 0, 0, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1209, 996, 0,
	1219, 0, 1221, 1022, 1233, 1235, 1223, 0, 0, 1225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 1143, 1144, 0, 1293, 1226, 1319,
	1320, 0, 0, 1036, 1038, 1040, 0, 0, 0, 0,
	1232, 0, 1325, 853, 896, 891, 1346, 939, 898, 900,
	1347, 1387, 891, 891, 0, 1295, 928, 0, 930, 0,
	0, 0, 932, 0, 921, 0, 923, 936, 912, 0,
	0, 905, 0, 904, 926, 631, 934, 0, 951, 0,
	116, 705, 0, 0, 1388, 0, 119, 1660, 127, 0,
	598, 0, 0, 0, 0, 0, 720, 128, 1660, 143,
	1660, 143, 129, 132, 0, 135, 0, 0, 589, 99,
	718, 102, 0, 0, 711, 0, 661, 664, 670, 84,
	0, 713, 703, 0, 0, 702, 137, 103, 0, 0,
	715, 101, 0, 0, 0, 173, 0, 0, 1358, 1413,
	184, 186, 187, 185, 1402, 578, 0, 1418, 0, 1418,
	0, 1392, 567, 631, 0, 655, 676, -2, 679, 681,
	689, 0, 0, 0, 777, 781, 0, 780, 851, 876,
	957, 782, 803, 0, 0, 0, 792, 794, 791, 788,
	785, 958, 0, 0, 0, 0, 0, 236, 239, 242,
	245, 248, 321, 0, 0, 0, 1297, 0, 964, 0,
	0, 0, 0, 153, 171, 1541, 169, 166, 168, 325,
	0, 366, 0, 0, 0, 0, 0, 0, 377, 378,
	-2, 406, 407, 409, 405, 494, 515, 518, 526, 0,
	0, 867, 701, 0, 1062, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1328, 0, 0, 0, 1339, -2,
	1301, 1329, 1333, 0, 1403, 1407, 1184, 0, 0, 0,
	0, 1372, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 0,
	1246, 1247, 1251, 1395, 0, 0, 1195, 0, 0, 0,
	0, 0, 0, 1302, 1312, 1314, 1140, 1141, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, -2, -2,
	-2, 1158, 1159, 1160, -2, -2, -2, 0, 0, 0,
	1315, 0, 0, 1317, 1318, 1322, 1323, 0, 1229, 1230,
	1231, 1324, 0, 893, 0, 897, 0, 893, 893, 860,
	929, 0, 947, 931, 910, 922, 0, 919, 908, 0,
	909, 0, 936, 933, 918, -2, 0, 0, 0, 0,
	144, 596, 620, 0, 0, 692, 698, 698, 0, 1390,
	1193, 1194, 0, 0, 0, 121, 0, 0, 0, 0,
	125, 0, 131, 134, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 107, 110, 0, 0,
	106, 0, 150, 0, 0, 0, 586, 0, 572, 0,
	0, 0, 0, 570, 0, 209, 652, 674, 0, 0,
	0, 0, 0, 779, 781, 0, 772, 773, 803, 875,
	783, 801, 802, 800, 0, 0, 0, 864, 809, 806,
	812, 813, 0, 323, 0, 155, 0, 0, 965, 973,
	0, 1026, 0, 0, 0, 0, 327, 0, 549, 550,
	584, 0, 553, 878, 884, 869, 701, 0, 0, -2,
	0, 1127, -2, -2, 1264, 1295, 1338, 1332, 0, 1369,
	864, 1185, 1187, 1188, 1057, 1253, 1250, 0, 1237, 1204,
	1205, 0, 1207, 1208, 997, 1311, 0, 0, 0, 0,
	1295, 1266, 1228, 849, 1242, 0, 0, 901, 1242, 1242,
	0, 926, 924, 906, 902, 0, 913, 0, 707, 709,
	118, 0, 597, 0, 600, 0, 0, 0, 0, 607,
	608, 0, 0, 0, 0, 0, 622, 629, 0, 701,
	0, 701, 0, 0, 0, 0, 0, 140, 0, 0,
	719, 0, 143, 143, 0, 0, 706, 0, 0, 0,
	0, 712, 714, 704, 0, 716, 0, 163, 0, 1403,
	565, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 0, 0, 0, 769, 781, 0, 774, 775, 211,
	0, 0, 0, 790, 793, 795, 876, 0, 0, 0,
	960, 1024, 170, 0, 165, 167, 368, 370, 0, 0,
	376, 551, 583, 0, 0, 870, -2, -2, 1128, 1265,
	1404, 1406, 0, 864, 0, 1239, 0, -2, 0, 0,
	0, 1267, 835, 0, 892, 890, 836, 837, 946, 936,
	0, 120, 0, 601, 602, 1391, 604, 0, 606, 609,
	0, 611, 1420, 0, 615, 578, 0, 626, 627, 693,
	694, 697, 695, 698, 864, 624, 0, 122, 123, 139,
	147, 124, 130, 0, 0, 0, 0, 864, 0, 0,
	0, 937, 0, 0, 629, 0, 619, 578, 568, 0,
	689, 685, 0, 0, 776, 777, 0, 0, 0, 803,
	814, 0, 0, 172, 0, 372, 0, 374, 0, 582,
	0, 1186, 1256, 0, 1206, -2, 0, 1166, 1241, 1243,
	0, 911, 903, 599, 603, 0, 0, 635, 0, 0,
	586, 0, 701, 0, 0, 149, 0, 0, 0, 708,
	710, 0, 0, 0, 109, 0, 618, 578, 629, 586,
	629, 0, 0, 778, 779, 0, 797, 958, 799, 804,
	0, 0, 371, 0, 0, 552, 0, 0, 0, 1252,
	1167, 0, 0, 0, 610, 640, 0, 0, 0, 623,
	0, 696, 1184, 631, 126, 0, 146, 0, 590, 0,
	0, 593, 0, 0, 0, 0, 0, 586, 578, 566,
	578, 0, 0, 770, 0, 798, 173, 173, 373, 375,
	1249, 1254, 1257, -2, 1626, 1467, 0, 1255, 1244, 1245,
	0, 612, 636, 637, 0, 632, 633, 634, 1419, 613,
	614, 628, 635, 148, 587, 0, 0, 588, 0, 0,
	112, 114, 0, 616, 586, 586, 0, 686, 958, 156,
	157, 0, 1259, 1260, 1261, 1262, 1263, 605, 638, 0,
	639, 0, 0, 0, 640, 591, 0, 594, 0, 581,
	617, 683, 629, 796, 0, 641, 0, 644, 645, 0,
	642, 625, 0, 0, 577, 579, 580, 578, 1258, 643,
	646, 647, 0, 0, 586, 586, 0, 684, 592, 0,
	0, 0, 586, 595,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 398, 3, 404, 399, 3,
	409, 410, 402, 400, 414, 401, 411, 403, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 418, 413,
	390, 392, 391, 394, 415, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 407, 3, 408, 405, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 416, 397, 417, 395,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 393, 57733, 396, 57734, 406,
	57735, 412, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1228
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1234
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1240
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1249
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1258
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1267
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1279
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1350
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1373
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1479
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			return unimplemented(sqllex, "alter using")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.str = "CSV"
		}
	case 156:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.str = ""
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "CREATE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "DELETE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			return helpWith(sqllex, "DROP")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "DELETE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return helpWith(sqllex, "INSERT")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "RESET")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "RESET")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "USE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{ /* SKIP DOC */
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "USE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex, "set local")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			return unimplemented(sqllex, "set from current")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2442
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = tree.Low
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = tree.Normal
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = tree.High
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			return helpWith(sqllex, "SHOW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = "client_encoding"
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.str = "timezone"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2683
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &tree.ShowRoleGrants{Roles: sqlDollar[5].union.nameList(), Grantees: sqlDollar[6].union.nameList()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &tree.ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2811
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = true
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = false
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2888
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2906
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2928
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2939
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2949
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2989
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3012
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3016
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 595:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3378
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			return unimplemented(sqllex, "match full")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			return unimplemented(sqllex, "match partial")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			return unimplemented(sqllex, "match simple")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3517
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 652:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3616
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3635
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = nil
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3783
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = true
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = false
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = true
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = false
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3825
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = tree.Descending
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3880
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3882
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = true
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = false
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3926
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4007
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4018
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.str = ""
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4098
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.str = ""
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.str = ""
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4206
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			return helpWith(sqllex, "INSERT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4320
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 804:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4373
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			return helpWith(sqllex, "SELECT")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			return helpWith(sqllex, "VALUES")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			return helpWith(sqllex, "TABLE")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			return helpWith(sqllex, "SELECT")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			return helpWith(sqllex, "TABLE")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4655
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4678
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4685
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4689
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = true
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = false
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = false
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = true
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4719
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4766
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4790
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4905
		{
			return helpWith(sqllex, "VALUES")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4907
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4944
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = nil
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = true
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = false
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5196
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5270
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5284
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5292
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = nil
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5586
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5639
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = tree.Year
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = tree.Month
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = tree.Day
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = tree.Month
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = nil
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = tree.Second
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5742
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5777
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6071
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6282
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6305
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6332
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6333
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6346
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6357
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6373
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6374
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6378
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6428
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6446
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6451
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6453
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6456
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6461
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6466
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6471
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6476
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6482
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6485
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6486
		{
			return unimplemented(sqllex, "treat")
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6488
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6507
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6512
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6517
		{
			return unimplemented(sqllex, "within group")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6518
		{
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6522
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6533
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6537
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6553
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6561
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6565
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6569
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6595
		{
			sqlVAL.str = ""
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6601
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6605
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6615
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6616
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6617
		{
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6620
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6621
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6627
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6628
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6629
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6630
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6631
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6642
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6646
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6652
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6658
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6664
		{
			sqlVAL.union.val = tree.Any
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6668
		{
			sqlVAL.union.val = tree.Some
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6672
		{
			sqlVAL.union.val = tree.All
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6677
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6678
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6679
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6680
		{
			sqlVAL.union.val = tree.Div
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6681
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6682
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6683
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6684
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6685
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6686
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6687
		{
			sqlVAL.union.val = tree.LT
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6688
		{
			sqlVAL.union.val = tree.GT
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6689
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6690
		{
			sqlVAL.union.val = tree.LE
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6691
		{
			sqlVAL.union.val = tree.GE
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6692
		{
			sqlVAL.union.val = tree.NE
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6696
		{
			sqlVAL.union.val = tree.Like
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6697
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6698
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6699
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6711
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6717
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6721
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6727
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6737
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6741
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6747
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6761
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6783
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6787
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6791
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6804
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6808
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6825
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6829
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6833
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6837
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6841
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6853
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6859
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6863
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6867
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6873
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6877
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6888
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6905
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6911
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6915
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6922
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6928
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6932
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6939
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6945
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6954
		{
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6955
		{
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6959
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6969
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6978
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6982
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6986
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6994
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7004
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7014
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7021
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7043
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7047
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7051
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7057
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7067
		{
			sqlVAL.union.val = sqlDollar[1].union.nameList()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7071
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7078
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7082
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7086
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7090
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7093
		{
			return unimplemented(sqllex, "func const")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7095
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7099
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7102
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7104
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7108
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7112
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7119
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7123
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7132
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7143
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7153
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7249
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7256
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7260
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7264
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7278
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7282
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7286
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7299
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7311
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7315
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7319
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7333
		{
			sqlVAL.str = ""
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7339
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7343
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
