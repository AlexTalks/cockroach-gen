// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:601
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9801

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1071,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 901,
	199, 901,
	214, 251,
	296, 251,
	304, 735,
	331, 251,
	340, 735,
	379, 735,
	403, 251,
	427, 735,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1071,
	188, 1071,
	413, 1071,
	414, 1071,
	-2, 0,
	-1, 87,
	122, 1045,
	138, 1045,
	196, 1045,
	226, 1045,
	260, 1045,
	270, 1045,
	408, 1045,
	-2, 1023,
	-1, 118,
	128, 658,
	213, 658,
	298, 638,
	349, 638,
	396, 658,
	-2, 0,
	-1, 119,
	4, 1073,
	21, 1073,
	22, 1073,
	23, 1073,
	24, 1073,
	25, 1073,
	27, 1073,
	33, 1073,
	38, 1073,
	39, 1073,
	40, 1073,
	41, 1073,
	42, 1073,
	43, 1073,
	44, 1073,
	45, 1073,
	46, 1073,
	47, 1073,
	48, 1073,
	49, 1073,
	51, 1073,
	52, 1073,
	53, 1073,
	54, 1073,
	55, 1073,
	56, 1073,
	59, 1073,
	60, 1073,
	61, 1073,
	62, 1073,
	64, 1073,
	65, 1073,
	69, 1073,
	70, 1073,
	71, 1073,
	72, 1073,
	73, 1073,
	74, 1073,
	76, 1073,
	77, 1073,
	78, 1073,
	79, 1073,
	81, 1073,
	83, 1073,
	84, 1073,
	85, 1073,
	88, 1073,
	89, 1073,
	97, 1073,
	98, 1073,
	99, 1073,
	100, 1073,
	101, 1073,
	102, 1073,
	103, 1073,
	104, 1073,
	106, 1073,
	108, 1073,
	109, 1073,
	111, 1073,
	114, 1073,
	115, 1073,
	116, 1073,
	118, 1073,
	120, 1073,
	121, 1073,
	123, 1073,
	124, 1073,
	125, 1073,
	126, 1073,
	127, 1073,
	128, 1073,
	129, 1073,
	130, 1073,
	131, 1073,
	132, 1073,
	133, 1073,
	134, 1073,
	135, 1073,
	137, 1073,
	143, 1073,
	144, 1073,
	145, 1073,
	146, 1073,
	147, 1073,
	148, 1073,
	150, 1073,
	152, 1073,
	156, 1073,
	157, 1073,
	159, 1073,
	160, 1073,
	162, 1073,
	163, 1073,
	165, 1073,
	166, 1073,
	167, 1073,
	168, 1073,
	169, 1073,
	170, 1073,
	171, 1073,
	172, 1073,
	174, 1073,
	175, 1073,
	177, 1073,
	178, 1073,
	179, 1073,
	182, 1073,
	183, 1073,
	184, 1073,
	185, 1073,
	188, 1073,
	189, 1073,
	190, 1073,
	191, 1073,
	192, 1073,
	193, 1073,
	194, 1073,
	195, 1073,
	197, 1073,
	199, 1073,
	201, 1073,
	203, 1073,
	204, 1073,
	205, 1073,
	207, 1073,
	208, 1073,
	211, 1073,
	212, 1073,
	213, 1073,
	214, 1073,
	215, 1073,
	217, 1073,
	218, 1073,
	220, 1073,
	221, 1073,
	223, 1073,
	224, 1073,
	227, 1073,
	228, 1073,
	231, 1073,
	232, 1073,
	233, 1073,
	235, 1073,
	236, 1073,
	237, 1073,
	238, 1073,
	239, 1073,
	240, 1073,
	241, 1073,
	242, 1073,
	243, 1073,
	244, 1073,
	246, 1073,
	247, 1073,
	248, 1073,
	249, 1073,
	251, 1073,
	253, 1073,
	255, 1073,
	256, 1073,
	257, 1073,
	258, 1073,
	259, 1073,
	261, 1073,
	262, 1073,
	263, 1073,
	265, 1073,
	266, 1073,
	267, 1073,
	268, 1073,
	271, 1073,
	272, 1073,
	273, 1073,
	275, 1073,
	277, 1073,
	278, 1073,
	279, 1073,
	280, 1073,
	281, 1073,
	282, 1073,
	283, 1073,
	284, 1073,
	285, 1073,
	286, 1073,
	288, 1073,
	289, 1073,
	290, 1073,
	291, 1073,
	292, 1073,
	293, 1073,
	295, 1073,
	297, 1073,
	298, 1073,
	299, 1073,
	300, 1073,
	301, 1073,
	302, 1073,
	303, 1073,
	304, 1073,
	305, 1073,
	307, 1073,
	308, 1073,
	309, 1073,
	310, 1073,
	311, 1073,
	313, 1073,
	314, 1073,
	315, 1073,
	316, 1073,
	317, 1073,
	318, 1073,
	319, 1073,
	320, 1073,
	322, 1073,
	324, 1073,
	325, 1073,
	326, 1073,
	327, 1073,
	328, 1073,
	329, 1073,
	331, 1073,
	332, 1073,
	333, 1073,
	334, 1073,
	335, 1073,
	336, 1073,
	337, 1073,
	338, 1073,
	340, 1073,
	341, 1073,
	342, 1073,
	343, 1073,
	344, 1073,
	345, 1073,
	346, 1073,
	347, 1073,
	348, 1073,
	349, 1073,
	351, 1073,
	352, 1073,
	353, 1073,
	354, 1073,
	355, 1073,
	357, 1073,
	358, 1073,
	359, 1073,
	360, 1073,
	361, 1073,
	363, 1073,
	364, 1073,
	365, 1073,
	366, 1073,
	367, 1073,
	368, 1073,
	369, 1073,
	370, 1073,
	371, 1073,
	372, 1073,
	373, 1073,
	374, 1073,
	376, 1073,
	377, 1073,
	378, 1073,
	380, 1073,
	381, 1073,
	382, 1073,
	383, 1073,
	384, 1073,
	385, 1073,
	386, 1073,
	388, 1073,
	389, 1073,
	390, 1073,
	391, 1073,
	392, 1073,
	394, 1073,
	396, 1073,
	397, 1073,
	398, 1073,
	399, 1073,
	400, 1073,
	402, 1073,
	403, 1073,
	404, 1073,
	406, 1073,
	407, 1073,
	410, 1073,
	411, 1073,
	412, 1073,
	413, 1073,
	414, 1073,
	415, 1073,
	417, 1073,
	419, 1073,
	420, 1073,
	421, 1073,
	422, 1073,
	423, 1073,
	424, 1073,
	425, 1073,
	427, 1073,
	428, 1073,
	429, 1073,
	434, 1073,
	435, 1073,
	436, 1073,
	437, 1073,
	438, 1073,
	439, 1073,
	-2, 0,
	-1, 120,
	1, 954,
	203, 954,
	295, 954,
	302, 954,
	442, 954,
	465, 954,
	-2, 0,
	-1, 122,
	1, 954,
	465, 954,
	-2, 0,
	-1, 123,
	1, 954,
	465, 954,
	-2, 0,
	-1, 124,
	1, 958,
	465, 958,
	-2, 0,
	-1, 149,
	122, 1044,
	138, 1044,
	196, 1044,
	226, 1044,
	260, 1044,
	270, 1044,
	408, 1044,
	-2, 1032,
	-1, 182,
	4, 1080,
	5, 1080,
	6, 1080,
	7, 1080,
	8, 1080,
	9, 1080,
	10, 1080,
	21, 1080,
	22, 1080,
	23, 1080,
	24, 1080,
	25, 1080,
	27, 1080,
	33, 1080,
	34, 1080,
	38, 1080,
	39, 1080,
	40, 1080,
	41, 1080,
	42, 1080,
	43, 1080,
	44, 1080,
	45, 1080,
	46, 1080,
	47, 1080,
	48, 1080,
	49, 1080,
	51, 1080,
	52, 1080,
	53, 1080,
	54, 1080,
	55, 1080,
	56, 1080,
	57, 1080,
	58, 1080,
	59, 1080,
	60, 1080,
	61, 1080,
	62, 1080,
	64, 1080,
	65, 1080,
	67, 1080,
	69, 1080,
	70, 1080,
	71, 1080,
	72, 1080,
	73, 1080,
	74, 1080,
	76, 1080,
	77, 1080,
	78, 1080,
	79, 1080,
	81, 1080,
	83, 1080,
	84, 1080,
	85, 1080,
	87, 1080,
	88, 1080,
	89, 1080,
	90, 1080,
	91, 1080,
	92, 1080,
	93, 1080,
	94, 1080,
	95, 1080,
	96, 1080,
	97, 1080,
	98, 1080,
	99, 1080,
	100, 1080,
	101, 1080,
	102, 1080,
	103, 1080,
	104, 1080,
	105, 1080,
	106, 1080,
	108, 1080,
	109, 1080,
	111, 1080,
	114, 1080,
	115, 1080,
	116, 1080,
	118, 1080,
	120, 1080,
	121, 1080,
	123, 1080,
	124, 1080,
	125, 1080,
	126, 1080,
	127, 1080,
	128, 1080,
	129, 1080,
	130, 1080,
	131, 1080,
	132, 1080,
	133, 1080,
	134, 1080,
	135, 1080,
	136, 1080,
	137, 1080,
	143, 1080,
	144, 1080,
	145, 1080,
	146, 1080,
	147, 1080,
	148, 1080,
	150, 1080,
	152, 1080,
	155, 1080,
	156, 1080,
	157, 1080,
	159, 1080,
	160, 1080,
	162, 1080,
	163, 1080,
	165, 1080,
	166, 1080,
	167, 1080,
	168, 1080,
	169, 1080,
	170, 1080,
	171, 1080,
	172, 1080,
	173, 1080,
	174, 1080,
	175, 1080,
	177, 1080,
	178, 1080,
	179, 1080,
	182, 1080,
	183, 1080,
	184, 1080,
	185, 1080,
	187, 1080,
	188, 1080,
	189, 1080,
	190, 1080,
	191, 1080,
	192, 1080,
	193, 1080,
	194, 1080,
	195, 1080,
	197, 1080,
	199, 1080,
	200, 1080,
	201, 1080,
	202, 1080,
	203, 1080,
	204, 1080,
	205, 1080,
	206, 1080,
	207, 1080,
	208, 1080,
	211, 1080,
	212, 1080,
	213, 1080,
	214, 1080,
	215, 1080,
	217, 1080,
	218, 1080,
	220, 1080,
	221, 1080,
	222, 1080,
	223, 1080,
	224, 1080,
	225, 1080,
	227, 1080,
	228, 1080,
	231, 1080,
	232, 1080,
	233, 1080,
	235, 1080,
	236, 1080,
	237, 1080,
	238, 1080,
	239, 1080,
	240, 1080,
	241, 1080,
	242, 1080,
	243, 1080,
	244, 1080,
	245, 1080,
	246, 1080,
	247, 1080,
	248, 1080,
	249, 1080,
	250, 1080,
	251, 1080,
	252, 1080,
	253, 1080,
	254, 1080,
	255, 1080,
	256, 1080,
	257, 1080,
	258, 1080,
	259, 1080,
	261, 1080,
	262, 1080,
	263, 1080,
	266, 1080,
	267, 1080,
	268, 1080,
	271, 1080,
	272, 1080,
	273, 1080,
	274, 1080,
	275, 1080,
	276, 1080,
	277, 1080,
	278, 1080,
	279, 1080,
	280, 1080,
	281, 1080,
	282, 1080,
	283, 1080,
	284, 1080,
	285, 1080,
	286, 1080,
	288, 1080,
	289, 1080,
	290, 1080,
	291, 1080,
	292, 1080,
	293, 1080,
	295, 1080,
	297, 1080,
	298, 1080,
	299, 1080,
	300, 1080,
	301, 1080,
	302, 1080,
	303, 1080,
	304, 1080,
	305, 1080,
	307, 1080,
	308, 1080,
	309, 1080,
	310, 1080,
	311, 1080,
	313, 1080,
	314, 1080,
	315, 1080,
	316, 1080,
	317, 1080,
	318, 1080,
	319, 1080,
	320, 1080,
	322, 1080,
	323, 1080,
	324, 1080,
	325, 1080,
	326, 1080,
	327, 1080,
	328, 1080,
	329, 1080,
	331, 1080,
	332, 1080,
	333, 1080,
	334, 1080,
	335, 1080,
	336, 1080,
	337, 1080,
	338, 1080,
	340, 1080,
	341, 1080,
	342, 1080,
	343, 1080,
	344, 1080,
	345, 1080,
	346, 1080,
	347, 1080,
	348, 1080,
	349, 1080,
	350, 1080,
	351, 1080,
	352, 1080,
	353, 1080,
	354, 1080,
	355, 1080,
	356, 1080,
	357, 1080,
	358, 1080,
	359, 1080,
	360, 1080,
	361, 1080,
	363, 1080,
	364, 1080,
	365, 1080,
	366, 1080,
	367, 1080,
	368, 1080,
	369, 1080,
	370, 1080,
	371, 1080,
	372, 1080,
	373, 1080,
	374, 1080,
	376, 1080,
	377, 1080,
	378, 1080,
	380, 1080,
	381, 1080,
	382, 1080,
	383, 1080,
	384, 1080,
	385, 1080,
	386, 1080,
	388, 1080,
	389, 1080,
	390, 1080,
	391, 1080,
	392, 1080,
	394, 1080,
	396, 1080,
	397, 1080,
	398, 1080,
	399, 1080,
	400, 1080,
	401, 1080,
	402, 1080,
	403, 1080,
	404, 1080,
	406, 1080,
	407, 1080,
	409, 1080,
	410, 1080,
	411, 1080,
	412, 1080,
	413, 1080,
	414, 1080,
	415, 1080,
	416, 1080,
	417, 1080,
	419, 1080,
	420, 1080,
	421, 1080,
	422, 1080,
	423, 1080,
	424, 1080,
	425, 1080,
	427, 1080,
	428, 1080,
	429, 1080,
	434, 1080,
	435, 1080,
	436, 1080,
	437, 1080,
	438, 1080,
	439, 1080,
	440, 1080,
	446, 1080,
	453, 1080,
	454, 1080,
	455, 1080,
	462, 1080,
	466, 1080,
	-2, 0,
	-1, 560,
	154, 1757,
	393, 1757,
	445, 1757,
	464, 1757,
	-2, 0,
	-1, 561,
	154, 1836,
	393, 1836,
	445, 1836,
	464, 1836,
	-2, 0,
	-1, 562,
	154, 1746,
	393, 1746,
	445, 1746,
	464, 1746,
	-2, 0,
	-1, 564,
	154, 1928,
	393, 1928,
	445, 1928,
	464, 1928,
	-2, 0,
	-1, 566,
	154, 1958,
	393, 1958,
	445, 1958,
	464, 1958,
	-2, 0,
	-1, 573,
	154, 1847,
	393, 1847,
	445, 1847,
	464, 1847,
	-2, 508,
	-1, 590,
	464, 1704,
	467, 1704,
	-2, 709,
	-1, 591,
	464, 1706,
	467, 1706,
	-2, 710,
	-1, 592,
	464, 1705,
	467, 1705,
	-2, 711,
	-1, 593,
	467, 1651,
	-2, 712,
	-1, 636,
	427, 883,
	-2, 736,
	-1, 742,
	298, 639,
	349, 639,
	-2, 0,
	-1, 743,
	298, 638,
	349, 638,
	-2, 589,
	-1, 746,
	1, 668,
	461, 668,
	463, 668,
	465, 668,
	-2, 0,
	-1, 747,
	1, 708,
	151, 708,
	461, 708,
	463, 708,
	465, 708,
	-2, 0,
	-1, 755,
	1, 642,
	461, 642,
	463, 642,
	465, 642,
	-2, 0,
	-1, 758,
	1, 668,
	461, 668,
	463, 668,
	465, 668,
	-2, 0,
	-1, 759,
	1, 670,
	461, 670,
	463, 670,
	465, 670,
	-2, 0,
	-1, 760,
	1, 673,
	461, 673,
	463, 673,
	465, 673,
	-2, 0,
	-1, 764,
	1, 687,
	461, 687,
	463, 687,
	465, 687,
	-2, 0,
	-1, 765,
	1, 689,
	461, 689,
	463, 689,
	465, 689,
	-2, 0,
	-1, 809,
	138, 1082,
	226, 1082,
	260, 1082,
	-2, 1032,
	-1, 825,
	138, 1081,
	226, 1081,
	260, 1081,
	-2, 1032,
	-1, 849,
	464, 1703,
	-2, 516,
	-1, 878,
	462, 1695,
	-2, 1686,
	-1, 884,
	5, 1219,
	-2, 1737,
	-1, 885,
	5, 1220,
	-2, 1741,
	-1, 886,
	5, 1221,
	-2, 1740,
	-1, 887,
	5, 1222,
	-2, 1955,
	-1, 888,
	5, 1223,
	-2, 1849,
	-1, 889,
	5, 1224,
	-2, 1920,
	-1, 890,
	5, 1225,
	-2, 1922,
	-1, 891,
	5, 1226,
	-2, 1935,
	-1, 892,
	5, 1227,
	-2, 1923,
	-1, 893,
	5, 1228,
	-2, 1924,
	-1, 894,
	5, 1229,
	-2, 1736,
	-1, 895,
	5, 1230,
	-2, 1971,
	-1, 896,
	5, 1231,
	-2, 1810,
	-1, 897,
	5, 1232,
	-2, 1859,
	-1, 898,
	5, 1233,
	-2, 1861,
	-1, 899,
	5, 1234,
	-2, 1814,
	-1, 900,
	5, 1235,
	462, 1713,
	-2, 1704,
	-1, 901,
	5, 1291,
	462, 1291,
	-2, 2006,
	-1, 906,
	462, 1714,
	-2, 1705,
	-1, 908,
	5, 1239,
	-2, 2004,
	-1, 909,
	5, 1240,
	-2, 2005,
	-1, 910,
	5, 1241,
	-2, 1813,
	-1, 911,
	5, 1242,
	-2, 2017,
	-1, 912,
	5, 1243,
	-2, 1815,
	-1, 913,
	5, 1244,
	-2, 1816,
	-1, 914,
	5, 1245,
	-2, 1817,
	-1, 915,
	5, 1246,
	-2, 1986,
	-1, 916,
	5, 1247,
	-2, 2015,
	-1, 917,
	5, 1248,
	-2, 1793,
	-1, 918,
	5, 1249,
	-2, 1794,
	-1, 919,
	5, 1263,
	-2, 1998,
	-1, 921,
	5, 1238,
	-2, 1994,
	-1, 922,
	5, 1238,
	-2, 1993,
	-1, 923,
	5, 1238,
	-2, 2010,
	-1, 924,
	5, 1255,
	-2, 1988,
	-1, 925,
	5, 1256,
	-2, 1738,
	-1, 926,
	5, 1266,
	-2, 1987,
	-1, 927,
	5, 1268,
	-2, 2026,
	-1, 929,
	5, 1279,
	-2, 1767,
	-1, 930,
	5, 1290,
	-2, 2019,
	-1, 931,
	5, 1282,
	-2, 2020,
	-1, 932,
	5, 1290,
	-2, 2021,
	-1, 933,
	5, 1286,
	-2, 2022,
	-1, 934,
	5, 1205,
	-2, 1823,
	-1, 935,
	5, 1206,
	-2, 1824,
	-1, 936,
	464, 1701,
	-2, 1685,
	-1, 937,
	462, 2046,
	-2, 1702,
	-1, 957,
	5, 1274,
	-2, 1946,
	-1, 974,
	5, 1273,
	-2, 2027,
	-1, 984,
	5, 1275,
	428, 1275,
	-2, 1989,
	-1, 985,
	5, 1276,
	428, 1276,
	-2, 1990,
	-1, 1021,
	462, 1713,
	-2, 1704,
	-1, 1049,
	154, 1958,
	393, 1958,
	445, 1958,
	464, 1958,
	-2, 0,
	-1, 1052,
	1, 494,
	465, 494,
	-2, 966,
	-1, 1172,
	313, 1682,
	455, 1682,
	-2, 1681,
	-1, 1195,
	466, 1682,
	-2, 1683,
	-1, 1230,
	304, 735,
	427, 735,
	-2, 250,
	-1, 1250,
	284, 1069,
	-2, 874,
	-1, 1259,
	264, 1708,
	-2, 0,
	-1, 1323,
	1, 369,
	461, 369,
	463, 369,
	465, 369,
	-2, 1043,
	-1, 1326,
	4, 2025,
	11, 2025,
	12, 2025,
	14, 2025,
	15, 2025,
	16, 2025,
	17, 2025,
	18, 2025,
	19, 2025,
	21, 2025,
	22, 2025,
	23, 2025,
	24, 2025,
	25, 2025,
	27, 2025,
	30, 2025,
	31, 2025,
	33, 2025,
	35, 2025,
	38, 2025,
	39, 2025,
	40, 2025,
	41, 2025,
	42, 2025,
	43, 2025,
	44, 2025,
	45, 2025,
	46, 2025,
	47, 2025,
	48, 2025,
	49, 2025,
	51, 2025,
	52, 2025,
	53, 2025,
	54, 2025,
	55, 2025,
	56, 2025,
	59, 2025,
	60, 2025,
	61, 2025,
	62, 2025,
	64, 2025,
	65, 2025,
	66, 2025,
	69, 2025,
	70, 2025,
	71, 2025,
	72, 2025,
	73, 2025,
	74, 2025,
	75, 2025,
	76, 2025,
	77, 2025,
	78, 2025,
	79, 2025,
	81, 2025,
	82, 2025,
	83, 2025,
	84, 2025,
	85, 2025,
	87, 2025,
	88, 2025,
	89, 2025,
	97, 2025,
	98, 2025,
	99, 2025,
	100, 2025,
	101, 2025,
	102, 2025,
	103, 2025,
	104, 2025,
	106, 2025,
	108, 2025,
	109, 2025,
	111, 2025,
	114, 2025,
	115, 2025,
	116, 2025,
	118, 2025,
	120, 2025,
	121, 2025,
	123, 2025,
	124, 2025,
	125, 2025,
	126, 2025,
	127, 2025,
	128, 2025,
	129, 2025,
	130, 2025,
	131, 2025,
	132, 2025,
	133, 2025,
	134, 2025,
	135, 2025,
	139, 2025,
	140, 2025,
	141, 2025,
	142, 2025,
	143, 2025,
	144, 2025,
	145, 2025,
	146, 2025,
	147, 2025,
	148, 2025,
	149, 2025,
	150, 2025,
	152, 2025,
	155, 2025,
	156, 2025,
	157, 2025,
	159, 2025,
	160, 2025,
	162, 2025,
	163, 2025,
	165, 2025,
	166, 2025,
	167, 2025,
	168, 2025,
	169, 2025,
	170, 2025,
	171, 2025,
	172, 2025,
	173, 2025,
	174, 2025,
	175, 2025,
	176, 2025,
	177, 2025,
	178, 2025,
	179, 2025,
	180, 2025,
	181, 2025,
	183, 2025,
	184, 2025,
	185, 2025,
	187, 2025,
	188, 2025,
	189, 2025,
	190, 2025,
	191, 2025,
	192, 2025,
	193, 2025,
	194, 2025,
	195, 2025,
	197, 2025,
	199, 2025,
	200, 2025,
	201, 2025,
	202, 2025,
	203, 2025,
	204, 2025,
	205, 2025,
	206, 2025,
	207, 2025,
	208, 2025,
	209, 2025,
	210, 2025,
	211, 2025,
	212, 2025,
	213, 2025,
	214, 2025,
	215, 2025,
	217, 2025,
	218, 2025,
	220, 2025,
	221, 2025,
	222, 2025,
	223, 2025,
	224, 2025,
	225, 2025,
	227, 2025,
	228, 2025,
	231, 2025,
	232, 2025,
	233, 2025,
	234, 2025,
	235, 2025,
	236, 2025,
	237, 2025,
	238, 2025,
	239, 2025,
	240, 2025,
	241, 2025,
	242, 2025,
	243, 2025,
	244, 2025,
	245, 2025,
	246, 2025,
	247, 2025,
	248, 2025,
	249, 2025,
	252, 2025,
	253, 2025,
	255, 2025,
	256, 2025,
	257, 2025,
	258, 2025,
	259, 2025,
	261, 2025,
	262, 2025,
	263, 2025,
	266, 2025,
	267, 2025,
	268, 2025,
	269, 2025,
	271, 2025,
	272, 2025,
	273, 2025,
	275, 2025,
	277, 2025,
	278, 2025,
	279, 2025,
	280, 2025,
	281, 2025,
	282, 2025,
	283, 2025,
	284, 2025,
	285, 2025,
	286, 2025,
	288, 2025,
	289, 2025,
	290, 2025,
	291, 2025,
	292, 2025,
	293, 2025,
	295, 2025,
	297, 2025,
	298, 2025,
	299, 2025,
	300, 2025,
	301, 2025,
	302, 2025,
	303, 2025,
	304, 2025,
	305, 2025,
	307, 2025,
	308, 2025,
	309, 2025,
	310, 2025,
	311, 2025,
	312, 2025,
	313, 2025,
	314, 2025,
	315, 2025,
	316, 2025,
	317, 2025,
	318, 2025,
	319, 2025,
	320, 2025,
	322, 2025,
	323, 2025,
	324, 2025,
	325, 2025,
	326, 2025,
	327, 2025,
	328, 2025,
	329, 2025,
	330, 2025,
	331, 2025,
	332, 2025,
	333, 2025,
	334, 2025,
	335, 2025,
	336, 2025,
	337, 2025,
	338, 2025,
	340, 2025,
	341, 2025,
	342, 2025,
	343, 2025,
	344, 2025,
	345, 2025,
	346, 2025,
	347, 2025,
	348, 2025,
	349, 2025,
	351, 2025,
	352, 2025,
	353, 2025,
	354, 2025,
	355, 2025,
	356, 2025,
	357, 2025,
	358, 2025,
	359, 2025,
	360, 2025,
	361, 2025,
	363, 2025,
	364, 2025,
	365, 2025,
	366, 2025,
	367, 2025,
	368, 2025,
	369, 2025,
	370, 2025,
	371, 2025,
	372, 2025,
	373, 2025,
	374, 2025,
	376, 2025,
	377, 2025,
	378, 2025,
	380, 2025,
	381, 2025,
	382, 2025,
	383, 2025,
	384, 2025,
	385, 2025,
	386, 2025,
	388, 2025,
	389, 2025,
	390, 2025,
	391, 2025,
	392, 2025,
	394, 2025,
	396, 2025,
	397, 2025,
	398, 2025,
	399, 2025,
	400, 2025,
	402, 2025,
	403, 2025,
	404, 2025,
	406, 2025,
	407, 2025,
	410, 2025,
	411, 2025,
	412, 2025,
	413, 2025,
	414, 2025,
	415, 2025,
	417, 2025,
	419, 2025,
	420, 2025,
	421, 2025,
	422, 2025,
	423, 2025,
	424, 2025,
	425, 2025,
	427, 2025,
	428, 2025,
	429, 2025,
	434, 2025,
	435, 2025,
	436, 2025,
	437, 2025,
	438, 2025,
	439, 2025,
	440, 2025,
	441, 2025,
	443, 2025,
	444, 2025,
	445, 2025,
	446, 2025,
	447, 2025,
	448, 2025,
	450, 2025,
	451, 2025,
	452, 2025,
	453, 2025,
	454, 2025,
	455, 2025,
	456, 2025,
	457, 2025,
	458, 2025,
	460, 2025,
	463, 2025,
	464, 2025,
	466, 2025,
	467, 2025,
	-2, 0,
	-1, 1331,
	154, 1928,
	393, 1928,
	445, 1928,
	464, 1928,
	-2, 0,
	-1, 1360,
	298, 639,
	349, 639,
	-2, 0,
	-1, 1383,
	1, 634,
	461, 634,
	463, 634,
	465, 634,
	-2, 0,
	-1, 1384,
	1, 659,
	461, 659,
	463, 659,
	465, 659,
	-2, 0,
	-1, 1385,
	1, 641,
	461, 641,
	463, 641,
	465, 641,
	-2, 0,
	-1, 1387,
	1, 645,
	461, 645,
	463, 645,
	465, 645,
	-2, 0,
	-1, 1412,
	1, 1978,
	461, 1978,
	463, 1978,
	464, 1978,
	465, 1978,
	-2, 685,
	-1, 1413,
	1, 1925,
	461, 1925,
	463, 1925,
	464, 1925,
	465, 1925,
	-2, 686,
	-1, 1428,
	1, 961,
	465, 961,
	-2, 966,
	-1, 1433,
	138, 1081,
	226, 1081,
	260, 1081,
	-2, 1032,
	-1, 1531,
	122, 1045,
	138, 1045,
	196, 1045,
	226, 1045,
	260, 1045,
	270, 1045,
	408, 1045,
	-2, 1447,
	-1, 1584,
	463, 1585,
	-2, 0,
	-1, 1626,
	122, 1045,
	138, 1045,
	196, 1045,
	226, 1045,
	260, 1045,
	270, 1045,
	408, 1045,
	-2, 1156,
	-1, 1676,
	462, 1278,
	-2, 1266,
	-1, 1720,
	1, 496,
	465, 496,
	-2, 966,
	-1, 1918,
	1, 636,
	461, 636,
	463, 636,
	465, 636,
	-2, 0,
	-1, 1919,
	1, 661,
	461, 661,
	463, 661,
	465, 661,
	-2, 0,
	-1, 2009,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1327,
	-1, 2010,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1328,
	-1, 2011,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1329,
	-1, 2012,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1330,
	-1, 2013,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1331,
	-1, 2014,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1332,
	-1, 2015,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1333,
	-1, 2016,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1334,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1346,
	-1, 2029,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1347,
	-1, 2030,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1348,
	-1, 2033,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1353,
	-1, 2039,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1357,
	-1, 2041,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1365,
	-1, 2042,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1366,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1367,
	-1, 2044,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1368,
	-1, 2138,
	5, 1235,
	154, 1596,
	462, 1713,
	-2, 1704,
	-1, 2139,
	154, 1597,
	-2, 1982,
	-1, 2140,
	154, 1598,
	-2, 1846,
	-1, 2141,
	154, 1599,
	-2, 1768,
	-1, 2142,
	154, 1600,
	-2, 1804,
	-1, 2143,
	154, 1601,
	-2, 1844,
	-1, 2144,
	154, 1602,
	-2, 1919,
	-1, 2145,
	154, 1603,
	-2, 1430,
	-1, 2221,
	1, 1157,
	2, 1157,
	87, 1157,
	122, 1157,
	138, 1157,
	151, 1157,
	155, 1157,
	161, 1157,
	164, 1157,
	187, 1157,
	196, 1157,
	206, 1157,
	222, 1157,
	226, 1157,
	245, 1157,
	260, 1157,
	264, 1157,
	270, 1157,
	321, 1157,
	323, 1157,
	408, 1157,
	418, 1157,
	431, 1157,
	432, 1157,
	433, 1157,
	442, 1157,
	461, 1157,
	463, 1157,
	465, 1157,
	467, 1157,
	-2, 1156,
	-1, 2226,
	462, 1687,
	-2, 1699,
	-1, 2248,
	462, 1277,
	-2, 1267,
	-1, 2494,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1355,
	-1, 2495,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1359,
	-1, 2501,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1361,
	-1, 2684,
	203, 966,
	295, 966,
	302, 966,
	442, 966,
	-2, 493,
	-1, 2777,
	284, 1069,
	-2, 874,
	-1, 2866,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1363,
	-1, 2873,
	200, 0,
	202, 0,
	252, 0,
	-2, 1382,
	-1, 2936,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1411,
	-1, 2937,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1412,
	-1, 2938,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1413,
	-1, 2942,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1417,
	-1, 2943,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1418,
	-1, 2944,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1419,
	-1, 2988,
	462, 1688,
	-2, 1700,
	-1, 3077,
	464, 2128,
	-2, 1009,
	-1, 3128,
	200, 0,
	202, 0,
	252, 0,
	-2, 1383,
	-1, 3131,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1386,
	-1, 3132,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1388,
	-1, 3294,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1387,
	-1, 3295,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1389,
	-1, 3305,
	200, 0,
	-2, 1420,
	-1, 3415,
	200, 0,
	-2, 1421,
	-1, 3533,
	43, 0,
	173, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1985,
}

const sqlPrivate = 57344

const sqlLast = 76377

var sqlAct = [...]int{

	906, 3335, 3627, 3364, 3235, 3532, 3542, 3338, 3617, 2617,
	2764, 3110, 3511, 3499, 3502, 3486, 3543, 3580, 3324, 3544,
	3371, 2904, 2388, 3008, 2618, 1022, 3419, 1996, 3259, 1315,
	3283, 3531, 3069, 3064, 3376, 2793, 3190, 1058, 2213, 214,
	1651, 214, 214, 2701, 214, 214, 214, 214, 214, 2056,
	2786, 214, 835, 3264, 1446, 2760, 1176, 826, 571, 592,
	3051, 1077, 2170, 1768, 1201, 2858, 1621, 3009, 1894, 2788,
	2421, 2377, 3309, 2360, 2487, 2352, 2423, 214, 2363, 2659,
	1169, 592, 1014, 1619, 2645, 2632, 3109, 2431, 1854, 2623,
	2277, 2420, 2412, 1593, 2621, 2414, 1311, 2389, 690, 1851,
	1529, 1844, 2279, 1843, 2087, 3162, 2603, 2959, 839, 2214,
	1539, 2337, 2107, 2336, 1188, 1557, 2522, 1989, 2069, 2483,
	3420, 1802, 2430, 1795, 2361, 1806, 902, 1065, 1777, 3365,
	1755, 2188, 2602, 1594, 2099, 2312, 1753, 2053, 2664, 1872,
	1428, 2762, 2313, 822, 4, 1367, 1298, 834, 142, 2216,
	863, 1308, 1993, 2269, 1178, 928, 2167, 1324, 1248, 2382,
	208, 1835, 1552, 539, 593, 2081, 1006, 594, 1054, 2424,
	1009, 1603, 2178, 988, 2196, 1520, 2070, 214, 214, 1185,
	2134, 32, 1447, 1445, 2212, 86, 555, 588, 1834, 565,
	525, 207, 1860, 665, 547, 1198, 1322, 1274, 636, 1767,
	862, 542, 149, 1011, 37, 36, 1427, 150, 753, 550,
	34, 206, 25, 23, 21, 1256, 2977, 1451, 2978, 597,
	684, 2518, 737, 142, 1895, 986, 1874, 3657, 3648, 2619,
	2803, 2187, 2187, 1062, 1874, 1874, 3647, 830, 3626, 3609,
	2187, 597, 1811, 3204, 3607, 3566, 830, 3564, 3204, 3567,
	600, 2187, 3562, 3559, 2187, 3556, 2187, 3560, 2436, 3557,
	3553, 2682, 3529, 2180, 1811, 2802, 1811, 825, 700, 3528,
	3482, 3527, 600, 1811, 1003, 1886, 3524, 3523, 3481, 3475,
	1886, 1886, 2241, 2187, 3474, 1039, 3469, 3468, 2187, 1530,
	3204, 3204, 3462, 3456, 3454, 685, 1811, 3204, 3204, 861,
	3417, 3398, 3395, 3354, 2241, 1811, 3204, 1811, 3353, 3345,
	3344, 3315, 1811, 1811, 3204, 1811, 1062, 2537, 3401, 1652,
	57, 688, 687, 2538, 3296, 3281, 989, 989, 2241, 1886,
	1886, 3272, 3232, 1034, 58, 2816, 2187, 831, 3222, 3203,
	3130, 2963, 2187, 3204, 2241, 810, 2963, 3085, 62, 3079,
	809, 2832, 3049, 2832, 2983, 2973, 3050, 2966, 2984, 2974,
	2897, 2187, 2885, 2084, 1811, 2831, 2187, 845, 2823, 2832,
	2755, 817, 2824, 2616, 1886, 2179, 2237, 2187, 2614, 68,
	1386, 3223, 2187, 2613, 1459, 1460, 2567, 2187, 2550, 2539,
	2187, 2410, 2551, 2187, 2409, 1890, 2254, 2240, 1890, 1811,
	2187, 2241, 2235, 990, 1490, 2824, 2187, 1035, 2327, 74,
	1811, 1462, 75, 2228, 2186, 1772, 1889, 1811, 2187, 85,
	1890, 992, 2268, 993, 75, 82, 1726, 878, 2816, 2085,
	2358, 2486, 182, 1873, 2187, 1810, 2266, 1589, 1197, 1461,
	1620, 2385, 2804, 2521, 3036, 2861, 2841, 1805, 1369, 2207,
	2206, 2205, 2204, 2575, 2576, 2203, 994, 991, 816, 815,
	814, 2805, 1816, 813, 812, 808, 182, 807, 76, 806,
	805, 804, 184, 803, 802, 801, 800, 2575, 2576, 2463,
	2593, 2594, 2595, 799, 798, 797, 796, 2575, 2576, 1875,
	735, 734, 733, 732, 731, 730, 3126, 1875, 1875, 729,
	728, 2086, 2083, 727, 1459, 1460, 184, 726, 725, 724,
	723, 722, 721, 720, 719, 718, 183, 2590, 717, 716,
	1459, 1460, 1467, 715, 1490, 714, 176, 1746, 713, 712,
	214, 1462, 711, 710, 177, 709, 699, 698, 656, 655,
	613, 2590, 612, 2802, 611, 603, 602, 1462, 601, 578,
	183, 577, 576, 1489, 1491, 151, 575, 559, 214, 1461,
	204, 203, 202, 2575, 2576, 214, 2593, 2594, 2595, 201,
	200, 199, 2125, 198, 1035, 1461, 2179, 197, 77, 196,
	195, 214, 1080, 214, 214, 1181, 214, 1080, 214, 151,
	194, 2581, 2123, 193, 192, 191, 214, 214, 1035, 2088,
	190, 189, 188, 187, 186, 185, 3179, 1482, 3141, 2981,
	148, 80, 1020, 81, 2833, 2581, 2662, 2544, 2533, 2342,
	182, 214, 1064, 1207, 1530, 2581, 1069, 2590, 2229, 1622,
	2575, 2576, 182, 2220, 833, 214, 118, 1882, 1181, 1181,
	214, 214, 1467, 214, 689, 1873, 1964, 2121, 118, 2119,
	2117, 1458, 3334, 1751, 1636, 214, 1546, 212, 1467, 2370,
	184, 1560, 1560, 214, 1203, 1071, 2596, 1559, 1559, 1024,
	3549, 3530, 184, 1489, 1491, 182, 2591, 214, 214, 214,
	214, 214, 1181, 1181, 1191, 1897, 1541, 1181, 1563, 1558,
	214, 1181, 214, 214, 3450, 119, 2575, 2576, 3410, 2082,
	2591, 2581, 3273, 1483, 183, 3268, 214, 1052, 152, 3404,
	2591, 3183, 1319, 3161, 176, 184, 183, 182, 3160, 1459,
	1460, 3402, 177, 2246, 1541, 3148, 176, 1482, 2597, 3147,
	1318, 2575, 2576, 3146, 177, 3145, 3139, 3138, 3137, 1490,
	3048, 2997, 1181, 151, 1814, 2996, 1462, 1073, 2994, 1166,
	1171, 2987, 2596, 1896, 1047, 686, 597, 184, 2956, 183,
	1200, 2955, 2954, 1199, 214, 2881, 1078, 2877, 2581, 176,
	2657, 1189, 2592, 2610, 1461, 2601, 2574, 177, 214, 2827,
	2571, 2570, 2568, 1481, 2557, 2556, 2591, 600, 1206, 2555,
	1211, 2552, 1217, 214, 2549, 1172, 2592, 2527, 2384, 1195,
	1573, 183, 2526, 3034, 1341, 2519, 2592, 2411, 1388, 2221,
	849, 176, 2092, 1458, 1002, 1219, 1457, 3655, 1542, 177,
	1540, 3625, 1261, 1483, 1302, 1305, 1463, 1464, 1465, 1466,
	1468, 1469, 1327, 1329, 2581, 142, 142, 2575, 2576, 2371,
	151, 1325, 3624, 1848, 3565, 1528, 1023, 1484, 1485, 1486,
	1487, 1257, 1257, 1459, 1460, 2906, 1258, 1467, 2065, 3519,
	1312, 3517, 3447, 3444, 1213, 3441, 3440, 1434, 3439, 2581,
	3435, 3429, 831, 3399, 3394, 3393, 2059, 3330, 1337, 3307,
	1462, 3291, 2592, 3290, 3278, 1340, 3277, 3257, 1489, 1491,
	3254, 1195, 2586, 2584, 2585, 2577, 2578, 2579, 2580, 2582,
	2583, 3248, 3178, 3267, 1396, 2575, 2576, 3159, 1461, 2587,
	2588, 2589, 3099, 3096, 3025, 3024, 2586, 2584, 2585, 2577,
	2578, 2579, 2580, 2582, 2583, 3012, 1433, 2584, 2585, 2577,
	2578, 2579, 2580, 2582, 2583, 3011, 2969, 1387, 1746, 2872,
	2834, 2817, 1482, 2780, 1426, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 1361, 1432, 2591, 2676, 2749, 2727, 2704, 2703,
	182, 1346, 1463, 1464, 1465, 1466, 1468, 1469, 2678, 1444,
	2615, 182, 1747, 2314, 2548, 2581, 2547, 2532, 2510, 1431,
	2351, 2482, 1218, 1564, 1561, 1553, 1550, 2250, 214, 2249,
	1429, 1467, 2224, 2201, 2185, 2587, 2588, 2589, 2115, 1524,
	184, 2369, 2586, 2584, 2585, 2577, 2578, 2579, 2580, 2582,
	2583, 184, 1635, 1592, 214, 1591, 1588, 1587, 1586, 1585,
	1488, 1584, 1583, 1582, 214, 1080, 214, 214, 214, 214,
	1581, 1212, 3422, 2124, 592, 214, 214, 810, 1483, 592,
	214, 1435, 809, 2581, 183, 214, 1454, 1455, 1562, 1580,
	2592, 1181, 3251, 2122, 176, 183, 831, 1578, 1577, 2704,
	2591, 1898, 177, 1576, 1600, 176, 1575, 1574, 1573, 1572,
	1571, 1570, 1080, 177, 2579, 2580, 2582, 2583, 1630, 2638,
	1569, 2243, 1573, 151, 1568, 1554, 1555, 1567, 1638, 1566,
	1597, 1598, 1543, 1646, 151, 1525, 1459, 1460, 1523, 1648,
	1629, 1518, 1046, 1717, 1715, 1037, 1610, 1723, 2120, 1718,
	2118, 2116, 3333, 1030, 3180, 3134, 1490, 2993, 1749, 2976,
	2972, 2536, 2202, 1462, 3319, 1644, 3182, 2992, 2591, 2575,
	2576, 1542, 2674, 1521, 1631, 905, 1746, 989, 2577, 2578,
	2579, 2580, 2582, 2583, 3225, 3405, 1746, 3442, 1068, 2153,
	2730, 1461, 182, 142, 1642, 1066, 2592, 3403, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 2789, 3271, 3224,
	2586, 2584, 2585, 2577, 2578, 2579, 2580, 2582, 2583, 2316,
	1721, 1627, 2332, 2979, 1772, 2819, 2818, 1615, 1657, 1560,
	1720, 1062, 184, 1678, 597, 1559, 831, 1181, 214, 597,
	1067, 182, 1622, 1761, 1080, 1640, 1745, 2554, 1053, 1639,
	1618, 1617, 1624, 1590, 1742, 1059, 1616, 2553, 1614, 1613,
	1612, 1647, 2492, 2301, 2592, 600, 1714, 849, 3377, 1424,
	600, 849, 1459, 1460, 1467, 1063, 183, 1649, 1533, 1164,
	1195, 184, 1538, 214, 1164, 1548, 176, 214, 214, 1792,
	1360, 1732, 1794, 3057, 177, 1799, 1752, 794, 3023, 1462,
	214, 2766, 1062, 2765, 1738, 1489, 1491, 3310, 2299, 214,
	1849, 214, 1368, 214, 1001, 151, 1062, 214, 2585, 2577,
	2578, 2579, 2580, 2582, 2583, 183, 1895, 1461, 3372, 214,
	1369, 1845, 3040, 2100, 1776, 176, 795, 1465, 1466, 1468,
	1469, 182, 1527, 177, 1737, 1736, 1397, 1060, 1746, 1743,
	3027, 2839, 2743, 1790, 1061, 1174, 3628, 2619, 2908, 1482,
	1017, 1803, 2542, 2248, 151, 1579, 1556, 2758, 1838, 1181,
	1842, 1181, 214, 1181, 1234, 3550, 214, 1654, 2084, 1181,
	3561, 184, 1181, 214, 3558, 214, 214, 2577, 2578, 2579,
	2580, 2582, 2583, 3004, 2798, 1181, 1181, 1181, 597, 214,
	3496, 1866, 1200, 1857, 214, 1199, 3065, 3018, 1250, 1253,
	1350, 2418, 2381, 592, 214, 2686, 214, 3595, 214, 2479,
	214, 1059, 214, 1747, 2314, 183, 3461, 182, 1812, 600,
	579, 1798, 3551, 1809, 1068, 176, 214, 3596, 3214, 214,
	651, 214, 1232, 177, 2085, 1740, 1222, 1443, 2675, 1059,
	214, 2255, 790, 788, 775, 1483, 1950, 1914, 3652, 3363,
	829, 1333, 786, 1733, 151, 1826, 1864, 184, 3356, 1825,
	829, 214, 1068, 784, 1900, 781, 1020, 214, 1020, 1769,
	214, 2688, 1877, 1441, 2281, 1879, 1067, 1394, 1881, 824,
	3042, 3038, 1884, 1948, 1062, 1643, 3037, 2729, 1395, 1841,
	3001, 3000, 1080, 2531, 1902, 1862, 1859, 2530, 2529, 1765,
	2528, 183, 1353, 1060, 1233, 2496, 2086, 2083, 2378, 652,
	1061, 176, 2334, 1325, 1067, 1325, 2326, 585, 2323, 177,
	1770, 1771, 2304, 2272, 828, 1968, 2507, 1679, 2236, 1343,
	2272, 1060, 1977, 2040, 828, 2270, 1430, 2244, 1061, 1196,
	151, 2111, 2270, 2110, 831, 1998, 831, 3289, 1766, 1348,
	2505, 1047, 1824, 2303, 1905, 1891, 2840, 1892, 1741, 3201,
	1958, 1904, 1393, 597, 2284, 1472, 1470, 1471, 1463, 1464,
	1465, 1466, 1468, 1469, 1267, 1286, 1266, 1080, 3460, 2466,
	1442, 2051, 1265, 1961, 1264, 3612, 1962, 3198, 1228, 1984,
	1930, 1631, 1909, 778, 600, 1963, 1242, 2262, 830, 2055,
	587, 2320, 3340, 2292, 2088, 2049, 2583, 1966, 830, 904,
	2227, 1747, 2314, 1974, 860, 3210, 1972, 2071, 2072, 1975,
	214, 1747, 2314, 3521, 2055, 1971, 1344, 3226, 2291, 3199,
	3014, 770, 1923, 1437, 1863, 2071, 2097, 2846, 2063, 1440,
	1657, 1657, 2845, 1917, 2061, 1678, 1678, 1965, 1967, 1359,
	1062, 1080, 214, 821, 2460, 1362, 2502, 3613, 1249, 1976,
	3547, 214, 2469, 1045, 214, 2100, 1960, 1080, 2503, 2088,
	2258, 2133, 2508, 2137, 2137, 2151, 1997, 2071, 1062, 2888,
	2171, 2173, 2260, 2096, 810, 2177, 1918, 810, 810, 1985,
	2234, 1383, 1986, 1987, 1247, 3479, 1423, 2484, 2485, 2222,
	581, 2109, 3632, 3585, 2082, 2283, 2113, 2114, 1602, 1469,
	3115, 2045, 1164, 3114, 2261, 1924, 2208, 537, 586, 2046,
	2218, 2219, 2154, 2047, 2193, 2067, 771, 2052, 2225, 2259,
	1970, 3595, 1027, 1369, 654, 653, 827, 1919, 1407, 831,
	2685, 532, 1384, 3615, 3288, 1392, 827, 214, 1629, 2094,
	2302, 2889, 831, 849, 2795, 1181, 831, 1957, 583, 1164,
	3208, 2101, 2468, 1025, 2209, 2192, 2796, 1369, 1230, 989,
	2740, 707, 3642, 1874, 3194, 1249, 1606, 647, 3195, 646,
	2465, 2735, 1080, 1747, 1744, 1789, 3548, 214, 2891, 1654,
	1654, 2162, 2146, 2175, 1016, 214, 3620, 580, 1774, 1018,
	2183, 2184, 2687, 3436, 604, 1772, 214, 2194, 1609, 1994,
	1995, 1723, 2198, 2199, 683, 2504, 1349, 1551, 3197, 214,
	2282, 3039, 1181, 2795, 2506, 2238, 2672, 1604, 142, 1627,
	3200, 2366, 3477, 792, 584, 214, 1080, 791, 782, 1181,
	1949, 214, 214, 1607, 831, 582, 1028, 782, 3026, 2088,
	2324, 2226, 1562, 2245, 2717, 2271, 1285, 2273, 783, 2467,
	782, 3478, 3546, 1959, 214, 3015, 1605, 214, 2339, 1227,
	2048, 772, 1763, 214, 2338, 2253, 1778, 1947, 3584, 2050,
	1763, 819, 3209, 770, 3614, 2634, 2088, 214, 2272, 3111,
	3341, 1164, 1554, 1555, 214, 1782, 214, 2716, 214, 2321,
	2286, 3244, 3301, 2752, 214, 821, 1345, 214, 2037, 214,
	2252, 214, 1922, 214, 214, 2064, 214, 1181, 1181, 1181,
	3602, 1181, 3507, 3446, 2256, 1517, 214, 214, 2355, 214,
	214, 2335, 3285, 3196, 1533, 2306, 2091, 2498, 1779, 1404,
	214, 2285, 2288, 820, 1608, 2546, 2197, 2405, 2406, 2315,
	2317, 2318, 2319, 214, 214, 214, 2276, 1807, 214, 1657,
	214, 2294, 2054, 214, 1678, 214, 2267, 214, 3633, 2435,
	779, 2217, 2305, 2338, 2062, 2338, 1756, 773, 771, 2298,
	1757, 2158, 3250, 1436, 2392, 2322, 2375, 3618, 214, 214,
	214, 214, 214, 214, 1916, 214, 830, 3105, 2989, 1358,
	2434, 597, 2437, 2438, 533, 1200, 605, 606, 2340, 2401,
	2331, 1040, 3116, 1044, 2349, 3545, 774, 1371, 1783, 3583,
	2432, 1602, 2450, 214, 2451, 2417, 3594, 2344, 2359, 2346,
	1172, 1405, 600, 1756, 3284, 3643, 1875, 1757, 2035, 2633,
	1793, 2038, 3592, 1026, 3382, 2394, 1195, 2439, 708, 2440,
	3256, 2448, 2387, 2398, 2784, 2399, 534, 2400, 3245, 3619,
	2373, 1833, 1020, 1599, 2407, 2402, 1450, 142, 1038, 1758,
	2419, 1033, 2383, 524, 2383, 1325, 3053, 1449, 2408, 1784,
	1785, 2719, 1760, 3112, 2945, 2471, 1020, 2473, 1780, 1606,
	2034, 3621, 3157, 1893, 1773, 2403, 535, 2445, 536, 1807,
	608, 607, 1903, 1406, 1734, 2721, 1439, 2452, 1654, 2454,
	3637, 2456, 2859, 1606, 2287, 1911, 1912, 1913, 2499, 1781,
	2665, 1609, 214, 772, 1195, 1195, 1758, 2464, 2307, 3347,
	3346, 3328, 3426, 2447, 1731, 3003, 2785, 1762, 3286, 1760,
	1604, 2477, 2453, 2699, 2455, 1609, 2457, 2695, 2374, 1164,
	609, 610, 3213, 2481, 2720, 2458, 1607, 2362, 2353, 3212,
	2520, 2476, 1858, 1847, 2195, 1448, 1195, 2647, 2524, 2525,
	1846, 2474, 1820, 3448, 1017, 3487, 1017, 1517, 2887, 1605,
	1607, 2189, 2478, 2534, 1981, 2308, 2535, 1954, 1727, 3070,
	3260, 3118, 2154, 2154, 1762, 2350, 1449, 1288, 3370, 1450,
	1195, 1729, 1195, 3368, 3329, 2497, 1786, 2709, 2706, 2705,
	2490, 1973, 1080, 1910, 2971, 2631, 1385, 1730, 2630, 2233,
	2232, 2036, 2946, 2626, 2627, 2231, 2230, 818, 2357, 773,
	2947, 214, 828, 3336, 1164, 1763, 1273, 1259, 3158, 214,
	704, 2648, 1271, 697, 706, 3431, 214, 3236, 2191, 214,
	214, 1080, 3215, 2190, 1260, 2828, 1856, 1608, 2754, 3636,
	1080, 3119, 2612, 2541, 3490, 3599, 2723, 214, 774, 3366,
	1787, 3163, 2652, 3432, 1347, 831, 770, 2642, 2628, 1372,
	2960, 1608, 214, 2646, 1448, 1982, 2105, 2653, 2654, 1421,
	3601, 3563, 1763, 3443, 2154, 2154, 2154, 3326, 821, 2641,
	214, 214, 214, 2650, 3211, 3306, 214, 3156, 1164, 214,
	1419, 3044, 3337, 2661, 1401, 2636, 214, 214, 2656, 214,
	214, 214, 3449, 2691, 1164, 1399, 2309, 2310, 1382, 3327,
	3491, 2670, 2640, 214, 214, 214, 2683, 2660, 1380, 3433,
	2637, 2643, 214, 2620, 2604, 2871, 2681, 2837, 2569, 2689,
	1378, 2607, 2608, 2609, 214, 1181, 2635, 214, 2509, 2354,
	2708, 2333, 2300, 2713, 2714, 1080, 1376, 1374, 2251, 2666,
	1366, 771, 1364, 1080, 1759, 1269, 2696, 1637, 214, 2649,
	1634, 214, 214, 1422, 1338, 214, 1946, 2605, 1181, 214,
	2692, 2693, 2679, 2680, 2854, 2651, 2625, 1181, 1181, 1181,
	2667, 2668, 2669, 2853, 214, 824, 2707, 2462, 2461, 2711,
	214, 2442, 1956, 2734, 1927, 214, 1716, 214, 1565, 2775,
	2791, 1342, 1657, 2104, 214, 1246, 2684, 1678, 1761, 2690,
	2732, 1759, 1272, 3541, 2741, 2655, 3231, 3221, 1270, 1164,
	705, 1420, 702, 703, 2663, 695, 696, 3581, 1181, 1181,
	2899, 2158, 2158, 2800, 1761, 2771, 214, 214, 1657, 2728,
	214, 2722, 1418, 1678, 3484, 3187, 1400, 1181, 2736, 3068,
	780, 3021, 2763, 3019, 3002, 2783, 2739, 1398, 2750, 2745,
	1381, 2774, 2737, 2767, 2379, 2368, 2738, 1803, 3387, 2751,
	1379, 2367, 2787, 1164, 214, 1803, 1080, 214, 214, 1080,
	214, 2347, 1377, 1888, 1887, 2432, 2792, 2724, 2725, 1756,
	2815, 2726, 1885, 1757, 2432, 1883, 772, 1880, 1375, 1373,
	2306, 214, 1365, 1878, 1363, 1876, 1867, 1268, 1817, 1815,
	1804, 1791, 1788, 1775, 2835, 1945, 2744, 2797, 1764, 2488,
	2746, 2747, 1452, 1645, 2748, 1195, 2806, 3596, 2830, 3513,
	998, 3280, 2325, 2158, 2158, 2158, 2826, 2663, 3275, 3274,
	2851, 2433, 1750, 1224, 1080, 1841, 2799, 2272, 2808, 2809,
	2810, 1654, 2811, 2812, 999, 1080, 3389, 214, 2272, 2270,
	2290, 2874, 1920, 3078, 2813, 2814, 1772, 142, 142, 2790,
	2289, 2673, 2836, 785, 787, 3438, 2852, 1416, 1417, 1944,
	831, 1943, 1758, 1925, 936, 3412, 3164, 1654, 2311, 2293,
	2848, 2883, 2884, 2489, 1456, 1760, 1459, 1460, 1016, 1724,
	1016, 2328, 773, 1018, 2295, 1018, 3483, 2700, 1453, 2842,
	2855, 2843, 538, 2844, 2857, 3451, 2154, 2154, 1020, 3061,
	3616, 3052, 2330, 210, 2297, 527, 528, 2404, 543, 527,
	543, 553, 558, 1020, 2329, 574, 2296, 1459, 1460, 2986,
	1000, 774, 2386, 210, 2890, 2892, 2893, 2879, 2176, 1719,
	1762, 1461, 214, 1650, 2671, 3635, 2849, 3453, 549, 2898,
	1189, 694, 1020, 1078, 1462, 210, 1352, 214, 1530, 2338,
	2108, 1657, 1351, 1080, 2910, 2909, 1678, 2905, 2911, 2575,
	2576, 2991, 2912, 2894, 2957, 1459, 1460, 2980, 2264, 2263,
	2975, 1195, 1461, 214, 2264, 2677, 2154, 2154, 2154, 2154,
	2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
	2154, 2154, 2154, 2154, 2154, 2922, 2154, 2265, 2112, 2949,
	1657, 1657, 2914, 2106, 2079, 1678, 1678, 3135, 2896, 1403,
	2967, 2968, 1402, 2990, 2886, 1528, 1657, 1657, 2924, 2902,
	214, 1678, 1678, 2962, 2964, 2965, 2950, 1526, 1763, 1643,
	1017, 3644, 3423, 3360, 3320, 3318, 3247, 2998, 3181, 3102,
	3095, 527, 527, 3084, 3063, 3047, 3046, 1657, 3045, 210,
	2958, 3017, 1678, 142, 1017, 2807, 2982, 214, 214, 1754,
	2781, 2779, 2444, 2443, 2396, 214, 2372, 2348, 2066, 1942,
	1941, 1940, 1939, 1870, 1080, 214, 1869, 1868, 3032, 1181,
	3028, 2995, 1850, 1828, 1827, 3033, 3035, 1823, 1822, 1821,
	1819, 1818, 1415, 214, 3006, 1414, 3058, 1297, 1296, 1020,
	1654, 3080, 3041, 1295, 1294, 1293, 1292, 214, 214, 1181,
	1181, 1181, 3043, 214, 214, 214, 1291, 1290, 214, 214,
	3075, 1289, 214, 214, 1287, 1181, 1282, 1281, 1280, 1164,
	1279, 214, 1080, 1278, 1241, 3072, 1240, 2988, 1239, 3074,
	1238, 3020, 1237, 3022, 1236, 3060, 1235, 3071, 1229, 1654,
	1654, 1223, 1080, 1221, 3103, 2158, 2158, 1220, 2306, 1043,
	1042, 3059, 973, 883, 1725, 1654, 1654, 1759, 1164, 1994,
	2915, 3062, 793, 638, 777, 3339, 1409, 1164, 73, 3076,
	3091, 1231, 3073, 2392, 624, 1994, 2925, 3066, 3082, 67,
	3081, 3016, 633, 3495, 2715, 1926, 1654, 214, 1370, 1928,
	3087, 849, 3086, 3129, 1657, 2639, 3094, 3098, 2200, 1678,
	3101, 3092, 3093, 2432, 849, 3476, 2953, 3097, 3142, 2545,
	3100, 3418, 3300, 2103, 1547, 3120, 69, 871, 956, 3113,
	3243, 3133, 3242, 3188, 3005, 2158, 2158, 2158, 2158, 2158,
	2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158,
	2158, 2158, 2158, 2158, 2422, 2158, 3240, 3239, 838, 1083,
	214, 1735, 877, 1748, 2247, 3121, 2136, 1658, 880, 1655,
	1080, 882, 1080, 881, 1656, 1549, 1841, 879, 1653, 2356,
	2390, 1276, 1164, 3108, 757, 1739, 2060, 2098, 2540, 1544,
	1164, 214, 214, 214, 851, 873, 2095, 1036, 850, 2644,
	2794, 2985, 3266, 214, 1980, 2480, 641, 2572, 2080, 3104,
	214, 1029, 214, 1657, 2159, 214, 214, 214, 1678, 3155,
	2152, 2148, 2380, 1425, 3169, 3206, 1519, 1080, 214, 214,
	1181, 2391, 1070, 1080, 854, 1181, 2058, 1535, 2514, 1438,
	2801, 214, 2658, 3165, 3168, 2742, 3171, 2242, 1020, 1020,
	3510, 3170, 3173, 1654, 3177, 3217, 214, 2660, 1988, 1080,
	3166, 3167, 1181, 3186, 3234, 3172, 1832, 3207, 997, 996,
	995, 3501, 3498, 2700, 2761, 3205, 1728, 2257, 2772, 3218,
	3219, 3184, 3185, 3174, 1511, 2768, 867, 2776, 2777, 2778,
	214, 1194, 2624, 2829, 1031, 1243, 3437, 1510, 789, 3428,
	3216, 1057, 1080, 1056, 1055, 2698, 3228, 3641, 3013, 3229,
	3276, 181, 1969, 1164, 823, 178, 1164, 3238, 3262, 3265,
	180, 3249, 1041, 179, 3252, 3030, 2753, 1772, 3270, 574,
	3261, 3237, 1080, 90, 35, 3263, 16, 117, 2821, 2822,
	116, 115, 114, 113, 112, 210, 3233, 210, 210, 111,
	1186, 110, 210, 109, 3279, 108, 3176, 1807, 107, 106,
	210, 1202, 1654, 3287, 105, 104, 103, 102, 101, 100,
	1080, 99, 3258, 98, 1016, 97, 96, 95, 214, 1018,
	214, 1164, 1080, 214, 3297, 1226, 3292, 94, 93, 92,
	3308, 214, 1164, 2511, 2512, 91, 570, 567, 1016, 1245,
	49, 48, 89, 1018, 210, 210, 214, 1186, 88, 3323,
	15, 33, 13, 53, 214, 54, 12, 3312, 1901, 210,
	28, 1020, 29, 3322, 3246, 79, 78, 1284, 3316, 3313,
	3314, 27, 14, 3253, 26, 214, 24, 10, 8, 214,
	1841, 210, 210, 210, 210, 1186, 7, 214, 3321, 30,
	3374, 3269, 1181, 3369, 574, 2154, 210, 210, 214, 1611,
	11, 3343, 3342, 147, 146, 72, 3317, 3359, 3379, 145,
	694, 3381, 3357, 71, 144, 143, 70, 22, 3378, 214,
	214, 3361, 9, 139, 3375, 3056, 1078, 66, 3367, 141,
	3386, 3396, 3397, 140, 3373, 2598, 2599, 2600, 2154, 63,
	1657, 214, 3350, 138, 3385, 1678, 1017, 214, 3384, 137,
	1164, 3391, 64, 136, 3390, 3265, 3298, 214, 135, 65,
	3383, 1017, 3388, 134, 20, 5, 52, 6, 210, 2763,
	3282, 1763, 3392, 3434, 2838, 3425, 83, 84, 3416, 31,
	3400, 61, 210, 3408, 3409, 3421, 3351, 3352, 3411, 3424,
	1017, 60, 59, 19, 3298, 1657, 51, 558, 18, 171,
	1678, 170, 1801, 169, 168, 3445, 1997, 163, 162, 167,
	165, 164, 166, 214, 1181, 161, 3407, 133, 173, 172,
	214, 1020, 1800, 175, 1181, 1181, 159, 155, 154, 1020,
	1181, 158, 160, 3467, 214, 157, 214, 156, 153, 174,
	3452, 132, 1020, 3378, 3455, 2154, 131, 56, 3459, 130,
	129, 128, 1796, 3465, 3466, 127, 3464, 1195, 126, 3470,
	214, 55, 3471, 3463, 17, 2, 214, 214, 3492, 1080,
	3458, 1164, 1, 1770, 1771, 0, 0, 214, 214, 0,
	0, 3500, 3503, 0, 0, 3514, 0, 0, 1657, 1654,
	0, 0, 3516, 1678, 3518, 0, 3497, 0, 3472, 0,
	3473, 1797, 3525, 0, 0, 3480, 3526, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 0, 3522, 3520, 0,
	0, 0, 0, 0, 3552, 3505, 0, 0, 0, 1164,
	3493, 1195, 0, 0, 3504, 3540, 0, 3508, 0, 3539,
	3537, 3538, 0, 0, 1654, 0, 0, 1017, 3568, 1164,
	3554, 3570, 214, 3572, 2158, 0, 0, 0, 0, 3577,
	0, 3578, 0, 0, 3349, 0, 3569, 0, 3512, 3582,
	0, 3571, 214, 3573, 3574, 0, 0, 0, 0, 3088,
	3089, 3090, 0, 0, 0, 3588, 3589, 0, 0, 0,
	3590, 3593, 527, 3591, 0, 0, 214, 2158, 214, 3500,
	3597, 3598, 3503, 0, 3606, 3600, 3608, 0, 0, 3605,
	3604, 0, 3611, 210, 3610, 210, 0, 0, 210, 0,
	0, 0, 3575, 3576, 0, 0, 3579, 0, 1202, 0,
	1186, 210, 0, 210, 3623, 3622, 0, 1654, 210, 1202,
	543, 3630, 2392, 210, 1202, 3629, 0, 3631, 0, 574,
	0, 0, 3634, 1997, 0, 3638, 0, 0, 0, 0,
	3603, 0, 0, 3515, 3645, 0, 3646, 1164, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 2867, 2868, 3649,
	3650, 3651, 3653, 3654, 0, 0, 0, 0, 3512, 0,
	0, 3658, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1601, 2158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3639, 3640, 0,
	0, 0, 0, 0, 1164, 0, 0, 0, 0, 0,
	1164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3656, 0,
	0, 0, 0, 0, 0, 0, 1164, 2926, 2927, 2928,
	2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938,
	2939, 2940, 2941, 2942, 2943, 2944, 0, 2948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	1016, 0, 0, 0, 0, 1018, 1017, 1017, 0, 1164,
	3230, 58, 210, 0, 0, 1016, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 68, 210, 125, 0,
	0, 210, 210, 0, 57, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 1855, 0, 0, 1164, 58, 120,
	0, 0, 0, 210, 0, 210, 74, 210, 0, 1164,
	0, 527, 62, 0, 0, 0, 85, 0, 0, 0,
	0, 75, 82, 1871, 0, 0, 0, 39, 122, 0,
	0, 0, 1459, 1460, 0, 0, 0, 0, 1502, 1503,
	1504, 38, 849, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 41, 1508, 76, 574, 0, 42, 0,
	694, 0, 0, 74, 0, 0, 123, 210, 0, 1186,
	210, 0, 40, 85, 0, 0, 0, 1461, 75, 82,
	0, 0, 0, 574, 0, 0, 1481, 0, 210, 1017,
	0, 0, 0, 1478, 0, 0, 0, 210, 210, 0,
	210, 0, 210, 0, 210, 43, 210, 0, 0, 2575,
	2576, 1016, 2593, 2594, 2595, 0, 1018, 0, 0, 0,
	1951, 0, 76, 1952, 0, 1953, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 3201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2239, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 558, 0, 0, 0, 0,
	1467, 574, 0, 3198, 210, 77, 3191, 0, 0, 0,
	0, 0, 0, 2590, 0, 0, 0, 0, 0, 0,
	3189, 0, 0, 0, 1499, 0, 3193, 1509, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 148, 80, 0,
	81, 0, 0, 0, 0, 3199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	1476, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 77, 0, 0, 118, 1497, 3192, 0, 0,
	44, 0, 0, 0, 0, 1482, 1164, 2581, 0, 1017,
	849, 0, 0, 0, 0, 0, 0, 1017, 0, 184,
	0, 0, 0, 47, 148, 80, 0, 81, 0, 45,
	1017, 0, 0, 124, 0, 0, 0, 0, 0, 46,
	0, 0, 119, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 50, 0,
	0, 0, 118, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 176, 527, 0, 0, 0, 0, 0,
	0, 177, 0, 1488, 0, 0, 184, 0, 0, 210,
	0, 0, 2591, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 151, 0, 0, 0, 527, 0, 0, 119,
	3194, 0, 0, 210, 3195, 527, 0, 0, 210, 0,
	1016, 1016, 152, 0, 0, 1018, 1018, 1500, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 837, 3197, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 3200, 0, 0, 151,
	0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2592, 1204,
	0, 1208, 0, 1214, 0, 0, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 0, 0, 3305, 1501, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 2280, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 3331,
	210, 0, 0, 0, 0, 0, 0, 0, 62, 3196,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 210,
	0, 0, 0, 1016, 0, 210, 2341, 0, 1018, 68,
	0, 2587, 2588, 2589, 0, 0, 0, 0, 2586, 2584,
	2585, 2577, 2578, 2579, 2580, 2582, 2583, 0, 1202, 0,
	0, 210, 0, 0, 0, 0, 0, 210, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	1389, 1855, 0, 0, 75, 82, 0, 0, 2280, 0,
	527, 0, 2395, 0, 0, 0, 0, 0, 210, 0,
	0, 210, 0, 210, 0, 210, 3415, 210, 210, 0,
	1186, 0, 0, 2575, 2576, 0, 2593, 2594, 2595, 0,
	2415, 694, 0, 2280, 2280, 0, 0, 0, 76, 0,
	0, 0, 3125, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1186, 210,
	0, 0, 1202, 0, 1202, 0, 0, 1186, 0, 1186,
	0, 1186, 0, 0, 1512, 1513, 1514, 1515, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 2590, 0, 0,
	0, 0, 210, 210, 210, 210, 1186, 210, 0, 210,
	0, 0, 0, 1016, 1532, 0, 0, 0, 1018, 0,
	1545, 1016, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 0, 210, 0, 1018,
	0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 1495, 1490, 0, 0, 0, 0, 0, 0,
	1462, 2581, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 2575, 2576, 0, 2593, 2594, 2595, 0,
	148, 80, 0, 81, 0, 0, 0, 0, 1461, 0,
	0, 0, 2876, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 182, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 2596, 0, 689, 0, 0, 0, 118, 2575,
	2576, 0, 2593, 2594, 2595, 0, 1202, 0, 0, 1595,
	1595, 1595, 0, 0, 0, 0, 0, 2590, 2875, 0,
	0, 0, 184, 0, 0, 0, 2591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 119, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 2590, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 176, 0, 1509, 837,
	0, 0, 1489, 1491, 177, 0, 0, 0, 0, 0,
	0, 2581, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 1505, 0, 1506, 151, 0, 0, 0, 0,
	210, 1476, 1477, 0, 0, 527, 0, 0, 0, 0,
	0, 0, 2592, 527, 0, 0, 0, 1497, 0, 0,
	527, 0, 0, 527, 527, 0, 1482, 2581, 0, 210,
	0, 0, 2596, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1202, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 2591, 0, 0, 0,
	0, 0, 0, 0, 2280, 2280, 210, 0, 2596, 0,
	2280, 0, 0, 2702, 0, 0, 0, 0, 0, 0,
	2280, 2702, 0, 2280, 2702, 2702, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 210, 210, 210,
	0, 0, 2591, 0, 0, 2575, 2576, 0, 2593, 2594,
	2595, 0, 1483, 0, 0, 2587, 2588, 2589, 210, 0,
	0, 1186, 2586, 2584, 2585, 2577, 2578, 2579, 2580, 2582,
	2583, 0, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 0, 2757, 0, 0, 2759, 2280, 0, 0, 210,
	0, 0, 2592, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 2590,
	0, 0, 0, 0, 1186, 0, 210, 0, 0, 2280,
	0, 527, 0, 0, 0, 0, 0, 0, 2280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 1855, 1498, 0, 1855, 1473, 1474, 1480, 1501, 1479,
	1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 2581, 0, 3151, 0, 0, 0, 3150,
	0, 0, 0, 0, 0, 0, 0, 0, 2847, 0,
	0, 1186, 210, 0, 210, 2587, 2588, 2589, 0, 0,
	0, 0, 2586, 2584, 2585, 2577, 2578, 2579, 2580, 2582,
	2583, 0, 0, 1459, 1460, 210, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 2596, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	1462, 2587, 2588, 2589, 0, 1508, 0, 0, 2586, 2584,
	2585, 2577, 2578, 2579, 2580, 2582, 2583, 0, 2591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 2907, 1979, 0, 1983, 0, 0, 1481, 0, 0,
	1990, 0, 0, 0, 1478, 0, 0, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 0, 2039, 0, 2041, 2042, 2043, 2044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 2068, 0, 0, 0, 0,
	0, 1467, 0, 0, 2592, 210, 210, 0, 0, 0,
	1532, 0, 0, 0, 2093, 0, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 1509, 0,
	0, 527, 1489, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 0, 0, 0, 0, 2150, 1202, 2161, 2163,
	2168, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 1459, 1460,
	0, 57, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 1490, 0,
	0, 0, 0, 0, 574, 1462, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 2587, 2588, 2589,
	0, 0, 0, 0, 2586, 2584, 2585, 2577, 2578, 2579,
	2580, 2582, 2583, 1461, 0, 0, 0, 0, 0, 0,
	68, 3054, 210, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 2280, 210, 0,
	85, 0, 1483, 0, 0, 75, 82, 0, 0, 0,
	0, 2415, 2415, 0, 0, 0, 0, 694, 694, 2280,
	0, 0, 1855, 1855, 0, 0, 694, 2280, 1500, 0,
	0, 0, 0, 0, 0, 210, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3143, 0, 0, 0, 0, 0, 0, 2343, 0,
	2345, 0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479,
	1475, 1482, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 77,
	0, 0, 0, 0, 1202, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 148, 80, 0, 81, 2280, 2280, 2280, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 1202, 0, 0,
	0, 0, 0, 182, 2280, 0, 2702, 1483, 0, 1202,
	1202, 210, 0, 0, 0, 689, 0, 1459, 1460, 118,
	0, 0, 210, 210, 68, 0, 0, 0, 2459, 0,
	0, 0, 0, 0, 0, 2280, 0, 1490, 0, 0,
	0, 0, 0, 184, 1462, 0, 0, 0, 0, 0,
	3255, 0, 0, 0, 74, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 119, 0, 0, 75,
	82, 0, 1461, 0, 0, 0, 0, 0, 0, 152,
	0, 1481, 0, 0, 1202, 0, 0, 183, 1478, 0,
	0, 0, 0, 0, 211, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 76, 211, 0, 0, 0, 2494, 2495,
	0, 0, 0, 0, 2501, 0, 1330, 3124, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 211, 0, 0, 0,
	0, 0, 0, 2515, 2516, 1484, 1485, 1486, 1487, 2093,
	0, 0, 0, 0, 0, 1467, 0, 0, 2523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2280, 0, 2702, 0, 0, 3325, 0, 0,
	0, 0, 0, 0, 2543, 210, 1489, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2558,
	210, 0, 0, 0, 0, 0, 0, 0, 574, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 3325,
	0, 0, 0, 2280, 0, 0, 0, 0, 0, 0,
	1482, 210, 0, 0, 0, 0, 0, 0, 2168, 2168,
	2168, 0, 1202, 0, 0, 148, 80, 0, 81, 0,
	0, 0, 0, 1595, 0, 0, 0, 0, 0, 0,
	0, 2629, 0, 210, 210, 0, 0, 182, 0, 0,
	1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 689,
	0, 0, 0, 118, 0, 2907, 0, 0, 0, 1495,
	1490, 527, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 3325, 1508, 0, 0, 0, 0, 184, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 1483, 837, 0, 0,
	119, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	837, 1478, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 176, 0, 0, 2702, 0, 2718, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 1202, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 1484, 1485,
	1486, 1487, 0, 0, 3488, 0, 0, 0, 1467, 0,
	1202, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 1509, 0, 0, 0, 1489,
	1491, 0, 0, 1479, 1475, 0, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 0, 0, 2907, 0, 1505,
	0, 1506, 0, 0, 0, 0, 0, 0, 1476, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 2280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 3325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1202, 0, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2856, 0, 0, 0,
	1990, 0, 0, 0, 0, 0, 2862, 2863, 0, 0,
	2866, 1488, 0, 0, 2869, 0, 0, 0, 0, 0,
	0, 0, 0, 2873, 0, 0, 0, 0, 0, 1483,
	0, 0, 2880, 0, 0, 2629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 2900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 1085, 211, 211,
	1085, 0, 1085, 211, 0, 2916, 2917, 0, 2918, 2919,
	2920, 211, 0, 2921, 0, 0, 0, 2923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2951, 2952,
	0, 0, 0, 1085, 1085, 211, 211, 0, 0, 0,
	0, 0, 0, 2961, 0, 0, 0, 0, 0, 1498,
	211, 0, 1473, 1474, 1480, 1501, 1479, 1475, 2970, 1472,
	1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0,
	0, 0, 211, 211, 211, 211, 3149, 1085, 1085, 0,
	0, 0, 1085, 0, 0, 0, 1085, 211, 211, 0,
	0, 0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2999, 1495, 1490, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 1508, 3007, 3010, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 3029, 0, 0, 0, 0, 0, 1481, 211,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 211, 1459, 1460, 0, 1492, 1493, 1494,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 1490, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1595,
	0, 0, 1484, 1485, 1486, 1487, 0, 0, 3083, 1461,
	0, 0, 1467, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 1509,
	0, 0, 0, 1489, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1506, 0, 0, 3122, 3123,
	0, 0, 1476, 1477, 3127, 3128, 0, 0, 0, 3131,
	3132, 0, 1484, 1485, 1486, 1487, 3136, 0, 1497, 0,
	0, 0, 1467, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 3140, 0, 0, 0, 0,
	0, 0, 3144, 0, 0, 1507, 1499, 0, 0, 1509,
	0, 0, 0, 1489, 1491, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1506, 0, 903, 0, 0,
	0, 0, 1476, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 1488, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 211,
	0, 0, 0, 1483, 0, 1507, 0, 0, 0, 0,
	1085, 0, 211, 211, 211, 0, 598, 0, 0, 211,
	0, 0, 1496, 0, 211, 3010, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 1085, 0, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	3010, 0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501,
	1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 0, 0, 0, 0, 3489, 0, 3293, 3294,
	3295, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3303, 3304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3311, 0, 0,
	0, 0, 1085, 211, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501,
	1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 0, 0, 0, 0, 2563, 0, 3010, 0,
	2564, 0, 0, 0, 0, 0, 3348, 0, 211, 0,
	0, 0, 211, 211, 0, 3355, 0, 0, 837, 0,
	0, 0, 1459, 1460, 0, 3362, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 211, 0, 211, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 3010, 1462,
	0, 3010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3010, 3010, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1478, 1085, 0, 1085, 0, 1085, 0,
	0, 0, 0, 0, 1085, 0, 0, 1085, 211, 0,
	0, 211, 0, 0, 0, 0, 907, 0, 0, 0,
	1085, 1085, 1085, 0, 3427, 0, 0, 3430, 0, 211,
	0, 0, 2870, 0, 0, 0, 0, 0, 211, 211,
	0, 211, 0, 211, 0, 211, 0, 211, 0, 0,
	1484, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 0, 0, 0, 215, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3536, 3536, 3536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	3555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 3010, 1085, 3010, 0, 0, 0, 0, 209, 0,
	209, 209, 0, 1488, 0, 209, 0, 3536, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 209, 209, 0,
	0, 1508, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 1085, 0, 1461, 0, 0, 0, 0, 0,
	3536, 0, 0, 1481, 209, 209, 209, 209, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 1509, 209, 0, 1085, 1489, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1506, 211, 0, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 211, 0, 0, 1085, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	211, 1085, 1482, 0, 1085, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 1496, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 211, 0, 211, 0, 211, 0, 211, 211,
	1488, 0, 1085, 1085, 1085, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	211, 0, 0, 0, 1500, 0, 0, 0, 1082, 0,
	0, 1183, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 211, 211, 211, 0, 211, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1625, 0, 1019, 0,
	0, 209, 0, 0, 1183, 1183, 0, 0, 211, 0,
	0, 0, 0, 0, 209, 1625, 209, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 598, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 1183, 1183,
	0, 2089, 0, 1183, 0, 2090, 0, 1183, 1081, 0,
	0, 1182, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 1183, 0,
	0, 0, 0, 0, 1182, 1182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1182, 1182,
	0, 0, 0, 1182, 0, 0, 0, 1182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 2865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 1182, 0,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	209, 0, 0, 0, 209, 209, 1085, 0, 0, 0,
	0, 0, 0, 0, 1490, 1085, 1489, 1491, 0, 0,
	0, 1462, 0, 0, 0, 0, 209, 0, 209, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 211, 1481, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 211,
	211, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	209, 0, 0, 209, 2864, 0, 0, 0, 0, 211,
	1085, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 209, 1484, 1485, 1486, 1487, 0, 0, 1085, 0,
	598, 209, 1467, 209, 0, 209, 0, 209, 0, 209,
	211, 0, 0, 1085, 211, 0, 0, 0, 1488, 0,
	205, 0, 1085, 1085, 1085, 0, 0, 0, 0, 211,
	0, 1082, 0, 1489, 1491, 0, 1483, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1183, 0, 0,
	0, 0, 1476, 1477, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 1085, 1085, 0, 0, 0, 1082, 0,
	0, 211, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 211, 1085, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 211, 0, 0, 0,
	591, 0, 0, 1479, 1475, 591, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1488, 0, 1182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 1081, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1183, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1019, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 0, 1182, 0, 0, 0, 0, 1085, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1183, 0, 1183, 0, 1183,
	0, 0, 0, 0, 0, 1183, 0, 0, 1183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 1183, 1183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	211, 0, 209, 0, 0, 0, 0, 0, 598, 1085,
	211, 0, 0, 0, 1085, 1182, 0, 1182, 0, 1182,
	0, 0, 0, 0, 0, 1182, 0, 0, 1182, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 1082, 0,
	209, 1182, 1182, 1182, 1085, 1085, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	1085, 0, 0, 0, 0, 0, 211, 1085, 0, 0,
	0, 209, 0, 0, 209, 0, 209, 0, 209, 0,
	209, 209, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 209, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 1193,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 209, 209, 209, 209, 0,
	209, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 1082, 872, 87,
	0, 0, 0, 0, 0, 1085, 1277, 1085, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1301, 1301,
	1301, 1193, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 211, 211, 1085, 0, 0, 1085, 0,
	1085, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 1085, 0, 0, 1085, 0, 0,
	0, 1183, 0, 0, 1495, 1490, 0, 1081, 0, 0,
	0, 0, 1462, 0, 0, 1408, 0, 1508, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1461, 811, 0, 0, 0, 0, 0, 0, 0, 1481,
	832, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 1082, 1007, 0, 1183, 0, 0, 0, 0,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1182, 0, 1484, 1485, 1486, 1487, 1085, 0, 0,
	0, 0, 1625, 1467, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 211, 0, 0, 0, 0, 0, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 0, 1183, 1183, 1183, 0, 1183, 0, 209,
	0, 0, 0, 0, 1505, 0, 1506, 0, 1182, 0,
	0, 0, 211, 1476, 1477, 0, 0, 1085, 0, 0,
	0, 0, 1081, 0, 0, 1182, 0, 0, 0, 1497,
	209, 209, 209, 0, 0, 0, 0, 0, 1482, 1625,
	0, 0, 0, 0, 211, 211, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 1632, 0, 0, 0, 0,
	0, 209, 0, 1182, 1182, 1182, 0, 1182, 1641, 1019,
	1193, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 211, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	1085, 0, 0, 209, 0, 1085, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 1085, 209, 0, 209, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 2878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1830, 0, 0, 1082, 1837, 0,
	0, 0, 0, 0, 0, 87, 1082, 87, 0, 87,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	1277, 0, 1861, 0, 1861, 0, 0, 0, 1019, 1019,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 1081, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 832, 87, 87, 0, 0,
	0, 0, 0, 0, 1837, 87, 0, 1907, 0, 0,
	0, 1183, 87, 0, 0, 0, 0, 1081, 0, 0,
	0, 1082, 0, 0, 0, 1921, 1081, 0, 0, 1082,
	0, 0, 0, 0, 0, 1931, 0, 1933, 0, 1935,
	0, 1937, 0, 1938, 1183, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 1183, 1183, 1183, 0, 0, 0, 1467,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 1955, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 209, 1499, 0, 0, 1509, 0, 0, 0,
	1489, 1491, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 1183, 1183, 0, 0, 0, 0,
	1505, 1019, 1506, 1459, 1460, 0, 0, 0, 0, 1476,
	1477, 1182, 0, 1183, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 1490, 0, 1497, 0, 0, 0, 1081,
	1462, 0, 0, 811, 1482, 0, 0, 0, 209, 0,
	0, 0, 1082, 0, 1182, 1082, 0, 0, 0, 0,
	0, 1522, 1507, 1182, 1182, 1182, 0, 0, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 1531,
	0, 0, 0, 1537, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1182, 1182, 0, 0, 0, 0,
	1082, 0, 1488, 2500, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 1182, 0, 0, 0, 0, 0, 0,
	1483, 1484, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1081, 1500, 0, 0, 1459,
	1460, 1019, 1492, 1493, 1494, 1502, 1503, 1504, 0, 1019,
	0, 0, 1489, 1491, 0, 0, 0, 0, 1495, 1490,
	0, 0, 1625, 0, 0, 2223, 1462, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 87, 0, 0, 1623, 0, 1626,
	0, 0, 0, 0, 1461, 0, 0, 0, 0, 0,
	1081, 0, 0, 1481, 209, 0, 1482, 0, 0, 0,
	1478, 1081, 0, 0, 0, 209, 209, 0, 0, 1082,
	1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 1483, 0, 1509, 0, 0, 0, 1489, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 1081,
	1506, 0, 0, 0, 0, 0, 1193, 1476, 1477, 0,
	1082, 0, 0, 0, 0, 1183, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 1837, 0,
	0, 0, 0, 0, 2365, 1183, 1183, 1183, 209, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 0, 209, 0, 0, 0, 1496, 1082, 0,
	0, 0, 0, 0, 0, 2397, 0, 0, 1301, 0,
	1301, 0, 1301, 0, 1193, 1193, 0, 0, 1082, 1479,
	1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	1488, 2441, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 2446, 1182, 2449, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1182, 1182, 1182, 0, 2470,
	1193, 2472, 1193, 0, 2475, 0, 0, 0, 0, 0,
	0, 1182, 0, 0, 0, 0, 0, 832, 1081, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2491, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 0,
	0, 0, 0, 1082, 0, 2566, 1183, 0, 0, 1082,
	0, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 1082, 0, 0, 1183, 0,
	811, 0, 0, 811, 811, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 0, 1081, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2057, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 1082, 0,
	0, 0, 832, 1081, 0, 659, 1182, 0, 0, 1081,
	0, 1182, 0, 0, 0, 1531, 0, 0, 0, 1531,
	0, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 680, 1182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	1459, 1460, 661, 1492, 1493, 1494, 1502, 1503, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1490, 662, 0, 0, 0, 0, 0, 1462, 1081, 0,
	0, 0, 1508, 1007, 0, 0, 0, 0, 0, 0,
	0, 663, 0, 0, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 2694, 0, 1461, 0, 1626, 1081, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 1183, 0,
	679, 1478, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 2731, 2733, 2365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 1485,
	1486, 1487, 0, 0, 0, 0, 2769, 0, 1467, 0,
	2773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2782, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 1509, 0, 666, 0, 1489,
	1491, 0, 0, 0, 0, 0, 0, 0, 1182, 0,
	0, 0, 0, 0, 683, 667, 0, 0, 0, 1505,
	1183, 1506, 0, 0, 0, 0, 87, 0, 1476, 1477,
	1183, 1183, 0, 0, 0, 0, 1183, 2825, 0, 0,
	0, 0, 682, 0, 1497, 0, 0, 0, 0, 668,
	0, 0, 669, 1482, 0, 0, 0, 87, 677, 0,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 1507, 0, 0, 87, 1082, 87, 0, 0, 2850,
	0, 1193, 0, 1459, 1460, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 671, 678, 0, 0,
	0, 0, 2860, 1490, 672, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 674, 0, 87,
	0, 87, 673, 0, 0, 0, 0, 0, 0, 0,
	1182, 1488, 0, 0, 681, 0, 0, 0, 1461, 0,
	1182, 1182, 0, 0, 0, 676, 1182, 1481, 87, 1483,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 1495,
	1490, 0, 0, 0, 0, 1081, 0, 1462, 0, 0,
	0, 0, 1508, 2493, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 1461, 0, 0, 0, 0,
	0, 1467, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1491, 0, 0, 0, 0, 0, 1498,
	0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472,
	1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0,
	0, 1476, 1477, 0, 0, 0, 2565, 0, 1484, 1485,
	1486, 1487, 0, 0, 0, 0, 0, 2057, 1467, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 0, 1499, 0, 0, 1509, 0, 0, 0, 1489,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 1506, 0, 0, 0, 0, 0, 0, 1476, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 3055,
	0, 0, 0, 1482, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3067, 0, 0, 0,
	0, 1507, 1483, 0, 0, 0, 0, 0, 0, 0,
	1459, 1460, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 1462, 0, 1007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3106, 0, 1007, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 1483,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 1479,
	1475, 1508, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 0, 0, 0, 0, 0, 1484, 1485,
	1486, 1487, 0, 0, 1461, 0, 0, 0, 1467, 0,
	0, 0, 0, 1481, 87, 87, 0, 0, 87, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1491, 0, 0, 0, 0, 0, 0, 87, 87, 1498,
	0, 87, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472,
	1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1476, 1477,
	0, 0, 0, 0, 0, 0, 2562, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 3220, 0,
	1007, 0, 0, 832, 0, 0, 0, 0, 0, 2365,
	0, 1499, 0, 0, 1509, 0, 0, 0, 1489, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 1488, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1490, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 1483, 0,
	0, 0, 3332, 0, 1481, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 1193, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 1475, 0, 1472,
	1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3380, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 1484, 1485,
	1486, 1487, 0, 0, 0, 0, 0, 0, 1467, 1007,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3406, 1193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 1509, 0, 0, 1498, 1489,
	1491, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 1505,
	0, 1506, 0, 0, 0, 2561, 0, 0, 1476, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 3457, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 1496, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 615, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 0, 0, 0, 736, 3494, 770,
	0, 1488, 0, 0, 0, 0, 0, 0, 3509, 616,
	635, 0, 1007, 0, 0, 0, 1461, 0, 0, 1483,
	0, 743, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 617, 1478, 0, 618, 754, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 87, 0, 0, 0,
	642, 0, 0, 0, 0, 0, 619, 0, 0, 742,
	0, 0, 0, 0, 744, 640, 0, 0, 776, 0,
	0, 0, 0, 0, 0, 751, 752, 0, 0, 0,
	0, 763, 0, 0, 620, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 771, 746, 0, 0, 0, 1467,
	0, 0, 0, 0, 621, 0, 0, 622, 644, 0,
	0, 0, 649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 769, 1499, 0, 0, 1509, 0, 0, 1498,
	1489, 1491, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472,
	1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0,
	1505, 0, 1506, 0, 747, 0, 2560, 0, 0, 1476,
	1477, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 1497, 0, 748, 749, 643,
	1007, 0, 0, 0, 1482, 0, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 756,
	755, 0, 1507, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	623, 0, 0, 775, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 1488, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 648, 0, 0, 745, 0,
	1483, 0, 0, 0, 0, 628, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 767, 768, 0, 629, 0,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	759, 0, 647, 0, 646, 0, 760, 631, 0, 0,
	0, 0, 0, 738, 0, 773, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 639, 0, 0, 0, 0,
	650, 739, 645, 0, 0, 0, 0, 637, 0, 0,
	0, 761, 0, 0, 0, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 0, 0,
	1498, 0, 762, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	0, 0, 764, 0, 0, 0, 0, 2090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2057, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1086, 224, 1087, 1088, 1089,
	0, 1090, 478, 1091, 1092, 1093, 1094, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 1095,
	233, 234, 235, 236, 237, 238, 1096, 1097, 239, 483,
	484, 485, 1098, 240, 486, 1099, 1084, 1100, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1101,
	251, 0, 252, 253, 254, 1102, 958, 255, 256, 1103,
	1104, 1106, 1105, 1107, 1108, 1109, 257, 258, 259, 260,
	261, 262, 487, 488, 1110, 263, 1111, 265, 264, 1112,
	266, 1113, 1114, 267, 268, 269, 1115, 270, 1116, 271,
	272, 1117, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 1118, 216, 1119, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	1120, 290, 1121, 1122, 959, 291, 292, 1123, 293, 493,
	1124, 494, 294, 1125, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 1126, 301, 302, 304, 0,
	87, 217, 303, 305, 312, 1127, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 1128, 500, 1129, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1130, 325, 324, 1131, 326,
	502, 965, 327, 328, 966, 1132, 329, 330, 1133, 1134,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 1135,
	218, 968, 348, 1136, 503, 349, 504, 351, 352, 1137,
	353, 354, 355, 1138, 1139, 357, 358, 359, 1140, 1141,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1142, 371, 372, 507,
	373, 508, 374, 1143, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 1144, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	1145, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 1146, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 1147,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 1148, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 1149, 442, 443, 441, 1150, 444,
	445, 446, 447, 448, 278, 449, 1151, 450, 513, 514,
	515, 516, 1152, 457, 1153, 451, 452, 517, 453, 518,
	1154, 454, 455, 456, 0, 458, 459, 1155, 1156, 460,
	461, 462, 463, 464, 466, 1157, 467, 1158, 465, 468,
	469, 470, 519, 520, 521, 1159, 472, 471, 522, 1160,
	1161, 1162, 1163, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 2210,
	0, 0, 0, 0, 0, 0, 0, 2211, 219, 220,
	221, 222, 223, 1086, 224, 1087, 1088, 1089, 0, 1090,
	478, 1091, 1092, 1093, 1094, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1095, 233, 234,
	235, 236, 237, 238, 1096, 1097, 239, 483, 484, 485,
	1098, 240, 486, 1099, 1084, 1100, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1101, 251, 0,
	252, 253, 254, 1102, 958, 255, 256, 1103, 1104, 1106,
	1105, 1107, 1108, 1109, 257, 258, 259, 260, 261, 262,
	487, 488, 1110, 263, 1111, 265, 264, 1112, 266, 1113,
	1114, 267, 268, 269, 1115, 270, 1116, 271, 272, 1117,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1118, 216, 1119, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1120, 290,
	1121, 1122, 959, 291, 292, 1123, 293, 493, 1124, 494,
	294, 1125, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1126, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1127, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1128, 500, 1129, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1130, 325, 324, 1131, 326, 502, 965,
	327, 328, 966, 1132, 329, 330, 1133, 1134, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 1135, 218, 968,
	348, 1136, 503, 349, 504, 351, 352, 1137, 353, 354,
	355, 1138, 1139, 357, 358, 359, 1140, 1141, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1142, 371, 372, 507, 373, 508,
	374, 1143, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 1144, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 1145, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 1146, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 1147, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 1148,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 1149, 442, 443, 441, 1150, 444, 445, 446,
	447, 448, 278, 449, 1151, 450, 513, 514, 515, 516,
	1152, 457, 1153, 451, 452, 517, 453, 518, 1154, 454,
	455, 456, 0, 458, 459, 1155, 1156, 460, 461, 462,
	463, 464, 466, 1157, 467, 1158, 465, 468, 469, 470,
	519, 520, 521, 1159, 472, 471, 522, 1160, 1161, 1162,
	1163, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3175, 219, 220,
	221, 222, 223, 1086, 224, 1087, 1088, 1089, 0, 1090,
	478, 1091, 1092, 1093, 1094, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1095, 233, 234,
	235, 236, 237, 238, 1096, 1097, 239, 483, 484, 485,
	1098, 240, 486, 1099, 1084, 1100, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1101, 251, 0,
	252, 253, 254, 1102, 958, 255, 256, 1103, 1104, 1106,
	1105, 1107, 1108, 1109, 257, 258, 259, 260, 261, 262,
	487, 488, 1110, 263, 1111, 265, 264, 1112, 266, 1113,
	1114, 267, 268, 269, 1115, 270, 1116, 271, 272, 1117,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1118, 216, 1119, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1120, 290,
	1121, 1122, 959, 291, 292, 1123, 293, 493, 1124, 494,
	294, 1125, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1126, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1127, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1128, 500, 1129, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1130, 325, 324, 1131, 326, 502, 965,
	327, 328, 966, 1132, 329, 330, 1133, 1134, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 1135, 218, 968,
	348, 1136, 503, 349, 504, 351, 352, 1137, 353, 354,
	355, 1138, 1139, 357, 358, 359, 1140, 1141, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1142, 371, 372, 507, 373, 508,
	374, 1143, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 1144, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 1145, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 1146, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 1147, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 1148,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 1149, 442, 443, 441, 1150, 444, 445, 446,
	447, 448, 278, 449, 1151, 450, 513, 514, 515, 516,
	1152, 457, 1153, 451, 452, 517, 453, 518, 1154, 454,
	455, 456, 0, 458, 459, 1155, 1156, 460, 461, 462,
	463, 464, 466, 1157, 467, 1158, 465, 468, 469, 470,
	519, 520, 521, 1159, 472, 471, 522, 1160, 1161, 1162,
	1163, 473, 474, 523, 475, 476, 477, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3299, 0, 219, 220, 221, 222, 223, 1086,
	224, 1087, 1088, 1089, 0, 1090, 478, 1091, 1092, 1093,
	1094, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1095, 233, 234, 235, 236, 237, 238,
	1096, 1097, 239, 483, 484, 485, 1098, 240, 486, 1099,
	1084, 1100, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1101, 251, 0, 252, 253, 254, 1102,
	958, 255, 256, 1103, 1104, 1106, 1105, 1107, 1108, 1109,
	257, 258, 259, 260, 261, 262, 487, 488, 1110, 263,
	1111, 265, 264, 1112, 266, 1113, 1114, 267, 268, 269,
	1115, 270, 1116, 271, 272, 1117, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1118,
	216, 1119, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1120, 290, 1121, 1122, 959, 291,
	292, 1123, 293, 493, 1124, 494, 294, 1125, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1126,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1127,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1128,
	500, 1129, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1130,
	325, 324, 1131, 326, 502, 965, 327, 328, 966, 1132,
	329, 330, 1133, 1134, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 1135, 218, 968, 348, 1136, 503, 349,
	504, 351, 352, 1137, 353, 354, 355, 1138, 1139, 357,
	358, 359, 1140, 1141, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1142, 371, 372, 507, 373, 508, 374, 1143, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1144,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1145, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1146, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1147, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 1148, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1149, 442,
	443, 441, 1150, 444, 445, 446, 447, 448, 278, 449,
	1151, 450, 513, 514, 515, 516, 1152, 457, 1153, 451,
	452, 517, 453, 518, 1154, 454, 455, 456, 0, 458,
	459, 1155, 1156, 460, 461, 462, 463, 464, 466, 1157,
	467, 1158, 465, 468, 469, 470, 519, 520, 521, 1159,
	472, 471, 522, 1160, 1161, 1162, 1163, 473, 474, 523,
	475, 476, 477, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3227, 0,
	219, 220, 221, 222, 223, 1086, 224, 1087, 1088, 1089,
	0, 1090, 478, 1091, 1092, 1093, 1094, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 1095,
	233, 234, 235, 236, 237, 238, 1096, 1097, 239, 483,
	484, 485, 1098, 240, 486, 1099, 1084, 1100, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1101,
	251, 0, 252, 253, 254, 1102, 958, 255, 256, 1103,
	1104, 1106, 1105, 1107, 1108, 1109, 257, 258, 259, 260,
	261, 262, 487, 488, 1110, 263, 1111, 265, 264, 1112,
	266, 1113, 1114, 267, 268, 269, 1115, 270, 1116, 271,
	272, 1117, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 1118, 216, 1119, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	1120, 290, 1121, 1122, 959, 291, 292, 1123, 293, 493,
	1124, 494, 294, 1125, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 1126, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1127, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 1128, 500, 1129, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1130, 325, 324, 1131, 326,
	502, 965, 327, 328, 966, 1132, 329, 330, 1133, 1134,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 1135,
	218, 968, 348, 1136, 503, 349, 504, 351, 352, 1137,
	353, 354, 355, 1138, 1139, 357, 358, 359, 1140, 1141,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1142, 371, 372, 507,
	373, 508, 374, 1143, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 1144, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	1145, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 1146, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 1147,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 1148, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 1149, 442, 443, 441, 1150, 444,
	445, 446, 447, 448, 278, 449, 1151, 450, 513, 514,
	515, 516, 1152, 457, 1153, 451, 452, 517, 453, 518,
	1154, 454, 455, 456, 0, 458, 459, 1155, 1156, 460,
	461, 462, 463, 464, 466, 1157, 467, 1158, 465, 468,
	469, 470, 519, 520, 521, 1159, 472, 471, 522, 1160,
	1161, 1162, 1163, 473, 474, 523, 475, 476, 477, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3107, 0, 219, 220, 221, 222,
	223, 1086, 224, 1087, 1088, 1089, 0, 1090, 478, 1091,
	1092, 1093, 1094, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 1095, 233, 234, 235, 236,
	237, 238, 1096, 1097, 239, 483, 484, 485, 1098, 240,
	486, 1099, 1084, 1100, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1101, 251, 0, 252, 253,
	254, 1102, 958, 255, 256, 1103, 1104, 1106, 1105, 1107,
	1108, 1109, 257, 258, 259, 260, 261, 262, 487, 488,
	1110, 263, 1111, 265, 264, 1112, 266, 1113, 1114, 267,
	268, 269, 1115, 270, 1116, 271, 272, 1117, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 1118, 216, 1119, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 1120, 290, 1121, 1122,
	959, 291, 292, 1123, 293, 493, 1124, 494, 294, 1125,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 1126, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1127, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 1128, 500, 1129, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1130, 325, 324, 1131, 326, 502, 965, 327, 328,
	966, 1132, 329, 330, 1133, 1134, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 1135, 218, 968, 348, 1136,
	503, 349, 504, 351, 352, 1137, 353, 354, 355, 1138,
	1139, 357, 358, 359, 1140, 1141, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1142, 371, 372, 507, 373, 508, 374, 1143,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 1144, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 1145, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 1146, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 1147, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 1148, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	1149, 442, 443, 441, 1150, 444, 445, 446, 447, 448,
	278, 449, 1151, 450, 513, 514, 515, 516, 1152, 457,
	1153, 451, 452, 517, 453, 518, 1154, 454, 455, 456,
	0, 458, 459, 1155, 1156, 460, 461, 462, 463, 464,
	466, 1157, 467, 1158, 465, 468, 469, 470, 519, 520,
	521, 1159, 472, 471, 522, 1160, 1161, 1162, 1163, 473,
	474, 523, 475, 476, 477, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2903, 0, 219, 220, 221, 222, 223, 1086, 224, 1087,
	1088, 1089, 0, 1090, 478, 1091, 1092, 1093, 1094, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 1095, 233, 234, 235, 236, 237, 238, 1096, 1097,
	239, 483, 484, 485, 1098, 240, 486, 1099, 1084, 1100,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1101, 251, 0, 252, 253, 254, 1102, 958, 255,
	256, 1103, 1104, 1106, 1105, 1107, 1108, 1109, 257, 258,
	259, 260, 261, 262, 487, 488, 1110, 263, 1111, 265,
	264, 1112, 266, 1113, 1114, 267, 268, 269, 1115, 270,
	1116, 271, 272, 1117, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 1118, 216, 1119,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 1120, 290, 1121, 1122, 959, 291, 292, 1123,
	293, 493, 1124, 494, 294, 1125, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 1126, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1127, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 1128, 500, 1129,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1130, 325, 324,
	1131, 326, 502, 965, 327, 328, 966, 1132, 329, 330,
	1133, 1134, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 1135, 218, 968, 348, 1136, 503, 349, 504, 351,
	352, 1137, 353, 354, 355, 1138, 1139, 357, 358, 359,
	1140, 1141, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1142, 371,
	372, 507, 373, 508, 374, 1143, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 1144, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 1145, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	1146, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 1147, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 1148, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 1149, 442, 443, 441,
	1150, 444, 445, 446, 447, 448, 278, 449, 1151, 450,
	513, 514, 515, 516, 1152, 457, 1153, 451, 452, 517,
	453, 518, 1154, 454, 455, 456, 0, 458, 459, 1155,
	1156, 460, 461, 462, 463, 464, 466, 1157, 467, 1158,
	465, 468, 469, 470, 519, 520, 521, 1159, 472, 471,
	522, 1160, 1161, 1162, 1163, 473, 474, 523, 475, 476,
	477, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2895, 0, 219, 220,
	221, 222, 223, 1086, 224, 1087, 1088, 1089, 0, 1090,
	478, 1091, 1092, 1093, 1094, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1095, 233, 234,
	235, 236, 237, 238, 1096, 1097, 239, 483, 484, 485,
	1098, 240, 486, 1099, 1084, 1100, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1101, 251, 0,
	252, 253, 254, 1102, 958, 255, 256, 1103, 1104, 1106,
	1105, 1107, 1108, 1109, 257, 258, 259, 260, 261, 262,
	487, 488, 1110, 263, 1111, 265, 264, 1112, 266, 1113,
	1114, 267, 268, 269, 1115, 270, 1116, 271, 272, 1117,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1118, 216, 1119, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1120, 290,
	1121, 1122, 959, 291, 292, 1123, 293, 493, 1124, 494,
	294, 1125, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1126, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1127, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1128, 500, 1129, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1130, 325, 324, 1131, 326, 502, 965,
	327, 328, 966, 1132, 329, 330, 1133, 1134, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 1135, 218, 968,
	348, 1136, 503, 349, 504, 351, 352, 1137, 353, 354,
	355, 1138, 1139, 357, 358, 359, 1140, 1141, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1142, 371, 372, 507, 373, 508,
	374, 1143, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 1144, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 1145, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 1146, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 1147, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 1148,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 1149, 442, 443, 441, 1150, 444, 445, 446,
	447, 448, 278, 449, 1151, 450, 513, 514, 515, 516,
	1152, 457, 1153, 451, 452, 517, 453, 518, 1154, 454,
	455, 456, 0, 458, 459, 1155, 1156, 460, 461, 462,
	463, 464, 466, 1157, 467, 1158, 465, 468, 469, 470,
	519, 520, 521, 1159, 472, 471, 522, 1160, 1161, 1162,
	1163, 473, 474, 523, 475, 476, 477, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2756, 0, 219, 220, 221, 222, 223, 1086,
	224, 1087, 1088, 1089, 0, 1090, 478, 1091, 1092, 1093,
	1094, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1095, 233, 234, 235, 236, 237, 238,
	1096, 1097, 239, 483, 484, 485, 1098, 240, 486, 1099,
	1084, 1100, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1101, 251, 0, 252, 253, 254, 1102,
	958, 255, 256, 1103, 1104, 1106, 1105, 1107, 1108, 1109,
	257, 258, 259, 260, 261, 262, 487, 488, 1110, 263,
	1111, 265, 264, 1112, 266, 1113, 1114, 267, 268, 269,
	1115, 270, 1116, 271, 272, 1117, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1118,
	216, 1119, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1120, 290, 1121, 1122, 959, 291,
	292, 1123, 293, 493, 1124, 494, 294, 1125, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1126,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1127,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1128,
	500, 1129, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1130,
	325, 324, 1131, 326, 502, 965, 327, 328, 966, 1132,
	329, 330, 1133, 1134, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 1135, 218, 968, 348, 1136, 503, 349,
	504, 351, 352, 1137, 353, 354, 355, 1138, 1139, 357,
	358, 359, 1140, 1141, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1142, 371, 372, 507, 373, 508, 374, 1143, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1144,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1145, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1146, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1147, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 1148, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1149, 442,
	443, 441, 1150, 444, 445, 446, 447, 448, 278, 449,
	1151, 450, 513, 514, 515, 516, 1152, 457, 1153, 451,
	452, 517, 453, 518, 1154, 454, 455, 456, 0, 458,
	459, 1155, 1156, 460, 461, 462, 463, 464, 466, 1157,
	467, 1158, 465, 468, 469, 470, 519, 520, 521, 1159,
	472, 471, 522, 1160, 1161, 1162, 1163, 473, 474, 523,
	475, 476, 477, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2102, 0,
	219, 220, 221, 222, 223, 1086, 224, 1087, 1088, 1089,
	0, 1090, 478, 1091, 1092, 1093, 1094, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 1095,
	233, 234, 235, 236, 237, 238, 1096, 1097, 239, 483,
	484, 485, 1098, 240, 486, 1099, 1084, 1100, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1101,
	251, 0, 252, 253, 254, 1102, 958, 255, 256, 1103,
	1104, 1106, 1105, 1107, 1108, 1109, 257, 258, 259, 260,
	261, 262, 487, 488, 1110, 263, 1111, 265, 264, 1112,
	266, 1113, 1114, 267, 268, 269, 1115, 270, 1116, 271,
	272, 1117, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 1118, 216, 1119, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	1120, 290, 1121, 1122, 959, 291, 292, 1123, 293, 493,
	1124, 494, 294, 1125, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 1126, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1127, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 1128, 500, 1129, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1130, 325, 324, 1131, 326,
	502, 965, 327, 328, 966, 1132, 329, 330, 1133, 1134,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 1135,
	218, 968, 348, 1136, 503, 349, 504, 351, 352, 1137,
	353, 354, 355, 1138, 1139, 357, 358, 359, 1140, 1141,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1142, 371, 372, 507,
	373, 508, 374, 1143, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 1144, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	1145, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 1146, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 1147,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 1148, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 1149, 442, 443, 441, 1150, 444,
	445, 446, 447, 448, 278, 449, 1151, 450, 513, 514,
	515, 516, 1152, 457, 1153, 451, 452, 517, 453, 518,
	1154, 454, 455, 456, 0, 458, 459, 1155, 1156, 460,
	461, 462, 463, 464, 466, 1157, 467, 1158, 465, 468,
	469, 470, 519, 520, 521, 1159, 472, 471, 522, 1160,
	1161, 1162, 1163, 473, 474, 523, 475, 476, 477, 1187,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1813, 0, 0, 0, 219, 220,
	221, 222, 223, 1086, 224, 1087, 1088, 1089, 0, 1090,
	478, 1091, 1092, 1093, 1094, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1095, 233, 234,
	235, 236, 237, 238, 1096, 1097, 239, 483, 484, 485,
	1098, 240, 486, 1099, 1084, 1100, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1101, 251, 0,
	252, 253, 254, 1102, 958, 255, 256, 1103, 1104, 1106,
	1105, 1107, 1108, 1109, 257, 258, 259, 260, 261, 262,
	487, 488, 1110, 263, 1111, 265, 264, 1112, 266, 1113,
	1114, 267, 268, 269, 1115, 270, 1116, 271, 272, 1117,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1118, 216, 1119, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1120, 290,
	1121, 1122, 959, 291, 292, 1123, 293, 493, 1124, 494,
	294, 1125, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1126, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1127, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1128, 500, 1129, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1130, 325, 324, 1131, 326, 502, 965,
	327, 328, 966, 1132, 329, 330, 1133, 1134, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 1135, 218, 968,
	348, 1136, 503, 349, 504, 351, 352, 1137, 353, 354,
	355, 1138, 1139, 357, 358, 359, 1140, 1141, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1142, 371, 372, 507, 373, 508,
	374, 1143, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 1144, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 1145, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 1146, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 1147, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 1148,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 1149, 442, 443, 441, 1150, 444, 445, 446,
	447, 448, 278, 449, 1151, 450, 513, 514, 515, 516,
	1152, 457, 1153, 451, 452, 517, 453, 518, 1154, 454,
	455, 456, 0, 458, 459, 1155, 1156, 460, 461, 462,
	463, 464, 466, 1157, 467, 1158, 465, 468, 469, 470,
	519, 520, 521, 1159, 472, 471, 522, 1160, 1161, 1162,
	1163, 473, 474, 523, 475, 476, 477, 1076, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 1086, 224, 1087, 1088, 1089, 0, 1090, 478, 1091,
	1092, 1093, 1094, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 1095, 233, 234, 235, 236,
	237, 238, 1096, 1097, 239, 483, 484, 485, 1098, 240,
	486, 1099, 1084, 1100, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1101, 251, 0, 252, 253,
	254, 1102, 958, 255, 256, 1103, 1104, 1106, 1105, 1107,
	1108, 1109, 257, 258, 259, 260, 261, 262, 487, 488,
	1110, 263, 1111, 265, 264, 1112, 266, 1113, 1114, 267,
	268, 269, 1115, 270, 1116, 271, 272, 1117, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 1118, 216, 1119, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 1120, 290, 1121, 1122,
	959, 291, 292, 1123, 293, 493, 1124, 494, 294, 1125,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 1126, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1127, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 1128, 500, 1129, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1130, 325, 324, 1131, 326, 502, 965, 327, 328,
	966, 1132, 329, 330, 1133, 1134, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 1135, 218, 968, 348, 1136,
	503, 349, 504, 351, 352, 1137, 353, 354, 355, 1138,
	1139, 357, 358, 359, 1140, 1141, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1142, 371, 372, 507, 373, 508, 374, 1143,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 1144, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 1145, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 1146, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 1147, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 1148, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	1149, 442, 443, 441, 1150, 444, 445, 446, 447, 448,
	278, 449, 1151, 450, 513, 514, 515, 516, 1152, 457,
	1153, 451, 452, 517, 453, 518, 1154, 454, 455, 456,
	0, 458, 459, 1155, 1156, 460, 461, 462, 463, 464,
	466, 1157, 467, 1158, 465, 468, 469, 470, 519, 520,
	521, 1159, 472, 471, 522, 1160, 1161, 1162, 1163, 473,
	474, 523, 475, 476, 477, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 1086, 224, 1087,
	1088, 1089, 0, 1090, 478, 1091, 1092, 1093, 1094, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 1095, 233, 234, 235, 236, 237, 238, 1096, 1097,
	239, 483, 484, 485, 1098, 240, 486, 1099, 1084, 1100,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1101, 251, 0, 252, 253, 254, 1102, 958, 255,
	256, 1103, 1104, 1106, 1105, 1107, 1108, 1109, 257, 258,
	259, 260, 261, 262, 487, 488, 1110, 263, 1111, 265,
	264, 1112, 266, 1113, 1114, 267, 268, 269, 1115, 270,
	1116, 271, 272, 1117, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 1118, 216, 1119,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 1120, 290, 1121, 1122, 959, 291, 292, 1123,
	293, 493, 1124, 494, 294, 1125, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 1126, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1127, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 1128, 500, 1129,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1130, 325, 324,
	1131, 326, 502, 965, 327, 328, 966, 1132, 329, 330,
	1133, 1134, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 1135, 218, 968, 348, 1136, 503, 349, 504, 351,
	352, 1137, 353, 354, 355, 1138, 1139, 357, 358, 359,
	1140, 1141, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1142, 371,
	372, 507, 373, 508, 374, 1143, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 1144, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 1145, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	1146, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 1147, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 1148, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 1149, 442, 443, 441,
	1150, 444, 445, 446, 447, 448, 278, 449, 1151, 450,
	513, 514, 515, 516, 1152, 457, 1153, 451, 452, 517,
	453, 518, 1154, 454, 455, 456, 0, 458, 459, 1155,
	1156, 460, 461, 462, 463, 464, 466, 1157, 467, 1158,
	465, 468, 469, 470, 519, 520, 521, 1159, 472, 471,
	522, 1160, 1161, 1162, 1163, 473, 474, 523, 475, 476,
	477, 2078, 0, 900, 857, 858, 859, 855, 856, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 2075, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 2076, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 2074, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 2077, 0, 0, 0, 0, 0,
	0, 870, 2073, 0, 833, 868, 900, 857, 858, 859,
	855, 856, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 182, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 184, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 1326, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 176, 473, 474, 523, 475,
	476, 477, 844, 177, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 900, 857, 858,
	859, 855, 856, 869, 1536, 1534, 0, 0, 868, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 182, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 184, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 1326, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 176, 473, 474, 523,
	475, 476, 477, 844, 177, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 1536, 2513, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 984, 985, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 346, 843, 218, 968, 348, 866, 953,
	349, 923, 351, 352, 0, 897, 354, 898, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 916, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 853, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 182, 419, 420, 889, 890, 892, 893,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 911, 891, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 957, 436, 437, 438, 979, 0,
	442, 443, 441, 184, 444, 445, 446, 447, 448, 278,
	887, 0, 450, 930, 931, 932, 933, 0, 457, 0,
	451, 452, 980, 453, 981, 864, 454, 455, 456, 0,
	458, 459, 0, 847, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 895, 468, 469, 470, 1326, 927, 974,
	0, 472, 471, 522, 0, 0, 0, 176, 473, 474,
	523, 475, 476, 477, 844, 177, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 900,
	857, 858, 859, 855, 856, 869, 1536, 1534, 0, 0,
	868, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 2164, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 262, 922, 921,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 2169,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 298, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 2165, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	967, 344, 345, 347, 346, 843, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	2166, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	1391, 868, 900, 857, 858, 859, 855, 856, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 458, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 519, 927, 974, 0, 472, 471, 522, 1390, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 836, 868, 900, 857, 858, 859, 855,
	856, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 949, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 948,
	239, 984, 985, 485, 0, 240, 955, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 941, 939, 940, 945, 943, 942, 944, 257, 258,
	259, 260, 929, 262, 922, 921, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 982, 0, 875, 294, 0, 295, 296, 297, 298,
	950, 951, 954, 350, 961, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 960, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 962, 952, 963, 314, 315, 316, 964, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 967, 344, 345, 347,
	346, 843, 218, 968, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 848, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 969, 362, 970, 977, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 978, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 971, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 972, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 979, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 980,
	453, 981, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 974, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 900, 857, 858, 859,
	855, 856, 869, 870, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 3506, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 848, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 519, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 900, 857, 858,
	859, 855, 856, 869, 870, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 3358, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 848, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 984, 985, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 346, 843, 3077, 968, 348, 866, 953,
	349, 923, 351, 352, 0, 897, 354, 898, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 916, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 853, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 889, 890, 892, 893,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 911, 891, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 957, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	887, 0, 450, 930, 931, 932, 933, 0, 457, 0,
	451, 452, 980, 453, 981, 864, 454, 455, 456, 0,
	458, 459, 0, 847, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 895, 468, 469, 470, 519, 927, 974,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 1596,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	868, 900, 857, 858, 859, 855, 856, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	949, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 948, 239, 984, 985, 485,
	0, 240, 955, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 941, 939, 940,
	945, 943, 942, 944, 257, 258, 259, 260, 929, 262,
	922, 921, 846, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 852, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 975, 976, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 982, 0, 875,
	294, 0, 295, 296, 297, 298, 950, 951, 954, 350,
	961, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 960, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 962, 952, 963,
	314, 315, 316, 964, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 983, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 967, 344, 345, 347, 346, 843, 218, 968,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 972, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 979, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 980, 453, 981, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 974, 2882, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 900, 857, 858, 859, 855, 856, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	1992, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 1991, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 458, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 519, 927, 974, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 900, 857, 858, 859, 855, 856, 869,
	870, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 848, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	984, 985, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 346,
	843, 218, 968, 348, 866, 953, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 916, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 853, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 889, 890, 892, 893, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 911,
	891, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	957, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 887, 0, 450, 930,
	931, 932, 933, 0, 457, 0, 451, 452, 980, 453,
	981, 864, 454, 455, 456, 0, 458, 459, 0, 847,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 895,
	468, 469, 470, 519, 927, 974, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 1596, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 868, 900, 857, 858,
	859, 855, 856, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 2169, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 984, 985, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 346, 843, 218, 968, 348, 866, 953,
	349, 923, 351, 352, 0, 897, 354, 898, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 916, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 853, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 889, 890, 892, 893,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 911, 891, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 957, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	887, 0, 450, 930, 931, 932, 933, 0, 457, 0,
	451, 452, 980, 453, 981, 864, 454, 455, 456, 0,
	458, 459, 0, 847, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 895, 468, 469, 470, 519, 927, 974,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 870, 1534, 0, 2174,
	868, 900, 857, 858, 859, 855, 856, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	949, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 948, 239, 984, 985, 485,
	0, 240, 955, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 941, 939, 940,
	945, 943, 942, 944, 257, 258, 259, 260, 929, 262,
	922, 921, 846, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 852, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 975, 976, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 982, 0, 875,
	294, 0, 295, 296, 297, 298, 950, 951, 954, 350,
	961, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 960, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 962, 952, 963,
	314, 315, 316, 964, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 983, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 967, 344, 345, 347, 346, 843, 218, 968,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 972, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 979, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 980, 453, 981, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 974, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 2172, 868, 900, 857, 858, 859, 855, 856,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	984, 985, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 346,
	843, 218, 968, 348, 866, 953, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 916, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 853, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 889, 890, 892, 893, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 911,
	891, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	957, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 887, 0, 450, 930,
	931, 932, 933, 0, 457, 0, 451, 452, 980, 453,
	981, 864, 454, 455, 456, 0, 458, 459, 0, 847,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 895,
	468, 469, 470, 519, 927, 974, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 2160, 868, 900, 857, 858,
	859, 855, 856, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 2149, 868,
	900, 857, 858, 859, 855, 856, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 984, 985, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 346, 843, 218, 968, 348,
	866, 953, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 916,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 853, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 889, 890,
	892, 893, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 911, 891, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 957, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 887, 0, 450, 930, 931, 932, 933, 0,
	457, 0, 451, 452, 980, 453, 981, 864, 454, 455,
	456, 0, 458, 459, 0, 847, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 895, 468, 469, 470, 519,
	927, 974, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 2147, 868, 2138, 2145, 858, 859, 855, 856, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 2141, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 2142, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 2143,
	2140, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 2144, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 2139, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 2135, 868, 2138, 2145, 858, 859,
	855, 856, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 2141, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	2142, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 2143, 2140, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	2144, 0, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 519, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	2139, 477, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 900, 857, 858,
	859, 855, 856, 869, 870, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 1542, 0, 870, 0, 0, 0, 868,
	900, 857, 858, 859, 855, 856, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 1978, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 984, 985, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 346, 843, 218, 968, 348,
	866, 953, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 916,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 853, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 889, 890,
	892, 893, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 911, 891, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 957, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 887, 0, 450, 930, 931, 932, 933, 0,
	457, 0, 451, 452, 980, 453, 981, 864, 454, 455,
	456, 0, 458, 459, 0, 847, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 895, 468, 469, 470, 519,
	927, 974, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 1216, 868, 900, 857, 858, 859, 855, 856, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 1215, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 1210, 868, 900, 857, 858, 859,
	855, 856, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	298, 1209, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 519, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 1205, 868, 900,
	857, 858, 859, 855, 856, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 262, 922, 921,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 298, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	967, 344, 345, 347, 346, 843, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 984, 985, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 346, 843, 218, 968, 348,
	866, 953, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 916,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 853, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 889, 890,
	892, 893, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 911, 891, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 957, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 887, 0, 450, 930, 931, 932, 933, 0,
	457, 0, 451, 452, 980, 453, 981, 864, 454, 455,
	456, 0, 458, 459, 0, 847, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 895, 468, 469, 470, 519,
	927, 974, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 900, 857, 858, 859, 855, 856, 869, 870, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	949, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 948, 239, 984, 985, 485,
	0, 240, 955, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 3535, 941, 939, 940,
	945, 943, 942, 944, 257, 258, 259, 260, 929, 262,
	922, 921, 846, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 852, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 975, 976, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 982, 0, 875,
	294, 0, 295, 296, 297, 298, 950, 951, 954, 350,
	961, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 960, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 962, 952, 963,
	314, 315, 316, 964, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 983, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 967, 344, 345, 347, 346, 843, 218, 968,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 972, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 979, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 980, 453, 981, 864, 454,
	455, 456, 0, 3534, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 974, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 900, 857, 858, 859, 855, 856, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 3533, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 3535, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 3534, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 519, 927, 974, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 900, 857, 858, 859, 855, 856, 869,
	870, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 0,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	0, 0, 2155, 2156, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 0, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	984, 985, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 3535,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 0, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	0, 952, 0, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 346,
	843, 218, 0, 348, 866, 953, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 916, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 853, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 889, 890, 892, 893, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 0, 427, 428, 911,
	891, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	957, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 887, 0, 450, 930,
	931, 932, 933, 0, 457, 0, 451, 452, 980, 453,
	981, 864, 454, 455, 456, 0, 3534, 459, 0, 847,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 895,
	468, 469, 470, 519, 927, 974, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	1021, 0, 0, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 868, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 948, 239, 483, 484, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 494, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1008, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 346, 0, 218, 968, 348,
	0, 953, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 1013, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 510, 1015, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 182, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	979, 0, 442, 443, 441, 184, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 980, 453, 981, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 465, 468, 469, 470, 1326,
	520, 521, 0, 472, 471, 522, 1021, 0, 0, 176,
	473, 474, 523, 475, 476, 477, 0, 177, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 1005, 0, 1628, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	948, 239, 483, 484, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 494, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1008, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 346, 0, 218, 968, 348, 0, 953, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 1013, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	510, 1015, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 182, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 979, 0, 442, 443,
	441, 184, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	980, 453, 981, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 465, 468, 469, 470, 1326, 520, 521, 0, 472,
	471, 522, 2622, 0, 1021, 176, 473, 474, 523, 475,
	476, 477, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 1005, 949, 1628, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 948, 239,
	483, 484, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 494, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1008, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 346,
	0, 218, 968, 348, 0, 953, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 1013, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 510, 1015,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 980, 453,
	981, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1004, 0, 1021, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	1005, 949, 1010, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 948, 239, 483, 484,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	494, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1008, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 967, 344, 345, 347, 346, 0, 218,
	968, 348, 0, 953, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 1013, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 510, 1015, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 980, 453, 981, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1021, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 1005, 0,
	1010, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 948, 239, 483, 484, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 494, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1008, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 346, 0, 218, 968, 348, 0, 953,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 1013,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 510, 1015, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 980, 453, 981, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1021, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 1005, 0, 1010, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 948, 239,
	483, 484, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 494, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 346,
	0, 218, 968, 348, 0, 953, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 510, 1015,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 980, 453,
	981, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	833, 0, 1180, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 1523, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1084, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 961, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 960, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 962, 501,
	963, 314, 315, 316, 964, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 967, 344, 345, 347, 346, 0, 0,
	968, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 182, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 972, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 184, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 1326, 520, 521, 0, 472, 471, 522, 1323, 0,
	1180, 176, 473, 474, 523, 475, 476, 477, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	151, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 1084, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 501, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 346, 0, 0, 968, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 182, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 972, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 184, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 1326,
	520, 521, 0, 472, 471, 522, 0, 0, 0, 176,
	473, 474, 523, 475, 476, 477, 0, 177, 0, 0,
	0, 0, 1180, 1179, 0, 0, 0, 0, 1177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1084, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 961, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 960, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 962, 501,
	963, 314, 315, 316, 964, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 967, 344, 345, 347, 346, 0, 0,
	968, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 972, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 1180, 1179,
	0, 0, 0, 0, 1177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1808, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1084, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 346, 0, 0, 968, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	972, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 1180, 1179, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 2820, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1084, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 501, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 346,
	0, 0, 968, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 972, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1021, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	0, 0, 1332, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 948, 239, 483, 484, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 494, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 346, 0, 218, 968, 348,
	0, 953, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 980, 453, 981, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 833, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 182, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 184, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 1326, 520, 521,
	0, 472, 471, 522, 213, 0, 0, 176, 473, 474,
	523, 475, 476, 477, 0, 177, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 151, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	213, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 1633, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 213, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 2770, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 213, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 2393, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 213, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	2906, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 701, 0, 590, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 1899, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 596, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 595, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 0, 589, 0, 590, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 599, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	596, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	595, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 590, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 599, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 596, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 1929, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 595, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 590, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 599, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 596, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 595, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 599, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 1357,
	0, 1180, 1179, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 599, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 1084, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	1356, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 0, 0, 968,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 1355, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 1354, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 1321, 0, 1180,
	1179, 0, 0, 0, 0, 1177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1084, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1320, 496, 497, 350, 961, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 0, 0, 968, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 1317, 0, 1180, 1179, 0,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1084, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1316, 496, 497, 350, 961, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 0, 0, 968, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 1255, 0, 1180, 1179, 0, 0, 0,
	0, 1177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1084, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1254, 496, 497, 350, 961, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 0, 0, 968, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 1252, 0, 1180, 1179, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1084, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1251, 496,
	497, 350, 961, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 0,
	0, 968, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 1173,
	0, 1180, 1179, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 1084, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1175, 496, 497, 350,
	961, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 0, 0, 968,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 1180, 1179, 0,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1084, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 0, 0, 968, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1180, 1179, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1084, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 1722, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 0,
	0, 968, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1180,
	1179, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1084, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 0, 0, 968, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 1180, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 1084, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 0, 0, 968,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 2281, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 2278,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 2429, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 2284, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 2426, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 2428, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 2425, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 2283, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 2427, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 2281, 240, 486, 0, 0, 2275,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 2278, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 2284, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	2274, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 2283, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	2282, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1410, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 1413,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 1411, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 1412, 471, 522, 1168,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1170, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 1013, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1165, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1167, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	1013, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1072, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1074, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 1013, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 552, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 551, 223, 541, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 544, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 545,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	546, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 540, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 541, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 544, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 545, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 546, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 1013, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 2364, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1908,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 1836, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1840,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1839, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1829, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1831, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1310, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1309, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1307, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1306, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1304, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1303, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1300,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1299, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1275, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1190, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1192, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 544, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 545, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 546, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 1936, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	1934, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 1932, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 693, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 692,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	691, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	2429, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 3241, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 531, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 530, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 529, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 2215, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 2416, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 3031, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 213, 2416, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 2413, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 1915, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1906,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 572, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 1050, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 1048, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 573,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 569,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 1051, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 568, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1853, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1852, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 572, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 562, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 573, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 569, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 1331,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	568, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1314, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1313, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1263,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1262, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1244, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1184, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 572, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	1050, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 1048, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 573, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 569, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 1051,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	568, 514, 515, 516, 0, 457, 0, 451, 1049, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 1032,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 572, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 562, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 560, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 561,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 573, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 563,
	402, 0, 403, 407, 408, 569, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 564,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	568, 514, 515, 516, 0, 457, 0, 451, 566, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 556, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 557, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 554,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 548, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 526, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 2712, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 2710, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	2697, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 2376, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 557, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 1865, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 0, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1283, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1225, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 987, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 0, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 0, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 0, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 0, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	1495, 1490, 0, 0, 0, 0, 1478, 0, 1462, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 1509, 0, 0, 1497,
	1489, 1491, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 1507, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0,
	1500, 0, 1488, 0, 0, 0, 1495, 1490, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 1508,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 1500, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 3485, 0, 0,
	0, 0, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499,
	0, 0, 1509, 3414, 0, 0, 1489, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 1495, 1490, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 1508, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 1461, 0,
	0, 0, 1500, 0, 0, 0, 0, 1481, 1495, 1490,
	0, 0, 0, 0, 1478, 0, 1462, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1498, 0, 0, 1473,
	1474, 1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1499, 0, 0, 1509, 3413,
	0, 0, 1489, 1491, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1505, 0, 1506, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 1509, 0, 0, 1497, 1489, 1491,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 1507, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 1500, 0,
	1488, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 1508, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 1500, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479,
	1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 0, 0, 3302, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0,
	1509, 3202, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 1461, 0, 0, 0,
	1500, 0, 0, 0, 0, 1481, 1495, 1490, 0, 0,
	0, 0, 1478, 0, 1462, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1499, 0, 0, 1509, 3154, 0, 0,
	1489, 1491, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 1509, 0, 0, 1497, 1489, 1491, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 1507, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 0, 0, 1500, 0, 1488, 0,
	0, 0, 1495, 1490, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 1508, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 1500, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	0, 0, 0, 3153, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1498, 0, 0, 1473,
	1474, 1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1499, 0, 0, 1509, 3152,
	0, 0, 1489, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 1506, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1508, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 1461, 0, 0, 0, 1500, 0,
	0, 0, 0, 1481, 1495, 1490, 0, 0, 0, 0,
	1478, 0, 1462, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479,
	1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 1499, 0, 0, 1509, 3117, 0, 0, 1489, 1491,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1509, 0, 0, 1497, 1489, 1491, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	1507, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 1500, 0, 1488, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	1500, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 0,
	0, 2913, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	3587, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1499, 0, 2517, 1509, 0, 0, 0,
	1489, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3586, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 1495, 1490, 0, 0,
	0, 0, 2488, 0, 1462, 0, 0, 0, 0, 1508,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 1500, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2489, 1495, 1490, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 1461, 0, 1467, 0, 0, 0, 0,
	1498, 0, 1481, 1473, 1474, 1480, 1501, 1479, 1475, 1478,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499,
	0, 0, 1509, 0, 0, 0, 1489, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1485, 1486, 1487,
	0, 1497, 0, 0, 0, 0, 1467, 0, 2605, 0,
	1482, 2604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	1499, 0, 0, 1509, 0, 0, 0, 1489, 1491, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1506,
	0, 0, 0, 0, 0, 0, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 1488, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2182, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 1495, 1490, 0, 0, 0, 2181, 0,
	0, 1462, 0, 0, 0, 0, 1508, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 1500, 0, 0, 1498, 0, 1481, 1473,
	1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 1485, 1486, 1487, 0, 0, 0, 0,
	1461, 0, 1467, 0, 0, 0, 0, 1498, 0, 1481,
	1473, 1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0, 1509,
	0, 0, 0, 1489, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1506, 0, 0, 0, 0,
	0, 0, 1476, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 1497, 0,
	0, 0, 0, 1467, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 1488, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 830, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	1500, 0, 0, 1498, 0, 1481, 1473, 1474, 1480, 1501,
	1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1490, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 1461, 0, 1467,
	0, 0, 0, 0, 1498, 0, 1481, 1473, 1474, 1480,
	1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1499, 0, 0, 1509, 0, 0, 0,
	1489, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 1497, 0, 0, 0, 0,
	1467, 0, 0, 0, 1482, 2611, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 1499, 0, 0, 1509, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1506, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 1488, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 1492, 1493, 1494, 1502, 1503, 1504, 2901, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 1495, 1490, 0,
	0, 0, 2606, 0, 0, 1462, 0, 0, 0, 0,
	1508, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 1500, 0, 0,
	1498, 0, 1481, 1473, 1474, 1480, 1501, 1479, 1475, 1478,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1485, 1486, 1487,
	0, 0, 0, 0, 1461, 0, 1467, 0, 0, 0,
	0, 1498, 0, 1481, 1473, 1474, 1480, 1501, 1479, 1475,
	1478, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	1499, 0, 0, 1509, 0, 0, 0, 1489, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1506,
	0, 0, 0, 0, 0, 0, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 1497, 0, 0, 0, 0, 1467, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 1499, 0, 0, 1509, 0, 0, 0, 1489, 1491,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 1488,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2573, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 1495, 1490, 0, 0, 0, 2559,
	0, 0, 1462, 0, 0, 0, 0, 1508, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 1500, 0, 0, 1498, 0, 1481,
	1473, 1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 1459, 1460, 0, 1492,
	1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1490, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 1461, 0, 1467, 0, 0, 0, 0, 1498, 0,
	1481, 1473, 1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1485, 1486, 1487, 0, 1497,
	0, 0, 0, 0, 1467, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 1499, 0,
	0, 1509, 0, 0, 0, 1489, 1491, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 1506, 0, 0,
	0, 0, 0, 0, 1476, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 1488, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 1508, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 1500, 0, 0, 1498, 0, 1481, 1473, 1474, 1480,
	1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1498, 0, 0, 1473, 1474,
	1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464,
	1465, 1466, 1468, 1469, 1499, 1675, 0, 1509, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1506, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 0, 0, 1692, 1669, 1676, 1659, 1702,
	1701, 0, 0, 1661, 1660, 0, 1497, 0, 0, 0,
	0, 1712, 1713, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1703, 0, 1699, 1698, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 1696, 1694, 1695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1671, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	1685, 1674, 1687, 1689, 1690, 1691, 1686, 0, 1679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1708, 1709,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1700, 0,
	0, 0, 1672, 0, 1673, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1693, 0, 0, 0, 1682, 1680,
	1681, 1684, 1683, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1664, 1665, 1667, 1668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1688, 1666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1662, 0, 0,
	1704, 1705, 1706, 1707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1670, 0, 0, 0, 0, 1677, 1710,
}
var sqlPact = [...]int{

	3797, -1000, -1000, -1000, -1000, -1000, -1000, 140, 139, 138,
	137, 136, 135, 130, 129, -1000, -1000, -1000, 128, -1000,
	-1000, 125, -1000, 115, 114, 112, 108, -1000, 106, 105,
	104, -1000, -1000, -1000, -1000, 97, 96, 95, 54905, 1779,
	66403, 57871, 1685, 49359, 65975, 48931, 65547, 65119, 92, -1000,
	64691, 91, 87, 86, -1000, -1000, 84, 1388, 40331, 83,
	81, 80, 1772, 79, 77, -1000, 75, -1000, 11361, 1291,
	-1000, 74, 73, -1000, 10078, 293, 57021, 2211, 72, 71,
	39902, 2208, 2212, -1000, -1000, 1682, -1000, -1000, 70, 68,
	67, 64, 63, 60, 58, 54, 53, -1000, 50, 49,
	48, 47, 46, 45, 44, -1000, 43, 42, 38, 35,
	34, 30, 29, 28, 27, 26, 25, -1000, 11405, 1561,
	1433, 1431, 1420, 1411, 1410, 860, 21, 20, 19, 18,
	11, 10, 9, -1000, -1000, 8, 6, 5, 4, -1000,
	2, 0, 127, -1, -2, -5, -6, -7, 1849, 2224,
	1308, 632, 20321, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 70623, 66825, -8, -44,
	-9, -1000, 2518, 812, 33468, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 384, -1000, -1000, -1000, 205,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1634, 651, -1000, -1000, -1000, 64263,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1777, -60,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 643, -1000, 1774,
	131, 1714, -1000, -1000, -1000, -1000, -1000, 66825, -1000, -1000,
	2868, 2867, 1631, 640, 63841, -1000, 1206, -1000, 796, 23039,
	-1000, 1001, -1000, 23039, 201, -1000, -1000, -1000, -1000, -1000,
	48503, 16705, 48075, 47647, 44237, 63413, 16267, 54483, 1116, -1000,
	-1000, -1000, -1000, -1000, -29, 41609, 66825, -1000, 200, -1000,
	-1000, -1000, -1000, -1000, -1000, 29485, 621, 29022, 862, 28559,
	813, -1000, -1000, -1000, -1000, 2865, 2861, 1007, 2859, 2450,
	70201, 1460, 2856, 1423, 1071, 907, 2854, 2852, 2850, 2848,
	2846, 2844, 2842, 1187, 62985, 2244, 1324, 43799, 43361, 54905,
	54905, 2025, 62557, 1171, 1163, -1000, -1000, -1000, -1000, -1000,
	-1000, 2343, 2210, 2204, 54055, -1000, -1000, 2841, 2838, 2836,
	2835, 2834, 69779, 1447, 2832, 1953, 2829, 2825, 2824, 2814,
	2813, 2812, 2811, 2806, 2805, -1000, 53627, 53199, 52771, 52343,
	62129, 42923, 42485, -1000, -1000, -1000, 35176, 5528, 5254, 61701,
	36490, 54905, 54905, -1000, -1000, 29936, 93, -1000, -1000, -1000,
	2200, -1000, 29936, 93, -1000, 66825, -1000, 2240, 1497, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2242, 1368,
	2654, 42047, 1617, 1186, 2340, 2338, 1270, 1985, 2335, 2334,
	2318, 2306, 2296, 1363, 1981, 378, 19858, 1319, 1304, 2293,
	2282, 2717, 1706, 47219, 2803, 2800, 2491, 2278, 2257, 2199,
	-1000, -1000, -1000, -1000, 1227, -1000, -1000, 49781, -1000, -1000,
	1012, -1000, -1000, 1012, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1113, 68935, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1298,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1597, -1000,
	1601, -1000, -1000, 1818, 1196, 2224, 1909, 2486, 2486, 2486,
	2533, 353, 350, -1000, 127, -1000, -1000, 75495, -1000, -1000,
	29936, 29936, 29936, 29936, 29936, 1619, -1000, 639, -1000, -1000,
	673, -1000, 636, 537, -1000, -1000, -1000, -1000, -1000, -1000,
	633, 2732, -1000, 840, -1000, -1000, -1000, -1000, 2650, -1000,
	18944, -1000, -1000, -1000, 358, 630, 29936, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 192, 811, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 524,
	1495, 523, 523, 523, -1000, -1000, 898, -1000, -1000, -1000,
	227, 522, 226, 521, -1000, -1000, -1000, -1000, 2237, 627,
	625, -1000, 622, 618, 609, -1000, -1000, -1000, 608, 607,
	606, 605, 604, 601, 596, 595, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 897, -1000, 587, 568, 561, 560, 559,
	557, 556, 555, 554, -1000, -1000, -30, 66825, -1000, 384,
	-30, -1000, -1000, 551, -1000, 23490, 23490, 23490, -1000, -1000,
	1769, 29936, -1000, 1904, -1000, 281, -26, 761, 34320, -1000,
	32612, 761, 679, 37770, -1000, 2196, -1000, -1000, 550, 190,
	-1000, -1000, 2193, 66825, 17141, 66825, 54905, 54905, 54905, 2402,
	29936, -1000, -1000, 41183, 66825, 55327, 2608, 75951, 41183, 66825,
	2235, -1000, -1000, -1000, 66825, -1000, 29936, -1000, 2604, 1178,
	45099, 2550, -41, -1000, -1000, -1000, -1000, -1000, -1000, 1934,
	1938, 986, 1816, 1300, -1000, 23039, 2443, -1000, -1000, -1000,
	189, 17141, -1000, 2456, 2384, 1106, -1000, 1806, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1455, 2379, -1000, 1811,
	2378, 1442, -1000, -1000, 880, 2377, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1697, -1000, -1000, 2478, -1000,
	-1000, 3059, 2376, -19, -1000, -1000, 35618, 41609, -32, -1000,
	-1000, -68, -1000, 15829, 75495, -1000, -1000, -1000, 75495, 620,
	-1000, -1000, 2375, -1000, 75495, 338, -1000, -1000, 2374, -1000,
	-1000, -1000, 2799, -1000, 2798, 1892, 2797, 2796, 2795, -1000,
	1366, 1488, 2792, -1000, 2791, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 51915, 1767, -1000, -1000, 51059, 51487, 903, -1000,
	858, 1890, -1000, -1000, 1883, -1000, 808, -1000, 2790, 61273,
	2044, 858, 1882, -1000, -1000, -1000, -1000, -1000, 54905, -1000,
	54905, -1000, 54905, -1000, 1253, -1000, 69357, -26, -1000, -1000,
	-1000, -1000, -1000, 2372, 2785, 2784, 2781, -1000, 66825, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 178, 2371,
	-1000, -1000, 178, 2369, -1000, 178, 2363, -1000, 170, 2361,
	-1000, -1000, 1687, 2358, -1000, -137, 2350, -1000, -1000, -137,
	2349, -1000, -47, -1000, -1000, -1000, 812, -1000, 34748, -1000,
	34748, 60845, 44673, 853, 599, 39474, 75495, -1000, 35618, 75495,
	-1000, 44673, 51059, -1000, 60417, 50637, -1000, -1000, 1183, 1976,
	-1000, -1000, -1000, -1000, 44673, 44673, 44673, -1000, 59989, -1000,
	1611, 1358, 2475, 54905, -1000, 1503, -1000, -1000, -1000, 2503,
	2233, -1000, 40757, 56593, -1000, 56171, -1000, 55749, -1000, 54905,
	-1000, 54905, -1000, 2780, 2779, 2778, -1000, 2777, 2497, 75495,
	2495, -1000, 2354, 1451, 1414, 66825, -1000, -1000, 66825, -1000,
	66825, -1000, -1000, -1000, 1933, -1000, -1000, -1000, -1000, 54905,
	-1000, -1000, -1000, -1000, -1000, -1000, 2231, -1000, 1348, -1000,
	1454, -1000, 1177, -1000, -1000, 179, -1000, -1000, -41, -1000,
	68935, -1000, -1000, 2224, 1909, -1000, 66825, -1000, 1342, 54905,
	-1000, 1970, -1000, 1229, -1000, 2224, 1776, 2028, 28096, 2009,
	29936, 127, -1000, -1000, 127, 127, 22588, -1000, -1000, 75951,
	75951, 17141, 1126, 29936, 29936, 29936, 29936, 29936, 29936, 29936,
	29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936,
	29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936,
	29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936, 1835, 29936,
	1110, 29936, 29936, 29936, 29936, 1439, -1000, -1000, 1557, 414,
	1582, -1000, 2664, 2664, 2664, 75781, 75781, 396, 2776, 673,
	-1000, 29936, -1000, 93, 29936, 17579, -1000, 2706, 1236, -1000,
	-1000, 350, 7218, 1871, -1000, 349, 18042, -1000, -1000, -1000,
	18944, 537, 27633, 29936, 863, 75495, 15393, 2249, 2095, -1000,
	2705, -1000, -1000, 2652, -1000, -1000, -1000, -1000, 2652, 1124,
	1122, 2700, -1000, 2652, 2652, 536, 648, 647, 645, 590,
	570, 29936, 29936, 29936, 29936, 29936, 29936, 29936, 29936, -1000,
	27182, 26719, 26256, 31289, 25793, 29936, 19395, 25330, 24867, 66825,
	-30, 2603, 29936, 109, -1000, 74313, -1000, 109, 109, 532,
	-49, 75495, 1986, 1986, 33894, 1928, 1642, 1642, 1642, -1000,
	531, 661, -10, -13, -14, -1000, -1000, -15, -16, 761,
	11889, 58293, 1670, 761, 761, 169, 188, 346, 32186, 1904,
	58293, -1000, -1000, 54905, 530, 17579, 17141, 1212, -50, 164,
	1996, 1995, 1990, -1000, 1989, 1331, -61, 1105, -57, -1000,
	3730, -66, -1000, 1047, -1000, -1000, -1000, 261, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 895, 527, 525, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 524, 1495, 523, 523,
	523, -1000, -1000, -1000, 227, 522, 226, 521, -1000, -1000,
	-1000, -1000, -1000, -1000, 2184, -68, 55327, 755, -67, 1014,
	-41, -1000, -1000, -1000, 45099, 1012, -1000, 1338, -1000, -1000,
	-1000, -1000, -1000, -1000, 1190, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2720, -1000, 2670, -1000, -1000, 2699, -31, -1000,
	-1000, 17141, -1000, -45, 1432, -1000, 46791, 1790, 2480, 2470,
	1247, -1000, 1207, 2528, 49781, 2556, 2588, 1048, -1000, 2178,
	-1000, -1000, 784, 1341, 1099, 49781, 1811, -1000, 75951, -1000,
	2058, 2527, 930, 1128, 930, 930, 1138, -1000, 49781, 1095,
	1536, 44673, -1000, 1093, -1000, -59, 2553, 2586, 962, -1000,
	2177, 1089, -1000, -1000, 54905, 17141, 749, -1000, 44673, -32,
	41609, 66825, 155, -1000, 29936, 93, 29936, 93, -1000, -1000,
	2347, -1000, -1000, -1000, 2775, 1441, 1951, -1000, -1000, -1000,
	518, 1878, 2175, 66825, 2000, -37, 54905, -1000, 1811, 1877,
	-1000, -1000, 50209, -1000, 1517, -1000, 2337, 2331, 539, 2774,
	-1000, 1766, 1868, -1000, -1000, -1000, 68513, 1096, 2330, 954,
	336, 2597, 336, 38622, -1000, 66825, -1000, 66825, -1000, -1000,
	-1000, 2772, -1000, 54905, -1000, -1000, 54905, -1000, 54905, -1000,
	54905, -1000, 54905, 54905, -1000, 66825, 44673, 44673, 44673, 4303,
	45947, -69, -72, 344, -1000, 59567, 66825, 953, 46369, 66825,
	2433, -209, -1000, 853, 853, 749, -1000, 749, -1000, 54905,
	2230, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2771, 2770,
	-1000, 857, 54905, 66825, 54905, -1000, -1000, 66825, -1000, 66825,
	-1000, 857, 66825, 857, 66825, 857, 66825, -1000, -1000, -1000,
	-1000, -1000, -1000, 93, 29936, 1276, -1000, 2227, -1000, 2226,
	-1000, 15, -1000, -1000, -1000, -1000, 1450, 54905, 54905, 54905,
	54905, 66825, 54905, -1000, 49781, -1000, -1000, 2224, -1000, -1000,
	1921, -1000, -34, 966, -1000, -1000, -1000, -1000, -1000, 75495,
	519, -1000, -1000, 75495, 1339, 2006, -1000, 2006, -36, -1000,
	73946, 1969, 54905, -1000, -1000, -1000, -1000, -1000, 783, 842,
	842, 1221, 1221, 1221, 1221, 2616, 493, 373, 5267, 3861,
	3861, 708, 708, 708, 708, 708, 3861, 1085, 509, 509,
	1085, 1085, 1085, 1085, 1085, 509, 509, 509, 3861, 3861,
	3861, 75781, 9220, 10432, 29936, 29936, 1082, 1532, 414, 9412,
	29936, 10759, 10759, 10759, 10759, -1000, 1384, -1000, -1000, -1000,
	-1000, 2174, 516, 31289, 31289, -1000, -1000, -1000, -1000, 18493,
	29936, -1000, -1000, -1000, -1000, 24404, -1000, -1000, 73374, -249,
	342, -213, -24, -1000, 29936, 29936, 29936, 339, -1000, 334,
	-1000, -1000, 1077, -1000, 1075, 1074, 1070, -1000, 515, 154,
	29936, 66825, -1000, 11360, 660, -144, -1000, -74, 1205, -1000,
	29936, 153, -1000, 1640, 514, 512, 331, -75, -1000, 328,
	778, 768, 326, 322, 321, 29936, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 75414, 11099, 10838, 10509,
	6413, 10179, 9568, -77, 319, -1000, 2164, -213, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 318, -1000, 317, -1000,
	75128, -213, 313, 552, -1000, 31289, 31289, 31289, -1000, 312,
	-1000, 74027, -1000, 75047, 23953, 23953, 23953, 310, 74761, 29936,
	-213, -80, -1000, -85, -1000, -1000, 508, -90, 886, 23490,
	33040, 17141, -1000, 886, 886, 29936, -1000, 29936, 1982, -1000,
	-1000, -1000, 1979, 1591, 1986, 33894, -1000, -1000, -1000, -1000,
	58293, 616, 761, -1000, -1000, -1000, -1000, -1000, 58293, -1000,
	2650, 2101, -1000, -1000, -1000, 66825, 384, -1000, 58293, 58293,
	17141, 761, -1000, 307, 36916, -24, 152, -1000, -1000, 17141,
	2085, 2085, 2085, 2085, -1000, -1000, 66825, 2620, -1000, 1508,
	-1000, 75951, -1000, 672, 947, -1000, 2677, 506, -1000, 2652,
	2652, 66825, 107, 23039, -1000, 1012, -1000, -1000, 1303, -1000,
	1470, -1000, 1052, -1000, -1000, -1000, 23039, -1000, 1980, 66825,
	66825, 54905, -1000, -1000, 1867, 68091, 1863, 75951, 66825, -1000,
	-1000, 497, 496, 1968, 1967, 66825, 66825, 1966, 67669, 67247,
	66825, 1565, 29936, 1824, 1923, 93, 93, -1000, -1000, 93,
	495, 1039, 54905, 54905, 54905, 1438, -1000, -1000, -1000, -1000,
	-1000, 54905, -1000, -1000, 2676, -1000, 930, -1000, -1000, -1000,
	930, 1811, 1427, 54905, 44673, 879, 66825, 1568, 93, 93,
	-1000, -1000, 93, 494, 17141, 1560, -1000, 2050, -1000, -93,
	-1000, -1000, 14957, 75495, -1000, 75495, -1000, 66825, -1000, 900,
	66825, 46369, 828, 2329, 38196, -68, 853, 44673, 54905, -37,
	-1000, 1811, 2327, 384, -1000, -1000, 44673, 44673, 44673, 2769,
	481, 2768, -1000, 54905, 2321, 1760, 1856, 2344, 722, 66825,
	886, 33894, 1472, -1000, 37344, 931, 66825, 1403, 76, -1000,
	-1000, -1000, -3, 66825, -1000, 2763, -1000, -1000, 178, 178,
	178, -1000, 170, 1687, -1000, -137, -137, -1000, -1000, 4303,
	4303, 853, -39, 479, -1000, 741, 740, 36054, 44673, -95,
	-1000, -1000, -1000, -1000, -1000, 54905, 66825, 597, 2043, 66825,
	-98, -1000, 150, 478, -1000, 853, 35618, 2163, -1000, -1000,
	878, -1000, 1147, -1000, -1000, -1000, -1000, -1000, -1000, -20,
	-68, -68, -1000, 857, -1000, 857, -1000, 857, -1000, 75495,
	-1000, 1264, 1259, 66825, -1000, 17141, 66825, 54905, 17141, 54905,
	2222, 2213, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1339, -1000, 29936, -1000, -1000, -1000, 22588, 1826, -1000, -1000,
	54905, -21, 29936, 29936, 7843, 7696, 29936, 31289, 31289, -1000,
	29936, 6891, -1000, -1000, -1000, -1000, -1000, 2161, 477, 29936,
	75951, 4648, 4602, -1000, 304, 8694, 1085, -1000, 29936, -1000,
	302, 22137, -1000, 74394, -33, -101, -1000, 2719, 1907, 1481,
	1518, 1301, 2665, 14521, -213, -103, -1000, -1000, 671, -1000,
	2301, -1000, 29936, 74680, 14085, -1000, 39048, 887, 1696, -1000,
	-1000, 2652, 754, -1000, -1000, -1000, 754, -1000, 73328, 75951,
	75951, 29936, 29936, -1000, 29936, 29936, 29936, -1000, -1000, 29936,
	-1000, -1000, 2160, 29936, -1000, 75951, 75951, 31289, 31289, 31289,
	31289, 31289, 31289, 31289, 31289, 31289, 31289, 31289, 31289, 31289,
	31289, 31289, 31289, 31289, 31289, 31289, 1942, 31289, 2658, 2658,
	2658, -1000, 2206, 2160, 29936, 29936, 75951, 299, 298, 295,
	-1000, 29936, -213, -1000, -1000, 4303, -1000, 2089, -1000, 29936,
	-1000, -126, -1000, 1904, -1000, -1000, 2089, 2089, -106, 75495,
	33894, 33894, -1000, 474, 29936, 1978, -1000, 659, -1000, -108,
	-1000, 58293, -1000, 658, -251, -1000, 738, -1000, -1000, -1000,
	-1000, 384, -1000, -1000, -1000, 145, 58293, -1000, -109, -1000,
	2594, 288, 17141, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-68, 1701, 2718, -1000, 2663, 667, 656, 285, 2652, 282,
	278, -68, 66825, -1000, -41, -1000, -1000, -1000, 29936, -1000,
	-1000, 2469, 1068, 1067, -1000, 2320, -1000, 1855, -1000, 933,
	-1000, 1381, -1000, 29936, 29936, 473, 463, 1484, 2759, 949,
	2319, 1687, 2317, 1687, -1000, -1000, 821, -1000, 75495, 453,
	452, -1000, -45, 1425, 877, -1000, -1000, 29936, 29936, 59141,
	-1000, 337, 2478, -22, -1000, 1063, -1000, -1000, -1000, 1811,
	1058, -1000, -1000, 1507, -1000, -1000, 859, -1000, -1000, 29936,
	-1000, -59, 1057, 853, 2127, -1000, -1000, 2756, 2754, 2753,
	277, -111, -62, 75951, 2576, 1784, 66825, 54905, 820, -1000,
	2650, -1000, -1000, -1000, 54905, 2574, -1000, 858, -1000, -1000,
	2752, -1000, 948, 17141, 54905, 2315, 1941, 722, 45525, -1000,
	858, 1696, -121, -1000, 1403, 21674, 2474, -114, -1000, -1000,
	-1000, 886, 38622, 33894, 29936, 2751, -116, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 58719, 58719, 44673, 44673,
	44673, 853, 66825, 66825, 46369, 2748, 451, 66825, 66825, 450,
	-1000, 66825, 66825, 2747, 44673, -1000, -1000, 93, -1000, 1699,
	54905, 13649, -1000, -1000, -1000, -1000, -1000, 857, -1000, -1000,
	1577, 1795, 1577, 1355, 1352, 1717, 73042, -1000, -1000, 2016,
	2473, 17141, 2575, 10759, 29936, 29936, 5596, 4452, 466, 10759,
	29936, 29936, 75951, 5052, -123, 29936, 29936, -1000, 29936, 654,
	75495, 2712, 29936, 275, 274, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 273, -1000, -1000, -1000, -1000, -1000,
	75495, 29936, 144, -1000, -1000, -1000, 71045, -1000, 29936, 272,
	270, -1000, -1000, -1000, 266, 262, 5859, 4562, 72756, 72710,
	72424, 75495, 2206, 75495, -1000, -1000, 619, 619, 1118, 1118,
	1118, 1118, 2658, 826, 894, 476, 442, 442, 442, 720,
	685, 685, 442, 442, 442, 2123, 1950, 445, 4874, -1000,
	-1000, 75495, 75495, 255, -1000, -1000, -1000, -213, 250, 2077,
	2525, 75495, -1000, 33894, 2077, 2077, -1000, -1000, 1591, 66825,
	75495, 33894, -26, -1000, 2650, -1000, -1000, 2101, -1000, 12337,
	-1000, 17141, -1000, -1000, 36916, -1000, 440, -1000, 142, -1000,
	-1000, 653, 2746, 666, -1000, 248, -1000, -1000, -68, 75495,
	66825, 66825, 66825, 2311, -1000, 3950, -1000, 72138, -124, -1000,
	73946, 29936, 66825, -1000, 1480, 2024, 994, -1000, 2040, 66825,
	-1000, 66825, -1000, -1000, 66825, 66825, 54905, 2277, -125, 75495,
	-86, -1000, 724, -1000, 1142, -1000, 13213, 54905, 54905, 44673,
	2276, -131, 17141, -1000, 44673, -1000, -1000, -1000, 2032, -1000,
	57443, 1734, 93, -1000, 2744, 439, -1000, 1684, -1000, 591,
	1811, 93, -1000, -1000, 428, 66825, 1756, 425, 17141, 1943,
	722, 45525, -1000, 1096, 2028, -1000, -92, -1000, 441, 93,
	1696, -1000, -121, 75495, -1000, 723, -1000, -132, -1000, -1000,
	239, -1000, 2431, 2430, -1000, -1000, 29936, 424, 422, 66825,
	2423, -1000, -1000, -138, -1000, 1822, -1000, -1000, -1000, -1000,
	-1000, 17141, 1335, -1000, 421, 419, -1000, -1000, -1000, -1000,
	-1000, 2473, 10759, 10759, 29936, 29936, 29936, 10759, 5052, -139,
	-1000, 10759, 10759, -213, -1000, -1000, 74394, -1000, -1000, -1000,
	75495, 12777, 1590, -1000, 72092, -1000, -1000, -1000, -1000, 29936,
	29936, -1000, -1000, -1000, -1000, -1000, 31289, 2121, 417, 75951,
	-1000, -1000, 835, 29936, 29936, 1904, 835, 835, -1000, -152,
	-1000, 761, -1000, -1000, -1000, 2650, 142, -1000, 2743, 17141,
	664, -1000, 2742, -1000, -1000, -1000, -1000, 66825, -1000, 66825,
	-1000, 17141, 66825, 2130, 1847, -1000, -1000, 1963, 415, 31289,
	54905, 650, 2096, 1487, 29936, 1826, -153, -154, 1846, -1000,
	-1000, 1845, 29936, -1000, 75951, 54905, 1687, 1687, -155, -160,
	-1000, 29936, 1035, 66825, 21223, -1000, 2741, 2478, -1000, -1000,
	-1000, 29936, 1026, -1000, -137, 1568, 2063, -1000, -1000, -1000,
	-1000, 1962, -1000, -1000, 66825, 1957, 855, -1000, 46369, 828,
	834, -1000, -1000, -1000, 29936, -1000, 54905, 29936, 1750, -1000,
	722, 45525, -1000, 2344, 1403, -1000, 2345, 66825, 2466, -1000,
	2028, 414, -1000, 853, 413, 412, -161, 29936, 29936, -162,
	411, 853, -149, -1000, 695, 683, -1000, -1000, 54905, 54905,
	29936, 29936, -1000, 10759, 10759, 10759, -1000, 235, -1000, -1000,
	1696, 2524, -1000, 71806, 71520, 3948, 31289, 75951, -163, -1000,
	66825, 75495, -213, -1000, -1000, -1000, 58293, 571, -1000, 2740,
	-1000, -1000, 1494, -1000, -1000, -1000, 66825, 1852, -1000, -1000,
	29936, 4874, 409, 29936, -1000, -1000, 2029, 2135, 2032, 408,
	-1000, -1000, -1000, -1000, -1000, 1467, -1000, -1000, 75495, 2499,
	-1000, -1000, -1000, 406, 404, 75495, 403, 702, 2109, -1000,
	-1000, -1000, 75495, 401, 828, -1000, 1613, 1734, 400, -1000,
	-1000, -1000, 2045, 231, 2570, 834, -1000, 2638, -1000, -169,
	948, -170, 54905, 45525, -1000, 1941, -1000, 1135, -171, 66825,
	1403, -1000, -1000, 44673, 44673, 1487, -176, -177, -1000, 44673,
	-1000, 1822, -1000, 66825, -1000, 66825, -1000, -1000, -179, -184,
	-1000, 1502, 29936, -1000, -1000, 3948, -185, -1000, -197, -1000,
	2561, -1000, -1000, -1000, -1000, -1000, 2310, 71474, 1910, 66825,
	6333, 2126, -1000, -1000, 1568, 66825, 54905, 942, 17141, 1577,
	1577, 29936, 20772, 1612, 29936, -1000, 54905, 66825, -1000, 2421,
	2032, 93, -1000, -1000, 1487, 399, 1487, 397, -1000, 1943,
	1242, -1000, 886, -1000, -1000, -186, -187, 2032, 1487, -1000,
	-192, -1000, -194, -201, -1000, -1000, 208, 30838, 30838, 30838,
	-213, -1000, 66825, 393, 2266, -1000, 1721, 1475, 207, 963,
	-1000, -1000, 2096, -203, 384, -1000, 29936, -1000, -208, -1000,
	921, -210, -1000, 917, -211, -1000, 2107, -1000, -216, 382,
	-218, -1000, -1000, -1000, 1568, 855, 2032, 29936, 2032, 29936,
	-1000, 38622, -1000, 853, 853, 1568, 2032, 853, -1000, -1000,
	-1000, 2294, -1000, 31740, 1698, 1345, 73660, 2294, 2294, -1000,
	-1000, 66825, -1000, 1748, 1732, 1288, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1910, 75495, -1000, 1577, 2059, -1000,
	1577, 2106, -1000, 1610, -1000, 66825, -1000, 66825, 828, -1000,
	1568, -219, 1568, -224, -202, -1000, -1000, -1000, 1568, -1000,
	-1000, 1466, 2580, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2408, -1000, 964, 1710, 1710, 1721, -1000, 380,
	-1000, 359, -1000, -225, -1000, -1000, 885, 1487, 885, 1487,
	-1000, -1000, 1344, -1000, -1000, 1666, 30387, -1000, 2623, -1000,
	-1000, 1975, -1000, 2096, 29936, 29936, 1686, -1000, 2739, 2032,
	-1000, 2032, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -227,
	-235, -1000, -1000, -1000, -1000, 1568, 1568, 1568, 1025, 885,
	885, -1000, 355, -1000, -1000, 29936, -236, 1568, -1000,
}
var sqlPgo = [...]int{

	0, 3442, 3435, 3434, 3431, 3428, 3425, 3421, 3420, 3419,
	3417, 3416, 3411, 3409, 3408, 3407, 3405, 3402, 3401, 3398,
	3397, 3396, 3393, 3389, 3388, 3387, 3385, 3382, 3381, 3380,
	3379, 3378, 3377, 3374, 3373, 3371, 3369, 3368, 3366, 3363,
	3362, 3361, 3351, 3349, 3347, 3346, 3344, 3340, 30, 3337,
	3336, 3335, 3334, 3333, 3329, 3328, 3323, 3322, 3319, 3313,
	3309, 3303, 3299, 3297, 3295, 3294, 34, 3293, 214, 3292,
	3287, 3286, 3285, 3284, 3283, 3279, 3275, 3274, 3273, 213,
	3270, 144, 3269, 3259, 3256, 3248, 3247, 212, 3246, 3244,
	3242, 3241, 3236, 3235, 3232, 3230, 125, 3228, 3226, 181,
	3225, 3223, 3222, 3221, 3220, 3218, 3212, 3211, 3210, 3207,
	189, 3206, 210, 3205, 3199, 3198, 3197, 3187, 3186, 3185,
	3183, 3181, 3179, 3178, 3177, 3176, 3175, 3174, 3169, 3168,
	3165, 3163, 3161, 3159, 3154, 3153, 3152, 3151, 3150, 3147,
	222, 138, 3146, 3144, 205, 204, 3143, 3136, 95, 92,
	68, 3135, 98, 185, 207, 8618, 202, 3133, 3130, 3125,
	143, 3124, 3122, 3121, 3118, 74, 65, 130, 136, 121,
	123, 139, 3117, 3115, 71, 50, 32, 28, 103, 3114,
	3113, 3111, 2574, 88, 3109, 3108, 201, 186, 3107, 1584,
	3106, 179, 113, 99, 90, 87, 3105, 120, 18, 3103,
	149, 43, 3102, 114, 61, 27, 6617, 7971, 3101, 80,
	215, 78, 211, 191, 160, 167, 164, 126, 427, 3096,
	192, 3095, 96, 151, 3094, 3087, 3086, 55, 141, 75,
	3084, 4, 3, 129, 11, 86, 13, 3082, 14, 3081,
	3080, 3079, 3078, 25, 122, 3076, 116, 57, 3068, 23,
	3060, 64, 163, 3057, 172, 94, 3052, 3050, 195, 161,
	146, 3049, 62, 176, 3048, 3047, 3046, 3044, 3042, 93,
	22, 97, 3041, 3036, 107, 183, 3033, 35, 3032, 124,
	73, 128, 217, 145, 174, 85, 171, 131, 180, 3031,
	3030, 3024, 156, 3021, 3018, 104, 165, 3017, 3016, 208,
	33, 54, 182, 53, 3015, 119, 3014, 159, 3012, 3011,
	3010, 206, 140, 168, 7, 70, 91, 24, 9, 175,
	118, 83, 84, 3009, 3673, 1149, 108, 3008, 132, 106,
	49, 105, 110, 200, 40, 3007, 3006, 367, 3005, 3004,
	2999, 2998, 134, 2997, 2996, 2995, 109, 38, 66, 2994,
	117, 67, 12, 89, 203, 79, 170, 166, 197, 2991,
	133, 2990, 37, 111, 2989, 157, 196, 319, 2988, 299,
	115, 2987, 162, 2985, 2984, 2983, 2981, 150, 2979, 2978,
	155, 2977, 152, 2976, 2974, 142, 112, 135, 100, 52,
	2973, 58, 184, 2972, 154, 56, 2971, 730, 29, 0,
	6996, 5645, 7106, 2969, 657, 2968, 169, 102, 2967, 2966,
	2964, 76, 2944, 60, 2943, 2942, 36, 2940, 15, 6,
	8, 19, 16, 1579, 1135, 2938, 2937, 82, 101, 147,
	2936, 225, 173, 2934, 2933, 2932, 72, 2931, 26, 2929,
	21, 2928, 2925, 31, 5, 17, 2918, 2915, 187, 2909,
	188, 2908, 2905, 2602, 2904, 199, 63, 2903, 198, 2902,
	127, 153, 2901, 2899, 2894, 2891, 193, 2888, 2886, 10,
	20, 1, 2885, 2884, 2883, 158, 2, 2440, 2882, 2874,
	69, 2873, 2872, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 455,
	455, 19, 31, 20, 32, 13, 456, 456, 456, 456,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	454, 454, 170, 170, 169, 164, 164, 457, 457, 171,
	171, 171, 173, 173, 37, 37, 95, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 397, 397, 398, 398, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	464, 464, 465, 465, 466, 466, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 245, 245, 221, 221, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 450, 450, 259, 259,
	364, 364, 68, 68, 278, 278, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	260, 260, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 366, 366, 80, 80, 80,
	335, 335, 84, 84, 84, 293, 293, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	453, 453, 252, 252, 186, 186, 186, 186, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 460, 460,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 391,
	391, 268, 268, 389, 389, 405, 405, 390, 390, 225,
	225, 225, 225, 225, 226, 226, 226, 396, 396, 396,
	396, 396, 396, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	114, 114, 123, 123, 123, 123, 123, 118, 118, 120,
	120, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	115, 115, 115, 115, 125, 125, 125, 125, 299, 299,
	299, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 136, 136, 136, 136, 136, 136, 349, 349, 132,
	132, 132, 132, 135, 135, 135, 135, 283, 283, 129,
	129, 129, 130, 130, 130, 134, 134, 137, 137, 137,
	137, 116, 116, 116, 468, 468, 468, 138, 138, 128,
	128, 139, 139, 139, 139, 139, 139, 139, 139, 127,
	127, 127, 126, 126, 126, 126, 119, 451, 451, 448,
	448, 448, 448, 448, 448, 448, 449, 449, 452, 452,
	89, 89, 89, 58, 58, 469, 469, 469, 59, 59,
	470, 470, 470, 458, 458, 458, 459, 459, 459, 459,
	459, 459, 227, 227, 228, 228, 316, 316, 316, 316,
	316, 231, 231, 172, 172, 172, 234, 235, 235, 232,
	232, 233, 233, 233, 237, 237, 236, 239, 239, 238,
	315, 412, 412, 414, 414, 414, 414, 414, 414, 414,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	410, 410, 410, 411, 406, 406, 407, 407, 407, 407,
	229, 229, 230, 230, 230, 230, 408, 409, 250, 250,
	352, 413, 413, 415, 415, 417, 471, 471, 471, 471,
	471, 471, 472, 472, 314, 314, 243, 243, 418, 418,
	418, 418, 419, 419, 419, 419, 419, 422, 421, 420,
	420, 420, 420, 420, 345, 345, 345, 62, 62, 62,
	280, 280, 279, 279, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 143, 143,
	60, 60, 60, 178, 178, 57, 57, 57, 474, 474,
	61, 61, 61, 475, 475, 67, 67, 67, 67, 67,
	67, 56, 56, 56, 56, 56, 476, 476, 300, 300,
	298, 298, 249, 249, 351, 190, 190, 165, 165, 165,
	23, 25, 25, 17, 17, 34, 34, 35, 35, 30,
	30, 461, 461, 462, 462, 90, 90, 94, 94, 94,
	102, 102, 142, 142, 142, 142, 142, 142, 142, 38,
	38, 38, 38, 50, 50, 50, 50, 100, 478, 478,
	478, 101, 101, 477, 477, 185, 185, 185, 185, 187,
	187, 311, 311, 312, 312, 479, 479, 313, 313, 313,
	313, 180, 179, 181, 181, 55, 55, 55, 174, 174,
	175, 175, 176, 176, 177, 177, 480, 480, 87, 87,
	87, 145, 145, 220, 220, 307, 307, 307, 244, 244,
	195, 195, 310, 310, 308, 308, 308, 308, 277, 277,
	277, 144, 144, 257, 257, 270, 270, 271, 271, 361,
	361, 272, 99, 99, 155, 155, 153, 153, 153, 153,
	153, 153, 160, 160, 261, 261, 161, 161, 161, 161,
	162, 162, 162, 154, 154, 154, 156, 156, 156, 156,
	156, 156, 156, 159, 159, 159, 159, 163, 163, 163,
	158, 158, 429, 429, 429, 431, 431, 432, 428, 428,
	430, 430, 473, 473, 282, 282, 282, 241, 242, 240,
	240, 247, 247, 246, 248, 248, 350, 350, 350, 166,
	166, 166, 275, 275, 275, 275, 303, 303, 301, 301,
	301, 302, 302, 304, 304, 304, 305, 305, 306, 306,
	274, 274, 331, 331, 157, 157, 157, 254, 254, 254,
	255, 255, 322, 322, 322, 322, 322, 322, 323, 323,
	321, 321, 321, 321, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 354, 354, 256, 256, 355, 309, 309,
	446, 446, 446, 447, 447, 348, 348, 356, 356, 356,
	356, 356, 356, 346, 346, 347, 347, 362, 363, 363,
	286, 286, 286, 286, 284, 284, 287, 287, 287, 287,
	285, 285, 357, 357, 357, 357, 276, 276, 358, 358,
	358, 359, 317, 318, 318, 367, 367, 367, 367, 382,
	253, 253, 253, 253, 253, 481, 481, 368, 368, 368,
	368, 368, 368, 368, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 372, 372, 372, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 381, 381, 381,
	381, 381, 373, 373, 378, 378, 379, 379, 379, 374,
	375, 380, 380, 380, 380, 482, 482, 384, 384, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 370, 370,
	370, 377, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 294, 294, 295, 295, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 326, 326, 326, 326, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 423, 423, 423, 423, 423, 423, 423,
	423, 426, 426, 427, 427, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 433, 433, 434, 434, 436, 436,
	437, 437, 438, 439, 439, 439, 440, 441, 441, 435,
	435, 442, 442, 442, 442, 443, 443, 444, 444, 444,
	444, 444, 445, 445, 445, 445, 445, 337, 337, 338,
	338, 344, 344, 344, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	188, 188, 188, 188, 188, 266, 266, 264, 264, 264,
	267, 267, 265, 265, 263, 263, 262, 262, 334, 334,
	332, 332, 336, 336, 288, 288, 383, 383, 383, 383,
	383, 383, 383, 383, 289, 289, 289, 297, 290, 290,
	291, 291, 291, 291, 291, 328, 329, 292, 292, 292,
	330, 330, 339, 343, 343, 342, 341, 341, 340, 340,
	319, 319, 320, 320, 273, 273, 483, 483, 269, 269,
	360, 360, 360, 360, 223, 223, 258, 258, 222, 222,
	215, 215, 216, 216, 216, 216, 251, 251, 385, 385,
	385, 386, 387, 388, 333, 205, 204, 192, 193, 203,
	202, 201, 191, 194, 198, 199, 200, 196, 197, 211,
	210, 209, 207, 208, 365, 217, 217, 218, 218, 218,
	219, 219, 219, 219, 189, 189, 212, 212, 213, 214,
	214, 206, 206, 206, 182, 182, 182, 183, 183, 184,
	184, 395, 395, 393, 393, 393, 394, 394, 394, 394,
	392, 392, 392, 392, 392, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 401, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 404, 404,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 6, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	5, 3, 5, 5, 5, 7, 3, 3, 3, 4,
	3, 5, 3, 6, 5, 6, 3, 5, 6, 3,
	4, 3, 4, 3, 3, 4, 4, 5, 0, 1,
	1, 3, 2, 4, 3, 3, 5, 4, 3, 5,
	3, 5, 4, 6, 4, 6, 4, 1, 0, 3,
	4, 4, 5, 7, 5, 3, 3, 2, 0, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 7, 9, 3, 4, 10,
	10, 3, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 0, 1, 2, 2, 2,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	3, 0, 2, 4, 3, 3, 1, 5, 1, 3,
	1, 2, 0, 1, 2, 2, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 3, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 2, 3, 4, 3,
	4, 5, 0, 3, 0, 2, 2, 4, 2, 3,
	0, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 3, 1, 3, 3, 4, 5, 2,
	2, 0, 2, 2, 1, 1, 1, 0, 2, 2,
	5, 2, 3, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	2, 4, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 465, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 293, 322, 332, 316, -107, -108,
	351, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -463, 86, -430,
	-71, -74, -76, -467, 116, 131, 175, 285, -92, -93,
	318, 320, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 355, 402,
	42, 365, 71, 119, 326, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -429, -72, -73, -75, -77, -78, 317, -156,
	-154, 462, 415, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 433, 441, -159, -157,
	-158, -163, 339, 423, 379, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, -207, -212, -213, -214, -206,
	-182, -401, -404, 4, -399, -402, 137, 182, 251, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 385, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 249, 248, 253, 256,
	172, 258, 259, 261, 262, 263, 279, 266, 267, 268,
	271, 272, 275, 278, 280, 281, 282, 283, 284, 285,
	286, 288, 289, 291, 293, 295, 297, 298, 299, 300,
	301, 302, 304, 305, 307, 308, 309, 310, 311, 316,
	313, 314, 315, 317, 318, 319, 320, 322, 324, 325,
	326, 327, 329, 331, 352, 353, 367, 332, 333, 334,
	335, 336, 337, 338, 342, 346, 343, 344, 345, 340,
	341, 347, 348, 349, 351, 354, 355, 357, 358, 360,
	361, 363, 364, 365, 366, 368, 371, 372, 373, 369,
	370, 378, 376, 377, 380, 381, 382, 383, 384, 386,
	388, 396, 397, 399, 402, 403, 404, 394, 406, 407,
	410, 411, 412, 413, 414, 419, 415, 417, 420, 421,
	422, 428, 427, 434, 435, 437, 438, 439, 33, 43,
	44, 46, 49, 60, 61, 62, 65, 103, 104, 124,
	134, 135, 146, 160, 162, 169, 170, 171, 189, 195,
	197, 201, 221, 255, 257, 273, 277, 290, 292, 303,
	328, 359, 374, 389, 390, 391, 392, 398, 400, 423,
	424, 425, 429, 436, 264, -200, 2, -182, -182, 293,
	26, 2, 26, 289, 341, 381, 383, 2, -453, -252,
	2, 26, -186, -182, 86, 158, 339, -200, 2, -453,
	-252, 24, 2, -182, 2, -187, 2, 332, -182, 465,
	81, 228, 64, 328, 348, -110, 397, -109, 389, 334,
	-111, -391, 2, 244, -182, 465, 465, 465, 465, 2,
	379, 282, 427, 340, 416, 99, 300, 182, -448, 2,
	4, -402, -399, -216, -215, 379, 99, -214, -206, 455,
	-213, 465, 465, 465, 2, 204, 205, 299, 298, 348,
	349, 465, 465, 465, 2, 25, 58, 80, 83, 105,
	133, 153, 156, 269, -464, 236, 279, 297, 334, 347,
	378, 386, 399, -459, 366, 59, -458, 416, -474, 404,
	114, -298, 99, 228, 157, 411, 383, 381, 324, 161,
	409, 109, 188, 414, 413, 465, 465, 25, 58, 67,
	83, 114, 133, 153, 156, -466, 279, 297, 331, 334,
	347, 378, 386, 404, 399, 2, 427, 340, 379, 182,
	99, 416, 324, 296, -81, 2, 462, 29, 28, 351,
	-152, 379, 198, 2, -182, 204, 205, 2, 465, 465,
	-448, 2, 204, 205, 2, 198, 2, 59, 336, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 2, -140, 348, 366,
	167, 41, 64, 26, 69, 283, 100, 159, 182, 183,
	212, 80, 81, -299, 40, 205, 204, -349, 380, 335,
	341, 376, 397, 86, 417, 325, 439, 300, 301, 127,
	4, 99, 244, 350, 389, 228, 73, -473, 2, 379,
	-477, 2, 397, 397, 2, -477, 2, -477, 2, -185,
	2, 397, 393, -478, 397, 436, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, -154,
	-156, -155, 465, 465, 465, 465, 465, -140, 348, 2,
	64, 26, -160, -161, 151, -246, -247, 408, 196, 122,
	270, -153, -155, 2, -429, -389, 2, -324, -405, -326,
	453, 454, 446, 250, 440, -337, 105, 409, 264, -404,
	-327, -339, 124, 328, -267, 8, 9, 5, 6, 7,
	-189, -369, -333, -377, 401, 136, 254, -219, 466, 10,
	462, -426, -155, -338, 34, 162, 57, -393, -218, -371,
	-379, -375, -376, -481, 47, 53, 52, 386, 243, 342,
	343, 360, 344, 345, 45, 419, 179, 261, 263, 190,
	4, 197, -217, -206, -423, -424, -399, -400, 189, 195,
	191, 359, 192, 193, 194, 44, 303, 147, 148, 146,
	115, 104, 103, 257, 49, 48, 46, 424, -380, 101,
	389, 390, 391, 392, 207, 208, -182, -401, 67, 91,
	92, 90, 95, 94, 96, 93, 350, 416, 58, 33,
	169, 170, 201, 255, 171, 65, -425, 370, 87, 155,
	187, 173, 200, 202, 206, 222, 225, 245, 252, 274,
	276, 323, 356, -482, 425, 134, 135, 277, 290, 374,
	398, 400, 160, 221, 60, 61, -431, 304, -432, -200,
	-431, 465, 465, 467, 465, -240, -241, -242, 2, 26,
	112, 462, 2, -353, 2, 460, -357, -155, 216, -356,
	462, -354, -207, 265, -427, 329, -423, -424, -189, -206,
	-218, 4, -243, 462, 464, 99, 379, 68, 182, -293,
	462, -182, 26, 264, 393, 467, -335, 462, 264, 154,
	267, -182, 2, 2, 352, 2, 462, -110, 62, 397,
	39, 348, -312, 2, -313, -179, -180, -181, -362, 203,
	295, 302, 442, 439, -389, -460, 154, 445, 393, -389,
	-268, 464, 2, -357, 169, -207, 2, -204, -392, 4,
	-399, -402, -400, -403, 67, -401, 26, 28, 29, 30,
	32, 34, 35, 36, 37, 50, 57, 58, 63, 66,
	68, 80, 86, 90, 91, 93, 92, 94, 95, 96,
	105, 107, 110, 112, 113, 117, 119, 122, 136, 138,
	151, 153, 154, 158, 161, 164, 176, 186, 196, 198,
	216, 219, 226, 229, 230, 250, 254, 260, 264, 265,
	269, 270, 287, 294, 306, 321, 339, 350, 362, 375,
	379, 387, 393, 395, 401, 408, 409, 416, 418, 426,
	430, 431, 432, 433, -404, 2, -357, 169, 2, -209,
	169, -357, -212, 2, -397, 169, -395, 10, -394, 5,
	4, -399, -402, -400, 2, -191, -182, 2, -203, -392,
	2, -222, 169, -207, -208, -212, 393, 467, -258, -215,
	-216, -251, -182, 464, -324, 2, -99, 2, -324, 169,
	2, -99, 169, 2, -324, 169, 2, -99, 169, 2,
	2, 2, 399, 2, 83, 169, -182, 379, 98, 2,
	315, -465, 331, 403, 427, 2, 2, 2, 2, 2,
	2, 2, 379, -196, 2, -182, 151, 340, -475, 304,
	-397, 169, 2, -397, 169, 2, -210, -212, -210, 182,
	199, -191, 169, 2, 383, 381, 383, 381, 154, 2,
	198, 2, 198, 2, -358, 2, -359, -207, 2, 2,
	2, 2, 2, 169, -182, 379, 98, 2, 214, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -260, 169,
	2, -207, -260, 169, 2, -260, 169, 2, -223, 169,
	2, -222, -191, 169, 2, -398, 169, 2, -397, -398,
	169, 2, -366, 2, -365, -394, 423, -81, 462, -81,
	462, 348, 462, -397, -207, -207, -324, -99, 154, -324,
	-99, -152, 151, 2, 99, 379, -140, 2, 151, 418,
	2, 8, 2, -397, 335, 301, 143, 2, 352, 2,
	64, -299, 439, 154, 2, 154, 2, -283, 2, 433,
	-451, 2, 264, 154, 2, 154, 2, 154, 2, 154,
	2, 154, 2, 298, 349, 205, 2, -99, 430, -324,
	430, 2, 396, 213, 128, 154, -283, 2, 154, 2,
	154, 2, 5, 2, 203, 295, 367, 2, -207, -468,
	2, 379, 427, 340, 2, 2, 76, 77, 154, 2,
	154, 2, 154, 439, 2, -276, -357, -311, -312, -311,
	393, -187, -160, -246, -247, -140, 352, 2, -261, 258,
	413, 247, 354, 211, -160, -275, -301, -302, 226, 138,
	260, -282, 26, 112, -282, -282, 51, 463, 463, 11,
	12, 66, 38, 453, 454, 455, 456, 149, 457, 458,
	451, 452, 450, 443, 444, 448, 209, 210, 82, 447,
	445, 75, 234, 330, 139, 140, 141, 142, 312, 180,
	31, 181, 14, 15, 16, 30, 269, 225, 440, 173,
	356, 446, 17, 18, 19, 200, 202, 252, 43, 176,
	-188, -224, -324, -324, -324, -324, -324, 276, 462, -273,
	-319, 460, -155, 462, 462, 462, 5, 462, 5, -388,
	8, -155, -324, -337, 463, -265, 462, -155, -337, -332,
	462, 328, 460, 462, -340, -324, 464, -433, 434, -373,
	462, 292, -372, 462, -372, -372, 428, -370, 462, 441,
	435, 462, -370, 462, 462, 151, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 428,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 467,
	-431, -243, 462, -269, -360, -324, 455, -269, -269, 264,
	-262, -324, 87, -286, 206, 245, 155, 222, 323, 187,
	-388, -82, -68, -79, -87, -99, -112, -144, -145, -321,
	466, -348, 441, -155, -354, -206, -155, -356, 462, -353,
	-348, 455, -207, 462, 154, 462, 464, 154, -251, -392,
	-191, -207, -217, -218, -222, 111, -262, -448, -251, -186,
	35, -334, -367, -368, -369, -378, -374, -377, -381, 47,
	53, 52, 386, 243, 342, 343, 360, 344, 345, 45,
	419, 179, 261, 263, 190, 4, 46, 424, -380, 197,
	308, 309, 307, 311, 310, 189, 195, 191, 359, 192,
	193, 194, 44, 303, 147, 148, 146, 115, 104, 103,
	257, 49, 48, 101, 389, 390, 391, 392, 207, 208,
	425, 370, 60, 61, -448, -251, 151, -391, -262, 35,
	-312, 2, 105, -395, 39, -479, 467, 224, -226, 233,
	249, 166, 265, 437, 258, -396, 5, 4, -333, -345,
	105, 228, -377, 9, 454, -385, 8, 453, -390, -389,
	89, 464, -392, -168, 313, -167, 23, 27, 116, 421,
	129, -233, 184, 282, 124, 363, 412, -455, -456, 333,
	384, 385, 78, 258, 313, 124, -279, -281, 35, 97,
	247, 278, 54, 177, 238, 239, 365, 429, 124, 313,
	433, 124, -456, 313, -456, -170, 363, 412, -455, -456,
	333, 313, -169, -233, 124, 466, -96, -397, 462, -258,
	467, 467, -392, 455, 124, 124, 124, 124, 2, 2,
	250, 2, 2, 2, 156, -458, -466, 2, 2, 2,
	-207, 169, -245, 264, -450, -259, 379, -207, -209, 169,
	2, -212, 427, -178, -428, 433, 250, 250, 35, 462,
	2, -193, 169, 2, -183, -182, 182, -428, 250, -358,
	-220, -207, -220, 351, -200, 35, -321, 124, 2, 2,
	2, -182, -171, 467, 56, 319, 124, -171, 124, -171,
	124, -171, 467, 124, -171, 124, 467, 124, 124, 463,
	467, -366, -366, -397, -150, 433, 154, 86, 462, 462,
	-152, -97, -96, -397, -450, -191, 2, -207, 2, 379,
	207, -397, -397, -397, -391, 26, 353, 2, 298, 349,
	77, -207, 379, 99, 182, 70, -452, 151, -449, 324,
	-448, -207, 99, -207, 99, -207, 99, -207, -207, 2,
	2, 2, 2, 74, 74, 151, 2, 396, 2, 396,
	2, -182, -182, -182, 224, -207, 151, 379, 182, 379,
	182, 99, 379, -171, 467, -187, -160, -275, -391, -162,
	358, 253, -260, 211, 354, -160, -302, -301, 26, -324,
	-306, 145, 246, -324, -326, -154, -154, -154, -248, -350,
	-324, 294, 182, -382, -367, -367, -205, -392, 389, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, 225, 173, 356, 43, 176, -324,
	393, -324, -324, -324, -324, 242, 250, 254, 401, 136,
	410, 112, 258, -483, 375, 37, -330, -155, -266, 462,
	-344, 32, 362, 26, -337, 462, 2, -319, -324, -320,
	-263, -262, -262, 463, 426, 26, 112, 455, 2, 8,
	-294, -296, 438, 241, 102, 168, 240, -295, 338, 463,
	467, 35, 463, -324, -263, -336, -332, -262, -343, -342,
	430, -392, 455, -434, 144, 161, 8, -386, 8, -386,
	389, 389, 8, -386, -386, 462, 463, 2, 463, 2,
	463, 2, 463, 2, 463, 2, -324, -324, -324, -324,
	-324, -324, -324, -262, -288, 2, -383, -262, 4, 438,
	241, 102, 168, 240, 338, 5, -288, 2, -289, 2,
	-324, -262, -290, -325, -326, 453, 454, 446, -337, -291,
	2, -324, -263, -324, 50, 219, 395, -292, -324, 154,
	-262, -262, 2, -262, 2, -432, 35, -262, -254, 467,
	154, 35, 4, -254, -254, 462, 463, 467, -287, 165,
	237, 232, -287, -353, -286, 206, -284, 274, -284, -284,
	-446, 462, 461, 465, 465, 465, 465, 465, -348, -192,
	460, 468, -392, -347, -346, 35, -200, 271, -348, -348,
	464, 463, -347, -207, 462, -262, -392, 368, 463, 464,
	200, 200, 200, 200, 329, 463, 393, 433, -81, 266,
	463, 467, -253, 34, 460, -296, 462, -384, 428, 462,
	462, 154, -252, -460, 463, 397, -313, -225, 302, 361,
	314, 346, 377, 9, 8, 8, 467, -392, 467, -461,
	80, 393, 68, -315, 169, 68, -406, -194, 80, -407,
	-182, 63, 409, 294, 153, -461, 80, 294, -461, 80,
	80, 351, 366, 51, -357, 38, 38, 26, -99, 220,
	154, 439, 379, 182, 393, -357, -281, -367, 97, 238,
	239, 51, -387, -385, 454, -387, 51, -387, -387, -387,
	433, -209, -357, 393, 284, -397, 393, 467, 38, 38,
	26, -99, 220, 154, 393, -222, -192, -363, -362, -398,
	-215, -182, 464, -324, -99, -324, -99, 124, 2, -475,
	214, 462, -229, 250, 154, -251, -364, 198, 467, -259,
	-280, -279, 250, -211, 2, -207, 284, 124, 124, 462,
	120, 300, 2, 264, 250, -193, 169, -174, 382, 124,
	-278, 418, -307, -99, 462, 105, 35, -307, -270, -271,
	-361, -272, -194, 462, -200, -182, 2, -207, -260, -260,
	-260, -222, -223, -191, -397, -398, -398, -81, -365, 463,
	463, 463, -149, 268, -148, -182, 5, -152, 418, -228,
	-316, -315, -410, -411, -406, 225, 182, 409, 199, 137,
	-244, -195, -194, 98, -150, -362, 467, -150, -150, -363,
	-363, -207, 151, 2, 2, -283, -207, -191, -222, -207,
	-251, -251, -283, -191, -283, -191, -283, -191, -99, -324,
	348, 151, 151, 464, -283, 300, 99, 379, 282, 182,
	-207, -222, -207, -222, -191, -207, -357, -160, 231, 413,
	-304, -385, 462, -305, 328, 329, 467, -165, 36, 110,
	211, -207, 439, 121, -324, -324, 393, -483, 375, -330,
	121, -324, 242, 254, 401, 136, 410, 112, 258, 154,
	462, -325, -325, 463, -264, -324, -324, 461, 470, 463,
	-247, 467, -246, -324, -262, -262, 463, 463, 393, 393,
	393, 393, 462, 464, -262, -251, 461, 461, 467, 463,
	-341, -342, 117, -324, 464, -439, 275, 462, 462, 463,
	463, 467, 463, 439, 439, 463, 463, 463, -324, 35,
	467, 467, 467, 463, 467, 467, 467, 463, 463, 154,
	463, 463, -297, 287, 463, 11, 12, 453, 454, 455,
	456, 149, 457, 458, 451, 452, 450, 443, 444, 445,
	75, 234, 330, 14, 15, 16, 200, 176, -325, -325,
	-325, 463, -328, -329, 154, 151, 35, -292, -292, -292,
	463, 154, -262, 463, 463, 462, 463, -318, -317, 431,
	-360, -255, 2, -353, -202, -392, -318, -318, -262, -324,
	206, 206, -285, 418, 264, -287, -353, -346, 463, -447,
	-388, -348, -347, -388, -323, -322, 152, 36, 110, 248,
	172, -200, -243, -347, -347, -392, -348, 463, -256, -355,
	-427, -247, 464, -392, -141, 5, 254, -141, -141, -141,
	-251, 24, 288, -367, 460, 461, 8, 8, 462, -386,
	-386, -251, 154, -389, -312, 407, 72, 302, 389, -389,
	-167, 313, -194, -194, -207, 250, -315, 169, -173, 250,
	-367, -201, -182, 462, 462, 211, 211, -194, -201, 211,
	169, -194, 169, -201, -201, -454, 302, 259, -324, 227,
	300, 251, -168, 313, -99, -99, -99, 462, -460, 418,
	111, -207, -222, -207, -211, 313, -217, -387, -387, -279,
	313, -209, -397, 433, -191, -169, -99, -99, -99, 462,
	-192, -170, 313, -147, 178, 463, 455, -182, 427, -182,
	-227, -230, -228, -194, -469, 435, 433, 124, -221, -207,
	460, -150, -397, -207, 124, -243, -397, -397, -397, 2,
	462, 2, -207, 124, 264, 250, -175, 118, -480, 445,
	-191, -318, -255, -277, -310, 321, 264, -244, 423, -200,
	-277, -257, 467, 154, 445, 464, -244, 2, -171, -171,
	-171, -171, -171, -81, -81, -150, 467, 462, 445, 445,
	462, -397, -397, 463, 467, -207, -193, 182, 182, -199,
	-183, 463, 467, 464, 462, -150, -96, 154, -46, 433,
	379, 466, -283, -283, -283, 348, 348, -182, -203, -191,
	-207, -204, -222, 151, 151, -305, -324, -350, -166, 256,
	-207, 466, -324, -324, 121, 121, -324, -325, -325, -324,
	121, 154, 462, -324, -334, 30, 30, 463, 467, -320,
	-324, 463, 426, -247, -247, 463, 5, 241, 168, 240,
	-295, 240, -295, -295, 8, 455, -392, 463, -332, 119,
	-324, 387, -392, 455, -440, -197, 462, -182, 431, -246,
	-386, -370, -370, 463, -382, -367, -324, -324, -324, -324,
	-324, -324, -328, -324, -382, -367, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, 112, 250, 258, -325, -329,
	-328, -324, -324, -367, 463, 463, 463, -262, -81, -274,
	161, -324, -363, 467, -274, -274, 463, -353, -353, 462,
	-324, 206, 461, 463, 467, -347, 461, 467, 469, 445,
	-243, 464, -346, 463, 467, -309, 35, 463, -392, 267,
	5, 8, 460, 461, 463, -386, 463, 463, -251, -324,
	393, 393, 124, 250, 420, -412, -407, -324, -249, -351,
	-324, 462, 462, -164, 116, 351, -462, 2, 418, 124,
	-171, 124, -171, 437, 462, 462, 393, 433, -262, -324,
	-151, 105, -391, -456, 466, -456, 466, 393, 393, 284,
	433, -262, 393, -150, 154, 2, 2, 2, 463, 463,
	467, -413, 35, 262, -182, -207, -64, 433, -362, -388,
	-209, 35, -178, 2, -300, 418, -192, -207, 124, -176,
	218, -480, -395, -428, -247, -277, -269, 251, 79, 463,
	-318, -271, -255, -324, 2, 463, -148, -149, -397, -397,
	-397, -150, -152, -152, -316, 2, 462, -193, -183, 462,
	-152, -195, 2, -398, -99, 268, -207, 455, -283, -235,
	-234, 282, 258, -235, 328, 328, 265, 463, 145, 215,
	-165, -192, -324, -324, 121, 30, 30, -324, -324, -334,
	463, -324, -324, -262, 461, 5, -324, 463, 463, 463,
	-324, 464, -441, -182, -324, 463, 463, 463, 463, 467,
	467, 463, 463, 463, 463, -329, 154, 112, 258, 462,
	463, 463, -331, 164, 51, -353, -331, -331, -285, -251,
	-353, -321, -388, -322, -192, 460, -392, -355, 462, 464,
	461, 2, 460, 463, -194, -194, -315, 124, -414, 80,
	-416, 66, 137, 86, 250, 254, 409, 294, 63, 105,
	306, 35, 463, 463, 467, -165, -249, -251, 250, 372,
	105, 250, 105, 98, 404, 182, -194, -201, -251, -251,
	-207, 130, 463, 467, 445, 2, 455, 455, -211, -209,
	-397, 130, 463, -192, -398, -231, 185, -194, -411, -408,
	-409, 294, -415, -417, 137, 294, -99, 2, 462, -229,
	268, 461, -280, -99, 462, -182, 264, 462, -192, -177,
	217, -480, -395, -174, -303, -301, -308, 462, 264, -99,
	-247, 445, 463, 463, 98, 98, -249, 462, 462, -251,
	98, 463, -47, -48, 182, 80, 286, -204, 379, 182,
	462, 462, -165, -324, -324, -324, 463, -247, -392, 455,
	-435, 282, 463, -324, -324, -325, 154, 462, -334, -436,
	432, -324, -262, -436, -436, 463, -348, -388, 2, 460,
	2, -315, -201, -205, -198, -182, 137, 169, 254, 211,
	462, -325, -207, 462, 2, -471, 107, 186, -314, -472,
	85, 373, -351, -166, 463, 463, 254, 254, -324, -367,
	-222, -171, -171, 463, 463, -324, 393, -391, 84, -389,
	2, -456, -324, 393, -232, -233, 176, -413, 211, -198,
	211, -470, 433, -227, -469, -65, -66, 394, -362, -249,
	-207, -249, 264, -480, -395, -175, -277, 113, -251, 80,
	-303, -330, -150, 462, 462, 463, -249, -249, 463, 462,
	-150, 467, 26, 462, 26, 462, -207, -222, -262, -262,
	463, -247, 51, 463, 463, -325, -334, 463, -437, -438,
	-197, -347, 461, 2, -416, -198, 250, -324, -184, 462,
	-324, 186, 108, 174, -231, 462, 306, -190, 66, 462,
	462, 462, 445, 154, 462, -469, 280, 462, 98, 247,
	463, 35, -66, 9, 463, -300, 463, -207, -395, -176,
	413, 251, 463, -201, -277, -398, -398, -314, 463, 463,
	-398, -48, -251, -251, 463, 463, -442, 300, 329, 163,
	-262, 463, 467, 35, 124, 463, -418, 235, -182, 463,
	108, 174, -232, -251, -207, -457, 418, -205, -237, -236,
	-234, -239, -238, -234, -262, -389, 84, 280, -262, -207,
	-250, -352, -194, 98, -231, -99, -314, 462, -314, 462,
	-177, 351, -317, 463, 463, -231, -314, 463, 463, 463,
	463, -443, -444, 43, 406, 89, -324, -443, -443, -438,
	-440, 137, -419, -422, -421, 264, 357, 155, 281, 463,
	372, 429, -471, 463, -243, -324, 463, 467, 423, 463,
	467, 423, 463, 154, 463, 462, 463, 467, -232, -470,
	-231, -249, -231, -249, -270, -150, -150, -232, -231, -150,
	-445, 123, -444, 291, 150, 328, 291, 150, -445, -445,
	-198, -421, 264, -422, 264, 413, 109, -418, -236, 176,
	-238, 154, 280, -251, -352, -469, -232, 463, -232, 463,
	-318, -232, 89, 161, 388, 247, 30, -420, 247, 319,
	56, 351, -420, -419, 462, 462, 463, -476, 431, -314,
	-476, -314, 328, 272, -444, 22, 254, 105, -471, -262,
	-262, -172, 56, 319, 2, -231, -231, 463, 463, -232,
	-232, -232, 393, -476, -476, 462, -262, 463, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 932, 934, 936, 938, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1022, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 950, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1070, 329, 331, 333, 335, 337, 0, -2,
	1082, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1046, 1048,
	1050, 1052, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 827, 1682, 1696, 1697, 1698,
	1701, 1702, 1703, 1704, 1705, 1706, 2047, 2127, 2128, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 0, 426, 424, 1676, 427, 1880,
	429, 431, 316, 317, 318, 319, 320, 321, 0, 441,
	435, 440, 442, 444, 445, 446, 447, 421, 419, 0,
	441, 1728, 439, 930, 931, 925, 926, 1913, 960, 460,
	-2, -2, -2, 2016, -2, 492, -2, 499, 2019, 1915,
	504, 0, 506, -2, 509, 933, 935, 937, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	-2, -2, -2, -2, 0, 0, 1765, 1652, 1698, 1655,
	1650, 192, 194, 196, 197, 0, 0, 0, 0, 0,
	0, 221, 223, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 733, 734, 878, 879,
	900, 0, 0, 0, 0, 324, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 254, 362, 363, 0, 1071, 1071, 0,
	0, 0, 0, 172, 163, 0, 0, 722, 449, 451,
	0, 158, 0, 0, 929, 0, 174, 0, 0, 465,
	467, 469, 534, 536, 538, 540, 542, 544, 547, 549,
	551, 553, 555, 557, 559, 562, 564, 566, 568, 570,
	572, 574, 576, 578, 580, 582, 584, 585, 0, 0,
	0, 0, -2, -2, 0, 0, -2, -2, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	588, 590, 591, 592, 0, 640, 657, 0, 869, 1072,
	962, 940, 953, 962, 942, 943, 944, 945, 946, 951,
	952, 955, 0, 947, 948, 949, 30, 32, 34, 36,
	38, 40, 42, 278, 280, 282, 284, 288, 290, -2,
	1044, 1045, 330, 332, 334, 336, 338, 452, 0, 454,
	0, 589, 1026, 1034, 0, -2, 0, 1076, 1076, 1076,
	0, 0, 1045, 1043, 0, 457, 458, 513, 514, 1309,
	0, 0, 0, 0, 0, 1549, 1393, 0, 515, -2,
	1424, 1426, 1995, 2016, 1548, 1428, 1429, 1430, 1431, 1432,
	0, 0, 1435, 0, 1437, 1438, 1439, 1440, 0, 1442,
	0, 1446, 1447, 1448, 0, 2000, 1629, 1694, -2, 1214,
	1215, 1216, 1217, 1218, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1690, 0, 1515, 1462, -2, 1715, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1774, -2, -2, -2, -2, -2, -2, -2, 1270, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2030, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 0, 1984,
	2001, 2002, 2007, 2009, 2003, 1992, 1485, -2, 2031, 2032,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2043, 2044, 2045, 1271, -2, 1996, 1997, 2012, 2013, 2018,
	2023, 2024, 1999, 2008, -2, -2, 1062, 1888, 1065, 827,
	1063, 1047, 1049, 0, 1051, 0, 0, 0, 1056, 1079,
	1077, 0, 1115, 1060, 1061, 1071, 1133, 1156, 0, 1138,
	0, 1156, 1182, 0, 1143, 1908, 1463, 1464, 0, 1698,
	1695, -2, 0, 0, 0, 0, 0, 0, 0, 422,
	0, 428, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 462, 463, 0, 487, 0, 491, 1991, -2,
	1733, 1928, -2, 495, 963, 967, 968, 969, 970, 0,
	0, 0, 0, 0, 501, 0, 0, 488, 489, 507,
	510, 0, 51, 0, 2001, 1182, 53, 0, 1666, 1720,
	1721, 1722, 1723, 1724, 2030, 2046, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 55, 0, 2001, 58, 0,
	2001, 0, -2, 62, 0, 2001, 175, 176, 1711, 1712,
	1716, 1717, 1718, 1719, 65, 0, 1672, 67, 0, 1669,
	76, 0, 2001, 0, 1649, -2, 0, 0, 714, 1646,
	1651, 715, 1656, 0, 198, 199, 200, 201, 202, 2001,
	204, 205, 0, 207, 208, 2001, 210, 211, 0, 213,
	229, 230, 0, 232, 0, 2001, 0, 0, 0, 238,
	-2, 255, 0, 252, 0, 242, 243, 245, 246, 247,
	248, 249, 0, 294, 292, 1677, 0, 0, 0, 884,
	-2, 2001, 872, 875, 2001, 877, 889, 1680, 0, -2,
	0, 1069, 2001, 977, 737, 738, 739, 740, 0, 313,
	0, 990, 0, 992, 0, 1012, 1188, 1133, 256, 257,
	258, 259, 260, 2001, 0, 0, 0, 265, 0, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 151, 2001,
	341, 360, 151, 2001, 344, 151, 2001, 347, 151, 2001,
	350, 1644, 151, 2001, 353, 354, 2001, 356, 177, 357,
	2001, 359, 0, -2, 415, 1684, -2, 365, 0, 366,
	0, -2, 0, 189, 0, 0, 720, 721, 0, 927,
	928, 0, 0, 472, 0, 0, 586, 587, 0, 0,
	597, 598, 599, 600, 1916, 1886, 1790, 604, 0, 607,
	-2, 0, 0, 0, 611, 0, 616, 617, 618, 0,
	719, 620, 0, 0, 622, 0, 626, 0, 629, 0,
	631, 0, 633, -2, -2, -2, 644, -2, 0, 648,
	0, 650, 0, 0, 0, 0, 665, 666, 0, 671,
	0, 674, 675, 676, 0, 678, 679, 680, 681, 0,
	683, 684, -2, -2, 688, 690, 0, 697, 0, 701,
	0, 705, 0, 593, 594, 151, 1186, 939, -2, 941,
	0, 957, 1029, -2, 0, 453, 0, 456, 1040, 0,
	1036, 0, 1038, 0, 1027, 1032, 1094, 1095, 0, 0,
	0, 0, 1074, 1075, 0, 0, 0, 1024, 1025, 0,
	0, 0, 0, 1554, 1555, 1556, 1557, 1558, 1559, 1562,
	1563, 1560, 1561, 1564, 1565, 0, 0, 0, 0, 0,
	1566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1567, 1568, 1569, 0, 0, 1571, 0, 1573,
	0, 0, 0, 0, 0, 0, 1372, 1374, 1637, 0,
	0, 1570, 1314, 1315, 1316, 1351, 1352, 0, 0, 1425,
	1634, 1633, 1427, 0, 1585, 0, 1434, 0, 1306, 1441,
	1663, -2, 0, 1549, 1580, 0, 0, 1449, 1450, 1451,
	0, 0, 1585, 0, 0, 1628, 0, 1517, 0, 1250,
	0, 1251, 1252, 0, 1253, 1254, 1267, 1280, 0, 0,
	0, 0, 1284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 1609, -2, 0, 0, 0, 0, 0,
	1064, 0, 0, 1119, 1638, 1642, 1643, 1119, 1119, 0,
	0, 1586, 1179, 1179, 0, 0, 1175, 1175, 1175, 1173,
	1150, 0, 403, 405, 407, 409, 410, 411, 413, 1156,
	0, 1166, 0, 1156, 1156, 0, -2, 1138, 0, 0,
	1166, 1183, 1184, 0, 0, 0, 0, 0, 0, 1699,
	0, 0, 0, 1686, 0, 0, 0, 0, 433, 443,
	1071, 0, 1588, 1204, 1207, 1208, 1209, 1210, 1213, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, -2, 1268, 1270, 1291,
	1257, 1258, 1259, 1260, 1261, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1263, 0, 1238, 1238,
	1238, 1255, 1256, 1279, 1290, 1282, 1290, 1286, 1205, 1206,
	1273, 1274, 1275, 1276, 0, 437, 0, 0, 0, 0,
	-2, 497, 502, 503, 0, 0, 965, 0, 971, 524,
	525, 526, 973, 974, 0, 500, 527, 528, 529, 530,
	531, 532, 0, 844, 0, 846, 1658, 0, 498, 517,
	505, 0, 511, 77, 922, 116, 0, 922, 922, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 101, 112,
	89, 90, 0, 0, 0, 0, 59, 852, 0, 855,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 100, 0, 95, 79, 0, 0, 0, 102,
	114, 0, 142, 144, 0, 0, 1169, 159, 0, 713,
	0, 0, 1699, 1654, 0, 0, 0, 0, 231, 233,
	0, 235, 236, 237, 0, 883, 0, 244, 241, 285,
	801, 2001, 0, 0, 311, 306, 0, 308, 851, 2001,
	849, 1681, 0, 870, 0, 1068, 0, 0, 0, 0,
	890, 0, 2001, 895, 1668, 1707, 1708, 979, 0, 315,
	0, 993, 0, 0, 1189, 0, 1191, 0, 262, 263,
	264, 0, 339, 0, 149, 150, 0, 342, 0, 345,
	0, 348, 0, 0, 351, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 189, 161, 189, 189, 1169, 474, 1169, 476, 0,
	0, 601, 602, 603, 605, 606, 608, 609, -2, -2,
	698, 668, 0, 0, 0, 667, 619, 0, 707, 1904,
	717, 668, 1765, 668, 1765, 668, 1765, 630, 632, 635,
	660, 643, 647, 0, 0, 0, 652, 0, 654, 0,
	656, 668, 669, 672, 677, 682, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 956, 1030, 1032, 455, 1033,
	0, 1042, 1035, 0, 1039, 1028, 1092, 1093, 1098, 1099,
	1105, 1108, 1109, 1101, 1309, 1057, 1058, 1059, 1083, 1084,
	909, 0, 2127, 1310, 1199, 1311, 1312, 1665, 0, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, -2,
	-2, -2, -2, -2, -2, -2, -2, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, -2, -2,
	-2, 1349, 1350, -2, 1572, 1574, 0, 1637, 0, -2,
	0, -2, -2, -2, -2, 1369, 0, 1371, 1376, 1378,
	1380, 0, 0, 0, 0, 1636, 1390, 1620, 1621, 0,
	0, 1551, 1552, 1553, 1375, 0, 1394, 1635, 1632, 0,
	0, 1584, 1082, 1453, 0, 0, 0, 0, 1460, 0,
	1664, 1305, 1292, 1293, 1294, 1295, 1296, 1297, 1307, 1445,
	1582, 0, 1581, 0, 0, 0, 1592, 0, 1627, 1623,
	0, 1687, 1693, 1525, 0, 0, 0, 0, 1661, 0,
	0, 0, 0, 0, 0, 0, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 1595, -2, -2,
	-2, -2, -2, -2, -2, -2, 0, 1499, 0, 1501,
	1586, 1606, 0, 0, 1395, 0, 0, 0, 1549, 0,
	1504, 1586, 1614, 0, 0, 0, 0, 0, 1586, 0,
	1619, 0, 1511, 0, 1513, 1066, 0, 0, 1194, 0,
	0, 0, 1641, 1194, 1194, 0, 1114, 0, 0, 1176,
	1177, 1178, 0, 0, 1179, 0, 1170, 1174, 1171, 1172,
	0, 0, 1156, 404, 406, 408, 412, 414, 1166, 1130,
	0, 0, 1667, 1136, 1165, 0, 827, 1155, 1166, 1166,
	0, -2, 1140, 0, 0, 1082, -2, 190, 826, 0,
	0, 0, 0, 0, 423, 425, 0, 0, 417, 0,
	420, 0, 1195, 1198, 0, 1211, 0, 0, -2, 0,
	0, 0, 0, 0, 490, 0, 964, 972, 0, 521,
	0, 523, 0, 845, 1660, 1659, 0, 512, 0, 0,
	0, 0, 921, 120, 2001, 0, 153, 0, 0, 795,
	1673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 91, 0,
	0, 0, 0, 0, 0, 0, 853, 854, 856, 862,
	864, 0, 858, 1662, 0, 859, 0, 861, 863, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 92, 0, 0, 0, 0, 1648, 180, 1168, 0,
	1647, 1657, 0, 203, 206, 209, 212, 0, 239, 0,
	0, 743, 725, 0, 0, 293, 189, 0, 0, 307,
	847, 850, 0, 827, 882, 1679, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 2001, 981, 987, 0,
	1194, 0, 1010, 995, 0, 0, 0, 1010, 1014, 1015,
	1017, 1018, 0, 0, 1190, 0, 266, 361, 151, 151,
	151, 1645, 151, 151, 178, 355, 358, 364, 416, 1071,
	1071, 189, 187, 1865, 185, 182, 184, 0, 0, 0,
	744, 746, 747, 748, 749, 0, 1708, 0, 1819, 1708,
	0, 998, 1000, 0, 156, 189, 0, 0, 305, 473,
	478, 595, 0, 637, 662, 610, 612, 613, 614, 0,
	718, 716, 621, 668, 624, 668, 627, 668, 646, 649,
	651, 0, 0, 0, 664, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 704, 706, 1187, 1031, 1041, 1037,
	0, 1103, 0, 1102, 1106, 1107, 0, 1091, 907, 908,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1391,
	0, -2, 1370, 1373, 1377, 1379, 1381, 0, 0, 0,
	0, 0, 0, 1575, 0, 1577, 1392, 1630, 1633, 1547,
	0, 0, 1081, 1082, 1082, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1583, 0, 1590, 1591, 0, 1452,
	0, 1624, 0, 0, 0, 1461, 0, 0, 0, 1262,
	1236, 0, 1290, 1288, 1289, 1283, 1290, 1287, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 1484, 1496, 0,
	1498, 1500, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	1400, 1503, 1612, 1613, 0, 0, 0, 0, 0, 0,
	1509, 0, 1618, 1510, 1512, 1071, 1116, 1111, 1193, 0,
	1639, 1169, 1118, 1120, 1640, 1670, 1111, 1111, 0, 1587,
	0, 0, 1160, 0, 0, 0, 1162, 0, 1151, 0,
	1153, 1166, 1135, 0, 0, 1128, 0, 1124, 1125, 1126,
	1127, 827, 1164, 1137, 1141, 1687, 0, 1185, 0, 1145,
	1148, 0, 0, 1700, 214, 218, 219, 215, 216, 217,
	432, 0, 0, 1589, 0, 1200, 0, 0, 0, 0,
	0, 436, 0, 486, -2, 519, 520, 522, 0, 518,
	117, 922, 0, 0, 913, 0, 122, 2001, 131, 0,
	772, 0, 1671, 0, 0, 0, 0, 924, 0, 0,
	2001, 151, 2001, 151, 134, 137, 0, 141, 139, 0,
	0, 763, 78, 922, 81, 85, 93, 0, 0, 0,
	99, 0, 0, 0, 915, 0, 857, 860, 866, 60,
	0, 917, 911, 0, 910, 143, 83, 87, 94, 0,
	919, 80, 0, 189, 0, 160, 1653, 0, 0, 0,
	0, 0, 742, 812, 0, 0, 0, 0, 299, 295,
	0, 304, 310, 309, 0, 0, 873, -2, 876, 885,
	0, 887, 899, 0, 0, 0, 983, 987, 0, 986,
	1069, 1082, 314, 988, 1010, 0, 0, 0, 997, 994,
	991, 1194, 0, 0, 0, 0, 0, 261, 340, 343,
	346, 349, 352, 367, 368, 164, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 1708, 1708, 0,
	1675, 0, 0, 0, 0, 157, 162, 0, 475, 0,
	0, 0, 623, 625, 628, 653, 655, 668, 691, 692,
	758, 0, 758, 0, 0, 0, 0, 1085, 1086, 0,
	909, 0, 1313, 1354, 0, 0, -2, 0, 0, 1358,
	0, 0, 0, -2, 0, 0, 0, 1576, 1578, 0,
	1632, 1454, 0, 0, 0, 1458, 1436, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 0, 1443, 1444, 1550, 1593, 1622,
	1626, 0, 1688, 1692, 1523, 1524, 1528, 1678, 0, 0,
	0, 1281, 1285, 1465, 0, 0, 0, 0, 0, 0,
	0, 1594, 1605, 1607, 1396, 1397, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, -2, -2, -2, 1414,
	1415, 1416, -2, -2, -2, 0, 0, 0, 1608, 1610,
	1611, 1615, 1616, 0, 1506, 1507, 1508, 1617, 0, 1113,
	0, 1192, 1117, 0, 1113, 1113, 1078, 1158, 0, 0,
	1181, 0, 1133, 1152, 0, 1142, 1131, 0, 1132, 0,
	1163, 0, 1139, 1144, 0, 1147, 0, 1454, -2, 434,
	418, 0, 0, 1202, 1212, 0, 1265, 1269, 438, 1167,
	0, 0, 0, 0, 152, 770, 794, 0, 0, 902,
	909, 0, 0, 124, 0, 0, 0, 132, 0, 0,
	129, 0, 136, 140, 0, 0, 0, 0, 0, 96,
	97, 98, 0, 103, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 234, 881, 240, 752, 800,
	0, 802, 0, 726, 0, 801, 291, 0, 298, 0,
	851, 0, 871, 886, 0, 0, 0, 0, 0, 985,
	987, 0, 978, 979, 1097, 989, 1008, -2, 1007, 0,
	1082, 1016, 1013, 1019, 1020, 0, 186, 0, 181, 183,
	0, 167, 0, 0, 745, 750, 0, 0, 0, 0,
	0, 999, 1001, 0, 173, 0, 596, 615, 663, 693,
	757, 0, 0, 695, 0, 0, 1100, 1104, 1089, 1090,
	1087, 909, 1356, 1360, 0, 0, 0, 1362, -2, 0,
	1384, -2, -2, 1579, 1631, 1433, 1082, 1455, 1457, 1308,
	1625, 0, 1530, 1527, 0, 1514, 1237, 1475, 1476, 0,
	0, 1479, 1481, 1482, 1483, 1604, 0, 0, 0, 0,
	1505, 1067, 1519, 0, 0, 1121, 1519, 1519, 1159, 0,
	1161, 1156, 1154, 1129, 1122, 0, 1688, 1146, 0, 0,
	1196, 1201, 0, 1264, 118, 119, 121, 0, 771, 0,
	774, 0, 0, 0, 0, 781, 782, 0, 0, 0,
	0, 0, 816, 825, 0, 1091, 0, 0, 0, 126,
	146, 0, 0, 923, 0, 0, 151, 151, 0, 0,
	914, 0, 0, 0, 0, 106, 0, 0, 916, 918,
	912, 0, 0, 920, 179, 760, 0, 812, 804, 805,
	806, 0, 811, 813, 0, 0, 730, 727, 743, 725,
	0, 296, 848, 880, 0, 898, 0, 0, 0, 975,
	987, 0, 980, 981, 1010, 1096, 0, 0, 0, 996,
	1097, 0, 188, 189, 0, 0, 0, 0, 0, 0,
	0, 189, 477, 479, 0, 0, 485, 756, 0, 0,
	0, 0, 1088, 1364, -2, -2, 1385, 0, 1689, 1691,
	1082, 0, 1516, 0, 0, -2, 0, 0, 0, 1053,
	0, 1112, 1110, 1054, 1055, 1180, 1166, 0, 1149, 0,
	1203, 123, 0, 775, 776, 1674, 778, 0, 780, 783,
	0, 785, 1710, 0, 789, 796, 817, 0, 752, 0,
	822, 823, 903, 904, 798, 0, 125, 127, 145, 906,
	133, 128, 135, 0, 0, 82, 0, 0, 1759, 109,
	107, 105, 84, 0, 725, 759, 0, 803, 0, 814,
	815, 728, 0, 0, 0, 297, 300, 0, 303, 0,
	899, 0, 0, 0, 982, 983, 312, 0, 0, 0,
	1010, 1021, 166, 0, 0, 825, 0, 0, 793, 0,
	171, 0, 481, 0, 483, 0, 694, 696, 0, 0,
	1456, 1534, 0, 1477, 1478, -2, 0, 1422, 1518, 1520,
	0, 1134, 1123, 1197, 773, 777, 0, 0, 831, 0,
	0, 0, 820, 821, 760, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 731, 0,
	752, 0, 301, 302, 825, 0, 825, 0, 984, 985,
	0, 1003, 1004, 1006, 1011, 0, 0, 752, 825, 792,
	0, 480, 0, 0, 699, 700, 0, 0, 0, 0,
	1529, 1423, 0, 0, 0, 784, 836, 0, 0, 0,
	818, 819, 816, 0, 827, 130, 0, 905, 0, 764,
	0, 0, 767, 0, 0, 110, 1759, 108, 0, 0,
	0, 808, 810, 732, 760, 730, 752, 0, 752, 0,
	976, 0, 1005, 189, 189, 760, 752, 189, 482, 484,
	1526, 1546, 1535, -2, 1964, 1762, 0, 1546, 1546, 1521,
	1522, 0, 786, 832, 833, 0, 828, 829, 830, 1709,
	787, 788, 797, 824, 831, 147, 761, 0, 0, 762,
	0, 0, 113, 0, 115, 0, 807, 0, 725, 729,
	760, 0, 760, 0, 1194, 168, 169, 790, 760, 170,
	1531, 0, 0, 1537, 1538, 1539, 1540, 1541, 1532, 1533,
	779, 834, 0, 835, 0, 0, 0, 836, 765, 0,
	768, 0, 111, 0, 809, 724, 896, 825, 896, 825,
	1002, 791, 0, 1543, 1544, 0, 0, 837, 0, 840,
	841, 0, 838, 816, 0, 0, 755, 891, 0, 752,
	893, 752, 1542, 1545, 1536, 839, 842, 843, 799, 0,
	0, 751, 753, 754, 897, 760, 760, 760, 0, 896,
	896, 766, 0, 892, 894, 0, 0, 760, 769,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 451, 3, 457, 452, 3,
	462, 463, 455, 453, 467, 454, 464, 456, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 470, 3,
	443, 445, 444, 448, 466, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 460, 3, 461, 458, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 468, 450, 469, 446,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 447, 57786, 449, 57787, 459, 57788, 465, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1092
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1112
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1237
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1319
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1352
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1381
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1416
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1435
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1499
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1518
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1529
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1535
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1686
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				TableIndex: sqlDollar[6].union.tableIndexName(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1733
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1832
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1923
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1932
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1948
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1953
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1958
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1989
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2059
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2170
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2174
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2182
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2197
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2203
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2208
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2220
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2223
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2224
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2251
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2252
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2255
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2256
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2259
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2260
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2291
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2292
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2293
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2294
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2304
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2312
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2320
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2339
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2346
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2352
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2358
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2362
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2373
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2393
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2401
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2411
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2415
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2421
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2432
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2436
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2450
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2460
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2464
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2490
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2498
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2528
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2543
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2582
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2597
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2623
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2628
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2656
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2660
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2664
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2668
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2672
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2683
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2694
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2705
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2711
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2714
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2723
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2737
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2745
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2757
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2761
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2771
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2778
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2786
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2790
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2794
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2812
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2850
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2878
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2881
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2886
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2890
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2900
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2918
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2931
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2934
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2945
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2959
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2964
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2965
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2966
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2971
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2972
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3036
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3046
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3096
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3116
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3138
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3141
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3143
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3150
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3169
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3181
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3186
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3191
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3192
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3205
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3212
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3216
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3222
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3226
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3233
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3254
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3264
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3268
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3280
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3305
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3309
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3313
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3347
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3359
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3362
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3382
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3386
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3404
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3419
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3435
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3450
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3458
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3475
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3498
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3506
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3514
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3521
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3532
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3545
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3564
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3577
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3583
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3586
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3594
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3597
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3599
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3602
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3613
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3615
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3618
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = true
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3624
		{
			sqlVAL.union.val = true
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3626
		{
			sqlVAL.union.val = false
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3643
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3644
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3646
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3650
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3653
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3663
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3680
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3683
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3688
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3690
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3694
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3697
		{
			sqlVAL.union.val = true
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3698
		{
			sqlVAL.union.val = false
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3709
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3714
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3722
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3732
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3742
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3745
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3748
		{
			sqlVAL.union.val = true
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = false
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3760
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3763
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3774
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3777
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3784
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3788
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3796
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3801
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3806
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3822
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3826
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3842
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3850
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3853
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3857
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3861
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3865
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3873
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3899
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3910
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3918
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3924
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3933
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3938
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3942
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3945
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3949
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3956
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3961
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4089
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4132
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4137
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4141
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4173
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4185
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4221
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4234
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4248
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4249
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4250
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4254
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4265
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4277
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4278
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4279
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = true
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4307
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4334
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4337
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4341
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4357
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4362
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4373
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4423
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4443
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4457
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4520
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4544
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4558
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4591
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4601
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4624
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4630
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4651
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4665
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4669
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4675
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4685
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4700
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4750
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4754
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4765
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4766
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4767
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4768
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4769
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4770
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4829
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4842
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4870
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4882
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4890
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4894
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4900
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4904
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4910
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4929
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4938
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4946
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4950
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4953
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4957
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4958
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4961
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4962
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4965
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4967
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4969
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4972
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4977
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4979
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4990
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4998
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5002
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5005
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5009
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5013
		{
			sqlVAL.union.val = nil
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5023
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5027
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5030
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5035
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5036
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5044
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5053
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5054
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5057
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5058
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5064
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5066
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5068
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5070
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5072
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5074
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5090
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5104
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5119
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5133
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5147
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5150
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5155
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5170
		{
			sqlVAL.union.val = false
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5176
		{
			sqlVAL.union.val = true
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = false
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5199
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5221
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5222
		{
			sqlVAL.str = ""
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.union.val = tree.Descending
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5234
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5240
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5257
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5263
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5271
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5277
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5285
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5291
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5308
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5309
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5312
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5313
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5324
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5346
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5357
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5361
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5362
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5363
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5379
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5382
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5384
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5387
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5397
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5400
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5402
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5414
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5416
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5424
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5431
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5434
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5435
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.str = ""
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5447
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5451
		{
			sqlVAL.str = ""
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5461
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5471
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5481
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5496
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5500
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5505
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5509
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5513
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5519
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5525
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5535
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 975:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5565
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5569
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5573
		{
			sqlVAL.str = ""
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5579
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5583
		{
			sqlVAL.str = ""
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5589
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5593
		{
			sqlVAL.str = ""
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5599
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5603
		{
			sqlVAL.str = ""
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5608
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5609
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5635
		{
			return helpWith(sqllex, "INSERT")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5646
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5653
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5657
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5666
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5711
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5715
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5719
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5728
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5729
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5737
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5763
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5775
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5778
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5781
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5787
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5804
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5807
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5860
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5895
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5911
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5915
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5921
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5923
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5924
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5929
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5964
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5965
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5966
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6015
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6027
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6040
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6049
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6064
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6071
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6083
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6087
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6098
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6116
		{
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6117
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = nil
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6130
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6131
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = true
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = false
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = false
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = true
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6155
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6160
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6161
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6175
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6191
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6212
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6217
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6233
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6246
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6267
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6275
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6320
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6321
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6324
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6325
		{
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6346
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6378
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6380
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6395
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6403
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6417
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6422
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6427
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6438
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6445
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6450
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6469
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6508
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6522
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6557
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6568
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6620
		{
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6622
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6625
		{
			sqlVAL.union.val = nil
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6641
		{
			sqlVAL.union.val = true
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = false
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6695
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6715
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.str = tree.AstFull
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.str = tree.AstRight
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.str = tree.AstInner
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6740
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.str = tree.AstHash
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6769
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6773
		{
			sqlVAL.str = ""
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6802
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6807
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6825
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6831
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6839
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6868
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6881
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6889
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6890
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6908
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6910
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6918
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6930
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6932
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = types.String
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = types.Name
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = types.INet
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = types.Oid
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7064
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7072
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = nil
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = types.Int2
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = types.Int2
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = types.Int4
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = types.Int
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = types.Int
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = types.Int
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = types.Float4
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = types.Float4
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = types.Float
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = types.Float
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7139
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7147
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7155
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = types.Bool
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = types.Bool
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = types.RegType
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7196
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = types.Float
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7215
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7221
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7243
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = types.String
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = true
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = false
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = types.Date
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7292
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7297
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7305
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7307
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7315
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7331
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = true
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = false
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = false
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = types.Interval
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = tree.Year
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = tree.Month
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = tree.Day
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Month
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = nil
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = tree.Second
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7418
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7446
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7450
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7454
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7465
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7478
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7709
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7775
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7797
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7833
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7991
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7996
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8005
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8023
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8032
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8071
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8082
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8083
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8098
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8109
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8139
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8153
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8199
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8221
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8226
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8231
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8233
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8246
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8251
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8256
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8265
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8266
		{
			return unimplemented(sqllex, "treat")
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8287
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8292
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8297
		{
			return unimplemented(sqllex, "within group")
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8298
		{
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.str = ""
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8435
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8491
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8503
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8532
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = tree.Any
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = tree.Some
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = tree.All
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = tree.Div
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8564
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8566
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = tree.LT
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = tree.GT
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = tree.LE
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = tree.GE
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = tree.NE
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.Like
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8578
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8606
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8652
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8668
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8725
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8729
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8771
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8779
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8783
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8795
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8805
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8809
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8827
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8850
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8867
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8871
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8878
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8894
		{
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8933
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8943
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8966
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8974
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8997
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9006
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9010
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9014
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9018
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9024
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9036
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9040
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9049
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9060
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9069
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9077
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9181
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9185
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9189
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9203
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9207
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9211
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9224
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9242
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9255
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9262
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9287
		{
			sqlVAL.str = ""
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9293
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9297
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
