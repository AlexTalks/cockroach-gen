// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:616
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10040

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1090,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 912,
	199, 912,
	214, 251,
	297, 251,
	306, 743,
	333, 251,
	342, 743,
	381, 743,
	405, 251,
	429, 743,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1090,
	188, 1090,
	415, 1090,
	416, 1090,
	-2, 0,
	-1, 87,
	122, 1064,
	138, 1064,
	151, 1064,
	196, 1064,
	226, 1064,
	261, 1064,
	271, 1064,
	410, 1064,
	-2, 1035,
	-1, 118,
	128, 661,
	213, 661,
	300, 641,
	351, 641,
	398, 661,
	-2, 0,
	-1, 119,
	4, 1092,
	21, 1092,
	22, 1092,
	23, 1092,
	24, 1092,
	25, 1092,
	27, 1092,
	33, 1092,
	38, 1092,
	39, 1092,
	40, 1092,
	41, 1092,
	42, 1092,
	43, 1092,
	44, 1092,
	45, 1092,
	46, 1092,
	47, 1092,
	48, 1092,
	49, 1092,
	51, 1092,
	52, 1092,
	53, 1092,
	54, 1092,
	55, 1092,
	56, 1092,
	59, 1092,
	60, 1092,
	61, 1092,
	62, 1092,
	64, 1092,
	65, 1092,
	69, 1092,
	70, 1092,
	71, 1092,
	72, 1092,
	73, 1092,
	74, 1092,
	76, 1092,
	77, 1092,
	78, 1092,
	79, 1092,
	81, 1092,
	83, 1092,
	84, 1092,
	85, 1092,
	88, 1092,
	89, 1092,
	97, 1092,
	98, 1092,
	99, 1092,
	100, 1092,
	101, 1092,
	102, 1092,
	103, 1092,
	104, 1092,
	106, 1092,
	108, 1092,
	109, 1092,
	111, 1092,
	114, 1092,
	115, 1092,
	116, 1092,
	118, 1092,
	120, 1092,
	121, 1092,
	123, 1092,
	124, 1092,
	125, 1092,
	126, 1092,
	127, 1092,
	128, 1092,
	129, 1092,
	130, 1092,
	131, 1092,
	132, 1092,
	133, 1092,
	134, 1092,
	135, 1092,
	137, 1092,
	143, 1092,
	144, 1092,
	145, 1092,
	146, 1092,
	147, 1092,
	148, 1092,
	150, 1092,
	152, 1092,
	156, 1092,
	157, 1092,
	159, 1092,
	160, 1092,
	162, 1092,
	163, 1092,
	165, 1092,
	166, 1092,
	167, 1092,
	168, 1092,
	169, 1092,
	170, 1092,
	171, 1092,
	172, 1092,
	174, 1092,
	175, 1092,
	177, 1092,
	178, 1092,
	179, 1092,
	182, 1092,
	183, 1092,
	184, 1092,
	185, 1092,
	188, 1092,
	189, 1092,
	190, 1092,
	191, 1092,
	192, 1092,
	193, 1092,
	194, 1092,
	195, 1092,
	197, 1092,
	199, 1092,
	201, 1092,
	203, 1092,
	204, 1092,
	205, 1092,
	207, 1092,
	208, 1092,
	211, 1092,
	212, 1092,
	213, 1092,
	214, 1092,
	215, 1092,
	217, 1092,
	218, 1092,
	220, 1092,
	221, 1092,
	223, 1092,
	224, 1092,
	227, 1092,
	228, 1092,
	231, 1092,
	232, 1092,
	233, 1092,
	235, 1092,
	236, 1092,
	237, 1092,
	238, 1092,
	239, 1092,
	240, 1092,
	241, 1092,
	242, 1092,
	243, 1092,
	244, 1092,
	246, 1092,
	247, 1092,
	248, 1092,
	250, 1092,
	252, 1092,
	254, 1092,
	256, 1092,
	257, 1092,
	258, 1092,
	259, 1092,
	260, 1092,
	262, 1092,
	263, 1092,
	264, 1092,
	266, 1092,
	267, 1092,
	268, 1092,
	269, 1092,
	272, 1092,
	273, 1092,
	274, 1092,
	276, 1092,
	278, 1092,
	279, 1092,
	280, 1092,
	281, 1092,
	282, 1092,
	283, 1092,
	284, 1092,
	285, 1092,
	286, 1092,
	287, 1092,
	289, 1092,
	290, 1092,
	291, 1092,
	292, 1092,
	293, 1092,
	294, 1092,
	296, 1092,
	298, 1092,
	299, 1092,
	300, 1092,
	301, 1092,
	302, 1092,
	303, 1092,
	304, 1092,
	305, 1092,
	306, 1092,
	307, 1092,
	309, 1092,
	310, 1092,
	311, 1092,
	312, 1092,
	313, 1092,
	315, 1092,
	316, 1092,
	317, 1092,
	318, 1092,
	319, 1092,
	320, 1092,
	321, 1092,
	322, 1092,
	324, 1092,
	326, 1092,
	327, 1092,
	328, 1092,
	329, 1092,
	330, 1092,
	331, 1092,
	333, 1092,
	334, 1092,
	335, 1092,
	336, 1092,
	337, 1092,
	338, 1092,
	339, 1092,
	340, 1092,
	342, 1092,
	343, 1092,
	344, 1092,
	345, 1092,
	346, 1092,
	347, 1092,
	348, 1092,
	349, 1092,
	350, 1092,
	351, 1092,
	353, 1092,
	354, 1092,
	355, 1092,
	356, 1092,
	357, 1092,
	359, 1092,
	360, 1092,
	361, 1092,
	362, 1092,
	363, 1092,
	365, 1092,
	366, 1092,
	367, 1092,
	368, 1092,
	369, 1092,
	370, 1092,
	371, 1092,
	372, 1092,
	373, 1092,
	374, 1092,
	375, 1092,
	376, 1092,
	378, 1092,
	379, 1092,
	380, 1092,
	382, 1092,
	383, 1092,
	384, 1092,
	385, 1092,
	386, 1092,
	387, 1092,
	388, 1092,
	390, 1092,
	391, 1092,
	392, 1092,
	393, 1092,
	394, 1092,
	396, 1092,
	398, 1092,
	399, 1092,
	400, 1092,
	401, 1092,
	402, 1092,
	404, 1092,
	405, 1092,
	406, 1092,
	408, 1092,
	409, 1092,
	412, 1092,
	413, 1092,
	414, 1092,
	415, 1092,
	416, 1092,
	417, 1092,
	419, 1092,
	421, 1092,
	422, 1092,
	423, 1092,
	424, 1092,
	425, 1092,
	426, 1092,
	427, 1092,
	429, 1092,
	430, 1092,
	431, 1092,
	436, 1092,
	437, 1092,
	438, 1092,
	439, 1092,
	440, 1092,
	441, 1092,
	-2, 0,
	-1, 120,
	1, 965,
	203, 965,
	296, 965,
	304, 965,
	444, 965,
	467, 965,
	-2, 0,
	-1, 122,
	1, 965,
	467, 965,
	-2, 0,
	-1, 123,
	1, 965,
	467, 965,
	-2, 0,
	-1, 124,
	1, 969,
	467, 969,
	-2, 0,
	-1, 149,
	122, 1063,
	138, 1063,
	151, 1063,
	196, 1063,
	226, 1063,
	261, 1063,
	271, 1063,
	410, 1063,
	-2, 1038,
	-1, 182,
	4, 1099,
	5, 1099,
	6, 1099,
	7, 1099,
	8, 1099,
	9, 1099,
	10, 1099,
	21, 1099,
	22, 1099,
	23, 1099,
	24, 1099,
	25, 1099,
	27, 1099,
	33, 1099,
	34, 1099,
	38, 1099,
	39, 1099,
	40, 1099,
	41, 1099,
	42, 1099,
	43, 1099,
	44, 1099,
	45, 1099,
	46, 1099,
	47, 1099,
	48, 1099,
	49, 1099,
	51, 1099,
	52, 1099,
	53, 1099,
	54, 1099,
	55, 1099,
	56, 1099,
	57, 1099,
	58, 1099,
	59, 1099,
	60, 1099,
	61, 1099,
	62, 1099,
	64, 1099,
	65, 1099,
	67, 1099,
	69, 1099,
	70, 1099,
	71, 1099,
	72, 1099,
	73, 1099,
	74, 1099,
	76, 1099,
	77, 1099,
	78, 1099,
	79, 1099,
	81, 1099,
	83, 1099,
	84, 1099,
	85, 1099,
	87, 1099,
	88, 1099,
	89, 1099,
	90, 1099,
	91, 1099,
	92, 1099,
	93, 1099,
	94, 1099,
	95, 1099,
	96, 1099,
	97, 1099,
	98, 1099,
	99, 1099,
	100, 1099,
	101, 1099,
	102, 1099,
	103, 1099,
	104, 1099,
	105, 1099,
	106, 1099,
	108, 1099,
	109, 1099,
	111, 1099,
	114, 1099,
	115, 1099,
	116, 1099,
	118, 1099,
	120, 1099,
	121, 1099,
	123, 1099,
	124, 1099,
	125, 1099,
	126, 1099,
	127, 1099,
	128, 1099,
	129, 1099,
	130, 1099,
	131, 1099,
	132, 1099,
	133, 1099,
	134, 1099,
	135, 1099,
	136, 1099,
	137, 1099,
	143, 1099,
	144, 1099,
	145, 1099,
	146, 1099,
	147, 1099,
	148, 1099,
	150, 1099,
	152, 1099,
	155, 1099,
	156, 1099,
	157, 1099,
	159, 1099,
	160, 1099,
	162, 1099,
	163, 1099,
	165, 1099,
	166, 1099,
	167, 1099,
	168, 1099,
	169, 1099,
	170, 1099,
	171, 1099,
	172, 1099,
	173, 1099,
	174, 1099,
	175, 1099,
	177, 1099,
	178, 1099,
	179, 1099,
	182, 1099,
	183, 1099,
	184, 1099,
	185, 1099,
	187, 1099,
	188, 1099,
	189, 1099,
	190, 1099,
	191, 1099,
	192, 1099,
	193, 1099,
	194, 1099,
	195, 1099,
	197, 1099,
	199, 1099,
	200, 1099,
	201, 1099,
	202, 1099,
	203, 1099,
	204, 1099,
	205, 1099,
	206, 1099,
	207, 1099,
	208, 1099,
	211, 1099,
	212, 1099,
	213, 1099,
	214, 1099,
	215, 1099,
	217, 1099,
	218, 1099,
	220, 1099,
	221, 1099,
	222, 1099,
	223, 1099,
	224, 1099,
	225, 1099,
	227, 1099,
	228, 1099,
	231, 1099,
	232, 1099,
	233, 1099,
	235, 1099,
	236, 1099,
	237, 1099,
	238, 1099,
	239, 1099,
	240, 1099,
	241, 1099,
	242, 1099,
	243, 1099,
	244, 1099,
	245, 1099,
	246, 1099,
	247, 1099,
	248, 1099,
	249, 1099,
	250, 1099,
	251, 1099,
	252, 1099,
	253, 1099,
	254, 1099,
	255, 1099,
	256, 1099,
	257, 1099,
	258, 1099,
	259, 1099,
	260, 1099,
	262, 1099,
	263, 1099,
	264, 1099,
	267, 1099,
	268, 1099,
	269, 1099,
	272, 1099,
	273, 1099,
	274, 1099,
	275, 1099,
	276, 1099,
	277, 1099,
	278, 1099,
	279, 1099,
	280, 1099,
	281, 1099,
	282, 1099,
	283, 1099,
	284, 1099,
	285, 1099,
	286, 1099,
	287, 1099,
	289, 1099,
	290, 1099,
	291, 1099,
	292, 1099,
	293, 1099,
	294, 1099,
	296, 1099,
	298, 1099,
	299, 1099,
	300, 1099,
	301, 1099,
	302, 1099,
	303, 1099,
	304, 1099,
	305, 1099,
	306, 1099,
	307, 1099,
	309, 1099,
	310, 1099,
	311, 1099,
	312, 1099,
	313, 1099,
	315, 1099,
	316, 1099,
	317, 1099,
	318, 1099,
	319, 1099,
	320, 1099,
	321, 1099,
	322, 1099,
	324, 1099,
	325, 1099,
	326, 1099,
	327, 1099,
	328, 1099,
	329, 1099,
	330, 1099,
	331, 1099,
	333, 1099,
	334, 1099,
	335, 1099,
	336, 1099,
	337, 1099,
	338, 1099,
	339, 1099,
	340, 1099,
	342, 1099,
	343, 1099,
	344, 1099,
	345, 1099,
	346, 1099,
	347, 1099,
	348, 1099,
	349, 1099,
	350, 1099,
	351, 1099,
	352, 1099,
	353, 1099,
	354, 1099,
	355, 1099,
	356, 1099,
	357, 1099,
	358, 1099,
	359, 1099,
	360, 1099,
	361, 1099,
	362, 1099,
	363, 1099,
	365, 1099,
	366, 1099,
	367, 1099,
	368, 1099,
	369, 1099,
	370, 1099,
	371, 1099,
	372, 1099,
	373, 1099,
	374, 1099,
	375, 1099,
	376, 1099,
	378, 1099,
	379, 1099,
	380, 1099,
	382, 1099,
	383, 1099,
	384, 1099,
	385, 1099,
	386, 1099,
	387, 1099,
	388, 1099,
	390, 1099,
	391, 1099,
	392, 1099,
	393, 1099,
	394, 1099,
	396, 1099,
	398, 1099,
	399, 1099,
	400, 1099,
	401, 1099,
	402, 1099,
	403, 1099,
	404, 1099,
	405, 1099,
	406, 1099,
	408, 1099,
	409, 1099,
	411, 1099,
	412, 1099,
	413, 1099,
	414, 1099,
	415, 1099,
	416, 1099,
	417, 1099,
	418, 1099,
	419, 1099,
	421, 1099,
	422, 1099,
	423, 1099,
	424, 1099,
	425, 1099,
	426, 1099,
	427, 1099,
	429, 1099,
	430, 1099,
	431, 1099,
	436, 1099,
	437, 1099,
	438, 1099,
	439, 1099,
	440, 1099,
	441, 1099,
	442, 1099,
	448, 1099,
	455, 1099,
	456, 1099,
	457, 1099,
	464, 1099,
	468, 1099,
	-2, 0,
	-1, 561,
	154, 1782,
	395, 1782,
	447, 1782,
	466, 1782,
	-2, 0,
	-1, 562,
	154, 1861,
	395, 1861,
	447, 1861,
	466, 1861,
	-2, 0,
	-1, 563,
	154, 1771,
	395, 1771,
	447, 1771,
	466, 1771,
	-2, 0,
	-1, 565,
	154, 1954,
	395, 1954,
	447, 1954,
	466, 1954,
	-2, 0,
	-1, 567,
	154, 1984,
	395, 1984,
	447, 1984,
	466, 1984,
	-2, 0,
	-1, 574,
	154, 1872,
	395, 1872,
	447, 1872,
	466, 1872,
	-2, 508,
	-1, 592,
	466, 1729,
	469, 1729,
	-2, 712,
	-1, 593,
	466, 1731,
	469, 1731,
	-2, 713,
	-1, 594,
	466, 1730,
	469, 1730,
	-2, 714,
	-1, 595,
	469, 1675,
	-2, 715,
	-1, 638,
	429, 894,
	-2, 744,
	-1, 744,
	300, 642,
	351, 642,
	-2, 0,
	-1, 745,
	300, 641,
	351, 641,
	-2, 589,
	-1, 749,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 750,
	1, 711,
	151, 711,
	463, 711,
	465, 711,
	467, 711,
	-2, 0,
	-1, 758,
	1, 645,
	463, 645,
	465, 645,
	467, 645,
	-2, 0,
	-1, 761,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 762,
	1, 673,
	463, 673,
	465, 673,
	467, 673,
	-2, 0,
	-1, 763,
	1, 676,
	463, 676,
	465, 676,
	467, 676,
	-2, 0,
	-1, 767,
	1, 690,
	463, 690,
	465, 690,
	467, 690,
	-2, 0,
	-1, 768,
	1, 692,
	463, 692,
	465, 692,
	467, 692,
	-2, 0,
	-1, 812,
	138, 1101,
	151, 1101,
	226, 1101,
	261, 1101,
	-2, 1042,
	-1, 825,
	138, 1100,
	151, 1100,
	226, 1100,
	261, 1100,
	-2, 1039,
	-1, 849,
	466, 1728,
	-2, 516,
	-1, 877,
	464, 1720,
	-2, 1711,
	-1, 883,
	5, 1240,
	-2, 1762,
	-1, 884,
	5, 1241,
	-2, 1766,
	-1, 885,
	5, 1242,
	-2, 1765,
	-1, 886,
	5, 1243,
	-2, 1981,
	-1, 887,
	5, 1244,
	-2, 1874,
	-1, 888,
	5, 1245,
	-2, 1946,
	-1, 889,
	5, 1246,
	-2, 1948,
	-1, 890,
	5, 1247,
	-2, 1961,
	-1, 891,
	5, 1248,
	-2, 1949,
	-1, 892,
	5, 1249,
	-2, 1950,
	-1, 893,
	5, 1250,
	-2, 1761,
	-1, 894,
	5, 1251,
	-2, 1997,
	-1, 895,
	5, 1252,
	-2, 1835,
	-1, 896,
	5, 1253,
	-2, 1884,
	-1, 897,
	5, 1254,
	-2, 1886,
	-1, 898,
	5, 1255,
	-2, 1839,
	-1, 899,
	5, 1256,
	464, 1738,
	-2, 1729,
	-1, 905,
	464, 1739,
	-2, 1730,
	-1, 907,
	5, 1260,
	-2, 2030,
	-1, 908,
	5, 1261,
	-2, 2031,
	-1, 909,
	5, 1262,
	-2, 1838,
	-1, 910,
	5, 1263,
	-2, 2043,
	-1, 911,
	5, 1264,
	-2, 1840,
	-1, 912,
	5, 1265,
	-2, 1841,
	-1, 913,
	5, 1266,
	-2, 1842,
	-1, 914,
	5, 1267,
	-2, 2012,
	-1, 915,
	5, 1268,
	-2, 2041,
	-1, 916,
	5, 1269,
	-2, 1818,
	-1, 917,
	5, 1270,
	-2, 1819,
	-1, 918,
	5, 1284,
	-2, 2024,
	-1, 920,
	5, 1259,
	-2, 2020,
	-1, 921,
	5, 1259,
	-2, 2019,
	-1, 922,
	5, 1259,
	-2, 2036,
	-1, 923,
	5, 1276,
	-2, 2014,
	-1, 924,
	5, 1277,
	-2, 1763,
	-1, 925,
	5, 1287,
	-2, 2013,
	-1, 926,
	5, 1289,
	-2, 2052,
	-1, 928,
	5, 1300,
	-2, 1792,
	-1, 929,
	5, 1311,
	-2, 2045,
	-1, 930,
	5, 1303,
	-2, 2046,
	-1, 931,
	5, 1311,
	-2, 2047,
	-1, 932,
	5, 1307,
	-2, 2048,
	-1, 933,
	5, 1228,
	-2, 1848,
	-1, 934,
	5, 1229,
	-2, 1849,
	-1, 935,
	466, 1726,
	-2, 1710,
	-1, 936,
	464, 2073,
	-2, 1727,
	-1, 956,
	5, 1295,
	-2, 1972,
	-1, 974,
	5, 1294,
	-2, 2053,
	-1, 984,
	5, 1296,
	430, 1296,
	-2, 2015,
	-1, 985,
	5, 1297,
	430, 1297,
	-2, 2016,
	-1, 1022,
	464, 1738,
	-2, 1729,
	-1, 1050,
	154, 1984,
	395, 1984,
	447, 1984,
	466, 1984,
	-2, 0,
	-1, 1053,
	1, 494,
	467, 494,
	-2, 977,
	-1, 1173,
	315, 1707,
	457, 1707,
	-2, 1706,
	-1, 1196,
	468, 1707,
	-2, 1708,
	-1, 1234,
	306, 743,
	429, 743,
	-2, 250,
	-1, 1254,
	285, 1088,
	-2, 883,
	-1, 1263,
	265, 1733,
	-2, 0,
	-1, 1329,
	1, 369,
	463, 369,
	465, 369,
	467, 369,
	-2, 1062,
	-1, 1332,
	4, 2051,
	11, 2051,
	12, 2051,
	14, 2051,
	15, 2051,
	16, 2051,
	17, 2051,
	18, 2051,
	19, 2051,
	21, 2051,
	22, 2051,
	23, 2051,
	24, 2051,
	25, 2051,
	27, 2051,
	30, 2051,
	31, 2051,
	33, 2051,
	35, 2051,
	38, 2051,
	39, 2051,
	40, 2051,
	41, 2051,
	42, 2051,
	43, 2051,
	44, 2051,
	45, 2051,
	46, 2051,
	47, 2051,
	48, 2051,
	49, 2051,
	51, 2051,
	52, 2051,
	53, 2051,
	54, 2051,
	55, 2051,
	56, 2051,
	59, 2051,
	60, 2051,
	61, 2051,
	62, 2051,
	64, 2051,
	65, 2051,
	66, 2051,
	69, 2051,
	70, 2051,
	71, 2051,
	72, 2051,
	73, 2051,
	74, 2051,
	75, 2051,
	76, 2051,
	77, 2051,
	78, 2051,
	79, 2051,
	81, 2051,
	82, 2051,
	83, 2051,
	84, 2051,
	85, 2051,
	87, 2051,
	88, 2051,
	89, 2051,
	97, 2051,
	98, 2051,
	99, 2051,
	100, 2051,
	101, 2051,
	102, 2051,
	103, 2051,
	104, 2051,
	106, 2051,
	108, 2051,
	109, 2051,
	111, 2051,
	114, 2051,
	115, 2051,
	116, 2051,
	118, 2051,
	120, 2051,
	121, 2051,
	123, 2051,
	124, 2051,
	125, 2051,
	126, 2051,
	127, 2051,
	128, 2051,
	129, 2051,
	130, 2051,
	131, 2051,
	132, 2051,
	133, 2051,
	134, 2051,
	135, 2051,
	139, 2051,
	140, 2051,
	141, 2051,
	142, 2051,
	143, 2051,
	144, 2051,
	145, 2051,
	146, 2051,
	147, 2051,
	148, 2051,
	149, 2051,
	150, 2051,
	152, 2051,
	155, 2051,
	156, 2051,
	157, 2051,
	159, 2051,
	160, 2051,
	162, 2051,
	163, 2051,
	165, 2051,
	166, 2051,
	167, 2051,
	168, 2051,
	169, 2051,
	170, 2051,
	171, 2051,
	172, 2051,
	173, 2051,
	174, 2051,
	175, 2051,
	176, 2051,
	177, 2051,
	178, 2051,
	179, 2051,
	180, 2051,
	181, 2051,
	183, 2051,
	184, 2051,
	185, 2051,
	187, 2051,
	188, 2051,
	189, 2051,
	190, 2051,
	191, 2051,
	192, 2051,
	193, 2051,
	194, 2051,
	195, 2051,
	197, 2051,
	199, 2051,
	200, 2051,
	201, 2051,
	202, 2051,
	203, 2051,
	204, 2051,
	205, 2051,
	206, 2051,
	207, 2051,
	208, 2051,
	209, 2051,
	210, 2051,
	211, 2051,
	212, 2051,
	213, 2051,
	214, 2051,
	215, 2051,
	217, 2051,
	218, 2051,
	220, 2051,
	221, 2051,
	222, 2051,
	223, 2051,
	224, 2051,
	225, 2051,
	227, 2051,
	228, 2051,
	231, 2051,
	232, 2051,
	233, 2051,
	234, 2051,
	235, 2051,
	236, 2051,
	237, 2051,
	238, 2051,
	239, 2051,
	240, 2051,
	241, 2051,
	242, 2051,
	243, 2051,
	244, 2051,
	245, 2051,
	246, 2051,
	247, 2051,
	248, 2051,
	250, 2051,
	253, 2051,
	254, 2051,
	256, 2051,
	257, 2051,
	258, 2051,
	259, 2051,
	260, 2051,
	262, 2051,
	263, 2051,
	264, 2051,
	267, 2051,
	268, 2051,
	269, 2051,
	270, 2051,
	272, 2051,
	273, 2051,
	274, 2051,
	276, 2051,
	278, 2051,
	279, 2051,
	280, 2051,
	281, 2051,
	282, 2051,
	283, 2051,
	284, 2051,
	285, 2051,
	286, 2051,
	287, 2051,
	289, 2051,
	290, 2051,
	291, 2051,
	292, 2051,
	293, 2051,
	294, 2051,
	296, 2051,
	298, 2051,
	299, 2051,
	300, 2051,
	301, 2051,
	302, 2051,
	303, 2051,
	304, 2051,
	305, 2051,
	306, 2051,
	307, 2051,
	309, 2051,
	310, 2051,
	311, 2051,
	312, 2051,
	313, 2051,
	314, 2051,
	315, 2051,
	316, 2051,
	317, 2051,
	318, 2051,
	319, 2051,
	320, 2051,
	321, 2051,
	322, 2051,
	324, 2051,
	325, 2051,
	326, 2051,
	327, 2051,
	328, 2051,
	329, 2051,
	330, 2051,
	331, 2051,
	332, 2051,
	333, 2051,
	334, 2051,
	335, 2051,
	336, 2051,
	337, 2051,
	338, 2051,
	339, 2051,
	340, 2051,
	342, 2051,
	343, 2051,
	344, 2051,
	345, 2051,
	346, 2051,
	347, 2051,
	348, 2051,
	349, 2051,
	350, 2051,
	351, 2051,
	353, 2051,
	354, 2051,
	355, 2051,
	356, 2051,
	357, 2051,
	358, 2051,
	359, 2051,
	360, 2051,
	361, 2051,
	362, 2051,
	363, 2051,
	365, 2051,
	366, 2051,
	367, 2051,
	368, 2051,
	369, 2051,
	370, 2051,
	371, 2051,
	372, 2051,
	373, 2051,
	374, 2051,
	375, 2051,
	376, 2051,
	378, 2051,
	379, 2051,
	380, 2051,
	382, 2051,
	383, 2051,
	384, 2051,
	385, 2051,
	386, 2051,
	387, 2051,
	388, 2051,
	390, 2051,
	391, 2051,
	392, 2051,
	393, 2051,
	394, 2051,
	396, 2051,
	398, 2051,
	399, 2051,
	400, 2051,
	401, 2051,
	402, 2051,
	404, 2051,
	405, 2051,
	406, 2051,
	408, 2051,
	409, 2051,
	412, 2051,
	413, 2051,
	414, 2051,
	415, 2051,
	416, 2051,
	417, 2051,
	419, 2051,
	421, 2051,
	422, 2051,
	423, 2051,
	424, 2051,
	425, 2051,
	426, 2051,
	427, 2051,
	429, 2051,
	430, 2051,
	431, 2051,
	436, 2051,
	437, 2051,
	438, 2051,
	439, 2051,
	440, 2051,
	441, 2051,
	442, 2051,
	443, 2051,
	445, 2051,
	446, 2051,
	447, 2051,
	448, 2051,
	449, 2051,
	450, 2051,
	452, 2051,
	453, 2051,
	454, 2051,
	455, 2051,
	456, 2051,
	457, 2051,
	458, 2051,
	459, 2051,
	460, 2051,
	462, 2051,
	465, 2051,
	466, 2051,
	468, 2051,
	469, 2051,
	-2, 0,
	-1, 1337,
	154, 1954,
	395, 1954,
	447, 1954,
	466, 1954,
	-2, 0,
	-1, 1367,
	300, 642,
	351, 642,
	-2, 0,
	-1, 1391,
	1, 637,
	463, 637,
	465, 637,
	467, 637,
	-2, 0,
	-1, 1392,
	1, 662,
	463, 662,
	465, 662,
	467, 662,
	-2, 0,
	-1, 1393,
	1, 644,
	463, 644,
	465, 644,
	467, 644,
	-2, 0,
	-1, 1395,
	1, 648,
	463, 648,
	465, 648,
	467, 648,
	-2, 0,
	-1, 1420,
	1, 2004,
	463, 2004,
	465, 2004,
	466, 2004,
	467, 2004,
	-2, 688,
	-1, 1421,
	1, 1951,
	463, 1951,
	465, 1951,
	466, 1951,
	467, 1951,
	-2, 689,
	-1, 1436,
	1, 972,
	467, 972,
	-2, 977,
	-1, 1440,
	138, 1100,
	151, 1100,
	226, 1100,
	261, 1100,
	-2, 1043,
	-1, 1534,
	122, 1064,
	138, 1064,
	151, 1064,
	196, 1064,
	226, 1064,
	261, 1064,
	271, 1064,
	410, 1064,
	-2, 1469,
	-1, 1589,
	465, 1609,
	-2, 0,
	-1, 1623,
	122, 1064,
	138, 1064,
	151, 1064,
	196, 1064,
	226, 1064,
	261, 1064,
	271, 1064,
	410, 1064,
	-2, 1178,
	-1, 1682,
	464, 1299,
	-2, 1287,
	-1, 1726,
	1, 496,
	467, 496,
	-2, 977,
	-1, 1928,
	1, 639,
	463, 639,
	465, 639,
	467, 639,
	-2, 0,
	-1, 1929,
	1, 664,
	463, 664,
	465, 664,
	467, 664,
	-2, 0,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1350,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1351,
	-1, 2029,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1352,
	-1, 2030,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1353,
	-1, 2031,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1354,
	-1, 2032,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1355,
	-1, 2033,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1356,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1357,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1369,
	-1, 2047,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1370,
	-1, 2048,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1371,
	-1, 2051,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1376,
	-1, 2057,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1380,
	-1, 2059,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1388,
	-1, 2060,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1389,
	-1, 2061,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1390,
	-1, 2062,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1391,
	-1, 2158,
	5, 1256,
	154, 1620,
	464, 1738,
	-2, 1729,
	-1, 2159,
	154, 1621,
	-2, 2008,
	-1, 2160,
	154, 1622,
	-2, 1871,
	-1, 2161,
	154, 1623,
	-2, 1793,
	-1, 2162,
	154, 1624,
	-2, 1829,
	-1, 2163,
	154, 1625,
	-2, 1869,
	-1, 2164,
	154, 1626,
	-2, 1945,
	-1, 2165,
	154, 1627,
	-2, 1453,
	-1, 2234,
	1, 1179,
	2, 1179,
	87, 1179,
	122, 1179,
	138, 1179,
	151, 1179,
	155, 1179,
	161, 1179,
	164, 1179,
	187, 1179,
	196, 1179,
	206, 1179,
	222, 1179,
	226, 1179,
	245, 1179,
	261, 1179,
	265, 1179,
	271, 1179,
	323, 1179,
	325, 1179,
	410, 1179,
	420, 1179,
	433, 1179,
	434, 1179,
	435, 1179,
	444, 1179,
	463, 1179,
	465, 1179,
	467, 1179,
	469, 1179,
	-2, 1178,
	-1, 2247,
	464, 1712,
	-2, 1724,
	-1, 2267,
	464, 1298,
	-2, 1288,
	-1, 2520,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1378,
	-1, 2521,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1382,
	-1, 2527,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1384,
	-1, 2714,
	203, 977,
	296, 977,
	304, 977,
	444, 977,
	-2, 493,
	-1, 2808,
	285, 1088,
	-2, 883,
	-1, 2899,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1386,
	-1, 2906,
	200, 0,
	202, 0,
	253, 0,
	-2, 1405,
	-1, 2969,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1434,
	-1, 2970,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1435,
	-1, 2971,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1436,
	-1, 2975,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1440,
	-1, 2976,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1441,
	-1, 2977,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1442,
	-1, 3021,
	464, 1713,
	-2, 1725,
	-1, 3110,
	466, 2155,
	-2, 1021,
	-1, 3161,
	200, 0,
	202, 0,
	253, 0,
	-2, 1406,
	-1, 3164,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1409,
	-1, 3165,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1411,
	-1, 3328,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1410,
	-1, 3329,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1412,
	-1, 3339,
	200, 0,
	-2, 1443,
	-1, 3452,
	200, 0,
	-2, 1444,
	-1, 3574,
	43, 0,
	173, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 2011,
}

const sqlPrivate = 57344

const sqlLast = 80812

var sqlAct = [...]int{

	905, 3368, 3669, 3397, 3265, 3573, 3371, 3583, 2645, 3659,
	3552, 3143, 3543, 3540, 3584, 2796, 3526, 2190, 3585, 3357,
	3404, 2937, 2409, 1023, 3456, 2646, 3293, 2014, 3102, 3572,
	835, 3317, 1321, 3413, 3097, 850, 3222, 1177, 2074, 214,
	1904, 214, 214, 3622, 214, 214, 214, 214, 214, 2731,
	1317, 214, 3278, 2824, 1657, 2817, 2792, 1449, 3298, 594,
	3083, 572, 2819, 2891, 2513, 1205, 826, 1774, 3042, 3041,
	2374, 2444, 927, 3343, 1059, 1629, 1078, 214, 2382, 2385,
	2398, 594, 1015, 2688, 1658, 2631, 2668, 2651, 3142, 2357,
	2442, 692, 2660, 2452, 1375, 2441, 1862, 3195, 2433, 2649,
	1859, 2435, 2410, 1797, 2300, 1598, 1852, 1170, 2226, 2630,
	4, 2227, 2992, 2011, 1814, 2548, 1542, 1783, 3457, 2116,
	877, 1562, 2087, 2007, 2118, 2505, 1189, 1197, 3398, 2229,
	2451, 1186, 2358, 1810, 1803, 2383, 1853, 1066, 1759, 901,
	86, 1761, 1599, 1436, 834, 142, 1304, 2208, 2107, 2694,
	2071, 2298, 1983, 32, 1981, 2794, 2334, 1006, 1179, 1330,
	1314, 1252, 2403, 1844, 1557, 2187, 2224, 540, 2110, 2290,
	526, 2333, 1055, 595, 548, 1882, 1618, 214, 214, 1608,
	1009, 596, 2198, 2445, 988, 2154, 686, 2088, 149, 206,
	1525, 1450, 1843, 208, 207, 1982, 1451, 2216, 1328, 556,
	590, 1005, 566, 150, 1984, 638, 1615, 1278, 1868, 667,
	1202, 862, 1773, 551, 37, 1456, 1011, 36, 543, 986,
	142, 739, 1435, 34, 25, 23, 756, 1260, 21, 3006,
	2544, 3007, 3699, 1884, 1884, 1884, 2207, 3690, 3689, 3668,
	2647, 2207, 2207, 1820, 3651, 3649, 3608, 3606, 3236, 3236,
	3609, 2207, 599, 602, 3604, 3601, 3598, 3594, 2207, 3602,
	3599, 1820, 830, 3570, 3569, 3568, 825, 1820, 1820, 1896,
	2207, 830, 1003, 3565, 599, 602, 2833, 1896, 1063, 2603,
	2604, 702, 2621, 2622, 2623, 3564, 3538, 3521, 2834, 1896,
	3236, 2262, 831, 3515, 2712, 3514, 3509, 2207, 3159, 2207,
	3236, 2258, 1063, 2996, 3508, 1021, 989, 989, 3236, 3502,
	3496, 3494, 3454, 1820, 3236, 3236, 2262, 3435, 3432, 3406,
	3387, 1820, 3236, 3407, 1820, 3386, 3378, 2456, 3377, 1820,
	1820, 813, 3236, 3349, 3330, 1820, 3315, 1820, 2262, 861,
	1896, 2603, 2604, 2618, 3306, 3263, 812, 3254, 2847, 2207,
	3235, 2207, 3163, 3118, 3236, 3112, 2262, 2863, 3081, 2863,
	3016, 3014, 3082, 2999, 3017, 3015, 1035, 2207, 2921, 2918,
	820, 2862, 1820, 2207, 2854, 2863, 2644, 2642, 2855, 1394,
	2207, 2207, 2641, 2595, 2576, 2559, 2207, 2207, 2577, 2207,
	2557, 2431, 2200, 3522, 2430, 1900, 2558, 990, 1900, 125,
	2360, 992, 2275, 993, 1896, 57, 2207, 2353, 2261, 2256,
	2249, 2206, 2262, 2207, 1820, 2207, 3438, 2609, 1899, 58,
	120, 1040, 1900, 182, 2996, 2199, 1896, 3255, 1820, 2603,
	2604, 2855, 2348, 62, 1778, 2289, 2603, 2604, 1732, 1883,
	1036, 2847, 2380, 2512, 1819, 2287, 1594, 1201, 39, 122,
	3069, 2894, 2872, 1616, 2603, 2604, 1813, 2621, 2622, 2623,
	2207, 2835, 38, 184, 68, 1377, 2243, 3211, 2624, 2547,
	2242, 2241, 2240, 2239, 182, 994, 2603, 2604, 2113, 2609,
	2836, 2145, 991, 819, 41, 818, 1464, 1465, 817, 42,
	816, 815, 1752, 811, 74, 810, 2483, 123, 1885, 1885,
	1885, 809, 2619, 40, 85, 808, 1495, 183, 807, 75,
	82, 2603, 2604, 1467, 184, 806, 805, 176, 2618, 804,
	803, 802, 801, 800, 799, 177, 737, 736, 182, 735,
	734, 214, 2603, 2604, 733, 732, 43, 731, 1464, 1465,
	2618, 1466, 730, 729, 2114, 728, 151, 727, 726, 904,
	725, 724, 723, 76, 722, 721, 720, 719, 183, 214,
	718, 717, 716, 715, 2619, 1467, 214, 2609, 184, 714,
	1223, 1217, 713, 712, 2609, 711, 701, 700, 658, 657,
	615, 614, 214, 1081, 214, 214, 1182, 214, 1081, 214,
	1182, 613, 2609, 1466, 605, 604, 603, 151, 214, 214,
	2620, 1065, 579, 2833, 578, 1070, 577, 1533, 576, 1036,
	560, 204, 183, 203, 2609, 202, 2115, 2112, 201, 200,
	199, 198, 176, 214, 1472, 197, 196, 195, 194, 193,
	177, 2406, 192, 191, 190, 189, 188, 214, 187, 1192,
	1182, 1182, 214, 214, 3302, 214, 1892, 1883, 1976, 2609,
	186, 151, 2619, 185, 3174, 1494, 1496, 214, 3010, 2619,
	2864, 2691, 2620, 2570, 77, 214, 2603, 2604, 2553, 2364,
	2609, 2250, 44, 2391, 2233, 2137, 1472, 2619, 1757, 214,
	214, 214, 214, 214, 1182, 1182, 1642, 2135, 1619, 1182,
	1551, 1544, 214, 1182, 214, 214, 47, 148, 80, 2619,
	81, 1207, 45, 1072, 3087, 1025, 124, 2199, 214, 1487,
	1463, 1053, 46, 2615, 2616, 2617, 2117, 1325, 182, 182,
	2614, 2612, 2613, 2605, 2606, 2607, 2608, 2610, 2611, 3590,
	1907, 50, 3441, 3367, 1018, 118, 1036, 1222, 1216, 1074,
	3571, 1167, 1172, 3490, 1182, 121, 1565, 3447, 3439, 1079,
	2620, 3307, 1564, 3215, 1190, 2619, 1211, 2620, 184, 184,
	3194, 3193, 1210, 3181, 1215, 3180, 1221, 214, 1048, 3179,
	3178, 1204, 3173, 1568, 1173, 2620, 1265, 3171, 1196, 1203,
	3170, 214, 119, 2612, 2613, 2605, 2606, 2607, 2608, 2610,
	2611, 599, 602, 3080, 3030, 152, 214, 2620, 1906, 1347,
	1333, 1335, 183, 183, 2609, 3029, 3028, 1488, 3020, 1396,
	2989, 1565, 176, 176, 1318, 2988, 2111, 1564, 2987, 2914,
	177, 177, 2910, 1545, 3067, 1543, 1308, 1311, 2858, 831,
	2686, 1261, 1261, 2638, 142, 142, 2629, 2602, 1563, 1549,
	2271, 151, 151, 3301, 1533, 3, 2599, 1331, 2598, 2596,
	2583, 2582, 1343, 2620, 2581, 2392, 1404, 2578, 1281, 1346,
	2575, 2569, 2552, 2545, 2432, 2234, 2100, 182, 1463, 1002,
	1262, 1196, 2613, 2605, 2606, 2607, 2608, 2610, 2611, 1441,
	2605, 2606, 2607, 2608, 2610, 2611, 1544, 1462, 2615, 2616,
	2617, 1856, 3697, 3667, 3666, 2614, 2612, 2613, 2605, 2606,
	2607, 2608, 2610, 2611, 1825, 3086, 1823, 184, 3607, 182,
	182, 1024, 1395, 2939, 3560, 3558, 3484, 2614, 2612, 2613,
	2605, 2606, 2607, 2608, 2610, 2611, 3481, 3478, 1440, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 3477, 3476, 1434, 1753,
	2335, 3471, 3465, 1532, 2144, 3436, 3431, 3430, 2504, 184,
	184, 183, 2077, 3383, 3363, 2605, 2606, 2607, 2608, 2610,
	2611, 176, 1352, 3341, 2706, 3325, 3324, 75, 3312, 177,
	3311, 3291, 1368, 2614, 2612, 2613, 2605, 2606, 2607, 2608,
	2610, 2611, 1468, 1469, 1470, 1471, 1473, 1474, 214, 3288,
	2405, 833, 3282, 183, 183, 1439, 3210, 3192, 3132, 3129,
	3058, 3057, 3045, 176, 176, 3044, 3002, 2905, 2865, 1437,
	831, 177, 177, 1596, 2848, 214, 2811, 2390, 2781, 1605,
	2083, 2757, 1446, 813, 2734, 214, 1081, 214, 214, 214,
	214, 1445, 151, 151, 2733, 594, 214, 214, 812, 903,
	594, 214, 2707, 1442, 1459, 1460, 214, 2643, 2574, 1652,
	2573, 2568, 1182, 1567, 2536, 2373, 1569, 1566, 1558, 1555,
	2269, 2268, 2245, 3458, 2683, 1724, 2238, 2205, 860, 1464,
	1465, 2133, 1529, 1081, 1641, 1597, 1593, 1592, 2603, 2604,
	1650, 2621, 2622, 2623, 1591, 1590, 1559, 1560, 2320, 1729,
	1644, 1589, 1588, 1587, 1586, 182, 1467, 1755, 1626, 1585,
	1583, 1654, 1602, 1603, 1582, 1581, 1721, 1723, 1908, 1580,
	2734, 1684, 2607, 2608, 2610, 2611, 1579, 989, 1578, 1778,
	1577, 1464, 1465, 1576, 1466, 1575, 1574, 1573, 1572, 1021,
	1571, 1021, 1546, 1530, 1528, 184, 1523, 3285, 2136, 1047,
	1038, 1495, 2618, 1031, 1464, 1465, 3212, 3167, 1467, 1649,
	2134, 831, 3026, 3013, 3005, 2556, 2264, 142, 1646, 2236,
	3352, 3214, 3025, 1545, 1495, 2704, 1633, 1526, 1648, 1637,
	3442, 1467, 2603, 2604, 3257, 1752, 1466, 182, 1752, 183,
	1067, 3479, 2820, 1752, 3409, 3408, 3440, 3305, 1627, 176,
	1069, 1624, 1645, 118, 1726, 3366, 3256, 177, 3008, 1466,
	1182, 1182, 214, 1767, 2850, 2849, 1060, 1595, 1081, 182,
	3414, 1063, 1619, 1617, 3090, 1727, 2609, 184, 151, 1196,
	2760, 1751, 1432, 1063, 1017, 1621, 2337, 1636, 599, 602,
	1635, 2580, 1816, 599, 602, 1653, 1634, 1632, 1631, 1758,
	1720, 1630, 1068, 2625, 1578, 2579, 1578, 214, 2518, 184,
	1565, 214, 214, 1019, 1800, 1655, 1564, 1802, 1063, 1472,
	1807, 183, 1464, 1465, 214, 1367, 2322, 2624, 1064, 3056,
	1738, 176, 1815, 214, 1553, 214, 1744, 214, 845, 177,
	797, 214, 1472, 2798, 1405, 2797, 1376, 1905, 3405, 1467,
	1494, 1496, 1377, 183, 1798, 214, 3072, 3060, 1550, 1061,
	151, 2619, 2108, 176, 2870, 3344, 1782, 1062, 3670, 2647,
	2941, 177, 1796, 1494, 1496, 2267, 839, 1466, 1584, 798,
	1857, 1811, 1743, 1742, 2562, 1561, 1752, 1749, 1817, 2790,
	182, 1001, 151, 1054, 3591, 1182, 1851, 1182, 214, 1182,
	1238, 3603, 214, 2173, 1487, 1182, 3600, 2829, 1182, 214,
	3037, 214, 214, 3536, 3098, 3051, 2439, 2402, 1356, 1847,
	3637, 1182, 1182, 1182, 2886, 214, 3638, 1487, 1784, 1865,
	184, 653, 214, 3501, 1821, 1204, 1775, 3246, 1660, 2716,
	1236, 594, 214, 1203, 214, 1226, 214, 1788, 214, 2276,
	214, 3592, 1962, 3694, 793, 599, 602, 3396, 1402, 2620,
	1472, 3389, 791, 3074, 214, 1806, 1771, 214, 3071, 214,
	1873, 789, 1818, 2293, 183, 787, 1060, 3070, 214, 2705,
	1960, 1069, 2293, 1746, 176, 2291, 1924, 1776, 1777, 778,
	1785, 784, 177, 1910, 2291, 3034, 1403, 3033, 2567, 214,
	1834, 1850, 1488, 1739, 214, 1835, 2566, 1063, 2565, 2564,
	654, 2522, 1237, 151, 2355, 1772, 2347, 2344, 2325, 2257,
	2058, 1438, 2718, 1991, 1200, 1488, 2129, 1081, 2128, 2016,
	2486, 2302, 1912, 1068, 1281, 831, 1870, 831, 1870, 1271,
	1867, 1270, 1915, 1401, 1887, 1871, 2399, 1889, 1875, 1876,
	1891, 3323, 2871, 1331, 1894, 1331, 2324, 1970, 1637, 1989,
	1974, 1269, 580, 1268, 1069, 1980, 781, 1354, 1993, 1061,
	1789, 1919, 2615, 2616, 2617, 1748, 1833, 1062, 1474, 2614,
	2612, 2613, 2605, 2606, 2607, 2608, 2610, 2611, 1246, 2759,
	2283, 2313, 1292, 1901, 1060, 1902, 3500, 1684, 1684, 3373,
	1048, 1914, 1028, 2073, 3654, 2510, 1747, 2089, 2090, 2012,
	2013, 2248, 1081, 2489, 212, 3242, 1068, 1232, 1018, 2055,
	1018, 2305, 1365, 2089, 2105, 1468, 1469, 1470, 1471, 1473,
	1474, 1790, 1791, 1026, 599, 602, 2073, 1991, 1349, 1607,
	1786, 1942, 2501, 3562, 2265, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 3047, 214, 1444, 2312, 1932, 586,
	2113, 2153, 2341, 2157, 2157, 2171, 3233, 2089, 1990, 1975,
	2191, 2193, 1787, 1989, 1927, 2197, 3655, 1081, 2081, 214,
	1872, 2611, 1753, 2335, 2079, 1753, 2335, 1061, 214, 3258,
	1753, 2335, 1415, 2015, 3230, 1062, 1046, 1979, 1977, 2108,
	214, 1992, 1369, 1081, 1985, 813, 1978, 1611, 813, 813,
	2877, 2509, 2876, 1928, 2488, 2480, 1029, 1063, 2255, 2246,
	2003, 1431, 2104, 2004, 2005, 2930, 2114, 1988, 1400, 831,
	1987, 1973, 3637, 2485, 1391, 1350, 3231, 656, 655, 1614,
	831, 829, 588, 2126, 831, 3674, 2117, 709, 2127, 2053,
	3322, 2130, 2056, 2131, 2132, 2323, 1969, 2213, 1609, 3627,
	1792, 3240, 3657, 2304, 1929, 3148, 2221, 849, 1470, 1471,
	1473, 1474, 1253, 1626, 1612, 2085, 2715, 1377, 2120, 1377,
	2826, 3588, 1990, 214, 989, 1392, 3147, 538, 1234, 2069,
	1021, 1182, 3684, 2102, 2771, 1935, 2235, 1610, 2115, 2112,
	3059, 2052, 2765, 649, 1778, 648, 1021, 1884, 1251, 2292,
	1795, 533, 2487, 2067, 1972, 828, 2212, 2662, 1081, 1780,
	2506, 2507, 1253, 214, 1793, 2117, 831, 2259, 1729, 2927,
	3472, 214, 2166, 1753, 1750, 1063, 1355, 2182, 2827, 2195,
	2717, 1988, 214, 582, 685, 2203, 2204, 795, 1961, 1762,
	2214, 794, 2220, 1763, 2225, 214, 1556, 2231, 2232, 785,
	1182, 142, 587, 1769, 1660, 1660, 1624, 2747, 785, 2247,
	2218, 2219, 786, 214, 1081, 1291, 1959, 1613, 1936, 2303,
	214, 214, 3226, 2702, 3241, 3662, 3227, 3274, 785, 3374,
	830, 3048, 1769, 1412, 1567, 2784, 2826, 2345, 2117, 3144,
	1231, 2928, 584, 214, 2279, 3656, 214, 3335, 3589, 3626,
	3519, 2746, 214, 2294, 2270, 1027, 2281, 1684, 3644, 2063,
	3548, 2274, 3483, 2356, 1778, 214, 3229, 1522, 2064, 2328,
	1559, 1560, 2065, 214, 2054, 214, 2070, 2217, 214, 3232,
	2572, 581, 1764, 2524, 214, 782, 2099, 214, 2282, 214,
	2273, 214, 1815, 214, 214, 1766, 214, 1182, 1182, 1182,
	2327, 1182, 2342, 2280, 2277, 3675, 214, 214, 2377, 214,
	214, 606, 2661, 2230, 1364, 1366, 2072, 830, 585, 3284,
	214, 3138, 3022, 1041, 2288, 3587, 1413, 2319, 2315, 583,
	2426, 2427, 2361, 2306, 2309, 214, 214, 214, 2111, 2326,
	214, 2117, 214, 2422, 2533, 214, 2297, 214, 1443, 214,
	1768, 1931, 2343, 1971, 2457, 2458, 2080, 1351, 3149, 2499,
	2352, 2336, 2338, 2339, 2340, 2396, 710, 1926, 2531, 827,
	214, 214, 214, 214, 214, 214, 3586, 214, 2366, 1762,
	2368, 1801, 3228, 1763, 1173, 3275, 1815, 2468, 1045, 3517,
	1815, 3625, 1815, 1204, 1379, 3636, 2371, 3685, 2438, 1414,
	3634, 2362, 1196, 214, 2415, 2470, 3419, 2471, 3290, 2381,
	2428, 214, 1885, 599, 602, 534, 3660, 1934, 3518, 2815,
	2066, 2491, 2404, 2493, 2413, 2404, 2455, 2424, 2465, 2068,
	2459, 2749, 2460, 2419, 2408, 2420, 1607, 2421, 2472, 2293,
	2474, 3319, 2476, 2394, 142, 1842, 1604, 1039, 1017, 1769,
	1017, 2307, 1611, 1034, 2423, 525, 2751, 3085, 2484, 1331,
	2429, 2453, 1454, 3380, 2440, 3145, 2002, 2467, 535, 1769,
	1779, 1740, 1764, 2892, 2528, 1453, 2473, 1019, 2475, 1019,
	2477, 2753, 1196, 1196, 1614, 1766, 3379, 2529, 1448, 2978,
	3661, 2534, 3361, 1762, 3190, 2525, 1453, 1763, 3462, 3233,
	214, 1809, 3679, 2215, 1611, 2494, 2750, 3036, 536, 2478,
	537, 2550, 2551, 607, 608, 2816, 2554, 2695, 2729, 1612,
	2725, 1808, 3663, 2395, 1660, 849, 1196, 3230, 1522, 849,
	3223, 3245, 2498, 2497, 2496, 2384, 1614, 1165, 3244, 2375,
	1768, 1737, 1165, 3318, 3221, 1866, 1855, 1854, 1536, 2511,
	3225, 1804, 1541, 2503, 1829, 1609, 2926, 2546, 3527, 1018,
	1196, 1997, 1196, 1452, 2889, 2555, 2670, 3485, 1453, 3231,
	1966, 1612, 1776, 1777, 773, 1018, 1733, 3103, 2209, 3294,
	822, 2372, 773, 1294, 1452, 3403, 1764, 3401, 1393, 1765,
	2329, 3151, 3362, 1353, 1610, 773, 824, 2739, 1454, 1766,
	1805, 3224, 1081, 1920, 824, 2736, 2523, 2640, 1735, 610,
	609, 2735, 2654, 2655, 2516, 2500, 3004, 824, 831, 1454,
	2659, 214, 1613, 2656, 2658, 1736, 214, 2254, 2979, 214,
	2379, 2253, 214, 214, 1081, 2530, 2980, 2252, 214, 1769,
	2671, 3191, 823, 2251, 2532, 2211, 828, 706, 3320, 3467,
	2210, 1081, 3678, 2676, 1768, 2561, 1452, 1380, 214, 611,
	612, 3152, 1998, 699, 1263, 3369, 2308, 2359, 1277, 774,
	3266, 2721, 1275, 214, 1613, 3641, 2859, 774, 1864, 3399,
	708, 1264, 2669, 3196, 3243, 3359, 2993, 2124, 3530, 2692,
	774, 214, 214, 214, 1429, 3643, 3605, 214, 2666, 3480,
	214, 3340, 2673, 2664, 1427, 2713, 3189, 214, 214, 2632,
	214, 214, 214, 2690, 2685, 3226, 3486, 3360, 2719, 3227,
	3468, 1021, 2904, 2700, 214, 214, 214, 2868, 2689, 2665,
	2786, 2330, 2331, 214, 2674, 1684, 1021, 2597, 2711, 2535,
	2677, 2678, 2648, 1409, 3370, 214, 1182, 2703, 214, 2682,
	2635, 2636, 2637, 1769, 3531, 2376, 1081, 2738, 2675, 3229,
	2743, 2744, 2663, 1407, 1390, 1081, 1021, 2696, 2653, 1388,
	214, 1684, 3232, 214, 214, 2762, 2354, 214, 2672, 1765,
	1182, 214, 935, 2730, 2321, 1760, 3469, 2726, 2272, 1182,
	1182, 1643, 1386, 2708, 2709, 214, 2710, 1384, 1382, 2785,
	2679, 214, 2697, 2698, 2699, 2764, 214, 1640, 214, 2807,
	2822, 2680, 1374, 2681, 775, 214, 1430, 2693, 1767, 2803,
	2714, 210, 775, 528, 529, 1372, 544, 528, 544, 554,
	559, 2720, 1958, 575, 1273, 775, 1344, 2633, 2885, 1182,
	1182, 210, 2722, 2723, 1767, 2782, 1428, 214, 214, 704,
	705, 214, 2772, 1649, 2752, 2884, 1426, 1182, 2737, 696,
	2758, 2741, 2831, 210, 1276, 697, 698, 1448, 1274, 2482,
	2754, 2755, 2767, 2846, 2756, 3228, 707, 1811, 2770, 2776,
	2481, 2462, 2777, 2775, 214, 1811, 1081, 214, 214, 1081,
	214, 2783, 2123, 1765, 2787, 1408, 2866, 1986, 1968, 1324,
	1939, 2327, 2823, 2778, 2779, 1722, 1570, 2780, 1348, 2768,
	1250, 3582, 3262, 2769, 1196, 1406, 1389, 214, 3253, 783,
	3623, 1387, 776, 1021, 3524, 2795, 3219, 3101, 821, 3054,
	776, 2693, 2821, 3052, 1850, 3035, 2828, 2830, 2814, 2806,
	2883, 2844, 2845, 776, 1385, 2837, 831, 2861, 2857, 1383,
	1381, 2799, 2400, 2389, 1081, 2388, 2923, 2453, 2369, 528,
	528, 777, 1898, 1897, 1373, 2882, 2453, 210, 2873, 777,
	2874, 1081, 2875, 214, 1895, 142, 142, 1371, 1893, 1890,
	1165, 1957, 777, 1888, 2867, 1886, 1272, 1877, 1826, 1824,
	1812, 2907, 1799, 1794, 1781, 2839, 2840, 2841, 1770, 2842,
	2843, 2818, 1660, 3424, 1651, 998, 2514, 3638, 3554, 1684,
	1457, 3314, 2879, 3309, 3308, 2454, 2916, 2917, 2880, 1756,
	1228, 849, 2293, 2293, 3426, 2311, 3111, 1165, 2887, 999,
	1778, 1956, 1424, 1425, 2291, 2310, 2890, 1930, 1660, 1955,
	3474, 1937, 788, 790, 3247, 1370, 3449, 3197, 2332, 1017,
	1464, 1465, 1190, 2314, 2351, 1079, 1461, 2990, 2318, 1730,
	1684, 1684, 539, 2349, 2316, 1017, 2350, 2912, 1464, 1465,
	2317, 3523, 2012, 2948, 3658, 2922, 1684, 1684, 1019, 1196,
	2515, 214, 214, 3491, 3094, 2929, 2931, 2932, 2012, 2958,
	2942, 2938, 1081, 2933, 1019, 1467, 1458, 3084, 3019, 3009,
	2944, 2947, 2943, 2407, 2945, 1466, 2196, 1684, 550, 1725,
	2955, 1656, 2701, 214, 3677, 1000, 2982, 2957, 3493, 2986,
	2920, 2603, 2604, 1466, 1815, 1464, 1465, 2285, 2284, 1358,
	1533, 2119, 3024, 2285, 2286, 1357, 2125, 2935, 3168, 1411,
	3023, 2983, 1410, 2934, 1531, 3686, 3000, 3001, 3459, 3393,
	1018, 3353, 3351, 3281, 2991, 3213, 3135, 3128, 3117, 3096,
	214, 3079, 1165, 3078, 2995, 1018, 3077, 2997, 2998, 3050,
	2838, 2000, 2812, 2810, 2464, 3061, 2463, 2417, 3031, 1021,
	1021, 2393, 2370, 2084, 1954, 1953, 1952, 1182, 142, 1951,
	3012, 1880, 3011, 1879, 1878, 1018, 1858, 1837, 1836, 3073,
	214, 2082, 1832, 1831, 1830, 1828, 1827, 214, 1423, 1422,
	1303, 1302, 1301, 1300, 1299, 1081, 214, 1298, 1536, 3075,
	1182, 3065, 1297, 1296, 1295, 1293, 1288, 1287, 3076, 3066,
	3068, 1286, 3027, 1285, 214, 1284, 3039, 1245, 1244, 1243,
	1242, 3113, 1241, 1240, 1239, 1233, 1227, 1225, 214, 214,
	1182, 1182, 1182, 1224, 214, 214, 214, 3105, 3021, 214,
	214, 1044, 1043, 214, 214, 973, 1182, 2178, 1684, 882,
	1731, 796, 214, 1081, 640, 3091, 1660, 780, 3092, 3108,
	2730, 3104, 3372, 1417, 73, 1235, 626, 67, 2327, 3107,
	3049, 635, 3535, 3124, 2745, 1081, 1938, 1378, 3136, 1940,
	2684, 2237, 3516, 3175, 3099, 2174, 2571, 3455, 3334, 2122,
	1552, 69, 870, 1032, 3093, 3095, 955, 3053, 3273, 3055,
	3272, 3220, 3038, 2443, 3270, 3106, 3269, 1660, 1660, 3166,
	838, 1084, 3109, 1741, 3115, 876, 3114, 1754, 2266, 2156,
	214, 1042, 1664, 1660, 1660, 3125, 3126, 3120, 575, 3119,
	879, 3127, 1018, 1661, 3133, 1021, 3131, 3134, 3153, 3130,
	3162, 1663, 881, 880, 210, 1662, 210, 210, 1554, 1187,
	878, 210, 3146, 3141, 1660, 1659, 2378, 2411, 1684, 1280,
	210, 1206, 760, 1745, 3154, 2413, 2078, 2106, 2560, 1547,
	851, 872, 2103, 1037, 2667, 2825, 1850, 3018, 3300, 1996,
	2502, 643, 2600, 214, 2109, 1230, 1030, 2179, 2172, 1081,
	2168, 1081, 2401, 1433, 1524, 2453, 2412, 1071, 854, 1249,
	2076, 1165, 3137, 1538, 210, 210, 2540, 1187, 2001, 2832,
	2687, 2263, 3551, 2006, 214, 214, 214, 1841, 997, 210,
	996, 3188, 995, 3542, 3539, 2793, 214, 1290, 1734, 2278,
	1516, 2800, 866, 214, 1195, 214, 2652, 2860, 214, 214,
	214, 210, 210, 210, 210, 1187, 1247, 3473, 3202, 1515,
	1081, 214, 214, 792, 575, 1081, 210, 210, 3464, 1058,
	1057, 1056, 2728, 214, 3198, 1175, 3683, 214, 3046, 1198,
	696, 3208, 3203, 3204, 3201, 3199, 3200, 181, 3205, 214,
	2689, 3209, 1081, 2508, 3249, 1182, 1165, 1455, 3237, 1447,
	178, 3239, 180, 179, 3238, 3277, 3063, 1021, 90, 35,
	16, 117, 116, 3250, 3251, 1021, 3218, 115, 114, 113,
	112, 111, 110, 214, 109, 1660, 108, 107, 1021, 1254,
	1257, 106, 3296, 105, 104, 1081, 103, 102, 101, 210,
	3260, 100, 99, 98, 3268, 97, 96, 95, 94, 3283,
	93, 92, 91, 210, 3264, 3299, 3295, 571, 568, 49,
	48, 1165, 3286, 89, 88, 1081, 15, 3207, 559, 3261,
	3304, 33, 13, 53, 54, 3216, 3217, 3297, 12, 1911,
	28, 3292, 1339, 29, 79, 78, 27, 1165, 3313, 3310,
	14, 26, 24, 10, 3248, 8, 7, 30, 1018, 1018,
	1628, 11, 1081, 147, 146, 3346, 72, 145, 71, 3326,
	214, 3321, 214, 144, 1081, 214, 143, 70, 22, 9,
	139, 3412, 3089, 214, 3267, 66, 3331, 141, 3276, 140,
	1017, 63, 138, 1359, 137, 1660, 64, 3342, 3287, 136,
	135, 3356, 65, 134, 20, 1017, 214, 5, 52, 6,
	3316, 1850, 2869, 83, 84, 1684, 3303, 31, 61, 1019,
	60, 3355, 59, 3347, 3348, 214, 19, 51, 18, 171,
	170, 169, 3350, 214, 1019, 1017, 168, 3392, 163, 162,
	167, 214, 165, 164, 3402, 166, 1182, 161, 133, 3411,
	173, 3376, 214, 172, 175, 3375, 159, 155, 154, 158,
	3354, 1079, 1165, 160, 1019, 157, 156, 3390, 153, 1684,
	174, 132, 131, 214, 214, 56, 130, 3394, 3400, 129,
	128, 3382, 127, 3421, 126, 55, 17, 2, 1, 3410,
	0, 3332, 3445, 3446, 3428, 214, 0, 0, 3429, 0,
	2178, 2178, 3423, 3422, 0, 0, 3437, 3420, 3416, 3415,
	214, 3418, 3299, 3427, 0, 0, 0, 3425, 1165, 0,
	528, 0, 0, 0, 3444, 0, 3470, 0, 3332, 3461,
	0, 3433, 3434, 0, 1018, 0, 0, 0, 2174, 2174,
	2015, 210, 3460, 210, 0, 0, 3453, 210, 0, 0,
	0, 3448, 0, 0, 0, 0, 0, 1206, 214, 1187,
	210, 0, 210, 3482, 1684, 2537, 2538, 210, 1206, 544,
	214, 1182, 210, 1206, 3384, 3385, 0, 214, 575, 0,
	0, 1182, 1182, 0, 2795, 0, 0, 1182, 0, 3507,
	0, 214, 1017, 214, 3488, 3489, 3492, 0, 0, 0,
	0, 3499, 3495, 3475, 2178, 2178, 2178, 0, 3498, 0,
	3487, 0, 0, 3505, 3506, 0, 214, 3520, 0, 3510,
	3511, 1019, 214, 214, 3532, 1081, 3503, 0, 0, 0,
	0, 3504, 0, 0, 214, 214, 0, 3415, 3541, 3544,
	0, 1606, 2174, 2174, 2174, 3555, 3545, 0, 0, 3549,
	0, 3557, 3537, 3559, 0, 0, 3512, 0, 3513, 0,
	3546, 0, 3566, 1196, 0, 3567, 0, 0, 0, 2626,
	2627, 2628, 0, 214, 0, 0, 3561, 0, 3563, 0,
	0, 0, 1660, 0, 3593, 0, 0, 3533, 0, 0,
	0, 0, 0, 3597, 0, 3581, 1018, 3580, 3578, 3579,
	0, 0, 0, 0, 1018, 0, 0, 0, 3595, 3610,
	0, 0, 3612, 214, 3614, 0, 0, 1018, 0, 0,
	3619, 0, 3620, 0, 0, 0, 0, 3611, 0, 0,
	3624, 0, 0, 214, 210, 3616, 1660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3635, 0, 3632, 3633, 0, 3617, 3618, 0, 214, 3621,
	214, 3541, 3639, 3640, 3544, 3642, 3648, 0, 3650, 0,
	3646, 0, 3630, 3631, 3653, 3652, 3647, 0, 3613, 210,
	3615, 0, 0, 210, 210, 0, 3553, 0, 0, 0,
	0, 2015, 0, 0, 837, 3556, 1863, 3665, 3664, 0,
	0, 0, 0, 3672, 0, 210, 3671, 210, 3673, 210,
	0, 0, 0, 528, 3676, 0, 0, 3680, 0, 0,
	0, 0, 0, 3645, 0, 0, 3687, 1881, 3688, 0,
	0, 1660, 0, 0, 3681, 3682, 0, 0, 0, 0,
	0, 3691, 3692, 3693, 3695, 3696, 0, 0, 1017, 1017,
	1198, 0, 0, 3700, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2413, 3698, 0, 0, 0, 0,
	575, 0, 0, 57, 696, 0, 0, 1019, 1019, 0,
	0, 210, 0, 1187, 210, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	0, 62, 0, 0, 210, 0, 1165, 0, 0, 0,
	0, 3553, 0, 210, 210, 0, 210, 0, 210, 0,
	210, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 1963, 0, 1165, 1964,
	0, 1965, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 2178, 2178, 0, 1165, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 85, 0, 0, 0, 575, 75, 82, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 1903, 0,
	2174, 2174, 849, 0, 1198, 0, 0, 1913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1921, 1922, 1923, 0, 0, 0, 0, 2900, 2901, 0,
	0, 76, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2178, 2178, 2178, 2178, 2178, 2178,
	2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178,
	2178, 2178, 2178, 1019, 2178, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 1165,
	0, 0, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174,
	2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174,
	2174, 0, 2174, 0, 0, 0, 0, 0, 0, 2959,
	2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,
	2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 0, 2981,
	0, 0, 0, 0, 0, 0, 0, 528, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 210, 0,
	528, 0, 0, 0, 0, 148, 80, 0, 81, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 2603,
	2604, 0, 2621, 2622, 2623, 0, 1017, 182, 0, 0,
	1165, 0, 0, 1165, 1017, 0, 0, 0, 3158, 691,
	0, 0, 0, 118, 0, 0, 0, 1017, 0, 0,
	0, 0, 837, 0, 0, 1019, 837, 0, 0, 0,
	0, 1464, 1465, 1019, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 1019, 0, 0, 0,
	0, 1495, 0, 2618, 0, 0, 0, 0, 1467, 1208,
	119, 1212, 0, 1218, 0, 544, 0, 0, 1165, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 1165, 1466, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 2301, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 210, 0, 0, 2609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 210, 1345, 0, 0, 0,
	0, 0, 210, 2363, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 2624, 0,
	0, 0, 0, 0, 0, 1206, 0, 0, 210, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 1165, 1863, 0, 0,
	0, 1397, 2619, 0, 0, 2301, 0, 528, 0, 0,
	2416, 0, 0, 0, 0, 0, 210, 0, 0, 210,
	0, 210, 0, 210, 0, 210, 210, 0, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2436, 696,
	0, 2301, 2301, 0, 1487, 0, 0, 0, 0, 2346,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1187, 210,
	0, 0, 1206, 0, 1206, 0, 0, 1187, 0, 1187,
	0, 1187, 1517, 1518, 1519, 1520, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2620, 0, 210, 210, 210, 210, 1187, 210, 0, 210,
	0, 1535, 0, 0, 0, 0, 0, 1548, 0, 1165,
	0, 0, 0, 0, 1464, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 1488, 210, 1495, 0, 2425, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1165, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2615, 2616, 2617, 0, 0, 2178, 0,
	2614, 2612, 2613, 2605, 2606, 2607, 2608, 2610, 2611, 0,
	0, 0, 1206, 0, 3157, 0, 0, 1600, 1600, 1600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 2174, 0, 0, 0,
	2178, 0, 1472, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1496, 0, 0, 0, 2174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 1165, 0, 1165, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 3364, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 210, 0,
	0, 0, 0, 528, 0, 1464, 1465, 0, 528, 0,
	0, 528, 0, 0, 528, 528, 0, 0, 0, 2178,
	528, 0, 0, 0, 1165, 1495, 0, 0, 210, 1165,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	1206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1206, 1165, 2174, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 2301, 2301, 210, 1483, 1493, 0, 2301,
	0, 0, 2732, 0, 3452, 0, 0, 2178, 2178, 2301,
	2732, 0, 2301, 2732, 2732, 1488, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 210, 210, 210, 0,
	0, 0, 0, 0, 0, 2903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 1165,
	1187, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 2789, 0, 0, 2791, 2301, 0, 0, 210,
	0, 0, 0, 210, 0, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 1494, 1496, 0, 210, 1165, 0,
	0, 0, 0, 1187, 0, 210, 0, 0, 2301, 0,
	528, 0, 0, 0, 0, 0, 0, 2301, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 849, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 1487, 210,
	1863, 0, 0, 1863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2878, 0, 0, 1187,
	210, 0, 210, 0, 0, 0, 0, 0, 0, 2804,
	0, 0, 0, 0, 0, 0, 0, 0, 2808, 2809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2852, 2853,
	0, 0, 0, 0, 1995, 0, 1999, 0, 0, 0,
	0, 0, 0, 2008, 0, 2940, 1198, 0, 0, 0,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 0, 2057, 0, 2059, 2060,
	2061, 2062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1165,
	0, 1535, 0, 0, 849, 2101, 0, 0, 0, 0,
	0, 210, 210, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 528, 528, 2139, 2142, 0, 2146, 2147,
	2148, 2149, 2150, 2151, 2152, 0, 0, 0, 0, 2170,
	0, 2181, 2183, 2188, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 0, 1206, 0, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 2603, 2604, 0, 2621, 2622, 2623, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 2909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2618, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2301, 210, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	2436, 2436, 0, 0, 0, 0, 696, 696, 2301, 0,
	0, 1863, 1863, 0, 0, 696, 2301, 0, 0, 0,
	2609, 0, 0, 1504, 210, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	1482, 1464, 1465, 0, 0, 0, 1495, 0, 0, 0,
	0, 2624, 0, 1467, 0, 1502, 0, 0, 0, 0,
	0, 1495, 0, 0, 1487, 2365, 0, 2367, 1467, 0,
	0, 0, 3176, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 2619, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 1466, 1483, 0, 3121,
	3122, 3123, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 1206, 2898, 210, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	210, 2897, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 1488, 0, 1472, 0, 2301, 2301, 2301, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 1206, 1472,
	0, 0, 0, 2620, 0, 2301, 0, 2732, 1505, 0,
	1206, 1206, 210, 0, 0, 1494, 1496, 0, 2479, 0,
	0, 0, 0, 210, 210, 0, 0, 0, 0, 0,
	1494, 1496, 936, 0, 0, 2301, 0, 0, 0, 3279,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 3289, 0, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 1206, 0, 0, 0, 0,
	0, 211, 1503, 0, 0, 0, 0, 0, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 211, 2520, 2521, 2615, 2616, 2617, 0,
	2527, 0, 0, 2614, 2612, 2613, 2605, 2606, 2607, 2608,
	2610, 2611, 0, 0, 0, 0, 0, 0, 0, 2541,
	2542, 0, 0, 0, 0, 2101, 0, 0, 0, 1493,
	0, 0, 0, 0, 2549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 1488, 0, 0,
	2563, 0, 2301, 0, 2732, 57, 0, 3358, 0, 0,
	0, 0, 1488, 0, 0, 210, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 2584, 1464, 1465, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 575, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 3358, 0, 0,
	0, 0, 0, 0, 68, 2301, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 2188, 2188, 2188, 0,
	0, 1466, 0, 0, 1206, 0, 0, 0, 0, 0,
	1486, 1600, 0, 0, 74, 0, 0, 0, 0, 2657,
	0, 0, 0, 0, 85, 210, 210, 0, 0, 75,
	82, 0, 0, 0, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 2940, 0, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 3358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 1489, 1490, 1491, 1492, 0, 687,
	0, 0, 0, 0, 1472, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 57, 690, 689, 0, 0, 0,
	3279, 0, 0, 0, 0, 1494, 1496, 0, 58, 0,
	0, 0, 210, 0, 0, 2748, 0, 0, 0, 2732,
	1464, 1465, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1206, 0, 1206, 0, 0, 0, 0,
	1495, 0, 1464, 1465, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 68, 0, 2260, 0, 0, 3528, 1487,
	0, 0, 1495, 215, 1206, 210, 0, 0, 0, 1467,
	0, 0, 0, 0, 77, 1466, 210, 2301, 0, 0,
	0, 0, 0, 74, 1486, 0, 0, 0, 0, 0,
	0, 1483, 0, 85, 0, 0, 0, 1466, 75, 82,
	0, 0, 0, 0, 0, 0, 1486, 148, 80, 0,
	81, 0, 0, 1483, 0, 2940, 0, 0, 0, 0,
	0, 0, 593, 0, 0, 0, 0, 0, 0, 182,
	2526, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 691, 76, 0, 593, 118, 0, 0, 1489, 1490,
	1491, 1492, 2519, 0, 0, 2301, 0, 1488, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	1489, 1490, 1491, 1492, 0, 3358, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1496, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	1206, 0, 2301, 0, 0, 152, 2888, 0, 0, 0,
	0, 1494, 1496, 183, 2008, 0, 0, 0, 1481, 1482,
	2895, 2896, 0, 176, 2899, 0, 0, 0, 2902, 0,
	0, 177, 0, 0, 0, 0, 0, 2906, 0, 0,
	1481, 1482, 0, 1487, 0, 0, 2913, 0, 0, 2657,
	0, 0, 151, 77, 211, 1086, 211, 211, 1086, 0,
	1086, 211, 1086, 0, 2924, 1487, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 148, 80, 0, 81,
	0, 2949, 2950, 0, 2951, 2952, 2953, 0, 0, 2954,
	0, 0, 0, 2956, 0, 0, 0, 0, 182, 0,
	0, 0, 1086, 1086, 211, 211, 0, 0, 0, 0,
	691, 0, 0, 1493, 118, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 2984, 2985, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 1493, 902, 0, 184, 2994,
	0, 211, 211, 211, 211, 0, 1086, 1086, 0, 0,
	0, 1086, 0, 1488, 3003, 1086, 211, 211, 0, 0,
	0, 119, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 152, 209, 0, 0, 0, 0,
	0, 0, 183, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 176, 0, 0, 600, 1513, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	3032, 0, 0, 0, 0, 0, 0, 600, 0, 1466,
	0, 688, 0, 0, 0, 3040, 3043, 0, 1486, 211,
	0, 0, 0, 0, 0, 1483, 0, 2603, 2604, 0,
	2621, 2622, 2623, 211, 0, 0, 0, 0, 1484, 1480,
	3062, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 2618, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1600, 0,
	0, 1020, 0, 0, 0, 0, 1504, 3116, 0, 1514,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2609, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 3155,
	3156, 0, 0, 0, 0, 3160, 3161, 0, 0, 0,
	3164, 3165, 0, 0, 0, 0, 1512, 3169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3172, 0, 0,
	0, 0, 0, 1501, 0, 0, 2624, 0, 0, 0,
	0, 0, 0, 3177, 0, 0, 1082, 0, 0, 1183,
	0, 1082, 0, 1183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2619, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 1086, 0,
	211, 211, 211, 1183, 1183, 0, 0, 211, 0, 1464,
	1465, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 1086, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 3043, 1183, 1183, 0,
	0, 0, 1183, 0, 0, 0, 1183, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 2620, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 1183, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 3184, 0,
	0, 3043, 3183, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3327,
	3328, 3329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1086, 211, 0, 0, 0, 1494, 1496,
	1086, 2615, 2616, 2617, 3337, 3338, 0, 0, 2614, 2612,
	2613, 2605, 2606, 2607, 2608, 2610, 2611, 0, 3345, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 211, 211, 58, 0, 0, 209, 0,
	209, 209, 1487, 0, 0, 209, 0, 0, 3043, 62,
	0, 0, 0, 0, 600, 211, 3381, 211, 0, 211,
	0, 0, 0, 0, 0, 3388, 0, 0, 837, 0,
	0, 0, 0, 0, 3395, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 209,
	3043, 0, 0, 3043, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 209, 0, 0, 0, 1086, 0, 1086,
	85, 1086, 1493, 3043, 3043, 75, 82, 1086, 0, 0,
	1086, 211, 0, 0, 211, 209, 209, 209, 209, 0,
	1488, 0, 0, 1086, 1086, 1086, 0, 0, 0, 0,
	209, 209, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 211, 0, 211, 0, 211, 76,
	211, 0, 211, 0, 0, 3463, 0, 0, 3466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3043, 0, 0, 0, 1082,
	211, 0, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 1183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 1086,
	0, 2603, 2604, 0, 2621, 2622, 2623, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	2908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 80, 2618, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3577,
	3577, 3577, 0, 0, 1086, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 691, 3596, 0,
	0, 118, 0, 0, 871, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3043, 0, 3043, 1183, 1183, 184, 0, 0, 0, 0,
	0, 1082, 0, 205, 0, 0, 3577, 0, 0, 2609,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 211, 0, 0, 1086, 0, 0, 0, 176,
	87, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	2624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 1622, 0, 1020, 0, 0,
	3577, 209, 0, 0, 2619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 1622, 209, 57, 0, 0,
	0, 600, 0, 0, 0, 0, 600, 814, 0, 0,
	0, 58, 0, 0, 0, 0, 832, 0, 1183, 0,
	1183, 0, 1183, 1086, 0, 62, 0, 0, 1183, 0,
	0, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, 1183, 1183, 0, 0, 1007,
	1086, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 211, 593, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 2620, 0, 0, 0, 74, 211, 0, 0,
	0, 0, 1086, 0, 0, 0, 85, 0, 0, 0,
	0, 75, 82, 0, 0, 211, 1086, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 211, 76, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 211,
	0, 211, 0, 211, 0, 211, 211, 0, 0, 1086,
	1086, 1086, 0, 1086, 0, 2615, 2616, 2617, 0, 0,
	0, 0, 2614, 2612, 2613, 2605, 2606, 2607, 2608, 2610,
	2611, 0, 211, 209, 0, 0, 0, 209, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 211,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 209,
	0, 209, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 211, 211, 211, 211, 0, 211, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	80, 0, 81, 0, 0, 211, 0, 0, 0, 0,
	1082, 0, 0, 211, 738, 0, 773, 0, 0, 0,
	0, 182, 0, 0, 0, 209, 0, 0, 209, 0,
	0, 0, 0, 691, 0, 0, 1082, 118, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 757, 743, 0, 0, 0, 600, 209, 0,
	209, 184, 209, 0, 209, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 747, 0, 0, 119, 779, 0, 0, 0, 0,
	0, 0, 754, 755, 209, 0, 0, 152, 766, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 774, 749, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 177, 1183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 0, 1334, 0, 1076, 0, 0, 0,
	0, 1082, 0, 1194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 87, 0, 87, 0, 87, 0, 0,
	0, 0, 0, 1183, 751, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 759, 758, 0, 0,
	0, 1282, 0, 0, 753, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	778, 0, 0, 1307, 1307, 1307, 1194, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 775, 0, 1340, 1341,
	0, 0, 0, 832, 87, 87, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 1020, 0, 0, 0,
	1183, 1183, 1183, 0, 1183, 211, 748, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 770, 771, 209, 0, 0, 0,
	0, 677, 0, 0, 0, 0, 211, 211, 211, 0,
	0, 1416, 0, 87, 0, 211, 0, 0, 0, 768,
	0, 0, 0, 0, 659, 0, 0, 211, 1086, 762,
	0, 0, 0, 0, 0, 763, 0, 0, 1086, 0,
	0, 0, 740, 0, 776, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 211,
	741, 0, 1086, 211, 0, 0, 661, 0, 0, 0,
	764, 1086, 1086, 0, 761, 0, 0, 211, 0, 0,
	0, 0, 662, 777, 0, 0, 0, 0, 0, 814,
	0, 765, 0, 0, 0, 0, 0, 0, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 1527, 0, 0,
	0, 767, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 1086, 1086, 0, 1534, 0, 0, 209, 1540, 211,
	0, 0, 664, 769, 0, 0, 0, 0, 209, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 665, 0, 0, 666, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 209,
	211, 1086, 211, 0, 0, 0, 600, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 209, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	209, 0, 0, 209, 0, 209, 0, 209, 0, 209,
	209, 906, 0, 1086, 0, 0, 0, 0, 0, 1638,
	0, 0, 0, 1620, 0, 1623, 0, 87, 0, 0,
	0, 0, 1647, 0, 1194, 1082, 209, 0, 0, 668,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 209, 0, 209, 0, 0, 685, 0, 669, 0,
	0, 1500, 1495, 0, 0, 0, 0, 1082, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 684, 209, 209, 209, 209,
	0, 209, 670, 209, 0, 671, 0, 1466, 0, 0,
	0, 679, 0, 0, 0, 0, 1486, 0, 672, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 673,
	680, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 683, 0, 1183,
	1472, 0, 0, 0, 0, 0, 0, 0, 678, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	0, 1494, 1496, 1183, 0, 0, 0, 0, 0, 0,
	0, 0, 1183, 1183, 0, 0, 0, 0, 0, 1086,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 211, 0, 0, 0, 0, 0, 0, 211,
	0, 1839, 0, 0, 0, 1846, 1502, 1086, 211, 0,
	0, 0, 1086, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 1183, 1183, 0, 0, 0, 1282, 0, 1869,
	0, 1869, 0, 0, 1512, 0, 0, 0, 0, 0,
	1183, 0, 1086, 1086, 1086, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 211, 1086, 0, 1020, 0, 1082,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1020, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 832,
	0, 832, 0, 1846, 0, 0, 1917, 0, 0, 0,
	0, 0, 1622, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1943, 1082, 1945, 1505,
	1947, 0, 1949, 0, 1950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 209, 209, 0, 0, 0, 0, 0, 0, 1622,
	0, 1086, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 1503, 814, 814, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 209, 0, 0, 2591, 209, 0, 0,
	2592, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 1086, 211, 211, 0, 0, 1086, 0, 1020,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 2075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 1086, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1534, 0, 0, 0, 1534, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 1184, 0, 1083,
	0, 1184, 0, 0, 209, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1183, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	1623, 0, 0, 0, 2244, 0, 0, 0, 1082, 0,
	0, 1184, 1184, 1183, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 87, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 1183, 1183, 1183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1184, 1184, 0, 0, 1183,
	1184, 0, 0, 0, 1184, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 1020, 1020, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1194, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 87, 1082, 0, 1082, 0, 0, 0, 0, 0,
	1846, 0, 0, 0, 0, 0, 2387, 0, 0, 0,
	0, 0, 211, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 1086, 0, 0, 0, 0, 1086,
	0, 0, 0, 87, 0, 0, 87, 0, 2418, 0,
	0, 1307, 0, 1307, 0, 1307, 0, 1194, 1194, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 87, 211, 209, 1086, 0, 0,
	0, 0, 0, 209, 2461, 0, 211, 0, 0, 0,
	0, 0, 209, 0, 0, 1082, 0, 0, 1183, 2466,
	0, 2469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 2490, 1194, 2492, 1194, 1082, 2495,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1307, 1082, 0,
	0, 0, 0, 0, 0, 2517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 1184, 0, 0, 0, 0, 0, 0,
	0, 2075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 1534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 1020, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 1183,
	1500, 1495, 0, 0, 1622, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 209, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 209, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1184, 1184, 0, 0, 1007, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 1183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, 1183, 0, 0, 0, 0,
	1183, 0, 0, 1504, 0, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2724, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 1082, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 2761, 2763,
	2387, 87, 87, 0, 1487, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1184, 0, 1184, 209,
	1184, 0, 0, 1512, 0, 0, 1184, 0, 0, 1184,
	0, 0, 0, 0, 87, 87, 0, 0, 87, 0,
	1501, 0, 1184, 1184, 1184, 0, 0, 0, 0, 0,
	0, 2801, 0, 0, 0, 2805, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2813,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 1007, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 209,
	209, 0, 0, 0, 0, 87, 87, 0, 0, 0,
	0, 2856, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 2881, 0, 1194, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 2893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 209, 0, 0, 0,
	0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484,
	1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 1083, 0, 2097, 0, 0, 0, 2098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 1083, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 1007, 1007, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 1184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 3088, 0, 0, 0, 0, 0,
	0, 1184, 0, 0, 0, 0, 0, 0, 0, 0,
	3100, 0, 0, 0, 0, 1083, 0, 1505, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 1007,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3139, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 1184, 1184,
	1184, 1503, 1184, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 3182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 1007,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 3252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 2387, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 1505,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 1083, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3365, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	2911, 0, 1472, 0, 0, 3417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	2075, 0, 0, 1494, 1496, 0, 0, 3443, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 1502, 0,
	0, 0, 0, 0, 0, 0, 1083, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1184, 0, 0, 0, 0, 1512, 0, 0, 0,
	1184, 1184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1184, 1184, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1184, 0,
	0, 0, 0, 0, 0, 1488, 0, 3534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3550, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	1083, 1505, 0, 0, 0, 0, 87, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 1083, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 1083, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 2594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 1083, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 1184, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 1083, 0, 1488, 0,
	0, 1184, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 1184, 1184, 1184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 1083, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 0, 1503, 1494,
	1496, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1510,
	0, 1511, 0, 0, 0, 2593, 0, 0, 1481, 1482,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	1495, 0, 0, 1487, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 1083, 0, 0, 1466, 0, 0, 0, 1501,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1083, 0, 0, 1184, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 1083, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 1083, 0, 0, 0, 0, 2590, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1184, 1184, 0, 0, 0, 0, 1184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 1087, 224, 1088, 1089, 1090, 1083, 1091, 479, 1092,
	1093, 1094, 1095, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1096, 233, 234, 235, 236,
	237, 238, 1097, 1098, 239, 484, 485, 486, 1099, 240,
	487, 1100, 1085, 1101, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1102, 251, 0, 252, 253,
	254, 1103, 957, 255, 256, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 257, 258, 259, 260, 261, 262, 488, 489,
	1111, 263, 1112, 265, 264, 1113, 266, 1114, 1115, 267,
	268, 269, 1116, 270, 1117, 271, 272, 1118, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1119, 216, 1120, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1121, 290, 1122, 1123,
	958, 291, 292, 1124, 293, 494, 1125, 495, 294, 1126,
	295, 296, 297, 298, 496, 497, 498, 350, 960, 299,
	300, 1127, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1128, 959, 306, 499, 308, 307, 309, 310, 311,
	500, 1129, 501, 1130, 313, 961, 502, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1131, 325, 324, 1132, 326, 503, 964, 327, 328,
	965, 1133, 329, 330, 1134, 1135, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 967, 346, 1136, 218, 968, 348,
	1137, 504, 349, 505, 351, 352, 1138, 353, 354, 355,
	1139, 1140, 357, 358, 359, 1141, 1142, 360, 361, 506,
	969, 362, 970, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1143, 371, 372, 508, 373, 509, 374,
	1144, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1145, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1146, 398,
	971, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1147, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1148, 425, 405,
	406, 426, 427, 972, 428, 429, 512, 430, 431, 1149,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1150, 443, 444, 442, 1151, 445, 446, 447,
	448, 449, 278, 450, 1152, 451, 514, 515, 516, 517,
	1153, 458, 1154, 452, 453, 518, 454, 519, 1155, 455,
	456, 457, 0, 459, 460, 1156, 1157, 461, 462, 463,
	464, 465, 467, 1158, 468, 1159, 466, 469, 470, 471,
	520, 521, 522, 1160, 473, 472, 523, 1161, 1162, 1163,
	1164, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 2222, 0, 0,
	0, 0, 0, 0, 0, 2223, 219, 220, 221, 222,
	223, 1087, 224, 1088, 1089, 1090, 0, 1091, 479, 1092,
	1093, 1094, 1095, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1096, 233, 234, 235, 236,
	237, 238, 1097, 1098, 239, 484, 485, 486, 1099, 240,
	487, 1100, 1085, 1101, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1102, 251, 0, 252, 253,
	254, 1103, 957, 255, 256, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 257, 258, 259, 260, 261, 262, 488, 489,
	1111, 263, 1112, 265, 264, 1113, 266, 1114, 1115, 267,
	268, 269, 1116, 270, 1117, 271, 272, 1118, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1119, 216, 1120, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1121, 290, 1122, 1123,
	958, 291, 292, 1124, 293, 494, 1125, 495, 294, 1126,
	295, 296, 297, 298, 496, 497, 498, 350, 960, 299,
	300, 1127, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1128, 959, 306, 499, 308, 307, 309, 310, 311,
	500, 1129, 501, 1130, 313, 961, 502, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1131, 325, 324, 1132, 326, 503, 964, 327, 328,
	965, 1133, 329, 330, 1134, 1135, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 967, 346, 1136, 218, 968, 348,
	1137, 504, 349, 505, 351, 352, 1138, 353, 354, 355,
	1139, 1140, 357, 358, 359, 1141, 1142, 360, 361, 506,
	969, 362, 970, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1143, 371, 372, 508, 373, 509, 374,
	1144, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1145, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1146, 398,
	971, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1147, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1148, 425, 405,
	406, 426, 427, 972, 428, 429, 512, 430, 431, 1149,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1150, 443, 444, 442, 1151, 445, 446, 447,
	448, 449, 278, 450, 1152, 451, 514, 515, 516, 517,
	1153, 458, 1154, 452, 453, 518, 454, 519, 1155, 455,
	456, 457, 0, 459, 460, 1156, 1157, 461, 462, 463,
	464, 465, 467, 1158, 468, 1159, 466, 469, 470, 471,
	520, 521, 522, 1160, 473, 472, 523, 1161, 1162, 1163,
	1164, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3206, 219, 220,
	221, 222, 223, 1087, 224, 1088, 1089, 1090, 0, 1091,
	479, 1092, 1093, 1094, 1095, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1096, 233, 234,
	235, 236, 237, 238, 1097, 1098, 239, 484, 485, 486,
	1099, 240, 487, 1100, 1085, 1101, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1102, 251, 0,
	252, 253, 254, 1103, 957, 255, 256, 1104, 1105, 1107,
	1106, 1108, 1109, 1110, 257, 258, 259, 260, 261, 262,
	488, 489, 1111, 263, 1112, 265, 264, 1113, 266, 1114,
	1115, 267, 268, 269, 1116, 270, 1117, 271, 272, 1118,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1119, 216, 1120, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1121, 290,
	1122, 1123, 958, 291, 292, 1124, 293, 494, 1125, 495,
	294, 1126, 295, 296, 297, 298, 496, 497, 498, 350,
	960, 299, 300, 1127, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1128, 959, 306, 499, 308, 307, 309,
	310, 311, 500, 1129, 501, 1130, 313, 961, 502, 962,
	314, 315, 316, 963, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1131, 325, 324, 1132, 326, 503, 964,
	327, 328, 965, 1133, 329, 330, 1134, 1135, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 966, 344, 345, 347, 967, 346, 1136, 218,
	968, 348, 1137, 504, 349, 505, 351, 352, 1138, 353,
	354, 355, 1139, 1140, 357, 358, 359, 1141, 1142, 360,
	361, 506, 969, 362, 970, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1143, 371, 372, 508, 373,
	509, 374, 1144, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1145, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1146, 398, 971, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1147, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1148,
	425, 405, 406, 426, 427, 972, 428, 429, 512, 430,
	431, 1149, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 278, 450, 1152, 451, 514, 515,
	516, 517, 1153, 458, 1154, 452, 453, 518, 454, 519,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 464, 465, 467, 1158, 468, 1159, 466, 469,
	470, 471, 520, 521, 522, 1160, 473, 472, 523, 1161,
	1162, 1163, 1164, 474, 475, 524, 476, 477, 478, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3333, 0, 219, 220, 221, 222,
	223, 1087, 224, 1088, 1089, 1090, 0, 1091, 479, 1092,
	1093, 1094, 1095, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1096, 233, 234, 235, 236,
	237, 238, 1097, 1098, 239, 484, 485, 486, 1099, 240,
	487, 1100, 1085, 1101, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1102, 251, 0, 252, 253,
	254, 1103, 957, 255, 256, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 257, 258, 259, 260, 261, 262, 488, 489,
	1111, 263, 1112, 265, 264, 1113, 266, 1114, 1115, 267,
	268, 269, 1116, 270, 1117, 271, 272, 1118, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1119, 216, 1120, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1121, 290, 1122, 1123,
	958, 291, 292, 1124, 293, 494, 1125, 495, 294, 1126,
	295, 296, 297, 298, 496, 497, 498, 350, 960, 299,
	300, 1127, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1128, 959, 306, 499, 308, 307, 309, 310, 311,
	500, 1129, 501, 1130, 313, 961, 502, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1131, 325, 324, 1132, 326, 503, 964, 327, 328,
	965, 1133, 329, 330, 1134, 1135, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 967, 346, 1136, 218, 968, 348,
	1137, 504, 349, 505, 351, 352, 1138, 353, 354, 355,
	1139, 1140, 357, 358, 359, 1141, 1142, 360, 361, 506,
	969, 362, 970, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1143, 371, 372, 508, 373, 509, 374,
	1144, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1145, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1146, 398,
	971, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1147, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1148, 425, 405,
	406, 426, 427, 972, 428, 429, 512, 430, 431, 1149,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1150, 443, 444, 442, 1151, 445, 446, 447,
	448, 449, 278, 450, 1152, 451, 514, 515, 516, 517,
	1153, 458, 1154, 452, 453, 518, 454, 519, 1155, 455,
	456, 457, 0, 459, 460, 1156, 1157, 461, 462, 463,
	464, 465, 467, 1158, 468, 1159, 466, 469, 470, 471,
	520, 521, 522, 1160, 473, 472, 523, 1161, 1162, 1163,
	1164, 474, 475, 524, 476, 477, 478, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3259, 0, 219, 220, 221, 222, 223, 1087,
	224, 1088, 1089, 1090, 0, 1091, 479, 1092, 1093, 1094,
	1095, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1096, 233, 234, 235, 236, 237, 238,
	1097, 1098, 239, 484, 485, 486, 1099, 240, 487, 1100,
	1085, 1101, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1102, 251, 0, 252, 253, 254, 1103,
	957, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	257, 258, 259, 260, 261, 262, 488, 489, 1111, 263,
	1112, 265, 264, 1113, 266, 1114, 1115, 267, 268, 269,
	1116, 270, 1117, 271, 272, 1118, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1119,
	216, 1120, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1121, 290, 1122, 1123, 958, 291,
	292, 1124, 293, 494, 1125, 495, 294, 1126, 295, 296,
	297, 298, 496, 497, 498, 350, 960, 299, 300, 1127,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1128,
	959, 306, 499, 308, 307, 309, 310, 311, 500, 1129,
	501, 1130, 313, 961, 502, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1131,
	325, 324, 1132, 326, 503, 964, 327, 328, 965, 1133,
	329, 330, 1134, 1135, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 967, 346, 1136, 218, 968, 348, 1137, 504,
	349, 505, 351, 352, 1138, 353, 354, 355, 1139, 1140,
	357, 358, 359, 1141, 1142, 360, 361, 506, 969, 362,
	970, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1143, 371, 372, 508, 373, 509, 374, 1144, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1145, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1146, 398, 971, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1147, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1148, 425, 405, 406, 426,
	427, 972, 428, 429, 512, 430, 431, 1149, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	278, 450, 1152, 451, 514, 515, 516, 517, 1153, 458,
	1154, 452, 453, 518, 454, 519, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 464, 465,
	467, 1158, 468, 1159, 466, 469, 470, 471, 520, 521,
	522, 1160, 473, 472, 523, 1161, 1162, 1163, 1164, 474,
	475, 524, 476, 477, 478, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3140, 0, 219, 220, 221, 222, 223, 1087, 224, 1088,
	1089, 1090, 0, 1091, 479, 1092, 1093, 1094, 1095, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1096, 233, 234, 235, 236, 237, 238, 1097, 1098,
	239, 484, 485, 486, 1099, 240, 487, 1100, 1085, 1101,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1102, 251, 0, 252, 253, 254, 1103, 957, 255,
	256, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 257, 258,
	259, 260, 261, 262, 488, 489, 1111, 263, 1112, 265,
	264, 1113, 266, 1114, 1115, 267, 268, 269, 1116, 270,
	1117, 271, 272, 1118, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1119, 216, 1120,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1121, 290, 1122, 1123, 958, 291, 292, 1124,
	293, 494, 1125, 495, 294, 1126, 295, 296, 297, 298,
	496, 497, 498, 350, 960, 299, 300, 1127, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1128, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 1129, 501, 1130,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1131, 325, 324,
	1132, 326, 503, 964, 327, 328, 965, 1133, 329, 330,
	1134, 1135, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 1136, 218, 968, 348, 1137, 504, 349, 505,
	351, 352, 1138, 353, 354, 355, 1139, 1140, 357, 358,
	359, 1141, 1142, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1143,
	371, 372, 508, 373, 509, 374, 1144, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1145,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1146, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1147, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1148, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 1149, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1150, 443,
	444, 442, 1151, 445, 446, 447, 448, 449, 278, 450,
	1152, 451, 514, 515, 516, 517, 1153, 458, 1154, 452,
	453, 518, 454, 519, 1155, 455, 456, 457, 0, 459,
	460, 1156, 1157, 461, 462, 463, 464, 465, 467, 1158,
	468, 1159, 466, 469, 470, 471, 520, 521, 522, 1160,
	473, 472, 523, 1161, 1162, 1163, 1164, 474, 475, 524,
	476, 477, 478, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2936, 0,
	219, 220, 221, 222, 223, 1087, 224, 1088, 1089, 1090,
	0, 1091, 479, 1092, 1093, 1094, 1095, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1096,
	233, 234, 235, 236, 237, 238, 1097, 1098, 239, 484,
	485, 486, 1099, 240, 487, 1100, 1085, 1101, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1102,
	251, 0, 252, 253, 254, 1103, 957, 255, 256, 1104,
	1105, 1107, 1106, 1108, 1109, 1110, 257, 258, 259, 260,
	261, 262, 488, 489, 1111, 263, 1112, 265, 264, 1113,
	266, 1114, 1115, 267, 268, 269, 1116, 270, 1117, 271,
	272, 1118, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1119, 216, 1120, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1121, 290, 1122, 1123, 958, 291, 292, 1124, 293, 494,
	1125, 495, 294, 1126, 295, 296, 297, 298, 496, 497,
	498, 350, 960, 299, 300, 1127, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1128, 959, 306, 499, 308,
	307, 309, 310, 311, 500, 1129, 501, 1130, 313, 961,
	502, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1131, 325, 324, 1132, 326,
	503, 964, 327, 328, 965, 1133, 329, 330, 1134, 1135,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 967, 346,
	1136, 218, 968, 348, 1137, 504, 349, 505, 351, 352,
	1138, 353, 354, 355, 1139, 1140, 357, 358, 359, 1141,
	1142, 360, 361, 506, 969, 362, 970, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1143, 371, 372,
	508, 373, 509, 374, 1144, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1145, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1146, 398, 971, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1147, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1148, 425, 405, 406, 426, 427, 972, 428, 429,
	512, 430, 431, 1149, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1150, 443, 444, 442,
	1151, 445, 446, 447, 448, 449, 278, 450, 1152, 451,
	514, 515, 516, 517, 1153, 458, 1154, 452, 453, 518,
	454, 519, 1155, 455, 456, 457, 0, 459, 460, 1156,
	1157, 461, 462, 463, 464, 465, 467, 1158, 468, 1159,
	466, 469, 470, 471, 520, 521, 522, 1160, 473, 472,
	523, 1161, 1162, 1163, 1164, 474, 475, 524, 476, 477,
	478, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2919, 0, 219, 220,
	221, 222, 223, 1087, 224, 1088, 1089, 1090, 0, 1091,
	479, 1092, 1093, 1094, 1095, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1096, 233, 234,
	235, 236, 237, 238, 1097, 1098, 239, 484, 485, 486,
	1099, 240, 487, 1100, 1085, 1101, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1102, 251, 0,
	252, 253, 254, 1103, 957, 255, 256, 1104, 1105, 1107,
	1106, 1108, 1109, 1110, 257, 258, 259, 260, 261, 262,
	488, 489, 1111, 263, 1112, 265, 264, 1113, 266, 1114,
	1115, 267, 268, 269, 1116, 270, 1117, 271, 272, 1118,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1119, 216, 1120, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1121, 290,
	1122, 1123, 958, 291, 292, 1124, 293, 494, 1125, 495,
	294, 1126, 295, 296, 297, 298, 496, 497, 498, 350,
	960, 299, 300, 1127, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1128, 959, 306, 499, 308, 307, 309,
	310, 311, 500, 1129, 501, 1130, 313, 961, 502, 962,
	314, 315, 316, 963, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1131, 325, 324, 1132, 326, 503, 964,
	327, 328, 965, 1133, 329, 330, 1134, 1135, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 966, 344, 345, 347, 967, 346, 1136, 218,
	968, 348, 1137, 504, 349, 505, 351, 352, 1138, 353,
	354, 355, 1139, 1140, 357, 358, 359, 1141, 1142, 360,
	361, 506, 969, 362, 970, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1143, 371, 372, 508, 373,
	509, 374, 1144, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1145, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1146, 398, 971, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1147, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1148,
	425, 405, 406, 426, 427, 972, 428, 429, 512, 430,
	431, 1149, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 278, 450, 1152, 451, 514, 515,
	516, 517, 1153, 458, 1154, 452, 453, 518, 454, 519,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 464, 465, 467, 1158, 468, 1159, 466, 469,
	470, 471, 520, 521, 522, 1160, 473, 472, 523, 1161,
	1162, 1163, 1164, 474, 475, 524, 476, 477, 478, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2788, 0, 219, 220, 221, 222,
	223, 1087, 224, 1088, 1089, 1090, 0, 1091, 479, 1092,
	1093, 1094, 1095, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1096, 233, 234, 235, 236,
	237, 238, 1097, 1098, 239, 484, 485, 486, 1099, 240,
	487, 1100, 1085, 1101, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1102, 251, 0, 252, 253,
	254, 1103, 957, 255, 256, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 257, 258, 259, 260, 261, 262, 488, 489,
	1111, 263, 1112, 265, 264, 1113, 266, 1114, 1115, 267,
	268, 269, 1116, 270, 1117, 271, 272, 1118, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1119, 216, 1120, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1121, 290, 1122, 1123,
	958, 291, 292, 1124, 293, 494, 1125, 495, 294, 1126,
	295, 296, 297, 298, 496, 497, 498, 350, 960, 299,
	300, 1127, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1128, 959, 306, 499, 308, 307, 309, 310, 311,
	500, 1129, 501, 1130, 313, 961, 502, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1131, 325, 324, 1132, 326, 503, 964, 327, 328,
	965, 1133, 329, 330, 1134, 1135, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 967, 346, 1136, 218, 968, 348,
	1137, 504, 349, 505, 351, 352, 1138, 353, 354, 355,
	1139, 1140, 357, 358, 359, 1141, 1142, 360, 361, 506,
	969, 362, 970, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1143, 371, 372, 508, 373, 509, 374,
	1144, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1145, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1146, 398,
	971, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1147, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1148, 425, 405,
	406, 426, 427, 972, 428, 429, 512, 430, 431, 1149,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1150, 443, 444, 442, 1151, 445, 446, 447,
	448, 449, 278, 450, 1152, 451, 514, 515, 516, 517,
	1153, 458, 1154, 452, 453, 518, 454, 519, 1155, 455,
	456, 457, 0, 459, 460, 1156, 1157, 461, 462, 463,
	464, 465, 467, 1158, 468, 1159, 466, 469, 470, 471,
	520, 521, 522, 1160, 473, 472, 523, 1161, 1162, 1163,
	1164, 474, 475, 524, 476, 477, 478, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2121, 0, 219, 220, 221, 222, 223, 1087,
	224, 1088, 1089, 1090, 0, 1091, 479, 1092, 1093, 1094,
	1095, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1096, 233, 234, 235, 236, 237, 238,
	1097, 1098, 239, 484, 485, 486, 1099, 240, 487, 1100,
	1085, 1101, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1102, 251, 0, 252, 253, 254, 1103,
	957, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	257, 258, 259, 260, 261, 262, 488, 489, 1111, 263,
	1112, 265, 264, 1113, 266, 1114, 1115, 267, 268, 269,
	1116, 270, 1117, 271, 272, 1118, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1119,
	216, 1120, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1121, 290, 1122, 1123, 958, 291,
	292, 1124, 293, 494, 1125, 495, 294, 1126, 295, 296,
	297, 298, 496, 497, 498, 350, 960, 299, 300, 1127,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1128,
	959, 306, 499, 308, 307, 309, 310, 311, 500, 1129,
	501, 1130, 313, 961, 502, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1131,
	325, 324, 1132, 326, 503, 964, 327, 328, 965, 1133,
	329, 330, 1134, 1135, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 967, 346, 1136, 218, 968, 348, 1137, 504,
	349, 505, 351, 352, 1138, 353, 354, 355, 1139, 1140,
	357, 358, 359, 1141, 1142, 360, 361, 506, 969, 362,
	970, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1143, 371, 372, 508, 373, 509, 374, 1144, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1145, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1146, 398, 971, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1147, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1148, 425, 405, 406, 426,
	427, 972, 428, 429, 512, 430, 431, 1149, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	278, 450, 1152, 451, 514, 515, 516, 517, 1153, 458,
	1154, 452, 453, 518, 454, 519, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 464, 465,
	467, 1158, 468, 1159, 466, 469, 470, 471, 520, 521,
	522, 1160, 473, 472, 523, 1161, 1162, 1163, 1164, 474,
	475, 524, 476, 477, 478, 1188, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1822, 0, 0, 0, 219, 220, 221, 222, 223, 1087,
	224, 1088, 1089, 1090, 0, 1091, 479, 1092, 1093, 1094,
	1095, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1096, 233, 234, 235, 236, 237, 238,
	1097, 1098, 239, 484, 485, 486, 1099, 240, 487, 1100,
	1085, 1101, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1102, 251, 0, 252, 253, 254, 1103,
	957, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	257, 258, 259, 260, 261, 262, 488, 489, 1111, 263,
	1112, 265, 264, 1113, 266, 1114, 1115, 267, 268, 269,
	1116, 270, 1117, 271, 272, 1118, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1119,
	216, 1120, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1121, 290, 1122, 1123, 958, 291,
	292, 1124, 293, 494, 1125, 495, 294, 1126, 295, 296,
	297, 298, 496, 497, 498, 350, 960, 299, 300, 1127,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1128,
	959, 306, 499, 308, 307, 309, 310, 311, 500, 1129,
	501, 1130, 313, 961, 502, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1131,
	325, 324, 1132, 326, 503, 964, 327, 328, 965, 1133,
	329, 330, 1134, 1135, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 967, 346, 1136, 218, 968, 348, 1137, 504,
	349, 505, 351, 352, 1138, 353, 354, 355, 1139, 1140,
	357, 358, 359, 1141, 1142, 360, 361, 506, 969, 362,
	970, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1143, 371, 372, 508, 373, 509, 374, 1144, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1145, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1146, 398, 971, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1147, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1148, 425, 405, 406, 426,
	427, 972, 428, 429, 512, 430, 431, 1149, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	278, 450, 1152, 451, 514, 515, 516, 517, 1153, 458,
	1154, 452, 453, 518, 454, 519, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 464, 465,
	467, 1158, 468, 1159, 466, 469, 470, 471, 520, 521,
	522, 1160, 473, 472, 523, 1161, 1162, 1163, 1164, 474,
	475, 524, 476, 477, 478, 1077, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 1087,
	224, 1088, 1089, 1090, 0, 1091, 479, 1092, 1093, 1094,
	1095, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1096, 233, 234, 235, 236, 237, 238,
	1097, 1098, 239, 484, 485, 486, 1099, 240, 487, 1100,
	1085, 1101, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1102, 251, 0, 252, 253, 254, 1103,
	957, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	257, 258, 259, 260, 261, 262, 488, 489, 1111, 263,
	1112, 265, 264, 1113, 266, 1114, 1115, 267, 268, 269,
	1116, 270, 1117, 271, 272, 1118, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1119,
	216, 1120, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1121, 290, 1122, 1123, 958, 291,
	292, 1124, 293, 494, 1125, 495, 294, 1126, 295, 296,
	297, 298, 496, 497, 498, 350, 960, 299, 300, 1127,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1128,
	959, 306, 499, 308, 307, 309, 310, 311, 500, 1129,
	501, 1130, 313, 961, 502, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1131,
	325, 324, 1132, 326, 503, 964, 327, 328, 965, 1133,
	329, 330, 1134, 1135, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 967, 346, 1136, 218, 968, 348, 1137, 504,
	349, 505, 351, 352, 1138, 353, 354, 355, 1139, 1140,
	357, 358, 359, 1141, 1142, 360, 361, 506, 969, 362,
	970, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1143, 371, 372, 508, 373, 509, 374, 1144, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1145, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1146, 398, 971, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1147, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1148, 425, 405, 406, 426,
	427, 972, 428, 429, 512, 430, 431, 1149, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	278, 450, 1152, 451, 514, 515, 516, 517, 1153, 458,
	1154, 452, 453, 518, 454, 519, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 464, 465,
	467, 1158, 468, 1159, 466, 469, 470, 471, 520, 521,
	522, 1160, 473, 472, 523, 1161, 1162, 1163, 1164, 474,
	475, 524, 476, 477, 478, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 1087, 224, 1088,
	1089, 1090, 0, 1091, 479, 1092, 1093, 1094, 1095, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1096, 233, 234, 235, 236, 237, 238, 1097, 1098,
	239, 484, 485, 486, 1099, 240, 487, 1100, 1085, 1101,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1102, 251, 0, 252, 253, 254, 1103, 957, 255,
	256, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 257, 258,
	259, 260, 261, 262, 488, 489, 1111, 263, 1112, 265,
	264, 1113, 266, 1114, 1115, 267, 268, 269, 1116, 270,
	1117, 271, 272, 1118, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1119, 216, 1120,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1121, 290, 1122, 1123, 958, 291, 292, 1124,
	293, 494, 1125, 495, 294, 1126, 295, 296, 297, 298,
	496, 497, 498, 350, 960, 299, 300, 1127, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1128, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 1129, 501, 1130,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1131, 325, 324,
	1132, 326, 503, 964, 327, 328, 965, 1133, 329, 330,
	1134, 1135, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 1136, 218, 968, 348, 1137, 504, 349, 505,
	351, 352, 1138, 353, 354, 355, 1139, 1140, 357, 358,
	359, 1141, 1142, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1143,
	371, 372, 508, 373, 509, 374, 1144, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1145,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1146, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1147, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1148, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 1149, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1150, 443,
	444, 442, 1151, 445, 446, 447, 448, 449, 278, 450,
	1152, 451, 514, 515, 516, 517, 1153, 458, 1154, 452,
	453, 518, 454, 519, 1155, 455, 456, 457, 0, 459,
	460, 1156, 1157, 461, 462, 463, 464, 465, 467, 1158,
	468, 1159, 466, 469, 470, 471, 520, 521, 522, 1160,
	473, 472, 523, 1161, 1162, 1163, 1164, 474, 475, 524,
	476, 477, 478, 2096, 0, 899, 857, 858, 859, 855,
	856, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 2093, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 984, 985, 486, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 846, 263, 0, 265,
	264, 0, 266, 2094, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 982, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	967, 346, 843, 218, 968, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 915, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 853, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 888, 889, 891, 892, 416,
	422, 423, 424, 945, 425, 405, 406, 426, 427, 972,
	428, 429, 910, 890, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 956, 437, 438, 439, 979, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 886,
	0, 451, 929, 930, 931, 932, 0, 458, 0, 452,
	453, 980, 454, 981, 863, 455, 456, 457, 0, 459,
	460, 0, 847, 461, 462, 463, 464, 465, 467, 946,
	468, 0, 894, 469, 470, 471, 520, 926, 974, 2092,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 2095, 0,
	0, 0, 0, 0, 0, 869, 2091, 0, 833, 867,
	899, 857, 858, 859, 855, 856, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 984, 985, 486, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 982, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 967, 346, 843, 218, 968,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 915, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 853, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 182, 420, 421,
	888, 889, 891, 892, 416, 422, 423, 424, 945, 425,
	405, 406, 426, 427, 972, 428, 429, 910, 890, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 956, 437,
	438, 439, 979, 0, 443, 444, 442, 184, 445, 446,
	447, 448, 449, 278, 886, 0, 451, 929, 930, 931,
	932, 0, 458, 0, 452, 453, 980, 454, 981, 863,
	455, 456, 457, 0, 459, 460, 0, 847, 461, 462,
	463, 464, 465, 467, 946, 468, 0, 894, 469, 470,
	471, 1332, 926, 974, 0, 473, 472, 523, 0, 0,
	0, 176, 474, 475, 524, 476, 477, 478, 844, 177,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 899, 857, 858, 859, 855, 856, 868,
	1539, 1537, 0, 0, 867, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 984,
	985, 486, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 982,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 967, 346,
	843, 218, 968, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 915, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 853,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	182, 420, 421, 888, 889, 891, 892, 416, 422, 423,
	424, 945, 425, 405, 406, 426, 427, 972, 428, 429,
	910, 890, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 956, 437, 438, 439, 979, 0, 443, 444, 442,
	184, 445, 446, 447, 448, 449, 278, 886, 0, 451,
	929, 930, 931, 932, 0, 458, 0, 452, 453, 980,
	454, 981, 863, 455, 456, 457, 0, 459, 460, 0,
	847, 461, 462, 463, 464, 465, 467, 946, 468, 0,
	894, 469, 470, 471, 1332, 926, 974, 0, 473, 472,
	523, 0, 0, 0, 176, 474, 475, 524, 476, 477,
	478, 844, 177, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 899, 857, 858, 859,
	855, 856, 868, 1539, 2539, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 984, 985, 486, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 982, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 967, 346, 843, 218, 968, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 915, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 971, 399, 400,
	401, 402, 853, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 888, 889, 891, 892,
	416, 422, 423, 424, 945, 425, 405, 406, 426, 427,
	972, 428, 429, 910, 890, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 956, 437, 438, 439, 979, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	886, 0, 451, 929, 930, 931, 932, 0, 458, 0,
	452, 453, 980, 454, 981, 863, 455, 456, 457, 0,
	459, 460, 0, 847, 461, 462, 463, 464, 465, 467,
	946, 468, 0, 894, 469, 470, 471, 1332, 926, 974,
	0, 473, 472, 523, 0, 0, 0, 176, 474, 475,
	524, 476, 477, 478, 844, 177, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 899,
	857, 858, 859, 855, 856, 868, 1539, 1537, 0, 0,
	867, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 914,
	893, 925, 883, 924, 923, 2184, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 984, 985, 486, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 2189,
	958, 291, 292, 0, 293, 982, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 2185, 326, 983, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 967, 346, 843, 218, 968, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	915, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	971, 399, 400, 401, 402, 853, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 888,
	889, 891, 892, 416, 422, 423, 424, 945, 425, 405,
	406, 426, 427, 972, 428, 429, 910, 890, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 956, 437, 438,
	439, 979, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 886, 0, 451, 929, 930, 931, 932,
	0, 458, 2186, 452, 453, 980, 454, 981, 863, 455,
	456, 457, 0, 459, 460, 0, 847, 461, 462, 463,
	464, 465, 467, 946, 468, 0, 894, 469, 470, 471,
	520, 926, 974, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 2143, 867, 899, 857, 858, 859, 855, 856,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	984, 985, 486, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	982, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 967,
	346, 843, 218, 968, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 969, 362, 970, 977, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 978, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 915, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 971, 399, 400, 401, 402,
	853, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 888, 889, 891, 892, 416, 422,
	423, 424, 945, 425, 405, 406, 426, 427, 972, 428,
	429, 910, 890, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 956, 437, 438, 439, 979, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 886, 0,
	451, 929, 930, 931, 932, 0, 458, 0, 452, 453,
	980, 454, 981, 863, 455, 456, 457, 0, 459, 460,
	0, 847, 461, 462, 463, 464, 465, 467, 946, 468,
	0, 894, 469, 470, 471, 520, 926, 974, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 869, 2141, 0, 2140, 867, 899,
	857, 858, 859, 855, 856, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 984, 985, 486, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 982, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 967, 346, 843, 218, 968, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	915, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	971, 399, 400, 401, 402, 853, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 888,
	889, 891, 892, 416, 422, 423, 424, 945, 425, 405,
	406, 426, 427, 972, 428, 429, 910, 890, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 956, 437, 438,
	439, 979, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 886, 0, 451, 929, 930, 931, 932,
	0, 458, 0, 452, 453, 980, 454, 981, 863, 455,
	456, 457, 0, 459, 460, 0, 847, 461, 462, 463,
	464, 465, 467, 946, 468, 0, 894, 469, 470, 471,
	520, 926, 974, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 869,
	2138, 0, 1399, 867, 899, 857, 858, 859, 855, 856,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	984, 985, 486, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	982, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 967,
	346, 843, 218, 968, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 969, 362, 970, 977, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 978, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 915, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 971, 399, 400, 401, 402,
	853, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 888, 889, 891, 892, 416, 422,
	423, 424, 945, 425, 405, 406, 426, 427, 972, 428,
	429, 910, 890, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 956, 437, 438, 439, 979, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 886, 0,
	451, 929, 930, 931, 932, 0, 458, 0, 452, 453,
	980, 454, 981, 863, 455, 456, 457, 0, 459, 460,
	0, 847, 461, 462, 463, 464, 465, 467, 946, 468,
	0, 894, 469, 470, 471, 520, 926, 974, 0, 473,
	472, 523, 1398, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 836, 867, 899,
	857, 858, 859, 855, 856, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 984, 985, 486, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 982, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 967, 346, 843, 218, 968, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	848, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	915, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	971, 399, 400, 401, 402, 853, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 888,
	889, 891, 892, 416, 422, 423, 424, 945, 425, 405,
	406, 426, 427, 972, 428, 429, 910, 890, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 956, 437, 438,
	439, 979, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 886, 0, 451, 929, 930, 931, 932,
	0, 458, 0, 452, 453, 980, 454, 981, 863, 455,
	456, 457, 0, 459, 460, 0, 847, 461, 462, 463,
	464, 465, 467, 946, 468, 0, 894, 469, 470, 471,
	520, 926, 974, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 899, 857, 858, 859, 855, 856, 868, 869,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 914, 893, 925, 883, 924, 923, 0, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 984, 985,
	486, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 3547, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 982, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 967, 346, 843,
	218, 968, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 848, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 915, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 853, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 888, 889, 891, 892, 416, 422, 423, 424,
	945, 425, 405, 406, 426, 427, 972, 428, 429, 910,
	890, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	956, 437, 438, 439, 979, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 886, 0, 451, 929,
	930, 931, 932, 0, 458, 0, 452, 453, 980, 454,
	981, 863, 455, 456, 457, 0, 459, 460, 0, 847,
	461, 462, 463, 464, 465, 467, 946, 468, 0, 894,
	469, 470, 471, 520, 926, 974, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 899, 857, 858, 859, 855,
	856, 868, 869, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 984, 985, 486, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 3391, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 982, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	967, 346, 843, 218, 968, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 848, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 915, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 853, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 888, 889, 891, 892, 416,
	422, 423, 424, 945, 425, 405, 406, 426, 427, 972,
	428, 429, 910, 890, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 956, 437, 438, 439, 979, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 886,
	0, 451, 929, 930, 931, 932, 0, 458, 0, 452,
	453, 980, 454, 981, 863, 455, 456, 457, 0, 459,
	460, 0, 847, 461, 462, 463, 464, 465, 467, 946,
	468, 0, 894, 469, 470, 471, 520, 926, 974, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 899, 857,
	858, 859, 855, 856, 868, 869, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 948, 873, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 914, 893,
	925, 883, 924, 923, 0, 233, 885, 884, 236, 237,
	238, 875, 947, 239, 984, 985, 486, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 928, 262, 921, 920, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 919,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	864, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	918, 916, 917, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 982, 0, 874, 294, 0, 295,
	296, 297, 298, 949, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 895, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 907, 898, 909, 911, 912, 913, 908,
	0, 900, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 933, 934, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 887, 341, 966,
	344, 345, 347, 967, 346, 843, 3110, 968, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 915,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 853, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 888, 889,
	891, 892, 416, 422, 423, 424, 945, 425, 405, 406,
	426, 427, 972, 428, 429, 910, 890, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 956, 437, 438, 439,
	979, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 886, 0, 451, 929, 930, 931, 932, 0,
	458, 0, 452, 453, 980, 454, 981, 863, 455, 456,
	457, 0, 459, 460, 0, 847, 461, 462, 463, 464,
	465, 467, 946, 468, 0, 894, 469, 470, 471, 520,
	926, 974, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 1601, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 0, 867, 899, 857, 858, 859, 855, 856, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 984,
	985, 486, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 982,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 967, 346,
	843, 218, 968, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 915, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 853,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 888, 889, 891, 892, 416, 422, 423,
	424, 945, 425, 405, 406, 426, 427, 972, 428, 429,
	910, 890, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 956, 437, 438, 439, 979, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 886, 0, 451,
	929, 930, 931, 932, 0, 458, 0, 452, 453, 980,
	454, 981, 863, 455, 456, 457, 0, 459, 460, 0,
	847, 461, 462, 463, 464, 465, 467, 946, 468, 0,
	894, 469, 470, 471, 520, 926, 974, 2915, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 899, 857, 858, 859,
	855, 856, 868, 869, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 984, 985, 486, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 982, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 2010, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 967, 346, 843, 218, 968, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 509, 374, 2009, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 915, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 971, 399, 400,
	401, 402, 853, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 888, 889, 891, 892,
	416, 422, 423, 424, 945, 425, 405, 406, 426, 427,
	972, 428, 429, 910, 890, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 956, 437, 438, 439, 979, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	886, 0, 451, 929, 930, 931, 932, 0, 458, 0,
	452, 453, 980, 454, 981, 863, 455, 456, 457, 0,
	459, 460, 0, 847, 461, 462, 463, 464, 465, 467,
	946, 468, 0, 894, 469, 470, 471, 520, 926, 974,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 899,
	857, 858, 859, 855, 856, 868, 869, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 984, 985, 486, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 982, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 967, 346, 843, 218, 968, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	848, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	915, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	971, 399, 400, 401, 402, 853, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 888,
	889, 891, 892, 416, 422, 423, 424, 945, 425, 405,
	406, 426, 427, 972, 428, 429, 910, 890, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 956, 437, 438,
	439, 979, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 886, 0, 451, 929, 930, 931, 932,
	0, 458, 0, 452, 453, 980, 454, 981, 863, 455,
	456, 457, 0, 459, 460, 0, 847, 461, 462, 463,
	464, 465, 467, 946, 468, 0, 894, 469, 470, 471,
	520, 926, 974, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 899, 857, 858, 859, 855, 856, 868, 869,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 914, 893, 925, 883, 924, 923, 0, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 984, 985,
	486, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 982, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 967, 346, 843,
	218, 968, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 915, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 853, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 888, 889, 891, 892, 416, 422, 423, 424,
	945, 425, 405, 406, 426, 427, 972, 428, 429, 910,
	890, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	956, 437, 438, 439, 979, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 886, 0, 451, 929,
	930, 931, 932, 0, 458, 0, 452, 453, 980, 454,
	981, 863, 455, 456, 457, 0, 459, 460, 0, 847,
	461, 462, 463, 464, 465, 467, 946, 468, 0, 894,
	469, 470, 471, 520, 926, 974, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 1601, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 867, 899, 857, 858,
	859, 855, 856, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 984, 985, 486, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 2189, 958, 291,
	292, 0, 293, 982, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 967, 346, 843, 218, 968, 348, 865, 952,
	349, 922, 351, 352, 0, 896, 354, 897, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 915, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 971, 399,
	400, 401, 402, 853, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 888, 889, 891,
	892, 416, 422, 423, 424, 945, 425, 405, 406, 426,
	427, 972, 428, 429, 910, 890, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 956, 437, 438, 439, 979,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 886, 0, 451, 929, 930, 931, 932, 0, 458,
	0, 452, 453, 980, 454, 981, 863, 455, 456, 457,
	0, 459, 460, 0, 847, 461, 462, 463, 464, 465,
	467, 946, 468, 0, 894, 469, 470, 471, 520, 926,
	974, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	899, 857, 858, 859, 855, 856, 868, 869, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 984, 985, 486, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 982, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 967, 346, 843, 218, 968,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 915, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 853, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	888, 889, 891, 892, 416, 422, 423, 424, 945, 425,
	405, 406, 426, 427, 972, 428, 429, 910, 890, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 956, 437,
	438, 439, 979, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 886, 0, 451, 929, 930, 931,
	932, 0, 458, 0, 452, 453, 980, 454, 981, 863,
	455, 456, 457, 0, 459, 460, 0, 847, 461, 462,
	463, 464, 465, 467, 946, 468, 0, 894, 469, 470,
	471, 520, 926, 974, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	869, 1537, 0, 2194, 867, 899, 857, 858, 859, 855,
	856, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 984, 985, 486, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 982, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	967, 346, 843, 218, 968, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 915, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 853, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 888, 889, 891, 892, 416,
	422, 423, 424, 945, 425, 405, 406, 426, 427, 972,
	428, 429, 910, 890, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 956, 437, 438, 439, 979, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 886,
	0, 451, 929, 930, 931, 932, 0, 458, 0, 452,
	453, 980, 454, 981, 863, 455, 456, 457, 0, 459,
	460, 0, 847, 461, 462, 463, 464, 465, 467, 946,
	468, 0, 894, 469, 470, 471, 520, 926, 974, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 2192, 867,
	899, 857, 858, 859, 855, 856, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 984, 985, 486, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 982, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 967, 346, 843, 218, 968,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 915, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 853, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	888, 889, 891, 892, 416, 422, 423, 424, 945, 425,
	405, 406, 426, 427, 972, 428, 429, 910, 890, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 956, 437,
	438, 439, 979, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 886, 0, 451, 929, 930, 931,
	932, 0, 458, 0, 452, 453, 980, 454, 981, 863,
	455, 456, 457, 0, 459, 460, 0, 847, 461, 462,
	463, 464, 465, 467, 946, 468, 0, 894, 469, 470,
	471, 520, 926, 974, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 2180, 867, 899, 857, 858, 859, 855,
	856, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 984, 985, 486, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 982, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	967, 346, 843, 218, 968, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 915, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 853, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 888, 889, 891, 892, 416,
	422, 423, 424, 945, 425, 405, 406, 426, 427, 972,
	428, 429, 910, 890, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 956, 437, 438, 439, 979, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 886,
	0, 451, 929, 930, 931, 932, 0, 458, 0, 452,
	453, 980, 454, 981, 863, 455, 456, 457, 0, 459,
	460, 0, 847, 461, 462, 463, 464, 465, 467, 946,
	468, 0, 894, 469, 470, 471, 520, 926, 974, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 2169, 867,
	899, 857, 858, 859, 855, 856, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 984, 985, 486, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 982, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 967, 346, 843, 218, 968,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 915, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 853, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	888, 889, 891, 892, 416, 422, 423, 424, 945, 425,
	405, 406, 426, 427, 972, 428, 429, 910, 890, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 956, 437,
	438, 439, 979, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 886, 0, 451, 929, 930, 931,
	932, 0, 458, 0, 452, 453, 980, 454, 981, 863,
	455, 456, 457, 0, 459, 460, 0, 847, 461, 462,
	463, 464, 465, 467, 946, 468, 0, 894, 469, 470,
	471, 520, 926, 974, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 2167, 867, 2158, 2165, 858, 859, 855,
	856, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 984, 985, 486, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 2161, 921, 920, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 982, 0, 874, 294, 0, 295, 296, 297, 2162,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 2163, 2160, 342, 887, 341, 966, 344, 345, 347,
	967, 346, 843, 218, 968, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 915, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 853, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 2164, 0, 420, 421, 888, 889, 891, 892, 416,
	422, 423, 424, 945, 425, 405, 406, 426, 427, 972,
	428, 429, 910, 890, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 956, 437, 438, 439, 979, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 886,
	0, 451, 929, 930, 931, 932, 0, 458, 0, 452,
	453, 980, 454, 981, 863, 455, 456, 457, 0, 459,
	460, 0, 847, 461, 462, 463, 464, 465, 467, 946,
	468, 0, 894, 469, 470, 471, 520, 926, 974, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 2159, 478, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 2155, 867,
	2158, 2165, 858, 859, 855, 856, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 984, 985, 486, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 2161, 921,
	920, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 982, 0, 874, 294,
	0, 295, 296, 297, 2162, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 2163, 2160, 342, 887,
	341, 966, 344, 345, 347, 967, 346, 843, 218, 968,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 915, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 853, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 2164, 0, 420, 421,
	888, 889, 891, 892, 416, 422, 423, 424, 945, 425,
	405, 406, 426, 427, 972, 428, 429, 910, 890, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 956, 437,
	438, 439, 979, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 886, 0, 451, 929, 930, 931,
	932, 0, 458, 0, 452, 453, 980, 454, 981, 863,
	455, 456, 457, 0, 459, 460, 0, 847, 461, 462,
	463, 464, 465, 467, 946, 468, 0, 894, 469, 470,
	471, 520, 926, 974, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 2159, 478, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 899, 857, 858, 859, 855, 856, 868,
	869, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 984,
	985, 486, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 982,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 967, 346,
	843, 218, 968, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 915, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 853,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 888, 889, 891, 892, 416, 422, 423,
	424, 945, 425, 405, 406, 426, 427, 972, 428, 429,
	910, 890, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 956, 437, 438, 439, 979, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 886, 0, 451,
	929, 930, 931, 932, 0, 458, 0, 452, 453, 980,
	454, 981, 863, 455, 456, 457, 0, 459, 460, 0,
	847, 461, 462, 463, 464, 465, 467, 946, 468, 0,
	894, 469, 470, 471, 520, 926, 974, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 0, 0, 0, 0,
	0, 1545, 0, 869, 0, 0, 0, 867, 899, 857,
	858, 859, 855, 856, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1994, 224, 0, 0, 0, 0, 0, 948, 873, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 914, 893,
	925, 883, 924, 923, 0, 233, 885, 884, 236, 237,
	238, 875, 947, 239, 984, 985, 486, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 928, 262, 921, 920, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 919,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	864, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	918, 916, 917, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 982, 0, 874, 294, 0, 295,
	296, 297, 298, 949, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 895, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 907, 898, 909, 911, 912, 913, 908,
	0, 900, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 933, 934, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 887, 341, 966,
	344, 345, 347, 967, 346, 843, 218, 968, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 915,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 853, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 888, 889,
	891, 892, 416, 422, 423, 424, 945, 425, 405, 406,
	426, 427, 972, 428, 429, 910, 890, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 956, 437, 438, 439,
	979, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 886, 0, 451, 929, 930, 931, 932, 0,
	458, 0, 452, 453, 980, 454, 981, 863, 455, 456,
	457, 0, 459, 460, 0, 847, 461, 462, 463, 464,
	465, 467, 946, 468, 0, 894, 469, 470, 471, 520,
	926, 974, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 1220, 867, 899, 857, 858, 859, 855, 856, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 984,
	985, 486, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 982,
	0, 874, 294, 0, 295, 296, 297, 298, 1219, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 967, 346,
	843, 218, 968, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 915, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 853,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 888, 889, 891, 892, 416, 422, 423,
	424, 945, 425, 405, 406, 426, 427, 972, 428, 429,
	910, 890, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 956, 437, 438, 439, 979, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 886, 0, 451,
	929, 930, 931, 932, 0, 458, 0, 452, 453, 980,
	454, 981, 863, 455, 456, 457, 0, 459, 460, 0,
	847, 461, 462, 463, 464, 465, 467, 946, 468, 0,
	894, 469, 470, 471, 520, 926, 974, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 1214, 867, 899, 857,
	858, 859, 855, 856, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 948, 873, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 914, 893,
	925, 883, 924, 923, 0, 233, 885, 884, 236, 237,
	238, 875, 947, 239, 984, 985, 486, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 928, 262, 921, 920, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 919,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	864, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	918, 916, 917, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 982, 0, 874, 294, 0, 295,
	296, 297, 298, 1213, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 895, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 907, 898, 909, 911, 912, 913, 908,
	0, 900, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 933, 934, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 887, 341, 966,
	344, 345, 347, 967, 346, 843, 218, 968, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 915,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 853, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 888, 889,
	891, 892, 416, 422, 423, 424, 945, 425, 405, 406,
	426, 427, 972, 428, 429, 910, 890, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 956, 437, 438, 439,
	979, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 886, 0, 451, 929, 930, 931, 932, 0,
	458, 0, 452, 453, 980, 454, 981, 863, 455, 456,
	457, 0, 459, 460, 0, 847, 461, 462, 463, 464,
	465, 467, 946, 468, 0, 894, 469, 470, 471, 520,
	926, 974, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 1209, 867, 899, 857, 858, 859, 855, 856, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 984,
	985, 486, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 982,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 967, 346,
	843, 218, 968, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 915, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 853,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 888, 889, 891, 892, 416, 422, 423,
	424, 945, 425, 405, 406, 426, 427, 972, 428, 429,
	910, 890, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 956, 437, 438, 439, 979, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 886, 0, 451,
	929, 930, 931, 932, 0, 458, 0, 452, 453, 980,
	454, 981, 863, 455, 456, 457, 0, 459, 460, 0,
	847, 461, 462, 463, 464, 465, 467, 946, 468, 0,
	894, 469, 470, 471, 520, 926, 974, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 899, 857, 858, 859,
	855, 856, 868, 869, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 984, 985, 486, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 982, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 967, 346, 843, 218, 968, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 915, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 971, 399, 400,
	401, 402, 853, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 888, 889, 891, 892,
	416, 422, 423, 424, 945, 425, 405, 406, 426, 427,
	972, 428, 429, 910, 890, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 956, 437, 438, 439, 979, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	886, 0, 451, 929, 930, 931, 932, 0, 458, 0,
	452, 453, 980, 454, 981, 863, 455, 456, 457, 0,
	459, 460, 0, 847, 461, 462, 463, 464, 465, 467,
	946, 468, 0, 894, 469, 470, 471, 520, 926, 974,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 899,
	857, 858, 859, 855, 856, 868, 869, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 984, 985, 486, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 3576, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 982, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 967, 346, 843, 218, 968, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	915, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	971, 399, 400, 401, 402, 853, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 888,
	889, 891, 892, 416, 422, 423, 424, 945, 425, 405,
	406, 426, 427, 972, 428, 429, 910, 890, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 956, 437, 438,
	439, 979, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 886, 0, 451, 929, 930, 931, 932,
	0, 458, 0, 452, 453, 980, 454, 981, 863, 455,
	456, 457, 0, 3575, 460, 0, 847, 461, 462, 463,
	464, 465, 467, 946, 468, 0, 894, 469, 470, 471,
	520, 926, 974, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 899, 857, 858, 859, 855, 856, 868, 869,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 3574, 914, 893, 925, 883, 924, 923, 0, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 984, 985,
	486, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 3576, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 982, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 967, 346, 843,
	218, 968, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 915, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 853, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 888, 889, 891, 892, 416, 422, 423, 424,
	945, 425, 405, 406, 426, 427, 972, 428, 429, 910,
	890, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	956, 437, 438, 439, 979, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 886, 0, 451, 929,
	930, 931, 932, 0, 458, 0, 452, 453, 980, 454,
	981, 863, 455, 456, 457, 0, 3575, 460, 0, 847,
	461, 462, 463, 464, 465, 467, 946, 468, 0, 894,
	469, 470, 471, 520, 926, 974, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 899, 857, 858, 859, 855,
	856, 868, 869, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 984, 985, 486, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 982, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	967, 346, 0, 218, 968, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 915, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 853, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 888, 889, 891, 892, 416,
	422, 423, 424, 945, 425, 405, 406, 426, 427, 972,
	428, 429, 910, 890, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 956, 437, 438, 439, 979, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 886,
	0, 451, 929, 930, 931, 932, 0, 458, 0, 452,
	453, 980, 454, 981, 863, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 946,
	468, 0, 894, 469, 470, 471, 520, 926, 974, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 2177,
	0, 0, 0, 0, 0, 0, 2175, 2176, 899, 857,
	858, 859, 855, 856, 868, 869, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 948, 873, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 914, 893,
	925, 883, 924, 923, 0, 233, 885, 884, 236, 237,
	238, 0, 947, 239, 984, 985, 486, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 928, 262, 921, 920, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 919,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	864, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	918, 916, 917, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 982, 0, 874, 294, 0, 295,
	296, 297, 298, 949, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 895, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 907, 898, 909, 911, 912, 913, 908,
	0, 900, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 933, 934, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 887, 341, 966,
	344, 345, 347, 967, 346, 0, 218, 968, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 915,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 853, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 888, 889,
	891, 892, 416, 422, 423, 424, 945, 425, 405, 406,
	426, 427, 972, 428, 429, 910, 890, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 956, 437, 438, 439,
	979, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 886, 0, 451, 929, 930, 931, 932, 0,
	458, 0, 452, 453, 980, 454, 981, 863, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 946, 468, 0, 894, 469, 470, 471, 520,
	926, 974, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 899, 857, 858, 859,
	855, 856, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 869, 224,
	0, 0, 867, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 0, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 984, 985, 486, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 3576, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 982, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 0, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 0, 951, 0, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 964, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 967, 346, 843, 218, 0, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 915, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 971, 399, 400,
	401, 402, 853, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 888, 889, 891, 892,
	416, 422, 423, 424, 945, 425, 405, 406, 426, 427,
	0, 428, 429, 910, 890, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 956, 437, 438, 439, 979, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	886, 0, 451, 929, 930, 931, 932, 0, 458, 0,
	452, 453, 980, 454, 981, 863, 455, 456, 457, 0,
	3575, 460, 0, 847, 461, 462, 463, 464, 465, 467,
	946, 468, 0, 894, 469, 470, 471, 520, 926, 974,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 1022, 0, 0, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	867, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 947, 239,
	484, 485, 486, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	982, 0, 495, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1008, 325, 324, 0,
	326, 983, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 967,
	346, 0, 218, 968, 348, 0, 952, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 1014, 357, 358, 359,
	0, 0, 360, 361, 506, 969, 362, 970, 977, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 978, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 971, 399, 400, 401, 402,
	511, 1016, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 182, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 945, 425, 405, 406, 426, 427, 972, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 979, 0, 443, 444,
	442, 184, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	980, 454, 981, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 946, 468,
	0, 466, 469, 470, 471, 1332, 521, 522, 0, 473,
	472, 523, 1022, 0, 0, 176, 474, 475, 524, 476,
	477, 478, 0, 177, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 1012, 0, 1625, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 947, 239, 484, 485,
	486, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 982, 0,
	495, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1008, 325, 324, 0, 326, 983,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 967, 346, 0,
	218, 968, 348, 0, 952, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1014, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 511, 1016,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 182,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	945, 425, 405, 406, 426, 427, 972, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 979, 0, 443, 444, 442, 184,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 980, 454,
	981, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 946, 468, 0, 466,
	469, 470, 471, 1332, 521, 522, 0, 473, 472, 523,
	2650, 0, 1022, 176, 474, 475, 524, 476, 477, 478,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	1012, 948, 1625, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 947, 239, 484, 485,
	486, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 982, 0,
	495, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1008, 325, 324, 0, 326, 983,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 967, 346, 0,
	218, 968, 348, 0, 952, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1014, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 511, 1016,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	945, 425, 405, 406, 426, 427, 972, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 979, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 980, 454,
	981, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 946, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1004, 0, 1022, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	1012, 948, 1010, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 947, 239, 484, 485,
	486, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 982, 0,
	495, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1008, 325, 324, 0, 326, 983,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 967, 346, 0,
	218, 968, 348, 0, 952, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 1014, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 511, 1016,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	945, 425, 405, 406, 426, 427, 972, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 979, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 980, 454,
	981, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 946, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	1022, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	1012, 0, 1010, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 947, 239, 484, 485, 486, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 982, 0, 495, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1008, 325, 324, 0, 326, 983, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 967, 346, 0, 218, 968,
	348, 0, 952, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 1014, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 511, 1016, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 945, 425,
	405, 406, 426, 427, 972, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 979, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 980, 454, 981, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 946, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1022, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 948, 1012, 0,
	1010, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 947, 239, 484, 485, 486, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 982, 0, 495, 294, 0, 295,
	296, 297, 298, 949, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 967, 346, 0, 218, 968, 348, 0,
	952, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 511, 1016, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 945, 425, 405, 406,
	426, 427, 972, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	979, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 980, 454, 981, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 946, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 833, 0, 1181, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 1528, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1085, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 959, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 961, 502, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 967, 346, 0, 0, 968, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 182, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 972, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 184, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 1332,
	521, 522, 0, 473, 472, 523, 1329, 0, 1181, 176,
	474, 475, 524, 476, 477, 478, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 151, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1085, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 959, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 961, 502, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 967, 346, 0, 0, 968, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 182, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 972, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 184, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 1332,
	521, 522, 0, 473, 472, 523, 0, 0, 0, 176,
	474, 475, 524, 476, 477, 478, 0, 177, 0, 0,
	0, 0, 1181, 1180, 0, 0, 0, 0, 1178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 1085, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 959, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 961, 502,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 967, 346, 0,
	0, 968, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 969, 362, 970, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 971, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 972, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	1181, 1180, 0, 0, 0, 0, 1178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 1199, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 1085, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 960,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 959, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 961, 502, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 967, 346, 0, 0, 968,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 969, 362, 970, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 971, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 972, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 1181, 1180,
	0, 0, 0, 0, 1178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	2851, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1085, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 959, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 961, 502, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 967, 346, 0, 0, 968, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 969,
	362, 970, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 971,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 972, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1022, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 0, 0, 1338, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	947, 239, 484, 485, 486, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 982, 0, 495, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 967, 346, 0, 218, 968, 348, 0, 952, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 971, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 945, 425, 405, 406, 426, 427,
	972, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 979, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 980, 454, 981, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	946, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 833, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 1332, 521, 522,
	0, 473, 472, 523, 213, 0, 0, 176, 474, 475,
	524, 476, 477, 478, 0, 177, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 151, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1279, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 1639, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 213, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 1283, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	213, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	2802, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 213, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 1283, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 213, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 2414, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 213, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 2939, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 591, 0, 592, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 1909, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 598,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 597, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 589, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 0, 703, 0, 592, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 601, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	598, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 597, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1181, 1180, 0, 0, 0, 0, 1178,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1085, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 959, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 961,
	502, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 967, 346,
	0, 0, 968, 348, 2774, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 972, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 592, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 598, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 1941,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 597, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 592, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	601, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	598, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 597, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1363, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 1362, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 1361, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 1360, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1327, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1326, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1323, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1322, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1259, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1258, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1256, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1255, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1174, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1176, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1181, 1180, 0, 0, 0, 0, 1178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1085, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 959, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 961,
	502, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 967, 346,
	0, 0, 968, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 972, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1181, 1180, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	601, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 1728, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 961, 502, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	967, 346, 0, 0, 968, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 969, 362, 970, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 971, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 972,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1181, 1180, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1085, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 959, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 961,
	502, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 967, 346,
	0, 0, 968, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 969, 362, 970, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 971, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 972, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 1181, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	1085, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	959, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 961, 502, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 967, 346, 0, 0, 968, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 969, 362,
	970, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 971, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 972, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	2302, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 2299, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 2450, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	2305, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 2447,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 2449, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 2446, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 2304, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 2448, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 2302, 240, 487, 0, 0, 2296,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 2299, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 2305, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	2295, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 2304, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 2303, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1418, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 1421, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 1419, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	1420, 472, 523, 1169, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1171, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1014, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1166, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1168, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1014, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1073, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	1075, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1014, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 553, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 552, 223, 542, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 545, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 546,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 547, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 541, 0, 213, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 542, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 545, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 546,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 547, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 2766, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1014, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 2386, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1918, 0, 213, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 1845, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1849, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1848, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1838, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1840, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1316, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1315, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1313, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1312, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1310, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1309, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1306, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1305, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1191, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1193, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 545, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 546,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 547, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 1948, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 1946, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 1944, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 695, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 694, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 693, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 2450, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 3271, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 532,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 531, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 530, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 213,
	3280, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 213, 2437, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 3064, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 2228, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 213, 2437, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 2434, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 1925,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1916, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 573, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 1051, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 1049, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 574, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 570,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 1052, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 569, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1861, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1860, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 573, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 563, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 574, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 570,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 1337, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 569, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1320, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1319, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1267, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1266, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1248, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1185, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 573, 0, 213, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 1051, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 1049, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 574, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 570,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 1052, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 569, 515, 516, 517, 0, 458,
	0, 452, 1050, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 1033, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 573,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 563, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 561, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 562, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 574, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 564, 403, 0,
	404, 408, 409, 570, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 565, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 569, 515,
	516, 517, 0, 458, 0, 452, 567, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 557,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 558, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 555,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 549,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 527,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 2742, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 2740, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 2727, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 2397, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 558, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 213,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	1874, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 0, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 213, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 1289, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 213, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 1229, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 213, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 987, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 213, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 0, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 0, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 0, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 0, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 1500, 1495,
	0, 0, 0, 0, 1483, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 0, 1494, 1496, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 1502, 1494, 1496,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 1512, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	1505, 0, 1493, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	1488, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 1505, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 2589, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 1504, 0, 0, 1514, 0, 0, 2588, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	1488, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 1505, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 1466,
	1472, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1503, 1494, 1496, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 1510, 0, 1511, 0, 0, 0, 2098, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 1502, 0, 0, 0,
	0, 0, 1472, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 1504, 0, 0, 1514,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 1493, 0, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 3529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 616, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 617, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1466, 0, 0, 0, 3525, 0,
	0, 0, 0, 1486, 0, 0, 0, 618, 637, 0,
	1483, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 619,
	0, 0, 620, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 644, 1513,
	0, 0, 0, 0, 621, 0, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 1466, 0, 0, 0, 0, 1472, 0, 0,
	0, 1486, 622, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 623, 0, 1514, 624, 646, 0, 1494, 1496,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 1502, 0, 1472, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 645, 0, 1504,
	0, 1512, 1514, 0, 0, 627, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 1493, 0, 0, 0, 0, 0, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 636, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 1500, 1495, 632,
	0, 0, 649, 0, 648, 1467, 0, 633, 1488, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	634, 0, 0, 0, 0, 641, 0, 0, 0, 0,
	652, 0, 647, 1466, 1505, 0, 0, 639, 0, 0,
	1503, 0, 1486, 1478, 1479, 1485, 1506, 1484, 1480, 1483,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 0, 3451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	1504, 3450, 0, 1514, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 1500, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 1466, 0, 0, 0, 1505, 0, 0, 0, 0,
	1486, 1500, 1495, 0, 0, 0, 0, 1483, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1504, 0,
	0, 1514, 3336, 0, 0, 1494, 1496, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1502, 1494, 1496, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 1512, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 1505, 0, 1493, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 1505,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	3234, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1504, 0, 0, 1514, 3187, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 1466, 0, 0, 0, 1505, 0, 0,
	0, 0, 1486, 1500, 1495, 0, 0, 0, 0, 1483,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	1504, 0, 0, 1514, 3186, 0, 0, 1494, 1496, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 1502, 1494, 1496, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	1512, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 1505, 0, 1493, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 1505, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 3185, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1504, 0, 0, 1514, 3150, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 1466, 0, 0, 0, 1505,
	0, 0, 0, 0, 1486, 1500, 1495, 0, 0, 0,
	0, 1483, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1504, 0, 0, 1514, 2946, 0, 0, 1494,
	1496, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1514, 0, 0, 1502, 1494, 1496, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 1512, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 1505, 0, 1493,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 1505, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 2586, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 1504, 0, 0, 1514,
	2585, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 1505, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 2514, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 1466, 0,
	1472, 3629, 0, 0, 0, 1503, 0, 1486, 1478, 1479,
	1485, 1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1504, 0, 2543, 1514, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2515, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 1502, 0, 0, 0,
	0, 1472, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1504, 0, 0, 1514, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 3628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 1493, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2202, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	1500, 1495, 0, 0, 0, 2201, 0, 0, 1467, 0,
	0, 0, 0, 1513, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	1505, 0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506,
	1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 1466, 0, 1472,
	0, 0, 0, 0, 1503, 0, 1486, 1478, 1479, 1485,
	1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1504, 0, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 1502, 0, 0, 0, 0,
	1472, 0, 2633, 0, 1487, 2632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 1504, 0, 0, 1514, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 1493, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 1505,
	0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484,
	1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 1466, 0, 1472, 0,
	0, 0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506,
	1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1504, 0, 0, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 1502, 0, 0, 0, 0, 1472,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 1504, 0, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 1501,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 1493, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 1500, 1495,
	0, 0, 0, 2634, 0, 0, 1467, 0, 0, 0,
	0, 1513, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 1505, 0,
	0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484, 1480,
	1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 2925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 1466, 0, 1472, 0, 0,
	0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484,
	1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1504, 0, 0, 1514, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 1502, 0, 0, 0, 0, 1472, 0,
	0, 0, 1487, 2639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 1504, 0, 0, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 1493, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 1505, 0, 0,
	1503, 0, 1486, 1478, 1479, 1485, 1506, 1484, 1480, 1483,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 0, 2587, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 1466, 0, 1472, 0, 0, 0,
	0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484, 1480,
	1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	1504, 0, 0, 1514, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 1502, 0, 0, 0, 0, 1472, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 1504, 0, 0, 1514, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 2601, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 1493, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 1505, 0, 0, 1503,
	0, 1486, 1478, 1479, 1485, 1506, 1484, 1480, 1483, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 1466, 0, 1472, 0, 0, 0, 0,
	1503, 0, 1486, 1478, 1479, 1485, 1506, 1484, 1480, 1483,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1504,
	0, 0, 1514, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 1502, 0, 0, 0, 0, 1472, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	1504, 0, 0, 1514, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	1493, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 1505, 0, 0, 1503, 0,
	1486, 1478, 1479, 1485, 1506, 1484, 1480, 1483, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 1681, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1504, 0,
	0, 1514, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 1698, 1675,
	1682, 1665, 1708, 1707, 1481, 1482, 1667, 1666, 0, 0,
	0, 0, 0, 0, 1718, 1719, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 1709, 0, 1705, 1704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1702, 1700, 1701, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 1677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1691, 1680, 1693, 1695, 1696, 1697, 1692,
	0, 1685, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 1714, 1715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1706, 0, 0, 0, 1678, 0, 1679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 1699,
	0, 0, 0, 1688, 1686, 1687, 1690, 1689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1670, 1671,
	1673, 1674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1694, 1672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1668, 0, 0, 1710, 1711, 1712, 1713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1676, 0, 0, 0, 0,
	1683, 1716,
}
var sqlPact = [...]int{

	378, -1000, -1000, -1000, -1000, -1000, -1000, 186, 183, 171,
	169, 168, 167, 166, 165, -1000, -1000, -1000, 162, -1000,
	-1000, 161, -1000, 160, 159, 158, 154, -1000, 153, 152,
	151, -1000, -1000, -1000, -1000, 148, 146, 144, 57337, 1790,
	69317, 60317, 1725, 51771, 68887, 51341, 68457, 68027, 143, -1000,
	67597, 141, 139, 137, -1000, -1000, 135, 1500, 41840, 129,
	128, 127, 1909, 124, 114, -1000, 113, -1000, 75509, 1262,
	-1000, 112, 111, -1000, 7779, 5757, 59463, 2261, 110, 109,
	42271, 2245, 2278, -1000, -1000, 1628, -1000, -1000, 108, 106,
	105, 102, 96, 95, 94, 93, 90, -1000, 89, 88,
	87, 85, 84, 83, 81, -1000, 80, 78, 76, 75,
	70, 68, 67, 63, 62, 60, 59, -1000, 7472, 1504,
	1429, 1413, 1409, 1400, 1392, 881, 57, 56, 55, 54,
	53, 52, 49, -1000, -1000, 48, 41, 38, 34, -1000,
	28, 26, 133, 24, 23, 21, 18, 16, 2178, -1000,
	1559, 989, 20875, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 73557, 69741, 15, -66,
	8, -1000, 2603, 867, 34518, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 447, -1000, -1000, -1000, 239,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1474, 679, -1000, -1000, -1000,
	67167, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1788,
	-29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 676, -1000,
	1782, 267, 1655, -1000, -1000, -1000, -1000, -1000, 69741, -1000,
	-1000, 2860, 2859, 1634, 675, 66743, -1000, 1331, -1000, 827,
	23605, -1000, 1026, -1000, 23605, 237, -1000, -1000, -1000, -1000,
	-1000, 50911, 16313, 50481, 50051, 46201, 66313, 15873, 56913, 36678,
	1069, -1000, -1000, -1000, -1000, -1000, -22, 47063, 69741, -1000,
	235, -1000, -1000, -1000, -1000, -1000, -1000, 30079, 754, 29614,
	569, 29149, 568, -1000, -1000, -1000, -1000, 2851, 2845, 984,
	2844, 2537, 73133, 1459, 2843, 1411, 1047, 911, 2842, 2841,
	2840, 2838, 2837, 2836, 2835, 1147, 65883, 2359, 1406, 45761,
	45321, 57337, 57337, 2082, 65453, 1118, 1096, -1000, -1000, -1000,
	-1000, -1000, -1000, 2432, 2270, 2266, 39270, -1000, -1000, 2833,
	2831, 2829, 2825, 2824, 72709, 1434, 2823, 1969, 2822, 2821,
	2820, 2815, 2812, 2811, 2810, 2809, 2808, -1000, 56483, 56053,
	55623, 55193, 65023, 44881, 44441, -1000, -1000, -1000, 36234, 7140,
	6674, 64593, 37554, 57337, 57337, -1000, -1000, 30532, 82, -1000,
	-1000, -1000, 2282, -1000, 30532, 82, -1000, 69741, -1000, 2357,
	1576, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2191, 1356, 2727, 44001, 1560, 1201, 2581, 2423, 2410, 1284,
	1992, 2396, 2395, 2390, 2367, 2362, 1374, 1983, 377, 20410,
	1270, 1282, 2361, 2341, 2737, 1630, 49621, 2807, 2806, 2556,
	2302, 2292, 2262, -1000, -1000, -1000, -1000, 1220, -1000, -1000,
	52619, -1000, -1000, 1003, -1000, -1000, 1003, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1066, 71861, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1559, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2170, -1000, 1594, -1000, -1000, 1937, 2584, 2584, 2584,
	2605, 422, 403, -1000, 133, -1000, -1000, 79856, -1000, -1000,
	30532, 30532, 30532, 30532, 30532, 1590, -1000, 672, -1000, -1000,
	705, -1000, 670, 608, -1000, -1000, -1000, -1000, -1000, -1000,
	669, 2739, -1000, -1000, -1000, -1000, -1000, 2722, -1000, 18562,
	-1000, -1000, -1000, 361, 668, 30532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	834, -1000, 224, 838, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 595, 1503,
	594, 594, 594, -1000, -1000, 895, -1000, -1000, -1000, 374,
	593, 309, 592, -1000, -1000, -1000, -1000, 2355, 666, 664,
	-1000, 663, 662, 661, -1000, -1000, -1000, 659, 656, 654,
	652, 645, 641, 640, 636, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 888, -1000, 635, 630, 629, 628, 627,
	621, 620, 613, 612, -1000, -1000, -23, 69741, -1000, 447,
	-23, -1000, -1000, 611, -1000, 24058, 24058, 24058, -1000, -1000,
	1781, 30532, -1000, 1949, -1000, -15, -15, 769, 35374, -1000,
	33658, 769, 836, 712, 38840, -1000, 2253, -1000, -1000, 610,
	220, -1000, -1000, 2237, 69741, 16751, 69741, 57337, 57337, 57337,
	2493, 30532, -1000, -1000, 43561, 69741, 57761, 2676, 80384, 43561,
	69741, 2354, -1000, -1000, -1000, 69741, -1000, 30532, -1000, 2674,
	1213, 47491, 2620, -31, -1000, -1000, -1000, -1000, -1000, -1000,
	1952, 1975, 1004, 1812, 1318, -1000, 23605, 2530, -1000, -1000,
	-1000, 212, 16751, -1000, 2070, 2474, 1041, -1000, 1811, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1444, 2470, -1000,
	1333, 2469, 1435, -1000, -1000, 859, 2468, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1666, -1000, -1000, 2552,
	-1000, -1000, 1786, 2466, -12, -1000, -1000, 767, -1000, 46639,
	36678, 47063, -25, -1000, -1000, -41, -1000, 15433, 79856, -1000,
	-1000, -1000, 79856, 782, -1000, -1000, 2465, -1000, 79856, 780,
	-1000, -1000, 2464, -1000, -1000, -1000, 2804, -1000, 2803, 1903,
	2802, 2801, 2800, -1000, 1360, 1487, 2796, -1000, 2795, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 54763, 1780, -1000, -1000,
	53903, 54333, 907, -1000, 859, 1896, -1000, -1000, 1895, -1000,
	856, -1000, 2794, 64163, 2096, 859, 1894, -1000, -1000, -1000,
	-1000, -1000, 40126, -1000, 40126, -1000, 40126, -1000, 1267, -1000,
	72285, -15, -15, 2722, -1000, -1000, -1000, -1000, -1000, 2463,
	2792, 2791, 2789, -1000, 69741, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 178, 2461, -1000, -1000, 178, 2459,
	-1000, 178, 2455, -1000, 177, 2454, -1000, -1000, 1691, 2450,
	-1000, -43, 2439, -1000, -1000, -43, 2438, -1000, -47, -1000,
	-1000, -1000, 867, -1000, 35804, -1000, 35804, 63733, 46639, 852,
	644, 41410, 79856, -1000, 36678, 79856, -1000, 46639, 53903, -1000,
	63303, 53479, -1000, -1000, 1130, 1996, -1000, -1000, -1000, -1000,
	46639, 46639, 46639, -1000, 62873, -1000, -1000, 1612, 1353, 2560,
	1596, 57337, -1000, 1636, -1000, -1000, -1000, 2571, 2349, -1000,
	43133, 59033, -1000, 58609, -1000, 58185, -1000, 57337, -1000, 57337,
	-1000, 2787, 2784, 2783, -1000, 2782, 2565, 79856, 2557, -1000,
	2430, 1418, 1390, 69741, -1000, -1000, 69741, -1000, 69741, -1000,
	-1000, -1000, 1946, -1000, -1000, -1000, -1000, 57337, -1000, -1000,
	-1000, -1000, -1000, -1000, 2347, -1000, 1315, -1000, 1572, -1000,
	1119, -1000, -1000, 179, -1000, -1000, -31, -1000, 71861, -1000,
	-1000, 1937, -1000, 69741, -1000, 1958, 2316, 2346, 1366, 1801,
	2030, -1000, 28684, 2016, 30532, 1807, 133, -1000, -1000, 133,
	133, 23152, -1000, -1000, 80384, 80384, 16751, 1078, 30532, 30532,
	30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532,
	30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532,
	30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532, 30532,
	30532, 30532, 30532, 1516, 30532, 1065, 30532, 30532, 30532, 30532,
	1617, -1000, -1000, 1539, 488, 1592, -1000, 2714, 2714, 2714,
	80225, 80225, 556, 2781, 705, -1000, 30532, -1000, 82, 30532,
	17191, -1000, -1000, -1000, 403, 9120, 1851, -1000, 401, 17656,
	-1000, -1000, -1000, 18562, 608, 28219, 30532, 870, 79856, 1498,
	2723, 14995, 2348, 2126, -1000, 2728, -1000, -1000, 2723, -1000,
	-1000, -1000, -1000, 2723, 1077, 1075, 2723, -1000, 2723, 2723,
	607, 685, 673, 19945, 19480, 479, 30532, 30532, 30532, 30532,
	30532, 30532, 30532, 30532, -1000, 27766, 27301, 26836, 31891, 26371,
	30532, 19015, 25906, 25441, 69741, -23, 2671, 30532, 238, -1000,
	78380, -1000, 238, 238, 603, -54, 79856, 2013, 2013, 34946,
	1897, 1602, 1602, 1602, -1000, 769, 11475, 769, 62021, 1641,
	769, 769, 208, 245, 400, 33230, 1949, 62021, 696, 602,
	6, 5, 4, -1000, -1000, 3, -1, -1000, -1000, 57337,
	598, 17191, 16751, 1181, -55, 205, 2043, 2037, 2031, -1000,
	2027, 1327, -56, 1064, -134, -1000, 5578, -57, -1000, 1122,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 885, 597, 596, 376, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 595, 1503, 594, 594, 594, -1000, -1000, -1000,
	374, 593, 309, 592, -1000, -1000, -1000, -1000, -1000, -1000,
	2234, -41, 57761, 795, -63, 990, -31, -1000, -1000, -1000,
	47491, 1003, -1000, 1540, -1000, -1000, -1000, -1000, -1000, -1000,
	1151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 834, -1000,
	2719, -1000, -1000, 2726, -24, -1000, -1000, 16751, -1000, -34,
	1354, -1000, 49191, 1971, 2555, 2545, 1244, -1000, 1163, 2602,
	52619, 2626, 2632, 868, -1000, 2230, -1000, -1000, 825, 1314,
	1063, 52619, 1333, -1000, 80384, -1000, 2093, 2597, 1170, 1175,
	1170, 1170, 1167, -1000, 52619, 1062, -1000, 1552, -1000, 46639,
	-1000, 1061, -1000, -37, 2625, 2628, 187, -1000, 2222, 1059,
	-1000, -1000, 57337, 16751, 2089, -1000, -65, 767, -25, 47063,
	69741, 203, -1000, 30532, 82, 30532, 82, -1000, -1000, 2434,
	-1000, -1000, -1000, 2780, 1456, 1967, -1000, -1000, -1000, 591,
	1888, 2201, 69741, 2032, -27, 57337, -1000, 1333, 1884, -1000,
	-1000, 53049, -1000, -1000, 2431, 2429, 553, 2779, -1000, 1778,
	1872, -1000, -1000, -1000, 71437, 1102, 2428, 937, 526, 2668,
	-1000, 526, 40554, -1000, 69741, -1000, -1000, 69741, -1000, -1000,
	-1000, 2775, -1000, 57337, -1000, -1000, 57337, -1000, 57337, -1000,
	57337, -1000, 57337, 57337, -1000, 69741, 46639, 46639, 46639, 3696,
	48343, -71, -74, 399, -1000, 62449, 69741, 936, 48767, 69741,
	2517, -142, -1000, 852, 852, 767, -1000, 767, -1000, 57337,
	2330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2774, 2772,
	-1000, -1000, -1000, 857, 57337, 69741, 57337, -1000, -1000, 69741,
	-1000, 69741, -1000, 857, 69741, 857, 69741, 857, 69741, -1000,
	-1000, -1000, -1000, -1000, -1000, 82, 30532, 1305, -1000, 2329,
	-1000, 2318, -1000, 30, -1000, -1000, -1000, -1000, 1371, 57337,
	57337, 57337, 57337, 69741, 57337, -1000, 52619, -1000, 1958, 2316,
	-1000, -1000, -1000, -1000, -1000, -1000, 1252, 1693, -1000, 2004,
	-1000, 1226, -1000, -1000, -1000, 79856, 484, -1000, -1000, 79856,
	1430, 1291, 57337, 2050, -1000, 2050, -26, -1000, 78092, 2003,
	57337, -1000, -1000, -1000, -1000, -1000, 807, 1251, 1251, 1058,
	1058, 1058, 1058, 2657, 475, 1110, 4060, 5080, 5080, 5615,
	5615, 5615, 5615, 5615, 5080, 1133, 527, 527, 1133, 1133,
	1133, 1133, 1133, 527, 527, 527, 5080, 5080, 5080, 80225,
	79937, 5821, 30532, 30532, 1056, 1506, 488, 5799, 30532, 6488,
	6488, 6488, 6488, -1000, 1832, -1000, -1000, -1000, -1000, 2185,
	590, 31891, 31891, -1000, -1000, -1000, -1000, 18109, 30532, -1000,
	-1000, -1000, -1000, 24976, -1000, -1000, 77723, -242, 398, -199,
	0, -1000, 30532, 30532, 30532, 397, -1000, 202, 30532, 69741,
	-1000, 74748, 692, -73, -1000, -80, 1207, -1000, 30532, -1000,
	-1000, 1054, -1000, 1053, 1051, 1043, -1000, 587, 396, -1000,
	197, -1000, 1604, 586, 584, 395, -81, 392, 804, 790,
	389, 386, 385, 30532, -1000, -1000, -1000, -1000, -1000, 77435,
	-1000, -1000, 77389, -1000, -1000, -1000, 79568, 74458, 74412, 10779,
	8051, 10516, 10163, -82, 384, -1000, 2183, -199, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 383, -1000, 381, -1000,
	79487, -199, 372, 1067, -1000, 31891, 31891, 31891, -1000, 371,
	-1000, 78461, -1000, 79118, 24523, 24523, 24523, 368, 79199, 30532,
	-199, -83, -1000, -88, -1000, -1000, 583, -89, 876, 24058,
	34088, 16751, -1000, 876, 876, 30532, -1000, 30532, 2018, -1000,
	-1000, -1000, 2014, 1492, 2013, 34946, -1000, -1000, -1000, -1000,
	62021, -1000, 2722, 2130, -1000, 62021, -1000, -1000, 69741, 447,
	-1000, 62021, 62021, 16751, 769, -1000, 769, 62021, 599, -1000,
	-1000, -1000, -1000, -1000, 365, 37982, 0, 195, 852, -1000,
	16751, 2112, 2112, 2112, 2112, -1000, -1000, 69741, 2688, -1000,
	1534, -1000, 80384, -1000, 703, 956, 578, -1000, 2723, 2723,
	-1000, 2723, 69741, 140, 23605, -1000, 1003, -1000, -1000, 1307,
	-1000, 1476, -1000, 1071, -1000, -1000, -1000, 23605, -1000, 1956,
	69741, 69741, 57337, -1000, -1000, 1869, 71013, 1867, 80384, 69741,
	-1000, -1000, 570, 560, 2000, 1994, 69741, 69741, 1986, 70589,
	70165, 69741, 1547, 30532, 1804, 1766, 82, 82, -1000, -1000,
	82, 557, 1109, 57337, 57337, 57337, 1427, -1000, -1000, -1000,
	-1000, -1000, 52195, -1000, -1000, 2725, -1000, 1170, -1000, -1000,
	-1000, 1170, 1333, 1419, 57337, 42709, 859, 69741, 1549, 82,
	82, -1000, -1000, 82, 554, 16751, 1520, -1000, 852, 2176,
	-1000, 2089, -1000, -1000, 14557, 79856, -1000, 79856, -1000, 69741,
	-1000, 900, 69741, 48767, 848, 2427, 39698, -41, 852, 46639,
	57337, -27, -1000, 1333, 2415, 447, -1000, -1000, 46639, 46639,
	2771, 552, 2770, -1000, 57337, 2414, 1754, 1864, 2483, 735,
	69741, 876, 34946, 1513, -1000, 38412, 922, 69741, 1397, 134,
	-1000, -1000, -1000, 14, 69741, -1000, 2768, -1000, -1000, 178,
	178, 178, -1000, 177, 1691, -1000, -43, -43, -1000, -1000,
	3696, 3696, 852, -28, 550, -1000, 758, 757, 37116, 46639,
	-91, -1000, -1000, -1000, -1000, -1000, 57337, 69741, 646, 2094,
	69741, -94, -1000, 194, 544, 852, 36678, 2173, -1000, -1000,
	869, -1000, 1111, -1000, -1000, -1000, -1000, -1000, -1000, -16,
	-41, -41, -1000, 857, -1000, 857, -1000, 857, -1000, 79856,
	-1000, 1302, 1300, 69741, -1000, 16751, 69741, 57337, 16751, 57337,
	2304, 2287, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	949, -1000, 1430, -1000, 30532, -1000, -1000, -1000, -1000, 1933,
	-1000, -30, 23152, 1816, -1000, -1000, 57337, -17, 30532, 30532,
	5280, 5265, 30532, 31891, 31891, -1000, 30532, 4594, -1000, -1000,
	-1000, -1000, -1000, 2168, 543, 30532, 80384, 6920, 5101, -1000,
	357, 9841, 1133, -1000, 30532, -1000, 354, 22699, -1000, 78749,
	-9, -96, -1000, 14119, -199, -97, -1000, -1000, 701, -1000,
	2437, -1000, 30532, 78830, 1915, 1601, 1425, 1346, 2723, 2738,
	13681, -1000, 40982, 877, 1646, -1000, -1000, 2723, 813, -1000,
	-1000, -1000, 813, -1000, 77101, -1000, -1000, 80384, 80384, 30532,
	30532, -1000, 30532, 30532, 30532, -1000, -1000, 30532, -1000, -1000,
	2155, 30532, -1000, 80384, 80384, 31891, 31891, 31891, 31891, 31891,
	31891, 31891, 31891, 31891, 31891, 31891, 31891, 31891, 31891, 31891,
	31891, 31891, 31891, 31891, 1977, 31891, 2710, 2710, 2710, -1000,
	2286, 2155, 30532, 30532, 80384, 353, 350, 345, -1000, 30532,
	-199, -1000, -1000, 3696, -1000, 2125, -1000, 30532, -1000, -166,
	-1000, 1949, -1000, -1000, 2125, 2125, -102, 79856, 34946, 34946,
	-1000, 542, 30532, 2010, -1000, -1000, 691, -240, -1000, 751,
	-1000, -1000, -1000, -1000, -1000, 447, -1000, -1000, -1000, 192,
	62021, 62021, 690, -1000, -104, -1000, -1000, -105, -1000, 2663,
	343, 16751, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-41, 1654, 2735, -1000, 2724, 700, 689, 2723, 341, 340,
	329, -41, 69741, -1000, -31, -1000, -1000, -1000, 30532, -1000,
	-1000, 2554, 1042, 1040, -1000, 2411, -1000, 1856, -1000, 928,
	-1000, 1408, -1000, 30532, 30532, 541, 538, 1478, 2767, 935,
	2409, 1691, 2405, 1691, -1000, -1000, 830, -1000, 79856, 537,
	536, -1000, -34, 1345, 862, -1000, -1000, 30532, 30532, 61597,
	-1000, 356, 2552, -18, -1000, 1022, -1000, -1000, -1000, -1000,
	1333, 1013, -1000, -1000, -1000, -1000, -1000, -1000, 861, -1000,
	-1000, 30532, -1000, -37, 1008, -1000, 46639, 852, -1000, 2764,
	2761, 2759, 328, -107, -38, 80384, 2662, 1794, 441, 57337,
	779, -1000, 2722, -1000, -1000, -1000, 57337, 2649, 859, -1000,
	-1000, 2757, -1000, 934, 16751, 57337, 2403, 1959, 735, 47919,
	-1000, 859, 1646, -45, -1000, 1397, 22234, 2547, -110, -1000,
	-1000, -1000, 876, 40554, 34946, 30532, 2756, -112, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 61173, 61173, 46639,
	46639, 46639, 852, 69741, 69741, 48767, 2755, 535, 69741, 69741,
	534, -1000, 69741, 69741, 2754, 46639, -1000, -1000, 82, -1000,
	1652, 57337, 13243, -1000, -1000, -1000, -1000, -1000, 857, -1000,
	-1000, 1556, 1806, 1556, 1396, 1375, -1000, 1692, 76813, -1000,
	-1000, -1000, 2046, 2570, 16751, 2639, 6488, 30532, 30532, 4363,
	4018, 268, 6488, 30532, 30532, 80384, 10979, -113, 30532, 30532,
	-1000, 30532, 684, 79856, 2733, 30532, 315, 312, -1000, -1000,
	-1000, -1000, -1000, -1000, 79856, 30532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 307, -1000, 188, -1000, -1000, -1000, 73981,
	-1000, 30532, 305, 304, -1000, -1000, -1000, 300, 298, 9489,
	6153, 76767, 76479, 76191, 79856, 2286, 79856, -1000, -1000, 655,
	655, 1161, 1161, 1161, 1161, 2710, 418, 425, 330, 465,
	465, 465, 521, 500, 500, 465, 465, 465, 2152, 1982,
	533, 6226, -1000, -1000, 79856, 79856, 296, -1000, -1000, -1000,
	-199, 295, 2119, 2596, 79856, -1000, 34946, 2119, 2119, -1000,
	-1000, 1492, 69741, 79856, 34946, -1000, 2130, -1000, 11925, -1000,
	16751, -1000, -1000, -1000, -1000, 2722, -1000, 37982, -1000, 532,
	-1000, 1, -1000, -1000, 683, 2753, 699, 288, -1000, -1000,
	-1000, -41, 79856, 69741, 69741, 69741, 2402, -1000, 2064, -1000,
	76145, -115, -1000, 78092, 30532, 69741, -1000, 1450, 2033, 971,
	-1000, 2575, 69741, -1000, 69741, -1000, -1000, 69741, 69741, 57337,
	2388, -118, 79856, -42, -1000, 749, -1000, 1172, -1000, 12805,
	57337, 57337, 2382, -120, 16751, -43, -1000, -1000, -1000, -1000,
	2085, -1000, 59887, 1690, 82, -1000, 60745, 2751, 528, -1000,
	1650, -1000, 674, 1333, 82, -1000, -1000, 525, 69741, 1743,
	507, 16751, 1962, 735, 47919, -1000, 1102, 2030, -1000, -44,
	-1000, 379, 82, 1646, -1000, -45, 79856, -1000, 740, -1000,
	-121, -1000, -1000, 286, -1000, 2516, 2515, -1000, -1000, 30532,
	506, 504, 69741, 2513, -1000, -1000, -129, -1000, 1961, -1000,
	-1000, -1000, -1000, -1000, 16751, 1309, -1000, 502, 501, -1000,
	-1000, -1000, -1000, -1000, 2570, 6488, 6488, 30532, 30532, 30532,
	6488, 10979, -131, -1000, 6488, 6488, -199, -1000, -1000, 78749,
	-1000, -1000, 79856, -1000, 12367, 1564, -1000, 75857, -1000, -1000,
	-1000, -1000, 30532, 30532, -1000, -1000, -1000, -1000, -1000, 31891,
	2147, 499, 80384, -1000, -1000, 871, 30532, 30532, 1949, 871,
	871, -1000, -132, -1000, -1000, -1000, 2722, 1, -1000, -1000,
	2750, 16751, 698, -1000, 2749, -1000, -1000, -1000, -1000, 69741,
	-1000, 69741, -1000, 16751, 69741, 2148, 1837, -1000, -1000, 1981,
	490, 31891, 57337, 731, 2158, 1454, 30532, 1816, -137, -139,
	1831, -1000, -1000, 1808, 30532, -1000, 80384, 489, 1691, 1691,
	-140, -145, -1000, 30532, 1006, 69741, 21781, -1000, 2747, 2552,
	-1000, -1000, 30532, 1002, -1000, 1549, 2103, -1000, -1000, -1000,
	-1000, 1976, -1000, -1000, 69741, 1974, 853, -146, -1000, 738,
	737, -1000, 48767, 848, 814, -1000, -1000, -1000, 30532, -1000,
	57337, 30532, 1741, -1000, 735, 47919, -1000, 2483, 1397, -1000,
	2490, 69741, 2544, -1000, 2030, 488, -1000, 852, 483, 482,
	-147, 30532, 30532, -148, 481, 852, -53, -1000, 722, 706,
	-1000, -1000, 57337, 57337, 30532, 30532, -1000, 6488, 6488, 6488,
	-1000, 282, -1000, -1000, 1646, 2595, -1000, 75566, 75488, 443,
	31891, 80384, -153, -1000, 69741, 79856, -199, -1000, -1000, -1000,
	600, -1000, 2746, -1000, -1000, 1571, -1000, -1000, -1000, 69741,
	1847, -1000, -1000, 30532, 6226, 478, 30532, -1000, -1000, 2063,
	2212, 2085, 477, -1000, -1000, -1000, -1000, -1000, 1462, -1000,
	-1000, 79856, 2574, 30532, -1000, -1000, 473, 472, 79856, 463,
	734, 2145, -1000, -1000, -1000, 79856, 462, 848, -1000, 1581,
	1690, 452, -1000, -1000, -1000, 2069, -1000, 60745, 32344, 32344,
	278, 2648, 814, -1000, 2709, -1000, -154, 934, -155, 57337,
	47919, -1000, 1959, -1000, 1121, -156, 69741, 1397, -1000, -1000,
	46639, 46639, 1454, -161, -169, -1000, 46639, -1000, 1961, -1000,
	69741, -1000, 69741, -1000, -1000, -170, -172, -1000, 1687, 30532,
	-1000, -1000, 443, -178, -1000, -76, -1000, 2636, -1000, -1000,
	-1000, -1000, 2400, 75093, 1923, 69741, 75011, 2180, -1000, -1000,
	1549, 69741, 57337, 933, 16751, -179, 1556, 1556, 30532, 21328,
	1579, 30532, -1000, 57337, 69741, -1000, 2510, -1000, -1000, -1000,
	2085, 82, -1000, -1000, 1454, 451, 1454, 450, -1000, 1962,
	1230, -1000, 876, -1000, -1000, -180, -192, 2085, 1454, -1000,
	-200, -1000, -201, -202, -1000, -1000, 275, 31438, 31438, 31438,
	-199, -1000, 69741, 449, 2374, -1000, 1711, 1566, 264, 960,
	-1000, -1000, 2158, -208, 447, -1000, 30532, -1000, 2085, -209,
	-1000, 921, -210, -1000, 916, -211, -1000, 2142, -1000, -218,
	444, -219, -1000, -1000, -1000, 1549, 853, 2085, 30532, 2085,
	30532, -1000, 40554, -1000, 852, 852, 1549, 2085, 852, -1000,
	-1000, -1000, 2397, -1000, 32782, 1699, 1369, 78011, 2397, 2397,
	-1000, -1000, 69741, -1000, 1735, 1730, 1257, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1923, 79856, -1000, -1000, 1556,
	2099, -1000, 1556, 2141, -1000, 1577, -1000, 69741, -1000, 69741,
	848, -1000, 1549, -220, 1549, -221, -193, -1000, -1000, -1000,
	1549, -1000, -1000, 1455, 2644, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2498, -1000, 945, 1769, 1769, 1711,
	-1000, 430, -1000, 429, -1000, -226, -1000, -1000, 875, 1454,
	875, 1454, -1000, -1000, 1355, -1000, -1000, 1632, 30985, -1000,
	2692, -1000, -1000, 1997, -1000, 2158, 30532, 30532, 1676, -1000,
	2743, 2085, -1000, 2085, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -227, -228, -1000, -1000, -1000, -1000, 1549, 1549, 1549,
	998, 875, 875, -1000, 428, -1000, -1000, 30532, -233, 1549,
	-1000,
}
var sqlPgo = [...]int{

	0, 3338, 3337, 3336, 3335, 3334, 3332, 3330, 3329, 3326,
	3325, 3322, 3321, 3320, 3318, 3316, 3315, 3313, 3309, 3308,
	3307, 3306, 3304, 3303, 3300, 3298, 3297, 3295, 3293, 3292,
	3290, 3289, 3288, 3286, 3281, 3280, 3279, 3278, 3277, 3276,
	3272, 3270, 3268, 3267, 3264, 3263, 3262, 3260, 31, 3259,
	3258, 3257, 3254, 3253, 3252, 3250, 3249, 3246, 3244, 3242,
	3241, 3239, 3237, 3235, 3232, 3231, 33, 3230, 228, 3229,
	3228, 3227, 3226, 3223, 3218, 3217, 3216, 3214, 3213, 225,
	3211, 110, 3210, 3207, 3206, 3205, 3203, 224, 3202, 3201,
	3200, 3196, 3195, 3194, 3193, 3190, 127, 3189, 3188, 153,
	3184, 3183, 3182, 3181, 3176, 3174, 3173, 3170, 3169, 3168,
	202, 3167, 223, 3162, 3161, 3160, 3158, 3157, 3156, 3155,
	3153, 3152, 3151, 3148, 3147, 3146, 3144, 3143, 3141, 3137,
	3136, 3134, 3132, 3131, 3130, 3129, 3128, 3127, 3122, 3121,
	221, 149, 3120, 3119, 217, 214, 3118, 132, 101, 98,
	40, 3116, 91, 52, 3115, 15, 140, 203, 7034, 188,
	3113, 3112, 3110, 204, 152, 3109, 196, 3107, 3103, 3097,
	3088, 64, 63, 141, 138, 133, 134, 175, 3086, 3082,
	80, 55, 28, 26, 106, 136, 3081, 3080, 3079, 2382,
	96, 3078, 3073, 218, 199, 3069, 1068, 3067, 131, 89,
	100, 151, 93, 3066, 118, 19, 3057, 129, 49, 3056,
	126, 76, 27, 6136, 7024, 3054, 107, 227, 79, 189,
	194, 193, 181, 173, 139, 120, 3052, 208, 3051, 50,
	160, 3050, 3049, 3048, 56, 155, 70, 3045, 4, 3,
	128, 11, 88, 13, 3044, 12, 3043, 3042, 3040, 3038,
	23, 130, 3037, 115, 66, 3033, 69, 3032, 65, 167,
	3031, 182, 99, 3030, 3029, 210, 163, 146, 3028, 17,
	187, 3026, 3023, 3020, 3018, 3017, 105, 22, 102, 3016,
	3014, 112, 195, 154, 3013, 53, 3012, 135, 78, 117,
	215, 94, 197, 92, 179, 147, 185, 3010, 3008, 3007,
	165, 3006, 3004, 168, 119, 3002, 3001, 226, 34, 57,
	191, 58, 3000, 125, 2999, 162, 2998, 2997, 2995, 222,
	143, 172, 6, 90, 95, 25, 8, 190, 122, 206,
	86, 2994, 3491, 1343, 1316, 35, 109, 85, 38, 97,
	116, 211, 54, 2993, 2992, 1278, 2991, 2990, 2989, 2988,
	148, 2987, 2986, 2983, 111, 108, 176, 2982, 123, 68,
	10, 87, 201, 216, 83, 180, 157, 207, 2979, 142,
	2977, 74, 114, 2976, 159, 198, 84, 2975, 339, 121,
	2970, 164, 2968, 2965, 2963, 2962, 2961, 2953, 2950, 72,
	2942, 113, 2939, 2938, 156, 124, 171, 75, 30, 2937,
	61, 166, 2935, 158, 37, 2933, 2499, 32, 0, 8031,
	5462, 5853, 2931, 1554, 2930, 183, 104, 2926, 2924, 2923,
	71, 2922, 60, 2921, 2920, 36, 2918, 16, 7, 9,
	18, 14, 1039, 549, 2916, 2912, 82, 103, 144, 2911,
	219, 184, 2910, 2909, 2908, 73, 2907, 24, 2906, 21,
	2903, 2902, 29, 5, 43, 2901, 2900, 200, 2899, 192,
	2897, 2896, 2662, 2894, 212, 67, 2892, 205, 2891, 137,
	169, 2890, 2887, 2886, 2885, 209, 2884, 2883, 20, 1,
	2882, 2877, 2874, 161, 2, 2519, 2871, 2870, 62, 2869,
	2865, 150,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 464,
	464, 19, 31, 20, 32, 13, 465, 465, 465, 465,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 174, 174, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	463, 463, 176, 176, 175, 170, 170, 466, 466, 177,
	177, 177, 179, 179, 37, 37, 37, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 406, 406, 407, 407, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	473, 473, 474, 474, 475, 475, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 252, 252, 228, 228, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 459, 459, 266, 266,
	373, 373, 68, 68, 286, 286, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	267, 267, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 375, 375, 80, 80, 80,
	343, 343, 84, 84, 84, 301, 301, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	462, 462, 259, 259, 193, 193, 193, 193, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 469, 469,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 400,
	400, 275, 275, 398, 398, 414, 414, 399, 399, 232,
	232, 232, 232, 232, 233, 233, 233, 405, 405, 405,
	405, 405, 405, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 307, 307, 307, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 136, 136, 136, 136, 136, 136,
	357, 357, 132, 132, 132, 132, 135, 135, 135, 135,
	291, 291, 129, 129, 129, 130, 130, 130, 134, 134,
	137, 137, 137, 137, 116, 116, 116, 477, 477, 477,
	138, 138, 128, 128, 139, 139, 139, 139, 139, 139,
	139, 139, 127, 127, 127, 126, 126, 126, 126, 119,
	460, 460, 457, 457, 457, 457, 457, 457, 457, 458,
	458, 461, 461, 89, 89, 89, 58, 58, 155, 155,
	155, 155, 153, 153, 154, 154, 59, 59, 478, 478,
	478, 467, 467, 467, 468, 468, 468, 468, 468, 468,
	234, 234, 235, 235, 324, 324, 324, 324, 324, 238,
	238, 178, 178, 178, 241, 242, 242, 239, 239, 240,
	240, 240, 244, 244, 243, 246, 246, 245, 323, 421,
	421, 423, 423, 423, 423, 423, 423, 423, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 419, 419,
	419, 420, 415, 415, 416, 416, 416, 416, 236, 236,
	237, 237, 237, 237, 417, 418, 257, 257, 360, 422,
	422, 424, 424, 426, 479, 479, 479, 479, 479, 479,
	480, 480, 322, 322, 250, 250, 427, 427, 427, 427,
	428, 428, 428, 428, 428, 431, 430, 429, 429, 429,
	429, 429, 353, 353, 353, 62, 62, 62, 288, 288,
	287, 287, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 143, 143, 60,
	60, 60, 184, 184, 185, 185, 57, 57, 57, 482,
	482, 61, 61, 61, 483, 483, 67, 67, 67, 67,
	67, 67, 56, 56, 56, 56, 56, 484, 484, 308,
	308, 306, 306, 256, 256, 359, 197, 197, 171, 171,
	171, 23, 25, 25, 17, 17, 34, 34, 35, 35,
	30, 30, 470, 470, 471, 471, 90, 90, 94, 94,
	94, 102, 102, 142, 142, 142, 142, 142, 142, 142,
	38, 38, 38, 38, 50, 50, 50, 50, 100, 486,
	486, 486, 101, 101, 485, 485, 192, 192, 192, 192,
	194, 194, 319, 319, 320, 320, 487, 487, 321, 321,
	321, 321, 187, 186, 188, 188, 55, 55, 55, 180,
	180, 181, 181, 182, 182, 183, 183, 488, 488, 87,
	87, 87, 145, 145, 227, 227, 227, 315, 315, 315,
	251, 251, 202, 202, 318, 318, 316, 316, 316, 316,
	285, 285, 285, 144, 144, 264, 264, 277, 277, 278,
	278, 370, 370, 279, 99, 99, 158, 158, 156, 156,
	156, 156, 156, 156, 156, 156, 163, 163, 164, 164,
	165, 165, 166, 167, 167, 167, 167, 268, 268, 168,
	168, 168, 157, 157, 157, 159, 159, 159, 159, 159,
	159, 159, 162, 162, 162, 162, 169, 169, 169, 161,
	161, 438, 438, 438, 440, 440, 441, 437, 437, 439,
	439, 481, 481, 290, 290, 290, 248, 249, 247, 247,
	254, 254, 253, 255, 255, 358, 358, 358, 172, 172,
	172, 282, 282, 282, 282, 283, 283, 311, 311, 309,
	309, 309, 310, 310, 312, 312, 312, 313, 313, 314,
	314, 281, 281, 339, 339, 160, 160, 160, 261, 261,
	261, 262, 262, 330, 330, 330, 330, 330, 330, 331,
	331, 329, 329, 329, 329, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 362, 363, 363, 263, 263, 364,
	317, 317, 455, 455, 455, 456, 456, 356, 356, 365,
	365, 365, 365, 365, 365, 354, 354, 355, 355, 371,
	372, 372, 294, 294, 294, 294, 292, 292, 295, 295,
	295, 295, 293, 293, 366, 366, 366, 366, 284, 284,
	367, 367, 367, 367, 368, 325, 326, 326, 376, 376,
	376, 376, 391, 260, 260, 260, 260, 260, 489, 489,
	377, 377, 377, 377, 377, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 381, 381, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 390, 390,
	390, 390, 390, 382, 382, 387, 387, 388, 388, 388,
	383, 384, 389, 389, 389, 389, 490, 490, 393, 393,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 379,
	379, 379, 386, 386, 386, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 302, 302,
	304, 304, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 334, 334, 334,
	334, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 432, 432, 432, 432, 432,
	432, 432, 432, 435, 435, 436, 436, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 442, 442,
	443, 443, 445, 445, 446, 446, 447, 448, 448, 448,
	449, 450, 450, 444, 444, 451, 451, 451, 451, 452,
	452, 453, 453, 453, 453, 453, 454, 454, 454, 454,
	454, 345, 345, 346, 346, 352, 352, 352, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 195, 195, 195, 195, 195, 273,
	273, 271, 271, 271, 274, 274, 272, 272, 270, 270,
	269, 269, 342, 342, 340, 340, 344, 344, 296, 296,
	392, 392, 392, 392, 392, 392, 392, 392, 297, 297,
	297, 305, 298, 298, 299, 299, 299, 299, 299, 336,
	337, 300, 300, 300, 338, 338, 347, 351, 351, 350,
	349, 349, 348, 348, 327, 327, 328, 328, 280, 280,
	491, 491, 276, 276, 369, 369, 369, 369, 230, 230,
	265, 265, 229, 229, 222, 222, 223, 223, 223, 223,
	258, 258, 394, 394, 394, 395, 396, 397, 341, 341,
	212, 211, 199, 200, 210, 209, 208, 198, 201, 205,
	206, 207, 203, 204, 218, 217, 216, 214, 215, 374,
	224, 224, 225, 225, 225, 226, 226, 226, 226, 196,
	196, 219, 219, 220, 221, 221, 213, 213, 213, 189,
	189, 189, 190, 190, 191, 191, 404, 404, 402, 402,
	402, 403, 403, 403, 403, 401, 401, 401, 401, 401,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 410, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 413, 413,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 9, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 6, 7, 2, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	6, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 10, 10, 3, 5, 5, 5, 3, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	4, 3, 3, 3, 1, 3, 9, 12, 0, 2,
	3, 1, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 3, 0,
	2, 4, 3, 3, 1, 5, 1, 3, 1, 2,
	0, 1, 2, 2, 0, 1, 3, 3, 2, 2,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 5, 8, 4, 1, 0,
	1, 2, 2, 1, 2, 3, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 1, 0, 3, 3, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 3, 2, 0, 1, 1,
	0, 6, 4, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 0, 2, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 3, 4, 5, 2, 2,
	0, 2, 2, 1, 1, 1, 0, 1, 0, 2,
	2, 5, 2, 3, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 1,
	3, 2, 4, 4, 0, 4, 4, 3, 4, 1,
	5, 3, 4, 5, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	5, 6, 4, 6, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 2, 2, 1, 0, 2, 5,
	7, 2, 1, 2, 4, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 1,
	1, 1, 1, 2, 1, 5, 5, 3, 1, 1,
	1, 2, 2, 2, 4, 3, 5, 6, 8, 6,
	5, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 3, 3, 3, 0, 1,
	4, 2, 2, 2, 2, 2, 3, 2, 2, 3,
	0, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 467, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 324, 334, 318, -107, -108,
	353, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -472, 86, -439,
	-71, -74, -76, -476, 116, 131, 175, 286, -92, -93,
	320, 322, 132, -45, -44, 126, -156, -158, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 357, 404,
	42, 367, 71, 119, 328, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -438, -72, -73, -75, -77, -78, 319, -159,
	-157, 464, 417, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 435, 443, -162, -160,
	-161, -169, 341, 425, 381, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, -214, -219, -220, -221, -213,
	-189, -410, -413, 4, -408, -411, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 387, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 304, 306, 307, 309, 310, 311, 312, 313,
	318, 315, 316, 317, 319, 320, 321, 322, 324, 326,
	327, 328, 329, 331, 333, 354, 355, 369, 334, 335,
	336, 337, 338, 339, 340, 344, 348, 345, 346, 347,
	342, 343, 349, 350, 351, 353, 356, 357, 359, 360,
	362, 363, 365, 366, 367, 368, 370, 373, 374, 375,
	371, 372, 380, 378, 379, 382, 383, 384, 385, 386,
	388, 390, 398, 399, 401, 404, 405, 406, 396, 408,
	409, 412, 413, 414, 415, 416, 421, 417, 419, 422,
	423, 424, 430, 429, 436, 437, 439, 440, 441, 33,
	43, 44, 46, 49, 60, 61, 62, 65, 103, 104,
	124, 134, 135, 146, 160, 162, 169, 170, 171, 189,
	195, 197, 201, 221, 256, 258, 274, 278, 291, 293,
	305, 330, 361, 376, 391, 392, 393, 394, 400, 402,
	425, 426, 427, 431, 438, 265, -207, 2, -189, -189,
	294, 26, 2, 26, 290, 343, 383, 385, 2, -462,
	-259, 2, 26, -193, -189, 86, 158, 341, -207, 2,
	-462, -259, 24, 2, -189, 2, -194, 2, 334, -189,
	467, 81, 228, 64, 330, 350, -110, 399, -109, 391,
	336, -111, -400, 2, 244, -189, 467, 467, 467, 467,
	2, 381, 283, 429, 342, 418, 99, 302, 182, 395,
	-457, 2, 4, -411, -408, -223, -222, 381, 99, -221,
	-213, 457, -220, 467, 467, 467, 2, 204, 205, 301,
	300, 350, 351, 467, 467, 467, 2, 25, 58, 80,
	83, 105, 133, 153, 156, 270, -473, 236, 280, 299,
	336, 349, 380, 388, 401, -468, 368, 59, -467, 418,
	-482, 406, 114, -306, 99, 228, 157, 413, 385, 383,
	326, 161, 411, 109, 188, 416, 415, 467, 467, 25,
	58, 67, 83, 114, 133, 153, 156, -475, 280, 299,
	333, 336, 349, 380, 388, 406, 401, 2, 429, 342,
	381, 182, 99, 418, 326, 297, -81, 2, 464, 29,
	28, 353, -152, 381, 198, 2, -189, 204, 205, 2,
	467, 467, -457, 2, 204, 205, 2, 198, 2, 59,
	338, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 2, -140,
	350, 368, 167, 41, 64, 26, 298, 69, 284, 100,
	159, 182, 183, 212, 80, 81, -307, 40, 205, 204,
	-357, 382, 337, 343, 378, 399, 86, 419, 327, 441,
	302, 303, 127, 4, 99, 244, 352, 391, 228, 73,
	-481, 2, 381, -485, 2, 399, 399, 2, -485, 2,
	-485, 2, -192, 2, 399, 395, -486, 399, 438, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, -157, -159, -158, 467, 467, 467, 467, 467,
	-140, 350, 2, 64, 26, -253, -254, 410, 196, 122,
	271, -156, -158, 2, -438, -398, 2, -332, -414, -334,
	455, 456, 448, 251, 442, -345, 105, 411, 265, -413,
	-335, -347, 124, 330, -274, 8, 9, 5, 6, 7,
	-196, -378, -341, 403, 136, 255, -226, 468, 10, 464,
	-435, -158, -346, 34, 162, 57, -402, -225, -380, -388,
	-384, -385, -489, 47, 53, 52, 388, 243, 344, 345,
	362, 346, 347, 45, 421, 179, 262, 264, 190, 4,
	197, -224, -213, -432, -433, -408, -409, 189, 195, 191,
	361, 192, 193, 194, 44, 305, 147, 148, 146, 115,
	104, 103, 258, 49, 48, 46, 426, -389, 101, 391,
	392, 393, 394, 207, 208, -189, -410, 67, 91, 92,
	90, 95, 94, 96, 93, 352, 418, 58, 33, 169,
	170, 201, 256, 171, 65, -434, 372, 87, 155, 187,
	173, 200, 202, 206, 222, 225, 245, 249, 253, 275,
	277, 325, 358, -490, 427, 134, 135, 278, 291, 376,
	400, 402, 160, 221, 60, 61, -440, 306, -441, -207,
	-440, 467, 467, 469, 467, -247, -248, -249, 2, 26,
	112, 464, 2, -361, 2, -362, -366, -158, 216, -365,
	464, -363, 462, -214, 266, -436, 331, -432, -433, -196,
	-213, -225, 4, -250, 464, 466, 99, 381, 68, 182,
	-301, 464, -189, 26, 265, 395, 469, -343, 464, 265,
	154, 268, -189, 2, 2, 354, 2, 464, -110, 62,
	399, 39, 350, -320, 2, -321, -186, -187, -188, -371,
	203, 296, 304, 444, 441, -398, -469, 154, 447, 395,
	-398, -275, 466, 2, -366, 169, -214, 2, -211, -401,
	4, -408, -411, -409, -412, 67, -410, 26, 28, 29,
	30, 32, 34, 35, 36, 37, 50, 57, 58, 63,
	66, 68, 80, 86, 90, 91, 93, 92, 94, 95,
	96, 105, 107, 110, 112, 113, 117, 119, 122, 136,
	138, 151, 153, 154, 158, 161, 164, 176, 186, 196,
	198, 216, 219, 226, 229, 230, 251, 255, 261, 265,
	266, 270, 271, 288, 295, 308, 323, 341, 352, 364,
	377, 381, 389, 395, 397, 403, 410, 411, 418, 420,
	428, 432, 433, 434, 435, -413, 2, -366, 169, 2,
	-216, 169, -366, -219, 2, -406, 169, -404, 10, -403,
	5, 4, -408, -411, -409, 2, -198, -189, 2, -210,
	-401, 2, -229, 169, -214, -215, -219, -96, -406, 464,
	395, 469, -265, -222, -223, -258, -189, 466, -332, 2,
	-99, 2, -332, 169, 2, -99, 169, 2, -332, 169,
	2, -99, 169, 2, 2, 2, 401, 2, 83, 169,
	-189, 381, 98, 2, 317, -474, 333, 405, 429, 2,
	2, 2, 2, 2, 2, 2, 381, -203, 2, -189,
	151, 342, -483, 306, -406, 169, 2, -406, 169, 2,
	-217, -219, -217, 182, 199, -198, 169, 2, 385, 383,
	385, 383, 154, 2, 198, 2, 198, 2, -367, 2,
	-368, -362, -214, 462, 2, 2, 2, 2, 2, 169,
	-189, 381, 98, 2, 214, 2, 2, 2, 2, 2,
	2, 2, 2, 2, -267, 169, 2, -214, -267, 169,
	2, -267, 169, 2, -230, 169, 2, -229, -198, 169,
	2, -407, 169, 2, -406, -407, 169, 2, -375, 2,
	-374, -403, 425, -81, 464, -81, 464, 350, 464, -406,
	-214, -214, -332, -99, 154, -332, -99, -152, 151, 2,
	99, 381, -140, 2, 151, 420, 2, 8, 2, -406,
	337, 303, 143, 2, 354, 2, 355, 64, -307, 441,
	64, 154, 2, 154, 2, -291, 2, 435, -460, 2,
	265, 154, 2, 154, 2, 154, 2, 154, 2, 154,
	2, 300, 351, 205, 2, -99, 432, -332, 432, 2,
	398, 213, 128, 154, -291, 2, 154, 2, 154, 2,
	5, 2, 203, 296, 369, 2, -214, -477, 2, 381,
	429, 342, 2, 2, 76, 77, 154, 2, 154, 2,
	154, 441, 2, -284, -366, -319, -320, -319, 395, -194,
	-253, -254, -140, 354, 2, -163, -282, -165, 151, -309,
	-310, -166, 226, 138, 261, -167, -290, 26, 112, -290,
	-290, 51, 465, 465, 11, 12, 66, 38, 455, 456,
	457, 458, 149, 459, 460, 453, 454, 452, 445, 446,
	450, 209, 210, 82, 449, 447, 75, 234, 332, 139,
	140, 141, 142, 314, 180, 31, 181, 14, 15, 16,
	30, 270, 225, 442, 173, 358, 448, 17, 18, 19,
	200, 202, 253, 43, 176, -195, -231, -332, -332, -332,
	-332, -332, 277, 464, -280, -327, 462, -158, 464, 464,
	464, 5, -397, 8, -158, -332, -345, 465, -272, 464,
	-158, -345, -340, 464, 330, 462, 464, -348, -332, 5,
	464, 466, -442, 436, -382, 464, 293, -381, 464, -381,
	-381, 430, -379, 464, 443, 437, 464, -379, 464, 464,
	151, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 430, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 469, -440, -250, 464, -276, -369,
	-332, 457, -276, -276, 265, -269, -332, 87, -294, 206,
	245, 155, 222, 325, 187, -329, 468, -329, -356, 443,
	-158, -363, -213, -158, -365, 464, -361, -356, -82, -397,
	-68, -79, -87, -99, -112, -144, -145, 457, -214, 464,
	154, 464, 466, 154, -258, -401, -198, -214, -224, -225,
	-229, 111, -269, -457, -258, -193, 35, -342, -376, -377,
	-378, -387, -383, -386, -390, 47, 53, 52, 388, 243,
	344, 345, 362, 346, 347, 45, 421, 179, 262, 264,
	190, 4, 46, 426, -389, 197, 310, 311, 309, 313,
	312, 189, 195, 191, 361, 192, 193, 194, 44, 305,
	147, 148, 146, 115, 104, 103, 258, 49, 48, 101,
	391, 392, 393, 394, 207, 208, 427, 372, 60, 61,
	-457, -258, 151, -400, -269, 35, -320, 2, 105, -404,
	39, -487, 469, 224, -233, 233, 250, 166, 266, 439,
	259, -405, 5, 4, -341, -353, 105, 228, 197, 9,
	456, -394, 8, 455, -399, -398, 89, 466, -401, -174,
	315, -173, 23, 27, 116, 423, 129, -240, 184, 283,
	124, 365, 414, -464, -465, 335, 386, 387, 78, 259,
	315, 124, -287, -289, 35, 97, 247, 279, 54, 177,
	238, 239, 367, 431, 124, 315, -185, -437, 435, 124,
	-465, 315, -465, -176, 365, 414, -464, -465, 335, 315,
	-175, -240, 124, 468, -372, -371, -407, -96, -265, 469,
	469, -401, 457, 124, 124, 124, 124, 2, 2, 251,
	2, 2, 2, 156, -467, -475, 2, 2, 2, -214,
	169, -252, 265, -459, -266, 381, -214, -216, 169, 2,
	-219, 429, -184, -185, 251, 251, 35, 464, 2, -200,
	169, 2, -190, -189, 182, -437, 251, -367, -227, -214,
	-362, -227, 353, -207, 35, -329, -329, 124, 2, 2,
	2, -189, -177, 469, 56, 321, 124, -177, 124, -177,
	124, -177, 469, 124, -177, 124, 469, 124, 124, 465,
	469, -375, -375, -406, -150, 435, 154, 86, 464, 464,
	-152, -97, -96, -406, -459, -198, 2, -214, 2, 381,
	207, -406, -406, -406, -400, 26, 355, 2, 300, 351,
	77, 355, 2, -214, 381, 99, 182, 70, -461, 151,
	-458, 326, -457, -214, 99, -214, 99, -214, 99, -214,
	-214, 2, 2, 2, 2, 74, 74, 151, 2, 398,
	2, 398, 2, -189, -189, -189, 224, -214, 151, 381,
	182, 381, 182, 99, 381, -177, 469, -194, -163, -282,
	-400, -283, -282, -164, -163, -166, 151, 304, 415, 247,
	356, 211, -310, -309, 26, -332, -314, 145, 246, -332,
	-334, -268, 259, -157, -157, -157, -255, -358, -332, 295,
	182, -391, -376, -376, -212, -401, 391, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-332, -332, 225, 173, 358, 43, 176, -332, 395, -332,
	-332, -332, -332, 242, 251, 255, 403, 136, 412, 112,
	259, -491, 377, 37, -338, -158, -273, 464, -352, 32,
	364, 26, -345, 464, 2, -327, -332, -328, -270, -269,
	-269, 465, 428, 26, 112, 457, 2, 465, 469, 35,
	465, -332, -270, -344, -340, -269, -351, -350, 432, -302,
	-303, 440, 241, 102, 168, 240, -304, 340, -395, 8,
	-401, 457, -443, 144, 161, 8, -395, -395, 391, 391,
	-395, -395, -395, 464, 465, 2, 465, 2, 465, -332,
	2, 465, -332, 2, 465, 2, -332, -332, -332, -332,
	-332, -332, -332, -269, -296, 2, -392, -269, 4, 440,
	241, 102, 168, 240, 340, 5, -296, 2, -297, 2,
	-332, -269, -298, -333, -334, 455, 456, 448, -345, -299,
	2, -332, -270, -332, 50, 219, 397, -300, -332, 154,
	-269, -269, 2, -269, 2, -441, 35, -269, -261, 469,
	154, 35, 4, -261, -261, 464, 465, 469, -295, 165,
	237, 232, -295, -361, -294, 206, -292, 275, -292, -292,
	-356, -199, 462, 470, -401, -356, -355, -354, 35, -207,
	272, -356, -356, 466, 465, -355, 463, -455, 464, 467,
	467, 467, 467, 467, -214, 464, -269, -401, 370, 465,
	466, 200, 200, 200, 200, 331, 465, 395, 435, -81,
	267, 465, 469, -260, 34, 462, -393, 430, 464, 464,
	-303, 464, 154, -259, -469, 465, 399, -321, -232, 304,
	363, 316, 348, 379, 9, 8, 8, 469, -401, 469,
	-470, 80, 395, 68, -323, 169, 68, -415, -201, 80,
	-416, -189, 63, 411, 295, 153, -470, 80, 295, -470,
	80, 80, 353, 368, 51, -366, 38, 38, 26, -99,
	220, 154, 441, 381, 182, 395, -366, -289, -376, 97,
	238, 239, 51, -396, -394, 456, -396, 51, -396, -396,
	-396, 435, -216, -366, 395, 285, -406, 395, 469, 38,
	38, 26, -99, 220, 154, 395, -229, -199, -147, 178,
	465, -372, -222, -189, 466, -332, -99, -332, -99, 124,
	2, -483, 214, 464, -236, 251, 154, -258, -373, 198,
	469, -266, -288, -287, 251, -218, 2, -214, 124, 124,
	464, 120, 302, 2, 265, 251, -200, 169, -180, 384,
	124, -286, 420, -315, -99, 464, 105, 35, -315, -277,
	-278, -370, -279, -201, 464, -207, -189, 2, -214, -267,
	-267, -267, -229, -230, -198, -406, -407, -407, -81, -374,
	465, 465, 465, -149, 269, -148, -189, 5, -152, 420,
	-235, -324, -323, -419, -420, -415, 225, 182, 411, 199,
	137, -251, -202, -201, 98, -372, 469, -150, -150, -372,
	-372, -214, 151, 2, 2, -291, -214, -198, -229, -214,
	-258, -258, -291, -198, -291, -198, -291, -198, -99, -332,
	350, 151, 151, 466, -291, 302, 99, 381, 283, 182,
	-214, -229, -214, -229, -198, -214, -366, -283, -164, 266,
	211, 356, -312, -394, 464, -313, 330, 331, -168, 360,
	254, -267, 469, -171, 36, 110, 211, -214, 441, 121,
	-332, -332, 395, -491, 377, -338, 121, -332, 242, 255,
	403, 136, 412, 112, 259, 154, 464, -333, -333, 465,
	-271, -332, -332, 463, 472, 465, -254, 469, -253, -332,
	-269, -269, 465, 466, -269, -258, 463, 463, 469, 465,
	-349, -350, 117, -332, 395, 395, 395, 395, 464, 465,
	466, -448, 276, 464, 464, 465, 465, 469, 465, 441,
	441, 465, 465, 465, -332, 465, 465, 35, 469, 469,
	469, 465, 469, 469, 469, 465, 465, 154, 465, 465,
	-305, 288, 465, 11, 12, 455, 456, 457, 458, 149,
	459, 460, 453, 454, 452, 445, 446, 447, 75, 234,
	332, 14, 15, 16, 200, 176, -333, -333, -333, 465,
	-336, -337, 154, 151, 35, -300, -300, -300, 465, 154,
	-269, 465, 465, 464, 465, -326, -325, 433, -369, -262,
	2, -361, -209, -401, -326, -326, -269, -332, 206, 206,
	-293, 420, 265, -295, -361, -355, -397, -331, -330, 152,
	36, 110, 248, 172, -355, -207, -250, -355, -355, -401,
	-356, -356, -354, 465, -456, -397, 465, -263, -364, -436,
	-254, 466, -150, -401, -141, 5, 255, -141, -141, -141,
	-258, 24, 289, -376, 462, 463, 8, 464, -395, -395,
	-395, -258, 154, -398, -320, 409, 72, 304, 391, -398,
	-173, 315, -201, -201, -214, 251, -323, 169, -179, 251,
	-376, -208, -189, 464, 464, 211, 211, -201, -208, 211,
	169, -201, 169, -208, -208, -463, 304, 260, -332, 227,
	302, 252, -174, 315, -99, -99, -99, 464, -469, 420,
	111, -214, -229, -214, -218, 315, 249, -224, -396, -396,
	-287, 315, -216, -406, 255, -185, -198, -175, -99, -99,
	-99, 464, -199, -176, 315, -150, 154, -147, 457, -189,
	429, -189, -234, -237, -235, -201, -155, 437, 435, 124,
	-228, -214, 462, -150, -406, -214, 124, -250, -406, -406,
	2, 464, 2, -214, 124, 265, 251, -181, 118, -488,
	447, -198, -326, -262, -285, -318, 323, 265, -251, 425,
	-207, -285, -264, 469, 154, 447, 466, -251, 2, -177,
	-177, -177, -177, -177, -81, -81, -150, 469, 464, 447,
	447, 464, -406, -406, 465, 469, -214, -200, 182, 182,
	-206, -190, 465, 469, 466, 464, -150, -96, 154, -46,
	435, 381, 468, -291, -291, -291, 350, 350, -189, -210,
	-198, -214, -211, -229, 151, 151, 415, -313, -332, 231,
	-358, -172, 257, -214, 468, -332, -332, 121, 121, -332,
	-333, -333, -332, 121, 154, 464, -332, -342, 30, 30,
	465, 469, -328, -332, 465, 428, -254, -254, 465, 457,
	-401, 465, -340, 119, -332, 389, 241, 168, 240, -304,
	240, -304, -304, -395, 5, -401, 457, -449, -204, 464,
	-189, 433, -253, -395, -379, -379, 465, -391, -376, -332,
	-332, -332, -332, -332, -332, -336, -332, -391, -376, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, 112, 251,
	259, -333, -337, -336, -332, -332, -376, 465, 465, 465,
	-269, -81, -281, 161, -332, -372, 469, -281, -281, 465,
	-361, -361, 464, -332, 206, 463, 469, 471, 447, -250,
	466, -354, -355, 463, 465, 469, 465, 469, -317, 35,
	465, -401, 268, 5, 8, 462, 463, -395, 465, 465,
	465, -258, -332, 395, 395, 124, 251, 422, -421, -416,
	-332, -256, -359, -332, 464, 464, -170, 116, 353, -471,
	2, 420, 124, -177, 124, -177, 439, 464, 464, 395,
	435, -269, -332, -151, 105, -400, -465, 468, -465, 468,
	395, 395, 435, -269, 395, -407, -150, 2, 2, 2,
	465, 465, 469, -422, 35, 263, 464, 263, -214, -64,
	435, -371, -397, -216, 35, -184, 2, -308, 420, -199,
	-214, 124, -182, 218, -488, -404, -437, -254, -285, -276,
	252, 79, 465, -326, -278, -262, -332, 2, 465, -148,
	-149, -406, -406, -406, -150, -152, -152, -324, 2, 464,
	-200, -190, 464, -152, -202, 2, -407, -99, 269, -214,
	457, -291, -242, -241, 283, 259, -242, 330, 330, 266,
	465, 145, 215, -171, -199, -332, -332, 121, 30, 30,
	-332, -332, -342, 465, -332, -332, -269, 463, 5, -332,
	465, 465, -332, 465, 466, -450, -189, -332, 465, 465,
	465, 465, 469, 469, 465, 465, 465, 465, -337, 154,
	112, 259, 464, 465, 465, -339, 164, 51, -361, -339,
	-339, -293, -258, -361, -330, -199, 462, -401, -397, -364,
	464, 466, 463, 2, 462, 465, -201, -201, -323, 124,
	-423, 80, -425, 66, 137, 86, 251, 255, 411, 295,
	63, 105, 308, 35, 465, 465, 469, -171, -256, -258,
	251, 374, 105, 251, 105, 98, 406, 69, -201, -208,
	-258, -258, -214, 130, 465, 469, 447, 2, 457, 457,
	-218, -216, 130, 465, -199, -238, 185, -201, -420, -417,
	-418, 295, -424, -426, 137, 295, -99, -154, -153, -189,
	5, 2, 464, -236, 269, 463, -288, -99, 464, -189,
	265, 464, -199, -183, 217, -488, -404, -180, -311, -309,
	-316, 464, 265, -99, -254, 447, 465, 465, 98, 98,
	-256, 464, 464, -258, 98, 465, -47, -48, 182, 80,
	287, -211, 381, 182, 464, 464, -171, -332, -332, -332,
	465, -254, -401, 457, -444, 283, 465, -332, -332, -333,
	154, 464, -342, -445, 434, -332, -269, -445, -445, 465,
	-397, 2, 462, 2, -323, -208, -212, -205, -189, 137,
	169, 255, 211, 464, -333, -214, 464, 2, -479, 107,
	186, -322, -480, 85, 375, -359, -172, 465, 465, 255,
	255, -332, -376, 464, -177, -177, 465, 465, -332, 395,
	-400, 84, -398, 2, -465, -332, 395, -239, -240, 176,
	-422, 211, -205, 211, -478, 435, 465, 469, 447, 447,
	-234, -155, -65, -66, 396, -371, -256, -214, -256, 265,
	-488, -404, -181, -285, 113, -258, 80, -311, -338, -150,
	464, 464, 465, -256, -256, 465, 464, -150, 469, 26,
	464, 26, 464, -214, -229, -269, -269, 465, -254, 51,
	465, 465, -333, -342, 465, -446, -447, -204, 463, 2,
	-425, -205, 251, -332, -191, 464, -332, 186, 108, 174,
	-238, 464, 308, -197, 66, -256, 464, 464, 464, 447,
	154, 464, -155, 281, 464, 98, 247, -153, -335, -335,
	465, 35, -66, 9, 465, -308, 465, -214, -404, -182,
	415, 252, 465, -208, -285, -407, -407, -322, 465, 465,
	-407, -48, -258, -258, 465, 465, -451, 302, 331, 163,
	-269, 465, 469, 35, 124, 465, -427, 235, -189, 465,
	108, 174, -239, -258, -214, -466, 420, -212, 465, -244,
	-243, -241, -246, -245, -241, -269, -398, 84, 281, -269,
	-214, -257, -360, -201, 98, -238, -99, -322, 464, -322,
	464, -183, 353, -325, 465, 465, -238, -322, 465, 465,
	465, 465, -452, -453, 43, 408, 89, -332, -452, -452,
	-447, -449, 137, -428, -431, -430, 265, 359, 155, 282,
	465, 374, 431, -479, 465, -250, -332, -238, 465, 469,
	425, 465, 469, 425, 465, 154, 465, 464, 465, 469,
	-239, -478, -238, -256, -238, -256, -277, -150, -150, -239,
	-238, -150, -454, 123, -453, 292, 150, 330, 292, 150,
	-454, -454, -205, -430, 265, -431, 265, 415, 109, -427,
	-243, 176, -245, 154, 281, -258, -360, -155, -239, 465,
	-239, 465, -326, -239, 89, 161, 390, 247, 30, -429,
	247, 321, 56, 353, -429, -428, 464, 464, 465, -484,
	433, -322, -484, -322, 330, 273, -453, 22, 255, 105,
	-479, -269, -269, -178, 56, 321, 2, -238, -238, 465,
	465, -239, -239, -239, 395, -484, -484, 464, -269, 465,
	-239,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 943, 945, 947, 949, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1034, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 961, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1089, 329, 331, 333, 335, 337, 0, -2,
	1101, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1065, 1067,
	1069, 1071, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 835, 1707, 1721, 1722, 1723,
	1726, 1727, 1728, 1729, 1730, 1731, 2074, 2154, 2155, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 0, 426, 424, 1701, 427,
	1905, 429, 431, 316, 317, 318, 319, 320, 321, 0,
	441, 435, 440, 442, 444, 445, 446, 447, 421, 419,
	0, 441, 1753, 439, 941, 942, 936, 937, 1939, 971,
	460, -2, -2, -2, 2042, -2, 492, -2, 499, 2045,
	1941, 504, 0, 506, -2, 509, 944, 946, 948, 27,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, -2, -2, -2, -2, 0, 0, 1790, 1676,
	1723, 1679, 1674, 192, 194, 196, 197, 0, 0, 0,
	0, 0, 0, 221, 223, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 741, 742,
	889, 890, 911, 0, 0, 0, 0, 324, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 0, 0, 0, 254, 362, 363, 0, 1090,
	1090, 0, 0, 0, 0, 172, 163, 0, 0, 725,
	449, 451, 0, 158, 0, 0, 940, 0, 174, 0,
	0, 465, 467, 469, 534, 536, 538, 540, 542, 544,
	547, 549, 551, 553, 555, 557, 559, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, 582, 584, 585,
	0, 0, 0, 0, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 0, 588, 590, 591, 592, 0, 643, 660,
	0, 878, 1091, 973, 951, 964, 973, 953, 954, 955,
	956, 957, 962, 963, 966, 0, 958, 959, 960, 30,
	32, 34, 36, 38, 40, 42, 278, 280, 282, 284,
	288, 290, -2, 1063, 1064, 330, 332, 334, 336, 338,
	452, 0, 454, 0, 589, -2, 0, 1095, 1095, 1095,
	0, 0, 1064, 1062, 0, 457, 458, 513, 514, 1332,
	0, 0, 0, 0, 0, 1573, 1416, 0, 515, -2,
	1447, 1449, 2021, 2042, 1572, 1451, 1452, 1453, 1454, 1455,
	0, 0, 1458, 1459, 1460, 1461, 1462, 0, 1464, 0,
	1468, 1469, 1470, 0, 2026, 1653, 1719, -2, 1235, 1236,
	1237, 1238, 1239, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	2032, 1715, 0, 1539, 1484, -2, 1740, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1799,
	-2, -2, -2, -2, -2, -2, -2, 1291, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 2056, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 0, 2010, 2027,
	2028, 2033, 2035, 2029, 2018, 1507, -2, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 1292, -2, 2022, 2023, 2038, 2039, 2044,
	2049, 2050, 2025, 2034, -2, -2, 1081, 1914, 1084, 835,
	1082, 1066, 1068, 0, 1070, 0, 0, 0, 1075, 1098,
	1096, 0, 1136, 1079, 1080, 1154, 1154, 1178, 0, 1159,
	0, 1178, 1090, 1204, 0, 1165, 1934, 1485, 1486, 0,
	1723, 1720, -2, 0, 0, 0, 0, 0, 0, 0,
	422, 0, 428, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 462, 463, 0, 487, 0, 491, 2017,
	-2, 1758, 1954, -2, 495, 974, 978, 979, 980, 981,
	0, 0, 0, 0, 0, 501, 0, 0, 488, 489,
	507, 510, 0, 51, 0, 2027, 1204, 53, 0, 1691,
	1745, 1746, 1747, 1748, 1749, 2056, 2073, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 55, 0, 2027, 58,
	0, 2027, 0, -2, 62, 1088, 2027, 175, 176, 1736,
	1737, 1741, 1742, 1743, 1744, 65, 0, 1697, 67, 0,
	1694, 76, 0, 2027, 0, 1673, -2, 1191, 159, 0,
	0, 0, 717, 1670, 1675, 718, 1680, 0, 198, 199,
	200, 201, 202, 2027, 204, 205, 0, 207, 208, 2027,
	210, 211, 0, 213, 229, 230, 0, 232, 0, 2027,
	0, 0, 0, 238, -2, 255, 0, 252, 0, 242,
	243, 245, 246, 247, 248, 249, 0, 294, 292, 1702,
	0, 0, 0, 895, -2, 2027, 881, 886, 2027, 888,
	900, 1705, 0, -2, 0, 1088, 2027, 988, 745, 746,
	747, 748, 0, 313, 0, 1001, 0, 1003, 0, 1024,
	1210, 1154, 1154, 0, 256, 257, 258, 259, 260, 2027,
	0, 0, 0, 265, 0, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 151, 2027, 341, 360, 151, 2027,
	344, 151, 2027, 347, 151, 2027, 350, 1668, 151, 2027,
	353, 354, 2027, 356, 177, 357, 2027, 359, 0, -2,
	415, 1709, -2, 365, 0, 366, 0, -2, 0, 189,
	0, 0, 723, 724, 0, 938, 939, 0, 0, 472,
	0, 0, 586, 587, 0, 0, 597, 598, 599, 600,
	1942, 1912, 1815, 604, 0, 607, 610, -2, 0, 0,
	0, 0, 614, 0, 619, 620, 621, 0, 722, 623,
	0, 0, 625, 0, 629, 0, 632, 0, 634, 0,
	636, -2, -2, -2, 647, -2, 0, 651, 0, 653,
	0, 0, 0, 0, 668, 669, 0, 674, 0, 677,
	678, 679, 0, 681, 682, 683, 684, 0, 686, 687,
	-2, -2, 691, 693, 0, 700, 0, 704, 0, 708,
	0, 593, 594, 151, 1208, 950, -2, 952, 0, 968,
	-2, 0, 453, 0, 456, 1116, 1049, 1046, 0, 1113,
	1114, 1050, 0, 0, 0, 1057, 0, 1093, 1094, 0,
	0, 0, 1036, 1037, 0, 0, 0, 0, 1578, 1579,
	1580, 1581, 1582, 1583, 1586, 1587, 1584, 1585, 1588, 1589,
	0, 0, 0, 0, 0, 1590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1591, 1592, 1593,
	0, 0, 1595, 0, 1597, 0, 0, 0, 0, 0,
	0, 1395, 1397, 1661, 0, 0, 1594, 1337, 1338, 1339,
	1374, 1375, 0, 0, 1448, 1658, 1657, 1450, 0, 1609,
	0, 1457, 1463, 1687, -2, 0, 1573, 1604, 0, 0,
	1471, 1472, 1473, 0, 0, 1609, 0, 0, 1652, 1329,
	0, 0, 1541, 0, 1271, 0, 1272, 1273, 0, 1274,
	1275, 1288, 1301, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1293, 0, 0, 0, 1633, -2,
	0, 0, 0, 0, 0, 1083, 0, 0, 1140, 1662,
	1666, 1667, 1140, 1140, 0, 0, 1610, 1201, 1201, 0,
	0, 1197, 1197, 1197, 1195, 1178, 0, 1178, 1188, 0,
	1178, 1178, 0, -2, 1159, 0, 0, 1188, 0, 1172,
	403, 405, 407, 409, 410, 411, 413, 1205, 1206, 0,
	0, 0, 0, 0, 0, 1724, 0, 0, 0, 1711,
	0, 0, 0, 0, 433, 443, 1090, 0, 1612, 1227,
	1230, 1231, 1232, 1233, 1234, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, -2, 1289, 1291, 1312, 1278, 1279, 1280, 1281,
	1282, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1284, 0, 1259, 1259, 1259, 1276, 1277, 1300,
	1311, 1303, 1311, 1307, 1228, 1229, 1294, 1295, 1296, 1297,
	0, 437, 0, 0, 0, 0, -2, 497, 502, 503,
	0, 0, 976, 0, 982, 524, 525, 526, 984, 985,
	0, 500, 527, 528, 529, 530, 531, 532, 0, 852,
	0, 854, 1682, 0, 498, 517, 505, 0, 511, 77,
	933, 116, 0, 933, 933, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 101, 112, 89, 90, 0, 0,
	0, 0, 59, 860, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 922, 0, 1087, 0,
	100, 0, 95, 79, 0, 0, 0, 102, 114, 0,
	142, 144, 0, 0, 180, 1190, 0, 1191, 716, 0,
	0, 1724, 1678, 0, 0, 0, 0, 231, 233, 0,
	235, 236, 237, 0, 894, 0, 244, 241, 285, 809,
	2027, 0, 0, 311, 306, 0, 308, 859, 2027, 857,
	1706, 0, 879, 882, 0, 0, 0, 0, 901, 0,
	2027, 906, 1693, 1732, 1733, 990, 0, 315, 0, 1004,
	1006, 0, 0, 1211, 0, 1213, 1214, 0, 262, 263,
	264, 0, 339, 0, 149, 150, 0, 342, 0, 345,
	0, 348, 0, 0, 351, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 1191, 161, 189, 189, 1191, 474, 1191, 476, 0,
	0, 601, 602, 603, 605, 606, 608, 609, -2, -2,
	701, 611, 612, 671, 0, 0, 0, 670, 622, 0,
	710, 1930, 720, 671, 1790, 671, 1790, 671, 1790, 633,
	635, 638, 663, 646, 650, 0, 0, 0, 655, 0,
	657, 0, 659, 671, 672, 675, 680, 685, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 967, 1116, 1049,
	455, 1040, 1115, 1041, 1048, 1051, 0, 0, 1053, 0,
	1055, 0, 1111, 1112, 1119, 1120, 1126, 1129, 1130, 1122,
	1332, 1059, 0, 1076, 1077, 1078, 1102, 1103, 920, 0,
	2154, 1333, 1222, 1334, 1335, 1690, 0, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, -2, -2, -2,
	-2, -2, -2, -2, -2, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, -2, -2, -2, 1372,
	1373, -2, 1596, 1598, 0, 1661, 0, -2, 0, -2,
	-2, -2, -2, 1392, 0, 1394, 1399, 1401, 1403, 0,
	0, 0, 0, 1660, 1413, 1644, 1645, 0, 0, 1575,
	1576, 1577, 1398, 0, 1417, 1659, 1656, 0, 0, 1608,
	1101, 1475, 0, 0, 0, 0, 1482, 1467, 1606, 0,
	1605, 0, 0, 0, 1616, 0, 1651, 1647, 0, 1688,
	1328, 1315, 1316, 1317, 1318, 1319, 1320, 1330, 0, 1685,
	1712, 1718, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 1509, 1510, 1511, 1512, 0,
	1514, 1515, 0, 1517, 1518, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 1619, -2, -2,
	-2, -2, -2, -2, -2, -2, 0, 1523, 0, 1525,
	1610, 1630, 0, 0, 1418, 0, 0, 0, 1573, 0,
	1528, 1610, 1638, 0, 0, 0, 0, 0, 1610, 0,
	1643, 0, 1535, 0, 1537, 1085, 0, 0, 1217, 0,
	0, 0, 1665, 1217, 1217, 0, 1135, 0, 0, 1198,
	1199, 1200, 0, 0, 1201, 0, 1192, 1196, 1193, 1194,
	1188, 1151, 0, 0, 1692, 1188, 1157, 1187, 0, 835,
	1177, 1188, 1188, 0, -2, 1161, 1178, 0, 0, 404,
	406, 408, 412, 414, 0, 0, 1101, -2, 189, 834,
	0, 0, 0, 0, 0, 423, 425, 0, 0, 417,
	0, 420, 0, 1218, 1221, 0, 0, -2, 0, 0,
	1313, 0, 0, 0, 0, 490, 0, 975, 983, 0,
	521, 0, 523, 0, 853, 1684, 1683, 0, 512, 0,
	0, 0, 0, 932, 120, 2027, 0, 153, 0, 0,
	803, 1698, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 91,
	0, 0, 0, 0, 0, 0, 0, 861, 862, 864,
	871, 873, 0, 867, 1686, 0, 868, 0, 870, 872,
	874, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 88, 92, 0, 0, 0, 0, 1672, 189, 0,
	160, 180, 1671, 1681, 0, 203, 206, 209, 212, 0,
	239, 0, 0, 751, 728, 0, 0, 293, 189, 0,
	0, 307, 855, 858, 0, 835, 893, 1704, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 2027, 992, 998,
	0, 1217, 0, 1022, 1007, 0, 0, 0, 1022, 1026,
	1027, 1029, 1030, 0, 0, 1212, 0, 266, 361, 151,
	151, 151, 1669, 151, 151, 178, 355, 358, 364, 416,
	1090, 1090, 189, 187, 1890, 185, 182, 184, 0, 0,
	0, 752, 754, 755, 756, 757, 0, 1733, 0, 1844,
	1733, 0, 1010, 1012, 0, 189, 0, 0, 305, 473,
	478, 595, 0, 640, 665, 613, 615, 616, 617, 0,
	721, 719, 624, 671, 627, 671, 630, 671, 649, 652,
	654, 0, 0, 0, 667, 0, 0, 0, 0, 0,
	0, 0, 705, 706, 707, 709, 1209, 1044, 1045, 1047,
	0, 1056, 0, 1124, 0, 1123, 1127, 1128, 1052, 0,
	1061, 1058, 0, 1110, 918, 919, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1414, 0, -2, 1393, 1396,
	1400, 1402, 1404, 0, 0, 0, 0, 0, 0, 1599,
	0, 1601, 1415, 1654, 1657, 1571, 0, 0, 1100, 1101,
	1101, 0, 1481, 0, 1607, 0, 1614, 1615, 0, 1474,
	0, 1648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 1283, 1257, 0, 1311, 1309,
	1310, 1304, 1311, 1308, 0, 1513, 1516, 0, 0, 0,
	0, 1502, 0, 0, 0, 1506, 1520, 0, 1522, 1524,
	0, 0, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 1423, 1527,
	1636, 1637, 0, 0, 0, 0, 0, 0, 1533, 0,
	1642, 1534, 1536, 1090, 1137, 1132, 1216, 0, 1663, 1191,
	1139, 1141, 1664, 1695, 1132, 1132, 0, 1611, 0, 0,
	1182, 0, 0, 0, 1184, 1155, 0, 0, 1149, 0,
	1145, 1146, 1147, 1148, 1156, 835, 1186, 1158, 1162, 1712,
	0, 1188, 0, 1173, 0, 1175, 1207, 0, 1167, 1170,
	0, 0, 190, 1725, 214, 218, 219, 215, 216, 217,
	432, 0, 0, 1613, 0, 1223, 0, 0, 0, 0,
	0, 436, 0, 486, -2, 519, 520, 522, 0, 518,
	117, 933, 0, 0, 924, 0, 122, 2027, 131, 0,
	780, 0, 1696, 0, 0, 0, 0, 935, 0, 0,
	2027, 151, 2027, 151, 134, 137, 0, 141, 139, 0,
	0, 771, 78, 933, 81, 85, 93, 0, 0, 0,
	99, 0, 0, 0, 926, 0, 865, 866, 869, 875,
	60, 0, 928, 884, 885, 923, 921, 143, 83, 87,
	94, 0, 930, 80, 0, 154, 0, 189, 1677, 0,
	0, 0, 0, 0, 750, 820, 0, 0, 0, 0,
	299, 295, 0, 304, 310, 309, 0, 0, -2, 887,
	896, 0, 898, 910, 0, 0, 0, 994, 998, 0,
	997, 1088, 1101, 314, 999, 1022, 0, 0, 0, 1009,
	1005, 1002, 1217, 0, 0, 0, 0, 0, 261, 340,
	343, 346, 349, 352, 367, 368, 164, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 1733, 1733,
	0, 1700, 0, 0, 0, 0, 157, 162, 0, 475,
	0, 0, 0, 626, 628, 631, 656, 658, 671, 694,
	695, 766, 0, 766, 0, 0, 1054, 0, 0, 1060,
	1104, 1105, 0, 920, 0, 1336, 1377, 0, 0, -2,
	0, 0, 1381, 0, 0, 0, -2, 0, 0, 0,
	1600, 1602, 0, 1656, 1476, 0, 0, 0, 1480, 1465,
	1466, 1574, 1617, 1646, 1650, 0, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 0, 1689, 1713, 1717, 1547, 1548, 1552,
	1703, 0, 0, 0, 1302, 1306, 1487, 0, 0, 0,
	0, 0, 0, 0, 1618, 1629, 1631, 1419, 1420, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, -2,
	-2, -2, 1437, 1438, 1439, -2, -2, -2, 0, 0,
	0, 1632, 1634, 1635, 1639, 1640, 0, 1530, 1531, 1532,
	1641, 0, 1134, 0, 1215, 1138, 0, 1134, 1134, 1097,
	1180, 0, 0, 1203, 0, 1152, 0, 1153, 0, 1185,
	0, 1160, 1163, 1164, 1174, 0, 1166, 0, 1169, 0,
	1476, -2, 434, 418, 0, 0, 1225, 0, 1286, 1290,
	1314, 438, 1189, 0, 0, 0, 0, 152, 778, 802,
	0, 0, 913, 920, 0, 0, 124, 0, 0, 0,
	132, 0, 0, 129, 0, 136, 140, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 103, 0, 104, 0,
	0, 0, 0, 0, 0, 179, 155, 234, 892, 240,
	760, 808, 0, 810, 0, 729, 0, 0, 809, 291,
	0, 298, 0, 859, 0, 880, 897, 0, 0, 0,
	0, 0, 996, 998, 0, 989, 990, 1118, 1000, 1020,
	-2, 1019, 0, 1101, 1028, 1025, 1031, 1032, 0, 186,
	0, 181, 183, 0, 167, 0, 0, 753, 758, 0,
	0, 0, 0, 0, 1011, 1013, 0, 173, 0, 596,
	618, 666, 696, 765, 0, 0, 698, 0, 0, 1121,
	1125, 1108, 1109, 1106, 920, 1379, 1383, 0, 0, 0,
	1385, -2, 0, 1407, -2, -2, 1603, 1655, 1456, 1101,
	1477, 1479, 1649, 1331, 0, 1554, 1551, 0, 1538, 1258,
	1497, 1498, 0, 0, 1501, 1503, 1504, 1505, 1628, 0,
	0, 0, 0, 1529, 1086, 1543, 0, 0, 1142, 1543,
	1543, 1181, 0, 1183, 1150, 1143, 0, 1713, 1176, 1168,
	0, 0, 1219, 1224, 0, 1285, 118, 119, 121, 0,
	779, 0, 782, 0, 0, 0, 0, 789, 790, 0,
	0, 0, 0, 0, 824, 833, 0, 1110, 0, 0,
	0, 126, 146, 0, 0, 934, 0, 0, 151, 151,
	0, 0, 925, 0, 0, 0, 0, 106, 0, 0,
	927, 929, 0, 0, 931, 768, 0, 820, 812, 813,
	814, 0, 819, 821, 0, 0, 738, 0, 734, 0,
	0, 731, 751, 728, 0, 296, 856, 891, 0, 909,
	0, 0, 0, 986, 998, 0, 991, 992, 1022, 1117,
	0, 0, 0, 1008, 1118, 0, 188, 189, 0, 0,
	0, 0, 0, 0, 0, 189, 477, 479, 0, 0,
	485, 764, 0, 0, 0, 0, 1107, 1387, -2, -2,
	1408, 0, 1714, 1716, 1101, 0, 1540, 0, 0, -2,
	0, 0, 0, 1072, 0, 1133, 1131, 1073, 1074, 1202,
	0, 1171, 0, 1226, 123, 0, 783, 784, 1699, 786,
	0, 788, 791, 0, 793, 1735, 0, 797, 804, 825,
	0, 760, 0, 830, 831, 914, 915, 806, 0, 125,
	127, 145, 917, 0, 128, 135, 0, 0, 82, 0,
	0, 1784, 109, 107, 105, 84, 0, 728, 767, 0,
	811, 0, 822, 823, 736, 0, 730, 0, 0, 0,
	0, 0, 297, 300, 0, 303, 0, 910, 0, 0,
	0, 993, 994, 312, 0, 0, 0, 1022, 1033, 166,
	0, 0, 833, 0, 0, 801, 0, 171, 0, 481,
	0, 483, 0, 697, 699, 0, 0, 1478, 1558, 0,
	1499, 1500, -2, 0, 1445, 1542, 1544, 0, 1144, 1220,
	781, 785, 0, 0, 839, 0, 0, 0, 828, 829,
	768, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 0, 739, 0, 735, 732, 733,
	760, 0, 301, 302, 833, 0, 833, 0, 995, 996,
	0, 1015, 1016, 1018, 1023, 0, 0, 760, 833, 800,
	0, 480, 0, 0, 702, 703, 0, 0, 0, 0,
	1553, 1446, 0, 0, 0, 792, 844, 0, 0, 0,
	826, 827, 824, 0, 835, 130, 0, 916, 760, 0,
	772, 0, 0, 775, 0, 0, 110, 1784, 108, 0,
	0, 0, 816, 818, 740, 768, 738, 760, 0, 760,
	0, 987, 0, 1017, 189, 189, 768, 760, 189, 482,
	484, 1550, 1570, 1559, -2, 1990, 1787, 0, 1570, 1570,
	1545, 1546, 0, 794, 840, 841, 0, 836, 837, 838,
	1734, 795, 796, 805, 832, 839, 147, 133, 769, 0,
	0, 770, 0, 0, 113, 0, 115, 0, 815, 0,
	728, 737, 768, 0, 768, 0, 1217, 168, 169, 798,
	768, 170, 1555, 0, 0, 1561, 1562, 1563, 1564, 1565,
	1556, 1557, 787, 842, 0, 843, 0, 0, 0, 844,
	773, 0, 776, 0, 111, 0, 817, 727, 907, 833,
	907, 833, 1014, 799, 0, 1567, 1568, 0, 0, 845,
	0, 848, 849, 0, 846, 824, 0, 0, 763, 902,
	0, 760, 904, 760, 1566, 1569, 1560, 847, 850, 851,
	807, 0, 0, 759, 761, 762, 908, 768, 768, 768,
	0, 907, 907, 774, 0, 903, 905, 0, 0, 768,
	777,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 453, 3, 459, 454, 3,
	464, 465, 457, 455, 469, 456, 466, 458, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 472, 3,
	445, 447, 446, 450, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 462, 3, 463, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 470, 452, 471, 448,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 449, 57788, 451, 57789, 461,
	57790, 467, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1110
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1123
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1124
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1130
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1148
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1229
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1240
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1259
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1263
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1274
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1286
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1305
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1337
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1341
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1345
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1361
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1370
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1399
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1434
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1441
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1453
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1460
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1468
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1477
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1488
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1496
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1507
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1517
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1527
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1536
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1547
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1553
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1579
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1584
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1636
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1704
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Interleave: sqlDollar[9].union.interleave(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1745
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1752
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1761
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1775
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1787
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1808
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1852
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1855
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1881
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1885
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1889
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1895
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1905
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1942
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1947
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1951
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1957
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1962
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1967
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1972
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1977
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2000
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2004
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2008
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2026
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2036
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2054
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2068
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2072
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2078
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2092
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2093
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2094
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2095
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2118
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2137
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2164
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2173
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2183
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2187
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2190
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2202
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2215
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2221
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2226
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2238
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2239
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2241
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2242
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2270
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2273
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2274
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2277
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2278
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2306
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2309
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2310
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2311
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2312
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2348
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2357
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2364
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2391
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2411
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2419
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2429
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2450
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2454
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2468
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2481
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2482
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2508
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2509
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2514
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2554
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2600
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2607
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2630
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2634
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2637
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2641
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2646
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2686
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2706
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2707
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2709
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2711
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2713
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2721
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2722
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2723
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2730
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2732
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2736
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2737
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2763
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2771
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2779
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2796
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2804
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2812
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2837
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2857
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2861
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2868
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2888
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2892
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2904
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2908
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2936
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2937
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2974
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2982
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2983
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2984
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2990
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3042
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3101
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3104
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3139
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3156
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3159
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3161
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3164
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3168
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3187
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3194
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3199
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3204
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3209
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3223
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3230
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3234
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3251
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3298
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3312
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3323
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3340
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3362
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3363
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3365
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3368
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3387
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3389
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3422
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3426
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3437
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3445
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3468
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3476
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3493
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3497
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3505
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3507
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3514
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3525
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3548
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3556
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3559
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3572
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3591
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3593
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3597
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3606
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3613
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3624
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3626
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3629
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3637
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3640
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3645
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3649
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3663
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3667
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3670
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3680
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3682
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3690
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3698
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3710
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3712
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3715
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3717
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3721
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3724
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3736
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3738
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3741
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3759
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3769
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3772
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3775
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3776
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3783
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3797
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3801
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3804
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3811
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3815
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3823
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3828
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3833
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3837
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3845
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3849
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3853
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3869
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3880
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3884
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3892
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3900
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3908
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3915
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3937
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3945
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3951
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3960
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3965
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3972
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3976
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3983
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3988
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4108
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4116
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4155
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4159
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4164
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4177
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4200
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4212
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4248
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4262
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = nil
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4282
		{

			sqlVAL.union.val = nil
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4288
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4293
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4309
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4319
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4331
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4344
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4345
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4346
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4364
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4370
		{
			sqlVAL.union.val = true
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4371
		{
			sqlVAL.union.val = true
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4373
		{
			sqlVAL.union.val = true
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4374
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4404
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4408
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4424
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4429
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.str = ""
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4524
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4587
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4591
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4603
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4607
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4611
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4625
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 798:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4636
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4658
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4668
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4680
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4697
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4718
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4742
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4752
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4767
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4811
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4827
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4832
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4833
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4834
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4835
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4836
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4837
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4888
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4900
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4909
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4931
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4937
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4945
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4949
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4953
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4957
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4971
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4996
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5005
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5013
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5024
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5027
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5028
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5029
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5039
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5042
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5044
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5046
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5049
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5052
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5054
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5067
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5075
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5082
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5087
		{
			sqlVAL.union.val = nil
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5093
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5097
		{
			sqlVAL.union.val = tree.DNull
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5114
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5119
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5120
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5128
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5137
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5138
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5141
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5142
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5148
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5150
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5152
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5154
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5156
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5158
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5174
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5188
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5203
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5217
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5231
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5234
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5235
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5254
		{
			sqlVAL.union.val = false
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5260
		{
			sqlVAL.union.val = true
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5264
		{
			sqlVAL.union.val = false
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5270
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5283
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5306
		{
			sqlVAL.str = ""
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5310
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5314
		{
			sqlVAL.union.val = tree.Descending
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5318
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5331
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[6].union.expr(), IfExists: true}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5341
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5347
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5355
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5361
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5369
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5375
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5383
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5392
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5393
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5396
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5408
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5418
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5430
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5438
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5441
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5445
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5446
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5447
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5466
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5471
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5489
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5498
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5499
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5500
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5508
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5515
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5518
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5519
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5523
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5535
		{
			sqlVAL.str = ""
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5565
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5578
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5580
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5584
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5589
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5593
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5603
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5609
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 986:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5649
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5653
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5657
		{
			sqlVAL.str = ""
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5667
		{
			sqlVAL.str = ""
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.str = ""
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.str = ""
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5692
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5693
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5705
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5719
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5737
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5741
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5750
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5755
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5761
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5775
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5799
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5807
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5816
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5817
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5825
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5830
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5863
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5869
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5895
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5948
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5952
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5967
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5983
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6019
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6028
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6034
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6038
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6040
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6045
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6080
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6081
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6082
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6131
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6143
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6180
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6187
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6203
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6214
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6224
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6232
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6233
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = nil
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6246
		{
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6247
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = true
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = false
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = false
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6265
		{
			sqlVAL.union.val = true
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6276
		{
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6277
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6281
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6307
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6328
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6333
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6345
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6349
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6362
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6382
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6395
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6426
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6440
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6441
		{
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6444
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6445
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6472
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6476
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6498
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6500
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6515
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6517
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6537
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6547
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6558
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6570
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6589
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6597
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6628
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6638
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6673
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6684
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6714
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6747
		{
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6749
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = nil
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = true
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = false
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6818
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6822
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6829
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.str = tree.AstFull
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.str = tree.AstRight
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.str = tree.AstInner
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6867
		{
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.str = tree.AstHash
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.str = ""
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6929
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6934
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6952
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6958
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6964
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6974
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7003
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7016
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7024
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7043
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7053
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = types.String
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = types.Name
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7106
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = types.INet
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.Oid
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7155
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7186
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7194
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = nil
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = types.Int2
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = types.Int2
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = types.Int4
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = types.Int
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = types.Int
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = types.Int
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = types.Float4
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = types.Float4
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = types.Float
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = types.Float
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7261
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7269
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7277
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = types.Bool
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = types.Bool
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = types.RegType
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7318
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = types.Float
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7337
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7343
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7365
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = types.String
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = true
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = false
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = types.Date
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7414
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7422
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7436
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7445
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7453
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7470
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = true
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = false
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = false
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = types.Interval
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7494
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7551
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7593
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = nil
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7623
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7683
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7736
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7927
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7929
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7993
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8015
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8209
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8214
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8240
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8249
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8288
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8299
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8300
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8315
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8326
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8438
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8443
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8452
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8461
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8466
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8471
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8476
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8481
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8491
		{
			return unimplemented(sqllex, "treat")
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8512
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8517
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8522
		{
			return unimplemented(sqllex, "within group")
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8523
		{
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8558
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8566
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8581
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.str = ""
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8617
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8633
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8647
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8660
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8716
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8728
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8757
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = tree.Any
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = tree.Some
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = tree.All
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8783
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8784
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = tree.Div
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8786
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8787
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8790
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8791
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = tree.LT
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8793
		{
			sqlVAL.union.val = tree.GT
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8795
		{
			sqlVAL.union.val = tree.LE
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8796
		{
			sqlVAL.union.val = tree.GE
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8797
		{
			sqlVAL.union.val = tree.NE
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = tree.Like
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8803
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8804
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8827
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8831
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8845
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8856
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8860
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8870
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8877
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8903
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8907
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8923
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8927
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8950
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8954
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8958
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8971
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8975
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8992
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8996
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9000
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9004
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9008
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9014
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9026
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9030
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9034
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9040
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9052
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9069
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9079
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9086
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9092
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9096
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9103
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9109
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9118
		{
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9119
		{
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9123
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9133
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9142
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9146
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9150
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9158
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9168
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9191
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9199
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9222
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9231
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9235
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9239
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9243
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9249
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9261
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9265
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9274
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9285
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9294
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9302
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9314
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9411
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9418
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9422
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9426
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9440
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9444
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9448
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9461
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9479
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9492
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9499
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9524
		{
			sqlVAL.str = ""
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9530
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9534
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
