// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:641
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10360

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1128,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	195, 955,
	207, 955,
	222, 250,
	315, 250,
	324, 757,
	352, 250,
	361, 757,
	397, 757,
	421, 250,
	446, 757,
	-2, 0,
	-1, 78,
	222, 254,
	-2, 0,
	-1, 79,
	114, 1128,
	201, 1128,
	431, 1128,
	432, 1128,
	-2, 0,
	-1, 91,
	127, 1102,
	144, 1102,
	157, 1102,
	204, 1102,
	234, 1102,
	276, 1102,
	286, 1102,
	426, 1102,
	-2, 1073,
	-1, 123,
	134, 666,
	221, 666,
	318, 646,
	366, 646,
	414, 666,
	-2, 0,
	-1, 124,
	4, 1130,
	21, 1130,
	22, 1130,
	23, 1130,
	24, 1130,
	25, 1130,
	27, 1130,
	28, 1130,
	34, 1130,
	39, 1130,
	40, 1130,
	41, 1130,
	42, 1130,
	43, 1130,
	44, 1130,
	45, 1130,
	47, 1130,
	48, 1130,
	49, 1130,
	51, 1130,
	52, 1130,
	53, 1130,
	54, 1130,
	55, 1130,
	58, 1130,
	59, 1130,
	60, 1130,
	61, 1130,
	63, 1130,
	64, 1130,
	65, 1130,
	69, 1130,
	70, 1130,
	71, 1130,
	72, 1130,
	73, 1130,
	74, 1130,
	75, 1130,
	78, 1130,
	79, 1130,
	80, 1130,
	81, 1130,
	83, 1130,
	85, 1130,
	86, 1130,
	87, 1130,
	89, 1130,
	91, 1130,
	92, 1130,
	100, 1130,
	101, 1130,
	102, 1130,
	103, 1130,
	105, 1130,
	106, 1130,
	107, 1130,
	109, 1130,
	110, 1130,
	111, 1130,
	113, 1130,
	114, 1130,
	116, 1130,
	119, 1130,
	120, 1130,
	121, 1130,
	123, 1130,
	125, 1130,
	126, 1130,
	128, 1130,
	129, 1130,
	130, 1130,
	131, 1130,
	132, 1130,
	133, 1130,
	134, 1130,
	135, 1130,
	136, 1130,
	137, 1130,
	138, 1130,
	139, 1130,
	140, 1130,
	141, 1130,
	143, 1130,
	149, 1130,
	150, 1130,
	151, 1130,
	152, 1130,
	156, 1130,
	158, 1130,
	162, 1130,
	163, 1130,
	164, 1130,
	165, 1130,
	166, 1130,
	167, 1130,
	169, 1130,
	170, 1130,
	172, 1130,
	173, 1130,
	175, 1130,
	176, 1130,
	177, 1130,
	178, 1130,
	179, 1130,
	180, 1130,
	181, 1130,
	182, 1130,
	183, 1130,
	185, 1130,
	186, 1130,
	188, 1130,
	189, 1130,
	190, 1130,
	191, 1130,
	195, 1130,
	196, 1130,
	197, 1130,
	198, 1130,
	201, 1130,
	202, 1130,
	203, 1130,
	205, 1130,
	207, 1130,
	209, 1130,
	211, 1130,
	212, 1130,
	213, 1130,
	215, 1130,
	219, 1130,
	220, 1130,
	221, 1130,
	222, 1130,
	223, 1130,
	225, 1130,
	226, 1130,
	228, 1130,
	229, 1130,
	231, 1130,
	232, 1130,
	235, 1130,
	236, 1130,
	237, 1130,
	240, 1130,
	241, 1130,
	242, 1130,
	243, 1130,
	245, 1130,
	246, 1130,
	247, 1130,
	248, 1130,
	249, 1130,
	250, 1130,
	251, 1130,
	252, 1130,
	253, 1130,
	254, 1130,
	255, 1130,
	257, 1130,
	259, 1130,
	260, 1130,
	261, 1130,
	262, 1130,
	263, 1130,
	265, 1130,
	267, 1130,
	269, 1130,
	271, 1130,
	272, 1130,
	273, 1130,
	274, 1130,
	275, 1130,
	278, 1130,
	281, 1130,
	282, 1130,
	283, 1130,
	284, 1130,
	287, 1130,
	288, 1130,
	289, 1130,
	291, 1130,
	293, 1130,
	294, 1130,
	295, 1130,
	296, 1130,
	297, 1130,
	298, 1130,
	299, 1130,
	300, 1130,
	301, 1130,
	302, 1130,
	304, 1130,
	305, 1130,
	306, 1130,
	307, 1130,
	308, 1130,
	309, 1130,
	310, 1130,
	311, 1130,
	312, 1130,
	314, 1130,
	316, 1130,
	317, 1130,
	318, 1130,
	319, 1130,
	320, 1130,
	321, 1130,
	322, 1130,
	323, 1130,
	324, 1130,
	325, 1130,
	332, 1130,
	334, 1130,
	335, 1130,
	336, 1130,
	337, 1130,
	338, 1130,
	339, 1130,
	340, 1130,
	341, 1130,
	343, 1130,
	345, 1130,
	346, 1130,
	347, 1130,
	348, 1130,
	349, 1130,
	350, 1130,
	352, 1130,
	353, 1130,
	354, 1130,
	355, 1130,
	356, 1130,
	357, 1130,
	358, 1130,
	359, 1130,
	361, 1130,
	362, 1130,
	363, 1130,
	364, 1130,
	365, 1130,
	366, 1130,
	368, 1130,
	369, 1130,
	370, 1130,
	371, 1130,
	372, 1130,
	374, 1130,
	375, 1130,
	376, 1130,
	378, 1130,
	380, 1130,
	381, 1130,
	382, 1130,
	383, 1130,
	384, 1130,
	385, 1130,
	386, 1130,
	387, 1130,
	388, 1130,
	389, 1130,
	390, 1130,
	391, 1130,
	392, 1130,
	394, 1130,
	395, 1130,
	396, 1130,
	398, 1130,
	399, 1130,
	400, 1130,
	401, 1130,
	402, 1130,
	403, 1130,
	404, 1130,
	406, 1130,
	407, 1130,
	408, 1130,
	409, 1130,
	410, 1130,
	412, 1130,
	414, 1130,
	415, 1130,
	416, 1130,
	417, 1130,
	418, 1130,
	420, 1130,
	421, 1130,
	422, 1130,
	424, 1130,
	425, 1130,
	428, 1130,
	429, 1130,
	430, 1130,
	431, 1130,
	432, 1130,
	433, 1130,
	434, 1130,
	436, 1130,
	439, 1130,
	440, 1130,
	441, 1130,
	442, 1130,
	443, 1130,
	444, 1130,
	446, 1130,
	447, 1130,
	448, 1130,
	453, 1130,
	454, 1130,
	455, 1130,
	456, 1130,
	457, 1130,
	458, 1130,
	-2, 0,
	-1, 125,
	1, 1007,
	211, 1007,
	314, 1007,
	322, 1007,
	461, 1007,
	484, 1007,
	-2, 0,
	-1, 127,
	1, 1007,
	484, 1007,
	-2, 0,
	-1, 128,
	1, 1007,
	484, 1007,
	-2, 0,
	-1, 129,
	1, 1007,
	411, 1007,
	484, 1007,
	-2, 0,
	-1, 154,
	127, 1101,
	144, 1101,
	157, 1101,
	204, 1101,
	234, 1101,
	276, 1101,
	286, 1101,
	426, 1101,
	-2, 1076,
	-1, 187,
	4, 1137,
	5, 1137,
	6, 1137,
	7, 1137,
	8, 1137,
	9, 1137,
	10, 1137,
	21, 1137,
	22, 1137,
	23, 1137,
	24, 1137,
	25, 1137,
	27, 1137,
	28, 1137,
	34, 1137,
	35, 1137,
	39, 1137,
	40, 1137,
	41, 1137,
	42, 1137,
	43, 1137,
	44, 1137,
	45, 1137,
	47, 1137,
	48, 1137,
	49, 1137,
	51, 1137,
	52, 1137,
	53, 1137,
	54, 1137,
	55, 1137,
	56, 1137,
	57, 1137,
	58, 1137,
	59, 1137,
	60, 1137,
	61, 1137,
	63, 1137,
	64, 1137,
	65, 1137,
	67, 1137,
	69, 1137,
	70, 1137,
	71, 1137,
	72, 1137,
	73, 1137,
	74, 1137,
	75, 1137,
	78, 1137,
	79, 1137,
	80, 1137,
	81, 1137,
	83, 1137,
	85, 1137,
	86, 1137,
	87, 1137,
	89, 1137,
	90, 1137,
	91, 1137,
	92, 1137,
	93, 1137,
	94, 1137,
	95, 1137,
	96, 1137,
	97, 1137,
	98, 1137,
	99, 1137,
	100, 1137,
	101, 1137,
	102, 1137,
	103, 1137,
	104, 1137,
	105, 1137,
	106, 1137,
	107, 1137,
	108, 1137,
	109, 1137,
	110, 1137,
	111, 1137,
	113, 1137,
	114, 1137,
	116, 1137,
	119, 1137,
	120, 1137,
	121, 1137,
	123, 1137,
	125, 1137,
	126, 1137,
	128, 1137,
	129, 1137,
	130, 1137,
	131, 1137,
	132, 1137,
	133, 1137,
	134, 1137,
	135, 1137,
	136, 1137,
	137, 1137,
	138, 1137,
	139, 1137,
	140, 1137,
	141, 1137,
	142, 1137,
	143, 1137,
	149, 1137,
	150, 1137,
	151, 1137,
	152, 1137,
	156, 1137,
	158, 1137,
	161, 1137,
	162, 1137,
	163, 1137,
	164, 1137,
	165, 1137,
	166, 1137,
	167, 1137,
	169, 1137,
	170, 1137,
	172, 1137,
	173, 1137,
	175, 1137,
	176, 1137,
	177, 1137,
	178, 1137,
	179, 1137,
	180, 1137,
	181, 1137,
	182, 1137,
	183, 1137,
	184, 1137,
	185, 1137,
	186, 1137,
	188, 1137,
	189, 1137,
	190, 1137,
	191, 1137,
	195, 1137,
	196, 1137,
	197, 1137,
	198, 1137,
	200, 1137,
	201, 1137,
	202, 1137,
	203, 1137,
	205, 1137,
	207, 1137,
	208, 1137,
	209, 1137,
	210, 1137,
	211, 1137,
	212, 1137,
	213, 1137,
	214, 1137,
	215, 1137,
	219, 1137,
	220, 1137,
	221, 1137,
	222, 1137,
	223, 1137,
	225, 1137,
	226, 1137,
	228, 1137,
	229, 1137,
	230, 1137,
	231, 1137,
	232, 1137,
	233, 1137,
	235, 1137,
	236, 1137,
	237, 1137,
	238, 1137,
	239, 1137,
	240, 1137,
	241, 1137,
	242, 1137,
	243, 1137,
	245, 1137,
	246, 1137,
	247, 1137,
	248, 1137,
	249, 1137,
	250, 1137,
	251, 1137,
	252, 1137,
	253, 1137,
	254, 1137,
	255, 1137,
	257, 1137,
	258, 1137,
	259, 1137,
	260, 1137,
	261, 1137,
	262, 1137,
	263, 1137,
	264, 1137,
	265, 1137,
	266, 1137,
	267, 1137,
	268, 1137,
	269, 1137,
	270, 1137,
	271, 1137,
	272, 1137,
	273, 1137,
	274, 1137,
	275, 1137,
	278, 1137,
	282, 1137,
	283, 1137,
	284, 1137,
	287, 1137,
	288, 1137,
	289, 1137,
	290, 1137,
	291, 1137,
	292, 1137,
	293, 1137,
	294, 1137,
	295, 1137,
	296, 1137,
	297, 1137,
	298, 1137,
	299, 1137,
	300, 1137,
	301, 1137,
	302, 1137,
	304, 1137,
	305, 1137,
	306, 1137,
	307, 1137,
	308, 1137,
	309, 1137,
	310, 1137,
	311, 1137,
	312, 1137,
	314, 1137,
	316, 1137,
	317, 1137,
	318, 1137,
	319, 1137,
	320, 1137,
	321, 1137,
	322, 1137,
	323, 1137,
	324, 1137,
	325, 1137,
	332, 1137,
	334, 1137,
	335, 1137,
	336, 1137,
	337, 1137,
	338, 1137,
	339, 1137,
	340, 1137,
	341, 1137,
	343, 1137,
	344, 1137,
	345, 1137,
	346, 1137,
	347, 1137,
	348, 1137,
	349, 1137,
	350, 1137,
	352, 1137,
	353, 1137,
	354, 1137,
	355, 1137,
	356, 1137,
	357, 1137,
	358, 1137,
	359, 1137,
	361, 1137,
	362, 1137,
	363, 1137,
	364, 1137,
	365, 1137,
	366, 1137,
	367, 1137,
	368, 1137,
	369, 1137,
	370, 1137,
	371, 1137,
	372, 1137,
	373, 1137,
	374, 1137,
	375, 1137,
	376, 1137,
	378, 1137,
	380, 1137,
	381, 1137,
	382, 1137,
	383, 1137,
	384, 1137,
	385, 1137,
	386, 1137,
	387, 1137,
	388, 1137,
	389, 1137,
	390, 1137,
	391, 1137,
	392, 1137,
	394, 1137,
	395, 1137,
	396, 1137,
	398, 1137,
	399, 1137,
	400, 1137,
	401, 1137,
	402, 1137,
	403, 1137,
	404, 1137,
	406, 1137,
	407, 1137,
	408, 1137,
	409, 1137,
	410, 1137,
	412, 1137,
	414, 1137,
	415, 1137,
	416, 1137,
	417, 1137,
	418, 1137,
	419, 1137,
	420, 1137,
	421, 1137,
	422, 1137,
	424, 1137,
	425, 1137,
	427, 1137,
	428, 1137,
	429, 1137,
	430, 1137,
	431, 1137,
	432, 1137,
	433, 1137,
	434, 1137,
	435, 1137,
	436, 1137,
	439, 1137,
	440, 1137,
	441, 1137,
	442, 1137,
	443, 1137,
	444, 1137,
	446, 1137,
	447, 1137,
	448, 1137,
	453, 1137,
	454, 1137,
	455, 1137,
	456, 1137,
	457, 1137,
	458, 1137,
	459, 1137,
	465, 1137,
	472, 1137,
	473, 1137,
	474, 1137,
	481, 1137,
	485, 1137,
	-2, 0,
	-1, 566,
	160, 1835,
	411, 1835,
	464, 1835,
	483, 1835,
	-2, 0,
	-1, 567,
	160, 1914,
	411, 1914,
	464, 1914,
	483, 1914,
	-2, 0,
	-1, 568,
	160, 1823,
	411, 1823,
	464, 1823,
	483, 1823,
	-2, 0,
	-1, 570,
	160, 2003,
	411, 2003,
	464, 2003,
	483, 2003,
	-2, 0,
	-1, 572,
	160, 2032,
	411, 2032,
	464, 2032,
	483, 2032,
	-2, 0,
	-1, 579,
	160, 1929,
	411, 1929,
	464, 1929,
	483, 1929,
	-2, 504,
	-1, 607,
	483, 1779,
	486, 1779,
	-2, 719,
	-1, 608,
	483, 1781,
	486, 1781,
	-2, 720,
	-1, 609,
	483, 1780,
	486, 1780,
	-2, 721,
	-1, 610,
	486, 1714,
	-2, 722,
	-1, 652,
	446, 935,
	-2, 758,
	-1, 691,
	4, 953,
	21, 953,
	22, 953,
	23, 953,
	24, 953,
	25, 953,
	27, 953,
	28, 953,
	34, 953,
	39, 953,
	40, 953,
	41, 953,
	42, 953,
	43, 953,
	44, 953,
	45, 953,
	47, 953,
	48, 953,
	49, 953,
	51, 953,
	52, 953,
	53, 953,
	54, 953,
	55, 953,
	58, 953,
	59, 953,
	60, 953,
	61, 953,
	63, 953,
	64, 953,
	65, 953,
	69, 953,
	70, 953,
	71, 953,
	72, 953,
	73, 953,
	74, 953,
	75, 953,
	78, 953,
	79, 953,
	80, 953,
	81, 953,
	83, 953,
	85, 953,
	86, 953,
	87, 953,
	89, 953,
	91, 953,
	92, 953,
	100, 953,
	101, 953,
	102, 953,
	103, 953,
	105, 953,
	106, 953,
	107, 953,
	109, 953,
	110, 953,
	111, 953,
	113, 953,
	114, 953,
	116, 953,
	119, 953,
	120, 953,
	121, 953,
	123, 953,
	125, 953,
	126, 953,
	128, 953,
	129, 953,
	130, 953,
	131, 953,
	132, 953,
	133, 953,
	134, 953,
	135, 953,
	136, 953,
	137, 953,
	138, 953,
	139, 953,
	140, 953,
	141, 953,
	143, 953,
	149, 953,
	150, 953,
	151, 953,
	152, 953,
	156, 953,
	158, 953,
	162, 953,
	163, 953,
	164, 953,
	165, 953,
	166, 953,
	167, 953,
	169, 953,
	170, 953,
	172, 953,
	173, 953,
	175, 953,
	176, 953,
	177, 953,
	178, 953,
	179, 953,
	180, 953,
	181, 953,
	182, 953,
	183, 953,
	185, 953,
	186, 953,
	188, 953,
	189, 953,
	190, 953,
	191, 953,
	195, 953,
	196, 953,
	197, 953,
	198, 953,
	201, 953,
	202, 953,
	203, 953,
	205, 953,
	207, 953,
	209, 953,
	211, 953,
	212, 953,
	213, 953,
	215, 953,
	219, 953,
	220, 953,
	221, 953,
	222, 953,
	223, 953,
	225, 953,
	226, 953,
	228, 953,
	229, 953,
	231, 953,
	232, 953,
	235, 953,
	236, 953,
	237, 953,
	240, 953,
	241, 953,
	242, 953,
	243, 953,
	245, 953,
	246, 953,
	247, 953,
	248, 953,
	249, 953,
	250, 953,
	251, 953,
	252, 953,
	253, 953,
	254, 953,
	255, 953,
	257, 953,
	259, 953,
	260, 953,
	261, 953,
	262, 953,
	263, 953,
	265, 953,
	267, 953,
	269, 953,
	271, 953,
	272, 953,
	273, 953,
	274, 953,
	275, 953,
	278, 953,
	282, 953,
	283, 953,
	284, 953,
	287, 953,
	288, 953,
	289, 953,
	291, 953,
	293, 953,
	294, 953,
	295, 953,
	296, 953,
	297, 953,
	298, 953,
	299, 953,
	300, 953,
	301, 953,
	302, 953,
	304, 953,
	305, 953,
	306, 953,
	307, 953,
	308, 953,
	309, 953,
	310, 953,
	311, 953,
	312, 953,
	314, 953,
	316, 953,
	317, 953,
	318, 953,
	319, 953,
	320, 953,
	321, 953,
	322, 953,
	323, 953,
	324, 953,
	325, 953,
	332, 953,
	334, 953,
	335, 953,
	336, 953,
	337, 953,
	338, 953,
	339, 953,
	340, 953,
	341, 953,
	343, 953,
	345, 953,
	346, 953,
	347, 953,
	348, 953,
	349, 953,
	350, 953,
	352, 953,
	353, 953,
	354, 953,
	355, 953,
	356, 953,
	357, 953,
	358, 953,
	359, 953,
	361, 953,
	362, 953,
	363, 953,
	364, 953,
	365, 953,
	366, 953,
	368, 953,
	369, 953,
	370, 953,
	371, 953,
	372, 953,
	374, 953,
	375, 953,
	376, 953,
	378, 953,
	380, 953,
	381, 953,
	382, 953,
	383, 953,
	384, 953,
	385, 953,
	386, 953,
	387, 953,
	388, 953,
	389, 953,
	390, 953,
	391, 953,
	392, 953,
	394, 953,
	395, 953,
	396, 953,
	398, 953,
	399, 953,
	400, 953,
	401, 953,
	402, 953,
	403, 953,
	404, 953,
	406, 953,
	407, 953,
	408, 953,
	409, 953,
	410, 953,
	412, 953,
	414, 953,
	415, 953,
	416, 953,
	417, 953,
	418, 953,
	420, 953,
	421, 953,
	422, 953,
	424, 953,
	425, 953,
	428, 953,
	429, 953,
	430, 953,
	431, 953,
	432, 953,
	433, 953,
	434, 953,
	436, 953,
	439, 953,
	440, 953,
	441, 953,
	442, 953,
	443, 953,
	444, 953,
	446, 953,
	447, 953,
	448, 953,
	453, 953,
	454, 953,
	455, 953,
	456, 953,
	457, 953,
	458, 953,
	-2, 0,
	-1, 755,
	318, 647,
	366, 647,
	-2, 0,
	-1, 756,
	318, 646,
	366, 646,
	-2, 594,
	-1, 760,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 761,
	1, 718,
	157, 718,
	480, 718,
	482, 718,
	484, 718,
	-2, 0,
	-1, 769,
	1, 650,
	480, 650,
	482, 650,
	484, 650,
	-2, 0,
	-1, 772,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 773,
	1, 678,
	480, 678,
	482, 678,
	484, 678,
	-2, 0,
	-1, 774,
	1, 681,
	480, 681,
	482, 681,
	484, 681,
	-2, 0,
	-1, 779,
	1, 697,
	480, 697,
	482, 697,
	484, 697,
	-2, 0,
	-1, 780,
	1, 699,
	480, 699,
	482, 699,
	484, 699,
	-2, 0,
	-1, 823,
	144, 1139,
	157, 1139,
	234, 1139,
	276, 1139,
	-2, 1080,
	-1, 836,
	144, 1138,
	157, 1138,
	234, 1138,
	276, 1138,
	-2, 1077,
	-1, 860,
	483, 1778,
	-2, 512,
	-1, 888,
	5, 1770,
	481, 1768,
	-2, 1759,
	-1, 896,
	5, 1791,
	481, 1788,
	-2, 1779,
	-1, 897,
	5, 1792,
	481, 1789,
	-2, 1780,
	-1, 905,
	483, 1776,
	-2, 1758,
	-1, 906,
	481, 2110,
	-2, 1777,
	-1, 929,
	481, 2109,
	-2, 1793,
	-1, 930,
	5, 1300,
	-2, 2080,
	-1, 931,
	5, 1301,
	-2, 2081,
	-1, 932,
	5, 1302,
	-2, 2095,
	-1, 933,
	5, 1303,
	-2, 2060,
	-1, 934,
	5, 1304,
	-2, 2093,
	-1, 935,
	5, 1312,
	-2, 2072,
	-1, 936,
	5, 1299,
	-2, 2068,
	-1, 937,
	5, 1299,
	-2, 2067,
	-1, 938,
	5, 1299,
	-2, 2086,
	-1, 939,
	5, 1310,
	-2, 2062,
	-1, 940,
	5, 1315,
	-2, 2061,
	-1, 941,
	5, 1317,
	-2, 2105,
	-1, 944,
	5, 1339,
	-2, 2098,
	-1, 945,
	5, 1331,
	-2, 2099,
	-1, 946,
	5, 1339,
	-2, 2100,
	-1, 947,
	5, 1335,
	-2, 2101,
	-1, 948,
	5, 1286,
	-2, 2073,
	-1, 949,
	5, 1287,
	-2, 2074,
	-1, 976,
	5, 1322,
	-2, 2106,
	-1, 977,
	5, 1323,
	-2, 2096,
	-1, 978,
	5, 1324,
	447, 1324,
	-2, 2063,
	-1, 979,
	5, 1325,
	447, 1325,
	-2, 2064,
	-1, 1016,
	481, 1788,
	-2, 1779,
	-1, 1017,
	481, 1789,
	-2, 1780,
	-1, 1046,
	160, 2032,
	411, 2032,
	464, 2032,
	483, 2032,
	-2, 0,
	-1, 1049,
	1, 490,
	484, 490,
	-2, 1015,
	-1, 1174,
	334, 1754,
	474, 1754,
	-2, 1752,
	-1, 1186,
	485, 1754,
	-2, 1755,
	-1, 1187,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 1235,
	324, 757,
	446, 757,
	-2, 249,
	-1, 1258,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 1264,
	4, 953,
	21, 953,
	22, 953,
	23, 953,
	24, 953,
	25, 953,
	27, 953,
	28, 953,
	34, 953,
	39, 953,
	40, 953,
	41, 953,
	42, 953,
	43, 953,
	44, 953,
	45, 953,
	47, 953,
	48, 953,
	49, 953,
	51, 953,
	52, 953,
	53, 953,
	54, 953,
	55, 953,
	58, 953,
	59, 953,
	60, 953,
	61, 953,
	63, 953,
	64, 953,
	65, 953,
	69, 953,
	70, 953,
	71, 953,
	72, 953,
	73, 953,
	74, 953,
	75, 953,
	78, 953,
	79, 953,
	80, 953,
	81, 953,
	83, 953,
	85, 953,
	86, 953,
	87, 953,
	89, 953,
	91, 953,
	92, 953,
	100, 953,
	101, 953,
	102, 953,
	103, 953,
	105, 953,
	106, 953,
	107, 953,
	109, 953,
	110, 953,
	111, 953,
	113, 953,
	114, 953,
	116, 953,
	119, 953,
	120, 953,
	121, 953,
	123, 953,
	125, 953,
	126, 953,
	128, 953,
	129, 953,
	130, 953,
	131, 953,
	132, 953,
	133, 953,
	134, 953,
	135, 953,
	136, 953,
	137, 953,
	138, 953,
	139, 953,
	140, 953,
	141, 953,
	149, 953,
	150, 953,
	151, 953,
	152, 953,
	156, 953,
	158, 953,
	162, 953,
	163, 953,
	164, 953,
	165, 953,
	166, 953,
	167, 953,
	169, 953,
	170, 953,
	172, 953,
	173, 953,
	175, 953,
	176, 953,
	177, 953,
	178, 953,
	179, 953,
	180, 953,
	181, 953,
	182, 953,
	183, 953,
	185, 953,
	186, 953,
	188, 953,
	189, 953,
	190, 953,
	191, 953,
	196, 953,
	197, 953,
	198, 953,
	201, 953,
	202, 953,
	203, 953,
	205, 953,
	207, 953,
	209, 953,
	211, 953,
	212, 953,
	213, 953,
	215, 953,
	219, 953,
	220, 953,
	221, 953,
	222, 953,
	223, 953,
	225, 953,
	226, 953,
	228, 953,
	229, 953,
	231, 953,
	232, 953,
	235, 953,
	236, 953,
	237, 953,
	240, 953,
	241, 953,
	242, 953,
	243, 953,
	245, 953,
	246, 953,
	247, 953,
	248, 953,
	249, 953,
	250, 953,
	251, 953,
	252, 953,
	253, 953,
	254, 953,
	255, 953,
	257, 953,
	259, 953,
	260, 953,
	261, 953,
	262, 953,
	263, 953,
	265, 953,
	269, 953,
	271, 953,
	272, 953,
	273, 953,
	274, 953,
	275, 953,
	278, 953,
	280, 953,
	282, 953,
	283, 953,
	284, 953,
	287, 953,
	288, 953,
	289, 953,
	291, 953,
	293, 953,
	294, 953,
	295, 953,
	296, 953,
	297, 953,
	298, 953,
	299, 953,
	300, 953,
	301, 953,
	302, 953,
	304, 953,
	305, 953,
	306, 953,
	307, 953,
	308, 953,
	309, 953,
	310, 953,
	311, 953,
	312, 953,
	314, 953,
	316, 953,
	317, 953,
	318, 953,
	319, 953,
	320, 953,
	321, 953,
	322, 953,
	323, 953,
	324, 953,
	325, 953,
	332, 953,
	334, 953,
	335, 953,
	336, 953,
	337, 953,
	338, 953,
	339, 953,
	340, 953,
	341, 953,
	343, 953,
	345, 953,
	346, 953,
	347, 953,
	348, 953,
	349, 953,
	350, 953,
	352, 953,
	353, 953,
	354, 953,
	355, 953,
	356, 953,
	357, 953,
	358, 953,
	359, 953,
	361, 953,
	362, 953,
	363, 953,
	364, 953,
	365, 953,
	366, 953,
	368, 953,
	369, 953,
	370, 953,
	371, 953,
	372, 953,
	374, 953,
	375, 953,
	376, 953,
	378, 953,
	380, 953,
	381, 953,
	382, 953,
	383, 953,
	384, 953,
	385, 953,
	386, 953,
	387, 953,
	388, 953,
	389, 953,
	390, 953,
	391, 953,
	392, 953,
	394, 953,
	395, 953,
	396, 953,
	398, 953,
	399, 953,
	400, 953,
	401, 953,
	402, 953,
	403, 953,
	404, 953,
	406, 953,
	407, 953,
	408, 953,
	409, 953,
	410, 953,
	412, 953,
	414, 953,
	415, 953,
	416, 953,
	417, 953,
	418, 953,
	420, 953,
	421, 953,
	422, 953,
	424, 953,
	425, 953,
	428, 953,
	429, 953,
	430, 953,
	431, 953,
	432, 953,
	433, 953,
	434, 953,
	436, 953,
	439, 953,
	440, 953,
	441, 953,
	442, 953,
	443, 953,
	444, 953,
	446, 953,
	447, 953,
	448, 953,
	453, 953,
	454, 953,
	455, 953,
	456, 953,
	457, 953,
	458, 953,
	-2, 0,
	-1, 1326,
	1, 365,
	480, 365,
	482, 365,
	484, 365,
	-2, 1100,
	-1, 1329,
	4, 2104,
	11, 2104,
	12, 2104,
	14, 2104,
	15, 2104,
	16, 2104,
	17, 2104,
	18, 2104,
	19, 2104,
	21, 2104,
	22, 2104,
	23, 2104,
	24, 2104,
	25, 2104,
	27, 2104,
	28, 2104,
	31, 2104,
	32, 2104,
	34, 2104,
	36, 2104,
	39, 2104,
	40, 2104,
	41, 2104,
	42, 2104,
	43, 2104,
	44, 2104,
	45, 2104,
	47, 2104,
	48, 2104,
	49, 2104,
	51, 2104,
	52, 2104,
	53, 2104,
	54, 2104,
	55, 2104,
	58, 2104,
	59, 2104,
	60, 2104,
	61, 2104,
	63, 2104,
	64, 2104,
	65, 2104,
	66, 2104,
	69, 2104,
	70, 2104,
	71, 2104,
	72, 2104,
	73, 2104,
	74, 2104,
	75, 2104,
	76, 2104,
	78, 2104,
	79, 2104,
	80, 2104,
	81, 2104,
	83, 2104,
	84, 2104,
	85, 2104,
	86, 2104,
	87, 2104,
	89, 2104,
	90, 2104,
	91, 2104,
	92, 2104,
	100, 2104,
	101, 2104,
	102, 2104,
	103, 2104,
	105, 2104,
	106, 2104,
	107, 2104,
	109, 2104,
	110, 2104,
	111, 2104,
	113, 2104,
	114, 2104,
	116, 2104,
	119, 2104,
	120, 2104,
	121, 2104,
	123, 2104,
	125, 2104,
	126, 2104,
	128, 2104,
	129, 2104,
	130, 2104,
	131, 2104,
	132, 2104,
	133, 2104,
	134, 2104,
	135, 2104,
	136, 2104,
	137, 2104,
	138, 2104,
	139, 2104,
	140, 2104,
	141, 2104,
	145, 2104,
	146, 2104,
	147, 2104,
	148, 2104,
	149, 2104,
	150, 2104,
	151, 2104,
	152, 2104,
	155, 2104,
	156, 2104,
	158, 2104,
	161, 2104,
	162, 2104,
	163, 2104,
	164, 2104,
	165, 2104,
	166, 2104,
	167, 2104,
	169, 2104,
	170, 2104,
	172, 2104,
	173, 2104,
	175, 2104,
	176, 2104,
	177, 2104,
	178, 2104,
	179, 2104,
	180, 2104,
	181, 2104,
	182, 2104,
	183, 2104,
	184, 2104,
	185, 2104,
	186, 2104,
	187, 2104,
	188, 2104,
	189, 2104,
	190, 2104,
	191, 2104,
	193, 2104,
	194, 2104,
	196, 2104,
	197, 2104,
	198, 2104,
	200, 2104,
	201, 2104,
	202, 2104,
	203, 2104,
	205, 2104,
	207, 2104,
	208, 2104,
	209, 2104,
	210, 2104,
	211, 2104,
	212, 2104,
	213, 2104,
	214, 2104,
	215, 2104,
	217, 2104,
	218, 2104,
	219, 2104,
	220, 2104,
	221, 2104,
	222, 2104,
	223, 2104,
	225, 2104,
	226, 2104,
	228, 2104,
	229, 2104,
	230, 2104,
	231, 2104,
	232, 2104,
	233, 2104,
	235, 2104,
	236, 2104,
	237, 2104,
	240, 2104,
	241, 2104,
	242, 2104,
	243, 2104,
	244, 2104,
	245, 2104,
	246, 2104,
	247, 2104,
	248, 2104,
	249, 2104,
	250, 2104,
	251, 2104,
	252, 2104,
	253, 2104,
	254, 2104,
	255, 2104,
	257, 2104,
	258, 2104,
	259, 2104,
	260, 2104,
	261, 2104,
	262, 2104,
	263, 2104,
	265, 2104,
	268, 2104,
	269, 2104,
	271, 2104,
	272, 2104,
	273, 2104,
	274, 2104,
	275, 2104,
	278, 2104,
	282, 2104,
	283, 2104,
	284, 2104,
	285, 2104,
	287, 2104,
	288, 2104,
	289, 2104,
	291, 2104,
	293, 2104,
	294, 2104,
	295, 2104,
	296, 2104,
	297, 2104,
	298, 2104,
	299, 2104,
	300, 2104,
	301, 2104,
	302, 2104,
	304, 2104,
	305, 2104,
	306, 2104,
	307, 2104,
	308, 2104,
	309, 2104,
	310, 2104,
	311, 2104,
	312, 2104,
	314, 2104,
	316, 2104,
	317, 2104,
	318, 2104,
	319, 2104,
	320, 2104,
	321, 2104,
	322, 2104,
	323, 2104,
	324, 2104,
	325, 2104,
	332, 2104,
	333, 2104,
	334, 2104,
	335, 2104,
	336, 2104,
	337, 2104,
	338, 2104,
	339, 2104,
	340, 2104,
	341, 2104,
	343, 2104,
	344, 2104,
	345, 2104,
	346, 2104,
	347, 2104,
	348, 2104,
	349, 2104,
	350, 2104,
	351, 2104,
	352, 2104,
	353, 2104,
	354, 2104,
	355, 2104,
	356, 2104,
	357, 2104,
	358, 2104,
	359, 2104,
	361, 2104,
	362, 2104,
	363, 2104,
	364, 2104,
	365, 2104,
	366, 2104,
	368, 2104,
	369, 2104,
	370, 2104,
	371, 2104,
	372, 2104,
	373, 2104,
	374, 2104,
	375, 2104,
	376, 2104,
	378, 2104,
	380, 2104,
	381, 2104,
	382, 2104,
	383, 2104,
	384, 2104,
	385, 2104,
	386, 2104,
	387, 2104,
	388, 2104,
	389, 2104,
	390, 2104,
	391, 2104,
	392, 2104,
	394, 2104,
	395, 2104,
	396, 2104,
	398, 2104,
	399, 2104,
	400, 2104,
	401, 2104,
	402, 2104,
	403, 2104,
	404, 2104,
	406, 2104,
	407, 2104,
	408, 2104,
	409, 2104,
	410, 2104,
	412, 2104,
	414, 2104,
	415, 2104,
	416, 2104,
	417, 2104,
	418, 2104,
	420, 2104,
	421, 2104,
	422, 2104,
	424, 2104,
	425, 2104,
	428, 2104,
	429, 2104,
	430, 2104,
	431, 2104,
	432, 2104,
	433, 2104,
	434, 2104,
	436, 2104,
	439, 2104,
	440, 2104,
	441, 2104,
	442, 2104,
	443, 2104,
	444, 2104,
	446, 2104,
	447, 2104,
	448, 2104,
	453, 2104,
	454, 2104,
	455, 2104,
	456, 2104,
	457, 2104,
	458, 2104,
	459, 2104,
	460, 2104,
	462, 2104,
	463, 2104,
	464, 2104,
	465, 2104,
	466, 2104,
	467, 2104,
	469, 2104,
	470, 2104,
	471, 2104,
	472, 2104,
	473, 2104,
	474, 2104,
	475, 2104,
	476, 2104,
	477, 2104,
	479, 2104,
	482, 2104,
	483, 2104,
	485, 2104,
	486, 2104,
	-2, 0,
	-1, 1334,
	160, 2003,
	411, 2003,
	464, 2003,
	483, 2003,
	-2, 0,
	-1, 1366,
	318, 647,
	366, 647,
	-2, 0,
	-1, 1390,
	1, 642,
	480, 642,
	482, 642,
	484, 642,
	-2, 0,
	-1, 1391,
	1, 667,
	480, 667,
	482, 667,
	484, 667,
	-2, 0,
	-1, 1392,
	1, 649,
	480, 649,
	482, 649,
	484, 649,
	-2, 0,
	-1, 1394,
	1, 653,
	480, 653,
	482, 653,
	484, 653,
	-2, 0,
	-1, 1421,
	1, 2052,
	480, 2052,
	482, 2052,
	483, 2052,
	484, 2052,
	-2, 695,
	-1, 1422,
	1, 2000,
	480, 2000,
	482, 2000,
	483, 2000,
	484, 2000,
	-2, 696,
	-1, 1437,
	1, 1010,
	484, 1010,
	-2, 1015,
	-1, 1440,
	144, 1138,
	157, 1138,
	234, 1138,
	276, 1138,
	-2, 1081,
	-1, 1533,
	127, 1102,
	144, 1102,
	157, 1102,
	204, 1102,
	234, 1102,
	276, 1102,
	286, 1102,
	426, 1102,
	-2, 1498,
	-1, 1593,
	482, 1648,
	-2, 0,
	-1, 1628,
	127, 1102,
	144, 1102,
	157, 1102,
	204, 1102,
	234, 1102,
	276, 1102,
	286, 1102,
	426, 1102,
	-2, 1217,
	-1, 1674,
	481, 1327,
	-2, 1315,
	-1, 1707,
	1, 492,
	484, 492,
	-2, 1015,
	-1, 1909,
	1, 644,
	480, 644,
	482, 644,
	484, 644,
	-2, 0,
	-1, 1910,
	1, 669,
	480, 669,
	482, 669,
	484, 669,
	-2, 0,
	-1, 1982,
	349, 1163,
	350, 1163,
	-2, 1360,
	-1, 2013,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1378,
	-1, 2014,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1379,
	-1, 2015,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1380,
	-1, 2016,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1381,
	-1, 2017,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1382,
	-1, 2018,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1383,
	-1, 2019,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1384,
	-1, 2020,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1385,
	-1, 2032,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1397,
	-1, 2033,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1398,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1399,
	-1, 2037,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1404,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1408,
	-1, 2045,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1416,
	-1, 2046,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1417,
	-1, 2047,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1418,
	-1, 2048,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1419,
	-1, 2160,
	5, 1791,
	160, 1659,
	481, 1788,
	-2, 1779,
	-1, 2161,
	160, 1660,
	-2, 2056,
	-1, 2162,
	160, 1661,
	-2, 1928,
	-1, 2163,
	160, 1662,
	-2, 1846,
	-1, 2164,
	160, 1663,
	-2, 1885,
	-1, 2165,
	160, 1664,
	-2, 1923,
	-1, 2166,
	160, 1665,
	-2, 1998,
	-1, 2167,
	160, 1666,
	-2, 1481,
	-1, 2236,
	1, 1218,
	2, 1218,
	90, 1218,
	127, 1218,
	144, 1218,
	157, 1218,
	161, 1218,
	171, 1218,
	174, 1218,
	200, 1218,
	204, 1218,
	214, 1218,
	230, 1218,
	234, 1218,
	258, 1218,
	276, 1218,
	280, 1218,
	286, 1218,
	342, 1218,
	344, 1218,
	426, 1218,
	437, 1218,
	450, 1218,
	451, 1218,
	452, 1218,
	461, 1218,
	480, 1218,
	482, 1218,
	484, 1218,
	486, 1218,
	-2, 1217,
	-1, 2249,
	481, 1760,
	-2, 1774,
	-1, 2272,
	481, 1326,
	-2, 1316,
	-1, 2374,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 2528,
	281, 1166,
	-2, 2094,
	-1, 2529,
	281, 1167,
	-2, 1987,
	-1, 2533,
	349, 1725,
	350, 1725,
	-2, 1479,
	-1, 2534,
	349, 1729,
	350, 1729,
	-2, 1480,
	-1, 2535,
	349, 1726,
	350, 1726,
	-2, 1479,
	-1, 2536,
	349, 1730,
	350, 1730,
	-2, 1480,
	-1, 2549,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1406,
	-1, 2550,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1410,
	-1, 2556,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1412,
	-1, 2750,
	211, 1015,
	314, 1015,
	322, 1015,
	461, 1015,
	-2, 489,
	-1, 2849,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 2939,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1414,
	-1, 2946,
	208, 0,
	210, 0,
	268, 0,
	-2, 1433,
	-1, 3012,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1462,
	-1, 3013,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1463,
	-1, 3014,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1464,
	-1, 3018,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1468,
	-1, 3019,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1469,
	-1, 3020,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1470,
	-1, 3064,
	481, 1761,
	-2, 1775,
	-1, 3158,
	483, 2210,
	-2, 1059,
	-1, 3209,
	208, 0,
	210, 0,
	268, 0,
	-2, 1434,
	-1, 3212,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1437,
	-1, 3213,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1439,
	-1, 3384,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1438,
	-1, 3385,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1440,
	-1, 3395,
	208, 0,
	-2, 1471,
	-1, 3522,
	208, 0,
	-2, 1472,
	-1, 3656,
	44, 0,
	184, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 2059,
}

const sqlPrivate = 57344

const sqlLast = 88064

var sqlAct = [...]int{

	219, 3454, 3789, 3543, 3424, 3655, 3427, 3666, 3558, 3603,
	3755, 3632, 3192, 3622, 3619, 3318, 3667, 2680, 1206, 3668,
	2304, 3413, 2835, 3086, 1883, 2428, 3526, 2978, 3461, 3709,
	1019, 2681, 3347, 3654, 3342, 2000, 3373, 1190, 2767, 3150,
	2864, 1799, 35, 861, 846, 3470, 3491, 1321, 2060, 3331,
	3352, 1873, 1662, 3274, 2831, 3131, 3087, 1758, 2857, 1078,
	2931, 2542, 1449, 1663, 1171, 609, 1634, 2859, 2417, 2400,
	3399, 2192, 2461, 2391, 2463, 2723, 3246, 211, 2666, 2703,
	2363, 2403, 2471, 1009, 701, 609, 2695, 3191, 2414, 2460,
	2412, 2452, 577, 2684, 3035, 888, 2454, 837, 1374, 1603,
	2429, 1795, 1767, 2577, 3527, 1794, 2306, 1871, 1997, 2665,
	2073, 2229, 1579, 2228, 2686, 2102, 1179, 1790, 1993, 1798,
	2375, 1541, 1862, 1251, 2340, 2365, 2401, 1745, 1437, 1783,
	1062, 892, 1743, 2729, 2093, 845, 147, 2526, 1604, 2057,
	3455, 1000, 2210, 4, 2470, 1733, 1981, 1964, 2833, 1962,
	1327, 1315, 1342, 1828, 1623, 2231, 1176, 1305, 897, 2422,
	213, 1256, 899, 610, 212, 2296, 1051, 611, 545, 2464,
	1574, 2096, 1003, 2218, 1613, 2200, 2104, 2074, 982, 2156,
	1525, 1451, 1192, 2146, 154, 1450, 561, 1827, 1963, 2189,
	1017, 1965, 155, 605, 1341, 652, 677, 571, 1203, 531,
	1986, 1757, 2341, 553, 873, 548, 40, 39, 1005, 37,
	28, 26, 24, 1456, 750, 147, 1325, 556, 1436, 767,
	2226, 980, 1261, 695, 2573, 614, 1848, 1532, 3049, 617,
	3050, 1864, 942, 1864, 1620, 3807, 3793, 1279, 1864, 2209,
	2209, 2682, 2874, 3792, 3771, 614, 999, 2209, 3289, 617,
	3769, 841, 3765, 3692, 3289, 1224, 1804, 3693, 3690, 836,
	3688, 3685, 2209, 3682, 2209, 3686, 2748, 3683, 1218, 3677,
	1393, 3652, 3651, 1804, 841, 1804, 1804, 2873, 712, 3650,
	3647, 2586, 3646, 1876, 1876, 1015, 1876, 2587, 3641, 3639,
	3617, 90, 3289, 3289, 3289, 3597, 3591, 3590, 3585, 2264,
	2209, 2209, 3289, 3584, 997, 3578, 3524, 3289, 3505, 1804,
	2264, 3502, 1804, 3463, 3444, 3289, 3443, 3464, 1804, 3435,
	1804, 3434, 3405, 1804, 1031, 3289, 1804, 1464, 1465, 2202,
	1036, 2209, 824, 1507, 1508, 1509, 3598, 983, 983, 3508,
	823, 3386, 1464, 1465, 3039, 2264, 3371, 3360, 1495, 3316,
	1876, 2888, 2201, 2209, 3307, 1467, 79, 3288, 2209, 1059,
	1513, 3289, 3211, 1495, 2638, 2639, 2264, 3166, 831, 3160,
	1467, 2904, 3129, 2904, 3059, 3057, 3130, 3042, 3060, 3058,
	1876, 2209, 1466, 2962, 3039, 2958, 2903, 1804, 3308, 2209,
	2904, 2895, 1486, 1804, 2679, 2896, 2425, 1466, 2209, 1032,
	1483, 2677, 1464, 1465, 984, 2209, 2676, 1059, 2896, 2629,
	2209, 2638, 2639, 2630, 2627, 2619, 890, 2617, 2628, 2620,
	2588, 2209, 2450, 1495, 2209, 2354, 1879, 2449, 1762, 2653,
	1467, 1879, 1891, 1223, 2377, 2260, 2295, 2280, 1876, 2638,
	2639, 2209, 2656, 2657, 2658, 2263, 1217, 1713, 842, 2264,
	2258, 2209, 2251, 986, 2209, 987, 1804, 1466, 1863, 3207,
	2888, 1489, 1490, 1491, 1492, 187, 2208, 1486, 1878, 1804,
	2209, 1472, 1879, 2397, 2576, 1483, 2541, 1803, 2638, 2639,
	2293, 2656, 2657, 2658, 1599, 1202, 1472, 3115, 2934, 2912,
	1621, 1793, 2875, 2245, 2244, 1376, 2243, 2242, 3206, 2241,
	1504, 988, 189, 1514, 2653, 985, 830, 829, 2644, 1494,
	1496, 2876, 1550, 828, 827, 826, 1865, 3205, 1865, 822,
	821, 187, 820, 1865, 1494, 1496, 2506, 2409, 819, 818,
	817, 816, 815, 1481, 1482, 814, 1489, 1490, 1491, 1492,
	813, 812, 811, 2653, 810, 809, 1472, 188, 748, 1502,
	747, 746, 745, 744, 743, 2644, 742, 181, 189, 741,
	1487, 1212, 740, 739, 738, 182, 2129, 737, 2873, 736,
	735, 734, 733, 732, 731, 1487, 897, 730, 729, 187,
	897, 728, 727, 2644, 1494, 1496, 156, 726, 725, 1839,
	3262, 123, 1032, 724, 723, 1081, 722, 2654, 721, 1081,
	710, 1195, 709, 188, 668, 1195, 629, 895, 1481, 1482,
	628, 620, 619, 187, 1055, 618, 189, 591, 1464, 1465,
	1061, 583, 2644, 897, 1066, 897, 187, 897, 187, 582,
	581, 565, 209, 208, 207, 1487, 2659, 206, 205, 1495,
	204, 203, 156, 202, 2654, 3223, 1467, 201, 187, 1493,
	189, 1182, 200, 1532, 1195, 2201, 1032, 199, 198, 197,
	3070, 188, 2442, 189, 1863, 189, 1211, 1488, 1216, 1957,
	1222, 181, 2654, 1466, 1174, 2659, 196, 1186, 195, 182,
	194, 193, 1488, 192, 850, 189, 191, 2638, 2639, 1505,
	2656, 2657, 2658, 190, 1195, 188, 3053, 2905, 1195, 2099,
	156, 1049, 1195, 2726, 2655, 181, 2599, 897, 188, 2582,
	188, 2654, 1195, 182, 2381, 897, 2268, 1395, 181, 1582,
	181, 2252, 2410, 2235, 1493, 1581, 182, 2115, 182, 1741,
	188, 1647, 1262, 1262, 156, 1074, 3673, 1168, 1173, 1582,
	181, 1624, 1488, 2113, 1552, 1581, 1585, 156, 182, 156,
	1340, 2655, 2653, 2359, 2327, 1195, 1208, 1198, 1345, 1068,
	1021, 3653, 1472, 1463, 1543, 3565, 1580, 3423, 1044, 2424,
	844, 897, 2100, 614, 1886, 1503, 1205, 617, 3517, 2655,
	1204, 1506, 1484, 1480, 3511, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 3361, 3509, 3356, 1012, 996, 3267,
	1494, 1496, 1346, 1468, 1469, 1470, 1471, 1473, 1474, 3245,
	2638, 2639, 1394, 3135, 1266, 1079, 3244, 3238, 2655, 1180,
	2638, 2639, 2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645,
	2646, 2644, 3237, 3113, 147, 147, 3236, 1055, 3229, 3228,
	1055, 3227, 1330, 1332, 2101, 2098, 1885, 1309, 1312, 1318,
	3222, 1487, 897, 897, 897, 897, 897, 1484, 1480, 3219,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 3218,
	3128, 1403, 2640, 2641, 2642, 2643, 2645, 2646, 1263, 3074,
	1328, 897, 2899, 2408, 2659, 187, 187, 897, 3073, 3072,
	2650, 2651, 2652, 3063, 1544, 3032, 1542, 2649, 2647, 2648,
	2640, 2641, 2642, 2643, 2645, 2646, 3031, 3030, 2954, 2950,
	1543, 2721, 2673, 2664, 1282, 2637, 2634, 2633, 2631, 187,
	2654, 1441, 189, 189, 1464, 1465, 2626, 1440, 2625, 2650,
	2651, 2652, 1464, 1465, 1435, 2624, 2649, 2647, 2648, 2640,
	2641, 2642, 2643, 2645, 2646, 1531, 2621, 2618, 2638, 2639,
	2598, 2581, 1467, 2103, 2644, 2574, 189, 2451, 1488, 2236,
	1467, 2086, 1463, 1809, 2644, 1807, 1351, 188, 188, 1462,
	3802, 3764, 3763, 3702, 3700, 3691, 1367, 181, 181, 1466,
	1020, 2980, 3557, 3554, 3551, 182, 182, 1466, 1551, 842,
	897, 897, 897, 3550, 3549, 3542, 897, 3355, 3536, 3506,
	3490, 188, 3489, 1017, 2063, 1017, 156, 156, 3477, 3474,
	3440, 181, 3419, 3397, 1601, 3381, 3134, 1438, 3380, 182,
	3368, 3367, 1081, 3335, 3261, 3243, 1446, 2655, 897, 1445,
	824, 609, 3181, 3178, 1840, 1679, 609, 3104, 823, 1649,
	156, 3103, 2069, 3090, 897, 3528, 2128, 1442, 1195, 1638,
	1659, 2097, 3089, 1459, 1460, 1702, 3045, 2945, 1529, 1584,
	2906, 2889, 2851, 897, 2815, 2794, 2770, 1610, 1472, 1081,
	2769, 2743, 2678, 2603, 2602, 2276, 1472, 1655, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1710, 2741, 2597, 1055, 2565,
	1607, 1608, 2644, 2390, 1588, 1587, 1586, 1583, 1015, 1657,
	1015, 1575, 1573, 1186, 2274, 2273, 2247, 1739, 1576, 1577,
	2240, 2207, 2111, 1646, 1602, 1705, 1464, 1465, 1597, 1631,
	1654, 1596, 1595, 1594, 1593, 1592, 3338, 2718, 187, 1591,
	1590, 1589, 1570, 1569, 1704, 1568, 1567, 983, 2650, 2651,
	2652, 1566, 147, 1565, 1467, 2649, 2647, 2648, 2640, 2641,
	2642, 2643, 2645, 2646, 1564, 1563, 1653, 1059, 1562, 1561,
	1632, 1560, 1559, 1558, 1557, 189, 1556, 1887, 2770, 1545,
	1530, 1466, 842, 1528, 1523, 1707, 1043, 1629, 1034, 1651,
	1027, 2654, 3263, 3215, 3069, 3056, 3048, 2585, 2266, 2238,
	3408, 614, 3265, 2638, 2639, 617, 614, 1673, 3068, 1544,
	617, 1195, 1195, 1600, 1642, 2739, 1526, 2114, 3310, 1081,
	188, 1626, 1732, 1641, 1640, 1751, 1639, 1637, 1636, 1635,
	181, 1732, 1624, 2112, 1658, 1732, 1724, 1723, 182, 1701,
	1732, 1734, 3471, 2623, 1780, 1622, 3761, 1782, 1660, 3512,
	1787, 1065, 1650, 3754, 3552, 2860, 3422, 3466, 1800, 156,
	3510, 3465, 3359, 3309, 3051, 2891, 2797, 2890, 1582, 1433,
	2622, 1735, 3102, 1730, 1581, 1725, 1366, 1676, 1063, 2345,
	3138, 2640, 2641, 2642, 2643, 2645, 2646, 995, 807, 1059,
	2547, 1059, 2329, 2642, 2643, 2645, 2646, 1060, 2655, 1742,
	2837, 1056, 2836, 1719, 1064, 1554, 842, 1375, 1766, 1884,
	1404, 3462, 2099, 3678, 3665, 1376, 2175, 1796, 3118, 3106,
	2910, 3400, 3790, 2591, 1565, 2682, 1565, 2982, 808, 3674,
	1832, 2094, 894, 1791, 2272, 1598, 1578, 2829, 1836, 1239,
	1727, 3687, 1195, 1835, 1195, 3684, 1195, 2869, 3081, 3544,
	3343, 3615, 3533, 2773, 1195, 3097, 2458, 1195, 2421, 2822,
	1762, 3577, 2752, 664, 1801, 3725, 2926, 3299, 3726, 1237,
	1195, 1195, 1195, 614, 1837, 1227, 1205, 617, 1845, 805,
	1204, 2281, 1708, 803, 1972, 2100, 801, 3675, 1355, 1050,
	609, 1943, 3799, 1901, 1786, 1468, 1469, 1470, 1471, 1473,
	1474, 799, 3453, 1186, 1057, 1470, 1471, 1473, 1474, 796,
	3446, 1802, 1058, 2366, 1941, 3120, 2649, 2647, 2648, 2640,
	2641, 2642, 2643, 2645, 2646, 1970, 1842, 3117, 2754, 3116,
	3078, 3077, 1972, 1889, 2299, 2596, 2595, 1729, 1238, 1805,
	2594, 1818, 1867, 1819, 1401, 1869, 2593, 1853, 2297, 790,
	665, 1874, 2551, 2361, 2353, 2352, 2332, 2101, 2098, 2259,
	2044, 1667, 1439, 897, 856, 897, 1905, 1201, 1402, 1728,
	840, 1890, 897, 1970, 2142, 1679, 1679, 1081, 1720, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 1851, 897, 1895, 897, 897, 897,
	897, 1847, 1011, 1974, 1328, 3576, 1328, 1855, 1856, 1065,
	1282, 1400, 1850, 2141, 1850, 1968, 1971, 897, 1998, 1999,
	897, 897, 1044, 1353, 2002, 1894, 1961, 839, 1892, 897,
	614, 1059, 2418, 897, 617, 897, 897, 1272, 1880, 1271,
	1881, 1065, 1293, 1081, 2911, 2368, 2103, 1956, 2740, 897,
	897, 897, 897, 3379, 897, 897, 897, 897, 897, 897,
	897, 897, 1064, 1923, 1971, 2367, 2369, 2796, 1817, 1348,
	1233, 1056, 1474, 785, 1955, 1270, 1969, 1269, 1056, 1899,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 2299,
	1985, 2075, 2076, 897, 1064, 835, 1246, 2331, 1954, 1951,
	1012, 1612, 1012, 2297, 2372, 1017, 2075, 2091, 2288, 841,
	2059, 2059, 1081, 842, 1759, 842, 1958, 1673, 1673, 1966,
	1960, 1017, 2267, 1959, 1969, 1973, 2250, 2320, 793, 1412,
	2094, 824, 2137, 2524, 824, 824, 3749, 897, 1081, 1989,
	1755, 2067, 1990, 1991, 2097, 3093, 2349, 3644, 2065, 2646,
	1368, 2159, 2159, 2173, 2319, 2075, 2090, 1444, 2193, 2195,
	667, 666, 1760, 1761, 2199, 3725, 2342, 2343, 1416, 1349,
	3311, 786, 1616, 1042, 1057, 2342, 2343, 2001, 1913, 2342,
	2343, 1057, 1058, 1852, 1736, 1737, 2917, 1676, 1676, 1058,
	1756, 1953, 2223, 1908, 2751, 2071, 3295, 1364, 2916, 2503,
	1015, 3671, 1195, 2103, 1399, 1432, 1909, 2971, 2248, 1762,
	3595, 1619, 2088, 3738, 3773, 3750, 1015, 3714, 1390, 2215,
	3737, 1768, 2531, 2532, 543, 1614, 2308, 833, 2257, 785,
	3197, 3196, 1081, 2866, 1642, 1631, 2237, 1376, 1772, 1710,
	1376, 1617, 2139, 2373, 1055, 983, 2214, 2140, 538, 838,
	2143, 835, 2144, 2145, 1910, 3378, 2867, 3105, 589, 1679,
	2168, 2184, 2155, 2106, 3429, 2222, 1391, 2227, 2197, 1615,
	2233, 2234, 797, 2205, 2206, 1235, 797, 2539, 1257, 797,
	2216, 2220, 2221, 1942, 1081, 1769, 2055, 147, 1195, 834,
	2326, 2697, 3084, 1629, 798, 2261, 1584, 719, 897, 2330,
	897, 1950, 797, 1354, 3752, 662, 1940, 661, 1916, 2300,
	842, 2053, 2638, 2639, 2808, 1255, 2103, 1753, 2866, 2358,
	842, 1059, 2335, 2311, 842, 2279, 787, 786, 1059, 2509,
	3785, 1864, 1746, 2350, 2362, 2394, 1747, 3672, 1292, 2275,
	1352, 2383, 785, 2385, 2802, 1024, 1174, 2041, 3286, 1576,
	1577, 588, 1779, 2818, 3293, 1618, 1764, 3593, 2249, 2334,
	1186, 3545, 2278, 2432, 835, 3431, 1232, 1195, 1195, 2282,
	1195, 1667, 1667, 1257, 3282, 1773, 1762, 1413, 3275, 1022,
	2753, 2423, 1195, 2538, 2423, 2284, 2322, 3594, 2344, 2346,
	2347, 2348, 3094, 1952, 3273, 2784, 694, 2333, 2286, 2472,
	3277, 1917, 1571, 2313, 2316, 2474, 2303, 3327, 2477, 2478,
	2351, 2378, 842, 3713, 3670, 2446, 871, 2483, 2484, 2485,
	3283, 1673, 2512, 2737, 2049, 3286, 2287, 1753, 897, 2493,
	1748, 2494, 2298, 1774, 1775, 2050, 788, 1753, 2968, 2051,
	786, 2285, 2783, 2056, 1750, 1770, 3695, 3193, 2696, 3758,
	3751, 3282, 2294, 3696, 614, 3276, 2644, 1205, 617, 2491,
	2457, 2379, 1522, 1789, 1350, 2553, 2058, 2085, 897, 2501,
	2388, 3391, 1025, 2398, 897, 897, 789, 2310, 3294, 1771,
	1414, 2601, 787, 1788, 2441, 1186, 2416, 2039, 1746, 3734,
	2042, 1676, 1747, 2514, 2066, 2516, 3627, 3283, 3556, 3375,
	2434, 2427, 2476, 2488, 147, 2479, 1752, 2480, 2219, 1784,
	2969, 1411, 2447, 2495, 2438, 2497, 2439, 2499, 2440, 1186,
	2448, 1186, 2444, 794, 1443, 2511, 2459, 539, 3774, 897,
	897, 1760, 1761, 2507, 2475, 897, 2038, 1746, 2232, 841,
	1041, 1747, 2786, 3337, 3065, 2654, 1912, 2508, 897, 897,
	1415, 590, 1328, 587, 897, 897, 1612, 2638, 2639, 1785,
	897, 1907, 3187, 2490, 1363, 1365, 3712, 1776, 3430, 897,
	897, 897, 2496, 2788, 2498, 897, 2500, 3328, 3278, 3198,
	2562, 2554, 3279, 1037, 540, 897, 1748, 3559, 2052, 2519,
	832, 2309, 788, 1378, 2584, 787, 720, 2054, 2521, 2520,
	1750, 2517, 897, 1915, 2928, 2560, 1013, 1753, 2299, 2530,
	2522, 3669, 3374, 1985, 2525, 3786, 1865, 3724, 1454, 2103,
	3722, 541, 2314, 542, 2510, 3281, 2787, 1616, 3573, 1982,
	1781, 3476, 789, 1777, 3148, 1748, 2540, 2853, 3284, 1826,
	1609, 2579, 2580, 2790, 3694, 1035, 2583, 1030, 530, 1750,
	1453, 1616, 2655, 3133, 3756, 3278, 3194, 1453, 1988, 3279,
	1763, 1721, 1752, 1448, 2575, 2932, 1619, 3437, 897, 897,
	897, 2552, 2730, 3779, 1023, 1667, 2040, 897, 897, 897,
	1614, 3436, 897, 3021, 3417, 3241, 3532, 3149, 3080, 2854,
	1619, 1718, 897, 1017, 1081, 2848, 1617, 2967, 897, 3298,
	897, 2644, 3281, 2765, 2217, 788, 3297, 2761, 1017, 2402,
	2392, 1752, 1012, 2689, 2690, 3284, 1846, 2590, 2557, 3376,
	1617, 1838, 1831, 1522, 1615, 1813, 1081, 3560, 1012, 2211,
	3604, 1978, 2929, 2558, 3757, 1947, 2336, 2563, 1017, 3280,
	1452, 1714, 3151, 1081, 3348, 789, 2389, 1452, 3199, 1749,
	1295, 3460, 2711, 2675, 3458, 1679, 3418, 2776, 1716, 1081,
	1453, 2772, 3759, 1753, 2771, 2727, 2545, 2176, 2735, 2691,
	897, 2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 2523,
	1717, 2701, 1454, 3047, 897, 1900, 2747, 2694, 1015, 1454,
	2654, 2693, 1392, 716, 2256, 1679, 2213, 2720, 2255, 2757,
	2254, 2212, 2253, 1015, 3319, 621, 2396, 2758, 2759, 839,
	1618, 897, 1753, 1055, 2749, 1011, 3280, 1011, 2738, 708,
	3200, 2724, 2699, 3538, 2774, 1535, 2700, 2778, 2755, 1540,
	2683, 2709, 3022, 1015, 1618, 3778, 2725, 2712, 2713, 1979,
	3023, 2717, 3242, 2775, 2705, 842, 2780, 2781, 1744, 2698,
	1452, 3425, 1081, 2315, 1278, 2900, 2791, 2792, 2766, 1276,
	2793, 718, 2376, 1195, 3296, 2762, 2670, 2671, 2672, 1844,
	3365, 1379, 1081, 2799, 3731, 3456, 2710, 3612, 2732, 2733,
	2734, 2715, 2559, 2716, 2337, 2338, 3561, 1195, 2812, 2813,
	2824, 2561, 2814, 3601, 1264, 3247, 3607, 2655, 1195, 1186,
	2750, 2834, 3415, 3036, 2801, 1749, 1265, 2809, 2110, 3733,
	2842, 3539, 1017, 2756, 2688, 3689, 1430, 1673, 3553, 1428,
	1835, 1408, 2706, 1406, 2847, 1654, 1751, 905, 2862, 3396,
	3364, 3240, 2816, 1389, 2667, 2472, 1387, 2731, 3426, 3416,
	2744, 2745, 2944, 2746, 2472, 2789, 2714, 2908, 1195, 1195,
	2795, 2668, 2825, 1751, 1749, 1385, 1383, 1673, 2871, 2632,
	2805, 2804, 2811, 2728, 2806, 2704, 2887, 2807, 3608, 215,
	2823, 533, 534, 2564, 549, 533, 549, 559, 564, 2742,
	2819, 580, 2817, 3540, 2882, 1791, 586, 1676, 2393, 2826,
	2708, 2907, 215, 1791, 2334, 2360, 1381, 2855, 2328, 1081,
	2810, 2277, 1081, 714, 715, 2863, 1648, 1015, 705, 1645,
	1186, 1186, 215, 2845, 1373, 622, 623, 2648, 2640, 2641,
	2642, 2643, 2645, 2646, 1431, 1343, 1939, 1676, 1371, 706,
	707, 1274, 897, 2925, 2924, 1448, 2505, 2504, 897, 897,
	2482, 2883, 897, 897, 897, 1967, 897, 2898, 2902, 1324,
	1949, 2879, 2880, 2881, 2923, 897, 1679, 2884, 1277, 2868,
	1920, 2922, 1703, 1275, 897, 717, 2861, 897, 2877, 1555,
	2707, 3315, 2870, 1081, 1429, 147, 147, 1427, 2109, 1407,
	1186, 1405, 897, 2885, 2886, 2913, 1347, 2914, 3664, 2915,
	1081, 1388, 2728, 1250, 1386, 3306, 3600, 795, 3346, 3271,
	1679, 1679, 897, 897, 3147, 897, 897, 897, 2947, 533,
	533, 3143, 3100, 1384, 1382, 2919, 3098, 215, 3079, 2846,
	2838, 625, 624, 897, 2964, 2443, 2419, 897, 2407, 1679,
	1679, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	2930, 897, 2527, 2927, 1380, 2399, 2920, 2386, 897, 897,
	1679, 1877, 1875, 1998, 2986, 897, 2956, 2957, 626, 627,
	1870, 1667, 1372, 897, 2952, 1868, 1866, 1857, 1810, 1808,
	1797, 1938, 2154, 2150, 1017, 1017, 1370, 1792, 897, 1273,
	1778, 1765, 1998, 3001, 1754, 3710, 2979, 2983, 3500, 2963,
	2970, 2972, 2973, 2858, 3483, 1457, 842, 1656, 2985, 3726,
	3635, 1667, 2543, 3370, 992, 3363, 3362, 1081, 1673, 1180,
	2473, 1740, 1079, 3029, 2993, 800, 802, 804, 2994, 1229,
	2299, 3052, 2176, 2176, 3025, 2998, 3033, 3000, 993, 2299,
	3485, 2318, 3159, 3492, 2297, 897, 1762, 1425, 1426, 1911,
	1317, 1843, 2148, 2317, 3634, 3493, 1316, 3075, 1937, 1936,
	897, 897, 1673, 1673, 2974, 600, 3026, 1918, 3300, 2152,
	2153, 2151, 1464, 1465, 3040, 3041, 3547, 1369, 3519, 1015,
	1015, 3494, 3248, 1464, 1465, 897, 897, 2992, 1676, 2339,
	2544, 1673, 1673, 2960, 3038, 2995, 1458, 2996, 3043, 3044,
	1012, 3727, 2321, 1461, 147, 3720, 897, 1711, 2357, 544,
	2976, 1467, 3034, 1195, 2355, 1012, 1195, 3054, 2323, 3599,
	3055, 2356, 1673, 2147, 2149, 1679, 1317, 1466, 3569, 994,
	2325, 1317, 1676, 1676, 3566, 3496, 3142, 3132, 1466, 653,
	3753, 3124, 3062, 2324, 693, 1012, 3112, 3114, 2426, 2198,
	1195, 3495, 2176, 2176, 2176, 1706, 3107, 897, 555, 1661,
	2736, 1676, 1676, 3123, 3083, 1017, 897, 3777, 3497, 2638,
	2639, 3139, 1464, 1465, 2291, 2292, 3568, 3119, 1532, 3111,
	3161, 1195, 1195, 1195, 2432, 2289, 2290, 3153, 2766, 1357,
	3220, 3099, 1676, 3101, 2105, 1356, 3156, 1195, 3140, 3067,
	2334, 3141, 2291, 1081, 2289, 2138, 1410, 3216, 3173, 1409,
	3071, 3066, 2975, 1549, 1835, 2472, 3152, 1548, 3796, 1013,
	3766, 1013, 3739, 3529, 3450, 1081, 3409, 1011, 897, 897,
	3407, 3334, 3264, 3184, 897, 897, 1679, 3064, 3165, 897,
	897, 3186, 897, 1011, 3185, 3144, 897, 3145, 3127, 3126,
	3155, 3125, 3096, 3154, 3091, 2878, 3157, 897, 3163, 2852,
	1015, 2850, 2487, 1028, 3162, 2486, 2436, 2068, 2411, 3174,
	3175, 3169, 1667, 897, 2387, 3168, 3176, 3183, 3182, 3180,
	3179, 2270, 2269, 1535, 2070, 3201, 1935, 1673, 3210, 1934,
	1933, 1038, 1932, 1860, 1859, 1858, 3167, 1841, 580, 1821,
	1820, 3195, 1816, 1815, 1814, 3202, 1812, 3190, 1811, 1424,
	1423, 1304, 1303, 3214, 1302, 1301, 1667, 1667, 1300, 1012,
	1299, 215, 1298, 215, 215, 1177, 1297, 215, 1296, 1294,
	1017, 1289, 1288, 1287, 1286, 1285, 1245, 2180, 1017, 1244,
	215, 1207, 1081, 1243, 1081, 1667, 1667, 1242, 1241, 1240,
	1234, 1017, 1228, 1226, 3253, 3498, 1225, 1676, 1072, 1071,
	3499, 1081, 1070, 1069, 1231, 1040, 1039, 3239, 975, 1712,
	806, 792, 3428, 3285, 1418, 77, 1667, 1249, 1236, 1254,
	897, 640, 215, 215, 72, 1177, 3095, 648, 3268, 3269,
	3614, 2782, 2364, 1919, 1377, 215, 1921, 2719, 1673, 3292,
	2239, 3592, 1291, 3291, 3224, 2600, 1081, 3250, 3251, 3301,
	3525, 1081, 3303, 3304, 3390, 3259, 215, 215, 215, 3255,
	1177, 3252, 3256, 2108, 1553, 1015, 3260, 74, 580, 3302,
	215, 215, 881, 1015, 2724, 927, 3326, 3325, 1081, 3272,
	3290, 3320, 3270, 1195, 3249, 705, 1015, 3082, 2462, 3323,
	1187, 3322, 3254, 1665, 1199, 1666, 849, 1084, 1722, 887,
	1738, 1731, 2271, 2158, 904, 3329, 901, 1668, 1676, 897,
	1670, 903, 3314, 902, 1669, 3340, 1572, 900, 1664, 2395,
	3350, 2430, 1281, 771, 1081, 1835, 1726, 2064, 3313, 2092,
	3369, 3317, 3366, 3357, 2589, 3321, 897, 897, 897, 1546,
	3336, 3339, 862, 1258, 883, 2089, 215, 1033, 3353, 3349,
	872, 2702, 2865, 3351, 1081, 3341, 3061, 3354, 3344, 1977,
	215, 897, 897, 656, 2635, 2095, 1026, 2176, 2176, 2181,
	2174, 897, 2170, 2420, 1679, 1434, 1524, 2431, 897, 897,
	1067, 1667, 865, 3377, 2062, 1537, 2569, 1987, 2872, 3358,
	2722, 1336, 2265, 1081, 3382, 3631, 1992, 1825, 991, 990,
	989, 1199, 3621, 3618, 3258, 3177, 1081, 2832, 1715, 2283,
	1516, 2839, 877, 1185, 897, 2687, 2901, 1247, 585, 3546,
	897, 3266, 889, 1515, 2371, 2370, 3398, 3535, 897, 1054,
	1679, 1012, 1012, 1053, 1052, 2764, 3784, 897, 3092, 186,
	897, 3412, 3411, 2537, 1358, 3387, 897, 1455, 1447, 183,
	3402, 3403, 3404, 185, 3406, 2176, 2176, 2176, 2176, 2176,
	2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176,
	2176, 2176, 2176, 2176, 3410, 2176, 3432, 1081, 184, 3459,
	1195, 3433, 3330, 3109, 3449, 19, 2834, 18, 17, 3468,
	94, 38, 1667, 3439, 2566, 2567, 16, 122, 897, 897,
	3451, 121, 3473, 120, 3484, 119, 3457, 118, 117, 3472,
	116, 897, 897, 111, 115, 114, 3488, 3480, 113, 112,
	3467, 3503, 3504, 3482, 110, 109, 3507, 897, 1679, 108,
	107, 3447, 106, 105, 104, 103, 1673, 217, 3487, 3486,
	3481, 102, 3501, 101, 1079, 100, 3479, 99, 98, 533,
	897, 3353, 97, 897, 3441, 3442, 96, 3478, 95, 576,
	573, 3514, 2180, 52, 51, 93, 92, 3531, 15, 36,
	215, 897, 215, 3541, 3388, 13, 215, 56, 57, 12,
	3523, 31, 3515, 3516, 32, 83, 82, 1186, 1207, 30,
	1177, 215, 1673, 215, 3548, 3530, 897, 897, 215, 1207,
	549, 14, 29, 215, 1207, 897, 1676, 3555, 897, 580,
	1195, 27, 1012, 3388, 2661, 2662, 2663, 10, 3518, 8,
	1195, 1195, 7, 33, 1633, 11, 2001, 152, 3570, 151,
	150, 3572, 76, 149, 148, 75, 3583, 1195, 25, 3563,
	3564, 3472, 2180, 2180, 3562, 3567, 9, 3574, 144, 3469,
	897, 3575, 3137, 71, 3579, 1011, 146, 3580, 145, 3588,
	143, 3589, 1676, 142, 141, 69, 140, 3581, 3582, 139,
	1011, 1013, 70, 3609, 138, 3587, 23, 5, 1081, 55,
	6, 3372, 897, 897, 3586, 897, 2909, 1013, 87, 3611,
	1673, 3610, 3620, 3623, 3629, 860, 88, 34, 67, 66,
	1011, 65, 22, 54, 21, 176, 175, 174, 3633, 173,
	168, 3636, 167, 3616, 172, 170, 169, 171, 3649, 166,
	3648, 3596, 178, 177, 897, 897, 897, 3625, 180, 164,
	160, 159, 163, 165, 162, 161, 3640, 158, 3643, 3637,
	3645, 179, 3638, 1611, 3676, 62, 897, 137, 136, 135,
	134, 3681, 133, 3624, 132, 3662, 3628, 3663, 3660, 3661,
	1676, 131, 2180, 2180, 2180, 61, 20, 2, 3697, 1,
	215, 0, 0, 3699, 3679, 0, 0, 1012, 3701, 0,
	0, 0, 0, 0, 0, 1012, 3707, 897, 0, 0,
	1667, 0, 3711, 0, 3706, 2432, 3698, 0, 1012, 0,
	3703, 3704, 3705, 0, 0, 3708, 0, 0, 0, 0,
	0, 0, 0, 592, 215, 3723, 3719, 3721, 215, 3728,
	3717, 3718, 0, 215, 0, 0, 3620, 3729, 3730, 3623,
	3732, 897, 0, 897, 0, 3736, 3742, 3741, 3747, 0,
	3735, 215, 0, 215, 3633, 215, 1667, 3744, 0, 533,
	3740, 3746, 0, 3748, 3743, 0, 3745, 0, 0, 0,
	0, 0, 0, 1861, 0, 0, 3762, 3760, 0, 0,
	0, 0, 0, 0, 1011, 0, 3770, 0, 0, 3767,
	3772, 0, 0, 215, 897, 897, 0, 0, 3768, 3775,
	0, 1199, 897, 0, 897, 897, 0, 3781, 2001, 0,
	3787, 848, 580, 3788, 0, 0, 705, 0, 3791, 0,
	0, 0, 0, 597, 0, 215, 0, 1177, 215, 0,
	3794, 0, 0, 0, 3798, 3795, 0, 0, 0, 3801,
	0, 580, 3803, 897, 3804, 0, 3806, 3797, 215, 3808,
	0, 3800, 0, 0, 1667, 0, 0, 215, 215, 0,
	215, 0, 215, 0, 215, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 3782, 3783, 0, 0, 0,
	1944, 0, 0, 1945, 0, 1946, 0, 0, 0, 0,
	0, 0, 602, 0, 0, 0, 215, 0, 0, 2940,
	2941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3805, 0, 599, 564, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1882, 0, 0, 0, 0,
	0, 0, 0, 1199, 0, 0, 1893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1902,
	1903, 1904, 0, 0, 0, 2176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3002, 3003, 3004,
	3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014,
	3015, 3016, 3017, 3018, 3019, 3020, 0, 3024, 2176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 860, 1464, 1465, 0, 860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 1165, 0, 0, 1495, 1165, 2180, 2180, 0,
	0, 0, 1467, 0, 0, 0, 1011, 1011, 0, 1464,
	1465, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 533, 0, 1466,
	1495, 0, 596, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 0, 0, 0, 1464, 1465, 0, 215, 0,
	533, 0, 0, 0, 1466, 0, 0, 0, 593, 0,
	0, 2176, 215, 0, 1486, 0, 1495, 0, 0, 0,
	0, 0, 1483, 1467, 0, 2180, 2180, 2180, 2180, 2180,
	2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
	2180, 2180, 2180, 2180, 0, 2180, 603, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 595, 1472, 1013,
	0, 0, 0, 0, 2943, 0, 0, 0, 0, 0,
	0, 549, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2307, 0, 0, 0, 0, 848,
	0, 0, 215, 848, 0, 0, 0, 1011, 0, 0,
	0, 1494, 1496, 215, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 215, 1487, 0, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 1209, 0, 1213, 0,
	1219, 215, 2380, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	2415, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	2307, 0, 533, 0, 0, 2435, 0, 0, 1487, 0,
	0, 215, 0, 0, 215, 0, 215, 0, 215, 0,
	0, 0, 63, 1177, 699, 698, 0, 0, 0, 0,
	1339, 0, 2455, 705, 1488, 2307, 2307, 64, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 68,
	0, 1493, 0, 0, 0, 0, 2638, 2639, 1013, 2656,
	2657, 2658, 0, 215, 1177, 215, 0, 2374, 1207, 1488,
	1207, 0, 1011, 1177, 0, 1177, 2949, 1177, 0, 0,
	1011, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1011, 1396, 0, 0, 0, 215, 215,
	215, 215, 1177, 215, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 78, 0, 0, 0,
	0, 2653, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 79, 86, 0, 0, 215, 0, 0, 1165,
	0, 1464, 1465, 0, 215, 0, 2445, 0, 0, 0,
	0, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1199, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 1517, 1518, 1519, 1520, 1521,
	860, 80, 0, 0, 1484, 1480, 1165, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 1466, 0, 0, 0,
	2644, 0, 0, 0, 1534, 0, 1486, 0, 0, 0,
	1547, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1207, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2659, 0, 0, 2938, 3395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 2654,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	3420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1605, 1605, 1605, 0, 0, 0, 0,
	0, 0, 0, 1494, 1496, 0, 1165, 0, 0, 0,
	1013, 1013, 0, 153, 84, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	215, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 215, 0, 123, 0, 0,
	533, 0, 0, 0, 1487, 533, 0, 0, 533, 0,
	0, 533, 533, 0, 0, 0, 848, 533, 0, 0,
	0, 0, 189, 0, 0, 215, 2655, 0, 0, 0,
	0, 0, 0, 0, 0, 2180, 0, 1207, 0, 0,
	0, 0, 0, 3522, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1207, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 2307, 2307, 215, 181, 2180, 0,
	2307, 0, 0, 2768, 0, 182, 0, 0, 0, 0,
	0, 2307, 2768, 1493, 2307, 2768, 2768, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 215, 215,
	215, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 1177, 0, 0, 0, 0, 0, 2650, 2651, 2652,
	0, 1013, 0, 0, 2649, 2647, 2648, 2640, 2641, 2642,
	2643, 2645, 2646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2828, 0, 0, 2830, 2307, 0,
	0, 215, 0, 0, 0, 215, 0, 1254, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 0, 0, 0,
	0, 2180, 0, 0, 2415, 0, 0, 1177, 0, 215,
	0, 0, 2307, 0, 533, 1495, 0, 0, 0, 0,
	0, 2307, 1467, 0, 1165, 0, 0, 0, 0, 0,
	215, 215, 0, 0, 0, 0, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 1466,
	0, 0, 0, 215, 2415, 0, 0, 2415, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	2180, 2180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2820, 0, 2638, 2639, 0, 2656, 2657, 2658,
	0, 0, 0, 0, 2918, 0, 0, 1177, 215, 0,
	215, 0, 0, 0, 0, 0, 2843, 0, 0, 2937,
	1165, 0, 0, 0, 0, 0, 1013, 2849, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 215, 0, 0, 0, 1013, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2893, 2894, 0,
	0, 0, 0, 0, 0, 0, 1494, 1496, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 1165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1976, 0, 1980, 0,
	0, 0, 0, 0, 0, 1994, 0, 1487, 2644, 0,
	0, 0, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 0, 2043, 0,
	2045, 2046, 2047, 2048, 0, 0, 0, 0, 0, 0,
	0, 215, 215, 63, 0, 0, 0, 0, 0, 0,
	2072, 0, 0, 0, 0, 0, 0, 0, 64, 1165,
	0, 0, 1534, 533, 533, 0, 2087, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 1493, 2654, 0, 0,
	0, 0, 2117, 2120, 2123, 2126, 0, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 1488, 0, 1207, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 1165, 0, 0, 0, 2172, 0, 2183, 2185, 2190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 89, 0,
	0, 0, 0, 79, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2655, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 215, 80, 0, 0, 0, 0, 0, 0, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 2307, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 2455, 2455, 0, 0,
	63, 0, 705, 705, 2307, 0, 0, 2415, 2415, 0,
	0, 705, 2307, 0, 0, 64, 125, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 42, 0, 127, 0, 0, 0, 0,
	0, 0, 3121, 0, 0, 2650, 2651, 2652, 2262, 41,
	0, 73, 2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645,
	2646, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 44, 59, 0, 0, 0, 3225, 45,
	0, 2382, 0, 2384, 78, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 43, 89, 0, 0, 0, 0,
	79, 86, 0, 0, 153, 84, 0, 85, 0, 0,
	3170, 3171, 3172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 46, 0, 0, 700, 0, 0, 215, 123, 0,
	0, 0, 0, 1207, 0, 215, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2307, 2307, 2307, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 1207, 0,
	0, 0, 0, 0, 0, 0, 2307, 0, 2768, 0,
	157, 1207, 1207, 215, 0, 0, 0, 0, 188, 0,
	0, 2502, 0, 0, 215, 215, 0, 0, 181, 0,
	0, 1464, 1465, 0, 0, 0, 182, 0, 2307, 0,
	0, 0, 3332, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 1495, 0, 0, 0, 215, 156, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 1517, 1518, 0,
	0, 0, 0, 906, 81, 0, 0, 0, 0, 0,
	0, 1165, 0, 0, 47, 0, 1466, 0, 0, 1207,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 1483, 60, 0, 0, 0, 0,
	50, 153, 84, 1165, 85, 216, 48, 0, 0, 0,
	129, 0, 2549, 2550, 0, 0, 49, 0, 2556, 0,
	1165, 0, 0, 187, 0, 0, 0, 0, 216, 0,
	0, 53, 0, 0, 0, 123, 1165, 2570, 2571, 0,
	0, 0, 0, 2087, 0, 126, 0, 860, 216, 0,
	0, 0, 2578, 0, 0, 1489, 1490, 1491, 1492, 0,
	189, 860, 0, 0, 0, 1472, 0, 0, 2592, 2307,
	0, 2768, 0, 0, 3414, 0, 0, 0, 0, 0,
	0, 0, 215, 124, 0, 2604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 1494, 1496, 188, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 3414, 0, 1481, 1482, 1165,
	0, 0, 0, 2307, 0, 0, 1464, 1465, 0, 0,
	0, 3475, 0, 0, 156, 0, 0, 3, 0, 1165,
	0, 0, 0, 1207, 1487, 0, 0, 1495, 0, 0,
	2190, 2190, 2190, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1605, 215, 215, 0, 0,
	0, 0, 0, 2692, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 2981, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 848, 1467, 0, 0, 0, 0, 0,
	0, 1488, 3332, 0, 0, 0, 0, 848, 0, 0,
	1489, 1490, 1491, 1492, 215, 0, 1165, 0, 0, 1165,
	1472, 1466, 0, 2768, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 2785, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 1207, 0,
	1207, 0, 0, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3605, 0, 0, 1464, 1465, 0,
	1207, 2555, 0, 215, 0, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 215, 2307, 0, 0, 1495, 0,
	1489, 1490, 1491, 1492, 0, 1467, 0, 1165, 0, 1487,
	1472, 215, 0, 0, 0, 0, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 1466, 0, 0, 0, 2981, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 1494, 1496,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	2638, 2639, 2307, 2656, 2657, 2658, 0, 0, 0, 0,
	0, 0, 2548, 0, 0, 0, 0, 0, 1493, 1487,
	2948, 0, 3414, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 1488, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 1207,
	0, 2307, 0, 0, 1165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2653, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1994, 0, 0, 0, 1494,
	1496, 2935, 2936, 0, 0, 2939, 0, 0, 0, 2942,
	0, 0, 0, 0, 0, 0, 0, 0, 2946, 0,
	0, 0, 0, 1481, 1482, 0, 0, 2953, 1493, 0,
	2692, 0, 0, 0, 0, 0, 0, 216, 1085, 216,
	216, 0, 1085, 216, 1085, 2965, 1488, 0, 1085, 0,
	1487, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 2644, 2987, 2988, 0, 2989, 2990,
	2991, 0, 0, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 2997, 0, 0, 0,
	2999, 0, 0, 0, 0, 0, 0, 1085, 216, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 63, 0, 2659, 0, 0,
	0, 3027, 3028, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 216, 216, 216, 0, 3037, 1085, 0, 1493,
	0, 1085, 68, 0, 0, 1085, 216, 216, 0, 0,
	0, 3046, 0, 2654, 0, 1085, 0, 1488, 0, 0,
	1165, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 1165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3076, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 216, 3085, 3088, 79, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 0, 3108,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	2655, 0, 0, 0, 0, 0, 0, 1007, 68, 0,
	0, 0, 1484, 1480, 80, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 0, 0, 0, 0, 0, 1165,
	0, 1165, 73, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 1165, 0,
	1605, 0, 0, 0, 0, 0, 0, 0, 0, 3164,
	0, 0, 0, 214, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 79, 86, 0, 0, 0, 615, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 0, 0, 1165, 0,
	0, 2650, 2651, 2652, 0, 0, 615, 0, 2649, 2647,
	2648, 2640, 2641, 2642, 2643, 2645, 2646, 0, 0, 81,
	0, 3203, 3204, 0, 0, 1165, 0, 3208, 3209, 0,
	80, 0, 3212, 3213, 0, 0, 0, 0, 0, 3217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3221, 0, 0, 0, 0, 0, 153, 84, 0, 85,
	0, 0, 0, 0, 0, 0, 3226, 0, 0, 0,
	0, 1165, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 216, 0, 0, 0, 700, 0, 0, 0,
	123, 0, 0, 0, 0, 1085, 0, 216, 216, 216,
	0, 1165, 0, 0, 216, 0, 0, 0, 0, 216,
	0, 1014, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	1165, 0, 1085, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 157, 1165, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 0, 3088, 0, 0, 0, 0, 182, 0,
	0, 0, 153, 84, 0, 85, 0, 860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 156,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 700, 64, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 1165, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 3088, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1085, 216, 0, 157, 0,
	0, 0, 1085, 0, 0, 0, 188, 0, 0, 3383,
	3384, 3385, 78, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 0, 89, 182, 0, 0, 0, 79, 86,
	0, 0, 0, 0, 3393, 3394, 0, 0, 0, 0,
	216, 0, 0, 0, 216, 1333, 0, 0, 0, 216,
	0, 3401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 216,
	0, 216, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3088, 0, 0, 0, 0, 0, 0,
	0, 3438, 0, 0, 0, 0, 0, 0, 0, 216,
	3445, 0, 0, 848, 0, 0, 0, 0, 0, 3452,
	0, 0, 0, 0, 0, 1085, 0, 1085, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1085, 216, 0, 0, 216, 1165, 0, 0, 0, 0,
	860, 0, 0, 1085, 1085, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 3088, 3088, 216, 216, 0, 216, 0, 216, 0,
	216, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 216, 0, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 3534, 0, 0, 3537, 0, 0, 153,
	84, 0, 85, 0, 0, 214, 0, 214, 214, 0,
	0, 214, 0, 0, 3088, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 615, 0, 0, 0, 0, 700,
	1085, 0, 0, 123, 2638, 2639, 0, 2656, 2657, 2658,
	0, 0, 0, 0, 0, 0, 0, 0, 3088, 0,
	0, 3088, 0, 0, 0, 1283, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 214, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1308, 1308, 214,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 1338, 0, 0, 0, 157, 0, 0, 0, 2653,
	214, 214, 214, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 214, 214, 1085, 929, 0, 0,
	0, 182, 0, 0, 0, 0, 848, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 1417, 3659, 3659, 3659,
	0, 0, 0, 0, 0, 0, 0, 0, 2644, 0,
	0, 0, 1466, 0, 0, 1085, 0, 0, 0, 3680,
	214, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 214, 0, 0, 0, 216, 0,
	2660, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3659, 2659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 2654, 0, 0,
	0, 1472, 0, 0, 3088, 1085, 3088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 0, 1085, 0, 1018, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 1510, 0, 1511, 3659, 3776, 216,
	0, 0, 0, 1481, 1482, 3780, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 216, 1085, 0, 0,
	1487, 1085, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 2655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 1643, 0, 0, 0,
	216, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1652, 0, 1184, 1627, 0, 1014, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	216, 0, 216, 0, 216, 214, 1627, 214, 0, 0,
	1085, 1085, 615, 1085, 0, 0, 0, 615, 0, 1493,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 216, 0, 0, 0, 2650, 2651, 2652, 0, 1505,
	0, 0, 2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645,
	2646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 216, 216, 216, 0, 216,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 91, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 3232, 0,
	0, 0, 3231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 1823, 0, 0, 0, 1830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 1283, 214, 1849, 0, 1849, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 214, 0, 214,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 1184, 843, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 1018, 0, 1018, 0,
	0, 0, 1018, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 1830, 0, 1001, 1897, 0,
	749, 0, 785, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1914, 214,
	0, 0, 214, 0, 756, 0, 0, 1085, 1924, 0,
	1926, 1018, 1928, 0, 1930, 0, 1931, 0, 0, 768,
	754, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 214, 0, 214, 0, 214, 0, 214, 1085,
	214, 0, 755, 0, 0, 0, 1948, 758, 0, 0,
	0, 1018, 791, 0, 220, 1018, 1085, 0, 0, 1018,
	765, 766, 0, 0, 0, 0, 778, 0, 0, 1018,
	214, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	786, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 784, 1018, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 216, 216, 0, 0, 608,
	0, 0, 0, 216, 0, 0, 0, 761, 0, 0,
	0, 0, 0, 0, 0, 753, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	770, 769, 0, 0, 0, 0, 0, 216, 764, 0,
	1085, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 787, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1085, 0, 0, 0, 1014, 0, 0, 216,
	0, 0, 2246, 0, 0, 0, 0, 759, 0, 0,
	0, 0, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 0, 214, 0, 782, 783,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 216, 1085, 216, 0, 0, 0,
	0, 0, 0, 0, 780, 0, 0, 0, 0, 0,
	0, 776, 0, 0, 773, 0, 0, 0, 0, 0,
	774, 0, 0, 751, 0, 788, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 752, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 775, 0, 0, 0, 772, 0, 0, 1018,
	0, 0, 0, 0, 687, 789, 1085, 0, 0, 0,
	0, 0, 1680, 777, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 1018, 214, 669, 0, 0,
	0, 91, 0, 91, 779, 91, 0, 214, 0, 0,
	1184, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 781, 0, 0, 670,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 671,
	0, 0, 0, 0, 0, 615, 0, 1830, 0, 0,
	0, 0, 0, 0, 2406, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 692, 843, 91, 91, 214, 0,
	0, 2437, 0, 0, 1308, 91, 1308, 0, 1308, 0,
	0, 673, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 214, 0,
	214, 674, 214, 0, 0, 0, 0, 2481, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 2489, 676, 2492, 0, 0, 0, 0,
	0, 214, 0, 602, 0, 0, 0, 91, 1018, 1018,
	0, 0, 0, 0, 0, 0, 1018, 214, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 691, 2513, 1184,
	2515, 1184, 0, 2518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 214, 214, 214, 0, 214, 0, 214,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 2546, 0, 1085, 0, 0, 1085,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	214, 0, 216, 0, 0, 0, 0, 0, 214, 1082,
	216, 1527, 0, 1082, 0, 1196, 0, 216, 0, 1196,
	0, 0, 0, 1085, 0, 0, 0, 0, 1533, 0,
	0, 0, 1539, 0, 0, 0, 0, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 1018, 0, 1018, 1085, 1085, 1085, 694, 0, 679,
	0, 1018, 0, 0, 1018, 0, 0, 0, 1196, 0,
	1085, 0, 0, 0, 0, 216, 1085, 1018, 1018, 1018,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 681, 1085, 0,
	0, 0, 0, 689, 0, 0, 682, 0, 1196, 0,
	0, 0, 1196, 0, 0, 0, 1196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 683, 690,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	1625, 0, 1628, 0, 91, 0, 0, 0, 0, 686,
	0, 0, 0, 0, 685, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	0, 0, 1680, 1680, 1018, 0, 0, 0, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 1085, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	216, 216, 0, 0, 1085, 0, 2760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	214, 1085, 216, 0, 0, 0, 1085, 0, 2798, 2800,
	2406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 214, 214, 214, 0, 0, 0, 1018, 0,
	0, 1627, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 214, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2840, 0, 0, 0, 2844, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 630, 0, 0, 214, 0, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 1085, 0, 0, 1018,
	1184, 1184, 0, 1014, 0, 0, 1082, 0, 0, 1085,
	0, 0, 0, 0, 0, 608, 0, 0, 216, 0,
	608, 0, 0, 2897, 214, 214, 0, 632, 650, 1018,
	0, 0, 1196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 843,
	0, 843, 633, 1082, 0, 634, 1680, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2921, 0,
	1184, 0, 657, 0, 0, 0, 0, 0, 635, 0,
	1085, 1018, 0, 1085, 0, 1018, 0, 0, 0, 655,
	0, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 2933, 0, 0, 0, 0, 0, 636,
	0, 0, 216, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 637,
	0, 0, 638, 0, 0, 0, 0, 659, 0, 0,
	0, 602, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 1018, 0, 1018, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 825, 825, 1018,
	0, 0, 0, 0, 0, 1196, 1196, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	216, 0, 0, 1085, 0, 0, 641, 0, 0, 0,
	0, 0, 0, 1085, 1085, 0, 0, 0, 0, 0,
	0, 0, 2061, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 1533, 0, 0, 0,
	1533, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 1014, 0, 0, 216,
	0, 1085, 0, 0, 0, 0, 0, 643, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 601, 1196, 0, 1196, 0,
	1196, 0, 0, 0, 0, 651, 0, 0, 1196, 0,
	0, 1196, 1001, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1196, 1196, 1196, 0, 1628, 0,
	0, 0, 0, 649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 645, 0, 0, 662,
	0, 661, 0, 0, 646, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 647, 0, 0,
	0, 0, 654, 0, 0, 0, 3136, 663, 0, 660,
	0, 0, 0, 0, 1083, 603, 0, 0, 1083, 0,
	1197, 3146, 0, 0, 1197, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 1197, 0, 0, 0, 0, 0, 3188,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 1018, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1197, 91, 1018, 0, 1197, 0, 0,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 0, 1018, 0, 0, 91, 0, 91, 0,
	0, 0, 0, 0, 0, 1018, 0, 1082, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1680, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 1197, 0, 91, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1680, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1627, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	1018, 0, 0, 3305, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 2406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 1018, 1196, 0, 214, 214,
	0, 2406, 0, 0, 0, 0, 3345, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 1082, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 1533, 1196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1680, 0, 0, 0, 1197, 0, 0,
	0, 1196, 1196, 0, 1196, 0, 214, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 1196, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1680, 1680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 1680, 1680, 0, 0,
	0, 0, 0, 0, 0, 1001, 3513, 1184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1680, 0, 0,
	214, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1197, 1197, 0, 0, 1018, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3571, 0, 0, 0, 0, 0,
	0, 91, 91, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 91, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3613, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 1018, 3630, 0, 0, 0, 0, 0,
	0, 0, 1680, 0, 0, 0, 0, 214, 0, 0,
	0, 3642, 0, 0, 0, 0, 0, 0, 214, 1001,
	0, 1197, 843, 1197, 0, 1197, 0, 1018, 0, 0,
	0, 0, 0, 1197, 0, 214, 1197, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 91, 91, 1197,
	1197, 1197, 0, 0, 0, 0, 0, 0, 1018, 1018,
	1018, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1680, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 1466, 1018, 0, 0, 0, 1018,
	0, 1018, 0, 0, 1486, 0, 1082, 0, 1018, 0,
	0, 0, 1483, 0, 0, 0, 0, 1196, 1018, 0,
	0, 0, 1083, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1196, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 0, 0, 1018, 0,
	0, 1001, 1001, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1018, 0, 0, 0, 0,
	1018, 0, 1196, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 1083, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 1018, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 1082, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1680, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 1083, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 1680, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 1083, 0, 0, 0, 1197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 1018, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1680, 1197, 1197, 0, 1197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	2613, 0, 0, 0, 2614, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 1018, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 1018, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 0, 0, 1018, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 1196, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 1018, 0, 0, 0, 0,
	0, 1483, 0, 0, 1196, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1196, 1196, 1196, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1196, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 1082, 0,
	0, 0, 1501, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2061, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 1082, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	1505, 0, 1082, 0, 0, 0, 0, 1196, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1466, 0, 0, 1082, 0,
	0, 0, 1197, 0, 0, 1486, 0, 0, 0, 0,
	0, 1083, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1197, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 1503, 1197, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0, 2083,
	0, 0, 0, 2084, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	1082, 0, 0, 0, 1472, 0, 0, 1197, 1197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 91, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 1083, 1511,
	0, 1083, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 1082, 0, 0, 1196, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	1488, 0, 0, 0, 1196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1196, 1196, 0, 0, 1466, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 1486, 0,
	0, 1196, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 3230, 1504, 0, 0, 1514,
	0, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 1197, 0, 0, 1197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	1197, 1197, 1197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1197, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	1083, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 2951, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1197, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 2616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1197,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 1086, 229, 230,
	1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093, 1094,
	231, 233, 232, 234, 235, 480, 481, 1083, 482, 236,
	483, 1095, 237, 238, 239, 240, 241, 1096, 1097, 242,
	484, 485, 486, 1098, 243, 244, 487, 1099, 1166, 1100,
	245, 246, 247, 248, 249, 250, 251, 0, 1101, 253,
	254, 255, 252, 1102, 256, 0, 257, 258, 259, 1103,
	260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108, 1109,
	1110, 263, 264, 265, 266, 0, 267, 488, 489, 1111,
	271, 268, 269, 1112, 272, 270, 1113, 273, 1114, 1115,
	274, 275, 276, 1116, 277, 1117, 278, 279, 1118, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 1119, 221, 1120, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 1121, 296,
	1122, 1123, 960, 297, 298, 494, 495, 299, 300, 1124,
	301, 496, 1125, 497, 302, 1126, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 1127, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	1128, 961, 316, 501, 502, 1129, 503, 1130, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1131, 329, 328, 1132, 330,
	505, 966, 331, 332, 967, 1133, 333, 334, 335, 1134,
	1135, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 1136, 223, 970,
	358, 1137, 506, 359, 507, 361, 362, 1138, 0, 363,
	0, 1139, 1140, 365, 366, 367, 1141, 1142, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 1143, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 1144, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 1145, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 1146, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 1147, 421, 422, 420, 423, 424, 425, 1148, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	1149, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 286, 450, 1152, 451, 519, 520,
	521, 522, 1153, 458, 1154, 452, 453, 523, 454, 524,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 465, 466, 464, 467, 1158, 468, 1159, 0,
	469, 470, 471, 525, 526, 527, 1160, 473, 472, 528,
	1161, 1162, 1163, 1164, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	2224, 0, 0, 0, 0, 0, 0, 0, 2225, 224,
	225, 226, 227, 228, 1086, 229, 230, 1087, 1088, 1089,
	0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 1095, 237,
	238, 239, 240, 241, 1096, 1097, 242, 484, 485, 486,
	1098, 243, 244, 487, 1099, 1166, 1100, 245, 246, 247,
	248, 249, 250, 251, 0, 1101, 253, 254, 255, 252,
	1102, 256, 0, 257, 258, 259, 1103, 260, 959, 261,
	262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264,
	265, 266, 0, 267, 488, 489, 1111, 271, 268, 269,
	1112, 272, 270, 1113, 273, 1114, 1115, 274, 275, 276,
	1116, 277, 1117, 278, 279, 1118, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	1119, 221, 1120, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 1121, 296, 1122, 1123, 960,
	297, 298, 494, 495, 299, 300, 1124, 301, 496, 1125,
	497, 302, 1126, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 1127, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 1128, 961, 316,
	501, 502, 1129, 503, 1130, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1131, 329, 328, 1132, 330, 505, 966, 331,
	332, 967, 1133, 333, 334, 335, 1134, 1135, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 1136, 223, 970, 358, 1137, 506,
	359, 507, 361, 362, 1138, 0, 363, 0, 1139, 1140,
	365, 366, 367, 1141, 1142, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 1143, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 1144, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 1145, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	1146, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 1147, 421,
	422, 420, 423, 424, 425, 1148, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 1149, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 1150, 443, 444, 442, 1151, 445, 446, 447, 448,
	449, 286, 450, 1152, 451, 519, 520, 521, 522, 1153,
	458, 1154, 452, 453, 523, 454, 524, 1155, 455, 456,
	457, 0, 459, 460, 1156, 1157, 461, 462, 463, 465,
	466, 464, 467, 1158, 468, 1159, 0, 469, 470, 471,
	525, 526, 527, 1160, 473, 472, 528, 1161, 1162, 1163,
	1164, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 2959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2961, 224, 225, 226, 227, 228, 1086,
	229, 230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092,
	1093, 1094, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 1095, 237, 238, 239, 240, 241, 1096,
	1097, 242, 484, 485, 486, 1098, 243, 244, 487, 1099,
	1166, 1100, 245, 246, 247, 248, 249, 250, 251, 0,
	1101, 253, 254, 255, 252, 1102, 256, 0, 257, 258,
	259, 1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106,
	1108, 1109, 1110, 263, 264, 265, 266, 0, 267, 488,
	489, 1111, 271, 268, 269, 1112, 272, 270, 1113, 273,
	1114, 1115, 274, 275, 276, 1116, 277, 1117, 278, 279,
	1118, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 1119, 221, 1120, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	1121, 296, 1122, 1123, 960, 297, 298, 494, 495, 299,
	300, 1124, 301, 496, 1125, 497, 302, 1126, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	1127, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 1128, 961, 316, 501, 502, 1129, 503, 1130,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 1131, 329, 328,
	1132, 330, 505, 966, 331, 332, 967, 1133, 333, 334,
	335, 1134, 1135, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 1136,
	223, 970, 358, 1137, 506, 359, 507, 361, 362, 1138,
	0, 363, 0, 1139, 1140, 365, 366, 367, 1141, 1142,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 1143, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 1144, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 1145,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 1146, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 1147, 421, 422, 420, 423, 424, 425,
	1148, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 1149, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 1150, 443, 444, 442,
	1151, 445, 446, 447, 448, 449, 286, 450, 1152, 451,
	519, 520, 521, 522, 1153, 458, 1154, 452, 453, 523,
	454, 524, 1155, 455, 456, 457, 0, 459, 460, 1156,
	1157, 461, 462, 463, 465, 466, 464, 467, 1158, 468,
	1159, 0, 469, 470, 471, 525, 526, 527, 1160, 473,
	472, 528, 1161, 1162, 1163, 1164, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3257, 224, 225, 226, 227, 228, 1086, 229,
	230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093,
	1094, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 1095, 237, 238, 239, 240, 241, 1096, 1097,
	242, 484, 485, 486, 1098, 243, 244, 487, 1099, 1166,
	1100, 245, 246, 247, 248, 249, 250, 251, 0, 1101,
	253, 254, 255, 252, 1102, 256, 0, 257, 258, 259,
	1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 263, 264, 265, 266, 0, 267, 488, 489,
	1111, 271, 268, 269, 1112, 272, 270, 1113, 273, 1114,
	1115, 274, 275, 276, 1116, 277, 1117, 278, 279, 1118,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 1119, 221, 1120, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 1121,
	296, 1122, 1123, 960, 297, 298, 494, 495, 299, 300,
	1124, 301, 496, 1125, 497, 302, 1126, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 1127,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 1128, 961, 316, 501, 502, 1129, 503, 1130, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1131, 329, 328, 1132,
	330, 505, 966, 331, 332, 967, 1133, 333, 334, 335,
	1134, 1135, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 1136, 223,
	970, 358, 1137, 506, 359, 507, 361, 362, 1138, 0,
	363, 0, 1139, 1140, 365, 366, 367, 1141, 1142, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 1143, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 1144, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 1145, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1146, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1147, 421, 422, 420, 423, 424, 425, 1148,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 1149, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 1150, 443, 444, 442, 1151,
	445, 446, 447, 448, 449, 286, 450, 1152, 451, 519,
	520, 521, 522, 1153, 458, 1154, 452, 453, 523, 454,
	524, 1155, 455, 456, 457, 0, 459, 460, 1156, 1157,
	461, 462, 463, 465, 466, 464, 467, 1158, 468, 1159,
	0, 469, 470, 471, 525, 526, 527, 1160, 473, 472,
	528, 1161, 1162, 1163, 1164, 474, 475, 529, 476, 477,
	478, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3389, 0, 224, 225,
	226, 227, 228, 1086, 229, 230, 1087, 1088, 1089, 0,
	1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 1095, 237, 238,
	239, 240, 241, 1096, 1097, 242, 484, 485, 486, 1098,
	243, 244, 487, 1099, 1166, 1100, 245, 246, 247, 248,
	249, 250, 251, 0, 1101, 253, 254, 255, 252, 1102,
	256, 0, 257, 258, 259, 1103, 260, 959, 261, 262,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265,
	266, 0, 267, 488, 489, 1111, 271, 268, 269, 1112,
	272, 270, 1113, 273, 1114, 1115, 274, 275, 276, 1116,
	277, 1117, 278, 279, 1118, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 1119,
	221, 1120, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 1121, 296, 1122, 1123, 960, 297,
	298, 494, 495, 299, 300, 1124, 301, 496, 1125, 497,
	302, 1126, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 1127, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 1128, 961, 316, 501,
	502, 1129, 503, 1130, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1131, 329, 328, 1132, 330, 505, 966, 331, 332,
	967, 1133, 333, 334, 335, 1134, 1135, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 1136, 223, 970, 358, 1137, 506, 359,
	507, 361, 362, 1138, 0, 363, 0, 1139, 1140, 365,
	366, 367, 1141, 1142, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	1143, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	1144, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 1145, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1146,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1147, 421, 422,
	420, 423, 424, 425, 1148, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 1149, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	286, 450, 1152, 451, 519, 520, 521, 522, 1153, 458,
	1154, 452, 453, 523, 454, 524, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 465, 466,
	464, 467, 1158, 468, 1159, 0, 469, 470, 471, 525,
	526, 527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164,
	474, 475, 529, 476, 477, 478, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3312, 0, 224, 225, 226, 227, 228, 1086, 229,
	230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093,
	1094, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 1095, 237, 238, 239, 240, 241, 1096, 1097,
	242, 484, 485, 486, 1098, 243, 244, 487, 1099, 1166,
	1100, 245, 246, 247, 248, 249, 250, 251, 0, 1101,
	253, 254, 255, 252, 1102, 256, 0, 257, 258, 259,
	1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 263, 264, 265, 266, 0, 267, 488, 489,
	1111, 271, 268, 269, 1112, 272, 270, 1113, 273, 1114,
	1115, 274, 275, 276, 1116, 277, 1117, 278, 279, 1118,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 1119, 221, 1120, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 1121,
	296, 1122, 1123, 960, 297, 298, 494, 495, 299, 300,
	1124, 301, 496, 1125, 497, 302, 1126, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 1127,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 1128, 961, 316, 501, 502, 1129, 503, 1130, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1131, 329, 328, 1132,
	330, 505, 966, 331, 332, 967, 1133, 333, 334, 335,
	1134, 1135, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 1136, 223,
	970, 358, 1137, 506, 359, 507, 361, 362, 1138, 0,
	363, 0, 1139, 1140, 365, 366, 367, 1141, 1142, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 1143, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 1144, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 1145, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1146, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1147, 421, 422, 420, 423, 424, 425, 1148,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 1149, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 1150, 443, 444, 442, 1151,
	445, 446, 447, 448, 449, 286, 450, 1152, 451, 519,
	520, 521, 522, 1153, 458, 1154, 452, 453, 523, 454,
	524, 1155, 455, 456, 457, 0, 459, 460, 1156, 1157,
	461, 462, 463, 465, 466, 464, 467, 1158, 468, 1159,
	0, 469, 470, 471, 525, 526, 527, 1160, 473, 472,
	528, 1161, 1162, 1163, 1164, 474, 475, 529, 476, 477,
	478, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3189, 0, 224, 225,
	226, 227, 228, 1086, 229, 230, 1087, 1088, 1089, 0,
	1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 1095, 237, 238,
	239, 240, 241, 1096, 1097, 242, 484, 485, 486, 1098,
	243, 244, 487, 1099, 1166, 1100, 245, 246, 247, 248,
	249, 250, 251, 0, 1101, 253, 254, 255, 252, 1102,
	256, 0, 257, 258, 259, 1103, 260, 959, 261, 262,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265,
	266, 0, 267, 488, 489, 1111, 271, 268, 269, 1112,
	272, 270, 1113, 273, 1114, 1115, 274, 275, 276, 1116,
	277, 1117, 278, 279, 1118, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 1119,
	221, 1120, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 1121, 296, 1122, 1123, 960, 297,
	298, 494, 495, 299, 300, 1124, 301, 496, 1125, 497,
	302, 1126, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 1127, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 1128, 961, 316, 501,
	502, 1129, 503, 1130, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1131, 329, 328, 1132, 330, 505, 966, 331, 332,
	967, 1133, 333, 334, 335, 1134, 1135, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 1136, 223, 970, 358, 1137, 506, 359,
	507, 361, 362, 1138, 0, 363, 0, 1139, 1140, 365,
	366, 367, 1141, 1142, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	1143, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	1144, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 1145, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1146,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1147, 421, 422,
	420, 423, 424, 425, 1148, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 1149, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	286, 450, 1152, 451, 519, 520, 521, 522, 1153, 458,
	1154, 452, 453, 523, 454, 524, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 465, 466,
	464, 467, 1158, 468, 1159, 0, 469, 470, 471, 525,
	526, 527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164,
	474, 475, 529, 476, 477, 478, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2977, 0, 224, 225, 226, 227, 228, 1086, 229,
	230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093,
	1094, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 1095, 237, 238, 239, 240, 241, 1096, 1097,
	242, 484, 485, 486, 1098, 243, 244, 487, 1099, 1166,
	1100, 245, 246, 247, 248, 249, 250, 251, 0, 1101,
	253, 254, 255, 252, 1102, 256, 0, 257, 258, 259,
	1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 263, 264, 265, 266, 0, 267, 488, 489,
	1111, 271, 268, 269, 1112, 272, 270, 1113, 273, 1114,
	1115, 274, 275, 276, 1116, 277, 1117, 278, 279, 1118,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 1119, 221, 1120, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 1121,
	296, 1122, 1123, 960, 297, 298, 494, 495, 299, 300,
	1124, 301, 496, 1125, 497, 302, 1126, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 1127,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 1128, 961, 316, 501, 502, 1129, 503, 1130, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1131, 329, 328, 1132,
	330, 505, 966, 331, 332, 967, 1133, 333, 334, 335,
	1134, 1135, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 1136, 223,
	970, 358, 1137, 506, 359, 507, 361, 362, 1138, 0,
	363, 0, 1139, 1140, 365, 366, 367, 1141, 1142, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 1143, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 1144, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 1145, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1146, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1147, 421, 422, 420, 423, 424, 425, 1148,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 1149, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 1150, 443, 444, 442, 1151,
	445, 446, 447, 448, 449, 286, 450, 1152, 451, 519,
	520, 521, 522, 1153, 458, 1154, 452, 453, 523, 454,
	524, 1155, 455, 456, 457, 0, 459, 460, 1156, 1157,
	461, 462, 463, 465, 466, 464, 467, 1158, 468, 1159,
	0, 469, 470, 471, 525, 526, 527, 1160, 473, 472,
	528, 1161, 1162, 1163, 1164, 474, 475, 529, 476, 477,
	478, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2827, 0, 224, 225,
	226, 227, 228, 1086, 229, 230, 1087, 1088, 1089, 0,
	1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 1095, 237, 238,
	239, 240, 241, 1096, 1097, 242, 484, 485, 486, 1098,
	243, 244, 487, 1099, 1166, 1100, 245, 246, 247, 248,
	249, 250, 251, 0, 1101, 253, 254, 255, 252, 1102,
	256, 0, 257, 258, 259, 1103, 260, 959, 261, 262,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265,
	266, 0, 267, 488, 489, 1111, 271, 268, 269, 1112,
	272, 270, 1113, 273, 1114, 1115, 274, 275, 276, 1116,
	277, 1117, 278, 279, 1118, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 1119,
	221, 1120, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 1121, 296, 1122, 1123, 960, 297,
	298, 494, 495, 299, 300, 1124, 301, 496, 1125, 497,
	302, 1126, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 1127, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 1128, 961, 316, 501,
	502, 1129, 503, 1130, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1131, 329, 328, 1132, 330, 505, 966, 331, 332,
	967, 1133, 333, 334, 335, 1134, 1135, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 1136, 223, 970, 358, 1137, 506, 359,
	507, 361, 362, 1138, 0, 363, 0, 1139, 1140, 365,
	366, 367, 1141, 1142, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	1143, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	1144, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 1145, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1146,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1147, 421, 422,
	420, 423, 424, 425, 1148, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 1149, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	286, 450, 1152, 451, 519, 520, 521, 522, 1153, 458,
	1154, 452, 453, 523, 454, 524, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 465, 466,
	464, 467, 1158, 468, 1159, 0, 469, 470, 471, 525,
	526, 527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164,
	474, 475, 529, 476, 477, 478, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2107, 0, 224, 225, 226, 227, 228, 1086, 229,
	230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093,
	1094, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 1095, 237, 238, 239, 240, 241, 1096, 1097,
	242, 484, 485, 486, 1098, 243, 244, 487, 1099, 1166,
	1100, 245, 246, 247, 248, 249, 250, 251, 0, 1101,
	253, 254, 255, 252, 1102, 256, 0, 257, 258, 259,
	1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 263, 264, 265, 266, 0, 267, 488, 489,
	1111, 271, 268, 269, 1112, 272, 270, 1113, 273, 1114,
	1115, 274, 275, 276, 1116, 277, 1117, 278, 279, 1118,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 1119, 221, 1120, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 1121,
	296, 1122, 1123, 960, 297, 298, 494, 495, 299, 300,
	1124, 301, 496, 1125, 497, 302, 1126, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 1127,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 1128, 961, 316, 501, 502, 1129, 503, 1130, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1131, 329, 328, 1132,
	330, 505, 966, 331, 332, 967, 1133, 333, 334, 335,
	1134, 1135, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 1136, 223,
	970, 358, 1137, 506, 359, 507, 361, 362, 1138, 0,
	363, 0, 1139, 1140, 365, 366, 367, 1141, 1142, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 1143, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 1144, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 1145, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1146, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1147, 421, 422, 420, 423, 424, 425, 1148,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 1149, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 1150, 443, 444, 442, 1151,
	445, 446, 447, 448, 449, 286, 450, 1152, 451, 519,
	520, 521, 522, 1153, 458, 1154, 452, 453, 523, 454,
	524, 1155, 455, 456, 457, 0, 459, 460, 1156, 1157,
	461, 462, 463, 465, 466, 464, 467, 1158, 468, 1159,
	0, 469, 470, 471, 525, 526, 527, 1160, 473, 472,
	528, 1161, 1162, 1163, 1164, 474, 475, 529, 476, 477,
	478, 1178, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1806, 0, 0, 0,
	224, 225, 226, 227, 228, 1086, 229, 230, 1087, 1088,
	1089, 0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 1095,
	237, 238, 239, 240, 241, 1096, 1097, 242, 484, 485,
	486, 1098, 243, 244, 487, 1099, 1166, 1100, 245, 246,
	247, 248, 249, 250, 251, 0, 1101, 253, 254, 255,
	252, 1102, 256, 0, 257, 258, 259, 1103, 260, 959,
	261, 262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263,
	264, 265, 266, 0, 267, 488, 489, 1111, 271, 268,
	269, 1112, 272, 270, 1113, 273, 1114, 1115, 274, 275,
	276, 1116, 277, 1117, 278, 279, 1118, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 1119, 221, 1120, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 1121, 296, 1122, 1123,
	960, 297, 298, 494, 495, 299, 300, 1124, 301, 496,
	1125, 497, 302, 1126, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 962, 308, 309, 1127, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 1128, 961,
	316, 501, 502, 1129, 503, 1130, 318, 963, 504, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 1131, 329, 328, 1132, 330, 505, 966,
	331, 332, 967, 1133, 333, 334, 335, 1134, 1135, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 1136, 223, 970, 358, 1137,
	506, 359, 507, 361, 362, 1138, 0, 363, 0, 1139,
	1140, 365, 366, 367, 1141, 1142, 368, 369, 508, 971,
	370, 972, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 1143, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 1144, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 1145, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 1146, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 1147,
	421, 422, 420, 423, 424, 425, 1148, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 1149, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 1150, 443, 444, 442, 1151, 445, 446, 447,
	448, 449, 286, 450, 1152, 451, 519, 520, 521, 522,
	1153, 458, 1154, 452, 453, 523, 454, 524, 1155, 455,
	456, 457, 0, 459, 460, 1156, 1157, 461, 462, 463,
	465, 466, 464, 467, 1158, 468, 1159, 0, 469, 470,
	471, 525, 526, 527, 1160, 473, 472, 528, 1161, 1162,
	1163, 1164, 474, 475, 529, 476, 477, 478, 1077, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090,
	479, 1091, 1092, 1093, 1094, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 1095, 237, 238, 239,
	240, 241, 1096, 1097, 242, 484, 485, 486, 1098, 243,
	244, 487, 1099, 1166, 1100, 245, 246, 247, 248, 249,
	250, 251, 0, 1101, 253, 254, 255, 252, 1102, 256,
	0, 257, 258, 259, 1103, 260, 959, 261, 262, 1104,
	1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266,
	0, 267, 488, 489, 1111, 271, 268, 269, 1112, 272,
	270, 1113, 273, 1114, 1115, 274, 275, 276, 1116, 277,
	1117, 278, 279, 1118, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 1119, 221,
	1120, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 1121, 296, 1122, 1123, 960, 297, 298,
	494, 495, 299, 300, 1124, 301, 496, 1125, 497, 302,
	1126, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 1127, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 1128, 961, 316, 501, 502,
	1129, 503, 1130, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1131, 329, 328, 1132, 330, 505, 966, 331, 332, 967,
	1133, 333, 334, 335, 1134, 1135, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 1136, 223, 970, 358, 1137, 506, 359, 507,
	361, 362, 1138, 0, 363, 0, 1139, 1140, 365, 366,
	367, 1141, 1142, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 1143,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 1144,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 1145, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1146, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1147, 421, 422, 420,
	423, 424, 425, 1148, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 1149, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 1150,
	443, 444, 442, 1151, 445, 446, 447, 448, 449, 286,
	450, 1152, 451, 519, 520, 521, 522, 1153, 458, 1154,
	452, 453, 523, 454, 524, 1155, 455, 456, 457, 0,
	459, 460, 1156, 1157, 461, 462, 463, 465, 466, 464,
	467, 1158, 468, 1159, 0, 469, 470, 471, 525, 526,
	527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474,
	475, 529, 476, 477, 478, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 1086, 229, 230,
	1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093, 1094,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 1095, 237, 238, 239, 240, 241, 1096, 1097, 242,
	484, 485, 486, 1098, 243, 244, 487, 1099, 1166, 1100,
	245, 246, 247, 248, 249, 250, 251, 0, 1101, 253,
	254, 255, 252, 1102, 256, 0, 257, 258, 259, 1103,
	260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108, 1109,
	1110, 263, 264, 265, 266, 0, 267, 488, 489, 1111,
	271, 268, 269, 1112, 272, 270, 1113, 273, 1114, 1115,
	274, 275, 276, 1116, 277, 1117, 278, 279, 1118, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 1119, 221, 1120, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 1121, 296,
	1122, 1123, 960, 297, 298, 494, 495, 299, 300, 1124,
	301, 496, 1125, 497, 302, 1126, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 1127, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	1128, 961, 316, 501, 502, 1129, 503, 1130, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1131, 329, 328, 1132, 330,
	505, 966, 331, 332, 967, 1133, 333, 334, 335, 1134,
	1135, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 1136, 223, 970,
	358, 1137, 506, 359, 507, 361, 362, 1138, 0, 363,
	0, 1139, 1140, 365, 366, 367, 1141, 1142, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 1143, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 1144, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 1145, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 1146, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 1147, 421, 422, 420, 423, 424, 425, 1148, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	1149, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 286, 450, 1152, 451, 519, 520,
	521, 522, 1153, 458, 1154, 452, 453, 523, 454, 524,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 465, 466, 464, 467, 1158, 468, 1159, 0,
	469, 470, 471, 525, 526, 527, 1160, 473, 472, 528,
	1161, 1162, 1163, 1164, 474, 475, 529, 476, 477, 478,
	2082, 0, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 2079, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 2080, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 2078, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 2081, 0, 0, 0, 0, 0, 0, 880,
	2077, 0, 844, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	187, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 189, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 1329, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 181, 474, 475, 529, 476, 477, 478, 855,
	182, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 1538, 1536, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	187, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 189, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 1329, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 181, 474, 475, 529, 476, 477, 478, 855,
	182, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 1538, 2568, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	187, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 189, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 1329, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 181, 474, 475, 529, 476, 477, 478, 855,
	182, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 1538, 1536, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	2186, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	2191, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 2187, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 2188, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 2127, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 2125, 0, 2124, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 2122, 0, 2121, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 2119, 0,
	2118, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	2116, 0, 1398, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 1397,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 847, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 859, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 3626, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 859, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 3448, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 859, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 3158,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 1606, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 2955,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 880, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 1996,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 1995, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 880, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 859, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 880, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 1606, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 2191, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 1536, 0,
	2196, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 2194, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 2182, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 2171, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 2169, 878,
	2160, 2167, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 2163, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 2164, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 2165, 2162, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 2166, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 2161, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	2157, 878, 2160, 2167, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 2163, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 2164, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 2165, 2162,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 2166, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 2161, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 1544, 0, 880,
	0, 0, 0, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 1975, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 1221, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 1220, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 1215, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 1214, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 1210, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 3658, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	3657, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	3656, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 3658, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	3657, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 2535, 2536, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 2533, 2534, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 1983, 1984,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 2179, 0, 0, 0, 0, 0, 0, 2177, 2178,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 2528, 2529, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 896, 868, 869, 870, 866,
	867, 879, 0, 0, 0, 0, 0, 0, 1736, 1737,
	0, 0, 224, 225, 226, 227, 228, 880, 229, 230,
	0, 878, 0, 0, 0, 920, 884, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 933, 0, 940, 236,
	939, 0, 237, 238, 239, 240, 241, 0, 919, 242,
	978, 979, 486, 0, 243, 244, 926, 0, 907, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 910, 908, 909, 916, 912, 911,
	915, 263, 264, 265, 266, 943, 267, 937, 936, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 928, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 950, 951, 875, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 935, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 948, 949, 299, 300, 0,
	301, 957, 0, 885, 302, 0, 303, 304, 305, 306,
	307, 921, 922, 925, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 961, 316, 930, 931, 0, 891, 0, 318, 963,
	923, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	958, 966, 331, 332, 967, 0, 333, 334, 335, 914,
	913, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 223, 970,
	358, 876, 924, 359, 938, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 952, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 953,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 934, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	864, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 917, 426,
	410, 411, 427, 428, 974, 429, 430, 932, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 977, 437,
	438, 439, 440, 954, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 944, 945,
	946, 947, 0, 458, 0, 452, 453, 955, 454, 956,
	874, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 918, 468, 0, 0,
	469, 470, 471, 525, 941, 976, 0, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 880, 229, 230, 0, 878, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	0, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 3658, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 0, 923, 0, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 0,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 0, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 0,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	3657, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 844, 0, 1016, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 878, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 920, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 919, 242,
	484, 485, 486, 0, 243, 244, 926, 0, 907, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 910, 908, 909, 916, 912, 911,
	915, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 950, 951, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 957, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 921, 922, 925, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	923, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1002, 329, 328, 0, 330,
	958, 966, 331, 332, 967, 0, 333, 334, 335, 914,
	913, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 223, 970,
	358, 0, 924, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 1008, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 952, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 953,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 1010, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 187, 421, 422, 420, 423, 424, 425, 917, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 954, 0, 443, 444, 442, 189, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 955, 454, 956,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 918, 468, 0, 0,
	469, 470, 471, 1329, 526, 527, 0, 473, 472, 528,
	0, 1016, 0, 181, 474, 475, 529, 476, 477, 478,
	0, 182, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	1006, 920, 1630, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 919, 242, 484, 485, 486, 0,
	243, 244, 926, 0, 907, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	910, 908, 909, 916, 912, 911, 915, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 950, 951, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 957, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 921, 922, 925,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 923, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1002, 329, 328, 0, 330, 958, 966, 331, 332,
	967, 0, 333, 334, 335, 914, 913, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 223, 970, 358, 0, 924, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 1008, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	952, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 953, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 1010, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 187, 421, 422,
	420, 423, 424, 425, 917, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 954,
	0, 443, 444, 442, 189, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 955, 454, 956, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 918, 468, 0, 0, 469, 470, 471, 1329,
	526, 527, 0, 473, 472, 528, 0, 0, 0, 181,
	474, 475, 529, 476, 477, 478, 0, 182, 0, 0,
	2685, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 1630, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 919, 242, 484, 485, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 957, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1002, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 223, 970, 358, 0, 924,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 1008,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 1010, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 955, 454, 956, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 998, 0,
	1016, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 1006, 0, 1004,
	920, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 919, 242, 484, 485, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	494, 495, 299, 300, 0, 301, 957, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 501, 502,
	0, 503, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1002, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 223, 970, 358, 0, 924, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 1008, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 515, 1010, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 955, 454, 956, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 0, 1016, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 1006, 920, 1004, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 919,
	242, 484, 485, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 957, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1002, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 223,
	970, 358, 0, 924, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 1008, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 1010, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 955, 454,
	956, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 1016, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 1006, 920, 1004, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 919, 242, 484, 485, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 957, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 223, 970, 358, 0, 924,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 1010, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 955, 454, 956, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 844, 0,
	1194, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 1528,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 1166, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 961, 316, 501, 502,
	0, 503, 0, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 966, 331, 332, 967,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 0, 970, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 187, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 189, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 1329, 526,
	527, 0, 473, 472, 528, 0, 0, 0, 181, 474,
	475, 529, 476, 477, 478, 0, 182, 0, 0, 1326,
	0, 1194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 1166, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 966, 331, 332,
	967, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 0, 970, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 187, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 189, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 1329,
	526, 527, 0, 473, 472, 528, 0, 0, 0, 181,
	474, 475, 529, 476, 477, 478, 0, 182, 0, 0,
	0, 0, 1194, 1193, 0, 0, 0, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 1194, 1193, 0,
	0, 0, 0, 1191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 2892,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	1166, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 966, 331, 332, 967, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	0, 970, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 1194, 1193, 0, 0, 0, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 1200, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1016, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 920, 0, 1335,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	919, 242, 484, 485, 486, 0, 243, 244, 926, 0,
	907, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 910, 908, 909, 916,
	912, 911, 915, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 950, 951, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 957, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 921, 922, 925, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 923, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 958, 966, 331, 332, 967, 0, 333, 334,
	335, 914, 913, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	223, 970, 358, 0, 924, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 952, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 953, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	917, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 954, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 955,
	454, 956, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 918, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 844, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	187, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 189, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 1329, 526, 527, 0, 473, 472, 528, 218,
	0, 0, 181, 474, 475, 529, 476, 477, 478, 0,
	182, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 156, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 0, 1280, 0, 218, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 1644, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 1284, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 2841, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 1284, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 218, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 2433, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	218, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 2980, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 0, 713, 0, 607, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 1888, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 613, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 711, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 612, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 0, 606, 0, 607, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 616, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 613, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 612,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 604, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 1194, 1193, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 1166, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 966, 331, 332,
	967, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 0, 970, 358, 3122, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 1194, 1193, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 2821, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 607, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 613, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 1922, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	612, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 607, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 616, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 613, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 612, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 1362, 0, 1194, 1193, 0, 0, 0,
	0, 1191, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 1166, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	1361, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 966, 331, 332, 967, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 0, 970,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 1360, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 1359, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	1323, 0, 1194, 1193, 0, 0, 0, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1322, 499,
	500, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 1260, 0, 1194,
	1193, 0, 0, 0, 0, 1191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 1166, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 959, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 960, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1259, 499, 500, 360, 962,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 961, 316, 501, 502, 0,
	503, 0, 318, 963, 504, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 966, 331, 332, 967, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 0, 0, 970, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 971, 370, 972, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 973,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 1189, 0, 1194, 1193, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1188, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 1194, 1193, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 1166, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 966, 331, 332,
	967, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 0, 970, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1194, 1193, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 616, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	1166, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 1709, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 966, 331, 332, 967, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	0, 970, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 1194, 1193, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 1194, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 1166, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 959,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	960, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 962, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 961,
	316, 501, 502, 0, 503, 0, 318, 963, 504, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 966,
	331, 332, 967, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 0, 0, 970, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 971,
	370, 972, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 2308, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 2305, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 2312, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 2469, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 2311,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 2466, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 2468, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 2465, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 2310, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 2467, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 2308, 243, 244, 487, 0, 0, 2302,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 2305, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 2312,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	2311, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 2301, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 2310, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 2309, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	1419, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 1422,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 1420, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 1421, 472, 528, 1170, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1172, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 1008, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 1167, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1169, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 1008, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1073, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 1075,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	1008, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 558, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	557, 228, 547, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 550, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 551, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 552, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 546, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 547,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 550, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 551, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 552, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 2803, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 1008, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 2405, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 2404, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1898, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 1829, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 1834,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 1833, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 223, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 1822, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 1824, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 1314, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 1313, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	1311, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1310, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1307, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1306, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 1181, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1183, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 218, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 550, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 551, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 552, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 1929, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 1927, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 223, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 1925,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 223, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1872, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 704, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 703, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 702, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 2469,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 3324,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 537, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 536,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 535, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 218, 3333, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 218, 2456, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 3110, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 2230, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 218, 2456, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 2453, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 1906, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	1896, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 578, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 1047, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 1045, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 579, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	575, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	1048, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 574, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 578, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 568, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 579,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 575, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 1334, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 574,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1320, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 1319,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 1268, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 1267, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 1253, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 1252, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 1248, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 1175,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 578, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 1047, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 1045, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 579, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 575,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 1048,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 574, 520, 521, 522, 0, 458, 0, 452, 1046,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 1029, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 584, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 578, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 568, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 566, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	567, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	579, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 569, 408, 0, 409, 413, 414, 575, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 570, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	574, 520, 521, 522, 0, 458, 0, 452, 572, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 562, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 563, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 560,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 554, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 532, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 218, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 2856, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 2779, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 2777, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 2763, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 2413, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 563, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 1854, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 0, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	1290, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 1230, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 981, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 218, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 0, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 0, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 0, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 0, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 1678, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 0, 1684,
	0, 1674, 236, 1690, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 1699, 1700, 0, 0, 243, 244, 0,
	0, 1166, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 943, 267,
	1688, 1687, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 0, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 1686, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 1695, 1696,
	299, 300, 0, 301, 0, 0, 0, 302, 0, 303,
	304, 305, 306, 307, 0, 0, 0, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 961, 316, 1681, 1682, 0, 1677,
	0, 318, 963, 0, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 0, 966, 331, 332, 967, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 0, 970, 358, 0, 0, 359, 1689, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 0, 971, 370, 972, 0, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	1671, 1672, 0, 381, 0, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 1685, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 0, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 974, 429, 430,
	1683, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 1698, 437, 438, 439, 440, 0, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 1691, 1692, 1693, 1694, 0, 458, 0, 452, 453,
	0, 454, 0, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 0, 1675, 1697, 0,
	473, 472, 0, 0, 0, 0, 0, 474, 475, 0,
	476, 477, 478, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 1486, 0,
	0, 0, 0, 0, 1467, 0, 1483, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	1489, 1490, 1491, 1492, 0, 1494, 1496, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 1502, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 1500, 1495, 1493, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 2615, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 0, 0, 1504,
	0, 2612, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 1487,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 1488, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 1466, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 1487,
	0, 0, 0, 0, 1503, 1472, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1512, 0, 0, 0, 0, 0, 0,
	0, 2611, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1501, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 1502, 0, 0, 0, 0, 1493, 0,
	0, 1500, 1495, 0, 1487, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 1505, 0,
	0, 0, 0, 0, 0, 1501, 1486, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 1503, 1472, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 1505, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 2610, 0, 0, 1504, 0, 0, 1514, 0, 0,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512, 0,
	0, 0, 0, 0, 0, 0, 2084, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 1493, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 1486, 1505, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	1504, 0, 3606, 1514, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 1510, 0, 1511, 1472, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	1487, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 1512, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 1493, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 1505, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 3602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 1504, 0, 3521, 1514, 0, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 1487, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 1486, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 1488,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 1466,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 1487, 0, 0, 0, 0, 1503, 1472, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 1512, 0, 0, 0,
	3520, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 1501, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 1502, 0, 0, 0,
	0, 1493, 0, 0, 1500, 1495, 0, 1487, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 1505, 0, 0, 0, 0, 0, 0, 1501, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 1503, 1472, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 1505, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	3392, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1512, 0, 0, 0, 3287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 1493, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 1486, 1505, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 1504, 0, 3235, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 1510, 0, 1511,
	1472, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 1487, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 1512, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 1493, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 1505, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 3234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 1504, 0, 3233, 1514, 0,
	0, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 1487, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 1488, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 1466, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 1487, 0, 0, 0, 0,
	1503, 1472, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512,
	0, 0, 0, 2984, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 0, 0, 1501, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1502,
	0, 0, 0, 0, 1493, 0, 0, 1500, 1495, 0,
	1487, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 1505, 0, 0, 0, 0, 0,
	0, 1501, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	1503, 1472, 0, 1478, 1479, 1485, 1506, 1484, 1480, 1505,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 0, 2608, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1512, 0, 0, 0, 2607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 1493,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1486, 1505,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 1504, 0, 2606, 1514,
	0, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	1510, 0, 1511, 1472, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 1487, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	1512, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 1493, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 1505, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 2605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 3716,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 1504, 2572, 0,
	1514, 0, 0, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 1487, 0, 0,
	2543, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2544, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 1500, 1495, 0, 1494, 1496, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 1487, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 2204, 0, 0, 0, 1472, 0, 2668,
	1464, 1465, 2667, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	1500, 1495, 0, 0, 0, 2203, 1504, 0, 1467, 1514,
	0, 0, 0, 1513, 1488, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 1466, 1505, 0, 0, 1481,
	1482, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 1503, 0, 1472, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1493, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	1488, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 1505, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 0, 0,
	0, 1504, 0, 1467, 1514, 0, 0, 0, 1513, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	1466, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 841, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	1493, 1514, 0, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 1488, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 1505, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 2966,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1464, 1465, 2674, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 0, 0, 2669, 1504, 0, 1467, 1514,
	0, 0, 0, 1513, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 1466, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1493, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	1488, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 1505, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 0, 0, 2609,
	0, 0, 1467, 0, 0, 0, 0, 1513, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1466,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 1486,
	0, 0, 1472, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 0, 1495, 0,
	1494, 1496, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 1489, 1490,
	1491, 1492, 1466, 0, 0, 0, 0, 0, 1472, 0,
	1502, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 1487, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 1500, 1495, 1512, 1494, 1496, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 1510, 1501, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 1466, 0,
	2636, 1489, 1490, 1491, 1492, 0, 1502, 0, 1486, 0,
	0, 1472, 0, 0, 0, 0, 1483, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 1512, 0, 1514, 0, 0, 0, 0, 1488, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 1481, 1482, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 0, 0, 1488, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 1505, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 1502, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 1488, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 1505, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 1466, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 1486, 0, 0, 1472, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 0, 0, 0, 0, 1512, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474,
}
var sqlPact = [...]int{

	5303, -1000, -1000, -1000, -1000, -1000, -1000, 209, 202, 199,
	197, 196, 194, 192, 175, -1000, -1000, -1000, -1000, -1000,
	-1000, 174, -1000, -1000, 173, -1000, 168, 163, 159, 157,
	-1000, 156, 154, 153, -1000, -1000, -1000, -1000, 150, 149,
	148, 61763, 1878, 75101, 65303, 1732, 56423, 74654, 55976, 74207,
	73760, 147, -1000, 73313, 146, 145, 137, -1000, 72866, -1000,
	1666, -1000, 133, 3681, 47012, 131, 128, 127, 2313, 126,
	-1000, 122, -1000, 8840, 1239, -1000, 120, -1000, 8182, 4285,
	64415, 2327, 118, 116, 46564, 2301, 2369, -1000, -1000, 1749,
	-1000, -1000, 114, 112, 110, 109, 104, 103, 98, 97,
	94, -1000, 93, 90, 89, 88, 87, 86, 85, -1000,
	83, 80, 79, 78, 75, 72, 70, 69, 68, 67,
	66, 64, -1000, 7778, 1636, 1397, 1389, 1374, 1371, 1367,
	863, 61, 60, 58, 57, 56, 51, 48, -1000, 47,
	46, 45, 44, 38, -1000, 36, 35, 161, 31, 30,
	29, 23, 22, 1735, -1000, 1333, 768, 22912, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 79952, 75542, 21, -31, 17, -1000, 2722, 796, 38946,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	499, -1000, -1000, -1000, 277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1787, 699, -1000, -1000, -1000, 72425, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1877, -87, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 697, -1000, 1875, 170, 1810, -1000, -1000,
	-1000, -1000, -1000, 75542, -1000, -1000, 3074, 3073, 1681, 695,
	71984, -1000, 1377, -1000, 829, 25744, -1000, 1108, -1000, 25744,
	276, -1000, -1000, -1000, -1000, -1000, -1000, 3071, 3070, 3067,
	3066, -1000, -1000, 55529, 17216, 55082, 54635, 71537, 16759, 61322,
	50632, -1000, -1000, -1000, 41663, 1046, -1000, -1000, -1000, -1000,
	-1000, -1, 51528, 75542, -1000, 273, -1000, -1000, -1000, -1000,
	-1000, -1000, 32456, 559, 31974, 266, 31492, 253, -1000, -1000,
	-1000, 3064, 3061, 948, 3060, 2654, 79511, 1479, 3058, 1449,
	1007, 883, 3057, 3056, 3055, 3051, 3047, 3044, 1209, 71090,
	2446, 70643, 1464, 50175, 61763, 61763, 2209, 70196, 1186, 1148,
	-1000, -1000, -1000, -1000, 2539, 2367, 2362, 43903, -1000, 3043,
	3042, 3041, 3040, 3039, 79070, 1451, 3037, 2038, 3036, 3034,
	3030, 3028, 3026, 3023, 3022, 3020, 3019, -1000, 60875, 60428,
	59981, 2764, 69749, 49718, -1000, -1000, -1000, 40747, 6701, 6374,
	69302, 42118, 61763, 61763, -1000, -1000, 32926, 105, -1000, -1000,
	-1000, 41663, 2375, -1000, 32926, 105, -1000, 75542, -1000, 2439,
	1577, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1848, 1376, 2897, 49261, 1705, 1202, 2723, 2536, 2522,
	1295, 2101, 2504, 2464, 2463, 2444, 2441, 1410, 2089, 268,
	22430, 1300, 1298, 2431, 2429, 2914, 1637, 1676, 54188, 3018,
	3017, 2679, 2427, 2424, 2374, -1000, -1000, -1000, -1000, 1257,
	-1000, -1000, 57305, -1000, -1000, 1080, -1000, -1000, 1080, -1000,
	-1000, -1000, -1000, -1000, 1041, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1333, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1579, -1000, 1665, -1000, -1000, 2016, 2689, 2689,
	2689, 2761, 487, 480, -1000, 161, -1000, -1000, 87172, -1000,
	-1000, 32926, 32926, 32926, 32926, 32926, 1680, -1000, 693, -1000,
	-1000, 727, -1000, 692, 577, -1000, -1000, -1000, -1000, -1000,
	-1000, 689, -1000, -1000, -1000, -1000, -1000, -1000, 2880, -1000,
	19550, -1000, -1000, -1000, 415, 688, 32926, -1000, -1000, 2922,
	2918, 507, -1000, 261, 842, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2422, 685, 683,
	-1000, 682, 681, 680, 678, 677, -1000, -1000, -1000, 674,
	673, 662, 660, 655, 654, 652, 651, -1000, 1602, -1000,
	-1000, -1000, -1000, -1000, -1000, 621, 620, 620, 620, -1000,
	879, -1000, -1000, -1000, 285, 616, 265, 615, 614, 613,
	650, 649, 648, 644, 643, 642, 641, 640, 637, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 878, -1000, -1000, -1000, -1000,
	-2, 75542, -1000, 499, -2, -1000, -1000, 633, -1000, 26214,
	26214, 26214, -1000, -1000, 1870, 32926, -1000, 1976, -1000, 5,
	5, 762, 39838, -1000, 38037, 762, 219, 730, 43455, -1000,
	2359, -1000, -1000, 632, 248, -1000, -1000, -1000, -1000, 2356,
	75542, 17671, 75542, 61763, 61763, 61763, 2601, 32926, -1000, -1000,
	48804, 75542, 62204, 2833, 80834, 48804, 75542, 2415, -1000, -1000,
	-1000, 75542, -1000, 32926, -1000, 2829, 1370, 51973, 2777, -39,
	-1000, -1000, -1000, -1000, -1000, -1000, 2019, 2025, 1012, 1897,
	1222, -1000, 25744, 2639, -1000, -1000, -1000, 246, 17671, -1000,
	-1000, -1000, -1000, -1000, 2024, 2574, 1270, -1000, 1896, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1532, 2571,
	-1000, 1695, 2570, 1528, -1000, -1000, 1806, -1000, -1000, 2676,
	-1000, -1000, 1639, 2567, 6, -1000, -1000, 855, 2560, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 696, -1000,
	51087, 41663, 51528, -9, -1000, -1000, -93, -1000, 16302, 87172,
	-1000, -1000, -1000, 87172, 835, -1000, -1000, 2559, -1000, 87172,
	833, -1000, -1000, 2558, -1000, -1000, -1000, 3016, -1000, 3014,
	1969, 3012, 3011, 3010, -1000, 1416, 1591, 3008, -1000, 3007,
	-1000, -1000, -1000, -1000, -1000, -1000, 59534, 1869, -1000, -1000,
	58640, -1000, 1966, -1000, -1000, 59087, 882, -1000, 855, 1965,
	-1000, 553, -1000, 3005, 2759, 2184, 855, 1960, -1000, -1000,
	-1000, -1000, -1000, 44785, -1000, 44785, -1000, 44785, -1000, 1325,
	-1000, 78629, 5, 5, 2880, -1000, -1000, -1000, -1000, -1000,
	2557, 3003, 3002, 3001, -1000, 75542, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 178, 2556, -1000, -1000, 178,
	2555, -1000, 178, 2550, -1000, 63968, -1000, -1000, 1786, 2542,
	-1000, -106, 2541, -1000, -1000, -14, -1000, -1000, -1000, 796,
	-1000, 40286, -1000, 40286, 68855, 51087, 847, 686, 46116, 87172,
	-1000, -54, -1000, 41663, 87172, -1000, 51087, 58640, -1000, 68408,
	58199, -1000, -1000, 1192, 2080, -1000, -1000, -1000, 847, 51087,
	51087, 51087, -1000, 67961, -1000, -1000, 1701, 1398, 2680, 1686,
	61763, -1000, 1716, -1000, -1000, -1000, 2707, 2413, -1000, 48363,
	63527, -1000, 63086, -1000, 62645, -1000, 61763, -1000, 61763, -1000,
	3000, 2998, 2997, -1000, 2994, 2694, 87172, 2693, -1000, 2534,
	1402, 1379, 75542, -1000, -1000, 75542, -1000, 75542, -1000, -1000,
	-1000, -1000, -1000, 2013, -1000, -1000, -1000, -1000, 61763, -1000,
	-1000, -1000, -1000, -1000, -1000, 2403, -1000, 1414, -1000, 1506,
	-1000, 1187, -1000, -1000, 183, -1000, -1000, -39, -1000, 78188,
	-1000, 2016, -1000, 75542, -1000, 2023, 2388, 2398, 1203, 1852,
	2126, -1000, 31010, 2090, 35276, 1894, 161, -1000, -1000, 161,
	161, 25274, -1000, -1000, 80834, 80834, 17671, 1127, 32926, 32926,
	32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926,
	32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926,
	32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926, 32926,
	32926, 32926, 32926, 1813, 32926, 1039, 32926, 32926, 32926, 32926,
	1679, -1000, -1000, 1583, 523, 1625, -1000, 2871, 2871, 2871,
	87586, 87586, 561, 2992, 727, -1000, 32926, -1000, 105, 32926,
	18128, -1000, -1000, 480, 10627, 1941, -1000, 479, 18610, -1000,
	-1000, -1000, 19550, 577, 30528, 32926, 872, 87172, -1000, -1000,
	1197, 2896, 15847, 2438, 2247, 631, 741, 725, 21948, 21466,
	20984, 20502, 564, 32926, 32926, 32926, 32926, 32926, 32926, 32926,
	32926, -1000, -1000, 2907, -1000, 2896, -1000, -1000, -1000, -1000,
	2896, 1116, 1057, 2896, -1000, 2896, 2896, 2527, 2527, 30058,
	29576, 29094, 35746, 28612, 32926, 20020, 28130, 27648, -1000, 75542,
	-2, 2823, 32926, 169, -1000, 85629, -1000, 169, 169, 630,
	-16, 87172, 2064, 2064, 39392, 2000, 1728, 1728, 1728, -1000,
	762, 12181, 762, 67075, 1761, 762, 762, 240, 281, 477,
	37591, 1976, 67075, 709, 629, 15, 13, 12, -1000, -1000,
	10, 9, -1000, -1000, 61763, 625, 18128, 17671, 1251, -30,
	238, 2104, 2102, 2100, -1000, 2096, 1388, -32, 1038, -17,
	-1000, 5106, -37, -1000, 1153, 233, -1000, -1000, -1000, -1000,
	-1000, 2990, 2989, -1000, 877, 624, 623, 594, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 621, 620, 620, 620,
	-1000, 285, 616, 265, 615, 614, 613, -1000, -1000, -1000,
	-1000, 2351, -93, 62204, 830, -45, 956, -39, -1000, -1000,
	-1000, 51973, 1080, -1000, 1573, -1000, -1000, -1000, -1000, -1000,
	-1000, 1223, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 507,
	-1000, -1000, -1000, -1000, -1000, -1000, 2887, 2876, -6, -1000,
	-1000, 17671, -1000, -50, 1531, -1000, 53741, 2050, 2681, 2669,
	1296, -1000, 1254, 2760, 57305, 2789, 2814, 526, -1000, 2348,
	-1000, -1000, 824, 1412, 1035, 57305, 1695, -1000, 80834, -1000,
	2146, 2747, 1213, 1217, 1213, 1213, 1204, -1000, 57305, 1034,
	-1000, 1033, -1000, -61, 2785, 2792, 525, -1000, 2345, 1032,
	-1000, -1000, 61763, 17671, -1000, 1314, -1000, 51087, 2181, -1000,
	-48, 696, -9, 51528, 75542, 231, -1000, 32926, 105, 32926,
	105, -1000, -1000, 2537, -1000, -1000, -1000, 2982, 1559, 2034,
	-1000, -1000, -1000, 612, 1954, 2338, 75542, 2110, -13, 61763,
	-1000, 2535, 1695, 1953, -1000, -1000, 57752, -1000, 2508, 402,
	2976, -1000, 77747, -1000, 2683, 1142, 2506, 911, 288, 2822,
	-1000, 288, 45226, -1000, 75542, -1000, -1000, 75542, -1000, -1000,
	-1000, 2974, -1000, 61763, -1000, -1000, 61763, -1000, 61763, -1000,
	61763, 176, 2505, -1000, -1000, 75542, 51087, 51087, 6248, 52859,
	-55, -60, 475, -1000, 67520, 75542, 909, 53300, 75542, 2629,
	847, 41663, -54, 847, 847, 696, -1000, 696, -1000, 61763,
	2393, -1000, 847, 847, 847, -1000, -1000, -1000, -1000, 2973,
	2970, -1000, -1000, -1000, 853, 61763, 75542, 61763, -1000, -1000,
	75542, -1000, 75542, -1000, 853, 75542, 853, 75542, 853, 75542,
	-1000, -1000, -1000, -1000, -1000, -1000, 105, 32926, 1344, -1000,
	2390, -1000, 2389, -1000, 43, -1000, -1000, -1000, -1000, 1737,
	61763, 61763, 61763, 61763, 75542, 61763, -1000, 57305, -1000, 2023,
	2388, -1000, -1000, -1000, -1000, -1000, -1000, 1155, 1839, -1000,
	2070, -1000, 1272, -1000, -1000, -1000, 87172, 36216, -1000, -1000,
	87172, 1383, -1000, 34806, 34336, -1000, -1000, 1518, 61763, 2115,
	-1000, 2115, -10, -1000, 85323, 2057, 61763, -1000, -1000, -1000,
	-1000, -1000, 822, 921, 921, 1105, 1105, 1105, 1105, 2782,
	607, 331, 4054, 316, 316, 5765, 5765, 5765, 5765, 5765,
	316, 3973, 913, 913, 3973, 3973, 3973, 3973, 3973, 913,
	913, 913, 316, 316, 316, 87586, 87510, 5966, 32926, 32926,
	1031, 1582, 523, 5855, 32926, 5550, 5550, 5550, 5550, -1000,
	1973, -1000, -1000, -1000, -1000, 2323, 608, 35746, 35746, -1000,
	-1000, -1000, -1000, 19080, 32926, -1000, -1000, -1000, -1000, 27166,
	-1000, -1000, 84818, -265, 473, -155, -12, -1000, 32926, 32926,
	32926, 469, -1000, 226, 32926, 75542, -1000, 81930, 707, -199,
	-1000, -62, 1191, -1000, 32926, -1000, -1000, 1025, -1000, 1019,
	1015, 1014, -1000, 606, 468, -1000, 223, -1000, 1700, 593,
	592, 32926, -1000, -1000, -1000, -1000, -1000, 84762, -1000, -1000,
	84466, -1000, -1000, 84256, -1000, -1000, 84161, -1000, -1000, -1000,
	87013, 81835, 81625, 81325, 10138, 81282, 11625, -65, 465, -67,
	464, 802, 775, 453, 446, 444, -68, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -73, 436, -1000, 2309, -155,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 435, -1000,
	434, -1000, 86937, -155, 433, 7063, -1000, 35746, 35746, 35746,
	-1000, 431, -1000, 85482, -1000, 86599, 26696, 26696, 26696, 430,
	86452, 32926, -155, -76, -1000, -81, -1000, -1000, 591, -88,
	865, 26214, 38498, 17671, -1000, 865, 865, 32926, -1000, 32926,
	2087, -1000, -1000, -1000, 2083, 1521, 2064, 39392, -1000, -1000,
	-1000, -1000, 67075, -1000, 2880, 2317, -1000, 67075, -1000, -1000,
	75542, 499, -1000, 67075, 67075, 17671, 762, -1000, 762, 67075,
	645, -1000, -1000, -1000, -1000, -1000, 429, 42563, -12, 220,
	847, -1000, 17671, 2177, 2177, 2177, 2177, -1000, -1000, 75542,
	2846, -1000, 1629, -1000, 80834, -1000, 726, 1078, 17671, -1000,
	-1000, 590, -1000, 2896, 2896, -1000, 2896, 75542, 106, 25744,
	-1000, 1080, -1000, -1000, 1279, -1000, 1568, -1000, 1011, -1000,
	-1000, -1000, -1000, 25744, -1000, 1975, 75542, 75542, 61763, -1000,
	-1000, 1951, 77306, 1947, 80834, 75542, -1000, -1000, 589, 585,
	2055, 2052, 906, 75542, 75542, 2048, 76865, 76424, 75542, 1630,
	32926, 1816, 1819, 105, 105, -1000, -1000, 105, 584, 1140,
	61763, 61763, 61763, 1520, -1000, -1000, -1000, -1000, -1000, 56864,
	-1000, -1000, 2906, 2904, -1000, 1213, -1000, -1000, -1000, 1213,
	1695, 1490, 61763, 75542, 1649, 105, 105, -1000, -1000, 105,
	583, 17671, 1529, -1000, 1314, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47922, 916, 855, 847, 2302, -1000, 2181, -1000,
	-1000, 15392, 87172, -1000, 87172, -1000, 75542, -1000, 881, 75542,
	53300, 838, 2500, 44344, -93, 847, 51087, 61763, -13, 75542,
	-1000, 1695, 2499, 499, 1939, -1000, -1000, 51087, 2969, 581,
	2967, -1000, 1867, 1933, -1000, -1000, 75983, 2590, 781, 75542,
	865, 39392, 1486, -1000, 43010, 895, 75542, 1401, 82, -1000,
	-1000, -1000, 28, 75542, -1000, 2963, -1000, -1000, 178, 178,
	178, -1000, 61763, 61763, 1786, -1000, -106, -1000, -1000, 6248,
	6248, 847, -26, 580, -1000, 793, 791, 41208, 51087, -91,
	-1000, -1000, -1000, -1000, -1000, 61763, 75542, 687, 2170, 75542,
	-96, -1000, 214, 579, -1000, -1000, 847, 2297, -1000, -1000,
	858, -1000, 1157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4, -93, -93, -1000, 853, -1000, 853, -1000,
	853, -1000, 87172, -1000, 1343, 1331, 75542, -1000, 17671, 75542,
	61763, 17671, 61763, 2387, 2386, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 925, -1000, 1383, 1833, -1000, 577, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2002, -1000,
	-28, 25274, 1903, -1000, -1000, 61763, 3, 32926, 32926, 4833,
	4420, 32926, 35746, 35746, -1000, 32926, 4008, -1000, -1000, -1000,
	-1000, -1000, 2292, 576, 32926, 80834, 6069, 4335, -1000, 427,
	11282, 3973, -1000, 32926, -1000, 426, 24804, -1000, 85967, -35,
	-97, -1000, 12648, -155, -99, -1000, -1000, 720, -1000, 2510,
	-1000, 32926, 86114, 1956, 1770, 1467, 1354, 2896, 2917, 14937,
	-1000, 45671, 867, 1763, 83951, -1000, -1000, -1000, -1000, 80834,
	80834, 32926, 32926, -1000, 32926, 32926, 32926, -1000, -1000, -1000,
	2896, 804, -1000, -1000, -1000, 804, -1000, -1000, 2896, -1000,
	2896, -1000, 32926, -1000, -1000, 2284, 32926, -1000, 80834, 80834,
	35746, 35746, 35746, 35746, 35746, 35746, 35746, 35746, 35746, 35746,
	35746, 35746, 35746, 35746, 35746, 35746, 35746, 35746, 35746, 2076,
	35746, 2868, 2868, 2868, -1000, 2304, 2284, 32926, 32926, 80834,
	425, 424, 413, -1000, 32926, -155, -1000, -1000, 6248, -1000,
	2242, -1000, 32926, -1000, -102, -1000, 1976, -1000, -1000, 2242,
	2242, -105, 87172, 39392, 39392, -1000, 575, 32926, 2079, -1000,
	-1000, 706, -258, -1000, 790, -1000, -1000, -1000, -1000, -1000,
	499, -1000, -1000, -1000, 213, 67075, 67075, 705, -1000, -107,
	-1000, -1000, -108, -1000, 2816, 411, 17671, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -93, 1771, 2916, -1000, 2901,
	719, 704, 177, 2896, 407, 406, 397, -93, 75542, -1000,
	-39, -1000, -1000, -1000, 32926, -1000, -1000, 2672, 1010, 1009,
	-1000, 2498, -1000, 1932, -1000, 899, -1000, 1674, -1000, 32926,
	32926, 571, 562, 2962, 1534, 2960, 908, 2496, 1786, 2492,
	1786, -1000, -1000, 806, -1000, 87172, 560, 556, -1000, -50,
	1356, 857, -1000, -1000, 32926, 32926, 66634, -1000, 348, 2676,
	2, -1000, 1008, -1000, -1000, -1000, -1000, 1695, 1006, -1000,
	-1000, -1000, 856, -1000, -1000, 32926, -1000, -61, 994, -1000,
	-1000, -1000, 47467, -1000, -1000, 51087, 847, -1000, 2959, 2957,
	2956, 388, -110, -78, 80834, 2811, 1885, 535, 61763, 818,
	-1000, 2880, -1000, -1000, -1000, -1000, 61763, 2810, 2491, 855,
	-1000, 2955, -1000, 61763, 2484, 1864, 1931, 2026, 781, 52418,
	-1000, 855, 1763, -142, -1000, 1401, 24322, 2671, -113, -1000,
	-1000, -1000, 865, 45226, 39392, 32926, 2946, -115, -1000, -1000,
	-1000, -1000, -1000, 176, -1000, -1000, -1000, -1000, 66193, 66193,
	51087, 51087, 51087, 847, 75542, 75542, 53300, -1000, 552, 75542,
	75542, 551, -1000, 75542, 75542, 2941, 51087, -1000, 105, -1000,
	1788, 61763, 14482, -1000, -1000, -1000, -1000, -1000, 853, -1000,
	-1000, 1659, 1892, 1659, 1392, 1391, -1000, 1808, -1000, -1000,
	-1000, -1000, 2107, 2685, 17671, 2771, 5550, 32926, 32926, 391,
	467, 428, 5550, 32926, 32926, 80834, 87096, -120, 32926, 32926,
	-1000, 32926, 703, 87172, 2912, 32926, 387, 377, -1000, -1000,
	-1000, 2892, -1000, -1000, -1000, 87172, 32926, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 368, -1000, 162, -1000, -1000, -1000,
	80393, -1000, 32926, 359, -1000, 357, 356, 10979, 7156, 83655,
	83599, 83303, 354, -1000, -1000, 350, 335, 87172, 2304, 87172,
	-1000, -1000, 809, 809, 1182, 1182, 1182, 1182, 2868, 2056,
	400, 1811, 353, 353, 353, 937, 799, 799, 353, 353,
	353, 2281, 2078, 544, 676, -1000, -1000, 87172, 87172, 334,
	-1000, -1000, -1000, -155, 327, 2231, 2740, 87172, -1000, 39392,
	2231, 2231, -1000, -1000, 1521, 75542, 87172, 39392, -1000, 2317,
	-1000, 13113, -1000, 17671, -1000, -1000, -1000, -1000, 2880, -1000,
	42563, -1000, 543, -1000, 107, -1000, -1000, 702, 2940, 713,
	17671, 317, -1000, -1000, -1000, -93, 87172, 75542, 75542, 75542,
	2479, -1000, 1822, -1000, 906, 83093, -125, -1000, 85323, 32926,
	75542, -1000, -1000, 1598, 2108, 935, -1000, 2709, 75542, -1000,
	75542, -1000, -1000, 75542, 75542, 61763, 2469, -128, 87172, -98,
	-1000, 789, -1000, 1206, -1000, 14027, 61763, 61763, 2445, -133,
	17671, -1000, -1000, -106, -1000, -1000, -1000, -1000, 2116, -1000,
	64856, 1774, 105, -1000, 65748, 2939, 542, -1000, 1769, -1000,
	646, 1695, 105, 61763, -1000, -1000, 903, 17671, 61763, 2478,
	2029, 781, 52418, -1000, 1142, 2126, -1000, -134, -1000, 516,
	105, 1763, -1000, -142, 87172, -1000, 788, -1000, -1000, -135,
	-1000, -1000, 312, -1000, 2625, 2624, -1000, 2251, 32926, 540,
	539, 75542, 2622, -1000, -1000, -136, -1000, 1927, -1000, -1000,
	-1000, -1000, -1000, 17671, 1368, -1000, 537, 534, -1000, -1000,
	-1000, -1000, 2685, 5550, 5550, 32926, 32926, 32926, 5550, 87096,
	-141, -1000, 5550, 5550, -155, -1000, -1000, 85967, -1000, -1000,
	-1000, 87172, -1000, 13572, 1683, -1000, 82998, -1000, -1000, -1000,
	32926, 32926, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35746, 2279, 532, 80834, -1000, -1000, 860, 32926, 32926, 1976,
	860, 860, -1000, -160, -1000, -1000, -1000, 2880, 107, -1000,
	-1000, 2938, 17671, 711, -1000, 2934, -1000, -1000, -1000, -1000,
	-1000, 75542, -1000, 75542, -1000, 17671, 75542, 2269, 1924, -1000,
	-1000, 2047, 531, 35746, 61763, 765, -1000, 2249, 1687, 32926,
	1903, -161, -163, 1921, -1000, -1000, 1907, 32926, -1000, 80834,
	529, 1786, 1786, -166, -168, -1000, 32926, 989, 75542, 23852,
	-1000, 2932, 2676, -1000, -1000, 32926, 981, -1000, 1649, 2198,
	-1000, -1000, -1000, -1000, 2045, -1000, -1000, 75542, 2042, 849,
	-169, -1000, 787, 783, -1000, 53300, 838, 820, -1000, -1000,
	-1000, 499, 528, 75542, 1861, 527, 17671, -1000, 781, 52418,
	-1000, 2590, 1401, -1000, 2596, 75542, 2668, -1000, 2126, 523,
	-1000, 847, 521, 519, 2682, 2682, -171, 32926, 32926, -174,
	518, 847, -147, -1000, 769, 758, -1000, -1000, 61763, 61763,
	32926, 32926, -1000, 5550, 5550, 5550, -1000, 296, -1000, -1000,
	1763, 2736, -1000, 82788, 82492, 4923, 35746, 80834, -176, -1000,
	75542, 87172, -155, -1000, -1000, -1000, 565, -1000, 2931, -1000,
	-1000, 1899, -1000, -1000, -1000, 75542, 1930, -1000, 905, 32926,
	676, 517, 32926, -1000, -1000, 2134, 2308, 2116, 514, -1000,
	-1000, -1000, -1000, -1000, 902, 1545, -1000, -1000, 87172, 2720,
	32926, -1000, -1000, 513, 512, 87172, 503, 780, 2268, -1000,
	-1000, -1000, 87172, 502, 838, -1000, 1712, 1774, 501, -1000,
	-1000, 1817, 2136, -1000, 65748, 36671, 36671, 283, 2808, 820,
	-1000, 2877, -1000, 2802, 32926, -1000, 61763, 32926, 1858, 52418,
	-1000, 2026, -1000, 1084, -177, 75542, 1401, -1000, -1000, 51087,
	51087, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 902, -179, -184, -1000, 51087, -1000, 1927, -1000,
	75542, -1000, 75542, -1000, -1000, -185, -186, -1000, 1547, 32926,
	-1000, -1000, 4923, -187, -1000, -150, -1000, 2793, -1000, -1000,
	-1000, -1000, 2476, 2228, 82436, 1995, 75542, 82140, 2293, -1000,
	-1000, 1649, 75542, 2116, 2212, 61763, 904, 17671, -192, 1659,
	1659, 32926, 23382, 1710, 32926, 1817, 61763, 75542, -1000, 2692,
	-1000, 2619, -1000, -1000, -1000, 2116, 105, -1000, -1000, 105,
	-193, 903, -194, 61763, -1000, 2029, 1289, -1000, 865, -1000,
	-1000, -200, -202, 1687, 902, -1000, -203, -1000, -210, -211,
	-1000, -1000, 279, 33866, 33866, 33866, -155, -1000, 75542, 500,
	2455, 852, -1000, 1841, 1550, 254, 929, -1000, -1000, 2249,
	-213, -1000, 851, 499, -1000, 32926, -1000, 902, -219, -1000,
	893, -221, -1000, 889, -222, -1000, 2265, -1000, -224, -1000,
	494, -229, -1000, -1000, 1842, -1000, 1649, 849, -1000, 902,
	493, 1687, 492, -1000, 45226, -1000, 847, 847, 2116, 1687,
	847, -1000, -1000, -1000, 2577, -1000, 37126, 1767, 1378, 85113,
	2577, 2577, -1000, -1000, 75542, 2767, -1000, 1850, 1847, 1244,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2763, 1995,
	87172, 2116, -1000, 1659, 2197, -1000, 1659, 2259, -1000, 1703,
	-1000, 75542, -1000, 75542, 1380, 1373, 2930, 838, 1817, 1687,
	32926, 2116, 32926, -209, -1000, -1000, 1649, 2116, -1000, -1000,
	1554, 2819, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	779, -1000, 2605, -1000, 924, 1904, 1904, 772, 1841, -1000,
	-1000, 491, -1000, 490, -1000, -230, -1000, -1000, 2928, -1000,
	1817, -1000, 2116, -232, 1649, -238, -1000, -1000, 1649, 1375,
	-1000, -1000, 1750, 33396, 32926, -1000, 2855, -1000, -1000, 2075,
	-1000, 32926, 2249, 32926, 32926, 1785, -1000, -1000, 1649, 902,
	862, 1687, -1000, -1000, -1000, -1000, 87172, -1000, -1000, -1000,
	87172, -1000, -239, -246, -1000, -1000, -1000, 862, 1687, -1000,
	2926, 2116, 1649, 971, -1000, 2116, -1000, 1649, -1000, 489,
	1649, 862, 32926, 862, -1000, -247, -1000, 1649, -1000,
}
var sqlPgo = [...]int{

	0, 3639, 3637, 3636, 3635, 3631, 3624, 3622, 3620, 3619,
	3618, 3617, 3615, 3611, 3607, 3605, 3604, 3603, 3602, 3601,
	3600, 3599, 3598, 3593, 3592, 3589, 3587, 3586, 3585, 3584,
	3582, 3580, 3579, 3577, 3576, 3575, 3574, 3573, 3572, 3571,
	3569, 3568, 3567, 3566, 3558, 3556, 3551, 36, 3550, 3549,
	3547, 3546, 3544, 3542, 3539, 3536, 3535, 3534, 3533, 3530,
	3528, 3526, 3523, 3522, 3519, 45, 3518, 212, 3516, 3508,
	3505, 3504, 3503, 3502, 3500, 3499, 3497, 211, 3495, 143,
	3494, 3493, 3492, 3489, 3487, 210, 3481, 3472, 3471, 3459,
	3456, 3455, 3454, 3451, 152, 194, 3449, 42, 3448, 3447,
	3445, 3439, 3438, 3436, 3435, 3434, 3433, 3430, 197, 3429,
	209, 3428, 3426, 3422, 3418, 3417, 3415, 3413, 3411, 3405,
	3404, 3403, 3402, 3400, 3399, 3395, 3394, 3389, 3388, 3385,
	3384, 3383, 3380, 3378, 3377, 3375, 3373, 3371, 3367, 214,
	133, 3366, 3361, 207, 206, 3360, 3358, 3357, 3355, 120,
	96, 91, 24, 3353, 84, 49, 3352, 22, 291, 192,
	7587, 184, 3348, 3323, 3319, 191, 147, 3318, 181, 3317,
	3313, 3309, 3308, 61, 60, 127, 132, 117, 129, 122,
	3306, 3305, 68, 58, 39, 32, 3304, 3303, 3299, 2437,
	88, 3297, 205, 186, 125, 3295, 3294, 3293, 1926, 3292,
	3289, 3288, 156, 80, 90, 20, 82, 3287, 104, 21,
	3286, 155, 38, 3285, 116, 59, 35, 6451, 6427, 3283,
	64, 222, 81, 77, 164, 160, 123, 167, 163, 131,
	95, 3282, 226, 3281, 51, 107, 3280, 3279, 3278, 54,
	148, 73, 3277, 3275, 46, 8, 15, 1, 140, 12,
	87, 14, 3273, 13, 3272, 3270, 3269, 3268, 30, 144,
	3267, 103, 97, 3266, 23, 3265, 18, 168, 3262, 175,
	93, 3260, 3258, 198, 153, 157, 3257, 71, 177, 3256,
	3255, 3254, 3252, 3250, 99, 25, 100, 3247, 3246, 94,
	188, 149, 3245, 40, 3243, 126, 69, 102, 213, 98,
	173, 86, 174, 142, 179, 3242, 3240, 3239, 189, 3236,
	3235, 171, 115, 3234, 3233, 151, 219, 34, 62, 185,
	50, 146, 137, 3229, 159, 3227, 3226, 3222, 218, 128,
	166, 3, 6, 72, 89, 31, 17, 180, 110, 234,
	79, 3221, 3613, 1306, 684, 43, 3220, 109, 78, 48,
	76, 121, 204, 52, 3217, 3215, 1454, 3214, 3212, 3209,
	3204, 134, 3199, 3197, 3196, 111, 113, 154, 3193, 118,
	56, 11, 114, 246, 208, 75, 172, 141, 237, 3192,
	138, 3191, 41, 119, 3189, 150, 216, 63, 3188, 416,
	112, 3187, 170, 3186, 3184, 3183, 3181, 3180, 3177, 3176,
	232, 183, 108, 3174, 3173, 3172, 202, 145, 3171, 200,
	176, 124, 66, 44, 3170, 92, 220, 3169, 162, 182,
	37, 3168, 2559, 47, 0, 8679, 7157, 5603, 7854, 3167,
	3407, 3166, 3165, 3163, 169, 106, 3161, 3159, 3158, 74,
	3157, 55, 3149, 3147, 53, 3146, 9, 7, 10, 19,
	16, 1322, 607, 3145, 3142, 83, 101, 135, 3137, 221,
	178, 3134, 3133, 3124, 70, 3120, 26, 3115, 27, 3114,
	3111, 33, 5, 29, 3110, 3107, 193, 3106, 187, 3104,
	3103, 2819, 105, 3102, 3101, 201, 57, 3100, 195, 3097,
	2775, 130, 165, 3096, 3094, 3091, 3088, 196, 3085, 3084,
	28, 3083, 4, 3082, 3081, 161, 2, 2607, 3080, 3079,
	67, 3078, 139,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 11, 11, 7, 7, 8,
	8, 8, 35, 35, 9, 9, 9, 10, 10, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	25, 25, 15, 15, 27, 27, 16, 16, 28, 28,
	485, 485, 19, 30, 20, 31, 13, 486, 486, 486,
	486, 24, 21, 32, 22, 22, 22, 22, 22, 153,
	153, 153, 153, 18, 18, 26, 26, 176, 176, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 484, 484, 178, 178, 177, 172, 172, 487, 487,
	179, 179, 179, 181, 181, 36, 36, 36, 93, 93,
	93, 94, 94, 95, 95, 154, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 81, 81, 422, 422, 423,
	423, 149, 149, 150, 150, 150, 150, 151, 151, 152,
	152, 152, 50, 38, 38, 38, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 48, 48, 48, 48,
	140, 140, 51, 51, 51, 51, 51, 51, 51, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 495,
	495, 496, 496, 497, 497, 498, 498, 498, 498, 498,
	498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
	498, 498, 498, 498, 498, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 62, 62, 260, 260, 233, 233, 63, 63,
	63, 64, 64, 65, 65, 52, 52, 478, 478, 274,
	274, 384, 384, 67, 67, 294, 294, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 75, 75,
	75, 76, 76, 76, 74, 74, 74, 72, 72, 72,
	71, 71, 71, 73, 73, 73, 275, 275, 77, 77,
	77, 77, 77, 77, 77, 77, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 386, 386, 78, 78, 78, 354, 354, 82, 82,
	82, 309, 309, 83, 83, 83, 83, 83, 84, 84,
	84, 84, 96, 96, 96, 96, 481, 481, 267, 267,
	192, 192, 192, 192, 89, 89, 89, 89, 90, 90,
	90, 91, 91, 145, 145, 102, 102, 102, 102, 102,
	101, 101, 101, 101, 101, 101, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 46, 46, 47, 47, 47,
	47, 47, 104, 104, 491, 491, 106, 103, 103, 103,
	105, 105, 105, 105, 107, 108, 108, 108, 108, 108,
	108, 108, 108, 109, 109, 415, 415, 283, 283, 413,
	413, 431, 431, 414, 414, 237, 237, 237, 237, 237,
	238, 238, 238, 421, 421, 421, 421, 421, 421, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 146, 146, 147, 148, 148, 148, 148,
	129, 129, 129, 139, 139, 139, 139, 139, 139, 139,
	132, 132, 132, 119, 119, 111, 111, 111, 111, 111,
	115, 115, 115, 115, 115, 115, 115, 115, 112, 112,
	121, 121, 121, 121, 121, 116, 116, 118, 118, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 113, 113,
	113, 113, 123, 123, 123, 123, 316, 316, 316, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 135,
	135, 135, 135, 135, 135, 368, 368, 130, 130, 130,
	130, 134, 134, 134, 134, 299, 299, 127, 127, 127,
	128, 128, 128, 133, 133, 131, 131, 136, 136, 136,
	136, 114, 114, 114, 499, 499, 499, 137, 137, 126,
	126, 138, 138, 138, 138, 138, 138, 138, 138, 125,
	125, 125, 124, 124, 124, 124, 117, 479, 479, 476,
	476, 476, 476, 476, 476, 476, 477, 477, 480, 480,
	87, 87, 87, 57, 57, 57, 58, 58, 157, 157,
	157, 157, 245, 245, 245, 245, 155, 155, 156, 156,
	59, 59, 500, 500, 500, 488, 488, 488, 489, 489,
	489, 489, 489, 489, 239, 239, 240, 240, 334, 334,
	334, 334, 334, 243, 243, 243, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 246, 246, 180, 180, 180,
	249, 250, 250, 247, 247, 248, 248, 248, 252, 252,
	251, 254, 254, 253, 333, 440, 440, 442, 442, 442,
	442, 442, 442, 442, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 501, 438, 438, 438, 439,
	434, 434, 435, 435, 435, 435, 435, 241, 241, 242,
	242, 242, 242, 436, 437, 265, 265, 371, 441, 441,
	443, 443, 445, 502, 502, 502, 502, 502, 502, 503,
	503, 503, 332, 332, 331, 331, 258, 258, 446, 446,
	446, 446, 447, 447, 447, 447, 447, 450, 449, 448,
	448, 448, 448, 448, 61, 61, 61, 296, 296, 295,
	295, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 142, 142, 195, 195,
	56, 56, 56, 12, 12, 12, 490, 490, 490, 60,
	60, 60, 60, 194, 194, 194, 194, 194, 194, 483,
	483, 482, 482, 196, 196, 505, 505, 66, 66, 66,
	66, 66, 66, 55, 55, 55, 55, 55, 506, 506,
	317, 317, 315, 315, 314, 314, 264, 264, 370, 200,
	200, 173, 173, 173, 23, 17, 17, 33, 33, 34,
	34, 29, 29, 492, 492, 493, 493, 88, 88, 92,
	92, 92, 100, 100, 141, 141, 141, 141, 141, 141,
	141, 37, 37, 37, 37, 49, 49, 49, 49, 98,
	508, 508, 508, 99, 99, 99, 507, 507, 193, 193,
	328, 328, 329, 329, 509, 509, 330, 330, 330, 330,
	187, 186, 188, 188, 54, 54, 54, 182, 182, 183,
	183, 184, 184, 185, 185, 510, 510, 85, 85, 85,
	144, 144, 232, 232, 232, 324, 324, 324, 259, 259,
	206, 206, 327, 327, 325, 325, 325, 325, 293, 293,
	293, 143, 143, 272, 272, 285, 285, 286, 286, 381,
	381, 287, 97, 97, 160, 160, 158, 158, 158, 158,
	158, 158, 158, 158, 165, 165, 166, 166, 167, 167,
	168, 169, 169, 169, 169, 276, 276, 170, 170, 170,
	159, 159, 159, 161, 161, 161, 161, 161, 161, 161,
	164, 164, 164, 164, 171, 171, 171, 163, 163, 457,
	457, 457, 459, 459, 460, 456, 456, 458, 458, 504,
	504, 298, 298, 298, 256, 257, 255, 255, 262, 262,
	261, 263, 263, 369, 369, 369, 174, 174, 174, 290,
	290, 290, 290, 291, 291, 320, 320, 318, 318, 318,
	318, 319, 319, 321, 321, 321, 322, 322, 323, 323,
	289, 289, 350, 350, 162, 162, 162, 269, 269, 269,
	270, 270, 340, 340, 340, 340, 340, 340, 341, 341,
	339, 339, 339, 339, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 373, 374, 374, 271, 271, 375, 326,
	326, 474, 474, 474, 475, 475, 367, 367, 376, 376,
	376, 376, 376, 376, 365, 365, 366, 366, 382, 383,
	383, 302, 302, 302, 302, 300, 300, 303, 303, 303,
	303, 301, 301, 377, 377, 377, 377, 292, 292, 378,
	378, 378, 378, 379, 335, 336, 336, 387, 387, 387,
	387, 402, 268, 268, 268, 268, 268, 433, 432, 432,
	388, 388, 388, 388, 388, 388, 388, 388, 401, 401,
	401, 401, 401, 401, 401, 401, 403, 403, 403, 403,
	403, 403, 389, 389, 389, 389, 389, 392, 392, 392,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 393, 393, 398, 398, 399, 399, 399, 394, 395,
	400, 400, 400, 400, 511, 511, 405, 405, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 390, 390, 390,
	397, 397, 397, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 310, 310, 312, 312,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 344, 344, 344, 344, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 451, 451, 451, 451, 451, 451,
	451, 451, 346, 346, 454, 454, 455, 455, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 461, 461, 462,
	462, 464, 464, 465, 465, 466, 467, 467, 467, 468,
	469, 469, 463, 463, 470, 470, 470, 470, 471, 471,
	472, 472, 472, 472, 472, 473, 473, 473, 473, 473,
	356, 356, 357, 357, 363, 363, 363, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 197, 197, 197, 197, 197, 281, 281,
	279, 279, 279, 282, 282, 280, 280, 278, 278, 277,
	277, 353, 353, 351, 351, 355, 355, 304, 304, 404,
	404, 404, 404, 404, 404, 404, 404, 305, 305, 305,
	313, 306, 306, 307, 307, 307, 307, 307, 347, 348,
	308, 308, 308, 349, 349, 358, 362, 362, 361, 360,
	360, 359, 359, 337, 337, 338, 338, 288, 288, 512,
	512, 284, 284, 380, 380, 380, 380, 235, 235, 273,
	273, 234, 234, 227, 227, 228, 228, 228, 228, 266,
	266, 364, 364, 406, 406, 407, 407, 408, 408, 409,
	409, 410, 411, 412, 352, 352, 216, 215, 203, 204,
	214, 213, 212, 202, 205, 209, 210, 211, 207, 208,
	222, 221, 220, 226, 218, 219, 385, 201, 229, 229,
	230, 230, 230, 231, 231, 231, 231, 198, 198, 199,
	199, 223, 223, 224, 225, 225, 217, 217, 217, 189,
	189, 189, 190, 190, 191, 191, 420, 420, 417, 417,
	417, 418, 418, 418, 419, 419, 419, 419, 416, 416,
	416, 416, 416, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 425,
	425, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 427, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 430,
	430,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 4, 6, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 5, 7, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 3, 6, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 3, 5, 7, 2, 3, 0, 3, 5,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 3, 1, 1, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 1, 3, 2, 3, 3,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 2, 1, 3, 3, 3, 3,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 4, 5, 5, 5, 3,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	5, 5, 5, 7, 3, 3, 3, 4, 3, 5,
	3, 6, 5, 6, 3, 5, 6, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 3,
	2, 4, 3, 3, 5, 4, 3, 5, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 7, 9, 3, 4, 10,
	10, 3, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 3, 6, 3, 11, 14, 0, 2,
	4, 3, 0, 4, 5, 4, 3, 3, 1, 3,
	10, 13, 0, 2, 3, 1, 1, 0, 1, 2,
	2, 2, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 8, 4,
	2, 5, 5, 5, 2, 1, 9, 10, 6, 5,
	3, 1, 5, 8, 7, 11, 3, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 1, 4, 0, 6, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 2, 2,
	4, 7, 3, 4, 6, 3, 1, 1, 1, 8,
	11, 7, 5, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 3, 0, 1, 6, 7, 6,
	5, 3, 4, 16, 19, 15, 18, 4, 0, 2,
	2, 0, 1, 0, 1, 0, 1, 3, 3, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 4, 2, 1, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 1, 2, 4, 4,
	2, 3, 5, 5, 1, 3, 1, 0, 1, 2,
	3, 2, 4, 2, 3, 0, 2, 0, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 3, 4, 5, 2, 2, 0, 2,
	2, 1, 1, 1, 0, 1, 0, 2, 2, 5,
	4, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 4, 4, 3, 4, 1, 5,
	3, 4, 5, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 2, 1, 0, 2, 5, 7,
	2, 1, 2, 4, 3, 5, 0, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	6, 6, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 1, 1, 1, 1, 1,
	1, 2, 1, 5, 5, 6, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 2, 2, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 484, -79, -50, -48, -82, -83, -68,
	-84, -78, -96, -100, -88, -102, -141, -146, -147, -148,
	-3, -36, -38, -51, -67, -69, -77, -86, -85, -87,
	-89, -93, -92, -81, -42, -97, -101, -110, -142, -143,
	-144, 86, 70, 131, 110, 116, 168, 311, 343, 353,
	337, -105, -106, 368, -37, -49, -99, -98, 63, 111,
	332, -4, -12, 27, 42, -39, -40, -41, 54, -56,
	-53, -62, -494, 88, -458, -70, -73, -498, 121, 137,
	186, 301, -90, -91, 339, 341, 138, -44, -43, 132,
	-158, -160, -103, -104, -145, -111, -112, -113, -114, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -131, -127, -128, -129, -130, -132, -133, -134, -135,
	-136, -137, -138, 372, 420, 43, 382, 72, 124, 347,
	21, -5, -6, -7, -8, -9, -10, -11, -52, -54,
	-55, -57, -58, -59, -66, -60, -61, -457, -71, -72,
	-74, -75, -76, 338, -161, -159, 481, 434, -14, -19,
	-20, -15, -16, -18, -21, -17, -25, -30, -31, -27,
	-28, -26, -29, -32, -33, -34, -35, -23, -24, -13,
	-22, 452, 460, -164, -162, -163, -171, 360, 442, 397,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	-218, -223, -224, -225, -217, -189, -427, -430, 4, -424,
	-428, 143, 195, 267, 21, 22, 23, 24, 25, 27,
	28, 39, 41, 40, 42, 43, 48, 51, 52, 53,
	54, 55, 58, 63, 64, 69, 70, 71, 72, 73,
	74, 75, 81, 78, 79, 80, 83, 85, 86, 87,
	89, 91, 92, 100, 101, 102, 103, 105, 110, 111,
	114, 109, 113, 116, 119, 120, 121, 123, 125, 126,
	128, 129, 131, 132, 135, 133, 403, 134, 136, 137,
	138, 139, 149, 150, 151, 156, 158, 162, 163, 166,
	167, 169, 173, 175, 176, 177, 178, 179, 185, 186,
	188, 189, 190, 191, 196, 197, 201, 198, 207, 211,
	212, 213, 215, 219, 220, 221, 222, 223, 226, 225,
	228, 231, 232, 235, 236, 237, 240, 241, 242, 243,
	245, 246, 249, 247, 250, 248, 252, 253, 254, 251,
	257, 255, 259, 260, 265, 263, 261, 262, 269, 272,
	183, 274, 275, 278, 295, 282, 283, 284, 287, 288,
	291, 294, 296, 297, 298, 299, 300, 301, 302, 304,
	305, 309, 311, 312, 314, 316, 317, 318, 319, 320,
	321, 322, 324, 325, 332, 337, 334, 335, 336, 338,
	339, 340, 341, 343, 345, 346, 347, 348, 350, 352,
	369, 370, 384, 353, 354, 355, 356, 357, 358, 359,
	363, 361, 362, 364, 365, 366, 368, 371, 372, 374,
	375, 378, 380, 381, 382, 383, 385, 388, 389, 390,
	391, 386, 396, 394, 395, 398, 399, 400, 401, 402,
	404, 406, 414, 415, 417, 420, 421, 422, 412, 424,
	425, 428, 429, 430, 433, 431, 432, 434, 436, 439,
	440, 441, 447, 446, 453, 454, 456, 457, 458, 34,
	44, 45, 47, 49, 59, 60, 61, 65, 106, 107,
	130, 140, 141, 152, 164, 165, 170, 172, 180, 181,
	182, 202, 203, 205, 209, 229, 271, 273, 289, 293,
	306, 307, 308, 310, 323, 349, 376, 387, 392, 407,
	408, 409, 410, 416, 418, 442, 443, 444, 448, 455,
	280, -211, 2, -189, -189, 311, 26, 2, 26, 305,
	362, 399, 401, 2, -481, -267, 2, 26, -192, -189,
	88, 168, 360, -211, 2, -481, -267, 24, 2, -189,
	2, -193, 2, 353, -189, 484, 83, 237, 64, 349,
	365, -108, 415, -107, 407, 355, -109, -415, 2, 257,
	-189, 484, 484, 484, 26, -201, -189, 397, 195, 102,
	395, 484, 2, 397, 298, 446, 361, 102, 320, 195,
	-490, 345, 171, 435, 411, -476, 2, 4, -428, -424,
	-228, -227, 397, 102, -225, -217, 474, -224, 484, 484,
	484, 2, 212, 213, 319, 318, 365, 366, 484, 484,
	2, 25, 57, 82, 85, 108, 139, 159, 162, 285,
	-495, 246, 295, 317, 364, 396, 404, 417, -489, 383,
	58, 355, -488, -490, 422, 119, -314, 102, 237, 167,
	429, 401, 399, 427, 114, 201, 432, 431, 484, 25,
	57, 67, 85, 119, 139, 159, 162, -497, 295, 317,
	352, 355, 364, 396, 404, 422, 417, 2, 446, 361,
	397, 195, 102, -490, 315, -79, 2, 481, 30, 29,
	368, -154, 397, 206, 2, -189, 212, 213, 2, 484,
	484, 160, -476, 2, 212, 213, 2, 206, 2, 58,
	357, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 2,
	-139, 365, 383, 177, 42, 64, 26, 316, 69, 299,
	103, 169, 195, 196, 220, 82, 83, -316, 41, 213,
	212, -368, 398, 356, 362, 394, 353, 415, 88, 436,
	346, 458, 320, 321, 133, 4, 102, 257, 367, 407,
	237, 74, -504, 2, 397, -507, 2, 415, 415, 2,
	-507, 2, -507, 2, -507, 2, -508, 415, 455, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, -159, -161, -160, 484, 484, 484, 484,
	484, -139, 365, 2, 64, 26, -261, -262, 426, 204,
	127, 286, -158, -160, 2, -457, -413, 2, -342, -431,
	-344, 472, 473, 465, 266, 459, -356, 108, 427, 280,
	-430, -345, -358, 130, 349, -282, 8, 9, 5, 6,
	7, -198, -346, -352, 419, 142, 270, -231, 485, 10,
	481, -454, -160, -357, 35, 172, 56, -417, -230, -199,
	-389, 205, -229, -217, -451, -452, 4, -424, -425, -418,
	-391, -399, -395, -396, -403, -189, -427, 67, 94, 95,
	93, 98, 97, 239, 238, 99, 96, 367, 435, 57,
	34, 180, 181, 209, 271, 182, 65, -453, 120, -426,
	202, 203, 376, 45, 323, 152, 107, 106, 273, 49,
	47, 443, -400, 104, 407, 408, 409, 410, 164, 165,
	140, 141, 293, 308, 392, 416, 418, 170, 229, 90,
	161, 200, 184, 208, 210, 214, 230, 233, 258, 264,
	268, 290, 292, 344, 373, -511, 444, 387, 59, 60,
	-459, 324, -460, -211, -459, 484, 484, 486, 484, -255,
	-256, -257, 2, 26, 117, 481, 2, -372, 2, -373,
	-377, -160, 224, -376, 481, -374, 479, -218, 281, -455,
	350, -451, -452, -198, -217, -230, 4, -424, -426, -258,
	481, 483, 102, 397, 68, 195, -309, 481, -189, 26,
	280, 411, 486, -354, 481, 280, 160, 283, -189, 2,
	2, 369, 2, 481, -108, 61, 415, 40, 365, -329,
	2, -330, -186, -187, -188, -382, 211, 314, 322, 461,
	458, -413, -491, 160, 464, 411, -413, -283, 483, 2,
	2, 2, 2, 2, -377, 180, -218, 2, -215, -416,
	4, -424, -428, -425, -429, -427, 26, 29, 30, 31,
	33, 35, 36, 37, 38, 50, 56, 57, 62, 66,
	68, 77, 82, 88, 93, 94, 96, 95, 97, 98,
	99, 108, 112, 115, 117, 118, 122, 124, 127, 142,
	144, 157, 159, 160, 168, 171, 174, 187, 199, 204,
	206, 224, 227, 234, 238, 239, 266, 270, 276, 280,
	281, 285, 286, 303, 313, 326, 342, 360, 367, 379,
	393, 397, 405, 411, 413, 419, 426, 427, 435, 437,
	445, 449, 450, 451, 452, -430, 67, 2, -377, 180,
	2, -220, 180, -377, -223, 2, -202, -189, 2, -214,
	-416, 2, -234, 180, -218, -219, -223, -422, 180, 2,
	-420, 10, -419, 5, 4, -424, -428, -425, -94, -422,
	481, 411, 486, -273, -227, -228, -266, -189, 483, -342,
	2, -97, 2, -342, 180, 2, -97, 180, 2, -342,
	180, 2, -97, 180, 2, 2, 2, 417, 2, 85,
	180, -189, 397, 101, 2, 336, -496, 352, 421, 446,
	2, 2, 2, 2, 2, 2, 397, -207, 2, -189,
	157, -226, 180, 2, -189, 361, -505, 324, -422, 180,
	2, -221, -223, -221, 195, 207, -202, 180, 2, 401,
	399, 401, 399, 160, 2, 206, 2, 206, 2, -378,
	2, -379, -373, -218, 479, 2, 2, 2, 2, 2,
	180, -189, 397, 101, 2, 222, 2, 2, 2, 2,
	2, 2, 2, 2, 2, -275, 180, 2, -218, -275,
	180, 2, -275, 180, 2, -315, 2, 77, -202, 180,
	2, -423, 180, 2, -422, -386, 2, -385, -419, 442,
	-79, 481, -79, 481, 365, 481, -422, -218, -218, -342,
	-97, -95, -94, 160, -342, -97, -154, 157, 2, 102,
	397, -139, 2, 157, 437, 2, 8, 2, -422, 356,
	321, 149, 2, 369, 2, 370, 64, -316, 458, 64,
	160, 2, 160, 2, -299, 2, 452, -479, 2, 280,
	160, 2, 160, 2, 160, 2, 160, 2, 160, 2,
	318, 366, 213, 2, -97, 449, -342, 449, 2, 414,
	221, 134, 160, -299, 2, 160, 2, 160, 2, 5,
	2, 384, 2, 211, 314, 384, 2, -218, -499, 2,
	397, 446, 361, 2, 2, 78, 79, 160, 2, 160,
	2, 160, 458, 2, -292, -377, -328, -329, -328, 411,
	-261, -262, -139, 369, 2, -165, -290, -167, 157, -318,
	-319, -168, 234, 144, 276, -169, -298, 26, 117, -298,
	-298, 52, 482, 482, 11, 12, 66, 39, 472, 473,
	474, 475, 155, 476, 477, 470, 471, 469, 462, 463,
	467, 217, 218, 84, 466, 464, 76, 244, 351, 145,
	146, 147, 148, 333, 193, 32, 194, 14, 15, 16,
	31, 285, 233, 459, 184, 373, 465, 17, 18, 19,
	208, 210, 268, 44, 187, -197, -236, -342, -342, -342,
	-342, -342, 292, 481, -288, -337, 479, -160, 481, 481,
	481, -412, 8, -160, -342, -356, 482, -280, 481, -160,
	-356, -351, 481, 349, 479, 481, -359, -342, 5, 5,
	5, 481, 483, -461, 453, 157, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
	481, 310, -393, 481, -392, 481, -392, -392, 447, -390,
	481, 460, 454, 481, -390, 481, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 447, 486,
	-459, -258, 481, -284, -380, -342, 474, -284, -284, 280,
	-277, -342, 90, -302, 214, 258, 161, 230, 344, 200,
	-339, 485, -339, -367, 460, -160, -374, -217, -160, -376,
	481, -372, -367, -80, -412, -67, -77, -85, -97, -110,
	-143, -144, 474, -218, 481, 160, 481, 483, 160, -266,
	-416, -202, -218, -229, -230, -234, 116, -277, -476, -266,
	-192, 36, -353, -387, -388, -433, -432, -389, -398, -394,
	-397, 306, 307, -418, 47, 443, -400, 205, 4, -424,
	-426, 202, 203, 376, 45, 323, 152, 107, 106, 273,
	49, 407, 408, 409, 410, 164, 165, 444, 387, 59,
	60, -476, -266, 157, -415, -277, 36, -329, 2, 108,
	-420, 40, -509, 486, 232, -238, 243, 265, 176, 281,
	456, 274, -421, 5, 4, -352, -364, 108, 237, 205,
	-406, -408, 8, -407, 9, -409, 472, 473, -414, -413,
	92, 483, -416, -176, 334, -175, 23, 27, 121, 440,
	135, -248, 197, 298, 130, 380, 430, -485, -486, 354,
	402, 403, 80, 274, 334, 130, -295, -297, 36, 100,
	260, 294, 53, 190, 248, 249, 382, 448, 130, 334,
	-486, 334, -486, -178, 380, 430, -485, -486, 354, 334,
	-177, -248, 130, 485, -482, -456, 452, 130, -383, -382,
	-423, -94, -273, 486, 486, -416, 474, 130, 130, 130,
	130, 2, 2, 266, 2, 2, 2, 162, -488, -497,
	2, 2, 2, -218, 180, -260, 280, -478, -274, 397,
	-218, 266, -220, 180, 2, -223, 446, -482, 266, 36,
	481, 2, -315, 2, 195, -456, 266, -378, -232, -218,
	-373, -232, 368, -211, 36, -339, -339, 130, 2, 2,
	2, -189, -179, 486, 55, 340, 130, -179, 130, -179,
	130, -235, 180, -234, -179, 130, 486, 130, 482, 486,
	-386, -386, -422, -152, 452, 160, 88, 481, 481, -154,
	-383, 486, -95, -422, -478, -202, 2, -218, 2, 397,
	215, -152, -422, -422, -422, -415, 26, 370, 2, 318,
	366, 79, 370, 2, -218, 397, 102, 195, 70, -480,
	157, -477, 345, -476, -218, 102, -218, 102, -218, 102,
	-218, -218, 2, 2, 2, 2, 75, 75, 157, 2,
	414, 2, 414, 2, -189, -189, -189, 232, -218, 157,
	397, 195, 397, 195, 102, 397, -179, 486, -193, -165,
	-290, -415, -291, -290, -166, -165, -168, 157, 322, 431,
	260, 371, 219, -319, -318, 26, -342, -323, 151, 259,
	-342, -321, -344, 472, 473, -407, -409, -276, 274, -159,
	-159, -159, -263, -369, -342, 313, 195, -402, -387, -387,
	-216, -416, 407, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, 233, 184,
	373, 44, 187, -342, 411, -342, -342, -342, -342, 255,
	266, 270, 419, 142, 428, 117, 274, -512, 393, 38,
	-349, -160, -281, 481, -363, 33, 379, 26, -356, 481,
	2, -337, -342, -338, -278, -277, -277, 482, 445, 26,
	117, 474, 2, 482, 486, 36, 482, -342, -278, -355,
	-351, -277, -362, -361, 449, -310, -311, 457, 251, 105,
	178, 250, -312, 359, -410, 8, -416, 474, -462, 150,
	171, 481, 482, 2, 482, 2, 482, -342, 2, 482,
	-342, 2, 482, -342, 2, 482, -342, 2, 482, 2,
	-342, -342, -342, -342, -342, -342, -342, -277, 8, -410,
	-410, 407, 407, -410, -410, -410, -401, 306, 235, 307,
	166, 254, 252, 253, 165, -401, -304, 2, -404, -277,
	4, 457, 251, 105, 178, 250, 359, 5, -304, 2,
	-305, 2, -342, -277, -306, -343, -344, 472, 473, 465,
	-356, -307, 2, -342, -278, -342, 50, 227, 413, -308,
	-342, 160, -277, -277, 2, -277, 2, -460, 36, -277,
	-269, 486, 160, 36, 4, -269, -269, 481, 482, 486,
	-303, 175, 247, 242, -303, -372, -302, 214, -300, 290,
	-300, -300, -367, -203, 479, 487, -416, -367, -366, -365,
	36, -211, 287, -367, -367, 483, 482, -366, 480, -474,
	481, 484, 484, 484, 484, 484, -218, 481, -277, -416,
	385, 482, 483, 208, 208, 208, 208, 350, 482, 411,
	452, -79, 282, 482, 486, -268, 35, 479, 483, 2,
	2, -405, 447, 481, 481, -311, 481, 160, -267, -491,
	482, 415, -330, -237, 322, 378, 335, 363, 395, 8,
	9, 8, 9, 486, -416, 486, -492, 82, 411, 68,
	-333, 180, 68, -434, -205, 82, -435, -189, 62, 427,
	313, 159, 128, -492, 82, 313, -492, 82, 82, 368,
	383, 52, -377, 39, 39, 26, -97, 228, 160, 458,
	397, 195, 411, -377, -297, -387, 100, 248, 249, 52,
	-411, -406, 472, 473, -411, 52, -411, -411, -411, 452,
	-220, -377, 411, 411, 486, 39, 39, 26, -97, 228,
	160, 411, -234, -203, -483, -194, 89, 261, 241, 262,
	-195, -196, 300, 439, -422, -149, 191, 482, -383, -227,
	-189, 483, -342, -97, -342, -97, 130, 2, -505, 222,
	481, -241, 266, 160, -266, -384, 206, 486, -274, 130,
	-296, -295, 266, -222, 180, 2, -218, 130, 481, 125,
	320, 2, -204, 180, -190, -189, -315, -182, 400, 130,
	-294, 437, -324, -97, 481, 108, 36, -324, -285, -286,
	-381, -287, -205, 481, -211, -189, 2, -218, -275, -275,
	-275, -179, 486, 130, -202, -422, -423, -79, -385, 482,
	482, 482, -151, 284, -150, -189, 5, -154, 437, -240,
	-334, -333, -438, -439, -434, 233, 195, 427, 207, 143,
	-259, -206, -205, 101, -152, -94, -383, -152, -152, -383,
	-383, -218, 157, -152, -152, -152, 2, 2, -299, -218,
	-202, -234, -218, -266, -266, -299, -202, -299, -202, -299,
	-202, -97, -342, 365, 157, 157, 483, -299, 320, 102,
	397, 298, 195, -218, -234, -218, -234, -202, -218, -377,
	-291, -166, 281, 219, 371, -321, -322, -344, 349, 350,
	-322, 349, 350, 8, 9, 8, 9, -170, 375, 269,
	-275, 486, -173, 37, 115, 219, -218, 458, 126, -342,
	-342, 411, -512, 393, -349, 126, -342, 255, 270, 419,
	142, 428, 117, 274, 160, 481, -343, -343, 482, -279,
	-342, -342, 480, 489, 482, -262, 486, -261, -342, -277,
	-277, 482, 483, -277, -266, 480, 480, 486, 482, -360,
	-361, 122, -342, 411, 411, 411, 411, 481, 482, 483,
	-467, 291, 481, 481, -342, 482, 482, 482, 482, 36,
	486, 486, 486, 482, 486, 486, 486, 482, 482, 482,
	486, 482, 458, 458, 482, 482, 482, 482, 486, 482,
	486, 482, 160, 482, 482, -313, 303, 482, 11, 12,
	472, 473, 474, 475, 155, 476, 477, 470, 471, 469,
	462, 463, 464, 76, 244, 351, 14, 15, 16, 208,
	187, -343, -343, -343, 482, -347, -348, 160, 157, 36,
	-308, -308, -308, 482, 160, -277, 482, 482, 481, 482,
	-336, -335, 450, -380, -270, 2, -372, -213, -416, -336,
	-336, -277, -342, 214, 214, -301, 437, 280, -303, -372,
	-366, -412, -341, -340, 158, 37, 115, 263, 183, -366,
	-211, -258, -366, -366, -416, -367, -367, -365, 482, -475,
	-412, 482, -271, -375, -455, -262, 483, -152, -416, -140,
	5, 270, -140, -140, -140, -266, 24, 304, -387, 479,
	480, 8, -416, 481, -410, -410, -410, -266, 160, -413,
	-329, 425, 73, 322, 407, -413, -175, 334, -205, -205,
	-218, 266, -333, 180, -181, 266, -387, -212, -189, 481,
	481, 219, 219, 437, -205, -212, 219, 180, -205, 180,
	-212, -212, -484, 322, 275, -342, 236, 320, 267, -176,
	334, -97, -97, -97, 481, -491, 437, 116, -218, -234,
	-218, -222, 334, 264, -229, -411, -411, -295, 334, -220,
	-202, -177, -97, -97, -97, 481, -203, -178, 334, -194,
	-422, 270, 433, -482, -152, 160, -149, 474, -189, 446,
	-189, -239, -242, -240, -205, -157, 454, 452, 130, -233,
	-218, 479, -152, -422, -218, -226, 130, -258, 266, -422,
	2, 481, 2, 280, 266, -204, 180, -183, 123, -510,
	464, -202, -336, -270, -293, -327, 342, 280, -259, 442,
	-211, -293, -272, 486, 160, 464, 483, -259, 2, -179,
	-179, -179, -234, -235, -179, -79, -79, -152, 486, 481,
	464, 464, 481, -422, -422, 482, 486, -218, -204, 195,
	195, -210, -190, 482, 486, 483, 481, -152, 160, -45,
	452, 397, 485, -299, -299, -299, 365, 365, -189, -214,
	-202, -218, -215, -234, 157, 157, 431, -322, 281, 240,
	-369, -174, 272, -218, 485, -342, -342, 126, 126, -342,
	-343, -343, -342, 126, 160, 481, -342, -353, 31, 31,
	482, 486, -338, -342, 482, 445, -262, -262, 482, 474,
	-416, 485, 482, -351, 124, -342, 405, 251, 178, 250,
	-312, 250, -312, -312, -410, 5, -416, 474, -468, -208,
	481, -189, 450, -261, 482, -402, -387, -342, -342, -342,
	-342, -342, -410, -390, -390, -410, -410, -342, -347, -342,
	-402, -387, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, -343, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, 117, 266, 274, -343, -348, -347, -342, -342, -387,
	482, 482, 482, -277, -79, -289, 171, -342, -383, 486,
	-289, -289, 482, -372, -372, 481, -342, 214, 480, 486,
	488, 464, -258, 483, -365, -366, 480, 482, 486, 482,
	486, -326, 36, 482, -416, 283, 5, 8, 479, 480,
	483, -410, 482, 482, 482, -266, -342, 411, 411, 130,
	266, 439, -440, -435, 128, -342, -264, -370, -342, 481,
	481, 2, -172, 121, 368, -493, 2, 437, 130, -179,
	130, -179, 456, 481, 481, 411, 452, -277, -342, -153,
	108, -415, -486, 485, -486, 485, 411, 411, 452, -277,
	411, -422, 270, -423, -152, 2, 2, 2, 482, 482,
	486, -441, 36, 278, 481, 278, -218, -63, 452, -382,
	-412, -220, 36, 130, -482, 2, -218, 130, 280, 266,
	-184, 226, -510, -420, -456, -262, -293, -284, 267, 81,
	482, -336, -286, -270, -342, 2, 482, -179, -150, -151,
	-422, -422, -422, -152, -154, -154, -334, -243, 481, -204,
	-190, 481, -154, -206, 2, -423, -97, 284, -218, 474,
	-299, -250, -249, 298, 274, -250, 349, 349, 281, 151,
	223, -173, -203, -342, -342, 126, 31, 31, -342, -342,
	-353, 482, -342, -342, -277, 480, 5, -342, 482, 482,
	8, -342, 482, 483, -469, -189, -342, 482, 482, 482,
	486, 486, 482, 482, 482, 482, 482, 482, 482, -348,
	160, 117, 274, 481, 482, 482, -350, 174, 52, -372,
	-350, -350, -301, -266, -372, -340, -203, 479, -416, -412,
	-375, 481, 483, 480, 2, 479, -416, 482, -205, -205,
	-333, 130, -442, 82, -444, 66, 143, 88, 266, 270,
	427, 313, 62, 108, 326, -501, 36, 482, 482, 486,
	-173, -264, -266, 266, 390, 108, 266, 108, 101, 422,
	69, -205, -212, -266, -266, -218, 136, 482, 486, 464,
	2, 474, 474, -222, -220, 136, 482, -203, -246, 198,
	-205, -439, -436, -437, 313, -443, -445, 143, 313, -97,
	-156, -155, -189, 5, 2, 481, -241, 284, 480, -296,
	-97, -222, -317, 437, -203, -218, 130, -185, 225, -510,
	-420, -182, -320, -318, -325, 481, 280, -97, -262, 464,
	482, 482, 101, 101, 189, 129, -264, 481, 481, -266,
	101, 482, -46, -47, 195, 82, 302, -215, 397, 195,
	481, 481, -173, -342, -342, -342, 482, -262, -416, 474,
	-463, 298, 482, -342, -342, -343, 160, 481, -353, -464,
	451, -342, -277, -464, -464, 482, -412, 2, 479, 2,
	-333, -212, -216, -209, -189, 143, 180, 270, 219, 481,
	-343, -218, 481, 2, -502, 112, 199, -332, -503, 87,
	391, 188, -370, -174, 482, 482, 270, 270, -342, -387,
	481, -179, -179, 482, 482, -342, 411, -415, 86, -413,
	2, -486, -342, 411, -247, -248, 187, -441, 219, -209,
	219, -500, 452, 482, 486, 464, 464, -239, -157, -64,
	-65, 412, -382, -258, 481, -189, 280, 481, -203, -510,
	-420, -183, -293, 118, -266, 82, -320, -349, -152, 481,
	481, -244, 71, 83, 109, 179, 163, 196, 383, 388,
	26, -244, 482, -264, -264, 482, 481, -152, 486, 26,
	481, 26, 481, -218, -234, -277, -277, 482, -262, 52,
	482, 482, -343, -353, 482, -465, -466, -208, 480, 2,
	-444, -209, 266, 437, -342, -191, 481, -342, 199, 113,
	185, -246, 481, -331, 437, 326, -200, 66, -264, 481,
	481, 481, 464, 160, 481, -157, 296, 481, -245, 280,
	101, 260, -155, -345, -345, 482, 36, -65, 9, 36,
	-264, -218, -264, 280, -420, -184, 431, 267, 482, -212,
	-293, -423, -423, -331, 482, 482, -423, -47, -266, -266,
	482, 482, -470, 320, 350, 173, -277, 482, 486, 36,
	130, 175, 482, -446, 245, -189, 482, 113, 185, -247,
	-266, -246, 175, -218, -487, 437, -216, 482, -252, -251,
	-249, -254, -253, -249, -277, -413, 86, 296, -277, -245,
	-218, -265, -371, -205, 72, 101, -246, -97, -97, 482,
	-317, 482, -218, -185, 368, -335, 482, 482, -332, -331,
	482, 482, 482, 482, -471, -472, 44, 424, 92, -342,
	-471, -471, -466, -468, 143, 452, -447, -450, -449, 280,
	374, 161, 297, 482, 390, 448, -502, 482, 452, -258,
	-342, -331, 482, 486, 442, 482, 486, 442, 482, 160,
	482, 481, 482, 486, 312, 114, 121, -247, -500, -331,
	481, -332, 481, -285, -152, -152, -246, -332, -152, -473,
	128, -472, 309, 156, 349, 309, 156, -473, -473, -209,
	48, -449, 280, -450, 280, 431, 114, 48, -446, -246,
	-251, 187, -253, 160, 296, -266, -371, 350, 350, 2,
	-157, -245, -332, -264, -246, -264, -336, -247, -246, 92,
	171, 406, 260, 31, 464, -448, 260, 340, 55, 368,
	-448, 464, -447, 481, 481, 482, 2, -245, -246, 482,
	-247, 482, -247, 349, 288, -472, -342, 22, 270, 108,
	-342, -502, -277, -277, -180, 55, 340, -247, -331, -506,
	450, -332, 482, 482, -506, -332, 2, -246, -247, 411,
	-246, -247, 481, -247, -506, -277, -506, 482, -247,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	366, 367, 369, 370, 371, 373, 374, 376, 378, 380,
	382, 383, 385, 387, 389, 390, 391, 392, 393, 395,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 455, 457, 0, 984, 986, 988, 990, 0, 585,
	0, 28, 29, 0, 0, 193, 195, 197, 0, 222,
	224, 225, 227, -2, 0, 323, 324, 326, -2, -2,
	0, 0, 444, 446, 0, 0, 0, 466, 467, 0,
	1072, -2, 460, 462, 464, 529, 531, 533, 535, 537,
	539, 541, 542, 544, 546, 548, 550, 552, 554, 556,
	557, 559, 561, 563, 565, 567, 569, 571, 573, 575,
	577, 579, 581, -2, -2, -2, 0, -2, -2, -2,
	1002, 32, 34, 36, 38, 40, 42, 44, 275, 276,
	278, 280, 282, 284, 287, 288, 290, 1127, 328, 330,
	332, 334, 336, 0, -2, 1139, 0, 0, 46, 47,
	48, 49, 50, 51, 52, 53, 69, 70, 71, 72,
	73, 74, 75, 76, 57, 59, 60, 64, 65, 67,
	55, 0, 0, 1103, 1105, 1107, 1109, -2, 0, 0,
	7, 9, 11, 13, 15, 17, 19, 21, 368, 372,
	375, 377, 379, 381, 384, 386, 388, 394, 396, 398,
	867, 1754, 1771, 1772, 1773, 1776, 1777, 1778, 1779, 1780,
	1781, 2128, 2209, 2210, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	0, 422, 420, 1747, 423, 1961, 425, 427, 317, 318,
	319, 320, 321, 322, 0, 437, 431, 436, 438, 440,
	441, 442, 443, 417, 415, 0, 437, 1806, 435, 982,
	983, 977, 978, 1992, 1009, 456, -2, -2, -2, 2094,
	-2, 488, -2, 495, 2098, 1994, 500, 0, 502, -2,
	505, 985, 987, 989, 583, 584, 1757, 0, 0, 0,
	0, 30, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 917, 918, 0, 0, 157, -2, -2, -2,
	-2, 0, 0, 1844, 1715, 1773, 1718, 1713, 194, 196,
	198, 199, 0, 0, 0, 0, 0, 0, 223, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	763, 755, 756, 954, 0, 0, 0, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, -2, 0, 0, 253, 358, 359, 0, 1128, 1128,
	0, 0, 0, 0, 174, 165, 0, 0, 732, 445,
	447, 0, 0, 160, 0, 0, 981, 0, 176, 0,
	0, 461, 463, 465, 530, 532, 534, 536, 538, 540,
	543, 545, 547, 549, 551, 553, 555, 558, 560, 562,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	590, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 593, 595, 596, 597, 0,
	648, 665, 0, 907, 1129, 1011, 992, 1006, 1011, 994,
	995, 996, 997, 998, 1003, 1005, 999, 1000, 1001, 33,
	35, 37, 39, 41, 43, 45, 277, 279, 281, 283,
	285, 289, 291, -2, 1101, 1102, 329, 331, 333, 335,
	337, 448, 0, 450, 0, 594, -2, 0, 1133, 1133,
	1133, 0, 0, 1102, 1100, 0, 453, 454, 509, 510,
	1360, 0, 0, 0, 0, 0, 1612, 1444, 0, 511,
	-2, 1475, 1477, 2069, 2094, 1611, 1479, 1480, 1481, 1482,
	1483, 0, 1485, 1486, 1487, 1488, 1489, 1490, 0, 1492,
	0, 1497, 1498, 1499, 0, 2076, 1692, 1767, -2, 0,
	0, 2082, 1763, 0, 1578, 1515, -2, -2, 1790, 1769,
	1292, 1293, 1294, 1295, 1296, -2, -2, 2111, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	2058, 2077, 2078, 2083, 2085, 2079, 2066, 1540, 1854, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1319, 1328, -2, -2, -2, -2, -2, -2,
	2070, 2071, 2088, 2091, 2097, 2102, 2103, 2075, 2084, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 1320, -2, -2, -2, -2,
	1119, 1971, 1122, 867, 1120, 1104, 1106, 0, 1108, 0,
	0, 0, 1113, 1136, 1134, 0, 1175, 1117, 1118, 1193,
	1193, 1217, 0, 1198, 0, 1217, 1128, 1243, 0, 1204,
	1987, 1516, 1517, 0, 1773, 1768, -2, -2, 2109, 0,
	0, 0, 0, 0, 0, 0, 418, 0, 424, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 458,
	459, 0, 483, 0, 487, 2065, -2, 1812, 2003, -2,
	491, 1012, 1016, 1017, 1018, 1019, 0, 0, 0, 0,
	0, 497, 0, 0, 484, 485, 503, 506, 0, 586,
	587, 588, 589, 54, 0, 2077, 1243, 56, 0, 1737,
	1798, 1799, 1800, 1801, 1802, 2110, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
	2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
	2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, 2111, 58, 0, 2077,
	61, 0, 2077, 0, -2, 66, 0, 1743, 68, 0,
	1740, 77, 0, 2077, 0, 1712, -2, -2, 2077, 915,
	177, 178, 1786, 1787, 1794, 1795, 1796, 1797, 1230, 161,
	0, 0, 0, 724, 1709, 1714, 725, 1719, 0, 200,
	201, 202, 203, 204, 2077, 206, 207, 0, 209, 210,
	2077, 212, 213, 0, 215, 229, 230, 0, 232, 0,
	2077, 0, 0, 0, 238, -2, 254, 0, 251, 0,
	242, 243, 245, 246, 247, 248, 0, 295, 293, 1748,
	0, 733, 2077, 735, 1753, 0, 0, 936, -2, 2077,
	912, 941, 1751, 0, -2, 0, 1126, 2077, 1026, 759,
	760, 761, 762, 0, 314, 0, 1039, 0, 1041, 0,
	1062, 1249, 1193, 1193, 0, 255, 256, 257, 258, 259,
	2077, 0, 0, 0, 264, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 152, 2077, 340, 356, 152,
	2077, 343, 152, 2077, 346, 0, 349, 952, 152, 2077,
	352, 353, 2077, 355, 179, 0, -2, 411, 1756, -2,
	361, 0, 362, 0, -2, 0, 191, 0, 0, 730,
	731, 1230, 163, 0, 979, 980, 0, 0, 468, 0,
	0, 591, 592, 0, 0, 602, 603, 604, 191, 1995,
	1969, 1871, 609, 0, 612, 615, -2, 0, 0, 0,
	0, 619, 0, 624, 625, 626, 0, 729, 628, 0,
	0, 630, 0, 634, 0, 637, 0, 639, 0, 641,
	-2, -2, -2, 652, -2, 0, 656, 0, 658, 0,
	0, 0, 0, 673, 674, 0, 679, 0, 682, 683,
	684, 685, 686, 0, 688, 689, 690, 691, 0, 693,
	694, -2, -2, 698, 700, 0, 707, 0, 711, 0,
	715, 0, 598, 599, 152, 1247, 991, -2, 993, 0,
	-2, 0, 449, 0, 452, 1154, 1087, 1084, 0, 1151,
	1152, 1088, 0, 0, 0, 1095, 0, 1131, 1132, 0,
	0, 0, 1074, 1075, 0, 0, 0, 0, 1617, 1618,
	1619, 1620, 1621, 1622, 1625, 1626, 1623, 1624, 1627, 1628,
	0, 0, 0, 0, 0, 1629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 1631, 1632,
	0, 0, 1634, 0, 1636, 0, 0, 0, 0, 0,
	0, 1423, 1425, 1700, 0, 0, 1633, 1365, 1366, 1367,
	1402, 1403, 0, 0, 1476, 1697, 1696, 1478, 0, 1648,
	0, 1491, 1733, -2, 0, 1612, 1643, 0, 0, 1500,
	1501, 1502, 0, 0, 1648, 0, 0, 1691, 1512, 1513,
	1357, 0, 0, 1580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1305, 0, 1307, 0, 1308, 1309, 1316, 1329,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 1672, -2, 0, 0, 0, 0, 1321, 0,
	1121, 0, 0, 1179, 1701, 1705, 1706, 1179, 1179, 0,
	0, 1649, 1240, 1240, 0, 0, 1236, 1236, 1236, 1234,
	1217, 0, 1217, 1227, 0, 1217, 1217, 0, -2, 1198,
	0, 0, 1227, 0, 1211, 399, 401, 403, 405, 406,
	407, 409, 1244, 1245, 0, 0, 0, 0, 0, 0,
	1774, 0, 0, 0, 1759, 0, 0, 0, 0, 429,
	439, 1128, 0, 1651, 1266, 1270, 1271, 1272, 1273, 1274,
	1275, 0, 0, 1267, -2, 1317, 1319, 1340, 1791, 1792,
	1793, 1300, 1301, 1302, 1303, 1304, 1312, 1299, 1299, 1299,
	1310, 1339, 1331, 1339, 1335, 1286, 1287, 1322, 1323, 1324,
	1325, 0, 433, 0, 0, 0, 0, -2, 493, 498,
	499, 0, 0, 1014, 0, 1020, 520, 521, 522, 1022,
	1023, 0, 496, 523, 524, 525, 526, 527, 528, 0,
	1721, 1722, 1723, 1724, 1727, 1728, 0, 0, 494, 513,
	501, 0, 507, 78, 974, 117, 0, 974, 974, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 102, 113,
	90, 91, 0, 0, 0, 0, 62, 889, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	101, 0, 96, 80, 0, 0, 0, 103, 115, 0,
	143, 145, 0, 0, 913, 0, 1125, 0, 182, 1229,
	0, 1230, 723, 0, 0, 1774, 1717, 0, 0, 0,
	0, 231, 233, 0, 235, 236, 237, 0, 935, 0,
	244, 241, 286, 838, 2077, 0, 0, 312, 307, 0,
	309, 0, 888, 2077, 886, 1752, 0, 910, 0, 0,
	0, 942, 1783, 947, 953, 1028, 0, 316, 0, 1042,
	1044, 0, 0, 1250, 0, 1252, 1253, 0, 261, 262,
	263, 0, 338, 0, 150, 151, 0, 341, 0, 344,
	0, 152, 2077, 1707, 350, 0, 0, 0, 1128, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	191, 0, 1230, 191, 191, 1230, 470, 1230, 472, 0,
	0, 605, 191, 191, 191, 610, 611, 613, 614, -2,
	-2, 708, 616, 617, 676, 0, 0, 0, 675, 627,
	0, 717, 1983, 727, 676, 1844, 676, 1844, 676, 1844,
	638, 640, 643, 668, 651, 655, 0, 0, 0, 660,
	0, 662, 0, 664, 676, 677, 680, 687, 692, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 1004, 1154,
	1087, 451, 1078, 1153, 1079, 1086, 1089, 0, 0, 1091,
	0, 1093, 0, 1149, 1150, 1157, 1158, 0, 1168, 1169,
	1161, 0, -2, 0, 0, 1164, 1165, 1097, 0, 1114,
	1115, 1116, 1140, 1141, 963, 0, 2209, 1361, 1261, 1362,
	1363, 1736, 0, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, -2, -2, -2, -2, -2, -2, -2,
	-2, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, -2, -2, -2, 1400, 1401, -2, 1635, 1637,
	0, 1700, 0, -2, 0, -2, -2, -2, -2, 1420,
	0, 1422, 1427, 1429, 1431, 0, 0, 0, 0, 1699,
	1441, 1683, 1684, 0, 0, 1614, 1615, 1616, 1426, 0,
	1445, 1698, 1695, 0, 0, 1647, 1139, 1504, 0, 0,
	0, 0, 1511, 1496, 1645, 0, 1644, 0, 0, 0,
	1655, 0, 1690, 1686, 0, 1734, 1356, 1343, 1344, 1345,
	1346, 1347, 1348, 1358, 0, 1731, 1760, 1766, 1588, 0,
	0, 0, 1541, 1542, 1543, 1544, 1545, 0, 1547, 1548,
	0, 1550, 1551, 0, 1553, 1554, 0, 1556, 1557, 1558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 0, 0, 1560, 0, 1658,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 1562,
	0, 1564, 1649, 1669, 0, 0, 1446, 0, 0, 0,
	1612, 0, 1567, 1649, 1677, 0, 0, 0, 0, 0,
	1649, 0, 1682, 0, 1574, 0, 1576, 1123, 0, 0,
	1256, 0, 0, 0, 1704, 1256, 1256, 0, 1174, 0,
	0, 1237, 1238, 1239, 0, 0, 1240, 0, 1231, 1235,
	1232, 1233, 1227, 1190, 0, 0, 1738, 1227, 1196, 1226,
	0, 867, 1216, 1227, 1227, 0, -2, 1200, 1217, 0,
	0, 400, 402, 404, 408, 410, 0, 0, 1139, -2,
	191, 866, 0, 0, 0, 0, 0, 419, 421, 0,
	0, 413, 0, 416, 0, 1257, 1260, 0, 0, 1276,
	1277, 0, -2, 0, 0, 1341, 0, 0, 0, 0,
	486, 0, 1013, 1021, 0, 517, 0, 519, 0, 1725,
	1729, 1726, 1730, 0, 508, 0, 0, 0, 0, 973,
	121, 2077, 0, 154, 0, 0, 831, 1744, 0, 0,
	0, 0, 1859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 92, 0, 0, 0,
	0, 0, 0, 0, 890, 891, 893, 900, 902, 0,
	896, 1732, 0, 0, 897, 0, 899, 901, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 93, 0,
	0, 0, 0, 1711, 931, 929, 923, 924, 925, 926,
	927, 928, 0, 0, -2, 191, 0, 162, 182, 1710,
	1720, 0, 205, 208, 211, 214, 0, 239, 0, 0,
	765, 738, 0, 0, 294, 191, 0, 0, 308, 0,
	884, 887, 0, 867, 2077, 922, 1750, 0, 0, 0,
	0, 940, 0, 2077, 1739, 1782, 1783, 1030, 1036, 0,
	1256, 0, 1060, 1045, 0, 0, 0, 1060, 1064, 1065,
	1067, 1068, 0, 0, 1251, 0, 265, 357, 152, 152,
	152, 347, 0, 0, 152, 180, 354, 360, 412, 1128,
	1128, 191, 189, 1946, 187, 184, 186, 0, 0, 0,
	766, 768, 769, 770, 771, 0, 1783, 0, 1897, 1783,
	0, 1048, 1050, 0, 158, 164, 191, 0, 306, 469,
	474, 600, 0, 606, 607, 608, 645, 670, 618, 620,
	621, 622, 0, 728, 726, 629, 676, 632, 676, 635,
	676, 654, 657, 659, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 712, 713, 714, 716, 1248,
	1082, 1083, 1085, 0, 1094, 0, 0, 1163, -2, -2,
	1162, 1166, 1167, -2, -2, -2, -2, 1090, 0, 1099,
	1096, 0, 1148, 961, 962, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1442, 0, -2, 1421, 1424, 1428,
	1430, 1432, 0, 0, 0, 0, 0, 0, 1638, 0,
	1640, 1443, 1693, 1696, 1610, 0, 0, 1138, 1139, 1139,
	0, 1510, 0, 1646, 0, 1653, 1654, 0, 1503, 0,
	1687, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 1546, 1549, 1552, 1555, 0,
	0, 0, 0, 1535, 0, 0, 0, 1539, 1311, 1297,
	0, 1339, 1337, 1338, 1332, 1339, 1336, 1289, 0, 1288,
	0, 1559, 0, 1561, 1563, 0, 0, 1565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 1450, 1451, 1566, 1675, 1676, 0, 0, 0,
	0, 0, 0, 1572, 0, 1681, 1573, 1575, 1128, 1176,
	1171, 1255, 0, 1702, 1230, 1178, 1180, 1703, 1741, 1171,
	1171, 0, 1650, 0, 0, 1221, 0, 0, 0, 1223,
	1194, 0, 0, 1188, 0, 1184, 1185, 1186, 1187, 1195,
	867, 1225, 1197, 1201, 1760, 0, 1227, 0, 1212, 0,
	1214, 1246, 0, 1206, 1209, 0, 0, 192, 1775, 216,
	220, 221, 217, 218, 219, 428, 0, 0, 1652, 0,
	1262, 0, 1268, 0, 0, 0, 0, 432, 0, 482,
	-2, 515, 516, 518, 0, 514, 118, 974, 0, 0,
	965, 0, 123, 2077, 132, 0, 806, 0, 1742, 0,
	0, 0, 0, 0, 976, 0, 0, 2077, 152, 2077,
	152, 135, 138, 0, 142, 140, 0, 0, 797, 79,
	974, 82, 86, 94, 0, 0, 0, 100, 0, 0,
	0, 967, 0, 894, 895, 898, 904, 63, 0, 969,
	964, 144, 84, 88, 95, 0, 971, 81, 0, 930,
	908, 909, 0, 914, 155, 0, 191, 1716, 0, 0,
	0, 0, 0, 764, 849, 0, 0, 0, 0, 300,
	296, 0, 305, 311, 310, 734, 0, 0, 0, -2,
	937, 0, 939, 0, 0, 0, 2077, 1032, 1036, 0,
	1035, 1126, 1139, 315, 1037, 1060, 0, 0, 0, 1047,
	1043, 1040, 1256, 0, 0, 0, 0, 0, 260, 339,
	342, 345, 1708, 152, 351, 363, 364, 166, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 775, 0, 1783,
	1783, 0, 1746, 0, 0, 0, 0, 159, 0, 471,
	0, 0, 0, 631, 633, 636, 661, 663, 676, 701,
	702, 792, 0, 792, 0, 0, 1092, 0, 1160, 1098,
	1142, 1143, 0, 963, 0, 1364, 1405, 0, 0, -2,
	0, 0, 1409, 0, 0, 0, -2, 0, 0, 0,
	1639, 1641, 0, 1695, 1505, 0, 0, 0, 1509, 1493,
	1494, 0, 1613, 1656, 1685, 1689, 0, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 0, 1735, 1761, 1765, 1586, 1587,
	1591, 1749, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 1334, 0, 0, 1657, 1668, 1670,
	1447, 1448, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, -2, -2, -2, 1465, 1466, 1467, -2, -2,
	-2, 0, 0, 0, 1671, 1673, 1674, 1678, 1679, 0,
	1569, 1570, 1571, 1680, 0, 1173, 0, 1254, 1177, 0,
	1173, 1173, 1135, 1219, 0, 0, 1242, 0, 1191, 0,
	1192, 0, 1224, 0, 1199, 1202, 1203, 1213, 0, 1205,
	0, 1208, 0, 1505, -2, 430, 414, 0, 0, 1264,
	0, 0, 1314, 1318, 1342, 434, 1228, 0, 0, 0,
	0, 153, 804, 830, 0, 0, 0, 956, 963, 0,
	0, 836, 125, 0, 0, 0, 133, 0, 0, 130,
	0, 137, 141, 0, 0, 0, 0, 0, 97, 98,
	99, 0, 104, 0, 105, 0, 0, 0, 0, 0,
	0, 933, 934, 181, 156, 234, 921, 240, 786, 837,
	0, 839, 0, 739, 0, 0, 838, 292, 0, 299,
	0, 888, 0, 0, 911, 938, 951, 0, 0, 0,
	1034, 1036, 0, 1027, 1028, 1156, 1038, 1058, -2, 1057,
	0, 1139, 1066, 1063, 1069, 1070, 0, 348, 188, 0,
	183, 185, 0, 169, 0, 0, 767, 772, 0, 0,
	0, 0, 0, 1049, 1051, 0, 175, 0, 601, 623,
	671, 703, 791, 0, 0, 705, 0, 0, 1159, 1146,
	1147, 1144, 963, 1407, 1411, 0, 0, 0, 1413, -2,
	0, 1435, -2, -2, 1642, 1694, 1484, 1139, 1506, 1508,
	1495, 1688, 1359, 0, 1593, 1590, 0, 1577, 1530, 1531,
	0, 0, 1534, 1536, 1537, 1538, 1298, 1291, 1290, 1667,
	0, 0, 0, 0, 1568, 1124, 1582, 0, 0, 1181,
	1582, 1582, 1220, 0, 1222, 1189, 1182, 0, 1761, 1215,
	1207, 0, 0, 1258, 1263, 0, 1269, 1313, 119, 120,
	122, 0, 805, 0, 808, 0, 0, 0, 0, 815,
	816, 0, 0, 0, 0, 0, 825, 853, 863, 0,
	1148, 0, 0, 0, 127, 147, 0, 0, 975, 0,
	0, 152, 152, 0, 0, 966, 0, 0, 0, 0,
	107, 0, 0, 968, 970, 0, 0, 972, 794, 0,
	849, 841, 842, 843, 0, 848, 850, 0, 0, 752,
	0, 748, 0, 0, 741, 765, 738, 0, 297, 885,
	919, 867, 0, 0, 0, 0, 0, 1024, 1036, 0,
	1029, 1030, 1060, 1155, 0, 0, 0, 1046, 1156, 0,
	190, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 473, 475, 0, 0, 481, 790, 0, 0,
	0, 0, 1145, 1415, -2, -2, 1436, 0, 1762, 1764,
	1139, 0, 1579, 0, 0, -2, 0, 0, 0, 1110,
	0, 1172, 1170, 1111, 1112, 1241, 0, 1210, 0, 1265,
	124, 0, 809, 810, 1745, 812, 0, 814, 817, 0,
	820, 1785, 0, 824, 832, 854, 0, 786, 0, 859,
	860, 861, 957, 958, 865, 0, 126, 128, 146, 960,
	0, 129, 136, 0, 0, 83, 0, 0, 1837, 110,
	108, 106, 85, 0, 738, 793, 0, 840, 0, 851,
	852, 742, 0, 740, 0, 0, 0, 0, 0, 298,
	301, 0, 304, 0, 0, 950, 0, 0, 0, 0,
	1031, 1032, 313, 0, 0, 0, 1060, 1071, 168, 0,
	0, 773, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 774, 865, 0, 0, 829, 0, 173, 0, 477,
	0, 479, 0, 704, 706, 0, 0, 1507, 1597, 0,
	1532, 1533, -2, 0, 1473, 1581, 1583, 0, 1183, 1259,
	807, 811, 0, 0, 0, 871, 0, 0, 0, 857,
	858, 794, 0, 786, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 750, 0,
	753, 0, 749, 746, 747, 786, 0, 302, 303, 0,
	0, 951, 0, 0, 1033, 1034, 0, 1053, 1054, 1056,
	1061, 0, 0, 863, 865, 828, 0, 476, 0, 0,
	709, 710, 0, 0, 0, 0, 1592, 1474, 0, 0,
	0, 0, 819, 876, 0, 0, 0, 855, 856, 853,
	0, 834, 0, 867, 131, 0, 959, 865, 0, 798,
	0, 0, 801, 0, 0, 111, 1837, 109, 0, 736,
	0, 0, 845, 847, 0, 754, 794, 752, 920, 865,
	0, 863, 0, 1025, 0, 1055, 191, 191, 786, 863,
	191, 478, 480, 1589, 1609, 1598, -2, 2038, 1841, 0,
	1609, 1609, 1584, 1585, 0, 0, 821, 872, 873, 0,
	868, 869, 870, 1784, 822, 823, 833, 862, 0, 871,
	148, 786, 795, 0, 0, 796, 0, 0, 114, 0,
	116, 0, 844, 0, 0, 0, 0, 738, 742, 863,
	0, 786, 0, 1256, 170, 171, 794, 786, 172, 1594,
	0, 0, 1600, 1601, 1602, 1603, 1604, 1595, 1596, 813,
	0, 874, 0, 875, 0, 0, 0, 0, 876, 134,
	799, 0, 802, 0, 112, 0, 846, 743, 0, 745,
	742, 751, 786, 0, 794, 0, 1052, 826, 794, 0,
	1606, 1607, 0, 0, 0, 877, 0, 880, 881, 0,
	878, 0, 853, 0, 0, 789, 744, 737, 794, 865,
	948, 863, 827, 1605, 1608, 1599, 818, 879, 882, 883,
	864, 835, 0, 0, 785, 787, 788, 948, 863, 945,
	0, 786, 794, 0, 943, 786, 949, 794, 800, 0,
	794, 948, 0, 948, 946, 0, 944, 794, 803,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 470, 3, 476, 471, 3,
	481, 482, 474, 472, 486, 473, 483, 475, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 489, 3,
	462, 464, 463, 467, 485, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 479, 3, 480, 477, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 487, 469, 488, 465,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 466,
	57805, 468, 57806, 478, 57807, 484, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1146
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1151
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1156
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1157
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1169
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1178
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1279
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1294
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1302
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1316
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1335
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1367
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1371
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1375
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1400
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1421
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1429
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1453
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1464
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1471
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1490
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1498
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1507
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1518
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1547
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1557
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1577
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1583
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1609
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1614
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1629
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1717
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1727
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1734
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1753
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1762
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1791
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1886
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1913
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1916
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1940
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1977
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1986
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1992
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2002
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2007
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2012
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2016
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2032
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2035
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2043
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2089
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2103
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2113
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2127
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2172
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2208
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2237
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2256
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2261
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2276
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2277
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2302
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2303
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2306
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2307
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2310
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2311
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2314
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2316
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2317
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2324
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2326
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2327
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2329
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2337
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2339
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2343
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2346
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2382
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2391
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2425
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2437
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2453
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2473
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2488
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2516
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2528
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2530
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2541
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2547
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2548
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2549
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2561
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2661
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2666
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2698
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2706
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2722
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2730
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "DELETE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2752
		{
			return helpWith(sqllex, "INSERT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2760
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2765
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2766
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2767
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "DELETE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2773
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2774
		{
			return helpWith(sqllex, "INSERT")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2785
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2807
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2815
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2819
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2823
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2833
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2840
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2878
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2881
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2901
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2905
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			return helpWith(sqllex, "GRANT")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2948
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2952
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2962
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2980
		{
			return helpWith(sqllex, "RESET")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2996
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "USE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3026
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3027
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3028
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "USE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3065
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3068
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3094
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3108
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3118
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3122
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3205
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3231
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3248
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3253
		{
			return unimplemented(sqllex, "set from current")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3254
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3267
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3284
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3334
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = tree.Low
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = tree.Normal
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.High
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3400
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3402
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3405
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3409
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3410
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3412
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3413
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3414
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3416
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3417
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3422
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3423
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3430
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3431
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3434
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3438
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3443
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3448
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3463
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.str = "client_encoding"
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.str = "timezone"
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3494
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3498
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3521
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3546
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3555
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3563
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3652
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3660
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3684
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3690
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3693
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3709
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3720
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3722
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3725
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = true
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = true
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = false
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3750
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3751
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3753
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3778
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3797
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3801
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3804
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3816
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3821
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3852
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3867
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3870
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3884
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3891
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3895
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3902
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3905
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3913
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3918
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3923
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3935
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3939
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3943
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3956
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3959
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3967
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3970
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3974
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3982
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3990
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3998
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4005
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4016
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4027
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4041
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4050
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4062
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4066
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4078
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4198
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4202
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4206
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4249
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4361
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4376
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4397
		{

			sqlVAL.union.val = nil
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4403
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4408
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4418
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4423
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4428
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4439
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4455
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4468
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4482
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4483
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4512
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4567
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4570
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4572
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4574
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4580
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4596
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4601
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4606
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, types.IsSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4711
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4725
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4729
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4737
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4771
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4790
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4804
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4815
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4867
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4907
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4918
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4945
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4960
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5014
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5025
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5026
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5027
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5028
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5029
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5030
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5102
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5159
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5186
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5195
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5203
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5214
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5219
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5229
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5232
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5234
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5236
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5242
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5244
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5246
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5254
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5257
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5275
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5282
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5290
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5297
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = true
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5307
		{

			sqlVAL.union.val = true
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = false
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5322
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5333
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5343
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5344
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5356
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5368
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5378
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5382
		{
			sqlVAL.union.val = nil
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5388
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5398
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5404
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5406
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5408
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5410
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5412
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5414
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5430
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5446
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5463
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5478
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5493
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5496
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5497
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5501
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5516
		{
			sqlVAL.union.val = false
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = true
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = false
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5532
		{
			sqlVAL.union.val = true
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.union.val = false
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5555
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5577
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5582
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.union.val = tree.Descending
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 964:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5602
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5608
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5616
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5622
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5630
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5636
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5648
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5653
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5654
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5657
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5658
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5666
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5669
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5679
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5691
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5702
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5706
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5707
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5708
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5727
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5732
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5745
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5750
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5754
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5759
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5760
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5761
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5775
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5778
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5781
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5782
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5800
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5810
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5823
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5825
		{
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5829
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5838
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5848
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5860
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5894
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.str = ""
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.str = ""
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5922
		{
			sqlVAL.str = ""
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5932
		{
			sqlVAL.str = ""
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5937
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5938
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5957
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5964
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5982
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5986
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5995
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6044
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6061
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6062
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6064
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6070
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6079
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6096
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6108
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6137
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6140
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6212
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6224
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6236
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6240
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6246
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6274
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6275
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6280
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6290
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6325
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6326
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6327
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6388
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6432
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6448
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6477
		{
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6478
		{
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = nil
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6491
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6492
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = true
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = false
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = false
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6510
		{
			sqlVAL.union.val = true
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6521
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6522
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6536
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6552
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6573
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6578
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6607
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6640
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6666
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6695
		{
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6699
		{
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6700
		{
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6727
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6731
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6753
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6755
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6770
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6792
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6797
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6802
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6825
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6844
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6883
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6893
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6928
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6939
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6969
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7002
		{
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = nil
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = true
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = false
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7084
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.str = tree.AstFull
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.str = tree.AstRight
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.str = tree.AstInner
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7121
		{
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7122
		{
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.str = tree.AstHash
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.str = ""
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7184
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7207
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7213
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7219
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7229
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7258
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7271
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7279
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7280
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7298
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7308
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7321
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7325
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7331
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error(fmt.Sprintf("type %q does not exist", sqlDollar[1].str))
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7367
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7374
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7375
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = types.Geography
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7425
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7433
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = nil
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = types.Int2
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = types.Int
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = types.Float4
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = types.Float
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7476
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7484
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7492
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = types.Bool
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = types.Float
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7525
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7531
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7547
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7553
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7571
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7583
		{
			sqlVAL.union.val = types.String
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = true
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = false
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = types.Date
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7602
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7610
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7624
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7633
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7641
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7658
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = true
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = false
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = false
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = types.Interval
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7682
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7701
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7766
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7781
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = nil
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7811
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7871
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7960
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8115
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8153
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8181
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8271
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8275
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8311
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8402
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8428
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8437
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8452
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8482
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8493
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8494
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8509
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8518
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {
					typ, ok, unimp := types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							sqllex.Error(fmt.Sprintf("type %q does not exist", typName))
							return 1
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				return unimplemented(sqllex, "generic-type-name prepended casts")
			}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8572
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8628
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8646
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8650
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8692
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8697
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8699
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8706
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8724
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8726
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8733
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8735
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8738
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8743
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8745
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8748
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8753
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8755
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8762
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8763
		{
			return unimplemented(sqllex, "treat")
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8765
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8784
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8786
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8789
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8794
		{
			return unimplemented(sqllex, "within group")
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8795
		{
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8799
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8803
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8810
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8820
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8830
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8838
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8842
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8846
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8873
		{
			sqlVAL.str = ""
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8879
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8905
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8919
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8932
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8960
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8972
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8988
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8992
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8996
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9000
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9005
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9018
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9022
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9029
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9041
		{
			sqlVAL.union.val = tree.Any
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9045
		{
			sqlVAL.union.val = tree.Some
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9049
		{
			sqlVAL.union.val = tree.All
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9055
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9056
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9057
		{
			sqlVAL.union.val = tree.Div
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9060
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9061
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9062
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9063
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = tree.LT
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9065
		{
			sqlVAL.union.val = tree.GT
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9066
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9067
		{
			sqlVAL.union.val = tree.LE
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9068
		{
			sqlVAL.union.val = tree.GE
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9069
		{
			sqlVAL.union.val = tree.NE
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9073
		{
			sqlVAL.union.val = tree.Like
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9074
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9075
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9076
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9103
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9109
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9113
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9117
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9128
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9132
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9138
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9142
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9149
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9165
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9175
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9179
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9185
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9195
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9199
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9222
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9226
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9230
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9236
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9243
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9247
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9264
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9268
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9272
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9276
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9280
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9286
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9292
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9298
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9302
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9306
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9312
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9324
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9331
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9341
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9347
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9351
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9358
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9364
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9368
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9375
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9381
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9390
		{
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9391
		{
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9395
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9405
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9414
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9418
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9422
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9430
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9440
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9463
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9471
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9494
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9503
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9507
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9511
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9515
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9521
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9540
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9544
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9556
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9560
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9569
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9580
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9589
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9597
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9609
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9710
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9717
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9721
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9725
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9739
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9743
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9747
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9760
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9769
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9787
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9800
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9807
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9832
		{
			sqlVAL.str = ""
		}
	case 1784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9838
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9842
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
